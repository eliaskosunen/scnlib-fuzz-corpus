_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSL_T0_E_clIccEEDaSL_SV_:
  859|  1.31k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSL_T0_E_clIwcEEDaSL_SV_:
  859|    740|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  859|  79.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3806|  10.5M|{
 3807|  10.5M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3807:19): [Folded - Ignored]
  ------------------
 3808|  10.5M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3809|  10.5M|    }
 3810|  10.5M|    else if constexpr (sizeof(U) == 2) {
 3811|  10.5M|        return utf16_code_point_length_by_starting_code_unit(ch);
 3812|  10.5M|    }
 3813|  10.5M|    else {
 3814|       |        // utf-32
 3815|  10.5M|        static_assert(sizeof(U) == 4);
 3816|  10.5M|        SCN_UNUSED(ch);
 3817|  10.5M|        return 1;
 3818|  10.5M|    }
 3819|  10.5M|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3770|  10.5M|{
 3771|  10.5M|    static_assert(sizeof(U8) == 1);
 3772|       |
 3773|  10.5M|    SCN_GCC_COMPAT_PUSH
 3774|  10.5M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3775|  10.5M|    constexpr char lengths[] =
 3776|  10.5M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3777|  10.5M|        "\1\1\1\1\1\1\1\1"
 3778|  10.5M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3779|       |                            // byte
 3780|  10.5M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3781|  10.5M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3782|  10.5M|        "\4";               // highest bits 11110 -> 4-byte cp
 3783|  10.5M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3784|  10.5M|    SCN_GCC_COMPAT_POP
 3785|  10.5M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4012|  9.54M|{
 4013|  9.54M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4013:19): [Folded - Ignored]
  ------------------
 4014|  9.54M|        return decode_utf8_code_point_exhaustive(input);
 4015|  9.54M|    }
 4016|  9.54M|    else if constexpr (sizeof(CharT) == 2) {
 4017|  9.54M|        return decode_utf16_code_point_exhaustive(input);
 4018|  9.54M|    }
 4019|  9.54M|    else {
 4020|  9.54M|        SCN_EXPECT(input.size() == 1);
 4021|  9.54M|        auto cp = static_cast<char32_t>(input.front());
 4022|  9.54M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4023|  9.54M|            return invalid_code_point;
 4024|  9.54M|        }
 4025|  9.54M|        return cp;
 4026|  9.54M|    }
 4027|  9.54M|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3825|  9.54M|{
 3826|  9.54M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  9.54M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.54M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3827|       |
 3828|  9.54M|    const auto is_trailing_code_unit = [](char ch) {
 3829|  9.54M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3830|  9.54M|    };
 3831|       |
 3832|  9.54M|    if (input.size() == 1) {
  ------------------
  |  Branch (3832:9): [True: 8.59M, False: 946k]
  ------------------
 3833|  8.59M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3833:13): [True: 108, False: 8.59M]
  ------------------
 3834|    108|            SCN_UNLIKELY_ATTR
 3835|    108|            return invalid_code_point;
 3836|    108|        }
 3837|  8.59M|        return static_cast<char32_t>(input[0]);
 3838|  8.59M|    }
 3839|       |
 3840|   946k|    if (input.size() == 2) {
  ------------------
  |  Branch (3840:9): [True: 897k, False: 48.9k]
  ------------------
 3841|   897k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3841:13): [True: 66, False: 897k]
  ------------------
 3842|     66|            SCN_UNLIKELY_ATTR
 3843|     66|            return invalid_code_point;
 3844|     66|        }
 3845|   897k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3845:13): [True: 16.7k, False: 881k]
  ------------------
 3846|  16.7k|            SCN_UNLIKELY_ATTR
 3847|  16.7k|            return invalid_code_point;
 3848|  16.7k|        }
 3849|       |
 3850|   881k|        char32_t cp{};
 3851|   881k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3852|   881k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3853|   881k|        return cp;
 3854|   897k|    }
 3855|       |
 3856|  48.9k|    if (input.size() == 3) {
  ------------------
  |  Branch (3856:9): [True: 36.0k, False: 12.8k]
  ------------------
 3857|  36.0k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3857:13): [True: 6, False: 36.0k]
  ------------------
 3858|      6|            SCN_UNLIKELY_ATTR
 3859|      6|            return invalid_code_point;
 3860|      6|        }
 3861|  36.0k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3861:13): [True: 10.9k, False: 25.1k]
  ------------------
 3862|  36.0k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3862:13): [True: 1.58k, False: 23.5k]
  ------------------
 3863|  12.5k|            SCN_UNLIKELY_ATTR
 3864|  12.5k|            return invalid_code_point;
 3865|  12.5k|        }
 3866|       |
 3867|  23.5k|        char32_t cp{};
 3868|  23.5k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3869|  23.5k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3870|  23.5k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3871|  23.5k|        return cp;
 3872|  36.0k|    }
 3873|       |
 3874|  12.8k|    if (input.size() == 4) {
  ------------------
  |  Branch (3874:9): [True: 12.8k, False: 0]
  ------------------
 3875|  12.8k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3875:13): [True: 0, False: 12.8k]
  ------------------
 3876|      0|            SCN_UNLIKELY_ATTR
 3877|      0|            return invalid_code_point;
 3878|      0|        }
 3879|  12.8k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3879:13): [True: 6.41k, False: 6.47k]
  ------------------
 3880|  6.41k|            SCN_UNLIKELY_ATTR
 3881|  6.41k|            return invalid_code_point;
 3882|  6.41k|        }
 3883|  6.47k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3883:13): [True: 1.82k, False: 4.64k]
  ------------------
 3884|  6.47k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3884:13): [True: 631, False: 4.01k]
  ------------------
 3885|  6.47k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3885:13): [True: 426, False: 3.58k]
  ------------------
 3886|  2.88k|            SCN_UNLIKELY_ATTR
 3887|  2.88k|            return invalid_code_point;
 3888|  2.88k|        }
 3889|       |
 3890|  3.58k|        char32_t cp{};
 3891|  3.58k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3892|  3.58k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3893|  3.58k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3894|  3.58k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3895|  3.58k|        return cp;
 3896|  6.47k|    }
 3897|       |
 3898|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3899|       |    // gcc 7 thinks we'll get here, even when we won't
 3900|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3901|      0|#endif
 3902|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3903|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3828|   974k|    const auto is_trailing_code_unit = [](char ch) {
 3829|   974k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3830|   974k|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3698|  4.47M|{
 3699|  4.47M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3699:19): [Folded - Ignored]
  |  Branch (3699:19): [Folded - Ignored]
  ------------------
 3700|  4.47M|                                          decltype(first), decltype(last)> &&
 3701|  4.47M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3701:19): [Folded - Ignored]
  ------------------
 3702|  4.47M|        return {first, last};
 3703|  4.47M|    }
 3704|  4.47M|    else {
 3705|  4.47M|        return {to_address(first), static_cast<size_t>(std::distance(
 3706|  4.47M|                                       to_address(first), to_address(last)))};
 3707|  4.47M|    }
 3708|  4.47M|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  13.5M|{
  326|  13.5M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  13.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  13.5M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  303|  13.5M|{
  304|  13.5M|    return p;
  305|  13.5M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3729|  3.20M|{
 3730|  3.20M|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (3730:19): [Folded - Ignored]
  |  Branch (3730:19): [Folded - Ignored]
  ------------------
 3731|  3.20M|                      typename std::basic_string_view<CharT>::iterator,
 3732|  3.20M|                      decltype(it)> &&
 3733|  3.20M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3733:19): [Folded - Ignored]
  ------------------
 3734|  3.20M|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  3.20M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3735|  3.20M|        return it;
 3736|  3.20M|    }
 3737|  3.20M|    else {
 3738|  3.20M|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3739|  3.20M|    }
 3740|  3.20M|}
_ZN3scn2v34scanIJcERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8866|  9.49k|{
 8867|  9.49k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  9.49k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  9.49k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.49k|    static_cast<    \
  |  |  929|  9.49k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.49k|    static_cast<    \
  |  |  929|  9.49k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  9.49k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJcEEEDav:
 5395|  18.9k|{
 5396|  18.9k|    detail::check_scan_arg_types<Args...>();
 5397|  18.9k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  18.9k|}
_ZN3scn2v36detail20check_scan_arg_typesIJcEEEvv:
 5134|  18.9k|{
 5135|  18.9k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  18.9k|                  "Scan argument types must be default constructible");
 5137|  18.9k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  18.9k|                  "Scan argument types must be Destructible");
 5139|  18.9k|    static_assert(
 5140|  18.9k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  18.9k|        "Scan argument types must not be references");
 5142|  18.9k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEEC2Ev:
 5348|  18.9k|    {
 5349|  18.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEE12make_argptrsIJcEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  18.9k|    {
 5360|  18.9k|        return {detail::make_arg<
 5361|  18.9k|            kind, Context,
 5362|  18.9k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  18.9k|                                 typename Context::char_type>::value>(args)...};
 5364|  18.9k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE12EcvEEPvRT2_:
 5169|  18.9k|{
 5170|  18.9k|    return make_value<Context>(value).ref_value;
 5171|  18.9k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEcEEDaRT0_:
 5119|  18.9k|{
 5120|  18.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  18.9k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  18.9k|                                  needs_context_tag>) {
 5124|  18.9k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  18.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  18.9k|    }
 5126|  18.9k|    else {
 5127|  18.9k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  18.9k|            value, context_tag<Context>{}));
 5129|  18.9k|    }
 5130|  18.9k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERc:
 4987|  18.9k|    {
 4988|  18.9k|        if constexpr (std::is_same_v<char_type, char> &&
  ------------------
  |  Branch (4988:23): [Folded - Ignored]
  |  Branch (4988:23): [Folded - Ignored]
  ------------------
 4989|  18.9k|                      !is_type_disabled<char_type>) {
  ------------------
  |  Branch (4989:23): [Folded - Ignored]
  ------------------
 4990|  18.9k|            return val;
 4991|  18.9k|        }
 4992|  18.9k|        else if constexpr (is_type_disabled<char_type>) {
 4993|  18.9k|            return unscannable_disabled{val};
 4994|  18.9k|        }
 4995|  18.9k|        else {
 4996|  18.9k|            SCN_UNUSED(val);
 4997|  18.9k|            return unscannable_char{};
 4998|  18.9k|        }
 4999|  18.9k|    }
_ZN3scn2v36detail15make_value_implIRcEEDaOT_:
 5088|  18.9k|{
 5089|  18.9k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  18.9k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  18.9k|    constexpr bool scannable_char =
 5093|  18.9k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  18.9k|    static_assert(scannable_char,
 5095|  18.9k|                  "Cannot scan an argument of an unsupported character "
 5096|  18.9k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  18.9k|    constexpr bool scannable_const =
 5099|  18.9k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  18.9k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  18.9k|    constexpr bool scannable_disabled =
 5103|  18.9k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  18.9k|    static_assert(scannable_disabled,
 5105|  18.9k|                  "Cannot scan an argument that has been disabled by "
 5106|  18.9k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  18.9k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  18.9k|    static_assert(
 5110|  18.9k|        scannable,
 5111|  18.9k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  18.9k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  18.9k|    return arg_value{arg};
 5115|  18.9k|}
_ZN3scn2v36detail9arg_valueC2IcEERT_:
 4901|  18.9k|    {
 4902|  18.9k|    }
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESE_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEEEOSA_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8653|  85.4k|{
 8654|  85.4k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  85.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8655|  85.4k|}
_ZN3scn2v36detail13vscan_genericIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS1_22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEEOSB_NS4_IT0_NS5_ISN_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISN_EEEE:
 8590|  85.4k|{
 8591|  85.4k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|  85.4k|    auto result = vscan_impl(buffer, format, args);
 8594|  85.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  85.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 83.8k, False: 1.67k]
  |  |  ------------------
  ------------------
 8595|  83.8k|        return unexpected(result.error());
 8596|  83.8k|    }
 8597|  1.67k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.67k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|  85.4k|}
_ZN3scn2v36detail16make_scan_bufferINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaRKT_:
 4719|   170k|{
 4720|   170k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|   170k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|   170k|                  "\n"
 4724|   170k|                  "Unsupported range type given as input to a scanning "
 4725|   170k|                  "function.\n"
 4726|   170k|                  "A range needs to have a character type (value type) "
 4727|   170k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|   170k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|   170k|                  "to be included.\n"
 4730|   170k|                  "See the scnlib documentation for more details.");
 4731|   170k|    static_assert(
 4732|   170k|        !std::is_same_v<T, custom_char_traits>,
 4733|   170k|        "\n"
 4734|   170k|        "Unsupported range type given as input to a scanning "
 4735|   170k|        "function.\n"
 4736|   170k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|   170k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|   170k|        "not supported.");
 4739|   170k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|   170k|                  "\n"
 4741|   170k|                  "Unsupported range type given as input to a scanning "
 4742|   170k|                  "function.\n"
 4743|   170k|                  "file_marker_found cannot be used as an "
 4744|   170k|                  "source range type to scn::scan.\n"
 4745|   170k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|   170k|                  "and do not provide an explicit source range, "
 4747|   170k|                  "or use scn::scan with a FILE* directly.");
 4748|   170k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|   170k|                  "\n"
 4750|   170k|                  "Unsupported range type given as input to a scanning "
 4751|   170k|                  "function.\n"
 4752|   170k|                  "In order to be scannable, a range needs to satisfy "
 4753|   170k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|   170k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|   170k|                  "\n"
 4756|   170k|                  "Unsupported range type given as input to a scanning "
 4757|   170k|                  "function.\n"
 4758|   170k|                  "A range needs to model forward_range and have a valid "
 4759|   170k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|   170k|                  "Examples of scannable ranges are std::string, "
 4761|   170k|                  "std::string_view, "
 4762|   170k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|   170k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|   170k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|   170k|}
_ZN3scn2v36detail17_make_scan_buffer4implIcEEDaNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEENS1_12priority_tagILm3EEE:
 4611|   170k|{
 4612|   170k|    if constexpr (is_valid_char_type<CharT>) {
  ------------------
  |  Branch (4612:19): [Folded - Ignored]
  ------------------
 4613|   170k|        return r;
 4614|       |        // return make_string_scan_buffer(r);
 4615|   170k|    }
 4616|   170k|    else {
 4617|   170k|        return invalid_char_type{};
 4618|   170k|    }
 4619|   170k|}
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1597|   554k|    {
 1598|   554k|        return has_value();
 1599|   554k|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  484|  1.10M|    {
  485|  1.10M|        return m_has_value;
  486|  1.10M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1603|   550k|    {
 1604|   550k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   550k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   550k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   550k|        return this->get_unexpected().error();
 1606|   550k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   550k|    {
  468|   550k|        return m_unexpected;
  469|   550k|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  360|  3.59M|    {
  361|  3.59M|        return m_unexpected;
  362|  3.59M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  346|  1.88M|    {
  347|  1.88M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  1.88M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  1.88M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|   167k|    {
 1476|   167k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|   167k|    {
  447|   167k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  355|  2.07M|    {
  356|  2.07M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  2.07M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  2.07M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   170k|    {
 1177|   170k|    }
_ZN3scn2v36detail23make_vscan_result_rangeIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_l:
 5922|  3.34k|{
 5923|  3.34k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|  3.34k|                      ranges::iterator_t<SourceRange>>) {
 5925|  3.34k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|  3.34k|    }
 5927|  3.34k|    else {
 5928|  3.34k|        auto it = ranges::begin(source);
 5929|  3.34k|        while (n > 0) {
 5930|  3.34k|            --n;
 5931|  3.34k|            ++it;
 5932|  3.34k|        }
 5933|  3.34k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|  3.34k|    }
 5935|  3.34k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  3.34k|    {
 2724|  3.34k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  3.34k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  3.34k|    {
 2705|  3.34k|        return decay_copy(t.begin());
 2706|  3.34k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1948|  62.7k|{
 1949|  62.7k|    return SCN_FWD(t);
  ------------------
  |  |  930|  62.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  62.7k|}
_ZN3scn2v36detail27make_vscan_result_range_endINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaRT_:
 5909|  3.34k|{
 5910|  3.34k|    return ranges::end(source);
 5911|  3.34k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  3.34k|    {
 2781|  3.34k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  3.34k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  3.34k|    {
 2763|  3.34k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  3.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  3.34k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_LPv0EEET_S6_:
 3315|  1.19M|    {
 3316|  1.19M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1652|  4.18k|    {
 1653|  4.18k|        return value();
 1654|  4.18k|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1626|  4.18k|    {
 1627|  4.18k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.18k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.18k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.18k|        return this->get_value();
 1629|  4.18k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  450|  4.18k|    {
  451|  4.18k|        return m_value;
  452|  4.18k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|  3.34k|    {
 1430|  3.34k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  436|  3.34k|    {
  437|  3.34k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEcvS6_Ev:
 7974|  18.9k|    {
 7975|  18.9k|        return m_str;
 7976|  18.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJcEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  18.9k|    {
 5426|  18.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEE12arg_pointersEv:
 5378|  18.9k|    {
 5379|  18.9k|        return m_argptrs;
 5380|  18.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5477|   170k|    {
 5478|   170k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJcEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  18.9k|{
 8820|  18.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  18.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.7k, False: 196]
  |  |  ------------------
  ------------------
 8821|  18.7k|        return unexpected(result.error());
 8822|  18.7k|    }
 8823|    196|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    196|    static_cast<    \
  |  |  929|    196|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    196|    static_cast<    \
  |  |  929|    196|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  18.9k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1597|   170k|    {
 1598|   170k|        return has_value();
 1599|   170k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   341k|    {
  485|   341k|        return m_has_value;
  486|   341k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1603|   167k|    {
 1604|   167k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   167k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   167k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   167k|        return this->get_unexpected().error();
 1606|   167k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   167k|    {
  468|   167k|        return m_unexpected;
  469|   167k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  18.7k|    {
 1476|  18.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  18.7k|    {
  447|  18.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  18.9k|    {
 1177|  18.9k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1652|  3.34k|    {
 1653|  3.34k|        return value();
 1654|  3.34k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|  3.34k|    {
 1627|  3.34k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.34k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.34k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.34k|        return this->get_value();
 1629|  3.34k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  3.34k|    {
  451|  3.34k|        return m_value;
  452|  3.34k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJcEEC2ES8_ONSt3__15tupleIJcEEE:
 5829|    196|    {
 5830|    196|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5680|  3.34k|    {
 5681|  3.34k|    }
_ZN3scn2v36detail25scan_result_value_storageIJcEEC2EONSt3__15tupleIJcEEE:
 5615|    196|    {
 5616|    196|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|    196|    {
 1430|    196|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|    196|    {
  437|    196|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEE4argsEv:
 5373|  18.9k|    {
 5374|  18.9k|        return m_args;
 5375|  18.9k|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7690|   170k|{
 7691|   170k|    return s;
 7692|   170k|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7667|   170k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  18.9k|    {
 7971|  18.9k|    }
_ZN3scn2v34scanIJcENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8933|  9.49k|{
 8934|  9.49k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  9.49k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  9.49k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.49k|    static_cast<    \
  |  |  929|  9.49k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.49k|    static_cast<    \
  |  |  929|  9.49k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  9.49k|}
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS2_6localeEvEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEERKT0_OSB_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8671|  85.4k|{
 8672|  85.4k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  85.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8673|  85.4k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS1_22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT_OSC_NS5_IT1_NS6_ISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISR_EEEE:
 8606|  85.4k|{
 8607|  85.4k|#if !SCN_DISABLE_LOCALE
 8608|  85.4k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|  85.4k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|  85.4k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|  85.4k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|  85.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  85.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 83.8k, False: 1.67k]
  |  |  ------------------
  ------------------
 8615|  83.8k|        return unexpected(result.error());
 8616|  83.8k|    }
 8617|  1.67k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.67k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|  85.4k|}
_ZN3scn2v34scanIJiERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8866|  9.49k|{
 8867|  9.49k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  9.49k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  9.49k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.49k|    static_cast<    \
  |  |  929|  9.49k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.49k|    static_cast<    \
  |  |  929|  9.49k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  9.49k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJiEEEDav:
 5395|  18.9k|{
 5396|  18.9k|    detail::check_scan_arg_types<Args...>();
 5397|  18.9k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  18.9k|}
_ZN3scn2v36detail20check_scan_arg_typesIJiEEEvv:
 5134|  56.9k|{
 5135|  56.9k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  56.9k|                  "Scan argument types must be default constructible");
 5137|  56.9k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  56.9k|                  "Scan argument types must be Destructible");
 5139|  56.9k|    static_assert(
 5140|  56.9k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  56.9k|        "Scan argument types must not be references");
 5142|  56.9k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEEC2Ev:
 5348|  18.9k|    {
 5349|  18.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  18.9k|    {
 5360|  18.9k|        return {detail::make_arg<
 5361|  18.9k|            kind, Context,
 5362|  18.9k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  18.9k|                                 typename Context::char_type>::value>(args)...};
 5364|  18.9k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE3EivEEPvRT2_:
 5169|  18.9k|{
 5170|  18.9k|    return make_value<Context>(value).ref_value;
 5171|  18.9k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEiEEDaRT0_:
 5119|  18.9k|{
 5120|  18.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  18.9k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  18.9k|                                  needs_context_tag>) {
 5124|  18.9k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  18.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  18.9k|    }
 5126|  18.9k|    else {
 5127|  18.9k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  18.9k|            value, context_tag<Context>{}));
 5129|  18.9k|    }
 5130|  18.9k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERi:
 4958|  18.9k|    {                                                                        \
 4959|  18.9k|        return val;                                                          \
 4960|  18.9k|    }
_ZN3scn2v36detail15make_value_implIRiEEDaOT_:
 5088|  56.9k|{
 5089|  56.9k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  56.9k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  56.9k|    constexpr bool scannable_char =
 5093|  56.9k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  56.9k|    static_assert(scannable_char,
 5095|  56.9k|                  "Cannot scan an argument of an unsupported character "
 5096|  56.9k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  56.9k|    constexpr bool scannable_const =
 5099|  56.9k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  56.9k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  56.9k|    constexpr bool scannable_disabled =
 5103|  56.9k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  56.9k|    static_assert(scannable_disabled,
 5105|  56.9k|                  "Cannot scan an argument that has been disabled by "
 5106|  56.9k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  56.9k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  56.9k|    static_assert(
 5110|  56.9k|        scannable,
 5111|  56.9k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  56.9k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  56.9k|    return arg_value{arg};
 5115|  56.9k|}
_ZN3scn2v36detail9arg_valueC2IiEERT_:
 4901|  56.9k|    {
 4902|  56.9k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEcvS6_Ev:
 7974|  18.9k|    {
 7975|  18.9k|        return m_str;
 7976|  18.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJiEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  18.9k|    {
 5426|  18.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE12arg_pointersEv:
 5378|  18.9k|    {
 5379|  18.9k|        return m_argptrs;
 5380|  18.9k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  18.9k|{
 8820|  18.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  18.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.9k, False: 0]
  |  |  ------------------
  ------------------
 8821|  18.9k|        return unexpected(result.error());
 8822|  18.9k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  18.9k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  18.9k|    {
 1476|  18.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  18.9k|    {
  447|  18.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  18.9k|    {
 1177|  18.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE4argsEv:
 5373|  18.9k|    {
 5374|  18.9k|        return m_args;
 5375|  18.9k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  18.9k|    {
 7971|  18.9k|    }
_ZN3scn2v34scanIJiENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8933|  9.49k|{
 8934|  9.49k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  9.49k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  9.49k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.49k|    static_cast<    \
  |  |  929|  9.49k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.49k|    static_cast<    \
  |  |  929|  9.49k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  9.49k|}
_ZN3scn2v34scanIJjERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8866|  9.49k|{
 8867|  9.49k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  9.49k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  9.49k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.49k|    static_cast<    \
  |  |  929|  9.49k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.49k|    static_cast<    \
  |  |  929|  9.49k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  9.49k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJjEEEDav:
 5395|  18.9k|{
 5396|  18.9k|    detail::check_scan_arg_types<Args...>();
 5397|  18.9k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  18.9k|}
_ZN3scn2v36detail20check_scan_arg_typesIJjEEEvv:
 5134|  56.9k|{
 5135|  56.9k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  56.9k|                  "Scan argument types must be default constructible");
 5137|  56.9k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  56.9k|                  "Scan argument types must be Destructible");
 5139|  56.9k|    static_assert(
 5140|  56.9k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  56.9k|        "Scan argument types must not be references");
 5142|  56.9k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEEC2Ev:
 5348|  18.9k|    {
 5349|  18.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  18.9k|    {
 5360|  18.9k|        return {detail::make_arg<
 5361|  18.9k|            kind, Context,
 5362|  18.9k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  18.9k|                                 typename Context::char_type>::value>(args)...};
 5364|  18.9k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE8EjvEEPvRT2_:
 5169|  18.9k|{
 5170|  18.9k|    return make_value<Context>(value).ref_value;
 5171|  18.9k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEjEEDaRT0_:
 5119|  18.9k|{
 5120|  18.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  18.9k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  18.9k|                                  needs_context_tag>) {
 5124|  18.9k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  18.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  18.9k|    }
 5126|  18.9k|    else {
 5127|  18.9k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  18.9k|            value, context_tag<Context>{}));
 5129|  18.9k|    }
 5130|  18.9k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERj:
 4958|  18.9k|    {                                                                        \
 4959|  18.9k|        return val;                                                          \
 4960|  18.9k|    }
_ZN3scn2v36detail15make_value_implIRjEEDaOT_:
 5088|  56.9k|{
 5089|  56.9k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  56.9k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  56.9k|    constexpr bool scannable_char =
 5093|  56.9k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  56.9k|    static_assert(scannable_char,
 5095|  56.9k|                  "Cannot scan an argument of an unsupported character "
 5096|  56.9k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  56.9k|    constexpr bool scannable_const =
 5099|  56.9k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  56.9k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  56.9k|    constexpr bool scannable_disabled =
 5103|  56.9k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  56.9k|    static_assert(scannable_disabled,
 5105|  56.9k|                  "Cannot scan an argument that has been disabled by "
 5106|  56.9k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  56.9k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  56.9k|    static_assert(
 5110|  56.9k|        scannable,
 5111|  56.9k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  56.9k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  56.9k|    return arg_value{arg};
 5115|  56.9k|}
_ZN3scn2v36detail9arg_valueC2IjEERT_:
 4901|  56.9k|    {
 4902|  56.9k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEcvS6_Ev:
 7974|  18.9k|    {
 7975|  18.9k|        return m_str;
 7976|  18.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJjEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  18.9k|    {
 5426|  18.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE12arg_pointersEv:
 5378|  18.9k|    {
 5379|  18.9k|        return m_argptrs;
 5380|  18.9k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  18.9k|{
 8820|  18.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  18.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.9k, False: 0]
  |  |  ------------------
  ------------------
 8821|  18.9k|        return unexpected(result.error());
 8822|  18.9k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  18.9k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  18.9k|    {
 1476|  18.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  18.9k|    {
  447|  18.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  18.9k|    {
 1177|  18.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE4argsEv:
 5373|  18.9k|    {
 5374|  18.9k|        return m_args;
 5375|  18.9k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  18.9k|    {
 7971|  18.9k|    }
_ZN3scn2v34scanIJjENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8933|  9.49k|{
 8934|  9.49k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  9.49k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  9.49k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.49k|    static_cast<    \
  |  |  929|  9.49k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.49k|    static_cast<    \
  |  |  929|  9.49k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  9.49k|}
_ZN3scn2v34scanIJdERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8866|  9.49k|{
 8867|  9.49k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  9.49k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  9.49k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.49k|    static_cast<    \
  |  |  929|  9.49k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.49k|    static_cast<    \
  |  |  929|  9.49k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  9.49k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJdEEEDav:
 5395|  18.9k|{
 5396|  18.9k|    detail::check_scan_arg_types<Args...>();
 5397|  18.9k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  18.9k|}
_ZN3scn2v36detail20check_scan_arg_typesIJdEEEvv:
 5134|  56.9k|{
 5135|  56.9k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  56.9k|                  "Scan argument types must be default constructible");
 5137|  56.9k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  56.9k|                  "Scan argument types must be Destructible");
 5139|  56.9k|    static_assert(
 5140|  56.9k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  56.9k|        "Scan argument types must not be references");
 5142|  56.9k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEEC2Ev:
 5348|  18.9k|    {
 5349|  18.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  18.9k|    {
 5360|  18.9k|        return {detail::make_arg<
 5361|  18.9k|            kind, Context,
 5362|  18.9k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  18.9k|                                 typename Context::char_type>::value>(args)...};
 5364|  18.9k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE17EdvEEPvRT2_:
 5169|  18.9k|{
 5170|  18.9k|    return make_value<Context>(value).ref_value;
 5171|  18.9k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEdEEDaRT0_:
 5119|  18.9k|{
 5120|  18.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  18.9k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  18.9k|                                  needs_context_tag>) {
 5124|  18.9k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  18.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  18.9k|    }
 5126|  18.9k|    else {
 5127|  18.9k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  18.9k|            value, context_tag<Context>{}));
 5129|  18.9k|    }
 5130|  18.9k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERd:
 4958|  18.9k|    {                                                                        \
 4959|  18.9k|        return val;                                                          \
 4960|  18.9k|    }
_ZN3scn2v36detail15make_value_implIRdEEDaOT_:
 5088|  56.9k|{
 5089|  56.9k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  56.9k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  56.9k|    constexpr bool scannable_char =
 5093|  56.9k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  56.9k|    static_assert(scannable_char,
 5095|  56.9k|                  "Cannot scan an argument of an unsupported character "
 5096|  56.9k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  56.9k|    constexpr bool scannable_const =
 5099|  56.9k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  56.9k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  56.9k|    constexpr bool scannable_disabled =
 5103|  56.9k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  56.9k|    static_assert(scannable_disabled,
 5105|  56.9k|                  "Cannot scan an argument that has been disabled by "
 5106|  56.9k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  56.9k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  56.9k|    static_assert(
 5110|  56.9k|        scannable,
 5111|  56.9k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  56.9k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  56.9k|    return arg_value{arg};
 5115|  56.9k|}
_ZN3scn2v36detail9arg_valueC2IdEERT_:
 4901|  56.9k|    {
 4902|  56.9k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEcvS6_Ev:
 7974|  18.9k|    {
 7975|  18.9k|        return m_str;
 7976|  18.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  18.9k|    {
 5426|  18.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12arg_pointersEv:
 5378|  18.9k|    {
 5379|  18.9k|        return m_argptrs;
 5380|  18.9k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  18.9k|{
 8820|  18.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  18.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.9k, False: 0]
  |  |  ------------------
  ------------------
 8821|  18.9k|        return unexpected(result.error());
 8822|  18.9k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  18.9k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  18.9k|    {
 1476|  18.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  18.9k|    {
  447|  18.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  18.9k|    {
 1177|  18.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE4argsEv:
 5373|  18.9k|    {
 5374|  18.9k|        return m_args;
 5375|  18.9k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  18.9k|    {
 7971|  18.9k|    }
_ZN3scn2v34scanIJdENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8933|  9.49k|{
 8934|  9.49k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  9.49k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  9.49k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.49k|    static_cast<    \
  |  |  929|  9.49k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.49k|    static_cast<    \
  |  |  929|  9.49k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  9.49k|}
_ZN3scn2v34scanIJbERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8866|  9.49k|{
 8867|  9.49k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  9.49k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  9.49k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.49k|    static_cast<    \
  |  |  929|  9.49k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.49k|    static_cast<    \
  |  |  929|  9.49k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  9.49k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJbEEEDav:
 5395|  18.9k|{
 5396|  18.9k|    detail::check_scan_arg_types<Args...>();
 5397|  18.9k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  18.9k|}
_ZN3scn2v36detail20check_scan_arg_typesIJbEEEvv:
 5134|  56.9k|{
 5135|  56.9k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  56.9k|                  "Scan argument types must be default constructible");
 5137|  56.9k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  56.9k|                  "Scan argument types must be Destructible");
 5139|  56.9k|    static_assert(
 5140|  56.9k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  56.9k|        "Scan argument types must not be references");
 5142|  56.9k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEEC2Ev:
 5348|  18.9k|    {
 5349|  18.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEE12make_argptrsIJbEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  18.9k|    {
 5360|  18.9k|        return {detail::make_arg<
 5361|  18.9k|            kind, Context,
 5362|  18.9k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  18.9k|                                 typename Context::char_type>::value>(args)...};
 5364|  18.9k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE11EbvEEPvRT2_:
 5169|  18.9k|{
 5170|  18.9k|    return make_value<Context>(value).ref_value;
 5171|  18.9k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEbEEDaRT0_:
 5119|  18.9k|{
 5120|  18.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  18.9k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  18.9k|                                  needs_context_tag>) {
 5124|  18.9k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  18.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  18.9k|    }
 5126|  18.9k|    else {
 5127|  18.9k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  18.9k|            value, context_tag<Context>{}));
 5129|  18.9k|    }
 5130|  18.9k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERb:
 4958|  18.9k|    {                                                                        \
 4959|  18.9k|        return val;                                                          \
 4960|  18.9k|    }
_ZN3scn2v36detail15make_value_implIRbEEDaOT_:
 5088|  56.9k|{
 5089|  56.9k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  56.9k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  56.9k|    constexpr bool scannable_char =
 5093|  56.9k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  56.9k|    static_assert(scannable_char,
 5095|  56.9k|                  "Cannot scan an argument of an unsupported character "
 5096|  56.9k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  56.9k|    constexpr bool scannable_const =
 5099|  56.9k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  56.9k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  56.9k|    constexpr bool scannable_disabled =
 5103|  56.9k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  56.9k|    static_assert(scannable_disabled,
 5105|  56.9k|                  "Cannot scan an argument that has been disabled by "
 5106|  56.9k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  56.9k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  56.9k|    static_assert(
 5110|  56.9k|        scannable,
 5111|  56.9k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  56.9k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  56.9k|    return arg_value{arg};
 5115|  56.9k|}
_ZN3scn2v36detail9arg_valueC2IbEERT_:
 4901|  56.9k|    {
 4902|  56.9k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEcvS6_Ev:
 7974|  18.9k|    {
 7975|  18.9k|        return m_str;
 7976|  18.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJbEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  18.9k|    {
 5426|  18.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEE12arg_pointersEv:
 5378|  18.9k|    {
 5379|  18.9k|        return m_argptrs;
 5380|  18.9k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJbEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  18.9k|{
 8820|  18.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  18.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.9k, False: 0]
  |  |  ------------------
  ------------------
 8821|  18.9k|        return unexpected(result.error());
 8822|  18.9k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  18.9k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  18.9k|    {
 1476|  18.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  18.9k|    {
  447|  18.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  18.9k|    {
 1177|  18.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEE4argsEv:
 5373|  18.9k|    {
 5374|  18.9k|        return m_args;
 5375|  18.9k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  18.9k|    {
 7971|  18.9k|    }
_ZN3scn2v34scanIJbENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8933|  9.49k|{
 8934|  9.49k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  9.49k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  9.49k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.49k|    static_cast<    \
  |  |  929|  9.49k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.49k|    static_cast<    \
  |  |  929|  9.49k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  9.49k|}
_ZN3scn2v34scanIJPvERNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
 8866|  9.49k|{
 8867|  9.49k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  9.49k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  9.49k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.49k|    static_cast<    \
  |  |  929|  9.49k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.49k|    static_cast<    \
  |  |  929|  9.49k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  9.49k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJPvEEEDav:
 5395|  18.9k|{
 5396|  18.9k|    detail::check_scan_arg_types<Args...>();
 5397|  18.9k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  18.9k|}
_ZN3scn2v36detail20check_scan_arg_typesIJPvEEEvv:
 5134|  56.9k|{
 5135|  56.9k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  56.9k|                  "Scan argument types must be default constructible");
 5137|  56.9k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  56.9k|                  "Scan argument types must be Destructible");
 5139|  56.9k|    static_assert(
 5140|  56.9k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  56.9k|        "Scan argument types must not be references");
 5142|  56.9k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEEC2Ev:
 5348|  18.9k|    {
 5349|  18.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEE12make_argptrsIJS5_EEENSt3__15arrayIS5_Lm1EEEDpRT_:
 5359|  18.9k|    {
 5360|  18.9k|        return {detail::make_arg<
 5361|  18.9k|            kind, Context,
 5362|  18.9k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  18.9k|                                 typename Context::char_type>::value>(args)...};
 5364|  18.9k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE15EPvvEES7_RT2_:
 5169|  18.9k|{
 5170|  18.9k|    return make_value<Context>(value).ref_value;
 5171|  18.9k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEPvEEDaRT0_:
 5119|  18.9k|{
 5120|  18.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  18.9k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  18.9k|                                  needs_context_tag>) {
 5124|  18.9k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  18.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  18.9k|    }
 5126|  18.9k|    else {
 5127|  18.9k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  18.9k|            value, context_tag<Context>{}));
 5129|  18.9k|    }
 5130|  18.9k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERPv:
 4958|  18.9k|    {                                                                        \
 4959|  18.9k|        return val;                                                          \
 4960|  18.9k|    }
_ZN3scn2v36detail15make_value_implIRPvEEDaOT_:
 5088|  56.9k|{
 5089|  56.9k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  56.9k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  56.9k|    constexpr bool scannable_char =
 5093|  56.9k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  56.9k|    static_assert(scannable_char,
 5095|  56.9k|                  "Cannot scan an argument of an unsupported character "
 5096|  56.9k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  56.9k|    constexpr bool scannable_const =
 5099|  56.9k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  56.9k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  56.9k|    constexpr bool scannable_disabled =
 5103|  56.9k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  56.9k|    static_assert(scannable_disabled,
 5105|  56.9k|                  "Cannot scan an argument that has been disabled by "
 5106|  56.9k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  56.9k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  56.9k|    static_assert(
 5110|  56.9k|        scannable,
 5111|  56.9k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  56.9k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  56.9k|    return arg_value{arg};
 5115|  56.9k|}
_ZN3scn2v36detail9arg_valueC2IPvEERT_:
 4901|  56.9k|    {
 4902|  56.9k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEcvS6_Ev:
 7974|  18.9k|    {
 7975|  18.9k|        return m_str;
 7976|  18.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJPvEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  18.9k|    {
 5426|  18.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEE12arg_pointersEv:
 5378|  18.9k|    {
 5379|  18.9k|        return m_argptrs;
 5380|  18.9k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJPvEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSA_ISC_EEONSt3__15tupleIJSE_EEE:
 8819|  18.9k|{
 8820|  18.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  18.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.9k, False: 0]
  |  |  ------------------
  ------------------
 8821|  18.9k|        return unexpected(result.error());
 8822|  18.9k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  18.9k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEEC2ISC_LSA_0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  18.9k|    {
 1476|  18.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  446|  18.9k|    {
  447|  18.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  18.9k|    {
 1177|  18.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEE4argsEv:
 5373|  18.9k|    {
 5374|  18.9k|        return m_args;
 5375|  18.9k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  18.9k|    {
 7971|  18.9k|    }
_ZN3scn2v34scanIJPvENSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
 8933|  9.49k|{
 8934|  9.49k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  9.49k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  9.49k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.49k|    static_cast<    \
  |  |  929|  9.49k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.49k|    static_cast<    \
  |  |  929|  9.49k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  9.49k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEERNS2_17basic_string_viewIcS5_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEEOSF_NS0_24basic_scan_format_stringIcNSK_13type_identityISF_E4typeEJDpNSW_ISQ_E4typeEEEE:
 8866|  9.49k|{
 8867|  9.49k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  9.49k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  9.49k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.49k|    static_cast<    \
  |  |  929|  9.49k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.49k|    static_cast<    \
  |  |  929|  9.49k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  9.49k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEDav:
 5395|  18.9k|{
 5396|  18.9k|    detail::check_scan_arg_types<Args...>();
 5397|  18.9k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  18.9k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEvv:
 5134|  56.9k|{
 5135|  56.9k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  56.9k|                  "Scan argument types must be default constructible");
 5137|  56.9k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  56.9k|                  "Scan argument types must be Destructible");
 5139|  56.9k|    static_assert(
 5140|  56.9k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  56.9k|        "Scan argument types must not be references");
 5142|  56.9k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEC2Ev:
 5348|  18.9k|    {
 5349|  18.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  18.9k|    {
 5360|  18.9k|        return {detail::make_arg<
 5361|  18.9k|            kind, Context,
 5362|  18.9k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  18.9k|                                 typename Context::char_type>::value>(args)...};
 5364|  18.9k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEvEEPvRT2_:
 5169|  18.9k|{
 5170|  18.9k|    return make_value<Context>(value).ref_value;
 5171|  18.9k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDaRT0_:
 5119|  18.9k|{
 5120|  18.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  18.9k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  18.9k|                                  needs_context_tag>) {
 5124|  18.9k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  18.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  18.9k|    }
 5126|  18.9k|    else {
 5127|  18.9k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  18.9k|            value, context_tag<Context>{}));
 5129|  18.9k|    }
 5130|  18.9k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 4958|  18.9k|    {                                                                        \
 4959|  18.9k|        return val;                                                          \
 4960|  18.9k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEDaOT_:
 5088|  56.9k|{
 5089|  56.9k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  56.9k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  56.9k|    constexpr bool scannable_char =
 5093|  56.9k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  56.9k|    static_assert(scannable_char,
 5095|  56.9k|                  "Cannot scan an argument of an unsupported character "
 5096|  56.9k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  56.9k|    constexpr bool scannable_const =
 5099|  56.9k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  56.9k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  56.9k|    constexpr bool scannable_disabled =
 5103|  56.9k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  56.9k|    static_assert(scannable_disabled,
 5105|  56.9k|                  "Cannot scan an argument that has been disabled by "
 5106|  56.9k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  56.9k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  56.9k|    static_assert(
 5110|  56.9k|        scannable,
 5111|  56.9k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  56.9k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  56.9k|    return arg_value{arg};
 5115|  56.9k|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERT_:
 4901|  56.9k|    {
 4902|  56.9k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEcvS6_Ev:
 7974|  18.9k|    {
 7975|  18.9k|        return m_str;
 7976|  18.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  18.9k|    {
 5426|  18.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12arg_pointersEv:
 5378|  18.9k|    {
 5379|  18.9k|        return m_argptrs;
 5380|  18.9k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8819|  18.9k|{
 8820|  18.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  18.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.9k, False: 1.05k]
  |  |  ------------------
  ------------------
 8821|  17.9k|        return unexpected(result.error());
 8822|  17.9k|    }
 8823|  1.05k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  1.05k|    static_cast<    \
  |  |  929|  1.05k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  1.05k|    static_cast<    \
  |  |  929|  1.05k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  18.9k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1475|  17.9k|    {
 1476|  17.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  625|  17.9k|    {
  626|  17.9k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  17.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  17.9k|    {
  689|  17.9k|        scn::detail::construct_at(unexpected_ptr(),
  690|  17.9k|                                  std::forward<Args>(args)...);
  691|  17.9k|        m_has_value = false;
  692|  17.9k|    }
_ZN3scn2v36detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  391|   111k|{
  392|   111k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|   111k|        T(std::forward<Args>(args)...);
  394|   111k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  35.8k|    {
  718|  35.8k|        return reinterpret_cast<unexpected<E>*>(
  719|  35.8k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  35.8k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  35.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  18.9k|    {
 1177|  18.9k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5829|  1.05k|    {
 5830|  1.05k|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEC2EONS3_5tupleIJS9_EEE:
 5615|  1.29k|    {
 5616|  1.29k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|  1.05k|    {
 1430|  1.05k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  615|  1.05k|    {
  616|  1.05k|        construct(std::forward<Args>(args)...);
  617|  1.05k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|  1.05k|    {
  682|  1.05k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|  1.05k|        m_has_value = true;
  684|  1.05k|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|  1.05k|{
  392|  1.05k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  1.05k|        T(std::forward<Args>(args)...);
  394|  1.05k|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2EOSG_:
 5821|  1.05k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  2.10k|    {
  706|  2.10k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  2.10k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  2.10k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 5825|  2.10k|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE4argsEv:
 5373|  18.9k|    {
 5374|  18.9k|        return m_args;
 5375|  18.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEED2Ev:
 5370|  18.9k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  18.9k|    {
 7971|  18.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  18.9k|    {
  631|  18.9k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 1.05k, False: 17.9k]
  ------------------
  632|  1.05k|            destroy_value();
  633|  1.05k|        }
  634|  17.9k|        else {
  635|  17.9k|            destroy_unexpected();
  636|  17.9k|        }
  637|  18.9k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  18.9k|    {
  675|  18.9k|        return m_has_value;
  676|  18.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|  1.05k|    {
  696|  1.05k|        scn::detail::destroy_at(value_ptr());
  697|  1.05k|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  397|  1.05k|{
  398|  1.05k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|  1.05k|        for (auto& elem : *p) {
  400|  1.05k|            scn::detail::destroy_at(&elem);
  401|  1.05k|        }
  402|  1.05k|    }
  403|  1.05k|    else {
  404|  1.05k|        p->~T();
  405|  1.05k|    }
  406|  1.05k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  17.9k|    {
  700|  17.9k|        scn::detail::destroy_at(unexpected_ptr());
  701|  17.9k|    }
_ZN3scn2v36detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  397|   111k|{
  398|   111k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|   111k|        for (auto& elem : *p) {
  400|   111k|            scn::detail::destroy_at(&elem);
  401|   111k|        }
  402|   111k|    }
  403|   111k|    else {
  404|   111k|        p->~T();
  405|   111k|    }
  406|   111k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeERNS2_17basic_string_viewIcS5_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEERKT0_OSG_NS0_24basic_scan_format_stringIcNSL_13type_identityISG_E4typeEJDpNS10_ISR_E4typeEEEE:
 8933|  9.49k|{
 8934|  9.49k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  9.49k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  9.49k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.49k|    static_cast<    \
  |  |  929|  9.49k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.49k|    static_cast<    \
  |  |  929|  9.49k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  9.49k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEERNS2_17basic_string_viewIcNS4_IcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNSL_13type_identityISG_E4typeEJDpNSX_ISR_E4typeEEEE:
 8866|  9.49k|{
 8867|  9.49k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  9.49k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  9.49k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.49k|    static_cast<    \
  |  |  929|  9.49k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.49k|    static_cast<    \
  |  |  929|  9.49k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  9.49k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEEDav:
 5395|  18.9k|{
 5396|  18.9k|    detail::check_scan_arg_types<Args...>();
 5397|  18.9k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  18.9k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEEvv:
 5134|  56.9k|{
 5135|  56.9k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  56.9k|                  "Scan argument types must be default constructible");
 5137|  56.9k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  56.9k|                  "Scan argument types must be Destructible");
 5139|  56.9k|    static_assert(
 5140|  56.9k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  56.9k|        "Scan argument types must not be references");
 5142|  56.9k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEC2Ev:
 5348|  18.9k|    {
 5349|  18.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  18.9k|    {
 5360|  18.9k|        return {detail::make_arg<
 5361|  18.9k|            kind, Context,
 5362|  18.9k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  18.9k|                                 typename Context::char_type>::value>(args)...};
 5364|  18.9k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEvEEPvRT2_:
 5169|  18.9k|{
 5170|  18.9k|    return make_value<Context>(value).ref_value;
 5171|  18.9k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEDaRT0_:
 5119|  18.9k|{
 5120|  18.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  18.9k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  18.9k|                                  needs_context_tag>) {
 5124|  18.9k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  18.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  18.9k|    }
 5126|  18.9k|    else {
 5127|  18.9k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  18.9k|            value, context_tag<Context>{}));
 5129|  18.9k|    }
 5130|  18.9k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 4958|  18.9k|    {                                                                        \
 4959|  18.9k|        return val;                                                          \
 4960|  18.9k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEDaOT_:
 5088|  56.9k|{
 5089|  56.9k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  56.9k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  56.9k|    constexpr bool scannable_char =
 5093|  56.9k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  56.9k|    static_assert(scannable_char,
 5095|  56.9k|                  "Cannot scan an argument of an unsupported character "
 5096|  56.9k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  56.9k|    constexpr bool scannable_const =
 5099|  56.9k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  56.9k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  56.9k|    constexpr bool scannable_disabled =
 5103|  56.9k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  56.9k|    static_assert(scannable_disabled,
 5105|  56.9k|                  "Cannot scan an argument that has been disabled by "
 5106|  56.9k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  56.9k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  56.9k|    static_assert(
 5110|  56.9k|        scannable,
 5111|  56.9k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  56.9k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  56.9k|    return arg_value{arg};
 5115|  56.9k|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEERT_:
 4901|  56.9k|    {
 4902|  56.9k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEcvS6_Ev:
 7974|  18.9k|    {
 7975|  18.9k|        return m_str;
 7976|  18.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  18.9k|    {
 5426|  18.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12arg_pointersEv:
 5378|  18.9k|    {
 5379|  18.9k|        return m_argptrs;
 5380|  18.9k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8819|  18.9k|{
 8820|  18.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  18.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.9k, False: 1.05k]
  |  |  ------------------
  ------------------
 8821|  17.9k|        return unexpected(result.error());
 8822|  17.9k|    }
 8823|  1.05k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  1.05k|    static_cast<    \
  |  |  929|  1.05k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  1.05k|    static_cast<    \
  |  |  929|  1.05k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  18.9k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1475|  17.9k|    {
 1476|  17.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  625|  17.9k|    {
  626|  17.9k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  17.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  17.9k|    {
  689|  17.9k|        scn::detail::construct_at(unexpected_ptr(),
  690|  17.9k|                                  std::forward<Args>(args)...);
  691|  17.9k|        m_has_value = false;
  692|  17.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  35.8k|    {
  718|  35.8k|        return reinterpret_cast<unexpected<E>*>(
  719|  35.8k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  35.8k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  35.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  18.9k|    {
 1177|  18.9k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5829|  1.05k|    {
 5830|  1.05k|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEC2EONS3_5tupleIJS9_EEE:
 5615|  1.29k|    {
 5616|  1.29k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|  1.05k|    {
 1430|  1.05k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  615|  1.05k|    {
  616|  1.05k|        construct(std::forward<Args>(args)...);
  617|  1.05k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|  1.05k|    {
  682|  1.05k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|  1.05k|        m_has_value = true;
  684|  1.05k|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|  1.05k|{
  392|  1.05k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  1.05k|        T(std::forward<Args>(args)...);
  394|  1.05k|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2EOSG_:
 5821|  1.05k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  2.10k|    {
  706|  2.10k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  2.10k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  2.10k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 5825|  2.10k|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE4argsEv:
 5373|  18.9k|    {
 5374|  18.9k|        return m_args;
 5375|  18.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEED2Ev:
 5370|  18.9k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  18.9k|    {
 7971|  18.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  18.9k|    {
  631|  18.9k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 1.05k, False: 17.9k]
  ------------------
  632|  1.05k|            destroy_value();
  633|  1.05k|        }
  634|  17.9k|        else {
  635|  17.9k|            destroy_unexpected();
  636|  17.9k|        }
  637|  18.9k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  18.9k|    {
  675|  18.9k|        return m_has_value;
  676|  18.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|  1.05k|    {
  696|  1.05k|        scn::detail::destroy_at(value_ptr());
  697|  1.05k|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  397|  1.05k|{
  398|  1.05k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|  1.05k|        for (auto& elem : *p) {
  400|  1.05k|            scn::detail::destroy_at(&elem);
  401|  1.05k|        }
  402|  1.05k|    }
  403|  1.05k|    else {
  404|  1.05k|        p->~T();
  405|  1.05k|    }
  406|  1.05k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  17.9k|    {
  700|  17.9k|        scn::detail::destroy_at(unexpected_ptr());
  701|  17.9k|    }
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeERNS2_17basic_string_viewIcNS4_IcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNSM_13type_identityISH_E4typeEJDpNS11_ISS_E4typeEEEE:
 8933|  9.49k|{
 8934|  9.49k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  9.49k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  9.49k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.49k|    static_cast<    \
  |  |  929|  9.49k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.49k|    static_cast<    \
  |  |  929|  9.49k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  9.49k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEERS6_vEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8866|  9.49k|{
 8867|  9.49k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  9.49k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  9.49k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.49k|    static_cast<    \
  |  |  929|  9.49k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.49k|    static_cast<    \
  |  |  929|  9.49k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  9.49k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEEDav:
 5395|  18.9k|{
 5396|  18.9k|    detail::check_scan_arg_types<Args...>();
 5397|  18.9k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  18.9k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEEvv:
 5134|  18.9k|{
 5135|  18.9k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  18.9k|                  "Scan argument types must be default constructible");
 5137|  18.9k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  18.9k|                  "Scan argument types must be Destructible");
 5139|  18.9k|    static_assert(
 5140|  18.9k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  18.9k|        "Scan argument types must not be references");
 5142|  18.9k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEC2Ev:
 5348|  18.9k|    {
 5349|  18.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  18.9k|    {
 5360|  18.9k|        return {detail::make_arg<
 5361|  18.9k|            kind, Context,
 5362|  18.9k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  18.9k|                                 typename Context::char_type>::value>(args)...};
 5364|  18.9k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE19ENSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEvEEPvRT2_:
 5169|  18.9k|{
 5170|  18.9k|    return make_value<Context>(value).ref_value;
 5171|  18.9k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDaRT0_:
 5119|  18.9k|{
 5120|  18.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  18.9k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  18.9k|                                  needs_context_tag>) {
 5124|  18.9k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  18.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  18.9k|    }
 5126|  18.9k|    else {
 5127|  18.9k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  18.9k|            value, context_tag<Context>{}));
 5129|  18.9k|    }
 5130|  18.9k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 4958|  18.9k|    {                                                                        \
 4959|  18.9k|        return val;                                                          \
 4960|  18.9k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 5088|  18.9k|{
 5089|  18.9k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  18.9k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  18.9k|    constexpr bool scannable_char =
 5093|  18.9k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  18.9k|    static_assert(scannable_char,
 5095|  18.9k|                  "Cannot scan an argument of an unsupported character "
 5096|  18.9k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  18.9k|    constexpr bool scannable_const =
 5099|  18.9k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  18.9k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  18.9k|    constexpr bool scannable_disabled =
 5103|  18.9k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  18.9k|    static_assert(scannable_disabled,
 5105|  18.9k|                  "Cannot scan an argument that has been disabled by "
 5106|  18.9k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  18.9k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  18.9k|    static_assert(
 5110|  18.9k|        scannable,
 5111|  18.9k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  18.9k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  18.9k|    return arg_value{arg};
 5115|  18.9k|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEERT_:
 4901|  18.9k|    {
 4902|  18.9k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEcvS6_Ev:
 7974|  18.9k|    {
 7975|  18.9k|        return m_str;
 7976|  18.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  18.9k|    {
 5426|  18.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12arg_pointersEv:
 5378|  18.9k|    {
 5379|  18.9k|        return m_argptrs;
 5380|  18.9k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8819|  18.9k|{
 8820|  18.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  18.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.9k, False: 1.05k]
  |  |  ------------------
  ------------------
 8821|  17.9k|        return unexpected(result.error());
 8822|  17.9k|    }
 8823|  1.05k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  1.05k|    static_cast<    \
  |  |  929|  1.05k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  1.05k|    static_cast<    \
  |  |  929|  1.05k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  18.9k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1475|  17.9k|    {
 1476|  17.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  446|  17.9k|    {
  447|  17.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  18.9k|    {
 1177|  18.9k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5829|  1.05k|    {
 5830|  1.05k|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEC2EONS3_5tupleIJS7_EEE:
 5615|  1.05k|    {
 5616|  1.05k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1429|  1.05k|    {
 1430|  1.05k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  436|  1.05k|    {
  437|  1.05k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE4argsEv:
 5373|  18.9k|    {
 5374|  18.9k|        return m_args;
 5375|  18.9k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  18.9k|    {
 7971|  18.9k|    }
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS2_6localeERS6_vvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8933|  9.49k|{
 8934|  9.49k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  9.49k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  9.49k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.49k|    static_cast<    \
  |  |  929|  9.49k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.49k|    static_cast<    \
  |  |  929|  9.49k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  9.49k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJwEEEDav:
 5395|  37.9k|{
 5396|  37.9k|    detail::check_scan_arg_types<Args...>();
 5397|  37.9k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  37.9k|}
_ZN3scn2v36detail20check_scan_arg_typesIJwEEEvv:
 5134|  37.9k|{
 5135|  37.9k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  37.9k|                  "Scan argument types must be default constructible");
 5137|  37.9k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  37.9k|                  "Scan argument types must be Destructible");
 5139|  37.9k|    static_assert(
 5140|  37.9k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  37.9k|        "Scan argument types must not be references");
 5142|  37.9k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEEC2Ev:
 5348|  37.9k|    {
 5349|  37.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEE12make_argptrsIJwEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  37.9k|    {
 5360|  37.9k|        return {detail::make_arg<
 5361|  37.9k|            kind, Context,
 5362|  37.9k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  37.9k|                                 typename Context::char_type>::value>(args)...};
 5364|  37.9k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE13EwvEEPvRT2_:
 5169|  37.9k|{
 5170|  37.9k|    return make_value<Context>(value).ref_value;
 5171|  37.9k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEwEEDaRT0_:
 5119|  37.9k|{
 5120|  37.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  37.9k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  37.9k|                                  needs_context_tag>) {
 5124|  37.9k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  37.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  37.9k|    }
 5126|  37.9k|    else {
 5127|  37.9k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  37.9k|            value, context_tag<Context>{}));
 5129|  37.9k|    }
 5130|  37.9k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERw:
 4958|  37.9k|    {                                                                        \
 4959|  37.9k|        return val;                                                          \
 4960|  37.9k|    }
_ZN3scn2v36detail15make_value_implIRwEEDaOT_:
 5088|  37.9k|{
 5089|  37.9k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  37.9k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  37.9k|    constexpr bool scannable_char =
 5093|  37.9k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  37.9k|    static_assert(scannable_char,
 5095|  37.9k|                  "Cannot scan an argument of an unsupported character "
 5096|  37.9k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  37.9k|    constexpr bool scannable_const =
 5099|  37.9k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  37.9k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  37.9k|    constexpr bool scannable_disabled =
 5103|  37.9k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  37.9k|    static_assert(scannable_disabled,
 5105|  37.9k|                  "Cannot scan an argument that has been disabled by "
 5106|  37.9k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  37.9k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  37.9k|    static_assert(
 5110|  37.9k|        scannable,
 5111|  37.9k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  37.9k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  37.9k|    return arg_value{arg};
 5115|  37.9k|}
_ZN3scn2v36detail9arg_valueC2IwEERT_:
 4901|  37.9k|    {
 4902|  37.9k|    }
_ZN3scn2v36detail13vscan_genericIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS1_22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEEOSB_NS4_IT0_NS5_ISN_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISN_EEEE:
 8590|   170k|{
 8591|   170k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   170k|    auto result = vscan_impl(buffer, format, args);
 8594|   170k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   170k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 170k, False: 421]
  |  |  ------------------
  ------------------
 8595|   170k|        return unexpected(result.error());
 8596|   170k|    }
 8597|    421|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|    421|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   170k|}
_ZN3scn2v36detail16make_scan_bufferINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaRKT_:
 4719|   341k|{
 4720|   341k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|   341k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|   341k|                  "\n"
 4724|   341k|                  "Unsupported range type given as input to a scanning "
 4725|   341k|                  "function.\n"
 4726|   341k|                  "A range needs to have a character type (value type) "
 4727|   341k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|   341k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|   341k|                  "to be included.\n"
 4730|   341k|                  "See the scnlib documentation for more details.");
 4731|   341k|    static_assert(
 4732|   341k|        !std::is_same_v<T, custom_char_traits>,
 4733|   341k|        "\n"
 4734|   341k|        "Unsupported range type given as input to a scanning "
 4735|   341k|        "function.\n"
 4736|   341k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|   341k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|   341k|        "not supported.");
 4739|   341k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|   341k|                  "\n"
 4741|   341k|                  "Unsupported range type given as input to a scanning "
 4742|   341k|                  "function.\n"
 4743|   341k|                  "file_marker_found cannot be used as an "
 4744|   341k|                  "source range type to scn::scan.\n"
 4745|   341k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|   341k|                  "and do not provide an explicit source range, "
 4747|   341k|                  "or use scn::scan with a FILE* directly.");
 4748|   341k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|   341k|                  "\n"
 4750|   341k|                  "Unsupported range type given as input to a scanning "
 4751|   341k|                  "function.\n"
 4752|   341k|                  "In order to be scannable, a range needs to satisfy "
 4753|   341k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|   341k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|   341k|                  "\n"
 4756|   341k|                  "Unsupported range type given as input to a scanning "
 4757|   341k|                  "function.\n"
 4758|   341k|                  "A range needs to model forward_range and have a valid "
 4759|   341k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|   341k|                  "Examples of scannable ranges are std::string, "
 4761|   341k|                  "std::string_view, "
 4762|   341k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|   341k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|   341k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|   341k|}
_ZN3scn2v36detail17_make_scan_buffer4implIwEEDaNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEENS1_12priority_tagILm3EEE:
 4611|   341k|{
 4612|   341k|    if constexpr (is_valid_char_type<CharT>) {
  ------------------
  |  Branch (4612:19): [Folded - Ignored]
  ------------------
 4613|   341k|        return r;
 4614|       |        // return make_string_scan_buffer(r);
 4615|   341k|    }
 4616|   341k|    else {
 4617|   341k|        return invalid_char_type{};
 4618|   341k|    }
 4619|   341k|}
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|   341k|    {
 1476|   341k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|   341k|    {
  447|   341k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   341k|    {
 1177|   341k|    }
_ZN3scn2v36detail23make_vscan_result_rangeIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_l:
 5922|    842|{
 5923|    842|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|    842|                      ranges::iterator_t<SourceRange>>) {
 5925|    842|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|    842|    }
 5927|    842|    else {
 5928|    842|        auto it = ranges::begin(source);
 5929|    842|        while (n > 0) {
 5930|    842|            --n;
 5931|    842|            ++it;
 5932|    842|        }
 5933|    842|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|    842|    }
 5935|    842|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|    842|    {
 2724|    842|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    842|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|    842|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|    842|    {
 2705|    842|        return decay_copy(t.begin());
 2706|    842|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1948|   164k|{
 1949|   164k|    return SCN_FWD(t);
  ------------------
  |  |  930|   164k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|   164k|}
_ZN3scn2v36detail27make_vscan_result_range_endINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaRT_:
 5909|    842|{
 5910|    842|    return ranges::end(source);
 5911|    842|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|    842|    {
 2781|    842|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    842|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|    842|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|    842|    {
 2763|    842|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|    842|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|    842|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_LPv0EEET_S6_:
 3315|  3.27M|    {
 3316|  3.27M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|    842|    {
 1430|    842|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  436|    842|    {
  437|    842|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEcvS6_Ev:
 7974|  37.9k|    {
 7975|  37.9k|        return m_str;
 7976|  37.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJwEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  37.9k|    {
 5426|  37.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEE12arg_pointersEv:
 5378|  37.9k|    {
 5379|  37.9k|        return m_argptrs;
 5380|  37.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5477|   341k|    {
 5478|   341k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJwEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  37.9k|{
 8820|  37.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  37.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 37.8k, False: 104]
  |  |  ------------------
  ------------------
 8821|  37.8k|        return unexpected(result.error());
 8822|  37.8k|    }
 8823|    104|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    104|    static_cast<    \
  |  |  929|    104|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    104|    static_cast<    \
  |  |  929|    104|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  37.9k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1597|   341k|    {
 1598|   341k|        return has_value();
 1599|   341k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   683k|    {
  485|   683k|        return m_has_value;
  486|   683k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1603|   341k|    {
 1604|   341k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   341k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   341k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   341k|        return this->get_unexpected().error();
 1606|   341k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   341k|    {
  468|   341k|        return m_unexpected;
  469|   341k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  37.8k|    {
 1476|  37.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  37.8k|    {
  447|  37.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  37.9k|    {
 1177|  37.9k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1652|    842|    {
 1653|    842|        return value();
 1654|    842|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|    842|    {
 1627|    842|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    842|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    842|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    842|        return this->get_value();
 1629|    842|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|    842|    {
  451|    842|        return m_value;
  452|    842|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJwEEC2ES8_ONSt3__15tupleIJwEEE:
 5829|    104|    {
 5830|    104|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5680|    842|    {
 5681|    842|    }
_ZN3scn2v36detail25scan_result_value_storageIJwEEC2EONSt3__15tupleIJwEEE:
 5615|    104|    {
 5616|    104|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|    104|    {
 1430|    104|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|    104|    {
  437|    104|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEE4argsEv:
 5373|  37.9k|    {
 5374|  37.9k|        return m_args;
 5375|  37.9k|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7695|   341k|{
 7696|   341k|    return s;
 7697|   341k|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7667|   341k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  37.9k|    {
 7971|  37.9k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS1_22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT_OSC_NS5_IT1_NS6_ISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISR_EEEE:
 8606|   170k|{
 8607|   170k|#if !SCN_DISABLE_LOCALE
 8608|   170k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   170k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   170k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   170k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   170k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   170k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 170k, False: 421]
  |  |  ------------------
  ------------------
 8615|   170k|        return unexpected(result.error());
 8616|   170k|    }
 8617|    421|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|    421|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   170k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJiEEEDav:
 5395|  37.9k|{
 5396|  37.9k|    detail::check_scan_arg_types<Args...>();
 5397|  37.9k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  37.9k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEEC2Ev:
 5348|  37.9k|    {
 5349|  37.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  37.9k|    {
 5360|  37.9k|        return {detail::make_arg<
 5361|  37.9k|            kind, Context,
 5362|  37.9k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  37.9k|                                 typename Context::char_type>::value>(args)...};
 5364|  37.9k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE3EivEEPvRT2_:
 5169|  37.9k|{
 5170|  37.9k|    return make_value<Context>(value).ref_value;
 5171|  37.9k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEiEEDaRT0_:
 5119|  37.9k|{
 5120|  37.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  37.9k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  37.9k|                                  needs_context_tag>) {
 5124|  37.9k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  37.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  37.9k|    }
 5126|  37.9k|    else {
 5127|  37.9k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  37.9k|            value, context_tag<Context>{}));
 5129|  37.9k|    }
 5130|  37.9k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERi:
 4958|  37.9k|    {                                                                        \
 4959|  37.9k|        return val;                                                          \
 4960|  37.9k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEcvS6_Ev:
 7974|  37.9k|    {
 7975|  37.9k|        return m_str;
 7976|  37.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJiEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  37.9k|    {
 5426|  37.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE12arg_pointersEv:
 5378|  37.9k|    {
 5379|  37.9k|        return m_argptrs;
 5380|  37.9k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  37.9k|{
 8820|  37.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  37.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 37.9k, False: 0]
  |  |  ------------------
  ------------------
 8821|  37.9k|        return unexpected(result.error());
 8822|  37.9k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  37.9k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  37.9k|    {
 1476|  37.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  37.9k|    {
  447|  37.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  37.9k|    {
 1177|  37.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE4argsEv:
 5373|  37.9k|    {
 5374|  37.9k|        return m_args;
 5375|  37.9k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  37.9k|    {
 7971|  37.9k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJjEEEDav:
 5395|  37.9k|{
 5396|  37.9k|    detail::check_scan_arg_types<Args...>();
 5397|  37.9k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  37.9k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEEC2Ev:
 5348|  37.9k|    {
 5349|  37.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  37.9k|    {
 5360|  37.9k|        return {detail::make_arg<
 5361|  37.9k|            kind, Context,
 5362|  37.9k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  37.9k|                                 typename Context::char_type>::value>(args)...};
 5364|  37.9k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE8EjvEEPvRT2_:
 5169|  37.9k|{
 5170|  37.9k|    return make_value<Context>(value).ref_value;
 5171|  37.9k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEjEEDaRT0_:
 5119|  37.9k|{
 5120|  37.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  37.9k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  37.9k|                                  needs_context_tag>) {
 5124|  37.9k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  37.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  37.9k|    }
 5126|  37.9k|    else {
 5127|  37.9k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  37.9k|            value, context_tag<Context>{}));
 5129|  37.9k|    }
 5130|  37.9k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERj:
 4958|  37.9k|    {                                                                        \
 4959|  37.9k|        return val;                                                          \
 4960|  37.9k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEcvS6_Ev:
 7974|  37.9k|    {
 7975|  37.9k|        return m_str;
 7976|  37.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJjEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  37.9k|    {
 5426|  37.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE12arg_pointersEv:
 5378|  37.9k|    {
 5379|  37.9k|        return m_argptrs;
 5380|  37.9k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  37.9k|{
 8820|  37.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  37.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 37.9k, False: 0]
  |  |  ------------------
  ------------------
 8821|  37.9k|        return unexpected(result.error());
 8822|  37.9k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  37.9k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  37.9k|    {
 1476|  37.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  37.9k|    {
  447|  37.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  37.9k|    {
 1177|  37.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE4argsEv:
 5373|  37.9k|    {
 5374|  37.9k|        return m_args;
 5375|  37.9k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  37.9k|    {
 7971|  37.9k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJdEEEDav:
 5395|  37.9k|{
 5396|  37.9k|    detail::check_scan_arg_types<Args...>();
 5397|  37.9k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  37.9k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEEC2Ev:
 5348|  37.9k|    {
 5349|  37.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  37.9k|    {
 5360|  37.9k|        return {detail::make_arg<
 5361|  37.9k|            kind, Context,
 5362|  37.9k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  37.9k|                                 typename Context::char_type>::value>(args)...};
 5364|  37.9k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE17EdvEEPvRT2_:
 5169|  37.9k|{
 5170|  37.9k|    return make_value<Context>(value).ref_value;
 5171|  37.9k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEdEEDaRT0_:
 5119|  37.9k|{
 5120|  37.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  37.9k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  37.9k|                                  needs_context_tag>) {
 5124|  37.9k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  37.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  37.9k|    }
 5126|  37.9k|    else {
 5127|  37.9k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  37.9k|            value, context_tag<Context>{}));
 5129|  37.9k|    }
 5130|  37.9k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERd:
 4958|  37.9k|    {                                                                        \
 4959|  37.9k|        return val;                                                          \
 4960|  37.9k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEcvS6_Ev:
 7974|  37.9k|    {
 7975|  37.9k|        return m_str;
 7976|  37.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  37.9k|    {
 5426|  37.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12arg_pointersEv:
 5378|  37.9k|    {
 5379|  37.9k|        return m_argptrs;
 5380|  37.9k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  37.9k|{
 8820|  37.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  37.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 37.9k, False: 0]
  |  |  ------------------
  ------------------
 8821|  37.9k|        return unexpected(result.error());
 8822|  37.9k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  37.9k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  37.9k|    {
 1476|  37.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  37.9k|    {
  447|  37.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  37.9k|    {
 1177|  37.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE4argsEv:
 5373|  37.9k|    {
 5374|  37.9k|        return m_args;
 5375|  37.9k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  37.9k|    {
 7971|  37.9k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJbEEEDav:
 5395|  37.9k|{
 5396|  37.9k|    detail::check_scan_arg_types<Args...>();
 5397|  37.9k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  37.9k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEEC2Ev:
 5348|  37.9k|    {
 5349|  37.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEE12make_argptrsIJbEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  37.9k|    {
 5360|  37.9k|        return {detail::make_arg<
 5361|  37.9k|            kind, Context,
 5362|  37.9k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  37.9k|                                 typename Context::char_type>::value>(args)...};
 5364|  37.9k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE11EbvEEPvRT2_:
 5169|  37.9k|{
 5170|  37.9k|    return make_value<Context>(value).ref_value;
 5171|  37.9k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEbEEDaRT0_:
 5119|  37.9k|{
 5120|  37.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  37.9k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  37.9k|                                  needs_context_tag>) {
 5124|  37.9k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  37.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  37.9k|    }
 5126|  37.9k|    else {
 5127|  37.9k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  37.9k|            value, context_tag<Context>{}));
 5129|  37.9k|    }
 5130|  37.9k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERb:
 4958|  37.9k|    {                                                                        \
 4959|  37.9k|        return val;                                                          \
 4960|  37.9k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEcvS6_Ev:
 7974|  37.9k|    {
 7975|  37.9k|        return m_str;
 7976|  37.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJbEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  37.9k|    {
 5426|  37.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEE12arg_pointersEv:
 5378|  37.9k|    {
 5379|  37.9k|        return m_argptrs;
 5380|  37.9k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJbEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  37.9k|{
 8820|  37.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  37.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 37.9k, False: 0]
  |  |  ------------------
  ------------------
 8821|  37.9k|        return unexpected(result.error());
 8822|  37.9k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  37.9k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  37.9k|    {
 1476|  37.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  37.9k|    {
  447|  37.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  37.9k|    {
 1177|  37.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEE4argsEv:
 5373|  37.9k|    {
 5374|  37.9k|        return m_args;
 5375|  37.9k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  37.9k|    {
 7971|  37.9k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJPvEEEDav:
 5395|  37.9k|{
 5396|  37.9k|    detail::check_scan_arg_types<Args...>();
 5397|  37.9k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  37.9k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEEC2Ev:
 5348|  37.9k|    {
 5349|  37.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEE12make_argptrsIJS5_EEENSt3__15arrayIS5_Lm1EEEDpRT_:
 5359|  37.9k|    {
 5360|  37.9k|        return {detail::make_arg<
 5361|  37.9k|            kind, Context,
 5362|  37.9k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  37.9k|                                 typename Context::char_type>::value>(args)...};
 5364|  37.9k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE15EPvvEES7_RT2_:
 5169|  37.9k|{
 5170|  37.9k|    return make_value<Context>(value).ref_value;
 5171|  37.9k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEPvEEDaRT0_:
 5119|  37.9k|{
 5120|  37.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  37.9k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  37.9k|                                  needs_context_tag>) {
 5124|  37.9k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  37.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  37.9k|    }
 5126|  37.9k|    else {
 5127|  37.9k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  37.9k|            value, context_tag<Context>{}));
 5129|  37.9k|    }
 5130|  37.9k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERPv:
 4958|  37.9k|    {                                                                        \
 4959|  37.9k|        return val;                                                          \
 4960|  37.9k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEcvS6_Ev:
 7974|  37.9k|    {
 7975|  37.9k|        return m_str;
 7976|  37.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJPvEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  37.9k|    {
 5426|  37.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEE12arg_pointersEv:
 5378|  37.9k|    {
 5379|  37.9k|        return m_argptrs;
 5380|  37.9k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJPvEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSA_ISC_EEONSt3__15tupleIJSE_EEE:
 8819|  37.9k|{
 8820|  37.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  37.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 37.9k, False: 0]
  |  |  ------------------
  ------------------
 8821|  37.9k|        return unexpected(result.error());
 8822|  37.9k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  37.9k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEEC2ISC_LSA_0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  37.9k|    {
 1476|  37.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  446|  37.9k|    {
  447|  37.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  37.9k|    {
 1177|  37.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEE4argsEv:
 5373|  37.9k|    {
 5374|  37.9k|        return m_args;
 5375|  37.9k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  37.9k|    {
 7971|  37.9k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEDav:
 5395|  37.9k|{
 5396|  37.9k|    detail::check_scan_arg_types<Args...>();
 5397|  37.9k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  37.9k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEC2Ev:
 5348|  37.9k|    {
 5349|  37.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  37.9k|    {
 5360|  37.9k|        return {detail::make_arg<
 5361|  37.9k|            kind, Context,
 5362|  37.9k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  37.9k|                                 typename Context::char_type>::value>(args)...};
 5364|  37.9k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEvEEPvRT2_:
 5169|  37.9k|{
 5170|  37.9k|    return make_value<Context>(value).ref_value;
 5171|  37.9k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDaRT0_:
 5119|  37.9k|{
 5120|  37.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  37.9k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  37.9k|                                  needs_context_tag>) {
 5124|  37.9k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  37.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  37.9k|    }
 5126|  37.9k|    else {
 5127|  37.9k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  37.9k|            value, context_tag<Context>{}));
 5129|  37.9k|    }
 5130|  37.9k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 4958|  37.9k|    {                                                                        \
 4959|  37.9k|        return val;                                                          \
 4960|  37.9k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEcvS6_Ev:
 7974|  37.9k|    {
 7975|  37.9k|        return m_str;
 7976|  37.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  37.9k|    {
 5426|  37.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12arg_pointersEv:
 5378|  37.9k|    {
 5379|  37.9k|        return m_argptrs;
 5380|  37.9k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8819|  37.9k|{
 8820|  37.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  37.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 37.7k, False: 246]
  |  |  ------------------
  ------------------
 8821|  37.7k|        return unexpected(result.error());
 8822|  37.7k|    }
 8823|    246|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    246|    static_cast<    \
  |  |  929|    246|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    246|    static_cast<    \
  |  |  929|    246|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  37.9k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1475|  37.7k|    {
 1476|  37.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  625|  37.7k|    {
  626|  37.7k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  37.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  37.7k|    {
  689|  37.7k|        scn::detail::construct_at(unexpected_ptr(),
  690|  37.7k|                                  std::forward<Args>(args)...);
  691|  37.7k|        m_has_value = false;
  692|  37.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  75.4k|    {
  718|  75.4k|        return reinterpret_cast<unexpected<E>*>(
  719|  75.4k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  75.4k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  75.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  37.9k|    {
 1177|  37.9k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5829|    246|    {
 5830|    246|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|    246|    {
 1430|    246|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  615|    246|    {
  616|    246|        construct(std::forward<Args>(args)...);
  617|    246|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|    246|    {
  682|    246|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|    246|        m_has_value = true;
  684|    246|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|    246|{
  392|    246|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|    246|        T(std::forward<Args>(args)...);
  394|    246|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2EOSG_:
 5821|    246|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|    492|    {
  706|    492|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|    492|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|    492|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 5825|    492|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE4argsEv:
 5373|  37.9k|    {
 5374|  37.9k|        return m_args;
 5375|  37.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEED2Ev:
 5370|  37.9k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  37.9k|    {
 7971|  37.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  37.9k|    {
  631|  37.9k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 246, False: 37.7k]
  ------------------
  632|    246|            destroy_value();
  633|    246|        }
  634|  37.7k|        else {
  635|  37.7k|            destroy_unexpected();
  636|  37.7k|        }
  637|  37.9k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  37.9k|    {
  675|  37.9k|        return m_has_value;
  676|  37.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|    246|    {
  696|    246|        scn::detail::destroy_at(value_ptr());
  697|    246|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  397|    246|{
  398|    246|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|    246|        for (auto& elem : *p) {
  400|    246|            scn::detail::destroy_at(&elem);
  401|    246|        }
  402|    246|    }
  403|    246|    else {
  404|    246|        p->~T();
  405|    246|    }
  406|    246|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  37.7k|    {
  700|  37.7k|        scn::detail::destroy_at(unexpected_ptr());
  701|  37.7k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEEDav:
 5395|  37.9k|{
 5396|  37.9k|    detail::check_scan_arg_types<Args...>();
 5397|  37.9k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  37.9k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEC2Ev:
 5348|  37.9k|    {
 5349|  37.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  37.9k|    {
 5360|  37.9k|        return {detail::make_arg<
 5361|  37.9k|            kind, Context,
 5362|  37.9k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  37.9k|                                 typename Context::char_type>::value>(args)...};
 5364|  37.9k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEvEEPvRT2_:
 5169|  37.9k|{
 5170|  37.9k|    return make_value<Context>(value).ref_value;
 5171|  37.9k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEDaRT0_:
 5119|  37.9k|{
 5120|  37.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  37.9k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  37.9k|                                  needs_context_tag>) {
 5124|  37.9k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  37.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  37.9k|    }
 5126|  37.9k|    else {
 5127|  37.9k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  37.9k|            value, context_tag<Context>{}));
 5129|  37.9k|    }
 5130|  37.9k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 4958|  37.9k|    {                                                                        \
 4959|  37.9k|        return val;                                                          \
 4960|  37.9k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEcvS6_Ev:
 7974|  37.9k|    {
 7975|  37.9k|        return m_str;
 7976|  37.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  37.9k|    {
 5426|  37.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12arg_pointersEv:
 5378|  37.9k|    {
 5379|  37.9k|        return m_argptrs;
 5380|  37.9k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8819|  37.9k|{
 8820|  37.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  37.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 37.7k, False: 246]
  |  |  ------------------
  ------------------
 8821|  37.7k|        return unexpected(result.error());
 8822|  37.7k|    }
 8823|    246|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    246|    static_cast<    \
  |  |  929|    246|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    246|    static_cast<    \
  |  |  929|    246|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  37.9k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1475|  37.7k|    {
 1476|  37.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  625|  37.7k|    {
  626|  37.7k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  37.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  37.7k|    {
  689|  37.7k|        scn::detail::construct_at(unexpected_ptr(),
  690|  37.7k|                                  std::forward<Args>(args)...);
  691|  37.7k|        m_has_value = false;
  692|  37.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  75.4k|    {
  718|  75.4k|        return reinterpret_cast<unexpected<E>*>(
  719|  75.4k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  75.4k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  75.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  37.9k|    {
 1177|  37.9k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5829|    246|    {
 5830|    246|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|    246|    {
 1430|    246|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  615|    246|    {
  616|    246|        construct(std::forward<Args>(args)...);
  617|    246|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|    246|    {
  682|    246|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|    246|        m_has_value = true;
  684|    246|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|    246|{
  392|    246|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|    246|        T(std::forward<Args>(args)...);
  394|    246|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2EOSG_:
 5821|    246|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|    492|    {
  706|    492|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|    492|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|    492|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 5825|    492|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE4argsEv:
 5373|  37.9k|    {
 5374|  37.9k|        return m_args;
 5375|  37.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEED2Ev:
 5370|  37.9k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  37.9k|    {
 7971|  37.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  37.9k|    {
  631|  37.9k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 246, False: 37.7k]
  ------------------
  632|    246|            destroy_value();
  633|    246|        }
  634|  37.7k|        else {
  635|  37.7k|            destroy_unexpected();
  636|  37.7k|        }
  637|  37.9k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  37.9k|    {
  675|  37.9k|        return m_has_value;
  676|  37.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|    246|    {
  696|    246|        scn::detail::destroy_at(value_ptr());
  697|    246|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  397|    246|{
  398|    246|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|    246|        for (auto& elem : *p) {
  400|    246|            scn::detail::destroy_at(&elem);
  401|    246|        }
  402|    246|    }
  403|    246|    else {
  404|    246|        p->~T();
  405|    246|    }
  406|    246|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  37.7k|    {
  700|  37.7k|        scn::detail::destroy_at(unexpected_ptr());
  701|  37.7k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEEDav:
 5395|  37.9k|{
 5396|  37.9k|    detail::check_scan_arg_types<Args...>();
 5397|  37.9k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  37.9k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEEvv:
 5134|  37.9k|{
 5135|  37.9k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  37.9k|                  "Scan argument types must be default constructible");
 5137|  37.9k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  37.9k|                  "Scan argument types must be Destructible");
 5139|  37.9k|    static_assert(
 5140|  37.9k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  37.9k|        "Scan argument types must not be references");
 5142|  37.9k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEC2Ev:
 5348|  37.9k|    {
 5349|  37.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  37.9k|    {
 5360|  37.9k|        return {detail::make_arg<
 5361|  37.9k|            kind, Context,
 5362|  37.9k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  37.9k|                                 typename Context::char_type>::value>(args)...};
 5364|  37.9k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE20ENSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEvEEPvRT2_:
 5169|  37.9k|{
 5170|  37.9k|    return make_value<Context>(value).ref_value;
 5171|  37.9k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDaRT0_:
 5119|  37.9k|{
 5120|  37.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  37.9k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  37.9k|                                  needs_context_tag>) {
 5124|  37.9k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  37.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  37.9k|    }
 5126|  37.9k|    else {
 5127|  37.9k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  37.9k|            value, context_tag<Context>{}));
 5129|  37.9k|    }
 5130|  37.9k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 4958|  37.9k|    {                                                                        \
 4959|  37.9k|        return val;                                                          \
 4960|  37.9k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaOT_:
 5088|  37.9k|{
 5089|  37.9k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  37.9k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  37.9k|    constexpr bool scannable_char =
 5093|  37.9k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  37.9k|    static_assert(scannable_char,
 5095|  37.9k|                  "Cannot scan an argument of an unsupported character "
 5096|  37.9k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  37.9k|    constexpr bool scannable_const =
 5099|  37.9k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  37.9k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  37.9k|    constexpr bool scannable_disabled =
 5103|  37.9k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  37.9k|    static_assert(scannable_disabled,
 5105|  37.9k|                  "Cannot scan an argument that has been disabled by "
 5106|  37.9k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  37.9k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  37.9k|    static_assert(
 5110|  37.9k|        scannable,
 5111|  37.9k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  37.9k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  37.9k|    return arg_value{arg};
 5115|  37.9k|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEERT_:
 4901|  37.9k|    {
 4902|  37.9k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEcvS6_Ev:
 7974|  37.9k|    {
 7975|  37.9k|        return m_str;
 7976|  37.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  37.9k|    {
 5426|  37.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12arg_pointersEv:
 5378|  37.9k|    {
 5379|  37.9k|        return m_argptrs;
 5380|  37.9k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8819|  37.9k|{
 8820|  37.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  37.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 37.7k, False: 246]
  |  |  ------------------
  ------------------
 8821|  37.7k|        return unexpected(result.error());
 8822|  37.7k|    }
 8823|    246|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    246|    static_cast<    \
  |  |  929|    246|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    246|    static_cast<    \
  |  |  929|    246|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  37.9k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1475|  37.7k|    {
 1476|  37.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  446|  37.7k|    {
  447|  37.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  37.9k|    {
 1177|  37.9k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5829|    246|    {
 5830|    246|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEC2EONS3_5tupleIJS7_EEE:
 5615|    246|    {
 5616|    246|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1429|    246|    {
 1430|    246|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  436|    246|    {
  437|    246|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE4argsEv:
 5373|  37.9k|    {
 5374|  37.9k|        return m_args;
 5375|  37.9k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  37.9k|    {
 7971|  37.9k|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3567|  1.01M|    {
 3568|  1.01M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  1.01M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|  1.01M|    }
_ZNK3scn2v310scan_errorcvbEv:
 3573|  6.36M|    {
 3574|  6.36M|        return m_code == good;
 3575|  6.36M|    }
_ZNK3scn2v310scan_error4codeEv:
 3584|   242k|    {
 3585|   242k|        return m_code;
 3586|   242k|    }
_ZNK3scn2v36detail9fill_type4sizeEv:
 6180|  6.29k|    {
 6181|  6.29k|        return m_size;
 6182|  6.29k|    }
_ZNK3scn2v36detail12format_specs8get_baseEv:
 6221|  23.8k|    {
 6222|  23.8k|        SCN_GCC_COMPAT_PUSH
 6223|  23.8k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 6224|  23.8k|        switch (type) {
 6225|  2.21k|            case presentation_type::none:
  ------------------
  |  Branch (6225:13): [True: 2.21k, False: 21.6k]
  ------------------
 6226|  2.21k|                return 10;
 6227|     54|            case presentation_type::int_generic:
  ------------------
  |  Branch (6227:13): [True: 54, False: 23.8k]
  ------------------
 6228|     54|                return 0;
 6229|      0|            case presentation_type::int_arbitrary_base:
  ------------------
  |  Branch (6229:13): [True: 0, False: 23.8k]
  ------------------
 6230|      0|                return arbitrary_base;
 6231|       |
 6232|     32|            case presentation_type::int_binary:
  ------------------
  |  Branch (6232:13): [True: 32, False: 23.8k]
  ------------------
 6233|     32|                return 2;
 6234|     94|            case presentation_type::int_octal:
  ------------------
  |  Branch (6234:13): [True: 94, False: 23.7k]
  ------------------
 6235|     94|                return 8;
 6236|     36|            case presentation_type::int_decimal:
  ------------------
  |  Branch (6236:13): [True: 36, False: 23.8k]
  ------------------
 6237|     94|            case presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (6237:13): [True: 58, False: 23.8k]
  ------------------
 6238|     94|                return 10;
 6239|  21.3k|            case presentation_type::int_hex:
  ------------------
  |  Branch (6239:13): [True: 21.3k, False: 2.49k]
  ------------------
 6240|  21.3k|                return 16;
 6241|       |
 6242|      0|            default:
  ------------------
  |  Branch (6242:13): [True: 0, False: 23.8k]
  ------------------
 6243|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6244|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6245|  23.8k|        }
 6246|  23.8k|        SCN_GCC_COMPAT_POP
 6247|  23.8k|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6259|   233k|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter8on_alignENS1_10align_typeE:
 6262|  16.5k|    {
 6263|  16.5k|        m_specs.align = align;
 6264|  16.5k|    }
_ZN3scn2v36detail12specs_setter12on_localizedEv:
 6271|    544|    {
 6272|    544|        if constexpr (!SCN_DISABLE_LOCALE) {
  ------------------
  |  |  114|    544|#define SCN_DISABLE_LOCALE 0
  ------------------
  |  Branch (6272:23): [Folded - Ignored]
  ------------------
 6273|    544|            m_specs.localized = true;
 6274|    544|        }
 6275|      0|        else {
 6276|      0|            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 6277|      0|        }
 6278|    544|    }
_ZN3scn2v36detail12specs_setter8on_widthEi:
 6281|  51.7k|    {
 6282|  51.7k|        if (m_specs.precision != 0 && width > m_specs.precision) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 51.7k]
  |  Branch (6282:39): [True: 0, False: 0]
  ------------------
 6283|       |            // clang-format off
 6284|      0|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 6285|       |            // clang-format on
 6286|      0|        }
 6287|       |
 6288|  51.7k|        m_specs.width = width;
 6289|  51.7k|    }
_ZN3scn2v36detail12specs_setter12on_precisionEi:
 6291|  17.7k|    {
 6292|  17.7k|        if (m_specs.width > prec) {
  ------------------
  |  Branch (6292:13): [True: 80, False: 17.7k]
  ------------------
 6293|       |            // clang-format off
 6294|     80|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 6295|       |            // clang-format on
 6296|     80|        }
 6297|       |
 6298|  17.7k|        m_specs.precision = prec;
 6299|  17.7k|    }
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6302|   215k|    {
 6303|   215k|        m_specs.type = type;
 6304|   215k|    }
_ZN3scn2v36detail12specs_setter17on_charset_singleEDi:
 6307|  3.34M|    {
 6308|  3.34M|        const auto cp_value = static_cast<unsigned>(cp);
 6309|  3.34M|        if (SCN_LIKELY(cp_value <= 127)) {
  ------------------
  |  |  858|  3.34M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.91M, False: 434k]
  |  |  ------------------
  ------------------
 6310|  2.91M|            m_specs.charset_literals[cp_value / 8] |=
 6311|  2.91M|                static_cast<unsigned char>(1ul << (cp_value % 8));
 6312|  2.91M|        }
 6313|   434k|        else {
 6314|   434k|            m_specs.charset_has_nonascii = true;
 6315|   434k|        }
 6316|  3.34M|    }
_ZN3scn2v36detail12specs_setter16on_charset_rangeEDiDi:
 6319|  21.7k|    {
 6320|  21.7k|        const auto begin_value = static_cast<unsigned>(begin);
 6321|  21.7k|        const auto end_value = static_cast<unsigned>(end);
 6322|  21.7k|        SCN_EXPECT(begin_value < end_value);
  ------------------
  |  |  924|  21.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6323|       |
 6324|  21.7k|        if (SCN_LIKELY(end_value <= 127)) {
  ------------------
  |  |  858|  21.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 14.1k, False: 7.61k]
  |  |  ------------------
  ------------------
 6325|       |            // No need to bit-twiddle with a mask, because with the
 6326|       |            // SCN_ASSUME, -O3 will optimize this to a single operation
 6327|  14.1k|            SCN_ASSUME(begin_value < end_value);
  ------------------
  |  |  878|  14.1k|#define SCN_ASSUME(x) __builtin_assume(x)
  ------------------
 6328|   871k|            for (auto v = begin_value; v != end_value; ++v) {
  ------------------
  |  Branch (6328:40): [True: 857k, False: 14.1k]
  ------------------
 6329|   857k|                m_specs.charset_literals[v / 8] |=
 6330|   857k|                    static_cast<unsigned char>(1ul << (v % 8));
 6331|   857k|            }
 6332|  14.1k|        }
 6333|  7.61k|        else {
 6334|  7.61k|            m_specs.charset_has_nonascii = true;
 6335|  7.61k|        }
 6336|  21.7k|    }
_ZN3scn2v36detail12specs_setter19on_charset_invertedEv:
 6339|  3.70k|    {
 6340|  3.70k|        m_specs.charset_is_inverted = true;
 6341|  3.70k|    }
_ZN3scn2v36detail12specs_setter14on_regex_flagsENS1_11regex_flagsE:
 6358|   114k|    {
 6359|   114k|        m_specs.regexp_flags = flags;
 6360|   114k|    }
_ZN3scn2v36detail12specs_setter8on_errorEPKc:
 6364|  13.0k|    {
 6365|  13.0k|        SCN_UNLIKELY_ATTR
 6366|  13.0k|        m_error = scan_error{scan_error::invalid_format_string, msg};
 6367|  13.0k|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6375|  3.61M|    {
 6376|  3.61M|        return static_cast<bool>(m_error);
 6377|  3.61M|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3608|   242k|{
 3609|   242k|    return a.code() == b;
 3610|   242k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3612|   242k|{
 3613|   242k|    return !(a == b);
 3614|   242k|}
_ZN3scn2v36detail39decode_utf8_code_point_exhaustive_validENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3907|   300k|{
 3908|   300k|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|   300k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   300k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3909|       |
 3910|   300k|    const auto is_trailing_code_unit = [](char ch) {
 3911|   300k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3912|   300k|    };
 3913|       |
 3914|   300k|    if (input.size() == 1) {
  ------------------
  |  Branch (3914:9): [True: 266k, False: 34.0k]
  ------------------
 3915|   266k|        SCN_EXPECT(static_cast<unsigned char>(input[0]) < 0x80);
  ------------------
  |  |  924|   266k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   266k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3916|   266k|        return static_cast<char32_t>(input[0]);
 3917|   266k|    }
 3918|       |
 3919|  34.0k|    if (input.size() == 2) {
  ------------------
  |  Branch (3919:9): [True: 32.8k, False: 1.25k]
  ------------------
 3920|  32.8k|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xe0) == 0xc0);
  ------------------
  |  |  924|  32.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  32.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3921|  32.8k|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  924|  32.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  32.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3922|       |
 3923|  32.8k|        char32_t cp{};
 3924|  32.8k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3925|  32.8k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3926|  32.8k|        return cp;
 3927|  32.8k|    }
 3928|       |
 3929|  1.25k|    if (input.size() == 3) {
  ------------------
  |  Branch (3929:9): [True: 1.08k, False: 166]
  ------------------
 3930|  1.08k|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xf0) == 0xe0);
  ------------------
  |  |  924|  1.08k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.08k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3931|  1.08k|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  924|  1.08k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.08k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3932|  1.08k|        SCN_EXPECT(is_trailing_code_unit(input[2]));
  ------------------
  |  |  924|  1.08k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.08k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3933|       |
 3934|  1.08k|        char32_t cp{};
 3935|  1.08k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3936|  1.08k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3937|  1.08k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3938|  1.08k|        return cp;
 3939|  1.08k|    }
 3940|       |
 3941|    166|    if (input.size() == 4) {
  ------------------
  |  Branch (3941:9): [True: 166, False: 0]
  ------------------
 3942|    166|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xf8) == 0xf0);
  ------------------
  |  |  924|    166|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    166|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3943|    166|        SCN_EXPECT(static_cast<unsigned char>(input[0]) <= 0xf4);
  ------------------
  |  |  924|    166|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    166|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3944|    166|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  924|    166|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    166|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3945|    166|        SCN_EXPECT(is_trailing_code_unit(input[2]));
  ------------------
  |  |  924|    166|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    166|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3946|    166|        SCN_EXPECT(is_trailing_code_unit(input[3]));
  ------------------
  |  |  924|    166|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    166|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3947|       |
 3948|    166|        char32_t cp{};
 3949|    166|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3950|    166|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3951|    166|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3952|    166|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3953|    166|        return cp;
 3954|    166|    }
 3955|       |
 3956|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3957|       |    // gcc 7 thinks we'll get here, even when we won't
 3958|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3959|      0|#endif
 3960|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3961|      0|}
_ZN3scn2v36detailanENS1_11regex_flagsES2_:
 6110|   164k|{
 6111|   164k|    return static_cast<regex_flags>(static_cast<unsigned>(a) &
 6112|   164k|                                    static_cast<unsigned>(b));
 6113|   164k|}
_ZN3scn2v36detailorENS1_11regex_flagsES2_:
 6115|  18.7k|{
 6116|  18.7k|    return static_cast<regex_flags>(static_cast<unsigned>(a) |
 6117|  18.7k|                                    static_cast<unsigned>(b));
 6118|  18.7k|}
_ZN3scn2v36detailoRERNS1_11regex_flagsES2_:
 6130|  18.7k|{
 6131|  18.7k|    return a = a | b;
 6132|  18.7k|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7062|  1.35k|{
 7063|  1.35k|    switch (type) {
 7064|    120|        case arg_type::none_type:
  ------------------
  |  Branch (7064:9): [True: 120, False: 1.23k]
  ------------------
 7065|    120|            return arg_type_category::none;
 7066|       |
 7067|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7067:9): [True: 0, False: 1.35k]
  ------------------
 7068|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7068:9): [True: 0, False: 1.35k]
  ------------------
 7069|    136|        case arg_type::int_type:
  ------------------
  |  Branch (7069:9): [True: 136, False: 1.21k]
  ------------------
 7070|    136|        case arg_type::long_type:
  ------------------
  |  Branch (7070:9): [True: 0, False: 1.35k]
  ------------------
 7071|    136|        case arg_type::llong_type:
  ------------------
  |  Branch (7071:9): [True: 0, False: 1.35k]
  ------------------
 7072|    136|            return arg_type_category::integer;
 7073|       |
 7074|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7074:9): [True: 0, False: 1.35k]
  ------------------
 7075|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7075:9): [True: 0, False: 1.35k]
  ------------------
 7076|    136|        case arg_type::uint_type:
  ------------------
  |  Branch (7076:9): [True: 136, False: 1.21k]
  ------------------
 7077|    136|        case arg_type::ulong_type:
  ------------------
  |  Branch (7077:9): [True: 0, False: 1.35k]
  ------------------
 7078|    136|        case arg_type::ullong_type:
  ------------------
  |  Branch (7078:9): [True: 0, False: 1.35k]
  ------------------
 7079|    136|            return arg_type_category::unsigned_integer;
 7080|       |
 7081|    136|        case arg_type::pointer_type:
  ------------------
  |  Branch (7081:9): [True: 136, False: 1.21k]
  ------------------
 7082|    136|            return arg_type_category::pointer;
 7083|    136|        case arg_type::bool_type:
  ------------------
  |  Branch (7083:9): [True: 136, False: 1.21k]
  ------------------
 7084|    136|            return arg_type_category::boolean;
 7085|     76|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7085:9): [True: 76, False: 1.27k]
  ------------------
 7086|    136|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7086:9): [True: 60, False: 1.29k]
  ------------------
 7087|    136|        case arg_type::code_point_type:
  ------------------
  |  Branch (7087:9): [True: 0, False: 1.35k]
  ------------------
 7088|    136|            return arg_type_category::character;
 7089|       |
 7090|      0|        case arg_type::float_type:
  ------------------
  |  Branch (7090:9): [True: 0, False: 1.35k]
  ------------------
 7091|    136|        case arg_type::double_type:
  ------------------
  |  Branch (7091:9): [True: 136, False: 1.21k]
  ------------------
 7092|    136|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7092:9): [True: 0, False: 1.35k]
  ------------------
 7093|    136|            return arg_type_category::floating;
 7094|       |
 7095|     76|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7095:9): [True: 76, False: 1.27k]
  ------------------
 7096|    214|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7096:9): [True: 138, False: 1.21k]
  ------------------
 7097|    276|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7097:9): [True: 62, False: 1.28k]
  ------------------
 7098|    414|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7098:9): [True: 138, False: 1.21k]
  ------------------
 7099|    414|            return arg_type_category::string;
 7100|       |
 7101|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7101:9): [True: 0, False: 1.35k]
  ------------------
 7102|      0|            return arg_type_category::custom;
 7103|       |
 7104|      0|            SCN_CLANG_PUSH
 7105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7106|      0|        default:
  ------------------
  |  Branch (7106:9): [True: 0, False: 1.35k]
  ------------------
 7107|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7108|  1.35k|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7109|  1.35k|            SCN_CLANG_POP
 7110|  1.35k|    }
 7111|       |
 7112|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7113|  1.35k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA41_KcEEEDaDpOT_:
 3653|  1.48k|{
 3654|  1.48k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  1.48k|}
_ZN3scn2v36detail20check_int_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7148|  33.2k|{
 7149|  33.2k|    if (SCN_UNLIKELY(specs.type > presentation_type::int_hex)) {
  ------------------
  |  |  859|  33.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 30.7k, False: 2.51k]
  |  |  ------------------
  ------------------
 7150|  30.7k|        return handler.on_error("Invalid type specifier for integer type");
 7151|  30.7k|    }
 7152|  2.51k|    if (specs.localized) {
  ------------------
  |  Branch (7152:9): [True: 148, False: 2.36k]
  ------------------
 7153|    148|        if (SCN_UNLIKELY(specs.type == presentation_type::int_binary)) {
  ------------------
  |  |  859|    148|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 136]
  |  |  ------------------
  ------------------
 7154|       |            // clang-format off
 7155|     12|            handler.on_error("'b'/'B' specifier not supported for localized integers");
 7156|       |            // clang-format on
 7157|     12|            return;
 7158|     12|        }
 7159|    136|        if (SCN_UNLIKELY(specs.type == presentation_type::int_arbitrary_base)) {
  ------------------
  |  |  859|    136|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 136]
  |  |  ------------------
  ------------------
 7160|       |            // clang-format off
 7161|      0|            return handler.on_error("Arbitrary bases not supported for localized integers");
 7162|       |            // clang-format on
 7163|      0|        }
 7164|    136|    }
 7165|  2.51k|}
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1948|     52|{
 1949|     52|    return SCN_FWD(t);
  ------------------
  |  |  930|     52|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|     52|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
 3653|  3.41k|{
 3654|  3.41k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  3.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  3.41k|}
_ZN3scn2v36detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7192|  16.6k|{
 7193|  16.6k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7193:9): [True: 15.5k, False: 1.12k]
  ------------------
 7194|  16.6k|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (7194:10): [True: 136, False: 15.3k]
  ------------------
 7195|  15.5k|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (7195:10): [True: 15.2k, False: 148]
  ------------------
 7196|  15.3k|        SCN_UNLIKELY_ATTR
 7197|  15.3k|        return handler.on_error("Invalid type specifier for float type");
 7198|  15.3k|    }
 7199|  16.6k|}
_ZNK3scn2v36detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EE9has_valueEv:
  484|  73.0k|    {
  485|  73.0k|        return m_has_value;
  486|  73.0k|    }
_ZNK3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEcvbEv:
 1597|  36.5k|    {
 1598|  36.5k|        return has_value();
 1599|  36.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EE9get_valueEv:
  450|  36.5k|    {
  451|  36.5k|        return m_value;
  452|  36.5k|    }
_ZNR3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEE5valueIS4_LPv0EEERT_v:
 1626|  36.5k|    {
 1627|  36.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  36.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  36.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  36.5k|        return this->get_value();
 1629|  36.5k|    }
_ZNO3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEdeIS4_LPv0EEEOT_v:
 1662|  36.5k|    {
 1663|  36.5k|        return std::move(value());
 1664|  36.5k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA14_KcEEEDaDpOT_:
 3653|  19.4k|{
 3654|  19.4k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  19.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  19.4k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA32_KcEEEDaDpOT_:
 3653|  12.4k|{
 3654|  12.4k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  12.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  12.4k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA36_KcEEEDaDpOT_:
 3653|    372|{
 3654|    372|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|    372|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|    372|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA52_KcEEEDaDpOT_:
 3653|  1.66k|{
 3654|  1.66k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.66k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  1.66k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA40_KcEEEDaDpOT_:
 3653|  1.70k|{
 3654|  1.70k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  1.70k|}
_ZN3scn2v36detail23check_string_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7204|  49.5k|{
 7205|  49.5k|    if (specs.type == presentation_type::none ||
  ------------------
  |  Branch (7205:9): [True: 3.26k, False: 46.2k]
  ------------------
 7206|  49.5k|        specs.type == presentation_type::string ||
  ------------------
  |  Branch (7206:9): [True: 768, False: 45.5k]
  ------------------
 7207|  49.5k|        specs.type == presentation_type::string_set ||
  ------------------
  |  Branch (7207:9): [True: 6.46k, False: 39.0k]
  ------------------
 7208|  49.5k|        specs.type == presentation_type::regex ||
  ------------------
  |  Branch (7208:9): [True: 34.2k, False: 4.76k]
  ------------------
 7209|  49.5k|        specs.type == presentation_type::regex_escaped) {
  ------------------
  |  Branch (7209:9): [True: 3.91k, False: 846]
  ------------------
 7210|  48.6k|        return;
 7211|  48.6k|    }
 7212|    846|    if (specs.type == presentation_type::character) {
  ------------------
  |  Branch (7212:9): [True: 180, False: 666]
  ------------------
 7213|    180|        if (SCN_UNLIKELY(specs.precision == 0)) {
  ------------------
  |  |  859|    180|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 168]
  |  |  ------------------
  ------------------
 7214|       |            // clang-format off
 7215|     12|            return handler.on_error("'c' type specifier for strings requires the field precision to be specified");
 7216|       |            // clang-format on
 7217|     12|        }
 7218|    168|        return;
 7219|    180|    }
 7220|    666|    SCN_UNLIKELY_ATTR
 7221|    666|    handler.on_error("Invalid type specifier for string");
 7222|    666|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA47_KcEEEDaDpOT_:
 3653|  43.0k|{
 3654|  43.0k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  43.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  43.0k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA23_KcEEEDaDpOT_:
 3653|     48|{
 3654|     48|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|     48|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|     48|}
_ZN3scn2v36detail21check_bool_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7238|  16.6k|{
 7239|  16.6k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7239:9): [True: 15.5k, False: 1.12k]
  ------------------
 7240|  16.6k|        specs.type != presentation_type::string &&
  ------------------
  |  Branch (7240:9): [True: 15.2k, False: 270]
  ------------------
 7241|  16.6k|        specs.type != presentation_type::int_generic &&
  ------------------
  |  Branch (7241:9): [True: 15.2k, False: 22]
  ------------------
 7242|  16.6k|        specs.type != presentation_type::int_hex &&
  ------------------
  |  Branch (7242:9): [True: 15.1k, False: 24]
  ------------------
 7243|  16.6k|        specs.type != presentation_type::int_binary &&
  ------------------
  |  Branch (7243:9): [True: 15.1k, False: 18]
  ------------------
 7244|  16.6k|        specs.type != presentation_type::int_unsigned_decimal &&
  ------------------
  |  Branch (7244:9): [True: 15.1k, False: 20]
  ------------------
 7245|  16.6k|        specs.type != presentation_type::int_octal &&
  ------------------
  |  Branch (7245:9): [True: 15.1k, False: 38]
  ------------------
 7246|  16.6k|        specs.type != presentation_type::int_decimal) {
  ------------------
  |  Branch (7246:9): [True: 15.1k, False: 14]
  ------------------
 7247|  15.1k|        SCN_UNLIKELY_ATTR
 7248|  15.1k|        return handler.on_error("Invalid type specifier for boolean");
 7249|  15.1k|    }
 7250|  16.6k|}
_ZN3scn2v36detail21check_char_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7170|  16.5k|{
 7171|  16.5k|    if (specs.type > presentation_type::int_hex ||
  ------------------
  |  Branch (7171:9): [True: 15.3k, False: 1.18k]
  ------------------
 7172|  16.5k|        specs.type == presentation_type::int_arbitrary_base) {
  ------------------
  |  Branch (7172:9): [True: 0, False: 1.18k]
  ------------------
 7173|  15.3k|        SCN_UNLIKELY_ATTR
 7174|  15.3k|        return handler.on_error("Invalid type specifier for character type");
 7175|  15.3k|    }
 7176|  16.5k|}
_ZN3scn2v36detail24check_pointer_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7227|  16.5k|{
 7228|  16.5k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7228:9): [True: 15.4k, False: 1.08k]
  ------------------
 7229|  16.5k|        specs.type != presentation_type::pointer) {
  ------------------
  |  Branch (7229:9): [True: 15.4k, False: 12]
  ------------------
 7230|  15.4k|        SCN_UNLIKELY_ATTR
 7231|  15.4k|        return handler.on_error("Invalid type specifier for pointer");
 7232|  15.4k|    }
 7233|  16.5k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA79_KcEEEDaDpOT_:
 3653|    136|{
 3654|    136|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|    136|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|    136|}
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3714|   146k|{
 3715|   146k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3715:19): [Folded - Ignored]
  ------------------
 3716|   146k|                                          const CharT*, const CharT*>) {
 3717|   146k|        return {first, last};
 3718|   146k|    }
 3719|   146k|    else {
 3720|   146k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3721|   146k|    }
 3722|   146k|}
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3714|   701M|{
 3715|   701M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3715:19): [Folded - Ignored]
  ------------------
 3716|   701M|                                          const CharT*, const CharT*>) {
 3717|   701M|        return {first, last};
 3718|   701M|    }
 3719|   701M|    else {
 3720|   701M|        return {first, static_cast<size_t>(std::distance(first, last))};
 3721|   701M|    }
 3722|   701M|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3329|  2.83M|    {
 3330|  2.83M|        return m_iterator;
 3331|  2.83M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3333|  3.18M|    {
 3334|  3.18M|        return m_sentinel;
 3335|  3.18M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3329|  7.84M|    {
 3330|  7.84M|        return m_iterator;
 3331|  7.84M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3333|  1.40G|    {
 3334|  1.40G|        return m_sentinel;
 3335|  1.40G|    }
_ZN3scn2v36detail10locale_refC2Ev:
 7990|   284k|    constexpr locale_ref() = default;
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|    112|{
 1211|    112|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|    112|}
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  360|  2.37k|    {
  361|  2.37k|        return m_unexpected;
  362|  2.37k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA22_KcEEEDaDpOT_:
 3653|  62.6k|{
 3654|  62.6k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  62.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  62.6k|}
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  346|   167k|    {
  347|   167k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   167k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   167k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1475|   155k|    {
 1476|   155k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  446|   156k|    {
  447|   156k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   194k|    {
 1177|   194k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1429|  34.4k|    {
 1430|  34.4k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  34.4k|    {
  437|  34.4k|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1597|   195k|    {
 1598|   195k|        return has_value();
 1599|   195k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  484|   387k|    {
  485|   387k|        return m_has_value;
  486|   387k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1603|   155k|    {
 1604|   155k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   155k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   155k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   155k|        return this->get_unexpected().error();
 1606|   155k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   155k|    {
  468|   155k|        return m_unexpected;
  469|   155k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1662|  24.2k|    {
 1663|  24.2k|        return std::move(value());
 1664|  24.2k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1626|  36.4k|    {
 1627|  36.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  36.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  36.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  36.4k|        return this->get_value();
 1629|  36.4k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  450|  36.4k|    {
  451|  36.4k|        return m_value;
  452|  36.4k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1475|   316k|    {
 1476|   316k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  446|   336k|    {
  447|   336k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   722k|    {
 1177|   722k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1429|   385k|    {
 1430|   385k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|   385k|    {
  437|   385k|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1597|   742k|    {
 1598|   742k|        return has_value();
 1599|   742k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  484|  1.42M|    {
  485|  1.42M|        return m_has_value;
  486|  1.42M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1603|   316k|    {
 1604|   316k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   316k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   316k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   316k|        return this->get_unexpected().error();
 1606|   316k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   316k|    {
  468|   316k|        return m_unexpected;
  469|   316k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1662|   285k|    {
 1663|   285k|        return std::move(value());
 1664|   285k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1626|   365k|    {
 1627|   365k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   365k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   365k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   365k|        return this->get_value();
 1629|   365k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  450|   365k|    {
  451|   365k|        return m_value;
  452|   365k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  9.33k|    {
 1837|  9.33k|        return detail::transform_error_impl(std::move(*this),
 1838|  9.33k|                                            std::forward<F>(f));
 1839|  9.33k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|  9.33k|{
 1323|  9.33k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  9.33k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  9.33k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  9.33k|            return result(*std::forward<Exp>(exp));
 1327|  9.33k|        }
 1328|       |
 1329|  9.33k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  9.33k|        return result(unexpect, monostate{});
 1331|  9.33k|    }
 1332|  9.33k|    else {
 1333|  9.33k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  9.33k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  9.33k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 9.33k, False: 0]
  |  |  ------------------
  ------------------
 1335|  9.33k|                   ? result(*std::forward<Exp>(exp))
 1336|  9.33k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  9.33k|    }
 1340|  9.33k|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|   125k|    {
  485|   125k|        return m_has_value;
  486|   125k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1662|  11.3k|    {
 1663|  11.3k|        return std::move(value());
 1664|  11.3k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1626|  59.6k|    {
 1627|  59.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  59.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  59.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  59.6k|        return this->get_value();
 1629|  59.6k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  59.6k|    {
  451|  59.6k|        return m_value;
  452|  59.6k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1613|    102|    {
 1614|    102|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    102|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    102|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    102|        return std::move(this->get_unexpected().error());
 1616|    102|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|    102|    {
  468|    102|        return m_unexpected;
  469|    102|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1485|  1.02k|    {
 1486|  1.02k|    }
_ZN3scn2v310scan_errorC2Ev:
 3562|   871k|    constexpr scan_error() noexcept = default;
_ZNK3scn2v36detail9fill_type13get_code_unitIcEET_v:
 6186|  4.76k|    {
 6187|  4.76k|        SCN_EXPECT(m_size <= sizeof(CharT));
  ------------------
  |  |  924|  4.76k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.76k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6188|  4.76k|        CharT r{};
 6189|  4.76k|        std::memcpy(&r, m_data, m_size);
 6190|  4.76k|        return r;
 6191|  4.76k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  346|  1.41k|    {
  347|  1.41k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  1.41k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  1.41k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  355|  1.52k|    {
  356|  1.52k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  1.52k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  1.52k|    }
_ZNK3scn2v36detail9fill_type14get_code_unitsIcEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 6195|    586|    {
 6196|    586|        return {reinterpret_cast<const CharT*>(m_data), m_size};
 6197|    586|    }
_ZNK3scn2v36ranges6detail6ssize_2fnclIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSD_:
 2961|     52|    {
 2962|     52|        return fn::impl(std::forward<T>(t));
 2963|     52|    }
_ZN3scn2v36ranges6detail6ssize_2fn4implIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISD_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSD_EEEEE15difference_typeEE4typeELm8EElSM_E4typeE_EEOSD_:
 2952|     52|    {
 2953|     52|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 2954|     52|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|     52|    {
 2930|     52|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|     52|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 2895|     52|    {
 2896|     52|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|     52|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|     52|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  346|    112|    {
  347|    112|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|    112|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|    112|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  346|      8|    {
  347|      8|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|      8|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|      8|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_errorEE5errorEv:
  360|   154k|    {
  361|   154k|        return m_unexpected;
  362|   154k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  355|  22.9k|    {
  356|  22.9k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  22.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  22.9k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  346|   259k|    {
  347|   259k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   259k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   259k|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  360|   259k|    {
  361|   259k|        return m_unexpected;
  362|   259k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  355|   259k|    {
  356|   259k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   259k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|   259k|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|    736|{
 1211|    736|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|    736|}
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  346|  22.2k|    {
  347|  22.2k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  22.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  22.2k|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JS8_EvEEDcOT_DpOT0_:
 1210|  1.64k|{
 1211|  1.64k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  1.64k|}
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  14.0k|{
  326|  14.0k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  14.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  14.0k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_LPv0EEEmv:
 3345|  98.7k|    {
 3346|  98.7k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3347|  98.7k|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|    670|    {
 1476|    670|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|    670|    {
  447|    670|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  66.1k|    {
 1177|  66.1k|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1429|  65.4k|    {
 1430|  65.4k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  65.4k|    {
  437|  65.4k|    }
_ZNK3scn2v38expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1597|  54.7k|    {
 1598|  54.7k|        return has_value();
 1599|  54.7k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1652|  48.3k|    {
 1653|  48.3k|        return value();
 1654|  48.3k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEC2IS7_vEEOT_:
 1429|  6.58k|    {
 1430|  6.58k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  436|  6.58k|    {
  437|  6.58k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  6.95k|    {
 1177|  6.95k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|    370|    {
 1476|    370|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|    370|    {
  447|    370|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEcvbEv:
 1597|  3.59k|    {
 1598|  3.59k|        return has_value();
 1599|  3.59k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE9has_valueEv:
  484|  11.7k|    {
  485|  11.7k|        return m_has_value;
  486|  11.7k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEdeIS7_LPv0EEERT_v:
 1652|  1.39k|    {
 1653|  1.39k|        return value();
 1654|  1.39k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE5valueIS7_LPv0EEERT_v:
 1626|  4.40k|    {
 1627|  4.40k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.40k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.40k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.40k|        return this->get_value();
 1629|  4.40k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE9get_valueEv:
  450|  4.40k|    {
  451|  4.40k|        return m_value;
  452|  4.40k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|    112|    {
 1476|    112|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|    112|    {
  447|    112|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  6.73k|    {
 1177|  6.73k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|  6.61k|    {
 1430|  6.61k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2IJSB_EvEENS3_10in_place_tEDpOT_:
  436|  6.61k|    {
  437|  6.61k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|  1.03k|    {
 1837|  1.03k|        return detail::transform_error_impl(std::move(*this),
 1838|  1.03k|                                            std::forward<F>(f));
 1839|  1.03k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9eof_errorEEERFNS0_10scan_errorESA_ELPv0ESC_EEDaOT_OT0_:
 1322|  1.03k|{
 1323|  1.03k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.03k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.03k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.03k|            return result(*std::forward<Exp>(exp));
 1327|  1.03k|        }
 1328|       |
 1329|  1.03k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.03k|        return result(unexpect, monostate{});
 1331|  1.03k|    }
 1332|  1.03k|    else {
 1333|  1.03k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.03k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.03k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.03k, False: 0]
  |  |  ------------------
  ------------------
 1335|  1.03k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.03k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  1.03k|    }
 1340|  1.03k|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEdeIS7_LPv0EEEOT_v:
 1662|  3.01k|    {
 1663|  3.01k|        return std::move(value());
 1664|  3.01k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IS7_vEEOT_:
 1429|  2.86k|    {
 1430|  2.86k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  436|  2.86k|    {
  437|  2.86k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  13.8k|    {
 1177|  13.8k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE5errorEv:
 1613|    340|    {
 1614|    340|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    340|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    340|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    340|        return std::move(this->get_unexpected().error());
 1616|    340|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE14get_unexpectedEv:
  467|    340|    {
  468|    340|        return m_unexpected;
  469|    340|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1485|  1.80k|    {
 1486|  1.80k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|  9.65k|    {
  447|  9.65k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  2.41k|    {
 2724|  2.41k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  2.41k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESJ_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  2.41k|    {
 2705|  2.41k|        return decay_copy(t.begin());
 2706|  2.41k|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEEu7__decayIT_EOSA_:
 1948|  5.19k|{
 1949|  5.19k|    return SCN_FWD(t);
  ------------------
  |  |  930|  5.19k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  5.19k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_E5beginEv:
 3329|  2.41k|    {
 3330|  2.41k|        return m_iterator;
 3331|  2.41k|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  2.41k|    {
 2781|  2.41k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  2.41k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EESD_SD_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  2.41k|    {
 2763|  2.41k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  2.41k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_E3endEv:
 3333|  2.41k|    {
 3334|  2.41k|        return m_sentinel;
 3335|  2.41k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_EC2ISA_LPv0EEET_SA_:
 3315|  2.41k|    {
 3316|  2.41k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEcvbEv:
 1597|  6.73k|    {
 1598|  6.73k|        return has_value();
 1599|  6.73k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  13.4k|    {
  485|  13.4k|        return m_has_value;
  486|  13.4k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEE5errorEv:
 1603|    112|    {
 1604|    112|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    112|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    112|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    112|        return this->get_unexpected().error();
 1606|    112|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|    112|    {
  468|    112|        return m_unexpected;
  469|    112|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1662|  6.61k|    {
 1663|  6.61k|        return std::move(value());
 1664|  6.61k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|  6.61k|    {
 1627|  6.61k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  6.61k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.61k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  6.61k|        return this->get_value();
 1629|  6.61k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE9get_valueEv:
  450|  6.61k|    {
  451|  6.61k|        return m_value;
  452|  6.61k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  34.3k|    {
 1177|  34.3k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|  34.3k|    {
 1430|  34.3k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  436|  34.3k|    {
  437|  34.3k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1597|  34.3k|    {
 1598|  34.3k|        return has_value();
 1599|  34.3k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  484|  68.6k|    {
  485|  68.6k|        return m_has_value;
  486|  68.6k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|  34.3k|    {
 1663|  34.3k|        return std::move(value());
 1664|  34.3k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|  34.3k|    {
 1627|  34.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  34.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  34.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  34.3k|        return this->get_value();
 1629|  34.3k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  450|  34.3k|    {
  451|  34.3k|        return m_value;
  452|  34.3k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|  7.85k|    {
 1476|  7.85k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|    702|    {
 1476|    702|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|  1.04k|    {
  447|  1.04k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  8.69k|    {
 1177|  8.69k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2INS8_4codeELPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  5.67k|    {
 1476|  5.67k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJNS9_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  5.67k|    {
  447|  5.67k|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEcvbEv:
 1597|  7.97k|    {
 1598|  7.97k|        return has_value();
 1599|  7.97k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE9has_valueEv:
  484|  15.7k|    {
  485|  15.7k|        return m_has_value;
  486|  15.7k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5errorEv:
 1603|  2.88k|    {
 1604|  2.88k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.88k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.88k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.88k|        return this->get_unexpected().error();
 1606|  2.88k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE14get_unexpectedEv:
  467|  3.96k|    {
  468|  3.96k|        return m_unexpected;
  469|  3.96k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEC2ISB_vEEOT_:
 1429|  1.45k|    {
 1430|  1.45k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  436|  1.45k|    {
  437|  1.45k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.45k|    {
 1177|  1.45k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5valueIS7_LPv0EEERT_v:
 1626|  1.97k|    {
 1627|  1.97k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.97k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.97k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.97k|        return this->get_value();
 1629|  1.97k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE9get_valueEv:
  450|  1.97k|    {
  451|  1.97k|        return m_value;
  452|  1.97k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEcvbEv:
 1597|  1.09k|    {
 1598|  1.09k|        return has_value();
 1599|  1.09k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9has_valueEv:
  484|  2.91k|    {
  485|  2.91k|        return m_has_value;
  486|  2.91k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.09k|    {
 1177|  1.09k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEdeISB_LPv0EEEOT_v:
 1662|  1.45k|    {
 1663|  1.45k|        return std::move(value());
 1664|  1.45k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEE5valueISB_LPv0EEERT_v:
 1626|  1.45k|    {
 1627|  1.45k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.45k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.45k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.45k|        return this->get_value();
 1629|  1.45k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9get_valueEv:
  450|  1.45k|    {
  451|  1.45k|        return m_value;
  452|  1.45k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE3endEv:
 3333|   257k|    {
 3334|   257k|        return m_sentinel;
 3335|   257k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE15transform_errorIRFNS2_11parse_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|  2.31k|    {
 1837|  2.31k|        return detail::transform_error_impl(std::move(*this),
 1838|  2.31k|                                            std::forward<F>(f));
 1839|  2.31k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9eof_errorEEERFNS4_11parse_errorESA_ELPv0ESC_EEDaOT_OT0_:
 1322|  2.31k|{
 1323|  2.31k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  2.31k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  2.31k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  2.31k|            return result(*std::forward<Exp>(exp));
 1327|  2.31k|        }
 1328|       |
 1329|  2.31k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  2.31k|        return result(unexpect, monostate{});
 1331|  2.31k|    }
 1332|  2.31k|    else {
 1333|  2.31k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.31k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.31k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.97k, False: 340]
  |  |  ------------------
  ------------------
 1335|  2.31k|                   ? result(*std::forward<Exp>(exp))
 1336|  2.31k|                   : result(unexpect,
 1337|    340|                            trivial_invoke(std::forward<F>(f),
 1338|    340|                                           std::forward<Exp>(exp).error()));
 1339|  2.31k|    }
 1340|  2.31k|}
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IS7_vEEOT_:
 1429|  1.97k|    {
 1430|  1.97k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  436|  1.97k|    {
  437|  1.97k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1485|    340|    {
 1486|    340|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEdeIS7_LPv0EEEOT_v:
 1662|  1.97k|    {
 1663|  1.97k|        return std::move(value());
 1664|  1.97k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE5beginEv:
 3329|   513k|    {
 3330|   513k|        return m_iterator;
 3331|   513k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEEC2IS9_vEEOT_:
 1429|  1.09k|    {
 1430|  1.09k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  436|  1.09k|    {
  437|  1.09k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESA_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1836|  1.09k|    {
 1837|  1.09k|        return detail::transform_error_impl(std::move(*this),
 1838|  1.09k|                                            std::forward<F>(f));
 1839|  1.09k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS4_27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEENS4_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
 1322|  1.09k|{
 1323|  1.09k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.09k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.09k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.09k|            return result(*std::forward<Exp>(exp));
 1327|  1.09k|        }
 1328|       |
 1329|  1.09k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.09k|        return result(unexpect, monostate{});
 1331|  1.09k|    }
 1332|  1.09k|    else {
 1333|  1.09k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.09k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.09k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.09k, False: 0]
  |  |  ------------------
  ------------------
 1335|  1.09k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.09k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  1.09k|    }
 1340|  1.09k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EE9has_valueEv:
  484|  2.18k|    {
  485|  2.18k|        return m_has_value;
  486|  2.18k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEEdeIS9_LPv0EEEOT_v:
 1662|  1.09k|    {
 1663|  1.09k|        return std::move(value());
 1664|  1.09k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEE5valueIS9_LPv0EEERT_v:
 1626|  1.09k|    {
 1627|  1.09k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.09k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.09k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.09k|        return this->get_value();
 1629|  1.09k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EE9get_valueEv:
  450|  1.09k|    {
  451|  1.09k|        return m_value;
  452|  1.09k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEC2IS9_vEEOT_:
 1429|  1.09k|    {
 1430|  1.09k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  436|  1.09k|    {
  437|  1.09k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.09k|    {
 1177|  1.09k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEcvbEv:
 1597|  1.09k|    {
 1598|  1.09k|        return has_value();
 1599|  1.09k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.18k|    {
  485|  2.18k|        return m_has_value;
  486|  2.18k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1662|  1.09k|    {
 1663|  1.09k|        return std::move(value());
 1664|  1.09k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1626|  1.09k|    {
 1627|  1.09k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.09k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.09k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.09k|        return this->get_value();
 1629|  1.09k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.09k|    {
  451|  1.09k|        return m_value;
  452|  1.09k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeES6_EUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|  1.07k|    {
 1837|  1.07k|        return detail::transform_error_impl(std::move(*this),
 1838|  1.07k|                                            std::forward<F>(f));
 1839|  1.07k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES8_EUlSA_E_LPv0ESC_EEDaOT_OT0_:
 1322|  1.07k|{
 1323|  1.07k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.07k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.07k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.07k|            return result(*std::forward<Exp>(exp));
 1327|  1.07k|        }
 1328|       |
 1329|  1.07k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.07k|        return result(unexpect, monostate{});
 1331|  1.07k|    }
 1332|  1.07k|    else {
 1333|  1.07k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.07k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.07k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 1.07k]
  |  |  ------------------
  ------------------
 1335|  1.07k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.07k|                   : result(unexpect,
 1337|  1.07k|                            trivial_invoke(std::forward<F>(f),
 1338|  1.07k|                                           std::forward<Exp>(exp).error()));
 1339|  1.07k|    }
 1340|  1.07k|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5errorEv:
 1613|  1.07k|    {
 1614|  1.07k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.07k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.07k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  1.07k|        return std::move(this->get_unexpected().error());
 1616|  1.07k|    }
_ZN3scn2v313scan_expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EEEC2EONS0_8expectedIS7_NS0_10scan_errorEEE:
 3647|  1.80k|    {
 3648|  1.80k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEC2ISA_LPv0EEET_SF_:
 3315|   182k|    {
 3316|   182k|    }
_ZN3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|     16|    {
 1476|     16|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  625|     16|    {
  626|     16|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|     16|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESI_EEEvDpOT_:
  688|     16|    {
  689|     16|        scn::detail::construct_at(unexpected_ptr(),
  690|     16|                                  std::forward<Args>(args)...);
  691|     16|        m_has_value = false;
  692|     16|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|     48|    {
  718|     48|        return reinterpret_cast<unexpected<E>*>(
  719|     48|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|     48|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|     48|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|     16|    {
 1177|     16|    }
_ZNK3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEEcvbEv:
 1597|     16|    {
 1598|     16|        return has_value();
 1599|     16|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE9has_valueEv:
  674|     48|    {
  675|     48|        return m_has_value;
  676|     48|    }
_ZNR3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEE5errorEv:
 1603|     16|    {
 1604|     16|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     16|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     16|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|     16|        return this->get_unexpected().error();
 1606|     16|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|     16|    {
  658|     16|        return *unexpected_ptr();
  659|     16|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EED2Ev:
  630|     16|    {
  631|     16|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 0, False: 16]
  ------------------
  632|      0|            destroy_value();
  633|      0|        }
  634|     16|        else {
  635|     16|            destroy_unexpected();
  636|     16|        }
  637|     16|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|     16|    {
  700|     16|        scn::detail::destroy_at(unexpected_ptr());
  701|     16|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEcvbEv:
 1597|  14.2k|    {
 1598|  14.2k|        return has_value();
 1599|  14.2k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  27.7k|    {
  485|  27.7k|        return m_has_value;
  486|  27.7k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEE5errorEv:
 1603|  9.29k|    {
 1604|  9.29k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  9.29k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.29k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  9.29k|        return this->get_unexpected().error();
 1606|  9.29k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  9.29k|    {
  468|  9.29k|        return m_unexpected;
  469|  9.29k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEdeIS7_LPv0EEEOT_v:
 1662|  2.86k|    {
 1663|  2.86k|        return std::move(value());
 1664|  2.86k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEE5valueIS7_LPv0EEERT_v:
 1626|  4.21k|    {
 1627|  4.21k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.21k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.21k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.21k|        return this->get_value();
 1629|  4.21k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  4.21k|    {
  451|  4.21k|        return m_value;
  452|  4.21k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|  1.10k|    {
 1476|  1.10k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  1.21k|    {
  447|  1.21k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  15.1k|    {
 1177|  15.1k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|  11.9k|    {
 1476|  11.9k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  11.9k|    {
  447|  11.9k|    }
_ZNK3scn2v38expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1597|  16.1k|    {
 1598|  16.1k|        return has_value();
 1599|  16.1k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  25.1k|    {
  485|  25.1k|        return m_has_value;
  486|  25.1k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1603|  6.01k|    {
 1604|  6.01k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  6.01k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.01k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  6.01k|        return this->get_unexpected().error();
 1606|  6.01k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  6.01k|    {
  468|  6.01k|        return m_unexpected;
  469|  6.01k|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1429|  3.89k|    {
 1430|  3.89k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|  3.89k|    {
  437|  3.89k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.89k|    {
 1177|  3.89k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1626|  1.99k|    {
 1627|  1.99k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.99k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.99k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.99k|        return this->get_value();
 1629|  1.99k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  1.99k|    {
  451|  1.99k|        return m_value;
  452|  1.99k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  2.89k|    {
 1598|  2.89k|        return has_value();
 1599|  2.89k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|  7.78k|    {
  485|  7.78k|        return m_has_value;
  486|  7.78k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.89k|    {
 1177|  2.89k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1662|  3.89k|    {
 1663|  3.89k|        return std::move(value());
 1664|  3.89k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1626|  3.89k|    {
 1627|  3.89k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.89k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.89k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.89k|        return this->get_value();
 1629|  3.89k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|  3.89k|    {
  451|  3.89k|        return m_value;
  452|  3.89k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3220|  58.1k|    {
 3221|  58.1k|        return ranges::empty(derived())
  ------------------
  |  Branch (3221:16): [True: 2.11k, False: 56.0k]
  ------------------
 3222|  58.1k|                   ? nullptr
 3223|  58.1k|                   : std::addressof(*ranges::begin(derived()));
 3224|  58.1k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|  58.1k|    {
 3005|  58.1k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  58.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|  58.1k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|  58.1k|    {
 2978|  58.1k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  58.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|  58.1k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5emptyEv:
 3338|  58.1k|    {
 3339|  58.1k|        return m_iterator == m_sentinel;
 3340|  58.1k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3179|   114k|    {
 3180|   114k|        return static_cast<D&>(*this);
 3181|   114k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  56.0k|    {
 2724|  56.0k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  56.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  56.0k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  56.0k|    {
 2705|  56.0k|        return decay_copy(t.begin());
 2706|  56.0k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1429|  1.99k|    {
 1430|  1.99k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  1.99k|    {
  437|  1.99k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1429|  2.89k|    {
 1430|  2.89k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  436|  2.89k|    {
  437|  2.89k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  2.89k|    {
 1837|  2.89k|        return detail::transform_error_impl(std::move(*this),
 1838|  2.89k|                                            std::forward<F>(f));
 1839|  2.89k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
 1322|  2.89k|{
 1323|  2.89k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  2.89k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  2.89k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  2.89k|            return result(*std::forward<Exp>(exp));
 1327|  2.89k|        }
 1328|       |
 1329|  2.89k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  2.89k|        return result(unexpect, monostate{});
 1331|  2.89k|    }
 1332|  2.89k|    else {
 1333|  2.89k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.89k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.89k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.89k, False: 0]
  |  |  ------------------
  ------------------
 1335|  2.89k|                   ? result(*std::forward<Exp>(exp))
 1336|  2.89k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  2.89k|    }
 1340|  2.89k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  484|  5.78k|    {
  485|  5.78k|        return m_has_value;
  486|  5.78k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1662|  2.89k|    {
 1663|  2.89k|        return std::move(value());
 1664|  2.89k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1626|  2.89k|    {
 1627|  2.89k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.89k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.89k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.89k|        return this->get_value();
 1629|  2.89k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  450|  2.89k|    {
  451|  2.89k|        return m_value;
  452|  2.89k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|  2.89k|    {
 1430|  2.89k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  436|  2.89k|    {
  437|  2.89k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.89k|    {
 1177|  2.89k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1597|  2.89k|    {
 1598|  2.89k|        return has_value();
 1599|  2.89k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  484|  5.78k|    {
  485|  5.78k|        return m_has_value;
  486|  5.78k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|  2.89k|    {
 1663|  2.89k|        return std::move(value());
 1664|  2.89k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|  2.89k|    {
 1627|  2.89k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.89k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.89k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.89k|        return this->get_value();
 1629|  2.89k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.89k|    {
  451|  2.89k|        return m_value;
  452|  2.89k|    }
_ZN3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISD_LPv0ELSG_0EEEONS0_10unexpectedIT_EE:
 1475|     40|    {
 1476|     40|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS0_10unexpect_tEDpOT_:
  625|     40|    {
  626|     40|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|     40|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESE_EEEvDpOT_:
  688|     40|    {
  689|     40|        scn::detail::construct_at(unexpected_ptr(),
  690|     40|                                  std::forward<Args>(args)...);
  691|     40|        m_has_value = false;
  692|     40|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|    120|    {
  718|    120|        return reinterpret_cast<unexpected<E>*>(
  719|    120|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|    120|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|    120|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|     40|    {
 1177|     40|    }
_ZNK3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEcvbEv:
 1597|     40|    {
 1598|     40|        return has_value();
 1599|     40|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9has_valueEv:
  674|    120|    {
  675|    120|        return m_has_value;
  676|    120|    }
_ZNR3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5errorEv:
 1603|     40|    {
 1604|     40|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     40|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     40|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|     40|        return this->get_unexpected().error();
 1606|     40|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|     40|    {
  658|     40|        return *unexpected_ptr();
  659|     40|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EED2Ev:
  630|     40|    {
  631|     40|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 0, False: 40]
  ------------------
  632|      0|            destroy_value();
  633|      0|        }
  634|     40|        else {
  635|     40|            destroy_unexpected();
  636|     40|        }
  637|     40|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|     40|    {
  700|     40|        scn::detail::destroy_at(unexpected_ptr());
  701|     40|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  36.0k|    {
 2855|  36.0k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  36.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  36.0k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  36.0k|    {
 2836|  36.0k|        return t.data();
 2837|  36.0k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1475|   550k|    {
 1476|   550k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  446|   550k|    {
  447|   550k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   554k|    {
 1177|   554k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1429|  4.18k|    {
 1430|  4.18k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  436|  4.18k|    {
  437|  4.18k|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1210|  22.0k|{
 1211|  22.0k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  22.0k|}
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEE15transform_errorIRFNS0_10scan_errorESC_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSI_:
 1836|    362|    {
 1837|    362|        return detail::transform_error_impl(std::move(*this),
 1838|    362|                                            std::forward<F>(f));
 1839|    362|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_9sign_typeEEENS6_9eof_errorEEERFNS0_10scan_errorESE_ELPv0ESG_EEDaOT_OT0_:
 1322|    362|{
 1323|    362|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    362|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    362|        if (SCN_LIKELY(exp.has_value())) {
 1326|    362|            return result(*std::forward<Exp>(exp));
 1327|    362|        }
 1328|       |
 1329|    362|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    362|        return result(unexpect, monostate{});
 1331|    362|    }
 1332|    362|    else {
 1333|    362|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    362|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    362|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 362, False: 0]
  |  |  ------------------
  ------------------
 1335|    362|                   ? result(*std::forward<Exp>(exp))
 1336|    362|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    362|    }
 1340|    362|}
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1429|    362|    {
 1430|    362|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  436|    362|    {
  437|    362|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    362|    {
 1177|    362|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|    362|    {
 1598|    362|        return has_value();
 1599|    362|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|    724|    {
  485|    724|        return m_has_value;
  486|    724|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEdeISB_LPv0EEEOT_v:
 1662|    362|    {
 1663|    362|        return std::move(value());
 1664|    362|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1626|    362|    {
 1627|    362|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    362|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    362|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    362|        return this->get_value();
 1629|    362|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    362|    {
  451|    362|        return m_value;
  452|    362|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeES6_EUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1822|    724|    {
 1823|    724|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|    724|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES8_EUlSA_E_LPv0ESD_EEDaOT_OT0_:
 1322|    724|{
 1323|    724|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    724|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    724|        if (SCN_LIKELY(exp.has_value())) {
 1326|    724|            return result(*std::forward<Exp>(exp));
 1327|    724|        }
 1328|       |
 1329|    724|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    724|        return result(unexpect, monostate{});
 1331|    724|    }
 1332|    724|    else {
 1333|    724|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    724|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    724|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 724]
  |  |  ------------------
  ------------------
 1335|    724|                   ? result(*std::forward<Exp>(exp))
 1336|    724|                   : result(unexpect,
 1337|    724|                            trivial_invoke(std::forward<F>(f),
 1338|    724|                                           std::forward<Exp>(exp).error()));
 1339|    724|    }
 1340|    724|}
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEdeIS7_LPv0EEERT_v:
 1652|  1.34k|    {
 1653|  1.34k|        return value();
 1654|  1.34k|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E0_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3667|      6|    auto&& SCN_TRY_TMP = (x);                          \
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|    356|    {
 2724|    356|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    356|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|    356|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESO_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|    356|    {
 2705|    356|        return decay_copy(t.begin());
 2706|    356|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3667|    340|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|    998|    {
 1837|    998|        return detail::transform_error_impl(std::move(*this),
 1838|    998|                                            std::forward<F>(f));
 1839|    998|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1322|    998|{
 1323|    998|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    998|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    998|        if (SCN_LIKELY(exp.has_value())) {
 1326|    998|            return result(*std::forward<Exp>(exp));
 1327|    998|        }
 1328|       |
 1329|    998|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    998|        return result(unexpect, monostate{});
 1331|    998|    }
 1332|    998|    else {
 1333|    998|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    998|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    998|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 998, False: 0]
  |  |  ------------------
  ------------------
 1335|    998|                   ? result(*std::forward<Exp>(exp))
 1336|    998|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    998|    }
 1340|    998|}
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|    998|    {
 1430|    998|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|    998|    {
  437|    998|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    998|    {
 1177|    998|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|    998|    {
 1598|    998|        return has_value();
 1599|    998|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.99k|    {
  485|  1.99k|        return m_has_value;
  486|  1.99k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|    998|    {
 1663|    998|        return std::move(value());
 1664|    998|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|    998|    {
 1627|    998|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    998|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    998|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    998|        return this->get_value();
 1629|    998|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    998|    {
  451|    998|        return m_value;
  452|    998|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1822|  1.02k|    {
 1823|  1.02k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|  1.02k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1322|  1.02k|{
 1323|  1.02k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.02k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.02k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.02k|            return result(*std::forward<Exp>(exp));
 1327|  1.02k|        }
 1328|       |
 1329|  1.02k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.02k|        return result(unexpect, monostate{});
 1331|  1.02k|    }
 1332|  1.02k|    else {
 1333|  1.02k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.02k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.02k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 1.02k]
  |  |  ------------------
  ------------------
 1335|  1.02k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.02k|                   : result(unexpect,
 1337|  1.02k|                            trivial_invoke(std::forward<F>(f),
 1338|  1.02k|                                           std::forward<Exp>(exp).error()));
 1339|  1.02k|    }
 1340|  1.02k|}
_ZN3scn2v313scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3647|  1.02k|    {
 3648|  1.02k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1652|  12.1k|    {
 1653|  12.1k|        return value();
 1654|  12.1k|    }
_ZN3scn2v36detail22parse_presentation_setIcRNS0_4impl22nonascii_specs_handlerEEENSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEERPKS8_SD_OT0_:
 6696|  4.67k|{
 6697|  4.67k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  4.67k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.67k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|  4.67k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  4.67k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.67k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|  4.67k|    auto start = begin;
 6701|  4.67k|    ++begin;
 6702|       |
 6703|  4.67k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  4.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.67k]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|      0|        return {};
 6708|      0|    }
 6709|  4.67k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 450, False: 4.22k]
  ------------------
 6710|    450|        handler.on_charset_inverted();
 6711|    450|        ++begin;
 6712|    450|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    450|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 450]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|      0|            return {};
 6717|      0|        }
 6718|    450|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 6, False: 444]
  ------------------
 6719|      6|            handler.on_charset_single(char32_t{']'});
 6720|      6|            ++begin;
 6721|      6|        }
 6722|    450|    }
 6723|  4.22k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 0, False: 4.22k]
  ------------------
 6724|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|      0|    }
 6726|       |
 6727|  1.11M|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 1.11M, False: 0]
  ------------------
 6728|  1.11M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.11M]
  |  |  ------------------
  ------------------
 6729|      0|            break;
 6730|      0|        }
 6731|       |
 6732|  1.11M|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 4.67k, False: 1.10M]
  ------------------
 6733|  4.67k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|  4.67k|        }
 6735|       |
 6736|  1.10M|        parse_presentation_set_literal(begin, end, handler);
 6737|  1.10M|    }
 6738|       |
 6739|      0|    SCN_UNLIKELY_ATTR
 6740|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6741|      0|    return {};
 6742|  4.67k|}
_ZN3scn2v36detail30parse_presentation_set_literalIcRNS0_4impl22nonascii_specs_handlerEEEvRPKT_S8_OT0_:
 6660|  1.10M|{
 6661|  1.10M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.10M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.10M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|  1.10M|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|  1.10M|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  1.10M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.10M]
  |  |  ------------------
  ------------------
 6665|      0|        return;
 6666|      0|    }
 6667|       |
 6668|  1.10M|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 1.10M, False: 0]
  |  Branch (6668:25): [True: 6.83k, False: 1.10M]
  |  Branch (6668:49): [True: 6.83k, False: 0]
  ------------------
 6669|  1.10M|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 6.70k, False: 126]
  ------------------
 6670|  6.70k|        ++begin;
 6671|       |
 6672|  6.70k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|  6.70k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  6.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.70k]
  |  |  ------------------
  ------------------
 6674|      0|            return;
 6675|      0|        }
 6676|       |
 6677|  6.70k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  6.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.70k]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|      0|            return;
 6682|      0|        }
 6683|       |
 6684|  6.70k|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|  6.70k|        return;
 6686|  6.70k|    }
 6687|       |
 6688|  1.10M|    handler.on_charset_single(cp_first);
 6689|  1.10M|}
_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS0_4impl22nonascii_specs_handlerEEEDiRPKT_S8_OT0_:
 6636|  1.11M|{
 6637|  1.11M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.11M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.11M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|  1.11M|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|  1.11M|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  2.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.11M]
  |  |  |  Branch (859:45): [True: 0, False: 1.11M]
  |  |  |  Branch (859:45): [True: 0, False: 1.11M]
  |  |  ------------------
  ------------------
 6641|      0|        handler.on_error("Invalid encoding in format string");
 6642|      0|        return invalid_code_point;
 6643|      0|    }
 6644|       |
 6645|  1.11M|    const auto cp =
 6646|  1.11M|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|  1.11M|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  1.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.11M]
  |  |  ------------------
  ------------------
 6648|      0|        handler.on_error("Invalid encoding in format string");
 6649|      0|        return invalid_code_point;
 6650|      0|    }
 6651|       |
 6652|  1.11M|    begin += len;
 6653|  1.11M|    return cp;
 6654|  1.11M|}
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  36.5k|    {
 1177|  36.5k|    }
_ZN3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEC2IS4_vEEOT_:
 1429|  36.5k|    {
 1430|  36.5k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EEC2IJS5_EvEENS3_10in_place_tEDpOT_:
  436|  36.5k|    {
  437|  36.5k|    }
_ZNK3scn2v36detail12format_specs14charset_stringIcEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 6251|  27.2k|    {
 6252|  27.2k|        return {reinterpret_cast<const CharT*>(charset_string_data),
 6253|  27.2k|                charset_string_size};
 6254|  27.2k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IRKS7_vEEOT_:
 1429|  1.34k|    {
 1430|  1.34k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJRKS8_EvEENSt3__110in_place_tEDpOT_:
  436|  1.34k|    {
  437|  1.34k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1429|  3.01k|    {
 1430|  3.01k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  436|  3.01k|    {
  437|  3.01k|    }
_ZN3scn2v36detail34decode_code_point_exhaustive_validIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4032|   300k|{
 4033|   300k|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4033:19): [Folded - Ignored]
  ------------------
 4034|   300k|        return decode_utf8_code_point_exhaustive_valid(input);
 4035|   300k|    }
 4036|   300k|    else if constexpr (sizeof(CharT) == 2) {
 4037|   300k|        return decode_utf16_code_point_exhaustive_valid(input);
 4038|   300k|    }
 4039|   300k|    else {
 4040|   300k|        SCN_EXPECT(input.size() == 1);
 4041|   300k|        return static_cast<char32_t>(input.front());
 4042|   300k|    }
 4043|   300k|}
_ZZN3scn2v36detail39decode_utf8_code_point_exhaustive_validENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3910|  35.4k|    const auto is_trailing_code_unit = [](char ch) {
 3911|  35.4k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3912|  35.4k|    };
_ZNK3scn2v36detail9fill_type13get_code_unitIwEET_v:
 6186|    942|    {
 6187|    942|        SCN_EXPECT(m_size <= sizeof(CharT));
  ------------------
  |  |  924|    942|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    942|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6188|    942|        CharT r{};
 6189|    942|        std::memcpy(&r, m_data, m_size);
 6190|    942|        return r;
 6191|    942|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3806|   703M|{
 3807|   703M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3807:19): [Folded - Ignored]
  ------------------
 3808|   703M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3809|   703M|    }
 3810|   703M|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (3810:24): [Folded - Ignored]
  ------------------
 3811|   703M|        return utf16_code_point_length_by_starting_code_unit(ch);
 3812|   703M|    }
 3813|   703M|    else {
 3814|       |        // utf-32
 3815|   703M|        static_assert(sizeof(U) == 4);
 3816|   703M|        SCN_UNUSED(ch);
  ------------------
  |  |  909|   703M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3817|   703M|        return 1;
 3818|   703M|    }
 3819|   703M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4012|   703M|{
 4013|   703M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4013:19): [Folded - Ignored]
  ------------------
 4014|   703M|        return decode_utf8_code_point_exhaustive(input);
 4015|   703M|    }
 4016|   703M|    else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (4016:24): [Folded - Ignored]
  ------------------
 4017|   703M|        return decode_utf16_code_point_exhaustive(input);
 4018|   703M|    }
 4019|   703M|    else {
 4020|   703M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|   703M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   703M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4021|   703M|        auto cp = static_cast<char32_t>(input.front());
 4022|   703M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|   703M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 178k, False: 703M]
  |  |  ------------------
  ------------------
 4023|   178k|            return invalid_code_point;
 4024|   178k|        }
 4025|   703M|        return cp;
 4026|   703M|    }
 4027|   703M|}
_ZN3scn2v36detail31make_string_view_from_iteratorsIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3698|   362k|{
 3699|   362k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3699:19): [Folded - Ignored]
  |  Branch (3699:19): [Folded - Ignored]
  ------------------
 3700|   362k|                                          decltype(first), decltype(last)> &&
 3701|   362k|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3701:19): [Folded - Ignored]
  ------------------
 3702|   362k|        return {first, last};
 3703|   362k|    }
 3704|   362k|    else {
 3705|   362k|        return {to_address(first), static_cast<size_t>(std::distance(
 3706|   362k|                                       to_address(first), to_address(last)))};
 3707|   362k|    }
 3708|   362k|}
_ZN3scn2v36detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  2.17M|{
  326|  2.17M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  2.17M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  2.17M|}
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  303|  2.17M|{
  304|  2.17M|    return p;
  305|  2.17M|}
_ZN3scn2v36detail25make_string_view_iteratorIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3729|  6.05k|{
 3730|  6.05k|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (3730:19): [Folded - Ignored]
  |  Branch (3730:19): [Folded - Ignored]
  ------------------
 3731|  6.05k|                      typename std::basic_string_view<CharT>::iterator,
 3732|  6.05k|                      decltype(it)> &&
 3733|  6.05k|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3733:19): [Folded - Ignored]
  ------------------
 3734|  6.05k|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  6.05k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3735|  6.05k|        return it;
 3736|  6.05k|    }
 3737|  6.05k|    else {
 3738|  6.05k|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3739|  6.05k|    }
 3740|  6.05k|}
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  1.71k|{
  326|  1.71k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  1.71k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  1.71k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_LPv0EEEmv:
 3345|   275k|    {
 3346|   275k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3347|   275k|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|    146|    {
 1476|    146|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|    146|    {
  447|    146|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   438k|    {
 1177|   438k|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1429|   438k|    {
 1430|   438k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|   438k|    {
  437|   438k|    }
_ZNK3scn2v38expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1597|   119k|    {
 1598|   119k|        return has_value();
 1599|   119k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|   757k|    {
  485|   757k|        return m_has_value;
  486|   757k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1626|   319k|    {
 1627|   319k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   319k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   319k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   319k|        return this->get_value();
 1629|   319k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|   319k|    {
  451|   319k|        return m_value;
  452|   319k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEC2IS7_vEEOT_:
 1429|  2.60k|    {
 1430|  2.60k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  436|  2.60k|    {
  437|  2.60k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.75k|    {
 1177|  2.75k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|    148|    {
 1476|    148|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|    148|    {
  447|    148|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEcvbEv:
 1597|  1.22k|    {
 1598|  1.22k|        return has_value();
 1599|  1.22k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE9has_valueEv:
  484|  4.27k|    {
  485|  4.27k|        return m_has_value;
  486|  4.27k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE5valueIS7_LPv0EEERT_v:
 1626|  1.37k|    {
 1627|  1.37k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.37k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.37k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.37k|        return this->get_value();
 1629|  1.37k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE9get_valueEv:
  450|  1.37k|    {
  451|  1.37k|        return m_value;
  452|  1.37k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.92k|    {
 1177|  1.92k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|  1.92k|    {
 1430|  1.92k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EEC2IJSB_EvEENS3_10in_place_tEDpOT_:
  436|  1.92k|    {
  437|  1.92k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|    294|    {
 1837|    294|        return detail::transform_error_impl(std::move(*this),
 1838|    294|                                            std::forward<F>(f));
 1839|    294|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9eof_errorEEERFNS0_10scan_errorESA_ELPv0ESC_EEDaOT_OT0_:
 1322|    294|{
 1323|    294|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    294|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    294|        if (SCN_LIKELY(exp.has_value())) {
 1326|    294|            return result(*std::forward<Exp>(exp));
 1327|    294|        }
 1328|       |
 1329|    294|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    294|        return result(unexpect, monostate{});
 1331|    294|    }
 1332|    294|    else {
 1333|    294|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    294|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    294|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 294, False: 0]
  |  |  ------------------
  ------------------
 1335|    294|                   ? result(*std::forward<Exp>(exp))
 1336|    294|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    294|    }
 1340|    294|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEdeIS7_LPv0EEEOT_v:
 1662|  1.37k|    {
 1663|  1.37k|        return std::move(value());
 1664|  1.37k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IS7_vEEOT_:
 1429|    740|    {
 1430|    740|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  436|    740|    {
  437|    740|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.94k|    {
 1177|  3.94k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE5errorEv:
 1613|    148|    {
 1614|    148|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    148|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    148|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    148|        return std::move(this->get_unexpected().error());
 1616|    148|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE14get_unexpectedEv:
  467|    148|    {
  468|    148|        return m_unexpected;
  469|    148|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1485|    962|    {
 1486|    962|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|  3.20k|    {
  447|  3.20k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|    442|    {
 2724|    442|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    442|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|    442|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESJ_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|    442|    {
 2705|    442|        return decay_copy(t.begin());
 2706|    442|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEEu7__decayIT_EOSA_:
 1948|  1.07k|{
 1949|  1.07k|    return SCN_FWD(t);
  ------------------
  |  |  930|  1.07k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  1.07k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_E5beginEv:
 3329|    442|    {
 3330|    442|        return m_iterator;
 3331|    442|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|    442|    {
 2781|    442|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    442|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|    442|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EESD_SD_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|    442|    {
 2763|    442|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|    442|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|    442|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_E3endEv:
 3333|    442|    {
 3334|    442|        return m_sentinel;
 3335|    442|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_EC2ISA_LPv0EEET_SA_:
 3315|    442|    {
 3316|    442|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEcvbEv:
 1597|  1.92k|    {
 1598|  1.92k|        return has_value();
 1599|  1.92k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  3.84k|    {
  485|  3.84k|        return m_has_value;
  486|  3.84k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1662|  1.92k|    {
 1663|  1.92k|        return std::move(value());
 1664|  1.92k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|  1.92k|    {
 1627|  1.92k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.92k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.92k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.92k|        return this->get_value();
 1629|  1.92k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.92k|    {
  451|  1.92k|        return m_value;
  452|  1.92k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  22.4k|    {
 1177|  22.4k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|  22.4k|    {
 1430|  22.4k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  436|  22.4k|    {
  437|  22.4k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|   199k|    {
 1837|   199k|        return detail::transform_error_impl(std::move(*this),
 1838|   199k|                                            std::forward<F>(f));
 1839|   199k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|   199k|{
 1323|   199k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   199k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   199k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   199k|            return result(*std::forward<Exp>(exp));
 1327|   199k|        }
 1328|       |
 1329|   199k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   199k|        return result(unexpect, monostate{});
 1331|   199k|    }
 1332|   199k|    else {
 1333|   199k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   199k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   199k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 199k, False: 0]
  |  |  ------------------
  ------------------
 1335|   199k|                   ? result(*std::forward<Exp>(exp))
 1336|   199k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|   199k|    }
 1340|   199k|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1662|   319k|    {
 1663|   319k|        return std::move(value());
 1664|   319k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1613|    146|    {
 1614|    146|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    146|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    146|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    146|        return std::move(this->get_unexpected().error());
 1616|    146|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|    146|    {
  468|    146|        return m_unexpected;
  469|    146|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1485|  19.9k|    {
 1486|  19.9k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1597|  22.4k|    {
 1598|  22.4k|        return has_value();
 1599|  22.4k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  484|  44.9k|    {
  485|  44.9k|        return m_has_value;
  486|  44.9k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|  22.4k|    {
 1663|  22.4k|        return std::move(value());
 1664|  22.4k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|  22.4k|    {
 1627|  22.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  22.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  22.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  22.4k|        return this->get_value();
 1629|  22.4k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  450|  22.4k|    {
  451|  22.4k|        return m_value;
  452|  22.4k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|  2.24k|    {
 1476|  2.24k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|    348|    {
 1476|    348|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|    496|    {
  447|    496|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  4.68k|    {
 1177|  4.68k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2INS8_4codeELPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  3.10k|    {
 1476|  3.10k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJNS9_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  3.10k|    {
  447|  3.10k|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEcvbEv:
 1597|  4.32k|    {
 1598|  4.32k|        return has_value();
 1599|  4.32k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE9has_valueEv:
  484|  8.46k|    {
  485|  8.46k|        return m_has_value;
  486|  8.46k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5errorEv:
 1603|  1.53k|    {
 1604|  1.53k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.53k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.53k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.53k|        return this->get_unexpected().error();
 1606|  1.53k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE14get_unexpectedEv:
  467|  2.10k|    {
  468|  2.10k|        return m_unexpected;
  469|  2.10k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEC2ISB_vEEOT_:
 1429|    790|    {
 1430|    790|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  436|    790|    {
  437|    790|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    790|    {
 1177|    790|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5valueIS7_LPv0EEERT_v:
 1626|  1.08k|    {
 1627|  1.08k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.08k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.08k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.08k|        return this->get_value();
 1629|  1.08k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE9get_valueEv:
  450|  1.08k|    {
  451|  1.08k|        return m_value;
  452|  1.08k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEcvbEv:
 1597|    590|    {
 1598|    590|        return has_value();
 1599|    590|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9has_valueEv:
  484|  1.58k|    {
  485|  1.58k|        return m_has_value;
  486|  1.58k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    590|    {
 1177|    590|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEdeISB_LPv0EEEOT_v:
 1662|    790|    {
 1663|    790|        return std::move(value());
 1664|    790|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEE5valueISB_LPv0EEERT_v:
 1626|    790|    {
 1627|    790|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    790|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    790|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    790|        return this->get_value();
 1629|    790|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9get_valueEv:
  450|    790|    {
  451|    790|        return m_value;
  452|    790|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE3endEv:
 3333|  68.6k|    {
 3334|  68.6k|        return m_sentinel;
 3335|  68.6k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE15transform_errorIRFNS2_11parse_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|  1.23k|    {
 1837|  1.23k|        return detail::transform_error_impl(std::move(*this),
 1838|  1.23k|                                            std::forward<F>(f));
 1839|  1.23k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9eof_errorEEERFNS4_11parse_errorESA_ELPv0ESC_EEDaOT_OT0_:
 1322|  1.23k|{
 1323|  1.23k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.23k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.23k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.23k|            return result(*std::forward<Exp>(exp));
 1327|  1.23k|        }
 1328|       |
 1329|  1.23k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.23k|        return result(unexpect, monostate{});
 1331|  1.23k|    }
 1332|  1.23k|    else {
 1333|  1.23k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.23k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.23k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.08k, False: 148]
  |  |  ------------------
  ------------------
 1335|  1.23k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.23k|                   : result(unexpect,
 1337|    148|                            trivial_invoke(std::forward<F>(f),
 1338|    148|                                           std::forward<Exp>(exp).error()));
 1339|  1.23k|    }
 1340|  1.23k|}
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IS7_vEEOT_:
 1429|  1.08k|    {
 1430|  1.08k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  436|  1.08k|    {
  437|  1.08k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1485|    148|    {
 1486|    148|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEdeIS7_LPv0EEEOT_v:
 1662|  1.08k|    {
 1663|  1.08k|        return std::move(value());
 1664|  1.08k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE5beginEv:
 3329|  70.3k|    {
 3330|  70.3k|        return m_iterator;
 3331|  70.3k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEEC2IS9_vEEOT_:
 1429|    590|    {
 1430|    590|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  436|    590|    {
  437|    590|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESA_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1836|    590|    {
 1837|    590|        return detail::transform_error_impl(std::move(*this),
 1838|    590|                                            std::forward<F>(f));
 1839|    590|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS4_27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EEEENS4_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
 1322|    590|{
 1323|    590|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    590|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    590|        if (SCN_LIKELY(exp.has_value())) {
 1326|    590|            return result(*std::forward<Exp>(exp));
 1327|    590|        }
 1328|       |
 1329|    590|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    590|        return result(unexpect, monostate{});
 1331|    590|    }
 1332|    590|    else {
 1333|    590|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    590|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    590|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 590, False: 0]
  |  |  ------------------
  ------------------
 1335|    590|                   ? result(*std::forward<Exp>(exp))
 1336|    590|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    590|    }
 1340|    590|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EE9has_valueEv:
  484|  1.18k|    {
  485|  1.18k|        return m_has_value;
  486|  1.18k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEEdeIS9_LPv0EEEOT_v:
 1662|    590|    {
 1663|    590|        return std::move(value());
 1664|    590|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEE5valueIS9_LPv0EEERT_v:
 1626|    590|    {
 1627|    590|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    590|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    590|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    590|        return this->get_value();
 1629|    590|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EE9get_valueEv:
  450|    590|    {
  451|    590|        return m_value;
  452|    590|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEC2IS9_vEEOT_:
 1429|    590|    {
 1430|    590|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  436|    590|    {
  437|    590|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    590|    {
 1177|    590|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEcvbEv:
 1597|    590|    {
 1598|    590|        return has_value();
 1599|    590|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.18k|    {
  485|  1.18k|        return m_has_value;
  486|  1.18k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1662|    590|    {
 1663|    590|        return std::move(value());
 1664|    590|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1626|    590|    {
 1627|    590|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    590|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    590|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    590|        return this->get_value();
 1629|    590|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    590|    {
  451|    590|        return m_value;
  452|    590|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1836|    562|    {
 1837|    562|        return detail::transform_error_impl(std::move(*this),
 1838|    562|                                            std::forward<F>(f));
 1839|    562|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlSA_E_LPv0ESC_EEDaOT_OT0_:
 1322|    562|{
 1323|    562|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    562|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    562|        if (SCN_LIKELY(exp.has_value())) {
 1326|    562|            return result(*std::forward<Exp>(exp));
 1327|    562|        }
 1328|       |
 1329|    562|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    562|        return result(unexpect, monostate{});
 1331|    562|    }
 1332|    562|    else {
 1333|    562|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    562|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    562|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 562]
  |  |  ------------------
  ------------------
 1335|    562|                   ? result(*std::forward<Exp>(exp))
 1336|    562|                   : result(unexpect,
 1337|    562|                            trivial_invoke(std::forward<F>(f),
 1338|    562|                                           std::forward<Exp>(exp).error()));
 1339|    562|    }
 1340|    562|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5errorEv:
 1613|    562|    {
 1614|    562|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    562|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    562|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    562|        return std::move(this->get_unexpected().error());
 1616|    562|    }
_ZN3scn2v313scan_expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EEEC2EONS0_8expectedIS7_NS0_10scan_errorEEE:
 3647|    962|    {
 3648|    962|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEC2ISA_LPv0EEET_SF_:
 3315|  23.8k|    {
 3316|  23.8k|    }
_ZN3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEEC2ISK_LPv0ELSN_0EEEONS0_10unexpectedIT_EE:
 1475|     28|    {
 1476|     28|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EEC2IJSL_EvEENS0_10unexpect_tEDpOT_:
  625|     28|    {
  626|     28|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|     28|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESL_EEEvDpOT_:
  688|     28|    {
  689|     28|        scn::detail::construct_at(unexpected_ptr(),
  690|     28|                                  std::forward<Args>(args)...);
  691|     28|        m_has_value = false;
  692|     28|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|     84|    {
  718|     84|        return reinterpret_cast<unexpected<E>*>(
  719|     84|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|     84|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|     84|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|     28|    {
 1177|     28|    }
_ZNK3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|     28|    {
 1598|     28|        return has_value();
 1599|     28|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|     84|    {
  675|     84|        return m_has_value;
  676|     84|    }
_ZNR3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1603|     28|    {
 1604|     28|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     28|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     28|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|     28|        return this->get_unexpected().error();
 1606|     28|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|     28|    {
  658|     28|        return *unexpected_ptr();
  659|     28|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|     28|    {
  631|     28|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 0, False: 28]
  ------------------
  632|      0|            destroy_value();
  633|      0|        }
  634|     28|        else {
  635|     28|            destroy_unexpected();
  636|     28|        }
  637|     28|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|     28|    {
  700|     28|        scn::detail::destroy_at(unexpected_ptr());
  701|     28|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEcvbEv:
 1597|  4.14k|    {
 1598|  4.14k|        return has_value();
 1599|  4.14k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  7.88k|    {
  485|  7.88k|        return m_has_value;
  486|  7.88k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEE5errorEv:
 1603|  3.00k|    {
 1604|  3.00k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  3.00k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.00k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  3.00k|        return this->get_unexpected().error();
 1606|  3.00k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  3.00k|    {
  468|  3.00k|        return m_unexpected;
  469|  3.00k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEdeIS7_LPv0EEEOT_v:
 1662|    740|    {
 1663|    740|        return std::move(value());
 1664|    740|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEE5valueIS7_LPv0EEERT_v:
 1626|    740|    {
 1627|    740|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    740|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    740|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    740|        return this->get_value();
 1629|    740|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE9get_valueEv:
  450|    740|    {
  451|    740|        return m_value;
  452|    740|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|  20.0k|    {
 1476|  20.0k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  20.2k|    {
  447|  20.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   379k|    {
 1177|   379k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|   239k|    {
 1476|   239k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|   239k|    {
  447|   239k|    }
_ZNK3scn2v38expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1597|   398k|    {
 1598|   398k|        return has_value();
 1599|   398k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|   658k|    {
  485|   658k|        return m_has_value;
  486|   658k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1603|   119k|    {
 1604|   119k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   119k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   119k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   119k|        return this->get_unexpected().error();
 1606|   119k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|   119k|    {
  468|   119k|        return m_unexpected;
  469|   119k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1429|  79.7k|    {
 1430|  79.7k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|  79.7k|    {
  437|  79.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  79.7k|    {
 1177|  79.7k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1626|   119k|    {
 1627|   119k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   119k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   119k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   119k|        return this->get_value();
 1629|   119k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|   119k|    {
  451|   119k|        return m_value;
  452|   119k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  59.8k|    {
 1598|  59.8k|        return has_value();
 1599|  59.8k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|   159k|    {
  485|   159k|        return m_has_value;
  486|   159k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  59.8k|    {
 1177|  59.8k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1662|  79.7k|    {
 1663|  79.7k|        return std::move(value());
 1664|  79.7k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1626|  79.7k|    {
 1627|  79.7k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  79.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  79.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  79.7k|        return this->get_value();
 1629|  79.7k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|  79.7k|    {
  451|  79.7k|        return m_value;
  452|  79.7k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|   119k|    {
 1837|   119k|        return detail::transform_error_impl(std::move(*this),
 1838|   119k|                                            std::forward<F>(f));
 1839|   119k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|   119k|{
 1323|   119k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   119k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   119k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   119k|            return result(*std::forward<Exp>(exp));
 1327|   119k|        }
 1328|       |
 1329|   119k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   119k|        return result(unexpect, monostate{});
 1331|   119k|    }
 1332|   119k|    else {
 1333|   119k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   119k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   119k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 119k, False: 146]
  |  |  ------------------
  ------------------
 1335|   119k|                   ? result(*std::forward<Exp>(exp))
 1336|   119k|                   : result(unexpect,
 1337|    146|                            trivial_invoke(std::forward<F>(f),
 1338|    146|                                           std::forward<Exp>(exp).error()));
 1339|   119k|    }
 1340|   119k|}
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1429|   119k|    {
 1430|   119k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|   119k|    {
  437|   119k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1485|    146|    {
 1486|    146|    }
_ZNO3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1662|   119k|    {
 1663|   119k|        return std::move(value());
 1664|   119k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEC2IS6_vEEOT_:
 1429|  59.8k|    {
 1430|  59.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  436|  59.8k|    {
  437|  59.8k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  59.8k|    {
 1837|  59.8k|        return detail::transform_error_impl(std::move(*this),
 1838|  59.8k|                                            std::forward<F>(f));
 1839|  59.8k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
 1322|  59.8k|{
 1323|  59.8k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  59.8k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  59.8k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  59.8k|            return result(*std::forward<Exp>(exp));
 1327|  59.8k|        }
 1328|       |
 1329|  59.8k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  59.8k|        return result(unexpect, monostate{});
 1331|  59.8k|    }
 1332|  59.8k|    else {
 1333|  59.8k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  59.8k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  59.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 59.8k, False: 0]
  |  |  ------------------
  ------------------
 1335|  59.8k|                   ? result(*std::forward<Exp>(exp))
 1336|  59.8k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  59.8k|    }
 1340|  59.8k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9has_valueEv:
  484|   119k|    {
  485|   119k|        return m_has_value;
  486|   119k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1662|  59.8k|    {
 1663|  59.8k|        return std::move(value());
 1664|  59.8k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1626|  59.8k|    {
 1627|  59.8k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  59.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  59.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  59.8k|        return this->get_value();
 1629|  59.8k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9get_valueEv:
  450|  59.8k|    {
  451|  59.8k|        return m_value;
  452|  59.8k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|  59.8k|    {
 1430|  59.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  436|  59.8k|    {
  437|  59.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  59.8k|    {
 1177|  59.8k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEcvbEv:
 1597|  59.8k|    {
 1598|  59.8k|        return has_value();
 1599|  59.8k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9has_valueEv:
  484|   119k|    {
  485|   119k|        return m_has_value;
  486|   119k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|  59.8k|    {
 1663|  59.8k|        return std::move(value());
 1664|  59.8k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|  59.8k|    {
 1627|  59.8k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  59.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  59.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  59.8k|        return this->get_value();
 1629|  59.8k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9get_valueEv:
  450|  59.8k|    {
  451|  59.8k|        return m_value;
  452|  59.8k|    }
_ZN3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1475|     52|    {
 1476|     52|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  625|     52|    {
  626|     52|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|     52|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESH_EEEvDpOT_:
  688|     52|    {
  689|     52|        scn::detail::construct_at(unexpected_ptr(),
  690|     52|                                  std::forward<Args>(args)...);
  691|     52|        m_has_value = false;
  692|     52|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|    156|    {
  718|    156|        return reinterpret_cast<unexpected<E>*>(
  719|    156|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|    156|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|    156|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|     52|    {
 1177|     52|    }
_ZNK3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|     52|    {
 1598|     52|        return has_value();
 1599|     52|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|    156|    {
  675|    156|        return m_has_value;
  676|    156|    }
_ZNR3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1603|     52|    {
 1604|     52|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     52|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     52|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|     52|        return this->get_unexpected().error();
 1606|     52|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|     52|    {
  658|     52|        return *unexpected_ptr();
  659|     52|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|     52|    {
  631|     52|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 0, False: 52]
  ------------------
  632|      0|            destroy_value();
  633|      0|        }
  634|     52|        else {
  635|     52|            destroy_unexpected();
  636|     52|        }
  637|     52|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|     52|    {
  700|     52|        scn::detail::destroy_at(unexpected_ptr());
  701|     52|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   146k|    {
 2855|   146k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   146k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   146k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   146k|    {
 2836|   146k|        return t.data();
 2837|   146k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3220|   167k|    {
 3221|   167k|        return ranges::empty(derived())
  ------------------
  |  Branch (3221:16): [True: 4.28k, False: 162k]
  ------------------
 3222|   167k|                   ? nullptr
 3223|   167k|                   : std::addressof(*ranges::begin(derived()));
 3224|   167k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|   167k|    {
 3005|   167k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|   167k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|   167k|    {
 2978|   167k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|   167k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5emptyEv:
 3338|   167k|    {
 3339|   167k|        return m_iterator == m_sentinel;
 3340|   167k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3179|   330k|    {
 3180|   330k|        return static_cast<D&>(*this);
 3181|   330k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   162k|    {
 2724|   162k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   162k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   162k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   162k|    {
 2705|   162k|        return decay_copy(t.begin());
 2706|   162k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEE15transform_errorIRFNS0_10scan_errorESC_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSI_:
 1836|    200|    {
 1837|    200|        return detail::transform_error_impl(std::move(*this),
 1838|    200|                                            std::forward<F>(f));
 1839|    200|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_9sign_typeEEENS6_9eof_errorEEERFNS0_10scan_errorESE_ELPv0ESG_EEDaOT_OT0_:
 1322|    200|{
 1323|    200|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    200|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    200|        if (SCN_LIKELY(exp.has_value())) {
 1326|    200|            return result(*std::forward<Exp>(exp));
 1327|    200|        }
 1328|       |
 1329|    200|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    200|        return result(unexpect, monostate{});
 1331|    200|    }
 1332|    200|    else {
 1333|    200|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    200|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    200|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 200, False: 0]
  |  |  ------------------
  ------------------
 1335|    200|                   ? result(*std::forward<Exp>(exp))
 1336|    200|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    200|    }
 1340|    200|}
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1429|    200|    {
 1430|    200|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  436|    200|    {
  437|    200|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    200|    {
 1177|    200|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|    200|    {
 1598|    200|        return has_value();
 1599|    200|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|    400|    {
  485|    400|        return m_has_value;
  486|    400|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEdeISB_LPv0EEEOT_v:
 1662|    200|    {
 1663|    200|        return std::move(value());
 1664|    200|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1626|    200|    {
 1627|    200|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    200|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    200|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    200|        return this->get_value();
 1629|    200|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    200|    {
  451|    200|        return m_value;
  452|    200|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1822|    400|    {
 1823|    400|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|    400|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlSA_E_LPv0ESD_EEDaOT_OT0_:
 1322|    400|{
 1323|    400|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    400|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    400|        if (SCN_LIKELY(exp.has_value())) {
 1326|    400|            return result(*std::forward<Exp>(exp));
 1327|    400|        }
 1328|       |
 1329|    400|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    400|        return result(unexpect, monostate{});
 1331|    400|    }
 1332|    400|    else {
 1333|    400|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    400|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    400|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 400]
  |  |  ------------------
  ------------------
 1335|    400|                   ? result(*std::forward<Exp>(exp))
 1336|    400|                   : result(unexpect,
 1337|    400|                            trivial_invoke(std::forward<F>(f),
 1338|    400|                                           std::forward<Exp>(exp).error()));
 1339|    400|    }
 1340|    400|}
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E0_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3667|     12|    auto&& SCN_TRY_TMP = (x);                          \
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|    188|    {
 2724|    188|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    188|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|    188|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESO_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|    188|    {
 2705|    188|        return decay_copy(t.begin());
 2706|    188|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3667|    172|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|  19.9k|    {
 1837|  19.9k|        return detail::transform_error_impl(std::move(*this),
 1838|  19.9k|                                            std::forward<F>(f));
 1839|  19.9k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1322|  19.9k|{
 1323|  19.9k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  19.9k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  19.9k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  19.9k|            return result(*std::forward<Exp>(exp));
 1327|  19.9k|        }
 1328|       |
 1329|  19.9k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  19.9k|        return result(unexpect, monostate{});
 1331|  19.9k|    }
 1332|  19.9k|    else {
 1333|  19.9k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  19.9k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  19.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 19.9k, False: 0]
  |  |  ------------------
  ------------------
 1335|  19.9k|                   ? result(*std::forward<Exp>(exp))
 1336|  19.9k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  19.9k|    }
 1340|  19.9k|}
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|  19.9k|    {
 1430|  19.9k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|  19.9k|    {
  437|  19.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  19.9k|    {
 1177|  19.9k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|  19.9k|    {
 1598|  19.9k|        return has_value();
 1599|  19.9k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  39.8k|    {
  485|  39.8k|        return m_has_value;
  486|  39.8k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|  19.9k|    {
 1663|  19.9k|        return std::move(value());
 1664|  19.9k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|  19.9k|    {
 1627|  19.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  19.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  19.9k|        return this->get_value();
 1629|  19.9k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  19.9k|    {
  451|  19.9k|        return m_value;
  452|  19.9k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1822|  19.9k|    {
 1823|  19.9k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|  19.9k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1322|  19.9k|{
 1323|  19.9k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  19.9k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  19.9k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  19.9k|            return result(*std::forward<Exp>(exp));
 1327|  19.9k|        }
 1328|       |
 1329|  19.9k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  19.9k|        return result(unexpect, monostate{});
 1331|  19.9k|    }
 1332|  19.9k|    else {
 1333|  19.9k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  19.9k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  19.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 19.9k]
  |  |  ------------------
  ------------------
 1335|  19.9k|                   ? result(*std::forward<Exp>(exp))
 1336|  19.9k|                   : result(unexpect,
 1337|  19.9k|                            trivial_invoke(std::forward<F>(f),
 1338|  19.9k|                                           std::forward<Exp>(exp).error()));
 1339|  19.9k|    }
 1340|  19.9k|}
_ZN3scn2v313scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3647|  19.9k|    {
 3648|  19.9k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1652|  80.4k|    {
 1653|  80.4k|        return value();
 1654|  80.4k|    }
_ZN3scn2v36detail22parse_presentation_setIwRNS0_4impl22nonascii_specs_handlerEEENSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEERPKS8_SD_OT0_:
 6696|    570|{
 6697|    570|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|    570|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    570|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|    570|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|    570|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    570|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|    570|    auto start = begin;
 6701|    570|    ++begin;
 6702|       |
 6703|    570|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    570|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 570]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|      0|        return {};
 6708|      0|    }
 6709|    570|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 120, False: 450]
  ------------------
 6710|    120|        handler.on_charset_inverted();
 6711|    120|        ++begin;
 6712|    120|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    120|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 120]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|      0|            return {};
 6717|      0|        }
 6718|    120|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 0, False: 120]
  ------------------
 6719|      0|            handler.on_charset_single(char32_t{']'});
 6720|      0|            ++begin;
 6721|      0|        }
 6722|    120|    }
 6723|    450|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 0, False: 450]
  ------------------
 6724|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|      0|    }
 6726|       |
 6727|  9.70k|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 9.70k, False: 0]
  ------------------
 6728|  9.70k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  9.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.70k]
  |  |  ------------------
  ------------------
 6729|      0|            break;
 6730|      0|        }
 6731|       |
 6732|  9.70k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 570, False: 9.13k]
  ------------------
 6733|    570|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|    570|        }
 6735|       |
 6736|  9.13k|        parse_presentation_set_literal(begin, end, handler);
 6737|  9.13k|    }
 6738|       |
 6739|      0|    SCN_UNLIKELY_ATTR
 6740|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6741|      0|    return {};
 6742|    570|}
_ZN3scn2v36detail30parse_presentation_set_literalIwRNS0_4impl22nonascii_specs_handlerEEEvRPKT_S8_OT0_:
 6660|  9.13k|{
 6661|  9.13k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  9.13k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.13k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|  9.13k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|  9.13k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  9.13k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.13k]
  |  |  ------------------
  ------------------
 6665|      0|        return;
 6666|      0|    }
 6667|       |
 6668|  9.13k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 9.13k, False: 0]
  |  Branch (6668:25): [True: 66, False: 9.06k]
  |  Branch (6668:49): [True: 66, False: 0]
  ------------------
 6669|  9.13k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 24, False: 42]
  ------------------
 6670|     24|        ++begin;
 6671|       |
 6672|     24|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|     24|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 24]
  |  |  ------------------
  ------------------
 6674|      0|            return;
 6675|      0|        }
 6676|       |
 6677|     24|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 24]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|      0|            return;
 6682|      0|        }
 6683|       |
 6684|     24|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|     24|        return;
 6686|     24|    }
 6687|       |
 6688|  9.10k|    handler.on_charset_single(cp_first);
 6689|  9.10k|}
_ZN3scn2v36detail33parse_presentation_set_code_pointIwRNS0_4impl22nonascii_specs_handlerEEEDiRPKT_S8_OT0_:
 6636|  9.15k|{
 6637|  9.15k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  9.15k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.15k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|  9.15k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|  9.15k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  18.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.15k]
  |  |  |  Branch (859:45): [True: 0, False: 9.15k]
  |  |  |  Branch (859:45): [True: 0, False: 9.15k]
  |  |  ------------------
  ------------------
 6641|      0|        handler.on_error("Invalid encoding in format string");
 6642|      0|        return invalid_code_point;
 6643|      0|    }
 6644|       |
 6645|  9.15k|    const auto cp =
 6646|  9.15k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|  9.15k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  9.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.15k]
  |  |  ------------------
  ------------------
 6648|      0|        handler.on_error("Invalid encoding in format string");
 6649|      0|        return invalid_code_point;
 6650|      0|    }
 6651|       |
 6652|  9.15k|    begin += len;
 6653|  9.15k|    return cp;
 6654|  9.15k|}
_ZNK3scn2v36detail12format_specs14charset_stringIwEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 6251|  16.1k|    {
 6252|  16.1k|        return {reinterpret_cast<const CharT*>(charset_string_data),
 6253|  16.1k|                charset_string_size};
 6254|  16.1k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1429|    714|    {
 1430|    714|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  436|    714|    {
  437|    714|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA29_KcEEEDaDpOT_:
 3653|  20.8k|{
 3654|  20.8k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  20.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  20.8k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  7.78k|    {
 2855|  7.78k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  7.78k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  7.78k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  7.78k|    {
 2836|  7.78k|        return t.data();
 2837|  7.78k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5465|   170k|    {
 5466|   170k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   170k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 170k]
  |  |  ------------------
  ------------------
 5467|      0|            return max_size();
 5468|      0|        }
 5469|       |
 5470|   170k|        return static_cast<std::size_t>(m_desc &
 5471|   170k|                                        ((1 << detail::packed_arg_bits) - 1));
 5472|   170k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5490|   274k|    {
 5491|   274k|        return (m_desc & detail::is_unpacked_bit) == 0;
 5492|   274k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5433|   104k|    {
 5434|   104k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   104k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 104k]
  |  |  ------------------
  ------------------
 5435|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5436|      0|                return m_args[id];
 5437|      0|            }
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|   104k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|   104k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 68, False: 103k]
  |  |  ------------------
  ------------------
 5442|     68|            return {};
 5443|     68|        }
 5444|       |
 5445|   103k|        const auto t = type(id);
 5446|   103k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.48k, False: 102k]
  |  |  ------------------
  ------------------
 5447|  1.48k|            return {};
 5448|  1.48k|        }
 5449|       |
 5450|   102k|        basic_scan_arg<Context> arg;
 5451|   102k|        arg.m_type = t;
 5452|   102k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5452:13): [True: 102k, False: 0]
  ------------------
 5453|   102k|            arg.m_value.ref_value = m_builtin_values[id];
 5454|   102k|        }
 5455|      0|        else {
 5456|      0|            arg.m_value = m_values[id];
 5457|      0|        }
 5458|   102k|        return arg;
 5459|   103k|    }
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5240|   104k|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4897|   415k|    arg_value() = default;
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5499|   103k|    {
 5500|       |        // First (0th) index is size, types start after that
 5501|   103k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5502|   103k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5503|   103k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5504|   103k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5494|   102k|    {
 5495|   102k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5496|   102k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5246|   203k|    {
 5247|   203k|        return m_type != detail::arg_type::none_type;
 5248|   203k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  6.35k|{
 8417|  6.35k|#define SCN_VISIT(Type)                                         \
 8418|  6.35k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  6.35k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  6.35k|    }                                                           \
 8421|  6.35k|    else {                                                      \
 8422|  6.35k|        return vis(monostate_val);                              \
 8423|  6.35k|    }
 8424|       |
 8425|  6.35k|    monostate monostate_val{};
 8426|       |
 8427|  6.35k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 6.35k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 6.35k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|    706|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 706, False: 5.64k]
  ------------------
 8433|    706|            SCN_VISIT(int);
  ------------------
  |  | 8418|    706|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    706|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    706|    }                                                           \
  |  | 8421|    706|    else {                                                      \
  |  | 8422|    706|        return vis(monostate_val);                              \
  |  | 8423|    706|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 6.35k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 6.35k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 6.35k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 6.35k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|    706|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 706, False: 5.64k]
  ------------------
 8443|    706|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|    706|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    706|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    706|    }                                                           \
  |  | 8421|    706|    else {                                                      \
  |  | 8422|    706|        return vis(monostate_val);                              \
  |  | 8423|    706|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 6.35k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 6.35k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|    706|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 706, False: 5.64k]
  ------------------
 8449|    706|            SCN_VISIT(void*);
  ------------------
  |  | 8418|    706|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    706|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    706|    }                                                           \
  |  | 8421|    706|    else {                                                      \
  |  | 8422|    706|        return vis(monostate_val);                              \
  |  | 8423|    706|    }
  ------------------
 8450|    706|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 706, False: 5.64k]
  ------------------
 8451|    706|            SCN_VISIT(bool);
  ------------------
  |  | 8418|    706|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    706|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    706|    }                                                           \
  |  | 8421|    706|    else {                                                      \
  |  | 8422|    706|        return vis(monostate_val);                              \
  |  | 8423|    706|    }
  ------------------
 8452|    706|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 706, False: 5.64k]
  ------------------
 8453|    706|            SCN_VISIT(char);
  ------------------
  |  | 8418|    706|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    706|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    706|    }                                                           \
  |  | 8421|    706|    else {                                                      \
  |  | 8422|    706|        return vis(monostate_val);                              \
  |  | 8423|    706|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 6.35k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 6.35k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 6.35k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|    706|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 706, False: 5.64k]
  ------------------
 8461|    706|            SCN_VISIT(double);
  ------------------
  |  | 8418|    706|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    706|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    706|    }                                                           \
  |  | 8421|    706|    else {                                                      \
  |  | 8422|    706|        return vis(monostate_val);                              \
  |  | 8423|    706|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 6.35k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|    706|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 706, False: 5.64k]
  ------------------
 8465|    706|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|    706|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    706|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    706|    }                                                           \
  |  | 8421|    706|    else {                                                      \
  |  | 8422|    706|        return vis(monostate_val);                              \
  |  | 8423|    706|    }
  ------------------
 8466|    706|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 706, False: 5.64k]
  ------------------
 8467|    706|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|    706|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    706|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    706|    }                                                           \
  |  | 8421|    706|    else {                                                      \
  |  | 8422|    706|        return vis(monostate_val);                              \
  |  | 8423|    706|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 6.35k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|    706|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 706, False: 5.64k]
  ------------------
 8471|    706|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|    706|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    706|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    706|    }                                                           \
  |  | 8421|    706|    else {                                                      \
  |  | 8422|    706|        return vis(monostate_val);                              \
  |  | 8423|    706|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 6.35k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 6.35k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 6.35k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 6.35k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 6.35k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  6.35k|            SCN_CLANG_POP
 8495|  6.35k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  2.09k|    {
 1837|  2.09k|        return detail::transform_error_impl(std::move(*this),
 1838|  2.09k|                                            std::forward<F>(f));
 1839|  2.09k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|  2.09k|{
 1323|  2.09k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  2.09k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  2.09k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  2.09k|            return result(*std::forward<Exp>(exp));
 1327|  2.09k|        }
 1328|       |
 1329|  2.09k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  2.09k|        return result(unexpect, monostate{});
 1331|  2.09k|    }
 1332|  2.09k|    else {
 1333|  2.09k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.09k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.09k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.99k, False: 102]
  |  |  ------------------
  ------------------
 1335|  2.09k|                   ? result(*std::forward<Exp>(exp))
 1336|  2.09k|                   : result(unexpect,
 1337|    102|                            trivial_invoke(std::forward<F>(f),
 1338|    102|                                           std::forward<Exp>(exp).error()));
 1339|  2.09k|    }
 1340|  2.09k|}
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1485|    102|    {
 1486|    102|    }
_ZNO3scn2v38expectedIPKcNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1662|  1.99k|    {
 1663|  1.99k|        return std::move(value());
 1664|  1.99k|    }
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5544|   170k|    {
 5545|   170k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8055|   170k|    {
 8056|   170k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   170k|{
 7044|   170k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   170k|    handler.check_args_exhausted();
 7046|   170k|    return handler.get_error();
 7047|   170k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   170k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   170k|    auto begin = format.data();
 7013|   170k|    auto it = begin;
 7014|   170k|    const auto end = format.data() + format.size();
 7015|       |
 7016|   409k|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 401k, False: 8.62k]
  ------------------
 7017|   401k|        const auto ch = *it++;
 7018|   401k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 175k, False: 225k]
  ------------------
 7019|   175k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   175k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   175k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 160k, False: 14.8k]
  ------------------
 7023|   160k|                return;
 7024|   160k|            }
 7025|   175k|        }
 7026|   225k|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 3.02k, False: 222k]
  ------------------
 7027|  3.02k|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|  5.62k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.79k, False: 1.23k]
  |  |  |  Branch (859:45): [True: 430, False: 2.59k]
  |  |  |  Branch (859:45): [True: 1.36k, False: 1.23k]
  |  |  ------------------
  ------------------
 7028|  1.79k|                handler.on_error("Unmatched '}' in format string");
 7029|  1.79k|                return;
 7030|  1.79k|            }
 7031|       |
 7032|  1.23k|            handler.on_literal_text(begin, it);
 7033|  1.23k|            begin = ++it;
 7034|  1.23k|        }
 7035|   401k|    }
 7036|       |
 7037|  8.62k|    handler.on_literal_text(begin, end);
 7038|  8.62k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6941|   175k|{
 6942|   175k|    struct id_adapter {
 6943|   175k|        constexpr void operator()()
 6944|   175k|        {
 6945|   175k|            arg_id = handler.on_arg_id();
 6946|   175k|        }
 6947|   175k|        constexpr void operator()(std::size_t id)
 6948|   175k|        {
 6949|   175k|            arg_id = handler.on_arg_id(id);
 6950|   175k|        }
 6951|       |
 6952|   175k|        constexpr void on_error(const char* msg)
 6953|   175k|        {
 6954|   175k|            SCN_UNLIKELY_ATTR
 6955|   175k|            handler.on_error(msg);
 6956|   175k|        }
 6957|       |
 6958|   175k|        Handler& handler;
 6959|   175k|        std::size_t arg_id;
 6960|   175k|    };
 6961|       |
 6962|   175k|    ++begin;
 6963|   175k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   175k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 98, False: 175k]
  |  |  ------------------
  ------------------
 6964|     98|        handler.on_error("Unexpected end of replacement field");
 6965|     98|        return begin;
 6966|     98|    }
 6967|       |
 6968|   175k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 6.35k, False: 168k]
  ------------------
 6969|  6.35k|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|  6.35k|    }
 6971|   168k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 5.94k, False: 162k]
  ------------------
 6972|  5.94k|        handler.on_literal_text(begin, begin + 1);
 6973|  5.94k|    }
 6974|   162k|    else {
 6975|   162k|        auto adapter = id_adapter{handler, 0};
 6976|   162k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|   162k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   162k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 110, False: 162k]
  |  |  ------------------
  ------------------
 6979|    110|            handler.on_error("Missing '}' in format string");
 6980|    110|            return begin;
 6981|    110|        }
 6982|       |
 6983|   162k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 140, False: 162k]
  ------------------
 6984|    140|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|    140|        }
 6986|   162k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 97.6k, False: 65.1k]
  ------------------
 6987|  97.6k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  97.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 92, False: 97.5k]
  |  |  ------------------
  ------------------
 6988|     92|                handler.on_error("Unexpected end of replacement field");
 6989|     92|                return begin;
 6990|     92|            }
 6991|  97.5k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|  97.5k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   195k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.99k, False: 93.5k]
  |  |  |  Branch (859:45): [True: 0, False: 97.5k]
  |  |  |  Branch (859:45): [True: 3.99k, False: 93.5k]
  |  |  ------------------
  ------------------
 6993|  3.99k|                handler.on_error("Unknown format specifier");
 6994|  3.99k|                return begin;
 6995|  3.99k|            }
 6996|  97.5k|        }
 6997|  65.1k|        else {
 6998|  65.1k|            SCN_UNLIKELY_ATTR
 6999|  65.1k|            handler.on_error("Missing '}' in format string");
 7000|  65.1k|            return begin;
 7001|  65.1k|        }
 7002|   162k|    }
 7003|   105k|    return begin + 1;
 7004|   175k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 8038|   104k|    {
 8039|   104k|        return m_args.get(id);
 8040|   104k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE4argsEv:
 8043|  6.49k|    {
 8044|  6.49k|        return m_args;
 8045|  6.49k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8048|  99.6k|    {
 8049|  99.6k|        return m_locale;
 8050|  99.6k|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5565|  97.6k|    {
 5566|  97.6k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  97.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 97.5k]
  |  |  ------------------
  ------------------
 5567|     42|            on_error(
 5568|     42|                "Cannot switch from manual to automatic argument indexing");
 5569|     42|            return 0;
 5570|     42|        }
 5571|       |
 5572|  97.5k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5573|  97.5k|        do_check_arg_id(id);
 5574|  97.5k|        return id;
 5575|  97.6k|    }
_ZNK3scn2v324basic_scan_parse_contextIcE8on_errorEPKc:
 5589|    122|    {
 5590|    122|        return detail::handle_error(
 5591|    122|            scan_error{scan_error::invalid_format_string, msg});
 5592|    122|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6053|   103k|{
 6054|   103k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6054:9): [Folded - Ignored]
  ------------------
 6055|   103k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6055:10): [Folded - Ignored]
  |  Branch (6055:22): [Folded - Ignored]
  ------------------
 6056|       |        // The cast below will cause an error on gcc pre-12
 6057|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6058|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6058:13): [True: 0, False: 0]
  ------------------
 6059|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6060|      0|            SCN_UNLIKELY_ATTR
 6061|      0|            on_error("Argument not found");
 6062|      0|        }
 6063|      0|    }
 6064|   103k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|   162k|{
 6443|   162k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   162k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   162k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|   162k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 162k, False: 0]
  |  Branch (6444:26): [True: 71.6k, False: 91.2k]
  ------------------
 6445|  71.6k|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|  71.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|  71.6k|    }
 6447|       |
 6448|  91.2k|    handler();
 6449|  91.2k|    return begin;
 6450|   162k|}
impl.cpp:_ZN3scn2v36detail15do_parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6412|  71.6k|{
 6413|  71.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  71.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  71.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6414|       |
 6415|  71.6k|    CharT c = *begin;
 6416|  71.6k|    if (c < CharT{'0'} || c > CharT{'9'}) {
  ------------------
  |  Branch (6416:9): [True: 64.8k, False: 6.87k]
  |  Branch (6416:27): [True: 206, False: 6.67k]
  ------------------
 6417|  65.0k|        handler.on_error("Invalid argument ID");
 6418|  65.0k|        return begin;
 6419|  65.0k|    }
 6420|       |
 6421|  6.67k|    int idx = 0;
 6422|  6.67k|    if (c != CharT{'0'}) {
  ------------------
  |  Branch (6422:9): [True: 342, False: 6.32k]
  ------------------
 6423|    342|        idx = parse_simple_int(begin, end);
 6424|    342|    }
 6425|  6.32k|    else {
 6426|  6.32k|        ++begin;
 6427|  6.32k|    }
 6428|       |
 6429|  6.67k|    if (begin == end || (*begin != CharT{'}'} && *begin != CharT{':'})) {
  ------------------
  |  Branch (6429:9): [True: 110, False: 6.56k]
  |  Branch (6429:26): [True: 6.42k, False: 140]
  |  Branch (6429:50): [True: 90, False: 6.33k]
  ------------------
 6430|    200|        handler.on_error("Invalid argument ID");
 6431|    200|        return begin;
 6432|    200|    }
 6433|  6.47k|    handler(idx);
 6434|       |
 6435|  6.47k|    return begin;
 6436|  6.67k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapter8on_errorEPKc:
 6953|  65.2k|        {
 6954|  65.2k|            SCN_UNLIKELY_ATTR
 6955|  65.2k|            handler.on_error(msg);
 6956|  65.2k|        }
_ZN3scn2v36detail16parse_simple_intIcEEiRPKT_S5_:
 6391|  20.8k|{
 6392|  20.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  20.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  20.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6393|  20.8k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  20.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  20.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6394|       |
 6395|  20.8k|    unsigned long long value = 0;
 6396|  75.0k|    do {
 6397|  75.0k|        value *= 10;
 6398|  75.0k|        value += static_cast<unsigned long long>(*begin - '0');
 6399|  75.0k|        if (value >
  ------------------
  |  Branch (6399:13): [True: 116, False: 74.8k]
  ------------------
 6400|  75.0k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6401|    116|            return -1;
 6402|    116|        }
 6403|  74.8k|        ++begin;
 6404|  74.8k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6404:14): [True: 74.5k, False: 312]
  |  Branch (6404:30): [True: 66.0k, False: 8.54k]
  |  Branch (6404:47): [True: 54.1k, False: 11.8k]
  ------------------
 6405|  20.7k|    return static_cast<int>(value);
 6406|  20.8k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEm:
 6948|  6.47k|        {
 6949|  6.47k|            arg_id = handler.on_arg_id(id);
 6950|  6.47k|        }
_ZN3scn2v324basic_scan_parse_contextIcE12check_arg_idEm:
 5578|  6.47k|    {
 5579|  6.47k|        if (SCN_UNLIKELY(m_next_arg_id > 0)) {
  ------------------
  |  |  859|  6.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 80, False: 6.39k]
  |  |  ------------------
  ------------------
 5580|     80|            on_error(
 5581|     80|                "Cannot switch from manual to automatic argument indexing");
 5582|     80|            return;
 5583|     80|        }
 5584|  6.39k|        m_next_arg_id = -1;
 5585|  6.39k|        do_check_arg_id(id);
 5586|  6.39k|    }
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|  91.2k|        {
 6945|  91.2k|            arg_id = handler.on_arg_id();
 6946|  91.2k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5251|   195k|    {
 5252|   195k|        return m_type;
 5253|   195k|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5560|  93.1k|    {
 5561|  93.1k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5562|  93.1k|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5549|   190k|    {
 5550|   190k|        return m_format.data();
 5551|   190k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7121|  97.5k|    {
 7122|  97.5k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  97.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  97.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|  97.5k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6857|  97.5k|{
 6858|  97.5k|    auto do_presentation = [&]() -> const CharT* {
 6859|  97.5k|        if (*begin == CharT{'['}) {
 6860|  97.5k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  97.5k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|  97.5k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|  97.5k|                return begin;
 6866|  97.5k|            }
 6867|  97.5k|            handler.on_character_set_string(set);
 6868|  97.5k|            return begin;
 6869|  97.5k|        }
 6870|  97.5k|        if (*begin == CharT{'/'}) {
 6871|  97.5k|            return parse_presentation_regex(begin, end, handler);
 6872|  97.5k|        }
 6873|  97.5k|        presentation_type type = parse_presentation_type(*begin++);
 6874|  97.5k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|  97.5k|            handler.on_error("Invalid type specifier in format string");
 6876|  97.5k|            return begin;
 6877|  97.5k|        }
 6878|  97.5k|        handler.on_type(type);
 6879|  97.5k|        return begin;
 6880|  97.5k|    };
 6881|       |
 6882|  97.5k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 96.4k, False: 1.10k]
  |  Branch (6882:28): [True: 2.36k, False: 94.0k]
  ------------------
 6883|  97.5k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 896, False: 1.47k]
  |  Branch (6883:36): [True: 844, False: 52]
  ------------------
 6884|    844|        return do_presentation();
 6885|    844|    }
 6886|       |
 6887|  96.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  96.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 96.6k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|  96.6k|    begin = parse_align(begin, end, handler);
 6893|  96.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  96.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 122, False: 96.5k]
  |  |  ------------------
  ------------------
 6894|    122|        handler.on_error("Unexpected end of format string");
 6895|    122|        return begin;
 6896|    122|    }
 6897|       |
 6898|  96.5k|    begin = parse_width(begin, end, handler);
 6899|  96.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  96.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 120, False: 96.4k]
  |  |  ------------------
  ------------------
 6900|    120|        handler.on_error("Unexpected end of format string");
 6901|    120|        return begin;
 6902|    120|    }
 6903|       |
 6904|  96.4k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 14.5k, False: 81.9k]
  ------------------
 6905|  14.5k|        ++begin;
 6906|  14.5k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 40, False: 14.4k]
  |  |  ------------------
  ------------------
 6907|     40|            handler.on_error("Unexpected end of format string");
 6908|     40|            return begin;
 6909|     40|        }
 6910|  14.4k|        begin = parse_precision(begin, end, handler);
 6911|  14.4k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 114, False: 14.3k]
  |  |  ------------------
  ------------------
 6912|    114|            handler.on_error("Unexpected end of format string");
 6913|    114|            return begin;
 6914|    114|        }
 6915|  14.4k|    }
 6916|       |
 6917|  96.2k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 734, False: 95.5k]
  ------------------
 6918|    734|        handler.on_localized();
 6919|    734|        ++begin;
 6920|    734|    }
 6921|  96.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  96.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52, False: 96.2k]
  |  |  ------------------
  ------------------
 6922|     52|        handler.on_error("Unexpected end of format string");
 6923|     52|        return begin;
 6924|     52|    }
 6925|       |
 6926|  96.2k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 96.2k, False: 0]
  |  Branch (6926:25): [True: 90.9k, False: 5.32k]
  ------------------
 6927|  90.9k|        do_presentation();
 6928|  90.9k|    }
 6929|  96.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  96.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.33k, False: 93.8k]
  |  |  ------------------
  ------------------
 6930|  2.33k|        handler.on_error("Unexpected end of format string");
 6931|  2.33k|        return begin;
 6932|  2.33k|    }
 6933|       |
 6934|  93.8k|    return begin;
 6935|  96.2k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6506|  2.36k|{
 6507|  2.36k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6507:13): [True: 842, False: 1.52k]
  |  Branch (6507:33): [True: 790, False: 52]
  ------------------
 6508|  2.36k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6508:13): [True: 268, False: 1.31k]
  |  Branch (6508:33): [True: 106, False: 162]
  ------------------
 6509|  2.36k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6858|  91.7k|    auto do_presentation = [&]() -> const CharT* {
 6859|  91.7k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 17.7k, False: 74.0k]
  ------------------
 6860|  17.7k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  17.7k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  17.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 818, False: 16.9k]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|    818|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|    818|                return begin;
 6866|    818|            }
 6867|  16.9k|            handler.on_character_set_string(set);
 6868|  16.9k|            return begin;
 6869|  17.7k|        }
 6870|  74.0k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 68.7k, False: 5.23k]
  ------------------
 6871|  68.7k|            return parse_presentation_regex(begin, end, handler);
 6872|  68.7k|        }
 6873|  5.23k|        presentation_type type = parse_presentation_type(*begin++);
 6874|  5.23k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  5.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 972, False: 4.26k]
  |  |  ------------------
  ------------------
 6875|    972|            handler.on_error("Invalid type specifier in format string");
 6876|    972|            return begin;
 6877|    972|        }
 6878|  4.26k|        handler.on_type(type);
 6879|  4.26k|        return begin;
 6880|  5.23k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6696|  17.7k|{
 6697|  17.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  17.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|  17.7k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  17.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|  17.7k|    auto start = begin;
 6701|  17.7k|    ++begin;
 6702|       |
 6703|  17.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  17.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 17.6k]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|     42|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|     42|        return {};
 6708|     42|    }
 6709|  17.6k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 2.91k, False: 14.7k]
  ------------------
 6710|  2.91k|        handler.on_charset_inverted();
 6711|  2.91k|        ++begin;
 6712|  2.91k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.91k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 2.87k]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|     34|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|     34|            return {};
 6717|     34|        }
 6718|  2.87k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 52, False: 2.82k]
  ------------------
 6719|     52|            handler.on_charset_single(char32_t{']'});
 6720|     52|            ++begin;
 6721|     52|        }
 6722|  2.87k|    }
 6723|  14.7k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 34, False: 14.7k]
  ------------------
 6724|     34|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|     34|    }
 6726|       |
 6727|  3.34M|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 3.34M, False: 484]
  ------------------
 6728|  3.34M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  3.34M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 224, False: 3.34M]
  |  |  ------------------
  ------------------
 6729|    224|            break;
 6730|    224|        }
 6731|       |
 6732|  3.34M|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 16.9k, False: 3.33M]
  ------------------
 6733|  16.9k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|  16.9k|        }
 6735|       |
 6736|  3.33M|        parse_presentation_set_literal(begin, end, handler);
 6737|  3.33M|    }
 6738|       |
 6739|    708|    SCN_UNLIKELY_ATTR
 6740|    708|    handler.on_error("Invalid [character set] specifier in format string");
 6741|    708|    return {};
 6742|  17.6k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEvRPKT_SE_OT0_:
 6660|  3.33M|{
 6661|  3.33M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  3.33M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.33M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|  3.33M|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|  3.33M|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  3.33M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 112, False: 3.33M]
  |  |  ------------------
  ------------------
 6665|    112|        return;
 6666|    112|    }
 6667|       |
 6668|  3.33M|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 3.33M, False: 188]
  |  Branch (6668:25): [True: 21.9k, False: 3.30M]
  |  Branch (6668:49): [True: 21.8k, False: 34]
  ------------------
 6669|  3.33M|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 21.4k, False: 412]
  ------------------
 6670|  21.4k|        ++begin;
 6671|       |
 6672|  21.4k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|  21.4k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  21.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 70, False: 21.4k]
  |  |  ------------------
  ------------------
 6674|     70|            return;
 6675|     70|        }
 6676|       |
 6677|  21.4k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  21.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 21.3k]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|     34|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|     34|            return;
 6682|     34|        }
 6683|       |
 6684|  21.3k|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|  21.3k|        return;
 6686|  21.4k|    }
 6687|       |
 6688|  3.31M|    handler.on_charset_single(cp_first);
 6689|  3.31M|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEDiRPKT_SE_OT0_:
 6636|  3.35M|{
 6637|  3.35M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  3.35M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.35M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|  3.35M|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|  3.35M|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  6.70M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 96, False: 3.35M]
  |  |  |  Branch (859:45): [True: 70, False: 3.35M]
  |  |  |  Branch (859:45): [True: 26, False: 3.35M]
  |  |  ------------------
  ------------------
 6641|     96|        handler.on_error("Invalid encoding in format string");
 6642|     96|        return invalid_code_point;
 6643|     96|    }
 6644|       |
 6645|  3.35M|    const auto cp =
 6646|  3.35M|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|  3.35M|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  3.35M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 86, False: 3.35M]
  |  |  ------------------
  ------------------
 6648|     86|        handler.on_error("Invalid encoding in format string");
 6649|     86|        return invalid_code_point;
 6650|     86|    }
 6651|       |
 6652|  3.35M|    begin += len;
 6653|  3.35M|    return cp;
 6654|  3.35M|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6345|  16.9k|    {
 6346|  16.9k|        m_specs.charset_string_data = fmt.data();
 6347|  16.9k|        m_specs.charset_string_size = fmt.size();
 6348|  16.9k|        on_type(presentation_type::string_set);
 6349|  16.9k|    }
impl.cpp:_ZN3scn2v36detail24parse_presentation_regexIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_RSE_SE_OT0_:
 6748|  68.7k|{
 6749|  68.7k|#if !SCN_DISABLE_REGEX
 6750|  68.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  68.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  68.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6751|  68.7k|    SCN_EXPECT(*begin == CharT{'/'});
  ------------------
  |  |  924|  68.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  68.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6752|       |
 6753|  68.7k|    if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|   137k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (6753:19): [Folded - Ignored]
  |  Branch (6753:19): [Folded - Ignored]
  ------------------
 6754|  68.7k|                  std::is_same_v<CharT, wchar_t>) {
  ------------------
  |  Branch (6754:19): [Folded - Ignored]
  ------------------
 6755|  68.7k|        handler.on_error("Regex backend doesn't support wide strings as input");
 6756|  68.7k|        return begin;
 6757|  68.7k|    }
 6758|       |
 6759|  68.7k|    auto start = begin;
 6760|  68.7k|    ++begin;
 6761|       |
 6762|  68.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  68.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 68.7k]
  |  |  ------------------
  ------------------
 6763|     34|        handler.on_error("Unexpected end of regex in format string");
 6764|     34|        return begin;
 6765|     34|    }
 6766|       |
 6767|  68.7k|    handler.on_type(presentation_type::regex);
 6768|  22.2M|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6768:12): [True: 22.2M, False: 524]
  ------------------
 6769|  22.2M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6769:13): [True: 136k, False: 22.1M]
  ------------------
 6770|   136k|            if (*(begin - 1) != CharT{'\\'}) {
  ------------------
  |  Branch (6770:17): [True: 68.2k, False: 67.9k]
  ------------------
 6771|  68.2k|                break;
 6772|  68.2k|            }
 6773|  67.9k|            else {
 6774|  67.9k|                handler.on_type(presentation_type::regex_escaped);
 6775|  67.9k|            }
 6776|   136k|        }
 6777|  22.2M|    }
 6778|  68.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  68.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 524, False: 68.2k]
  |  |  ------------------
  ------------------
 6779|    524|        handler.on_error("Unexpected end of regex in format string");
 6780|    524|        return begin;
 6781|    524|    }
 6782|       |
 6783|  68.2k|    auto regex_end = begin;
 6784|  68.2k|    auto regex_pattern = make_string_view_from_pointers(start + 1, regex_end);
 6785|  68.2k|    if (SCN_UNLIKELY(regex_pattern.empty())) {
  ------------------
  |  |  859|  68.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 68.2k]
  |  |  ------------------
  ------------------
 6786|     34|        handler.on_error("Invalid (empty) regex in format string");
 6787|     34|        return begin;
 6788|     34|    }
 6789|  68.2k|    handler.on_regex_pattern(regex_pattern);
 6790|  68.2k|    ++begin;
 6791|       |
 6792|  68.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  68.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 68.1k]
  |  |  ------------------
  ------------------
 6793|     34|        handler.on_error("Unexpected end of regex in format string");
 6794|     34|        return begin;
 6795|     34|    }
 6796|       |
 6797|  68.1k|    regex_flags flags{regex_flags::none};
 6798|  68.1k|    constexpr std::array<std::pair<char, regex_flags>, 4> flag_map{
 6799|  68.1k|        {{'m', regex_flags::multiline},
 6800|  68.1k|         {'s', regex_flags::singleline},
 6801|  68.1k|         {'i', regex_flags::nocase},
 6802|  68.1k|         {'n', regex_flags::nocapture}}};
 6803|  82.8k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6803:12): [True: 82.7k, False: 58]
  ------------------
 6804|  82.7k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6804:13): [True: 67.8k, False: 14.9k]
  ------------------
 6805|  67.8k|            break;
 6806|  67.8k|        }
 6807|  14.9k|        bool found_flag = false;
 6808|  39.7k|        for (auto flag : flag_map) {
  ------------------
  |  Branch (6808:24): [True: 39.7k, False: 236]
  ------------------
 6809|  39.7k|            if (static_cast<CharT>(flag.first) != *begin) {
  ------------------
  |  Branch (6809:17): [True: 25.1k, False: 14.6k]
  ------------------
 6810|  25.1k|                continue;
 6811|  25.1k|            }
 6812|  14.6k|            if ((flags & flag.second) != regex_flags::none) {
  ------------------
  |  Branch (6812:17): [True: 34, False: 14.6k]
  ------------------
 6813|     34|                handler.on_error("Flag set multiple times in regex");
 6814|     34|                return begin;
 6815|     34|            }
 6816|  14.6k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 6817|  14.6k|            if (*begin == CharT{'s'}) {
  ------------------
  |  Branch (6817:17): [True: 48, False: 14.5k]
  ------------------
 6818|       |                // clang-format off
 6819|     48|                handler.on_error("/s flag for regex isn't supported by regex backend");
 6820|       |                // clang-format on
 6821|     48|            }
 6822|       |#if !SCN_HAS_STD_REGEX_MULTILINE
 6823|       |            if (*begin == CharT{'m'}) {
 6824|       |                // clang-format off
 6825|       |                handler.on_error("/m flag for regex isn't supported by regex backend");
 6826|       |                // clang-format on
 6827|       |            }
 6828|       |#endif
 6829|  14.6k|#endif
 6830|  14.6k|            flags |= flag.second;
 6831|  14.6k|            found_flag = true;
 6832|  14.6k|            break;
 6833|  14.6k|        }
 6834|  14.8k|        if (!found_flag) {
  ------------------
  |  Branch (6834:13): [True: 236, False: 14.6k]
  ------------------
 6835|    236|            handler.on_error("Invalid flag in regex");
 6836|    236|            return begin;
 6837|    236|        }
 6838|  14.8k|    }
 6839|  67.8k|    handler.on_regex_flags(flags);
 6840|       |
 6841|  67.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  67.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 58, False: 67.8k]
  |  |  ------------------
  ------------------
 6842|     58|        handler.on_error("Unexpected end of regex in format string");
 6843|     58|        return begin;
 6844|     58|    }
 6845|       |
 6846|  67.8k|    return begin;
 6847|       |#else
 6848|       |    handler.on_error("Regular expression support is disabled");
 6849|       |    return {};
 6850|       |#endif
 6851|  67.8k|}
_ZN3scn2v36detail12specs_setter16on_regex_patternIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6353|  68.2k|    {
 6354|  68.2k|        m_specs.charset_string_data = pattern.data();
 6355|  68.2k|        m_specs.charset_string_size = pattern.size();
 6356|  68.2k|    }
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6454|  5.23k|{
 6455|  5.23k|    switch (type) {
 6456|    124|        case 'b':
  ------------------
  |  Branch (6456:9): [True: 124, False: 5.10k]
  ------------------
 6457|    176|        case 'B':
  ------------------
  |  Branch (6457:9): [True: 52, False: 5.18k]
  ------------------
 6458|    176|            return presentation_type::int_binary;
 6459|    110|        case 'd':
  ------------------
  |  Branch (6459:9): [True: 110, False: 5.12k]
  ------------------
 6460|    110|            return presentation_type::int_decimal;
 6461|    160|        case 'i':
  ------------------
  |  Branch (6461:9): [True: 160, False: 5.07k]
  ------------------
 6462|    160|            return presentation_type::int_generic;
 6463|     70|        case 'u':
  ------------------
  |  Branch (6463:9): [True: 70, False: 5.16k]
  ------------------
 6464|     70|            return presentation_type::int_unsigned_decimal;
 6465|    268|        case 'o':
  ------------------
  |  Branch (6465:9): [True: 268, False: 4.96k]
  ------------------
 6466|    268|            return presentation_type::int_octal;
 6467|     96|        case 'x':
  ------------------
  |  Branch (6467:9): [True: 96, False: 5.13k]
  ------------------
 6468|    130|        case 'X':
  ------------------
  |  Branch (6468:9): [True: 34, False: 5.19k]
  ------------------
 6469|    130|            return presentation_type::int_hex;
 6470|     34|        case 'r':
  ------------------
  |  Branch (6470:9): [True: 34, False: 5.19k]
  ------------------
 6471|     68|        case 'R':
  ------------------
  |  Branch (6471:9): [True: 34, False: 5.19k]
  ------------------
 6472|     68|            return presentation_type::int_arbitrary_base;
 6473|    106|        case 'a':
  ------------------
  |  Branch (6473:9): [True: 106, False: 5.12k]
  ------------------
 6474|    464|        case 'A':
  ------------------
  |  Branch (6474:9): [True: 358, False: 4.87k]
  ------------------
 6475|    464|            return presentation_type::float_hex;
 6476|     88|        case 'e':
  ------------------
  |  Branch (6476:9): [True: 88, False: 5.14k]
  ------------------
 6477|    158|        case 'E':
  ------------------
  |  Branch (6477:9): [True: 70, False: 5.16k]
  ------------------
 6478|    158|            return presentation_type::float_scientific;
 6479|    232|        case 'f':
  ------------------
  |  Branch (6479:9): [True: 232, False: 5.00k]
  ------------------
 6480|    338|        case 'F':
  ------------------
  |  Branch (6480:9): [True: 106, False: 5.12k]
  ------------------
 6481|    338|            return presentation_type::float_fixed;
 6482|    132|        case 'g':
  ------------------
  |  Branch (6482:9): [True: 132, False: 5.10k]
  ------------------
 6483|    190|        case 'G':
  ------------------
  |  Branch (6483:9): [True: 58, False: 5.17k]
  ------------------
 6484|    190|            return presentation_type::float_general;
 6485|  1.65k|        case 's':
  ------------------
  |  Branch (6485:9): [True: 1.65k, False: 3.57k]
  ------------------
 6486|  1.65k|            return presentation_type::string;
 6487|    358|        case 'c':
  ------------------
  |  Branch (6487:9): [True: 358, False: 4.87k]
  ------------------
 6488|    358|            return presentation_type::character;
 6489|     34|        case '?':
  ------------------
  |  Branch (6489:9): [True: 34, False: 5.19k]
  ------------------
 6490|     34|            return presentation_type::escaped_character;
 6491|     78|        case 'p':
  ------------------
  |  Branch (6491:9): [True: 78, False: 5.15k]
  ------------------
 6492|     78|            return presentation_type::pointer;
 6493|      0|        case '[':
  ------------------
  |  Branch (6493:9): [True: 0, False: 5.23k]
  ------------------
 6494|      0|        case '/':
  ------------------
  |  Branch (6494:9): [True: 0, False: 5.23k]
  ------------------
 6495|       |            // Should be handled by parse_presentation_set and
 6496|       |            // parse_presentation_regex
 6497|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6498|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6499|    972|        default:
  ------------------
  |  Branch (6499:9): [True: 972, False: 4.26k]
  ------------------
 6500|    972|            return presentation_type::none;
 6501|  5.23k|    }
 6502|  5.23k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6531|  96.6k|{
 6532|  96.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  96.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  96.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|  96.6k|    auto check_align = [](wchar_t ch) {
 6535|  96.6k|        switch (ch) {
 6536|  96.6k|            case L'<':
 6537|  96.6k|                return align_type::left;
 6538|  96.6k|            case L'>':
 6539|  96.6k|                return align_type::right;
 6540|  96.6k|            case L'^':
 6541|  96.6k|                return align_type::center;
 6542|  96.6k|            default:
 6543|  96.6k|                return align_type::none;
 6544|  96.6k|        }
 6545|  96.6k|    };
 6546|       |
 6547|  96.6k|    auto potential_fill_len = code_point_length(begin, end);
 6548|  96.6k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   193k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 96.6k]
  |  |  |  Branch (859:45): [True: 38, False: 96.6k]
  |  |  |  Branch (859:45): [True: 4, False: 96.6k]
  |  |  ------------------
  ------------------
 6549|  96.6k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|     42|        handler.on_error("Invalid encoding in fill character");
 6551|     42|        return begin;
 6552|     42|    }
 6553|       |
 6554|  96.6k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|  96.6k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|  96.6k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|  96.6k|    const auto begin_before_fill = begin;
 6559|  96.6k|    begin += potential_fill_len;
 6560|       |
 6561|  96.6k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 1.06k, False: 95.5k]
  ------------------
 6562|  1.06k|        return begin_before_fill;
 6563|  1.06k|    }
 6564|       |
 6565|  95.5k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|  95.5k|    const auto begin_after_fill = begin;
 6567|  95.5k|    ++begin;
 6568|       |
 6569|  95.5k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 94.7k, False: 872]
  ------------------
 6570|  94.7k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  94.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 54, False: 94.6k]
  |  |  ------------------
  ------------------
 6571|     54|            handler.on_error("Invalid fill character '{' in format string");
 6572|     54|            return begin;
 6573|     54|        }
 6574|  94.6k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 12.3k, False: 82.2k]
  ------------------
 6575|  12.3k|            return begin_before_fill;
 6576|  12.3k|        }
 6577|  94.6k|    }
 6578|       |
 6579|  83.1k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 73.8k, False: 9.34k]
  ------------------
 6580|  73.8k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 4.91k, False: 68.9k]
  ------------------
 6581|  4.91k|            handler.on_align(potential_align_on_fill);
 6582|  4.91k|            return begin_after_fill;
 6583|  4.91k|        }
 6584|  68.9k|        return begin_before_fill;
 6585|  73.8k|    }
 6586|       |
 6587|  9.34k|    handler.on_fill(potential_fill);
 6588|  9.34k|    handler.on_align(potential_align_after_fill);
 6589|  9.34k|    return begin;
 6590|  83.1k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6513|  96.6k|{
 6514|  96.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  96.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  96.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6515|  96.6k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6515:19): [Folded - Ignored]
  ------------------
 6516|  96.6k|        return 1;
 6517|  96.6k|    }
 6518|  96.6k|    else {
 6519|  96.6k|        const auto lengths =
 6520|  96.6k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6521|  96.6k|            "\3\4";
 6522|  96.6k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6523|  96.6k|        return len;
 6524|  96.6k|    }
 6525|  96.6k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6534|   192k|    auto check_align = [](wchar_t ch) {
 6535|   192k|        switch (ch) {
 6536|  1.71k|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 1.71k, False: 190k]
  ------------------
 6537|  1.71k|                return align_type::left;
 6538|  2.11k|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 2.11k, False: 190k]
  ------------------
 6539|  2.11k|                return align_type::right;
 6540|  11.7k|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 11.7k, False: 180k]
  ------------------
 6541|  11.7k|                return align_type::center;
 6542|   176k|            default:
  ------------------
  |  Branch (6542:13): [True: 176k, False: 15.5k]
  ------------------
 6543|   176k|                return align_type::none;
 6544|   192k|        }
 6545|   192k|    };
_ZN3scn2v36detail12specs_setter7on_fillIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6267|  9.34k|    {
 6268|  9.34k|        m_specs.fill = fill;
 6269|  9.34k|    }
_ZN3scn2v36detail9fill_typeaSIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6148|  9.34k|    {
 6149|  9.34k|        SCN_EXPECT(!s.empty());
  ------------------
  |  |  924|  9.34k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.34k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6150|  9.34k|        SCN_EXPECT(s.size() * sizeof(CharT) <= max_size);
  ------------------
  |  |  924|  9.34k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.34k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6151|  9.34k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (6151:23): [Folded - Ignored]
  ------------------
 6152|  20.2k|            for (size_t i = 0; i < s.size(); ++i) {
  ------------------
  |  Branch (6152:32): [True: 10.9k, False: 9.34k]
  ------------------
 6153|  10.9k|                SCN_GCC_PUSH
 6154|  10.9k|                SCN_GCC_IGNORE("-Wstringop-overflow")  // false positive
 6155|  10.9k|                m_data[i] = s[i];
 6156|  10.9k|                SCN_GCC_POP
 6157|  10.9k|            }
 6158|  9.34k|            m_size = static_cast<unsigned char>(s.size());
 6159|  9.34k|        }
 6160|  9.34k|        else if constexpr (sizeof(CharT) == 2) {
 6161|  9.34k|            m_data[0] = static_cast<char>(static_cast<unsigned>(s.front()));
 6162|  9.34k|            m_data[1] =
 6163|  9.34k|                static_cast<char>(static_cast<unsigned>(s.front()) >> 8);
 6164|  9.34k|            if (s.size() == 1) {
 6165|  9.34k|                return;
 6166|  9.34k|            }
 6167|  9.34k|            m_data[2] = static_cast<char>(static_cast<unsigned>(s[1]));
 6168|  9.34k|            m_data[3] = static_cast<char>(static_cast<unsigned>(s[1]) >> 8);
 6169|  9.34k|        }
 6170|  9.34k|        else {
 6171|  9.34k|            const auto front = static_cast<unsigned>(s.front());
 6172|  9.34k|            m_data[0] = static_cast<char>(front);
 6173|  9.34k|            m_data[1] = static_cast<char>(front >> 8);
 6174|  9.34k|            m_data[2] = static_cast<char>(front >> 16);
 6175|  9.34k|            m_data[3] = static_cast<char>(front >> 24);
 6176|  9.34k|        }
 6177|  9.34k|    }
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6596|  96.5k|{
 6597|  96.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  96.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  96.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|  96.5k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 21.0k, False: 75.4k]
  |  Branch (6599:33): [True: 6.11k, False: 14.9k]
  ------------------
 6600|  6.11k|        int width = parse_simple_int(begin, end);
 6601|  6.11k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  6.11k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 6.08k, False: 34]
  |  |  ------------------
  ------------------
 6602|  6.08k|            handler.on_width(width);
 6603|  6.08k|        }
 6604|     34|        else {
 6605|     34|            handler.on_error("Invalid field width");
 6606|     34|            return begin;
 6607|     34|        }
 6608|  6.11k|    }
 6609|  96.5k|    return begin;
 6610|  96.5k|}
impl.cpp:_ZN3scn2v36detail15parse_precisionIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6616|  14.4k|{
 6617|  14.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  14.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6618|       |
 6619|  14.4k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6619:9): [True: 14.4k, False: 38]
  |  Branch (6619:33): [True: 14.3k, False: 46]
  ------------------
 6620|  14.3k|        int prec = parse_simple_int(begin, end);
 6621|  14.3k|        if (SCN_LIKELY(prec != -1)) {
  ------------------
  |  |  858|  14.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 14.3k, False: 48]
  |  |  ------------------
  ------------------
 6622|  14.3k|            handler.on_precision(prec);
 6623|  14.3k|        }
 6624|     48|        else {
 6625|     48|            handler.on_error("Invalid field precision");
 6626|     48|            return begin;
 6627|     48|        }
 6628|  14.3k|    }
 6629|  14.4k|    return begin;
 6630|  14.4k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7126|    734|    {
 7127|    734|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|    734|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 658, False: 76]
  ------------------
 7129|    734|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 582, False: 76]
  ------------------
 7130|    734|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 506, False: 76]
  ------------------
 7131|    734|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 430, False: 76]
  ------------------
 7132|    430|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|    430|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|    430|        }
 7137|       |
 7138|    304|        Handler::on_localized();
 7139|    304|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  93.0k|{
 8417|  93.0k|#define SCN_VISIT(Type)                                         \
 8418|  93.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  93.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  93.0k|    }                                                           \
 8421|  93.0k|    else {                                                      \
 8422|  93.0k|        return vis(monostate_val);                              \
 8423|  93.0k|    }
 8424|       |
 8425|  93.0k|    monostate monostate_val{};
 8426|       |
 8427|  93.0k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 93.0k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 93.0k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|  10.3k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 10.3k, False: 82.6k]
  ------------------
 8433|  10.3k|            SCN_VISIT(int);
  ------------------
  |  | 8418|  10.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  10.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  10.3k|    }                                                           \
  |  | 8421|  10.3k|    else {                                                      \
  |  | 8422|  10.3k|        return vis(monostate_val);                              \
  |  | 8423|  10.3k|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 93.0k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 93.0k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 93.0k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 93.0k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|  10.3k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 10.3k, False: 82.6k]
  ------------------
 8443|  10.3k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|  10.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  10.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  10.3k|    }                                                           \
  |  | 8421|  10.3k|    else {                                                      \
  |  | 8422|  10.3k|        return vis(monostate_val);                              \
  |  | 8423|  10.3k|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 93.0k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 93.0k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|  10.3k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 10.3k, False: 82.7k]
  ------------------
 8449|  10.3k|            SCN_VISIT(void*);
  ------------------
  |  | 8418|  10.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  10.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  10.3k|    }                                                           \
  |  | 8421|  10.3k|    else {                                                      \
  |  | 8422|  10.3k|        return vis(monostate_val);                              \
  |  | 8423|  10.3k|    }
  ------------------
 8450|  10.3k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 10.3k, False: 82.6k]
  ------------------
 8451|  10.3k|            SCN_VISIT(bool);
  ------------------
  |  | 8418|  10.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  10.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  10.3k|    }                                                           \
  |  | 8421|  10.3k|    else {                                                      \
  |  | 8422|  10.3k|        return vis(monostate_val);                              \
  |  | 8423|  10.3k|    }
  ------------------
 8452|  10.3k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 10.3k, False: 82.7k]
  ------------------
 8453|  10.3k|            SCN_VISIT(char);
  ------------------
  |  | 8418|  10.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  10.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  10.3k|    }                                                           \
  |  | 8421|  10.3k|    else {                                                      \
  |  | 8422|  10.3k|        return vis(monostate_val);                              \
  |  | 8423|  10.3k|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 93.0k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 93.0k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 93.0k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|  10.3k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 10.3k, False: 82.6k]
  ------------------
 8461|  10.3k|            SCN_VISIT(double);
  ------------------
  |  | 8418|  10.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  10.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  10.3k|    }                                                           \
  |  | 8421|  10.3k|    else {                                                      \
  |  | 8422|  10.3k|        return vis(monostate_val);                              \
  |  | 8423|  10.3k|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 93.0k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|  10.3k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 10.3k, False: 82.7k]
  ------------------
 8465|  10.3k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|  10.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  10.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  10.3k|    }                                                           \
  |  | 8421|  10.3k|    else {                                                      \
  |  | 8422|  10.3k|        return vis(monostate_val);                              \
  |  | 8423|  10.3k|    }
  ------------------
 8466|  10.3k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 10.3k, False: 82.7k]
  ------------------
 8467|  10.3k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|  10.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  10.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  10.3k|    }                                                           \
  |  | 8421|  10.3k|    else {                                                      \
  |  | 8422|  10.3k|        return vis(monostate_val);                              \
  |  | 8423|  10.3k|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 93.0k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|  10.3k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 10.3k, False: 82.7k]
  ------------------
 8471|  10.3k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|  10.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  10.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  10.3k|    }                                                           \
  |  | 8421|  10.3k|    else {                                                      \
  |  | 8422|  10.3k|        return vis(monostate_val);                              \
  |  | 8423|  10.3k|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 93.0k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 93.0k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 93.0k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 93.0k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 93.0k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  93.0k|            SCN_CLANG_POP
 8495|  93.0k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE5beginEv:
 3329|  13.9k|    {
 3330|  13.9k|        return m_iterator;
 3331|  13.9k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISH_vEEOT_:
 1429|  2.62k|    {
 1430|  2.62k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  436|  2.62k|    {
  437|  2.62k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.81k|    {
 1177|  2.81k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE3endEv:
 3333|  7.45k|    {
 3334|  7.45k|        return m_sentinel;
 3335|  7.45k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1475|    190|    {
 1476|    190|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  446|    190|    {
  447|    190|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEEC2ISG_LPv0EEET_SJ_:
 3315|  6.52k|    {
 3316|  6.52k|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEcvbEv:
 1597|    238|    {
 1598|    238|        return has_value();
 1599|    238|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9has_valueEv:
  484|  5.55k|    {
  485|  5.55k|        return m_has_value;
  486|  5.55k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_LPv0EEERT_v:
 1652|    160|    {
 1653|    160|        return value();
 1654|    160|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5valueISH_LPv0EEERT_v:
 1626|  2.62k|    {
 1627|  2.62k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.62k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.62k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.62k|        return this->get_value();
 1629|  2.62k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9get_valueEv:
  450|  2.62k|    {
  451|  2.62k|        return m_value;
  452|  2.62k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESI_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSO_:
 1836|  2.58k|    {
 1837|  2.58k|        return detail::transform_error_impl(std::move(*this),
 1838|  2.58k|                                            std::forward<F>(f));
 1839|  2.58k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS6_IPKcS8_EENS4_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEE8sentinelILb1EEEEENS4_9eof_errorEEERFNS0_10scan_errorESK_ELPv0ESM_EEDaOT_OT0_:
 1322|  2.58k|{
 1323|  2.58k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  2.58k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  2.58k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  2.58k|            return result(*std::forward<Exp>(exp));
 1327|  2.58k|        }
 1328|       |
 1329|  2.58k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  2.58k|        return result(unexpect, monostate{});
 1331|  2.58k|    }
 1332|  2.58k|    else {
 1333|  2.58k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.58k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.58k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.46k, False: 112]
  |  |  ------------------
  ------------------
 1335|  2.58k|                   ? result(*std::forward<Exp>(exp))
 1336|  2.58k|                   : result(unexpect,
 1337|    112|                            trivial_invoke(std::forward<F>(f),
 1338|    112|                                           std::forward<Exp>(exp).error()));
 1339|  2.58k|    }
 1340|  2.58k|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_LPv0EEEOT_v:
 1662|  2.46k|    {
 1663|  2.46k|        return std::move(value());
 1664|  2.46k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|  2.46k|    {
 1430|  2.46k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  436|  2.46k|    {
  437|  2.46k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.58k|    {
 1177|  2.58k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5errorEv:
 1613|    112|    {
 1614|    112|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    112|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    112|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    112|        return std::move(this->get_unexpected().error());
 1616|    112|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE14get_unexpectedEv:
  467|    112|    {
  468|    112|        return m_unexpected;
  469|    112|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
 1485|    112|    {
 1486|    112|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  446|    112|    {
  447|    112|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEcvbEv:
 1597|  2.58k|    {
 1598|  2.58k|        return has_value();
 1599|  2.58k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  5.16k|    {
  485|  5.16k|        return m_has_value;
  486|  5.16k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5errorEv:
 1603|    112|    {
 1604|    112|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    112|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    112|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    112|        return this->get_unexpected().error();
 1606|    112|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|    112|    {
  468|    112|        return m_unexpected;
  469|    112|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEdeISH_LPv0EEEOT_v:
 1662|  2.46k|    {
 1663|  2.46k|        return std::move(value());
 1664|  2.46k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1626|  2.46k|    {
 1627|  2.46k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.46k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.46k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.46k|        return this->get_value();
 1629|  2.46k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.46k|    {
  451|  2.46k|        return m_value;
  452|  2.46k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5465|   341k|    {
 5466|   341k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   341k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 341k]
  |  |  ------------------
  ------------------
 5467|      0|            return max_size();
 5468|      0|        }
 5469|       |
 5470|   341k|        return static_cast<std::size_t>(m_desc &
 5471|   341k|                                        ((1 << detail::packed_arg_bits) - 1));
 5472|   341k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5490|   653k|    {
 5491|   653k|        return (m_desc & detail::is_unpacked_bit) == 0;
 5492|   653k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5433|   311k|    {
 5434|   311k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   311k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 311k]
  |  |  ------------------
  ------------------
 5435|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5436|      0|                return m_args[id];
 5437|      0|            }
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|   311k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|   311k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 84, False: 311k]
  |  |  ------------------
  ------------------
 5442|     84|            return {};
 5443|     84|        }
 5444|       |
 5445|   311k|        const auto t = type(id);
 5446|   311k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|   311k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 77.2k, False: 234k]
  |  |  ------------------
  ------------------
 5447|  77.2k|            return {};
 5448|  77.2k|        }
 5449|       |
 5450|   234k|        basic_scan_arg<Context> arg;
 5451|   234k|        arg.m_type = t;
 5452|   234k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5452:13): [True: 234k, False: 0]
  ------------------
 5453|   234k|            arg.m_value.ref_value = m_builtin_values[id];
 5454|   234k|        }
 5455|      0|        else {
 5456|      0|            arg.m_value = m_values[id];
 5457|      0|        }
 5458|   234k|        return arg;
 5459|   311k|    }
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5240|   311k|    constexpr basic_scan_arg() = default;
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5499|   311k|    {
 5500|       |        // First (0th) index is size, types start after that
 5501|   311k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5502|   311k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5503|   311k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5504|   311k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5494|   234k|    {
 5495|   234k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5496|   234k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5246|   543k|    {
 5247|   543k|        return m_type != detail::arg_type::none_type;
 5248|   543k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   175k|{
 8417|   175k|#define SCN_VISIT(Type)                                         \
 8418|   175k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   175k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   175k|    }                                                           \
 8421|   175k|    else {                                                      \
 8422|   175k|        return vis(monostate_val);                              \
 8423|   175k|    }
 8424|       |
 8425|   175k|    monostate monostate_val{};
 8426|       |
 8427|   175k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 175k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 175k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|  19.5k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 19.5k, False: 156k]
  ------------------
 8433|  19.5k|            SCN_VISIT(int);
  ------------------
  |  | 8418|  19.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  19.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  19.5k|    }                                                           \
  |  | 8421|  19.5k|    else {                                                      \
  |  | 8422|  19.5k|        return vis(monostate_val);                              \
  |  | 8423|  19.5k|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 175k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 175k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 175k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 175k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|  19.5k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 19.5k, False: 156k]
  ------------------
 8443|  19.5k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|  19.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  19.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  19.5k|    }                                                           \
  |  | 8421|  19.5k|    else {                                                      \
  |  | 8422|  19.5k|        return vis(monostate_val);                              \
  |  | 8423|  19.5k|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 175k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 175k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|  19.5k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 19.5k, False: 156k]
  ------------------
 8449|  19.5k|            SCN_VISIT(void*);
  ------------------
  |  | 8418|  19.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  19.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  19.5k|    }                                                           \
  |  | 8421|  19.5k|    else {                                                      \
  |  | 8422|  19.5k|        return vis(monostate_val);                              \
  |  | 8423|  19.5k|    }
  ------------------
 8450|  19.5k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 19.5k, False: 156k]
  ------------------
 8451|  19.5k|            SCN_VISIT(bool);
  ------------------
  |  | 8418|  19.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  19.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  19.5k|    }                                                           \
  |  | 8421|  19.5k|    else {                                                      \
  |  | 8422|  19.5k|        return vis(monostate_val);                              \
  |  | 8423|  19.5k|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 175k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|  19.5k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 19.5k, False: 156k]
  ------------------
 8455|  19.5k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|  19.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  19.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  19.5k|    }                                                           \
  |  | 8421|  19.5k|    else {                                                      \
  |  | 8422|  19.5k|        return vis(monostate_val);                              \
  |  | 8423|  19.5k|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 175k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 175k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|  19.5k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 19.5k, False: 156k]
  ------------------
 8461|  19.5k|            SCN_VISIT(double);
  ------------------
  |  | 8418|  19.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  19.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  19.5k|    }                                                           \
  |  | 8421|  19.5k|    else {                                                      \
  |  | 8422|  19.5k|        return vis(monostate_val);                              \
  |  | 8423|  19.5k|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 175k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 175k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|  19.5k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 19.5k, False: 156k]
  ------------------
 8467|  19.5k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|  19.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  19.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  19.5k|    }                                                           \
  |  | 8421|  19.5k|    else {                                                      \
  |  | 8422|  19.5k|        return vis(monostate_val);                              \
  |  | 8423|  19.5k|    }
  ------------------
 8468|  19.5k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 19.5k, False: 156k]
  ------------------
 8469|  19.5k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|  19.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  19.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  19.5k|    }                                                           \
  |  | 8421|  19.5k|    else {                                                      \
  |  | 8422|  19.5k|        return vis(monostate_val);                              \
  |  | 8423|  19.5k|    }
  ------------------
 8470|  19.5k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 19.5k, False: 156k]
  ------------------
 8471|  19.5k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|  19.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  19.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  19.5k|    }                                                           \
  |  | 8421|  19.5k|    else {                                                      \
  |  | 8422|  19.5k|        return vis(monostate_val);                              \
  |  | 8423|  19.5k|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 175k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 175k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 175k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 175k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 175k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   175k|            SCN_CLANG_POP
 8495|   175k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5544|   341k|    {
 5545|   341k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8055|   341k|    {
 8056|   341k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   341k|{
 7044|   341k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   341k|    handler.check_args_exhausted();
 7046|   341k|    return handler.get_error();
 7047|   341k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   341k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   341k|    auto begin = format.data();
 7013|   341k|    auto it = begin;
 7014|   341k|    const auto end = format.data() + format.size();
 7015|       |
 7016|   709M|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 709M, False: 107k]
  ------------------
 7017|   709M|        const auto ch = *it++;
 7018|   709M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 312k, False: 708M]
  ------------------
 7019|   312k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   312k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   312k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 232k, False: 79.7k]
  ------------------
 7023|   232k|                return;
 7024|   232k|            }
 7025|   312k|        }
 7026|   708M|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 22.7k, False: 708M]
  ------------------
 7027|  22.7k|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|  44.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.92k, False: 20.7k]
  |  |  |  Branch (859:45): [True: 862, False: 21.8k]
  |  |  |  Branch (859:45): [True: 1.06k, False: 20.7k]
  |  |  ------------------
  ------------------
 7028|  1.92k|                handler.on_error("Unmatched '}' in format string");
 7029|  1.92k|                return;
 7030|  1.92k|            }
 7031|       |
 7032|  20.7k|            handler.on_literal_text(begin, it);
 7033|  20.7k|            begin = ++it;
 7034|  20.7k|        }
 7035|   709M|    }
 7036|       |
 7037|   107k|    handler.on_literal_text(begin, end);
 7038|   107k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6941|   312k|{
 6942|   312k|    struct id_adapter {
 6943|   312k|        constexpr void operator()()
 6944|   312k|        {
 6945|   312k|            arg_id = handler.on_arg_id();
 6946|   312k|        }
 6947|   312k|        constexpr void operator()(std::size_t id)
 6948|   312k|        {
 6949|   312k|            arg_id = handler.on_arg_id(id);
 6950|   312k|        }
 6951|       |
 6952|   312k|        constexpr void on_error(const char* msg)
 6953|   312k|        {
 6954|   312k|            SCN_UNLIKELY_ATTR
 6955|   312k|            handler.on_error(msg);
 6956|   312k|        }
 6957|       |
 6958|   312k|        Handler& handler;
 6959|   312k|        std::size_t arg_id;
 6960|   312k|    };
 6961|       |
 6962|   312k|    ++begin;
 6963|   312k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   312k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 106, False: 312k]
  |  |  ------------------
  ------------------
 6964|    106|        handler.on_error("Unexpected end of replacement field");
 6965|    106|        return begin;
 6966|    106|    }
 6967|       |
 6968|   312k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 175k, False: 136k]
  ------------------
 6969|   175k|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|   175k|    }
 6971|   136k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 112, False: 136k]
  ------------------
 6972|    112|        handler.on_literal_text(begin, begin + 1);
 6973|    112|    }
 6974|   136k|    else {
 6975|   136k|        auto adapter = id_adapter{handler, 0};
 6976|   136k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|   136k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 102, False: 136k]
  |  |  ------------------
  ------------------
 6979|    102|            handler.on_error("Missing '}' in format string");
 6980|    102|            return begin;
 6981|    102|        }
 6982|       |
 6983|   136k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 204, False: 136k]
  ------------------
 6984|    204|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|    204|        }
 6986|   136k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 135k, False: 362]
  ------------------
 6987|   135k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 66, False: 135k]
  |  |  ------------------
  ------------------
 6988|     66|                handler.on_error("Unexpected end of replacement field");
 6989|     66|                return begin;
 6990|     66|            }
 6991|   135k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|   135k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   271k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.07k, False: 132k]
  |  |  |  Branch (859:45): [True: 0, False: 135k]
  |  |  |  Branch (859:45): [True: 3.07k, False: 132k]
  |  |  ------------------
  ------------------
 6993|  3.07k|                handler.on_error("Unknown format specifier");
 6994|  3.07k|                return begin;
 6995|  3.07k|            }
 6996|   135k|        }
 6997|    362|        else {
 6998|    362|            SCN_UNLIKELY_ATTR
 6999|    362|            handler.on_error("Missing '}' in format string");
 7000|    362|            return begin;
 7001|    362|        }
 7002|   136k|    }
 7003|   308k|    return begin + 1;
 7004|   312k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 8038|   311k|    {
 8039|   311k|        return m_args.get(id);
 8040|   311k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE4argsEv:
 8043|   176k|    {
 8044|   176k|        return m_args;
 8045|   176k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8048|   308k|    {
 8049|   308k|        return m_locale;
 8050|   308k|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5565|   311k|    {
 5566|   311k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|   311k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 311k]
  |  |  ------------------
  ------------------
 5567|     42|            on_error(
 5568|     42|                "Cannot switch from manual to automatic argument indexing");
 5569|     42|            return 0;
 5570|     42|        }
 5571|       |
 5572|   311k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5573|   311k|        do_check_arg_id(id);
 5574|   311k|        return id;
 5575|   311k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE8on_errorEPKc:
 5589|    162|    {
 5590|    162|        return detail::handle_error(
 5591|    162|            scan_error{scan_error::invalid_format_string, msg});
 5592|    162|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6053|   311k|{
 6054|   311k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6054:9): [Folded - Ignored]
  ------------------
 6055|   311k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6055:10): [Folded - Ignored]
  |  Branch (6055:22): [Folded - Ignored]
  ------------------
 6056|       |        // The cast below will cause an error on gcc pre-12
 6057|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6058|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6058:13): [True: 0, False: 0]
  ------------------
 6059|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6060|      0|            SCN_UNLIKELY_ATTR
 6061|      0|            on_error("Argument not found");
 6062|      0|        }
 6063|      0|    }
 6064|   311k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|   136k|{
 6443|   136k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   136k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   136k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|   136k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 136k, False: 0]
  |  Branch (6444:26): [True: 800, False: 135k]
  ------------------
 6445|    800|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|    800|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|    800|    }
 6447|       |
 6448|   135k|    handler();
 6449|   135k|    return begin;
 6450|   136k|}
impl.cpp:_ZN3scn2v36detail15do_parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6412|    800|{
 6413|    800|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|    800|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    800|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6414|       |
 6415|    800|    CharT c = *begin;
 6416|    800|    if (c < CharT{'0'} || c > CharT{'9'}) {
  ------------------
  |  Branch (6416:9): [True: 126, False: 674]
  |  Branch (6416:27): [True: 180, False: 494]
  ------------------
 6417|    306|        handler.on_error("Invalid argument ID");
 6418|    306|        return begin;
 6419|    306|    }
 6420|       |
 6421|    494|    int idx = 0;
 6422|    494|    if (c != CharT{'0'}) {
  ------------------
  |  Branch (6422:9): [True: 248, False: 246]
  ------------------
 6423|    248|        idx = parse_simple_int(begin, end);
 6424|    248|    }
 6425|    246|    else {
 6426|    246|        ++begin;
 6427|    246|    }
 6428|       |
 6429|    494|    if (begin == end || (*begin != CharT{'}'} && *begin != CharT{':'})) {
  ------------------
  |  Branch (6429:9): [True: 102, False: 392]
  |  Branch (6429:26): [True: 188, False: 204]
  |  Branch (6429:50): [True: 56, False: 132]
  ------------------
 6430|    158|        handler.on_error("Invalid argument ID");
 6431|    158|        return begin;
 6432|    158|    }
 6433|    336|    handler(idx);
 6434|       |
 6435|    336|    return begin;
 6436|    494|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapter8on_errorEPKc:
 6953|    464|        {
 6954|    464|            SCN_UNLIKELY_ATTR
 6955|    464|            handler.on_error(msg);
 6956|    464|        }
_ZN3scn2v36detail16parse_simple_intIwEEiRPKT_S5_:
 6391|  49.3k|{
 6392|  49.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  49.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  49.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6393|  49.3k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  49.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  49.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6394|       |
 6395|  49.3k|    unsigned long long value = 0;
 6396|  51.1k|    do {
 6397|  51.1k|        value *= 10;
 6398|  51.1k|        value += static_cast<unsigned long long>(*begin - '0');
 6399|  51.1k|        if (value >
  ------------------
  |  Branch (6399:13): [True: 0, False: 51.1k]
  ------------------
 6400|  51.1k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6401|      0|            return -1;
 6402|      0|        }
 6403|  51.1k|        ++begin;
 6404|  51.1k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6404:14): [True: 50.9k, False: 292]
  |  Branch (6404:30): [True: 7.37k, False: 43.5k]
  |  Branch (6404:47): [True: 1.80k, False: 5.56k]
  ------------------
 6405|  49.3k|    return static_cast<int>(value);
 6406|  49.3k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEm:
 6948|    336|        {
 6949|    336|            arg_id = handler.on_arg_id(id);
 6950|    336|        }
_ZN3scn2v324basic_scan_parse_contextIwE12check_arg_idEm:
 5578|    336|    {
 5579|    336|        if (SCN_UNLIKELY(m_next_arg_id > 0)) {
  ------------------
  |  |  859|    336|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 120, False: 216]
  |  |  ------------------
  ------------------
 5580|    120|            on_error(
 5581|    120|                "Cannot switch from manual to automatic argument indexing");
 5582|    120|            return;
 5583|    120|        }
 5584|    216|        m_next_arg_id = -1;
 5585|    216|        do_check_arg_id(id);
 5586|    216|    }
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|   135k|        {
 6945|   135k|            arg_id = handler.on_arg_id();
 6946|   135k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5251|   271k|    {
 5252|   271k|        return m_type;
 5253|   271k|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5560|   132k|    {
 5561|   132k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5562|   132k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5549|   267k|    {
 5550|   267k|        return m_format.data();
 5551|   267k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7121|   135k|    {
 7122|   135k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   135k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   135k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|   135k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6857|   135k|{
 6858|   135k|    auto do_presentation = [&]() -> const CharT* {
 6859|   135k|        if (*begin == CharT{'['}) {
 6860|   135k|            auto set = parse_presentation_set(begin, end, handler);
 6861|   135k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|   135k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|   135k|                return begin;
 6866|   135k|            }
 6867|   135k|            handler.on_character_set_string(set);
 6868|   135k|            return begin;
 6869|   135k|        }
 6870|   135k|        if (*begin == CharT{'/'}) {
 6871|   135k|            return parse_presentation_regex(begin, end, handler);
 6872|   135k|        }
 6873|   135k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   135k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|   135k|            handler.on_error("Invalid type specifier in format string");
 6876|   135k|            return begin;
 6877|   135k|        }
 6878|   135k|        handler.on_type(type);
 6879|   135k|        return begin;
 6880|   135k|    };
 6881|       |
 6882|   135k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 134k, False: 996]
  |  Branch (6882:28): [True: 3.04k, False: 131k]
  ------------------
 6883|   135k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 324, False: 2.72k]
  |  Branch (6883:36): [True: 224, False: 100]
  ------------------
 6884|    224|        return do_presentation();
 6885|    224|    }
 6886|       |
 6887|   135k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 135k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|   135k|    begin = parse_align(begin, end, handler);
 6893|   135k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 118, False: 135k]
  |  |  ------------------
  ------------------
 6894|    118|        handler.on_error("Unexpected end of format string");
 6895|    118|        return begin;
 6896|    118|    }
 6897|       |
 6898|   135k|    begin = parse_width(begin, end, handler);
 6899|   135k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 106, False: 135k]
  |  |  ------------------
  ------------------
 6900|    106|        handler.on_error("Unexpected end of format string");
 6901|    106|        return begin;
 6902|    106|    }
 6903|       |
 6904|   135k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 3.55k, False: 131k]
  ------------------
 6905|  3.55k|        ++begin;
 6906|  3.55k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  3.55k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 36, False: 3.52k]
  |  |  ------------------
  ------------------
 6907|     36|            handler.on_error("Unexpected end of format string");
 6908|     36|            return begin;
 6909|     36|        }
 6910|  3.52k|        begin = parse_precision(begin, end, handler);
 6911|  3.52k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  3.52k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 110, False: 3.41k]
  |  |  ------------------
  ------------------
 6912|    110|            handler.on_error("Unexpected end of format string");
 6913|    110|            return begin;
 6914|    110|        }
 6915|  3.52k|    }
 6916|       |
 6917|   135k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 616, False: 134k]
  ------------------
 6918|    616|        handler.on_localized();
 6919|    616|        ++begin;
 6920|    616|    }
 6921|   135k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 66, False: 135k]
  |  |  ------------------
  ------------------
 6922|     66|        handler.on_error("Unexpected end of format string");
 6923|     66|        return begin;
 6924|     66|    }
 6925|       |
 6926|   135k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 135k, False: 0]
  |  Branch (6926:25): [True: 54.1k, False: 80.9k]
  ------------------
 6927|  54.1k|        do_presentation();
 6928|  54.1k|    }
 6929|   135k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.93k, False: 133k]
  |  |  ------------------
  ------------------
 6930|  1.93k|        handler.on_error("Unexpected end of format string");
 6931|  1.93k|        return begin;
 6932|  1.93k|    }
 6933|       |
 6934|   133k|    return begin;
 6935|   135k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6506|  3.04k|{
 6507|  3.04k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6507:13): [True: 222, False: 2.82k]
  |  Branch (6507:33): [True: 188, False: 34]
  ------------------
 6508|  3.04k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6508:13): [True: 206, False: 2.65k]
  |  Branch (6508:33): [True: 136, False: 70]
  ------------------
 6509|  3.04k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6858|  54.3k|    auto do_presentation = [&]() -> const CharT* {
 6859|  54.3k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 3.36k, False: 51.0k]
  ------------------
 6860|  3.36k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  3.36k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  3.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 714, False: 2.65k]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|    714|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|    714|                return begin;
 6866|    714|            }
 6867|  2.65k|            handler.on_character_set_string(set);
 6868|  2.65k|            return begin;
 6869|  3.36k|        }
 6870|  51.0k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 47.4k, False: 3.55k]
  ------------------
 6871|  47.4k|            return parse_presentation_regex(begin, end, handler);
 6872|  47.4k|        }
 6873|  3.55k|        presentation_type type = parse_presentation_type(*begin++);
 6874|  3.55k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  3.55k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 674, False: 2.87k]
  |  |  ------------------
  ------------------
 6875|    674|            handler.on_error("Invalid type specifier in format string");
 6876|    674|            return begin;
 6877|    674|        }
 6878|  2.87k|        handler.on_type(type);
 6879|  2.87k|        return begin;
 6880|  3.55k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6696|  3.36k|{
 6697|  3.36k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  3.36k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.36k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|  3.36k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  3.36k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.36k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|  3.36k|    auto start = begin;
 6701|  3.36k|    ++begin;
 6702|       |
 6703|  3.36k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  3.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 40, False: 3.32k]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|     40|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|     40|        return {};
 6708|     40|    }
 6709|  3.32k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 792, False: 2.53k]
  ------------------
 6710|    792|        handler.on_charset_inverted();
 6711|    792|        ++begin;
 6712|    792|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    792|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 750]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|     42|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|     42|            return {};
 6717|     42|        }
 6718|    750|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 28, False: 722]
  ------------------
 6719|     28|            handler.on_charset_single(char32_t{']'});
 6720|     28|            ++begin;
 6721|     28|        }
 6722|    750|    }
 6723|  2.53k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 34, False: 2.50k]
  ------------------
 6724|     34|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|     34|    }
 6726|       |
 6727|  39.9k|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 39.5k, False: 418]
  ------------------
 6728|  39.5k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  39.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 180, False: 39.3k]
  |  |  ------------------
  ------------------
 6729|    180|            break;
 6730|    180|        }
 6731|       |
 6732|  39.3k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 2.65k, False: 36.6k]
  ------------------
 6733|  2.65k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|  2.65k|        }
 6735|       |
 6736|  36.6k|        parse_presentation_set_literal(begin, end, handler);
 6737|  36.6k|    }
 6738|       |
 6739|    598|    SCN_UNLIKELY_ATTR
 6740|    598|    handler.on_error("Invalid [character set] specifier in format string");
 6741|    598|    return {};
 6742|  3.25k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEvRPKT_SE_OT0_:
 6660|  36.6k|{
 6661|  36.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  36.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  36.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|  36.6k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|  36.6k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  36.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 138, False: 36.5k]
  |  |  ------------------
  ------------------
 6665|    138|        return;
 6666|    138|    }
 6667|       |
 6668|  36.5k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 36.4k, False: 102]
  |  Branch (6668:25): [True: 704, False: 35.7k]
  |  Branch (6668:49): [True: 656, False: 48]
  ------------------
 6669|  36.5k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 466, False: 190]
  ------------------
 6670|    466|        ++begin;
 6671|       |
 6672|    466|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|    466|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|    466|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 432]
  |  |  ------------------
  ------------------
 6674|     34|            return;
 6675|     34|        }
 6676|       |
 6677|    432|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|    432|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 46, False: 386]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|     46|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|     46|            return;
 6682|     46|        }
 6683|       |
 6684|    386|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|    386|        return;
 6686|    432|    }
 6687|       |
 6688|  36.0k|    handler.on_charset_single(cp_first);
 6689|  36.0k|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEDiRPKT_SE_OT0_:
 6636|  37.1k|{
 6637|  37.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  37.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  37.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|  37.1k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|  37.1k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  74.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 37.1k]
  |  |  |  Branch (859:45): [True: 0, False: 37.1k]
  |  |  |  Branch (859:45): [True: 0, False: 37.1k]
  |  |  ------------------
  ------------------
 6641|      0|        handler.on_error("Invalid encoding in format string");
 6642|      0|        return invalid_code_point;
 6643|      0|    }
 6644|       |
 6645|  37.1k|    const auto cp =
 6646|  37.1k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|  37.1k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  37.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 172, False: 36.9k]
  |  |  ------------------
  ------------------
 6648|    172|        handler.on_error("Invalid encoding in format string");
 6649|    172|        return invalid_code_point;
 6650|    172|    }
 6651|       |
 6652|  36.9k|    begin += len;
 6653|  36.9k|    return cp;
 6654|  37.1k|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6345|  2.65k|    {
 6346|  2.65k|        m_specs.charset_string_data = fmt.data();
 6347|  2.65k|        m_specs.charset_string_size = fmt.size();
 6348|  2.65k|        on_type(presentation_type::string_set);
 6349|  2.65k|    }
impl.cpp:_ZN3scn2v36detail24parse_presentation_regexIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_RSE_SE_OT0_:
 6748|  47.4k|{
 6749|  47.4k|#if !SCN_DISABLE_REGEX
 6750|  47.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  47.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  47.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6751|  47.4k|    SCN_EXPECT(*begin == CharT{'/'});
  ------------------
  |  |  924|  47.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  47.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6752|       |
 6753|  47.4k|    if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|  94.9k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (6753:19): [Folded - Ignored]
  |  Branch (6753:19): [Folded - Ignored]
  ------------------
 6754|  47.4k|                  std::is_same_v<CharT, wchar_t>) {
  ------------------
  |  Branch (6754:19): [Folded - Ignored]
  ------------------
 6755|  47.4k|        handler.on_error("Regex backend doesn't support wide strings as input");
 6756|  47.4k|        return begin;
 6757|  47.4k|    }
 6758|       |
 6759|  47.4k|    auto start = begin;
 6760|  47.4k|    ++begin;
 6761|       |
 6762|  47.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  47.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 47.4k]
  |  |  ------------------
  ------------------
 6763|     34|        handler.on_error("Unexpected end of regex in format string");
 6764|     34|        return begin;
 6765|     34|    }
 6766|       |
 6767|  47.4k|    handler.on_type(presentation_type::regex);
 6768|  5.10M|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6768:12): [True: 5.10M, False: 246]
  ------------------
 6769|  5.10M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6769:13): [True: 52.1k, False: 5.04M]
  ------------------
 6770|  52.1k|            if (*(begin - 1) != CharT{'\\'}) {
  ------------------
  |  Branch (6770:17): [True: 47.1k, False: 4.95k]
  ------------------
 6771|  47.1k|                break;
 6772|  47.1k|            }
 6773|  4.95k|            else {
 6774|  4.95k|                handler.on_type(presentation_type::regex_escaped);
 6775|  4.95k|            }
 6776|  52.1k|        }
 6777|  5.10M|    }
 6778|  47.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  47.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 246, False: 47.1k]
  |  |  ------------------
  ------------------
 6779|    246|        handler.on_error("Unexpected end of regex in format string");
 6780|    246|        return begin;
 6781|    246|    }
 6782|       |
 6783|  47.1k|    auto regex_end = begin;
 6784|  47.1k|    auto regex_pattern = make_string_view_from_pointers(start + 1, regex_end);
 6785|  47.1k|    if (SCN_UNLIKELY(regex_pattern.empty())) {
  ------------------
  |  |  859|  47.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52, False: 47.1k]
  |  |  ------------------
  ------------------
 6786|     52|        handler.on_error("Invalid (empty) regex in format string");
 6787|     52|        return begin;
 6788|     52|    }
 6789|  47.1k|    handler.on_regex_pattern(regex_pattern);
 6790|  47.1k|    ++begin;
 6791|       |
 6792|  47.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  47.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 47.1k]
  |  |  ------------------
  ------------------
 6793|     34|        handler.on_error("Unexpected end of regex in format string");
 6794|     34|        return begin;
 6795|     34|    }
 6796|       |
 6797|  47.1k|    regex_flags flags{regex_flags::none};
 6798|  47.1k|    constexpr std::array<std::pair<char, regex_flags>, 4> flag_map{
 6799|  47.1k|        {{'m', regex_flags::multiline},
 6800|  47.1k|         {'s', regex_flags::singleline},
 6801|  47.1k|         {'i', regex_flags::nocase},
 6802|  47.1k|         {'n', regex_flags::nocapture}}};
 6803|  51.1k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6803:12): [True: 51.0k, False: 72]
  ------------------
 6804|  51.0k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6804:13): [True: 46.8k, False: 4.23k]
  ------------------
 6805|  46.8k|            break;
 6806|  46.8k|        }
 6807|  4.23k|        bool found_flag = false;
 6808|  12.4k|        for (auto flag : flag_map) {
  ------------------
  |  Branch (6808:24): [True: 12.4k, False: 144]
  ------------------
 6809|  12.4k|            if (static_cast<CharT>(flag.first) != *begin) {
  ------------------
  |  Branch (6809:17): [True: 8.37k, False: 4.09k]
  ------------------
 6810|  8.37k|                continue;
 6811|  8.37k|            }
 6812|  4.09k|            if ((flags & flag.second) != regex_flags::none) {
  ------------------
  |  Branch (6812:17): [True: 28, False: 4.06k]
  ------------------
 6813|     28|                handler.on_error("Flag set multiple times in regex");
 6814|     28|                return begin;
 6815|     28|            }
 6816|  4.06k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 6817|  4.06k|            if (*begin == CharT{'s'}) {
  ------------------
  |  Branch (6817:17): [True: 60, False: 4.00k]
  ------------------
 6818|       |                // clang-format off
 6819|     60|                handler.on_error("/s flag for regex isn't supported by regex backend");
 6820|       |                // clang-format on
 6821|     60|            }
 6822|       |#if !SCN_HAS_STD_REGEX_MULTILINE
 6823|       |            if (*begin == CharT{'m'}) {
 6824|       |                // clang-format off
 6825|       |                handler.on_error("/m flag for regex isn't supported by regex backend");
 6826|       |                // clang-format on
 6827|       |            }
 6828|       |#endif
 6829|  4.06k|#endif
 6830|  4.06k|            flags |= flag.second;
 6831|  4.06k|            found_flag = true;
 6832|  4.06k|            break;
 6833|  4.09k|        }
 6834|  4.20k|        if (!found_flag) {
  ------------------
  |  Branch (6834:13): [True: 144, False: 4.06k]
  ------------------
 6835|    144|            handler.on_error("Invalid flag in regex");
 6836|    144|            return begin;
 6837|    144|        }
 6838|  4.20k|    }
 6839|  46.9k|    handler.on_regex_flags(flags);
 6840|       |
 6841|  46.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  46.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 72, False: 46.8k]
  |  |  ------------------
  ------------------
 6842|     72|        handler.on_error("Unexpected end of regex in format string");
 6843|     72|        return begin;
 6844|     72|    }
 6845|       |
 6846|  46.8k|    return begin;
 6847|       |#else
 6848|       |    handler.on_error("Regular expression support is disabled");
 6849|       |    return {};
 6850|       |#endif
 6851|  46.9k|}
_ZN3scn2v36detail12specs_setter16on_regex_patternIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6353|  47.1k|    {
 6354|  47.1k|        m_specs.charset_string_data = pattern.data();
 6355|  47.1k|        m_specs.charset_string_size = pattern.size();
 6356|  47.1k|    }
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6454|  3.55k|{
 6455|  3.55k|    switch (type) {
 6456|     70|        case 'b':
  ------------------
  |  Branch (6456:9): [True: 70, False: 3.48k]
  ------------------
 6457|    104|        case 'B':
  ------------------
  |  Branch (6457:9): [True: 34, False: 3.51k]
  ------------------
 6458|    104|            return presentation_type::int_binary;
 6459|     88|        case 'd':
  ------------------
  |  Branch (6459:9): [True: 88, False: 3.46k]
  ------------------
 6460|     88|            return presentation_type::int_decimal;
 6461|    106|        case 'i':
  ------------------
  |  Branch (6461:9): [True: 106, False: 3.44k]
  ------------------
 6462|    106|            return presentation_type::int_generic;
 6463|    172|        case 'u':
  ------------------
  |  Branch (6463:9): [True: 172, False: 3.37k]
  ------------------
 6464|    172|            return presentation_type::int_unsigned_decimal;
 6465|    142|        case 'o':
  ------------------
  |  Branch (6465:9): [True: 142, False: 3.40k]
  ------------------
 6466|    142|            return presentation_type::int_octal;
 6467|    148|        case 'x':
  ------------------
  |  Branch (6467:9): [True: 148, False: 3.40k]
  ------------------
 6468|    200|        case 'X':
  ------------------
  |  Branch (6468:9): [True: 52, False: 3.49k]
  ------------------
 6469|    200|            return presentation_type::int_hex;
 6470|     54|        case 'r':
  ------------------
  |  Branch (6470:9): [True: 54, False: 3.49k]
  ------------------
 6471|    100|        case 'R':
  ------------------
  |  Branch (6471:9): [True: 46, False: 3.50k]
  ------------------
 6472|    100|            return presentation_type::int_arbitrary_base;
 6473|    178|        case 'a':
  ------------------
  |  Branch (6473:9): [True: 178, False: 3.37k]
  ------------------
 6474|    322|        case 'A':
  ------------------
  |  Branch (6474:9): [True: 144, False: 3.40k]
  ------------------
 6475|    322|            return presentation_type::float_hex;
 6476|    142|        case 'e':
  ------------------
  |  Branch (6476:9): [True: 142, False: 3.40k]
  ------------------
 6477|    176|        case 'E':
  ------------------
  |  Branch (6477:9): [True: 34, False: 3.51k]
  ------------------
 6478|    176|            return presentation_type::float_scientific;
 6479|     94|        case 'f':
  ------------------
  |  Branch (6479:9): [True: 94, False: 3.45k]
  ------------------
 6480|    182|        case 'F':
  ------------------
  |  Branch (6480:9): [True: 88, False: 3.46k]
  ------------------
 6481|    182|            return presentation_type::float_fixed;
 6482|     34|        case 'g':
  ------------------
  |  Branch (6482:9): [True: 34, False: 3.51k]
  ------------------
 6483|     68|        case 'G':
  ------------------
  |  Branch (6483:9): [True: 34, False: 3.51k]
  ------------------
 6484|     68|            return presentation_type::float_general;
 6485|    826|        case 's':
  ------------------
  |  Branch (6485:9): [True: 826, False: 2.72k]
  ------------------
 6486|    826|            return presentation_type::string;
 6487|    268|        case 'c':
  ------------------
  |  Branch (6487:9): [True: 268, False: 3.28k]
  ------------------
 6488|    268|            return presentation_type::character;
 6489|     34|        case '?':
  ------------------
  |  Branch (6489:9): [True: 34, False: 3.51k]
  ------------------
 6490|     34|            return presentation_type::escaped_character;
 6491|     88|        case 'p':
  ------------------
  |  Branch (6491:9): [True: 88, False: 3.46k]
  ------------------
 6492|     88|            return presentation_type::pointer;
 6493|      0|        case '[':
  ------------------
  |  Branch (6493:9): [True: 0, False: 3.55k]
  ------------------
 6494|      0|        case '/':
  ------------------
  |  Branch (6494:9): [True: 0, False: 3.55k]
  ------------------
 6495|       |            // Should be handled by parse_presentation_set and
 6496|       |            // parse_presentation_regex
 6497|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6498|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6499|    674|        default:
  ------------------
  |  Branch (6499:9): [True: 674, False: 2.87k]
  ------------------
 6500|    674|            return presentation_type::none;
 6501|  3.55k|    }
 6502|  3.55k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6531|   135k|{
 6532|   135k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   135k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   135k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|   135k|    auto check_align = [](wchar_t ch) {
 6535|   135k|        switch (ch) {
 6536|   135k|            case L'<':
 6537|   135k|                return align_type::left;
 6538|   135k|            case L'>':
 6539|   135k|                return align_type::right;
 6540|   135k|            case L'^':
 6541|   135k|                return align_type::center;
 6542|   135k|            default:
 6543|   135k|                return align_type::none;
 6544|   135k|        }
 6545|   135k|    };
 6546|       |
 6547|   135k|    auto potential_fill_len = code_point_length(begin, end);
 6548|   135k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   271k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 135k]
  |  |  |  Branch (859:45): [True: 0, False: 135k]
  |  |  |  Branch (859:45): [True: 0, False: 135k]
  |  |  ------------------
  ------------------
 6549|   135k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|   135k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|   135k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|   135k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|   135k|    const auto begin_before_fill = begin;
 6559|   135k|    begin += potential_fill_len;
 6560|       |
 6561|   135k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 996, False: 134k]
  ------------------
 6562|    996|        return begin_before_fill;
 6563|    996|    }
 6564|       |
 6565|   134k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|   134k|    const auto begin_after_fill = begin;
 6567|   134k|    ++begin;
 6568|       |
 6569|   134k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 134k, False: 0]
  ------------------
 6570|   134k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 134k]
  |  |  ------------------
  ------------------
 6571|     42|            handler.on_error("Invalid fill character '{' in format string");
 6572|     42|            return begin;
 6573|     42|        }
 6574|   134k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 3.31k, False: 131k]
  ------------------
 6575|  3.31k|            return begin_before_fill;
 6576|  3.31k|        }
 6577|   134k|    }
 6578|       |
 6579|   131k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 130k, False: 940]
  ------------------
 6580|   130k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 1.32k, False: 128k]
  ------------------
 6581|  1.32k|            handler.on_align(potential_align_on_fill);
 6582|  1.32k|            return begin_after_fill;
 6583|  1.32k|        }
 6584|   128k|        return begin_before_fill;
 6585|   130k|    }
 6586|       |
 6587|    940|    handler.on_fill(potential_fill);
 6588|    940|    handler.on_align(potential_align_after_fill);
 6589|    940|    return begin;
 6590|   131k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6513|   135k|{
 6514|   135k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   135k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   135k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6515|   135k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6515:19): [Folded - Ignored]
  ------------------
 6516|   135k|        return 1;
 6517|   135k|    }
 6518|   135k|    else {
 6519|   135k|        const auto lengths =
 6520|   135k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6521|   135k|            "\3\4";
 6522|   135k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6523|   135k|        return len;
 6524|   135k|    }
 6525|   135k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6534|   270k|    auto check_align = [](wchar_t ch) {
 6535|   270k|        switch (ch) {
 6536|  1.01k|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 1.01k, False: 269k]
  ------------------
 6537|  1.01k|                return align_type::left;
 6538|    326|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 326, False: 269k]
  ------------------
 6539|    326|                return align_type::right;
 6540|  1.82k|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 1.82k, False: 268k]
  ------------------
 6541|  1.82k|                return align_type::center;
 6542|   266k|            default:
  ------------------
  |  Branch (6542:13): [True: 266k, False: 3.16k]
  ------------------
 6543|   266k|                return align_type::none;
 6544|   270k|        }
 6545|   270k|    };
_ZN3scn2v36detail12specs_setter7on_fillIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6267|    940|    {
 6268|    940|        m_specs.fill = fill;
 6269|    940|    }
_ZN3scn2v36detail9fill_typeaSIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6148|    940|    {
 6149|    940|        SCN_EXPECT(!s.empty());
  ------------------
  |  |  924|    940|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    940|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6150|    940|        SCN_EXPECT(s.size() * sizeof(CharT) <= max_size);
  ------------------
  |  |  924|    940|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    940|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6151|    940|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (6151:23): [Folded - Ignored]
  ------------------
 6152|    940|            for (size_t i = 0; i < s.size(); ++i) {
 6153|    940|                SCN_GCC_PUSH
 6154|    940|                SCN_GCC_IGNORE("-Wstringop-overflow")  // false positive
 6155|    940|                m_data[i] = s[i];
 6156|    940|                SCN_GCC_POP
 6157|    940|            }
 6158|    940|            m_size = static_cast<unsigned char>(s.size());
 6159|    940|        }
 6160|    940|        else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (6160:28): [Folded - Ignored]
  ------------------
 6161|    940|            m_data[0] = static_cast<char>(static_cast<unsigned>(s.front()));
 6162|    940|            m_data[1] =
 6163|    940|                static_cast<char>(static_cast<unsigned>(s.front()) >> 8);
 6164|    940|            if (s.size() == 1) {
 6165|    940|                return;
 6166|    940|            }
 6167|    940|            m_data[2] = static_cast<char>(static_cast<unsigned>(s[1]));
 6168|    940|            m_data[3] = static_cast<char>(static_cast<unsigned>(s[1]) >> 8);
 6169|    940|        }
 6170|    940|        else {
 6171|    940|            const auto front = static_cast<unsigned>(s.front());
 6172|    940|            m_data[0] = static_cast<char>(front);
 6173|    940|            m_data[1] = static_cast<char>(front >> 8);
 6174|    940|            m_data[2] = static_cast<char>(front >> 16);
 6175|    940|            m_data[3] = static_cast<char>(front >> 24);
 6176|    940|        }
 6177|    940|    }
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6596|   135k|{
 6597|   135k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   135k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   135k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|   135k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 127k, False: 7.98k]
  |  Branch (6599:33): [True: 45.7k, False: 81.7k]
  ------------------
 6600|  45.7k|        int width = parse_simple_int(begin, end);
 6601|  45.7k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  45.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 45.7k, False: 0]
  |  |  ------------------
  ------------------
 6602|  45.7k|            handler.on_width(width);
 6603|  45.7k|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|  45.7k|    }
 6609|   135k|    return begin;
 6610|   135k|}
impl.cpp:_ZN3scn2v36detail15parse_precisionIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6616|  3.52k|{
 6617|  3.52k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  3.52k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.52k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6618|       |
 6619|  3.52k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6619:9): [True: 3.48k, False: 34]
  |  Branch (6619:33): [True: 3.43k, False: 52]
  ------------------
 6620|  3.43k|        int prec = parse_simple_int(begin, end);
 6621|  3.43k|        if (SCN_LIKELY(prec != -1)) {
  ------------------
  |  |  858|  3.43k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.43k, False: 0]
  |  |  ------------------
  ------------------
 6622|  3.43k|            handler.on_precision(prec);
 6623|  3.43k|        }
 6624|      0|        else {
 6625|      0|            handler.on_error("Invalid field precision");
 6626|      0|            return begin;
 6627|      0|        }
 6628|  3.43k|    }
 6629|  3.52k|    return begin;
 6630|  3.52k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7126|    616|    {
 7127|    616|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|    616|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 556, False: 60]
  ------------------
 7129|    616|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 496, False: 60]
  ------------------
 7130|    616|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 436, False: 60]
  ------------------
 7131|    616|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 376, False: 60]
  ------------------
 7132|    376|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|    376|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|    376|        }
 7137|       |
 7138|    240|        Handler::on_localized();
 7139|    240|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  56.0k|{
 8417|  56.0k|#define SCN_VISIT(Type)                                         \
 8418|  56.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  56.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  56.0k|    }                                                           \
 8421|  56.0k|    else {                                                      \
 8422|  56.0k|        return vis(monostate_val);                              \
 8423|  56.0k|    }
 8424|       |
 8425|  56.0k|    monostate monostate_val{};
 8426|       |
 8427|  56.0k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 56.0k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 56.0k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|  6.26k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 6.26k, False: 49.8k]
  ------------------
 8433|  6.26k|            SCN_VISIT(int);
  ------------------
  |  | 8418|  6.26k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  6.26k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  6.26k|    }                                                           \
  |  | 8421|  6.26k|    else {                                                      \
  |  | 8422|  6.26k|        return vis(monostate_val);                              \
  |  | 8423|  6.26k|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 56.0k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 56.0k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 56.0k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 56.0k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|  6.26k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 6.26k, False: 49.8k]
  ------------------
 8443|  6.26k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|  6.26k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  6.26k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  6.26k|    }                                                           \
  |  | 8421|  6.26k|    else {                                                      \
  |  | 8422|  6.26k|        return vis(monostate_val);                              \
  |  | 8423|  6.26k|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 56.0k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 56.0k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|  6.20k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 6.20k, False: 49.8k]
  ------------------
 8449|  6.20k|            SCN_VISIT(void*);
  ------------------
  |  | 8418|  6.20k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  6.20k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  6.20k|    }                                                           \
  |  | 8421|  6.20k|    else {                                                      \
  |  | 8422|  6.20k|        return vis(monostate_val);                              \
  |  | 8423|  6.20k|    }
  ------------------
 8450|  6.26k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 6.26k, False: 49.8k]
  ------------------
 8451|  6.26k|            SCN_VISIT(bool);
  ------------------
  |  | 8418|  6.26k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  6.26k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  6.26k|    }                                                           \
  |  | 8421|  6.26k|    else {                                                      \
  |  | 8422|  6.26k|        return vis(monostate_val);                              \
  |  | 8423|  6.26k|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 56.0k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|  6.20k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 6.20k, False: 49.8k]
  ------------------
 8455|  6.20k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|  6.20k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  6.20k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  6.20k|    }                                                           \
  |  | 8421|  6.20k|    else {                                                      \
  |  | 8422|  6.20k|        return vis(monostate_val);                              \
  |  | 8423|  6.20k|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 56.0k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 56.0k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|  6.26k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 6.26k, False: 49.8k]
  ------------------
 8461|  6.26k|            SCN_VISIT(double);
  ------------------
  |  | 8418|  6.26k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  6.26k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  6.26k|    }                                                           \
  |  | 8421|  6.26k|    else {                                                      \
  |  | 8422|  6.26k|        return vis(monostate_val);                              \
  |  | 8423|  6.26k|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 56.0k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 56.0k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|  6.20k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 6.20k, False: 49.8k]
  ------------------
 8467|  6.20k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|  6.20k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  6.20k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  6.20k|    }                                                           \
  |  | 8421|  6.20k|    else {                                                      \
  |  | 8422|  6.20k|        return vis(monostate_val);                              \
  |  | 8423|  6.20k|    }
  ------------------
 8468|  6.20k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 6.20k, False: 49.8k]
  ------------------
 8469|  6.20k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|  6.20k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  6.20k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  6.20k|    }                                                           \
  |  | 8421|  6.20k|    else {                                                      \
  |  | 8422|  6.20k|        return vis(monostate_val);                              \
  |  | 8423|  6.20k|    }
  ------------------
 8470|  6.20k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 6.20k, False: 49.8k]
  ------------------
 8471|  6.20k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|  6.20k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  6.20k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  6.20k|    }                                                           \
  |  | 8421|  6.20k|    else {                                                      \
  |  | 8422|  6.20k|        return vis(monostate_val);                              \
  |  | 8423|  6.20k|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 56.0k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 56.0k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 56.0k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 56.0k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 56.0k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  56.0k|            SCN_CLANG_POP
 8495|  56.0k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE5beginEv:
 3329|  4.88k|    {
 3330|  4.88k|        return m_iterator;
 3331|  4.88k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISH_vEEOT_:
 1429|  1.22k|    {
 1430|  1.22k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  436|  1.22k|    {
  437|  1.22k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.22k|    {
 1177|  1.22k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE3endEv:
 3333|  2.44k|    {
 3334|  2.44k|        return m_sentinel;
 3335|  2.44k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEEC2ISG_LPv0EEET_SJ_:
 3315|  2.44k|    {
 3316|  2.44k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9has_valueEv:
  484|  2.44k|    {
  485|  2.44k|        return m_has_value;
  486|  2.44k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5valueISH_LPv0EEERT_v:
 1626|  1.22k|    {
 1627|  1.22k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.22k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.22k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.22k|        return this->get_value();
 1629|  1.22k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9get_valueEv:
  450|  1.22k|    {
  451|  1.22k|        return m_value;
  452|  1.22k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESI_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSO_:
 1836|  1.22k|    {
 1837|  1.22k|        return detail::transform_error_impl(std::move(*this),
 1838|  1.22k|                                            std::forward<F>(f));
 1839|  1.22k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS6_IPKwS8_EENS4_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEE8sentinelILb1EEEEENS4_9eof_errorEEERFNS0_10scan_errorESK_ELPv0ESM_EEDaOT_OT0_:
 1322|  1.22k|{
 1323|  1.22k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.22k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.22k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.22k|            return result(*std::forward<Exp>(exp));
 1327|  1.22k|        }
 1328|       |
 1329|  1.22k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.22k|        return result(unexpect, monostate{});
 1331|  1.22k|    }
 1332|  1.22k|    else {
 1333|  1.22k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.22k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.22k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.22k, False: 0]
  |  |  ------------------
  ------------------
 1335|  1.22k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.22k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  1.22k|    }
 1340|  1.22k|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_LPv0EEEOT_v:
 1662|  1.22k|    {
 1663|  1.22k|        return std::move(value());
 1664|  1.22k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|  1.22k|    {
 1430|  1.22k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  436|  1.22k|    {
  437|  1.22k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.22k|    {
 1177|  1.22k|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEcvbEv:
 1597|  1.22k|    {
 1598|  1.22k|        return has_value();
 1599|  1.22k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.44k|    {
  485|  2.44k|        return m_has_value;
  486|  2.44k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEdeISH_LPv0EEEOT_v:
 1662|  1.22k|    {
 1663|  1.22k|        return std::move(value());
 1664|  1.22k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1626|  1.22k|    {
 1627|  1.22k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.22k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.22k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.22k|        return this->get_value();
 1629|  1.22k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.22k|    {
  451|  1.22k|        return m_value;
  452|  1.22k|    }

_ZN3scn2v34scanIJwERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  18.9k|{
   89|  18.9k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  18.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  18.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  18.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.9k|    static_cast<    \
  |  |  929|  18.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.9k|    static_cast<    \
  |  |  929|  18.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  18.9k|}
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESE_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEEEOSA_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   170k|{
   44|   170k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   170k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   170k|}
_ZN3scn2v34scanIJwENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  18.9k|{
  127|  18.9k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  18.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  18.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  18.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.9k|    static_cast<    \
  |  |  929|  18.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.9k|    static_cast<    \
  |  |  929|  18.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  18.9k|}
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS2_6localeELPv0EEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT0_OSC_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   170k|{
   60|   170k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   170k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   170k|}
_ZN3scn2v34scanIJiERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  18.9k|{
   89|  18.9k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  18.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  18.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  18.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.9k|    static_cast<    \
  |  |  929|  18.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.9k|    static_cast<    \
  |  |  929|  18.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  18.9k|}
_ZN3scn2v34scanIJiENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  18.9k|{
  127|  18.9k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  18.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  18.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  18.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.9k|    static_cast<    \
  |  |  929|  18.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.9k|    static_cast<    \
  |  |  929|  18.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  18.9k|}
_ZN3scn2v34scanIJjERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  18.9k|{
   89|  18.9k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  18.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  18.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  18.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.9k|    static_cast<    \
  |  |  929|  18.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.9k|    static_cast<    \
  |  |  929|  18.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  18.9k|}
_ZN3scn2v34scanIJjENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  18.9k|{
  127|  18.9k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  18.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  18.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  18.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.9k|    static_cast<    \
  |  |  929|  18.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.9k|    static_cast<    \
  |  |  929|  18.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  18.9k|}
_ZN3scn2v34scanIJdERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  18.9k|{
   89|  18.9k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  18.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  18.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  18.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.9k|    static_cast<    \
  |  |  929|  18.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.9k|    static_cast<    \
  |  |  929|  18.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  18.9k|}
_ZN3scn2v34scanIJdENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  18.9k|{
  127|  18.9k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  18.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  18.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  18.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.9k|    static_cast<    \
  |  |  929|  18.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.9k|    static_cast<    \
  |  |  929|  18.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  18.9k|}
_ZN3scn2v34scanIJbERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  18.9k|{
   89|  18.9k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  18.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  18.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  18.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.9k|    static_cast<    \
  |  |  929|  18.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.9k|    static_cast<    \
  |  |  929|  18.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  18.9k|}
_ZN3scn2v34scanIJbENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  18.9k|{
  127|  18.9k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  18.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  18.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  18.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.9k|    static_cast<    \
  |  |  929|  18.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.9k|    static_cast<    \
  |  |  929|  18.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  18.9k|}
_ZN3scn2v34scanIJPvERNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEELS2_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  18.9k|{
   89|  18.9k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  18.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  18.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  18.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.9k|    static_cast<    \
  |  |  929|  18.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.9k|    static_cast<    \
  |  |  929|  18.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  18.9k|}
_ZN3scn2v34scanIJPvENSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEELS2_0ELS2_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  18.9k|{
  127|  18.9k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  18.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  18.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  18.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.9k|    static_cast<    \
  |  |  929|  18.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.9k|    static_cast<    \
  |  |  929|  18.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  18.9k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEERNS2_17basic_string_viewIwNS4_IwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNSM_13type_identityISH_E4typeEJDpNSY_ISS_E4typeEEEE:
   88|  18.9k|{
   89|  18.9k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  18.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  18.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  18.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.9k|    static_cast<    \
  |  |  929|  18.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.9k|    static_cast<    \
  |  |  929|  18.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  18.9k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeERNS2_17basic_string_viewIwNS4_IwEEEELPv0ELSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNSN_13type_identityISI_E4typeEJDpNS12_IST_E4typeEEEE:
  126|  18.9k|{
  127|  18.9k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  18.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  18.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  18.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.9k|    static_cast<    \
  |  |  929|  18.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.9k|    static_cast<    \
  |  |  929|  18.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  18.9k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEERNS2_17basic_string_viewIwS5_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSL_13type_identityISG_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  18.9k|{
   89|  18.9k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  18.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  18.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  18.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.9k|    static_cast<    \
  |  |  929|  18.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.9k|    static_cast<    \
  |  |  929|  18.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  18.9k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeERNS2_17basic_string_viewIwS5_EELPv0ELSD_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSM_13type_identityISH_E4typeEJDpNS11_ISS_E4typeEEEE:
  126|  18.9k|{
  127|  18.9k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  18.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  18.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  18.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.9k|    static_cast<    \
  |  |  929|  18.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.9k|    static_cast<    \
  |  |  929|  18.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  18.9k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEERS6_LPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  18.9k|{
   89|  18.9k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  18.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  18.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  18.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.9k|    static_cast<    \
  |  |  929|  18.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.9k|    static_cast<    \
  |  |  929|  18.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  18.9k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS2_6localeERS6_LPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  18.9k|{
  127|  18.9k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  18.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  18.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  18.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.9k|    static_cast<    \
  |  |  929|  18.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  18.9k|    static_cast<    \
  |  |  929|  18.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  18.9k|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  652|   256k|{
  653|   256k|    static_assert(std::is_same_v<Locale, std::locale>);
  654|   256k|}
_ZNK3scn2v36detail10locale_ref3getINSt3__16localeEEET_v:
  658|    252|{
  659|    252|    static_assert(std::is_same_v<Locale, std::locale>);
  660|    252|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (660:12): [True: 126, False: 126]
  ------------------
  661|    252|                    : std::locale{};
  662|    252|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|    972|{
 1221|    972|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|    972|                                  m_nan_payload_buffer, value);
 1223|    972|    value = this->setsign(value);
 1224|    972|    return n;
 1225|    972|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|  19.9k|{
 1221|  19.9k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  19.9k|                                  m_nan_payload_buffer, value);
 1223|  19.9k|    value = this->setsign(value);
 1224|  19.9k|    return n;
 1225|  19.9k|}
_ZN3scn2v34impl19parse_integer_valueIcaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|     20|{
 1461|     20|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|     20|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     20|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|     20|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|     20|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     20|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|     20|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|     20|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     20|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|     20|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|     20|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     20|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|     20|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 20, False: 0]
  ------------------
 1467|     20|        SCN_UNLIKELY_ATTR
 1468|     20|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|     20|                                     "Invalid integer value");
 1470|     20|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIciEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    950|{
 1461|    950|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    950|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    950|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    950|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    950|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    950|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    950|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    950|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    950|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    950|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    950|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    950|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    950|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 950, False: 0]
  ------------------
 1467|    950|        SCN_UNLIKELY_ATTR
 1468|    950|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    950|                                     "Invalid integer value");
 1470|    950|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIwiEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|  19.9k|{
 1461|  19.9k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  19.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|  19.9k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  19.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  19.9k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  19.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  19.9k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  19.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|  19.9k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 19.9k, False: 0]
  ------------------
 1467|  19.9k|        SCN_UNLIKELY_ATTR
 1468|  19.9k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  19.9k|                                     "Invalid integer value");
 1470|  19.9k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIcjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    950|{
 1461|    950|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    950|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    950|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    950|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    950|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    950|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    950|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    950|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    950|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    950|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    950|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    950|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    950|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 950, False: 0]
  ------------------
 1467|    950|        SCN_UNLIKELY_ATTR
 1468|    950|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    950|                                     "Invalid integer value");
 1470|    950|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIwjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|  19.9k|{
 1461|  19.9k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  19.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|  19.9k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  19.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  19.9k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  19.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  19.9k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  19.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|  19.9k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 19.9k, False: 0]
  ------------------
 1467|  19.9k|        SCN_UNLIKELY_ATTR
 1468|  19.9k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  19.9k|                                     "Invalid integer value");
 1470|  19.9k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIcmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    934|{
 1461|    934|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    934|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    934|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    934|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    934|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    934|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    934|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    934|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    934|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    934|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    934|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    934|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    934|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 934, False: 0]
  ------------------
 1467|    934|        SCN_UNLIKELY_ATTR
 1468|    934|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    934|                                     "Invalid integer value");
 1470|    934|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIwmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|  19.9k|{
 1461|  19.9k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  19.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|  19.9k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  19.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  19.9k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  19.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  19.9k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  19.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|  19.9k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 19.9k, False: 0]
  ------------------
 1467|  19.9k|        SCN_UNLIKELY_ATTR
 1468|  19.9k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  19.9k|                                     "Invalid integer value");
 1470|  19.9k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2183|  85.4k|{
 2184|  85.4k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2185|  85.4k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2207|   170k|{
 2208|   170k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2209|   170k|}
_ZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  193|  3.99k|{
  194|  3.99k|    return find_classic_impl(
  195|  3.99k|        source, [](char ch) { return is_ascii_space(ch); },
  196|  3.99k|        [](char32_t cp) { return is_cp_space(cp); });
  197|  3.99k|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  201|  26.5k|{
  202|  26.5k|    return find_classic_impl(
  203|  26.5k|        source, [](char ch) { return !is_ascii_space(ch); },
  204|  26.5k|        [](char32_t cp) { return !is_cp_space(cp); });
  205|  26.5k|}
_ZN3scn2v36detail12handle_errorENS0_10scan_errorE:
  672|    284|{
  673|    284|    return e;
  674|    284|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2140|  85.4k|{
 2141|  85.4k|    return vscan_internal(source, format, args);
 2142|  85.4k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2160|   170k|{
 2161|   170k|    return vscan_internal(source, format, args);
 2162|   170k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  3.99k|{
  118|  3.99k|    auto it = source.begin();
  119|       |
  120|  21.6k|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 18.4k, False: 3.18k]
  ------------------
  121|  18.4k|        auto sv =
  122|  18.4k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  18.4k|                .substr(0, 8);
  124|       |
  125|  18.4k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 5.37k, False: 13.1k]
  ------------------
  126|  5.37k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  5.37k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  5.37k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 486, False: 4.88k]
  ------------------
  129|    486|                break;
  130|    486|            }
  131|  4.88k|            continue;
  132|  5.37k|        }
  133|       |
  134|  54.9k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 42.1k, False: 12.8k]
  ------------------
  135|  42.1k|            auto tmp =
  136|  42.1k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|  42.1k|            auto res = get_next_code_point(tmp);
  138|  42.1k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 324, False: 41.8k]
  ------------------
  139|    324|                return it;
  140|    324|            }
  141|  41.8k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  41.8k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  41.8k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  41.8k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  41.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  41.8k|        }
  145|  13.1k|    }
  146|       |
  147|  3.67k|    return detail::make_string_view_iterator(source, it);
  148|  3.99k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  104|  49.9k|{
  105|  49.9k|    static_assert(sizeof(*source.data()) == 1);
  106|  49.9k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|  49.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  49.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  107|  49.9k|    uint64_t word{};
  108|  49.9k|    std::memcpy(&word, source.data(), source.size());
  109|       |
  110|  49.9k|    return has_byte_greater(word, 127) != 0;
  111|  49.9k|}
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  195|  36.0k|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  196|  42.1k|        [](char32_t cp) { return is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  26.5k|{
  118|  26.5k|    auto it = source.begin();
  119|       |
  120|  39.2k|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 31.4k, False: 7.80k]
  ------------------
  121|  31.4k|        auto sv =
  122|  31.4k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  31.4k|                .substr(0, 8);
  124|       |
  125|  31.4k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 15.7k, False: 15.6k]
  ------------------
  126|  15.7k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  15.7k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  15.7k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 11.1k, False: 4.66k]
  ------------------
  129|  11.1k|                break;
  130|  11.1k|            }
  131|  4.66k|            continue;
  132|  15.7k|        }
  133|       |
  134|  43.6k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 35.5k, False: 8.02k]
  ------------------
  135|  35.5k|            auto tmp =
  136|  35.5k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|  35.5k|            auto res = get_next_code_point(tmp);
  138|  35.5k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 7.63k, False: 27.9k]
  ------------------
  139|  7.63k|                return it;
  140|  7.63k|            }
  141|  27.9k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  27.9k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  27.9k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  27.9k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  27.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  27.9k|        }
  145|  15.6k|    }
  146|       |
  147|  18.9k|    return detail::make_string_view_iterator(source, it);
  148|  26.5k|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  203|  43.5k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  204|  35.5k|        [](char32_t cp) { return !is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|    972|{
 1138|    972|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 972]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|    972|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 972]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|    972|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 972]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|    972|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 972]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|    972|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|    972|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    972|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|    972|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 36, False: 936]
  ------------------
 1185|     36|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|     36|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 36, False: 0]
  |  |  ------------------
  ------------------
 1186|     36|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|     36|                                         "Invalid floating-point digit");
 1188|     36|        }
 1189|     36|    }
 1190|    936|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|    936|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 936, False: 0]
  |  |  ------------------
  ------------------
 1191|    936|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|    936|                                     "Invalid floating-point digit");
 1193|    936|    }
 1194|       |
 1195|      0|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|      0|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|      0|            double tmp{};
 1200|      0|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|      0|            value = tmp;
 1202|      0|            return ret;
 1203|      0|        }
 1204|      0|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|      0|            return fast_float_fallback(data, value);
 1208|      0|        }
 1209|      0|    }
 1210|      0|    else {
 1211|       |        // Default to fast_float
 1212|      0|        return fast_float_impl<CharT, T>{data}(value);
 1213|      0|    }
 1214|      0|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  19.9k|{
 1138|  19.9k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 19.9k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|  19.9k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 19.9k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|  19.9k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 19.9k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|  19.9k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 19.9k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|  19.9k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  19.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  19.9k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 14, False: 19.9k]
  ------------------
 1185|     14|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14, False: 0]
  |  |  ------------------
  ------------------
 1186|     14|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|     14|                                         "Invalid floating-point digit");
 1188|     14|        }
 1189|     14|    }
 1190|  19.9k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  19.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.9k, False: 0]
  |  |  ------------------
  ------------------
 1191|  19.9k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  19.9k|                                     "Invalid floating-point digit");
 1193|  19.9k|    }
 1194|       |
 1195|      0|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|      0|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|      0|            double tmp{};
 1200|      0|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|      0|            value = tmp;
 1202|      0|            return ret;
 1203|      0|        }
 1204|      0|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|      0|            return fast_float_fallback(data, value);
 1208|      0|        }
 1209|      0|    }
 1210|      0|    else {
 1211|       |        // Default to fast_float
 1212|      0|        return fast_float_impl<CharT, T>{data}(value);
 1213|      0|    }
 1214|      0|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   170k|{
 1625|   170k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 170k, False: 396]
  ------------------
 1626|   170k|        return false;
 1627|   170k|    }
 1628|    396|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 126, False: 270]
  |  Branch (1628:39): [True: 18, False: 108]
  ------------------
 1629|   170k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1902|   170k|    {
 1903|   170k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1721|   512k|    {
 1722|   512k|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|   512k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 512k]
  |  |  ------------------
  ------------------
 1723|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1724|      0|        }
 1725|   512k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1852|   170k|    {
 1853|   170k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   170k|{
 2038|   170k|    const auto beg = handler.get_ctx().begin();
 2039|   170k|    detail::parse_format_string<false>(format, handler);
 2040|   170k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   170k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 167k, False: 3.33k]
  |  |  ------------------
  ------------------
 2041|   167k|        return unexpected(handler.error);
 2042|   167k|    }
 2043|  3.33k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   170k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2021|   805k|    {
 2022|   805k|        return ctx.get();
 2023|   805k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1856|   805k|    {
 1857|   805k|        return contiguous_ctx;
 1858|   805k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1906|   191k|    {
 1907|   255k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 71.1k, False: 184k]
  ------------------
 1908|  71.1k|            auto it = get_ctx().begin();
 1909|  71.1k|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 1.11k, False: 70.0k]
  ------------------
 1910|  1.11k|                SCN_UNLIKELY_ATTR
 1911|  1.11k|                return on_error("Unexpected end of source");
 1912|  1.11k|            }
 1913|       |
 1914|  70.0k|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|  70.0k|                    detail::make_string_view_from_pointers(begin, end));
 1916|  70.0k|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 3.43k, False: 66.6k]
  ------------------
 1917|  3.43k|                SCN_UNLIKELY_ATTR
 1918|  3.43k|                return on_error("Invalid encoding in format string");
 1919|  3.43k|            }
 1920|  66.6k|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 7.78k, False: 58.8k]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|  7.78k|                get_ctx().advance_to(
 1923|  7.78k|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|  7.78k|                auto begin_it = impl::read_while_classic_space(
 1926|  7.78k|                    detail::make_string_view_from_pointers(
 1927|  7.78k|                        detail::to_address(after_space_it),
 1928|  7.78k|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|  7.78k|                begin = detail::to_address(begin_it) - 1;
 1931|  7.78k|                continue;
 1932|  7.78k|            }
 1933|       |
 1934|  58.8k|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 2.06k, False: 56.7k]
  ------------------
 1935|  2.06k|                SCN_UNLIKELY_ATTR
 1936|  2.06k|                return on_error("Unexpected literal character in source");
 1937|  2.06k|            }
 1938|  56.7k|            get_ctx().advance_to(ranges::next(it));
 1939|  56.7k|        }
 1940|   191k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE20on_replacement_fieldEmPKc:
 1971|  6.49k|    {
 1972|  6.49k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1973|  6.49k|        set_arg_as_visited(arg_id);
 1974|       |
 1975|  6.49k|        on_visit_scan_arg(
 1976|  6.49k|            impl::default_arg_reader<context_type>{
 1977|  6.49k|                get_ctx().range(), get_ctx().args(), get_ctx().locale()},
 1978|  6.49k|            arg);
 1979|  6.49k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   104k|{
 1681|   104k|    auto arg = ctx.arg(id);
 1682|   104k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   104k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.55k, False: 102k]
  |  |  ------------------
  ------------------
 1683|  1.55k|        handler.on_error("Failed to find argument with ID");
 1684|  1.55k|    }
 1685|   104k|    return arg;
 1686|   104k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1796|   415k|    {
 1797|   415k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|   415k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 78.8k, False: 336k]
  |  |  ------------------
  ------------------
 1798|  78.8k|            on_error("Invalid out-of-range argument ID");
 1799|  78.8k|            return;
 1800|  78.8k|        }
 1801|       |
 1802|   336k|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|   336k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 142, False: 336k]
  |  |  ------------------
  ------------------
 1803|    142|            return on_error("Argument with this ID has already been scanned");
 1804|    142|        }
 1805|       |
 1806|   336k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|   336k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 336k, False: 0]
  |  |  ------------------
  ------------------
 1807|   336k|            visited_args_lower64 |= (1ull << id);
 1808|   336k|            return;
 1809|   336k|        }
 1810|       |
 1811|      0|        id -= 64;
 1812|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1813|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1781|   336k|    {
 1782|   336k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|   336k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 336k]
  |  |  ------------------
  ------------------
 1783|      0|            on_error("Invalid out-of-range argument ID");
 1784|      0|            return false;
 1785|      0|        }
 1786|       |
 1787|   336k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|   336k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 336k, False: 0]
  |  |  ------------------
  ------------------
 1788|   336k|            return (visited_args_lower64 >> id) & 1ull;
 1789|   336k|        }
 1790|       |
 1791|      0|        id -= 64;
 1792|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1793|   336k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl18default_arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1955|  6.49k|    {
 1956|  6.49k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 154, False: 6.33k]
  |  Branch (1956:23): [True: 0, False: 6.33k]
  ------------------
 1957|    154|            SCN_UNLIKELY_ATTR
 1958|    154|            return;
 1959|    154|        }
 1960|       |
 1961|  6.33k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  6.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  6.33k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  6.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.49k, False: 1.84k]
  |  |  ------------------
  ------------------
 1963|  4.49k|            on_error(r.error());
 1964|  4.49k|        }
 1965|  1.84k|        else {
 1966|  1.84k|            get_ctx().advance_to(*r);
 1967|  1.84k|        }
 1968|  6.33k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1765|   242k|    {
 1766|   242k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|   242k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 242k, False: 0]
  |  |  ------------------
  ------------------
 1767|   242k|            error = err;
 1768|   242k|        }
 1769|   242k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1943|  97.6k|    {
 1944|  97.6k|        return parse_ctx.next_arg_id();
 1945|  97.6k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEm:
 1947|  6.47k|    {
 1948|  6.47k|        parse_ctx.check_arg_id(id);
 1949|  6.47k|        return id;
 1950|  6.47k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1984|  97.5k|    {
 1985|  97.5k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|  97.5k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|  97.5k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 97.5k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|  97.5k|        auto specs = detail::format_specs{};
 1998|  97.5k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|  97.5k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|  97.5k|            arg.type()};
 2001|       |
 2002|  97.5k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|  97.5k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 2.78k, False: 94.7k]
  |  Branch (2003:29): [True: 1.18k, False: 93.5k]
  ------------------
 2004|  3.96k|            SCN_UNLIKELY_ATTR
 2005|  3.96k|            on_error("Missing '}' in format string");
 2006|  3.96k|            return parse_ctx.begin();
 2007|  3.96k|        }
 2008|  93.5k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  93.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 390, False: 93.1k]
  |  |  ------------------
  ------------------
 2009|    390|            return parse_ctx.begin();
 2010|    390|        }
 2011|  93.1k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|  93.1k|        on_visit_scan_arg(
 2014|  93.1k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|  93.1k|                                           get_ctx().locale()},
 2016|  93.1k|            arg);
 2017|  93.1k|        return parse_ctx.begin();
 2018|  93.5k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1700|  97.5k|    {
 1701|  97.5k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1955|  93.1k|    {
 1956|  93.1k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 116, False: 93.0k]
  |  Branch (1956:23): [True: 0, False: 93.0k]
  ------------------
 1957|    116|            SCN_UNLIKELY_ATTR
 1958|    116|            return;
 1959|    116|        }
 1960|       |
 1961|  93.0k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  93.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  93.0k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  93.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 85.7k, False: 7.30k]
  |  |  ------------------
  ------------------
 1963|  85.7k|            on_error(r.error());
 1964|  85.7k|        }
 1965|  7.30k|        else {
 1966|  7.30k|            get_ctx().advance_to(*r);
 1967|  7.30k|        }
 1968|  93.0k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorEPKc:
 1760|   692k|    {
 1761|   692k|        SCN_UNLIKELY_ATTR
 1762|   692k|        error = scan_error{scan_error::invalid_format_string, msg};
 1763|   692k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1728|   512k|    {
 1729|   512k|        {
 1730|   512k|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1730:45): [True: 0, False: 512k]
  ------------------
 1731|   512k|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1731:35): [True: 0, False: 512k]
  ------------------
 1732|   512k|                                      ? std::numeric_limits<uint64_t>::max()
 1733|   512k|                                      : (1ull << args_count_lower64) - 1;
 1734|       |
 1735|   512k|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1735:17): [True: 175k, False: 336k]
  ------------------
 1736|   175k|                return on_error("Argument list not exhausted");
 1737|   175k|            }
 1738|   512k|        }
 1739|       |
 1740|   336k|        if (args_count < 64) {
  ------------------
  |  Branch (1740:13): [True: 336k, False: 0]
  ------------------
 1741|   336k|            return;
 1742|   336k|        }
 1743|       |
 1744|      0|        auto last_args_count = args_count - 64;
 1745|      0|        for (auto it = visited_args_upper.begin();
 1746|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1746:14): [True: 0, False: 0]
  ------------------
 1747|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1747:17): [True: 0, False: 0]
  ------------------
 1748|      0|                return on_error("Argument list not exhausted");
 1749|      0|            }
 1750|      0|            last_args_count -= 8;
 1751|      0|        }
 1752|       |
 1753|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1754|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1754:13): [True: 0, False: 0]
  ------------------
 1755|      0|            return on_error("Argument list not exhausted");
 1756|      0|        }
 1757|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1776|   512k|    {
 1777|   512k|        return error;
 1778|   512k|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1772|  1.40M|    {
 1773|  1.40M|        return static_cast<bool>(error);
 1774|  1.40M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|   170k|{
 2053|   170k|    const auto argcount = args.size();
 2054|   170k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 18, False: 170k]
  |  Branch (2054:60): [True: 18, False: 0]
  ------------------
 2055|     18|        auto arg = args.get(0);
 2056|     18|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|     18|    }
 2058|       |
 2059|   170k|    auto handler = format_handler<true, CharT>{
 2060|   170k|        ranges::subrange<const CharT*>{source.data(),
 2061|   170k|                                       source.data() + source.size()},
 2062|   170k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   170k|    static_cast<    \
  |  |  929|   170k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   170k|    static_cast<    \
  |  |  929|   170k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   170k|    return vscan_parse_format_string(format, handler);
 2064|   170k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|     18|{
 1638|     18|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|     18|    auto reader =
 1644|     18|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|     18|            ranges::subrange<const CharT*>{source.data(),
 1646|     18|                                           source.data() + source.size()},
 1647|     18|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|     18|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     10|    }                                                  \
  |  |  |  | 3671|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|      8|    return ranges::distance(source.data(), it);
 1650|     18|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|   341k|{
 2053|   341k|    const auto argcount = args.size();
 2054|   341k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 18, False: 341k]
  |  Branch (2054:60): [True: 18, False: 0]
  ------------------
 2055|     18|        auto arg = args.get(0);
 2056|     18|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|     18|    }
 2058|       |
 2059|   341k|    auto handler = format_handler<true, CharT>{
 2060|   341k|        ranges::subrange<const CharT*>{source.data(),
 2061|   341k|                                       source.data() + source.size()},
 2062|   341k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   341k|    static_cast<    \
  |  |  929|   341k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   341k|    static_cast<    \
  |  |  929|   341k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   341k|    return vscan_parse_format_string(format, handler);
 2064|   341k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   341k|{
 1625|   341k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 330k, False: 11.5k]
  ------------------
 1626|   330k|        return false;
 1627|   330k|    }
 1628|  11.5k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 126, False: 11.4k]
  |  Branch (1628:39): [True: 18, False: 108]
  ------------------
 1629|   341k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|     18|{
 1638|     18|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|     18|    auto reader =
 1644|     18|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|     18|            ranges::subrange<const CharT*>{source.data(),
 1646|     18|                                           source.data() + source.size()},
 1647|     18|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|     18|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     10|    }                                                  \
  |  |  |  | 3671|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|      8|    return ranges::distance(source.data(), it);
 1650|     18|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1902|   341k|    {
 1903|   341k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1852|   341k|    {
 1853|   341k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   341k|{
 2038|   341k|    const auto beg = handler.get_ctx().begin();
 2039|   341k|    detail::parse_format_string<false>(format, handler);
 2040|   341k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   341k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 341k, False: 834]
  |  |  ------------------
  ------------------
 2041|   341k|        return unexpected(handler.error);
 2042|   341k|    }
 2043|    834|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   341k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2021|  2.10G|    {
 2022|  2.10G|        return ctx.get();
 2023|  2.10G|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1856|  2.10G|    {
 1857|  2.10G|        return contiguous_ctx;
 1858|  2.10G|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1906|   440k|    {
 1907|   701M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 701M, False: 237k]
  ------------------
 1908|   701M|            auto it = get_ctx().begin();
 1909|   701M|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 486, False: 701M]
  ------------------
 1910|    486|                SCN_UNLIKELY_ATTR
 1911|    486|                return on_error("Unexpected end of source");
 1912|    486|            }
 1913|       |
 1914|   701M|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|   701M|                    detail::make_string_view_from_pointers(begin, end));
 1916|   701M|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 125k, False: 701M]
  ------------------
 1917|   125k|                SCN_UNLIKELY_ATTR
 1918|   125k|                return on_error("Invalid encoding in format string");
 1919|   125k|            }
 1920|   701M|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 361k, False: 700M]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|   361k|                get_ctx().advance_to(
 1923|   361k|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|   361k|                auto begin_it = impl::read_while_classic_space(
 1926|   361k|                    detail::make_string_view_from_pointers(
 1927|   361k|                        detail::to_address(after_space_it),
 1928|   361k|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|   361k|                begin = detail::to_address(begin_it) - 1;
 1931|   361k|                continue;
 1932|   361k|            }
 1933|       |
 1934|   700M|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 76.7k, False: 700M]
  ------------------
 1935|  76.7k|                SCN_UNLIKELY_ATTR
 1936|  76.7k|                return on_error("Unexpected literal character in source");
 1937|  76.7k|            }
 1938|   700M|            get_ctx().advance_to(ranges::next(it));
 1939|   700M|        }
 1940|   440k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE20on_replacement_fieldEmPKw:
 1971|   176k|    {
 1972|   176k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1973|   176k|        set_arg_as_visited(arg_id);
 1974|       |
 1975|   176k|        on_visit_scan_arg(
 1976|   176k|            impl::default_arg_reader<context_type>{
 1977|   176k|                get_ctx().range(), get_ctx().args(), get_ctx().locale()},
 1978|   176k|            arg);
 1979|   176k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   311k|{
 1681|   311k|    auto arg = ctx.arg(id);
 1682|   311k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   311k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 77.3k, False: 234k]
  |  |  ------------------
  ------------------
 1683|  77.3k|        handler.on_error("Failed to find argument with ID");
 1684|  77.3k|    }
 1685|   311k|    return arg;
 1686|   311k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl18default_arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1955|   176k|    {
 1956|   176k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 158, False: 175k]
  |  Branch (1956:23): [True: 0, False: 175k]
  ------------------
 1957|    158|            SCN_UNLIKELY_ATTR
 1958|    158|            return;
 1959|    158|        }
 1960|       |
 1961|   175k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   175k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   175k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   175k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 98.5k, False: 77.3k]
  |  |  ------------------
  ------------------
 1963|  98.5k|            on_error(r.error());
 1964|  98.5k|        }
 1965|  77.3k|        else {
 1966|  77.3k|            get_ctx().advance_to(*r);
 1967|  77.3k|        }
 1968|   175k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1943|   311k|    {
 1944|   311k|        return parse_ctx.next_arg_id();
 1945|   311k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEm:
 1947|    336|    {
 1948|    336|        parse_ctx.check_arg_id(id);
 1949|    336|        return id;
 1950|    336|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1984|   135k|    {
 1985|   135k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   135k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   135k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 135k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   135k|        auto specs = detail::format_specs{};
 1998|   135k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   135k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   135k|            arg.type()};
 2001|       |
 2002|   135k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   135k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 2.36k, False: 133k]
  |  Branch (2003:29): [True: 862, False: 132k]
  ------------------
 2004|  3.23k|            SCN_UNLIKELY_ATTR
 2005|  3.23k|            on_error("Missing '}' in format string");
 2006|  3.23k|            return parse_ctx.begin();
 2007|  3.23k|        }
 2008|   132k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   132k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 346, False: 132k]
  |  |  ------------------
  ------------------
 2009|    346|            return parse_ctx.begin();
 2010|    346|        }
 2011|   132k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   132k|        on_visit_scan_arg(
 2014|   132k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   132k|                                           get_ctx().locale()},
 2016|   132k|            arg);
 2017|   132k|        return parse_ctx.begin();
 2018|   132k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1700|   135k|    {
 1701|   135k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1955|   132k|    {
 1956|   132k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 76.1k, False: 56.0k]
  |  Branch (1956:23): [True: 0, False: 56.0k]
  ------------------
 1957|  76.1k|            SCN_UNLIKELY_ATTR
 1958|  76.1k|            return;
 1959|  76.1k|        }
 1960|       |
 1961|  56.0k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  56.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  56.0k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  56.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 53.6k, False: 2.37k]
  |  |  ------------------
  ------------------
 1963|  53.6k|            on_error(r.error());
 1964|  53.6k|        }
 1965|  2.37k|        else {
 1966|  2.37k|            get_ctx().advance_to(*r);
 1967|  2.37k|        }
 1968|  56.0k|    }

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1362|  9.49k|{
 1363|  9.49k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1364|       |
 1365|  9.49k|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1365:19): [Folded - Ignored]
  ------------------
 1366|  9.49k|        if constexpr (sizeof(DestCharT) == 2) {
  ------------------
  |  Branch (1366:23): [Folded - Ignored]
  ------------------
 1367|  9.49k|            std::u32string tmp;
 1368|  9.49k|            transcode_to_string_impl_to32(src, tmp);
 1369|  9.49k|            return transcode_to_string_impl_32to16<false>(
 1370|  9.49k|                std::u32string_view{tmp}, dest);
 1371|  9.49k|        }
 1372|  9.49k|        else if constexpr (sizeof(DestCharT) == 4) {
  ------------------
  |  Branch (1372:28): [Folded - Ignored]
  ------------------
 1373|  9.49k|            return transcode_to_string_impl_to32(src, dest);
 1374|  9.49k|        }
 1375|  9.49k|    }
 1376|      0|    else if constexpr (sizeof(SourceCharT) == 2) {
 1377|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1378|      0|            std::u32string tmp;
 1379|      0|            transcode_to_string_impl_to32(src, tmp);
 1380|      0|            return transcode_to_string_impl_32to8<false>(
 1381|      0|                std::u32string_view{tmp}, dest);
 1382|      0|        }
 1383|      0|        else if constexpr (sizeof(DestCharT) == 4) {
 1384|      0|            return trasncode_to_string_impl_to32(src, dest);
 1385|      0|        }
 1386|      0|    }
 1387|      0|    else if constexpr (sizeof(SourceCharT) == 4) {
 1388|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1389|      0|            return transcode_to_string_impl_32to8<false>(src, dest);
 1390|      0|        }
 1391|      0|        else if constexpr (sizeof(DestCharT) == 2) {
 1392|      0|            return transcode_to_string_impl_32to16<false>(src, dest);
 1393|      0|        }
 1394|      0|    }
 1395|       |
 1396|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1397|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1398|      0|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1255|  9.49k|{
 1256|  9.49k|    static_assert(sizeof(DestCharT) == 4);
 1257|       |
 1258|  9.49k|    auto it = src.begin();
 1259|  2.71M|    while (it != src.end()) {
  ------------------
  |  Branch (1259:12): [True: 2.70M, False: 9.49k]
  ------------------
 1260|  2.70M|        auto res = get_next_code_point(
 1261|  2.70M|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1262|  2.70M|                                                                 src.end()));
 1263|  2.70M|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|  2.70M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 78.4k, False: 2.62M]
  |  |  ------------------
  ------------------
 1264|  78.4k|            dest.push_back(DestCharT{0xfffd});
 1265|  78.4k|        }
 1266|  2.62M|        else {
 1267|  2.62M|            dest.push_back(res.value);
 1268|  2.62M|        }
 1269|  2.70M|        it = detail::make_string_view_iterator(src, res.iterator);
 1270|  2.70M|    }
 1271|  9.49k|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|  2.93M|{
 1169|  2.93M|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|  2.93M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.93M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|  2.93M|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|  2.93M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  2.93M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 59.8k, False: 2.87M]
  |  |  ------------------
  ------------------
 1173|  59.8k|        return {get_start_for_next_code_point(input),
 1174|  59.8k|                detail::invalid_code_point};
 1175|  59.8k|    }
 1176|  2.87M|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|  2.87M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.28k, False: 2.87M]
  |  |  ------------------
  ------------------
 1177|  1.28k|        return {input.end(), detail::invalid_code_point};
 1178|  1.28k|    }
 1179|       |
 1180|  2.87M|    return {input.begin() + len,
 1181|  2.87M|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|  2.87M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  59.8k|{
 1155|  59.8k|    auto it = input.begin();
 1156|   341k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 339k, False: 1.61k]
  ------------------
 1157|   339k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 58.1k, False: 281k]
  ------------------
 1158|  58.1k|            break;
 1159|  58.1k|        }
 1160|   339k|    }
 1161|  59.8k|    return it;
 1162|  59.8k|}
_ZN3scn2v34impl11parse_errorC2ENS2_4codeE:
  808|   394k|    {
  809|   394k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|   394k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|   394k|    }
_ZN3scn2v34impleqENS1_11parse_errorES2_:
  822|   133k|    {
  823|   133k|        return a.m_code == b.m_code;
  824|   133k|    }
_ZN3scn2v34impl20reader_error_handler8on_errorEPKc:
 2930|  92.6k|    {
 2931|  92.6k|        SCN_UNLIKELY_ATTR
 2932|  92.6k|        m_msg = msg;
 2933|  92.6k|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2935|   149k|    {
 2936|   149k|        return m_msg == nullptr;
 2937|   149k|    }
_ZN3scn2v34impl17float_reader_baseC2Ej:
 3644|  1.24k|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl22nonascii_specs_handler17on_charset_singleEDi:
 4989|  1.11M|    {
 4990|  1.11M|        on_charset_range(cp, cp + 1);
 4991|  1.11M|    }
_ZN3scn2v34impl22nonascii_specs_handler16on_charset_rangeEDiDi:
 4994|  1.11M|    {
 4995|  1.11M|        if (end <= 127) {
  ------------------
  |  Branch (4995:13): [True: 685k, False: 432k]
  ------------------
 4996|   685k|            return;
 4997|   685k|        }
 4998|       |
 4999|  90.0M|        for (auto& elem : extra_ranges) {
  ------------------
  |  Branch (4999:25): [True: 90.0M, False: 427k]
  ------------------
 5000|       |            // TODO: check for overlap
 5001|  90.0M|            if (elem.first == end) {
  ------------------
  |  Branch (5001:17): [True: 192, False: 90.0M]
  ------------------
 5002|    192|                elem.first = begin;
 5003|    192|                return;
 5004|    192|            }
 5005|       |
 5006|  90.0M|            if (elem.second == begin) {
  ------------------
  |  Branch (5006:17): [True: 4.09k, False: 90.0M]
  ------------------
 5007|  4.09k|                elem.second = end;
 5008|  4.09k|                return;
 5009|  4.09k|            }
 5010|  90.0M|        }
 5011|       |
 5012|   427k|        extra_ranges.push_back(std::make_pair(begin, end));
 5013|   427k|    }
_ZNK3scn2v34impl22nonascii_specs_handler19on_charset_invertedEv:
 5016|    570|    {
 5017|       |        // no-op
 5018|    570|    }
_ZNK3scn2v34impl22nonascii_specs_handlercvbEv:
 5031|  1.12M|    {
 5032|  1.12M|        return static_cast<bool>(err);
 5033|  1.12M|    }
_ZN3scn2v34impl16bool_reader_baseC2Ej:
 5349|  1.49k|    constexpr bool_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|  79.6k|{
  458|  79.6k|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  79.6k|        static_cast<unsigned char>(ch))];
  460|  79.6k|}
_ZN3scn2v34impl13is_ascii_charEc:
  468|   860k|{
  469|   860k|    return static_cast<unsigned char>(ch) <= 127;
  470|   860k|}
_ZN3scn2v34impl13is_ascii_charEw:
  473|  1.95k|{
  474|  1.95k|#if WCHAR_MIN < 0
  475|  1.95k|    return ch >= 0 && ch <= 127;
  ------------------
  |  Branch (475:12): [True: 1.95k, False: 0]
  |  Branch (475:23): [True: 1.95k, False: 0]
  ------------------
  476|       |#else
  477|       |    return ch <= 127;
  478|       |#endif
  479|  1.95k|}
_ZN3scn2v34impl13is_ascii_charEDi:
  482|   932k|{
  483|   932k|    return cp <= 127;
  484|   932k|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|  49.9k|{
  539|  49.9k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  49.9k|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|   565k|{
  784|   565k|    return e != eof_error::good;
  785|   565k|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|    112|{
  798|    112|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|    112|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    112|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|    112|    return scan_error{scan_error::end_of_range, "EOF"};
  800|    112|}
_ZN3scn2v34impl20make_eof_parse_errorENS1_9eof_errorE:
  844|    744|{
  845|    744|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|    744|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    744|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|    744|    return parse_error::eof;
  847|    744|}
_ZN3scn2v34impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|  23.7k|{
  854|  23.7k|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 23.7k]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|  23.7k|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 88, False: 23.6k]
  ------------------
  859|     88|        return scan_error{scan_error::end_of_range, "EOF"};
  860|     88|    }
  861|       |
  862|  23.6k|    return scan_error{code, msg};
  863|  23.7k|}
_ZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  23.7k|{
  868|  23.7k|    return [code, msg](parse_error err) {
  869|  23.7k|        return make_scan_error_from_parse_error(err, code, msg);
  870|  23.7k|    };
  871|  23.7k|}
_ZN3scn2v34impl11is_cp_spaceEDi:
 1199|   703M|{
 1200|       |    // Pattern_White_Space property
 1201|   703M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (1201:13): [True: 2.86M, False: 700M]
  |  Branch (1201:27): [True: 384k, False: 2.48M]
  ------------------
 1202|   703M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (1202:12): [True: 404k, False: 702M]
  ------------------
 1203|   703M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (1203:12): [True: 9.99k, False: 702M]
  ------------------
 1204|   703M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (1204:12): [True: 1.93k, False: 702M]
  ------------------
 1205|   703M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (1205:12): [True: 8.57k, False: 702M]
  ------------------
 1206|   703M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (1206:12): [True: 1.51k, False: 702M]
  ------------------
 1207|   703M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (1207:12): [True: 110, False: 702M]
  ------------------
 1208|   703M|}
_ZN3scn2v34impl17fast_streq_nocaseEPKcS3_m:
 2219|  3.98k|{
 2220|  3.98k|    unsigned char running_diff{0};
 2221|  13.9k|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2221:24): [True: 9.96k, False: 3.98k]
  ------------------
 2222|  9.96k|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2223|  9.96k|    }
 2224|  3.98k|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2224:12): [True: 0, False: 3.98k]
  |  Branch (2224:33): [True: 0, False: 3.98k]
  ------------------
 2225|  3.98k|}
_ZN3scn2v34impl32calculate_text_width_for_fmt_v10EDi:
 2302|   301k|{
 2303|   301k|    if (cp >= 0x1100 &&
  ------------------
  |  Branch (2303:9): [True: 29.6k, False: 272k]
  ------------------
 2304|   301k|        (cp <= 0x115f ||  // Hangul Jamo init. consonants
  ------------------
  |  Branch (2304:10): [True: 354, False: 29.2k]
  ------------------
 2305|  29.6k|         cp == 0x2329 ||  // LEFT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (2305:10): [True: 72, False: 29.2k]
  ------------------
 2306|  29.6k|         cp == 0x232a ||  // RIGHT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (2306:10): [True: 72, False: 29.1k]
  ------------------
 2307|       |         // CJK ... Yi except IDEOGRAPHIC HALF FILL SPACE:
 2308|  29.6k|         (cp >= 0x2e80 && cp <= 0xa4cf && cp != 0x303f) ||
  ------------------
  |  Branch (2308:11): [True: 23.4k, False: 5.65k]
  |  Branch (2308:27): [True: 4.04k, False: 19.4k]
  |  Branch (2308:43): [True: 3.90k, False: 144]
  ------------------
 2309|  29.6k|         (cp >= 0xac00 && cp <= 0xd7a3) ||    // Hangul Syllables
  ------------------
  |  Branch (2309:11): [True: 19.4k, False: 5.80k]
  |  Branch (2309:27): [True: 274, False: 19.1k]
  ------------------
 2310|  29.6k|         (cp >= 0xf900 && cp <= 0xfaff) ||    // CJK Compatibility Ideographs
  ------------------
  |  Branch (2310:11): [True: 19.0k, False: 5.88k]
  |  Branch (2310:27): [True: 144, False: 18.9k]
  ------------------
 2311|  29.6k|         (cp >= 0xfe10 && cp <= 0xfe19) ||    // Vertical Forms
  ------------------
  |  Branch (2311:11): [True: 18.9k, False: 5.88k]
  |  Branch (2311:27): [True: 90, False: 18.8k]
  ------------------
 2312|  29.6k|         (cp >= 0xfe30 && cp <= 0xfe6f) ||    // CJK Compatibility Forms
  ------------------
  |  Branch (2312:11): [True: 18.8k, False: 5.88k]
  |  Branch (2312:27): [True: 344, False: 18.5k]
  ------------------
 2313|  29.6k|         (cp >= 0xff00 && cp <= 0xff60) ||    // Fullwidth Forms
  ------------------
  |  Branch (2313:11): [True: 18.5k, False: 5.88k]
  |  Branch (2313:27): [True: 108, False: 18.4k]
  ------------------
 2314|  29.6k|         (cp >= 0xffe0 && cp <= 0xffe6) ||    // Fullwidth Forms
  ------------------
  |  Branch (2314:11): [True: 18.4k, False: 5.88k]
  |  Branch (2314:27): [True: 78, False: 18.3k]
  ------------------
 2315|  29.6k|         (cp >= 0x20000 && cp <= 0x2fffd) ||  // CJK
  ------------------
  |  Branch (2315:11): [True: 17.8k, False: 6.41k]
  |  Branch (2315:28): [True: 84, False: 17.7k]
  ------------------
 2316|  29.6k|         (cp >= 0x30000 && cp <= 0x3fffd) ||
  ------------------
  |  Branch (2316:11): [True: 17.7k, False: 6.41k]
  |  Branch (2316:28): [True: 444, False: 17.2k]
  ------------------
 2317|       |         // Miscellaneous Symbols and Pictographs + Emoticons:
 2318|  29.6k|         (cp >= 0x1f300 && cp <= 0x1f64f) ||
  ------------------
  |  Branch (2318:11): [True: 17.4k, False: 6.21k]
  |  Branch (2318:28): [True: 126, False: 17.3k]
  ------------------
 2319|       |         // Supplemental Symbols and Pictographs:
 2320|  29.6k|         (cp >= 0x1f900 && cp <= 0x1f9ff))) {
  ------------------
  |  Branch (2320:11): [True: 17.3k, False: 6.21k]
  |  Branch (2320:28): [True: 72, False: 17.2k]
  ------------------
 2321|  6.16k|        return 2;
 2322|  6.16k|    }
 2323|   295k|    return 1;
 2324|   301k|}
_ZN3scn2v34impl26calculate_valid_text_widthEDi:
 2327|   213k|{
 2328|   213k|    return calculate_text_width_for_fmt_v10(cp);
 2329|   213k|}
_ZN3scn2v34impl20calculate_text_widthEDi:
 2342|    178|{
 2343|    178|    return calculate_text_width_for_fmt_v10(cp);
 2344|    178|}
_ZN3scn2v34impl11char_to_intEc:
 3122|   150k|{
 3123|   150k|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3124|   150k|}
_ZN3scn2v34impl11char_to_intEw:
 3126|   140k|{
 3127|   140k|#if WCHAR_MIN < 0
 3128|   140k|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3128:9): [True: 140k, False: 0]
  |  Branch (3128:20): [True: 140k, False: 0]
  ------------------
 3129|       |#else
 3130|       |    if (ch <= 255) {
 3131|       |#endif
 3132|   140k|        return char_to_int(static_cast<char>(ch));
 3133|   140k|    }
 3134|      0|    return 255;
 3135|   140k|}
_ZN3scn2v34impl16make_regex_flagsENS0_6detail11regex_flagsE:
 4270|  36.5k|{
 4271|  36.5k|    std::regex_constants::syntax_option_type result{};
 4272|  36.5k|    if ((flags & detail::regex_flags::multiline) != detail::regex_flags::none) {
  ------------------
  |  Branch (4272:9): [True: 888, False: 35.6k]
  ------------------
 4273|    888|#if SCN_HAS_STD_REGEX_MULTILINE
 4274|    888|        result |= std::regex_constants::multiline;
 4275|       |#else
 4276|       |        return unexpected_scan_error(
 4277|       |            scan_error::invalid_format_string,
 4278|       |            "/m flag for regex isn't supported by regex backend");
 4279|       |#endif
 4280|    888|    }
 4281|  36.5k|    if ((flags & detail::regex_flags::singleline) !=
  ------------------
  |  Branch (4281:9): [True: 0, False: 36.5k]
  ------------------
 4282|  36.5k|        detail::regex_flags::none) {
 4283|      0|        return unexpected_scan_error(
 4284|      0|            scan_error::invalid_format_string,
 4285|      0|            "/s flag for regex isn't supported by regex backend");
 4286|      0|    }
 4287|  36.5k|    if ((flags & detail::regex_flags::nocase) != detail::regex_flags::none) {
  ------------------
  |  Branch (4287:9): [True: 5.20k, False: 31.3k]
  ------------------
 4288|  5.20k|        result |= std::regex_constants::icase;
 4289|  5.20k|    }
 4290|  36.5k|    if ((flags & detail::regex_flags::nocapture) != detail::regex_flags::none) {
  ------------------
  |  Branch (4290:9): [True: 24, False: 36.4k]
  ------------------
 4291|     24|        result |= std::regex_constants::nosubs;
 4292|     24|    }
 4293|  36.5k|    return result;
 4294|  36.5k|}
_ZN3scn2v34impl27get_unescaped_regex_patternENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4637|  3.57k|{
 4638|  3.57k|    std::string result{pattern};
 4639|  25.8k|    for (size_t n = 0; (n = result.find("\\/", n)) != std::string::npos;) {
  ------------------
  |  Branch (4639:24): [True: 22.2k, False: 3.57k]
  ------------------
 4640|  22.2k|        result.replace(n, 2, "/");
 4641|  22.2k|        ++n;
 4642|  22.2k|    }
 4643|  3.57k|    return result;
 4644|  3.57k|}
_ZN3scn2v34impl27get_unescaped_regex_patternENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEE:
 4646|    342|{
 4647|    342|    std::wstring result{pattern};
 4648|  1.62k|    for (size_t n = 0; (n = result.find(L"\\/", n)) != std::wstring::npos;) {
  ------------------
  |  Branch (4648:24): [True: 1.27k, False: 342]
  ------------------
 4649|  1.27k|        result.replace(n, 2, L"/");
 4650|  1.27k|        ++n;
 4651|  1.27k|    }
 4652|    342|    return result;
 4653|    342|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6007|  11.1k|{
 6008|  11.1k|    if (specs.width != 0) {
  ------------------
  |  Branch (6008:9): [True: 2.64k, False: 8.55k]
  ------------------
 6009|  2.64k|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6009:13): [True: 1.42k, False: 1.22k]
  ------------------
 6010|  1.42k|            return {scan_error::invalid_scanned_value,
 6011|  1.42k|                    "Scanned value too narrow, width did not exceed what "
 6012|  1.42k|                    "was specified in the format string"};
 6013|  1.42k|        }
 6014|  2.64k|    }
 6015|  9.77k|    if (specs.precision != 0) {
  ------------------
  |  Branch (6015:9): [True: 2.27k, False: 7.50k]
  ------------------
 6016|  2.27k|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6016:13): [True: 102, False: 2.16k]
  ------------------
 6017|    102|            return {scan_error::invalid_scanned_value,
 6018|    102|                    "Scanned value too wide, width exceeded the specified "
 6019|    102|                    "precision"};
 6020|    102|        }
 6021|  2.27k|    }
 6022|  9.67k|    return {};
 6023|  9.77k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  79.0k|    {
  304|  79.0k|        ranges::advance(x, n);
  305|  79.0k|        return x;
  306|  79.0k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  79.0k|    {
  268|  79.0k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  79.0k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|   171k|    {
  151|   171k|        i += n;
  152|   171k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   104k|    {
  108|   104k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   104k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   104k|    {
   87|   104k|        return s - i;
   88|   104k|    }
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|   121k|    {
  304|   121k|        ranges::advance(x, n);
  305|   121k|        return x;
  306|   121k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|   121k|    {
  268|   121k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   121k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|   121k|    {
  151|   121k|        i += n;
  152|   121k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  4.24k|    {
  108|  4.24k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  4.24k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  4.24k|    {
   87|  4.24k|        return s - i;
   88|  4.24k|    }
_ZN3scn2v34impl16char_reader_baseIcE11check_specsERKNS0_6detail12format_specsE:
 5623|  10.3k|    {
 5624|  10.3k|        reader_error_handler eh{};
 5625|  10.3k|        if constexpr (std::is_same_v<ValueCharT, char32_t>) {
  ------------------
  |  Branch (5625:23): [Folded - Ignored]
  ------------------
 5626|  10.3k|            detail::check_code_point_type_specs(specs, eh);
 5627|  10.3k|        }
 5628|  10.3k|        else {
 5629|  10.3k|            detail::check_char_type_specs(specs, eh);
 5630|  10.3k|        }
 5631|  10.3k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  10.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.68k, False: 622]
  |  |  ------------------
  ------------------
 5632|  9.68k|            return {scan_error::invalid_format_string, eh.m_msg};
 5633|  9.68k|        }
 5634|    622|        return {};
 5635|  10.3k|    }
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  39.5k|    {
  763|  39.5k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  39.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  39.5k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  6.44k|    {
  754|  6.44k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  743|  11.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  11.0k|              cvref<T> obj = *get<T>(fn);
  745|  11.0k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  11.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  11.0k|              }
  748|  11.0k|              else {
  749|  11.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  11.0k|              }
  751|  11.0k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  11.0k|    {
  684|  11.0k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  11.0k|            return static_cast<T*>(s.m_cp);
  686|  11.0k|        }
  687|  11.0k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  11.0k|            return static_cast<T*>(s.m_p);
  689|  11.0k|        }
  690|  11.0k|        else {
  691|  11.0k|            return reinterpret_cast<T*>(s.m_fp);
  692|  11.0k|        }
  693|  11.0k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  661|  6.44k|        {
  662|  6.44k|        }
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|  4.68M|    {
  763|  4.68M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  4.68M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  4.68M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|   891k|    {
  754|   891k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  743|  2.15M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.15M|              cvref<T> obj = *get<T>(fn);
  745|  2.15M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  2.15M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.15M|              }
  748|  2.15M|              else {
  749|  2.15M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.15M|              }
  751|  2.15M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  2.15M|    {
  684|  2.15M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  2.15M|            return static_cast<T*>(s.m_cp);
  686|  2.15M|        }
  687|  2.15M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  2.15M|            return static_cast<T*>(s.m_p);
  689|  2.15M|        }
  690|  2.15M|        else {
  691|  2.15M|            return reinterpret_cast<T*>(s.m_fp);
  692|  2.15M|        }
  693|  2.15M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  661|   891k|        {
  662|   891k|        }
_ZNK3scn2v34impl16char_reader_baseIcE19skip_ws_before_readEv:
 5618|  1.89k|    {
 5619|  1.89k|        return false;
 5620|  1.89k|    }
_ZZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|  23.7k|    return [code, msg](parse_error err) {
  869|  23.7k|        return make_scan_error_from_parse_error(err, code, msg);
  870|  23.7k|    };
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1779|    100|    {
 1780|    100|        auto stdloc = loc.get<std::locale>();
 1781|    100|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|    100|        grouping = numpunct.grouping();
 1783|    100|        thousands_sep =
 1784|    100|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 100]
  ------------------
 1785|    100|        decimal_point = numpunct.decimal_point();
 1786|    100|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1716|    118|{
 1717|    118|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 118, False: 0]
  ------------------
 1718|    118|        return std::use_facet<Facet>(stdloc);
 1719|    118|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|    118|}
_ZN3scn2v34impl20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2348|  51.6k|{
 2349|  51.6k|    size_t count{0};
 2350|  51.6k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|  51.6k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|  51.6k|    });
 2353|  51.6k|    return count;
 2354|  51.6k|}
_ZN3scn2v34impl19for_each_code_pointIcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_12function_refIFvDiESA_EE:
 1445|  51.6k|{
 1446|       |    // TODO: Could be optimized by being eager
 1447|  51.6k|    auto it = input.begin();
 1448|   133k|    while (it != input.end()) {
  ------------------
  |  Branch (1448:12): [True: 82.0k, False: 51.6k]
  ------------------
 1449|  82.0k|        auto res = get_next_code_point(
 1450|  82.0k|            detail::make_string_view_from_iterators<CharT>(it, input.end()));
 1451|  82.0k|        cb(res.value);
 1452|  82.0k|        it = detail::make_string_view_iterator(input, res.iterator);
 1453|  82.0k|    }
 1454|  51.6k|}
_ZNK3scn2v34impl12function_refIFvDiES3_EclEDi:
  762|  88.0k|    {
  763|  88.0k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  88.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  88.0k|    }
_ZN3scn2v34impl12function_refIFvDiES3_EC2IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_LPv0EEEOS9_:
  753|  51.6k|    {
  754|  51.6k|    }
_ZZN3scn2v34impl12function_refIFvDiES3_EC1IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_LPv0EEEOS9_ENKUlNS1_12fnref_detail4base7storageEDiE_clESI_Di:
  743|  82.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  82.0k|              cvref<T> obj = *get<T>(fn);
  745|  82.0k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  82.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  82.0k|              }
  748|  82.0k|              else {
  749|  82.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  82.0k|              }
  751|  82.0k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEUlDiE_EEDaNS3_7storageE:
  683|  82.0k|    {
  684|  82.0k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  82.0k|            return static_cast<T*>(s.m_cp);
  686|  82.0k|        }
  687|  82.0k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  82.0k|            return static_cast<T*>(s.m_p);
  689|  82.0k|        }
  690|  82.0k|        else {
  691|  82.0k|            return reinterpret_cast<T*>(s.m_fp);
  692|  82.0k|        }
  693|  82.0k|    }
_ZZN3scn2v34impl20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEENKUlDiE_clEDi:
 2350|  82.0k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|  82.0k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|  82.0k|    });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_LPv0EEEPS9_:
  661|  51.6k|        {
  662|  51.6k|        }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1581|  4.85k|    {
 1582|  4.85k|        return m_view;
 1583|  4.85k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1571|  5.13k|    ~contiguous_range_factory() = default;
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E14multibyte_leftEv:
 2420|  3.00k|    {
 2421|  3.00k|        return m_multibyte_left;
 2422|  3.00k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EdeEv:
 2425|   536k|    {
 2426|   536k|        return *m_current;
 2427|   536k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EppEv:
 2434|   433k|    {
 2435|   433k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|   433k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   433k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2436|   433k|        _increment_current();
 2437|   433k|        return *this;
 2438|   433k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E18_increment_currentEv:
 2667|   433k|    {
 2668|   433k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2668:13): [True: 212k, False: 220k]
  ------------------
 2669|   212k|            auto cplen = _get_cp_length_at_current();
 2670|   212k|            m_multibyte_left = cplen - 1;
 2671|   212k|            m_count -= _get_width_at_current_cp_start(cplen);
 2672|   212k|        }
 2673|   220k|        else {
 2674|   220k|            --m_multibyte_left;
 2675|   220k|        }
 2676|       |
 2677|   433k|        ++m_current;
 2678|   433k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E25_get_cp_length_at_currentEv:
 2638|   212k|    {
 2639|   212k|        return static_cast<difference_type>(
 2640|   212k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2641|   212k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E30_get_width_at_current_cp_startEl:
 2644|   212k|    {
 2645|   212k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|   212k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.39k, False: 211k]
  |  |  ------------------
  ------------------
 2646|  1.39k|            return 0;
 2647|  1.39k|        }
 2648|       |
 2649|   211k|        if (cplen == 1) {
  ------------------
  |  Branch (2649:13): [True: 162k, False: 48.6k]
  ------------------
 2650|   162k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|   162k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   162k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2651|   162k|            auto cp = static_cast<char32_t>(*m_current);
 2652|   162k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2653|   162k|        }
 2654|       |
 2655|  48.6k|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2656|  48.6k|                                           cplen);
 2657|  48.6k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  48.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 562, False: 48.1k]
  |  |  ------------------
  ------------------
 2658|    562|            return 0;
 2659|    562|        }
 2660|       |
 2661|  48.1k|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2662|  48.1k|        return static_cast<difference_type>(
 2663|  48.1k|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2664|  48.6k|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1856|  50.9k|{
 1857|  50.9k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  50.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  50.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  50.9k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  50.9k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  50.9k|        if (sz < count) {
  ------------------
  |  Branch (1861:13): [True: 670, False: 50.2k]
  ------------------
 1862|    670|            return unexpected(eof_error::eof);
 1863|    670|        }
 1864|       |
 1865|  50.2k|        return ranges::next(range.begin(), count);
 1866|  50.9k|    }
 1867|  50.9k|    else {
 1868|  50.9k|        auto it = range.begin();
 1869|  50.9k|        if (guaranteed_minimum_size(range) >= count) {
 1870|  50.9k|            return ranges::next(it, count);
 1871|  50.9k|        }
 1872|       |
 1873|  50.9k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1874|  50.9k|            if (it == range.end()) {
 1875|  50.9k|                return unexpected(eof_error::eof);
 1876|  50.9k|            }
 1877|  50.9k|        }
 1878|       |
 1879|  50.9k|        return it;
 1880|  50.9k|    }
 1881|  50.9k|}
_ZN3scn2v34impl27counted_width_iterator_implneIPKcS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2530|   235k|    {
 2531|   235k|        return !(a == b);
 2532|   235k|    }
_ZN3scn2v34impl27counted_width_iterator_impleqIPKcS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2522|   240k|    {
 2523|   240k|        return a.m_current == b.m_current;
 2524|   240k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EdeEv:
 2429|  9.62k|    {
 2430|  9.62k|        return *m_current;
 2431|  9.62k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeE:
  267|  1.71k|    {
  268|  1.71k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.71k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent22random_access_iteratorISE_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  160|  1.71k|    {
  161|  1.71k|        constexpr auto zero = iter_difference_t<I>{0};
  162|       |
  163|  1.71k|        if (n > zero) {
  ------------------
  |  Branch (163:13): [True: 0, False: 1.71k]
  ------------------
  164|      0|            while (n-- > zero) {
  ------------------
  |  Branch (164:20): [True: 0, False: 0]
  ------------------
  165|      0|                ++i;
  166|      0|            }
  167|      0|        }
  168|  1.71k|        else {
  169|  1.71k|            while (n++ < zero) {
  ------------------
  |  Branch (169:20): [True: 0, False: 1.71k]
  ------------------
  170|      0|                --i;
  171|      0|            }
  172|  1.71k|        }
  173|  1.71k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EEcE8is_validEv:
 1889|   167k|    {
 1890|   167k|        return !codepoint.empty();
 1891|   167k|    }
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EESB_EEEEDaOT_:
 1682|  2.41k|{
 1683|  2.41k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  2.41k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  2.41k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  2.41k|        return string_view_wrapper{SCN_FWD(range)};
 1687|  2.41k|    }
 1688|  2.41k|    else {
 1689|  2.41k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|  2.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1690|  2.41k|    }
 1691|  2.41k|}
_ZN3scn2v34impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EELPv0EEEOT_:
 1536|  2.41k|    {
 1537|  2.41k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  2.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1538|  2.41k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEvOT_:
 1620|  2.41k|    {
 1621|  2.41k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  2.41k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  2.41k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  2.41k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  2.41k|            m_storage.reset();
 1627|  2.41k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  2.41k|        }
 1629|  2.41k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  2.41k|                                          std::basic_string<CharT>>) {
 1631|  2.41k|            m_storage.emplace(SCN_FWD(range));
 1632|  2.41k|            m_view = string_view_type{*m_storage};
 1633|  2.41k|        }
 1634|  2.41k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|  2.41k|                                          typename detail::basic_scan_buffer<
 1636|  2.41k|                                              value_t>::forward_iterator> &&
 1637|  2.41k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|  2.41k|            auto beg_seg = range.begin().contiguous_segment();
 1639|  2.41k|            auto end_seg = range.end().contiguous_segment();
 1640|  2.41k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|  2.41k|                             detail::to_address(end_seg.end()))) {
 1642|  2.41k|                auto& str = m_storage.emplace();
 1643|  2.41k|                str.reserve(range.end().position() - range.begin().position());
 1644|  2.41k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  2.41k|                m_view = string_view_type{str};
 1646|  2.41k|                return;
 1647|  2.41k|            }
 1648|       |
 1649|  2.41k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  2.41k|                                                            end_seg.data());
 1651|  2.41k|            m_storage.reset();
 1652|  2.41k|        }
 1653|  2.41k|        else {
 1654|  2.41k|            auto& str = m_storage.emplace();
 1655|  2.41k|            if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1655:27): [Folded - Ignored]
  ------------------
 1656|  2.41k|                str.reserve(range.size());
 1657|  2.41k|            }
 1658|  2.41k|            if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1658:27): [Folded - Ignored]
  ------------------
 1659|  2.41k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  2.41k|                          std::back_inserter(str));
 1661|  2.41k|            }
 1662|  2.41k|            else {
 1663|  2.41k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  2.41k|                     ++it) {
 1665|  2.41k|                    str.push_back(*it);
 1666|  2.41k|                }
 1667|  2.41k|            }
 1668|  2.41k|            m_view = string_view_type{str};
 1669|  2.41k|        }
 1670|  2.41k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EC2ES5_S5_l:
 2381|  29.6k|    {
 2382|  29.6k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E4baseEv:
 2412|   454k|    {
 2413|   454k|        return m_current;
 2414|   454k|    }
_ZNK3scn2v34impl14_take_width_fnclINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEDTtlNS1_15take_width_viewEfp_fp0_EERKT_l:
 2831|  14.2k|    {
 2832|  14.2k|        return take_width_view{r, n};
 2833|  14.2k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2ERKS9_l:
 2800|  14.2k|    {
 2801|  14.2k|    }
_ZN3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEC2ERKS9_:
 2713|  14.2k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impl20reader_impl_for_charIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERcNSN_10locale_refE:
 5662|    372|    {
 5663|    372|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5663:13): [True: 340, False: 32]
  ------------------
 5664|    372|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5664:13): [True: 0, False: 32]
  ------------------
 5665|    340|            return read_default(range, value, loc);
 5666|    340|        }
 5667|       |
 5668|     32|        reader_impl_for_int<CharT> reader{};
 5669|     32|        signed char tmp_value{};
 5670|     32|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5671|     32|        value = static_cast<signed char>(value);
 5672|     32|        return ret;
 5673|    372|    }
_ZN3scn2v34impl20reader_impl_for_charIcE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RcNS0_6detail10locale_refE:
 5644|    340|    {
 5645|    340|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    340|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5646|    340|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (5646:23): [Folded - Ignored]
  ------------------
 5647|    340|            return code_unit_reader<char>{}.read(range, value);
 5648|    340|        }
 5649|    340|        else {
 5650|    340|            SCN_UNUSED(range);
 5651|    340|            SCN_EXPECT(false);
 5652|    340|            SCN_UNREACHABLE;
 5653|    340|        }
 5654|    340|    }
_ZN3scn2v34impl16code_unit_readerIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSH_Rc:
 5563|    340|    {
 5564|    340|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3672|    340|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    340|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    340|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    340|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 340]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    340|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    340|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5565|    340|        ch = *range.begin();
 5566|    340|        return it;
 5567|    340|    }
_ZN3scn2v34impl14read_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 1845|  2.52k|{
 1846|  2.52k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.52k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.52k]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|  2.52k|    return ranges::next(range.begin());
 1851|  2.52k|}
_ZN3scn2v34impl9eof_checkINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_9eof_errorET_:
  949|  2.52k|{
  950|  2.52k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  2.52k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.52k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  2.52k|    return eof_error::good;
  954|  2.52k|}
_ZN3scn2v34impl12is_range_eofINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEbT_:
  943|  2.52k|{
  944|  2.52k|    return is_range_eof(r.begin(), r.end());
  945|  2.52k|}
_ZN3scn2v34impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEbT_T0_:
  927|   170k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   170k|    {
  937|   170k|        return begin == end;
  938|   170k|    }
  939|   170k|}
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2769|   444k|        {
 2770|   444k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2770:21): [True: 3.00k, False: 441k]
  |  Branch (2770:39): [True: 950, False: 2.05k]
  ------------------
 2771|   444k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2771:20): [True: 1.60k, False: 441k]
  ------------------
 2772|   444k|        }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE3endEv:
 2815|   344k|    {
 2816|   344k|        return sentinel<true>{m_base.get().end()};
 2817|   344k|    }
_ZNK3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvE3getEv:
 2716|   403k|    {
 2717|   403k|        return view;
 2718|   403k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE8sentinelILb1EEC2ES8_:
 2750|   344k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
  295|  2.56k|    {
  296|  2.56k|        ++x;
  297|  2.56k|        return x;
  298|  2.56k|    }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 2809|  29.6k|    {
 2810|  29.6k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2811|  29.6k|                                      m_count};
 2812|  29.6k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEaEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|     32|    {
 3539|     32|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|     32|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     32|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     32|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 32]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|     32|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     32|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|     32|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|     32|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 32]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|     32|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 32]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|     32|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|     32|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 32, False: 0]
  |  |  ------------------
  ------------------
 3565|     32|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|     32|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     32|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     32|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 32, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     32|    }                                                  \
  |  |  |  | 3671|     32|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESG_i:
 3325|  1.09k|{
 3326|  1.09k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3672|  1.09k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.09k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.09k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.09k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.09k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.09k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|  1.09k|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|  1.09k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|  1.09k|        parse_integer_base_prefix(
 3331|  1.09k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|  1.09k|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 0, False: 1.09k]
  ------------------
 3334|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 0, False: 0]
  |  Branch (3334:13): [True: 0, False: 0]
  ------------------
 3335|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 0, False: 0]
  ------------------
 3336|      0|            digits_begin_it = base_prefix_begin_it;
 3337|      0|        }
 3338|      0|        else {
 3339|      0|            parsed_zero = false;
 3340|      0|        }
 3341|      0|    }
 3342|  1.09k|    else {
 3343|  1.09k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3343:13): [True: 0, False: 1.09k]
  |  Branch (3343:13): [True: 1.09k, False: 0]
  ------------------
 3344|  1.09k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3344:13): [True: 1.09k, False: 0]
  ------------------
 3345|  1.09k|            digits_begin_it = base_prefix_begin_it;
 3346|  1.09k|        }
 3347|  1.09k|    }
 3348|       |
 3349|  1.09k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3349:9): [True: 1.09k, False: 0]
  ------------------
 3350|  1.09k|        sign = sign_type::plus_sign;
 3351|  1.09k|    }
 3352|  1.09k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3353|  1.09k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3354|  1.09k|}
_ZN3scn2v34impl18parse_numeric_signINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESG_:
 3140|  1.45k|{
 3141|  1.45k|    auto r = read_one_of_code_unit(range, "+-");
 3142|  1.45k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 1.45k, False: 0]
  ------------------
 3143|  1.45k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 1.45k, False: 0]
  ------------------
 3144|  1.45k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  1.45k|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|  1.45k|    }
 3148|       |
 3149|      0|    auto& it = *r;
 3150|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 0, False: 0]
  ------------------
 3151|      0|        return std::pair{it, sign_type::minus_sign};
 3152|      0|    }
 3153|      0|    return std::pair{it, sign_type::plus_sign};
 3154|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2271|  1.45k|{
 2272|  1.45k|    auto it = read_code_unit(range);
 2273|  1.45k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.45k]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|  2.91k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 2.91k, False: 1.45k]
  ------------------
 2278|  2.91k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 0, False: 2.91k]
  ------------------
 2279|      0|            return *it;
 2280|      0|        }
 2281|  2.91k|    }
 2282|       |
 2283|  1.45k|    return unexpected(parse_error::error);
 2284|  1.45k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_i:
 3292|  1.09k|{
 3293|  1.09k|    switch (base) {
 3294|     14|        case 2:
  ------------------
  |  Branch (3294:9): [True: 14, False: 1.08k]
  ------------------
 3295|       |            // allow 0b/0B
 3296|     14|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|     14|                    false};
 3298|       |
 3299|     14|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 14, False: 1.08k]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|     14|            bool zero_parsed = false;
 3302|     14|            auto it = apply_opt(
 3303|     14|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|     14|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|    352|        case 16:
  ------------------
  |  Branch (3307:9): [True: 352, False: 742]
  ------------------
 3308|       |            // allow 0x/0X
 3309|    352|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|    352|                    false};
 3311|       |
 3312|     20|        case 0:
  ------------------
  |  Branch (3312:9): [True: 20, False: 1.07k]
  ------------------
 3313|       |            // detect base
 3314|     20|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|    694|        default:
  ------------------
  |  Branch (3316:9): [True: 694, False: 400]
  ------------------
 3317|       |            // no base prefix allowed
 3318|    694|            return {range.begin(), base, false};
 3319|  1.09k|    }
 3320|  1.09k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENS1_14parse_expectedESB_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEEE4typeEOSN_SP_:
 2290|    380|{
 2291|    380|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 380, False: 0]
  ------------------
 2292|    380|        return range.begin();
 2293|    380|    }
 2294|      0|    return *result;
 2295|    380|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3243|     34|{
 3244|     34|    return read_matching_string_classic_nocase(range, "0b");
 3245|     34|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEE:
 2230|  1.51k|{
 2231|  1.51k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  1.51k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  1.51k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  1.51k|        if (range.size() < str.size()) {
 2236|  1.51k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  1.51k|        }
 2238|  1.51k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  1.51k|            return unexpected(parse_error::error);
 2240|  1.51k|        }
 2241|  1.51k|        return ranges::next(range.begin(), str.size());
 2242|  1.51k|    }
 2243|  1.51k|    else {
 2244|  1.51k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.51k|            if (ch < 'A' || ch > 'Z') {
 2246|  1.51k|                return ch;
 2247|  1.51k|            }
 2248|  1.51k|            return static_cast<char_type>(ch +
 2249|  1.51k|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.51k|        };
 2251|       |
 2252|  1.51k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  1.51k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.51k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.51k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.51k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 198, False: 1.31k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    198|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    198|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    198|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    198|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    198|    }                                                  \
  |  |  |  | 3671|  1.51k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.31k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  1.31k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  1.31k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  1.31k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  1.31k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.31k, False: 0]
  |  |  ------------------
  ------------------
 2257|  1.31k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  1.31k|                    return ascii_tolower(a) ==
 2259|  1.31k|                           static_cast<detail::char_t<Range>>(b);
 2260|  1.31k|                }))) {
 2261|  1.31k|            return unexpected(parse_error::error);
 2262|  1.31k|        }
 2263|       |
 2264|      0|        return it;
 2265|  1.31k|    }
 2266|  1.51k|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_l:
 1856|  2.88k|{
 1857|  2.88k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  2.88k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.88k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  2.88k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  2.88k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  2.88k|        if (sz < count) {
 1862|  2.88k|            return unexpected(eof_error::eof);
 1863|  2.88k|        }
 1864|       |
 1865|  2.88k|        return ranges::next(range.begin(), count);
 1866|  2.88k|    }
 1867|  2.88k|    else {
 1868|  2.88k|        auto it = range.begin();
 1869|  2.88k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 2.88k]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|  10.1k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 7.46k, False: 2.65k]
  ------------------
 1874|  7.46k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 228, False: 7.23k]
  ------------------
 1875|    228|                return unexpected(eof_error::eof);
 1876|    228|            }
 1877|  7.46k|        }
 1878|       |
 1879|  2.65k|        return it;
 1880|  2.88k|    }
 1881|  2.88k|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEmT_:
 1094|  2.88k|{
 1095|  2.88k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|  2.88k|        return r.size();
 1097|  2.88k|    }
 1098|  2.88k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|  2.88k|                           ranges::const_iterator_t<Range>,
 1100|  2.88k|                           typename detail::basic_scan_buffer<
 1101|  2.88k|                               detail::char_t<Range>>::forward_iterator>) {
 1102|  2.88k|        if constexpr (ranges::common_range<Range>) {
 1103|  2.88k|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|  2.88k|        }
 1105|  2.88k|        else {
 1106|  2.88k|            if (r.begin().stores_parent()) {
 1107|  2.88k|                return static_cast<size_t>(
 1108|  2.88k|                    r.begin().parent()->chars_available() -
 1109|  2.88k|                    r.begin().position());
 1110|  2.88k|            }
 1111|  2.88k|            return r.begin().contiguous_segment().size();
 1112|  2.88k|        }
 1113|  2.88k|    }
 1114|  2.88k|    else {
 1115|  2.88k|        return 0;
 1116|  2.88k|    }
 1117|  2.88k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlcE_clEc:
 2244|  1.31k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.31k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 46, False: 1.26k]
  |  Branch (2245:29): [True: 1.26k, False: 0]
  ------------------
 2246|  1.31k|                return ch;
 2247|  1.31k|            }
 2248|      0|            return static_cast<char_type>(ch +
 2249|      0|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.31k|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_Rb:
 3257|     34|{
 3258|     34|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 0, False: 34]
  ------------------
 3259|      0|        return *r;
 3260|      0|    }
 3261|       |
 3262|     34|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 0, False: 34]
  ------------------
 3263|      0|        zero_parsed = true;
 3264|      0|        return *r;
 3265|      0|    }
 3266|       |
 3267|     34|    return unexpected(parse_error::error);
 3268|     34|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NDTcl4implISL_EEE4typeE:
 2145|     34|{
 2146|     34|    auto it = read_code_unit(range);
 2147|     34|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 34]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|     34|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 0]
  |  |  ------------------
  ------------------
 2152|     34|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|     34|        return unexpected(parse_error::error);
 2154|     34|    }
 2155|       |
 2156|      0|    return *it;
 2157|     34|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 1845|     34|{
 1846|     34|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 34]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|     34|    return ranges::next(range.begin());
 1851|     34|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_9eof_errorET_:
  949|     34|{
  950|     34|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 34]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|     34|    return eof_error::good;
  954|     34|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEbT_:
  943|   167k|{
  944|   167k|    return is_range_eof(r.begin(), r.end());
  945|   167k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3250|    372|{
 3251|    372|    return read_matching_string_classic_nocase(range, "0x");
 3252|    372|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_:
 3273|     20|{
 3274|     20|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 0, False: 20]
  ------------------
 3275|      0|        return {*r, 16, false};
 3276|      0|    }
 3277|     20|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 0, False: 20]
  ------------------
 3278|      0|        return {*r, 2, false};
 3279|      0|    }
 3280|     20|    {
 3281|     20|        bool zero_parsed{false};
 3282|     20|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 0, False: 20]
  ------------------
 3283|      0|            return {*r, 8, zero_parsed};
 3284|      0|        }
 3285|     20|    }
 3286|     20|    return {range.begin(), 10, false};
 3287|     20|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_i:
 3359|  1.07k|{
 3360|  1.07k|    using char_type = detail::char_t<Range>;
 3361|       |
 3362|  1.07k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (3362:19): [Folded - Ignored]
  ------------------
 3363|  1.07k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3364|  1.07k|            return unexpected_scan_error(
 3365|  1.07k|                scan_error::invalid_scanned_value,
 3366|  1.07k|                "Failed to parse integer: No digits found");
 3367|  1.07k|        }
 3368|  1.07k|        return range.end();
 3369|  1.07k|    }
 3370|  1.07k|    else {
 3371|  1.07k|        return read_while1_code_unit(range,
 3372|  1.07k|                                     [&](char_type ch) noexcept {
 3373|  1.07k|                                         return char_to_int(ch) < base;
 3374|  1.07k|                                     })
 3375|  1.07k|            .transform_error(map_parse_error_to_scan_error(
 3376|  1.07k|                scan_error::invalid_scanned_value,
 3377|  1.07k|                "Failed to parse integer: No digits found"));
 3378|  1.07k|    }
 3379|  1.07k|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigISU_E8functionEEE:
 1995|  1.44k|{
 1996|  1.44k|    auto it = read_while_code_unit(range, pred);
 1997|  1.44k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 1.44k, False: 0]
  ------------------
 1998|  1.44k|        return unexpected(parse_error::error);
 1999|  1.44k|    }
 2000|      0|    return it;
 2001|  1.44k|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1975|  1.44k|{
 1976|  1.44k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  1.44k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1956|  1.44k|{
 1957|  1.44k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  1.44k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  1.44k|    }
 1960|  1.44k|    else {
 1961|  1.44k|        auto first = range.begin();
 1962|  1.44k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 1.44k, False: 0]
  ------------------
 1963|  1.44k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 1.44k, False: 0]
  ------------------
 1964|  1.44k|                return first;
 1965|  1.44k|            }
 1966|  1.44k|        }
 1967|      0|        return first;
 1968|  1.44k|    }
 1969|  1.44k|}
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2780|   248k|        {
 2781|   248k|            return !(y == x);
 2782|   248k|        }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_SV_LPv0EEEOSP_:
  753|  1.07k|    {
  754|  1.07k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_SV_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|  1.07k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.07k|              cvref<T> obj = *get<T>(fn);
  745|  1.07k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.07k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.07k|              }
  748|  1.07k|              else {
  749|  1.07k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.07k|              }
  751|  1.07k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSD_EENS1_15take_width_viewINS9_ISD_SD_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_iEUlcE_EEDaNS3_7storageE:
  683|  1.07k|    {
  684|  1.07k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.07k|            return static_cast<T*>(s.m_cp);
  686|  1.07k|        }
  687|  1.07k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.07k|            return static_cast<T*>(s.m_p);
  689|  1.07k|        }
  690|  1.07k|        else {
  691|  1.07k|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.07k|        }
  693|  1.07k|    }
_ZZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_iENKUlcE_clEc:
 3372|  1.07k|                                     [&](char_type ch) noexcept {
 3373|  1.07k|                                         return char_to_int(ch) < base;
 3374|  1.07k|                                     })
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_LPv0EEEPSP_:
  661|  1.07k|        {
  662|  1.07k|        }
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEENSJ_12basic_stringIT0_NSJ_11char_traitsISS_EENSJ_9allocatorISS_EEEENSR_IcNST_IcEENSV_IcEEEEEEEEESM_iRKNS1_35localized_number_formatting_optionsISS_EE:
 3389|     16|{
 3390|     16|    std::basic_string<CharT> output;
 3391|     16|    std::string thsep_indices;
 3392|     16|    auto it = range.begin();
 3393|     16|    bool digit_matched = false;
 3394|     16|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3394:12): [True: 16, False: 0]
  ------------------
 3395|     16|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3395:13): [True: 0, False: 16]
  ------------------
 3396|      0|            thsep_indices.push_back(
 3397|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3398|      0|        }
 3399|     16|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3399:18): [True: 16, False: 0]
  ------------------
 3400|     16|            break;
 3401|     16|        }
 3402|      0|        else {
 3403|      0|            output.push_back(*it);
 3404|      0|            digit_matched = true;
 3405|      0|        }
 3406|     16|    }
 3407|     16|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16, False: 0]
  |  |  ------------------
  ------------------
 3408|     16|        return unexpected_scan_error(
 3409|     16|            scan_error::invalid_scanned_value,
 3410|     16|            "Failed to parse integer: No digits found");
 3411|     16|    }
 3412|      0|    return std::tuple{it, output, thsep_indices};
 3413|     16|}
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E5countEv:
 2416|   446k|    {
 2417|   446k|        return m_count;
 2418|   446k|    }
_ZN3scn2v34impl20reader_impl_for_charIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERcNSL_10locale_refE:
 5662|    244|    {
 5663|    244|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5663:13): [True: 224, False: 20]
  ------------------
 5664|    244|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5664:13): [True: 0, False: 20]
  ------------------
 5665|    224|            return read_default(range, value, loc);
 5666|    224|        }
 5667|       |
 5668|     20|        reader_impl_for_int<CharT> reader{};
 5669|     20|        signed char tmp_value{};
 5670|     20|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5671|     20|        value = static_cast<signed char>(value);
 5672|     20|        return ret;
 5673|    244|    }
_ZN3scn2v34impl20reader_impl_for_charIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RcNS0_6detail10locale_refE:
 5644|    930|    {
 5645|    930|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    930|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5646|    930|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (5646:23): [Folded - Ignored]
  ------------------
 5647|    930|            return code_unit_reader<char>{}.read(range, value);
 5648|    930|        }
 5649|    930|        else {
 5650|    930|            SCN_UNUSED(range);
 5651|    930|            SCN_EXPECT(false);
 5652|    930|            SCN_UNREACHABLE;
 5653|    930|        }
 5654|    930|    }
_ZN3scn2v34impl16code_unit_readerIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_Rc:
 5563|    930|    {
 5564|    930|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3672|    930|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    930|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    930|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    930|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 930]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    930|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    930|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5565|    930|        ch = *range.begin();
 5566|    930|        return it;
 5567|    930|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|  6.82k|{
 1846|  6.82k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.82k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.82k]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|  6.82k|    return ranges::next(range.begin());
 1851|  6.82k|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|  23.4k|{
  950|  23.4k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  23.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 23.4k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  23.4k|    return eof_error::good;
  954|  23.4k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|   809k|{
  944|   809k|    return is_range_eof(r.begin(), r.end());
  945|   809k|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|   880k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   880k|    {
  937|   880k|        return begin == end;
  938|   880k|    }
  939|   880k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  63.5k|    {
  296|  63.5k|        ++x;
  297|  63.5k|        return x;
  298|  63.5k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|     20|    {
 3539|     20|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 20]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     20|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|     20|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|     20|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 20]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|     20|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 20]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|     20|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|     20|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 20, False: 0]
  |  |  ------------------
  ------------------
 3565|     20|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 20]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     20|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|     20|                    parse_integer_digits_without_thsep(
 3567|     20|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|     20|                        prefix_result.parsed_base));
 3569|       |
 3570|     20|            auto buf = make_contiguous_buffer(
 3571|     20|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|     20|            SCN_TRY(result_it,
  ------------------
  |  | 3672|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     20|    }                                                  \
  |  |  |  | 3671|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|     20|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3325|  2.89k|{
 3326|  2.89k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3672|  2.89k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.89k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.89k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.89k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  2.89k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.89k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|  2.89k|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|  2.89k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|  2.89k|        parse_integer_base_prefix(
 3331|  2.89k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|  2.89k|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 0, False: 2.89k]
  ------------------
 3334|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 0, False: 0]
  ------------------
 3335|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 0, False: 0]
  ------------------
 3336|      0|            digits_begin_it = base_prefix_begin_it;
 3337|      0|        }
 3338|      0|        else {
 3339|      0|            parsed_zero = false;
 3340|      0|        }
 3341|      0|    }
 3342|  2.89k|    else {
 3343|  2.89k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3343:13): [True: 0, False: 2.89k]
  ------------------
 3344|  2.89k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3344:13): [True: 2.89k, False: 0]
  ------------------
 3345|  2.89k|            digits_begin_it = base_prefix_begin_it;
 3346|  2.89k|        }
 3347|  2.89k|    }
 3348|       |
 3349|  2.89k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3349:9): [True: 2.89k, False: 0]
  ------------------
 3350|  2.89k|        sign = sign_type::plus_sign;
 3351|  2.89k|    }
 3352|  2.89k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3353|  2.89k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3354|  2.89k|}
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|  3.89k|{
 3141|  3.89k|    auto r = read_one_of_code_unit(range, "+-");
 3142|  3.89k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 3.89k, False: 0]
  ------------------
 3143|  3.89k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 3.89k, False: 0]
  ------------------
 3144|  3.89k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  3.89k|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|  3.89k|    }
 3148|       |
 3149|      0|    auto& it = *r;
 3150|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 0, False: 0]
  ------------------
 3151|      0|        return std::pair{it, sign_type::minus_sign};
 3152|      0|    }
 3153|      0|    return std::pair{it, sign_type::plus_sign};
 3154|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|  3.89k|{
 2272|  3.89k|    auto it = read_code_unit(range);
 2273|  3.89k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  3.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.89k]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|  7.78k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 7.78k, False: 3.89k]
  ------------------
 2278|  7.78k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 0, False: 7.78k]
  ------------------
 2279|      0|            return *it;
 2280|      0|        }
 2281|  7.78k|    }
 2282|       |
 2283|  3.89k|    return unexpected(parse_error::error);
 2284|  3.89k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3292|  2.89k|{
 3293|  2.89k|    switch (base) {
 3294|      6|        case 2:
  ------------------
  |  Branch (3294:9): [True: 6, False: 2.88k]
  ------------------
 3295|       |            // allow 0b/0B
 3296|      6|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|      6|                    false};
 3298|       |
 3299|     46|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 46, False: 2.84k]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|     46|            bool zero_parsed = false;
 3302|     46|            auto it = apply_opt(
 3303|     46|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|     46|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|    940|        case 16:
  ------------------
  |  Branch (3307:9): [True: 940, False: 1.95k]
  ------------------
 3308|       |            // allow 0x/0X
 3309|    940|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|    940|                    false};
 3311|       |
 3312|     12|        case 0:
  ------------------
  |  Branch (3312:9): [True: 12, False: 2.88k]
  ------------------
 3313|       |            // detect base
 3314|     12|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|  1.89k|        default:
  ------------------
  |  Branch (3316:9): [True: 1.89k, False: 1.00k]
  ------------------
 3317|       |            // no base prefix allowed
 3318|  1.89k|            return {range.begin(), base, false};
 3319|  2.89k|    }
 3320|  2.89k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2290|    992|{
 2291|    992|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 992, False: 0]
  ------------------
 2292|    992|        return range.begin();
 2293|    992|    }
 2294|      0|    return *result;
 2295|    992|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3243|     18|{
 3244|     18|    return read_matching_string_classic_nocase(range, "0b");
 3245|     18|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  3.99k|{
 2231|  3.99k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  3.99k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  3.99k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  3.99k|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2235:13): [True: 8, False: 3.98k]
  ------------------
 2236|      8|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|      8|        }
 2238|  3.98k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2238:13): [True: 3.98k, False: 0]
  ------------------
 2239|  3.98k|            return unexpected(parse_error::error);
 2240|  3.98k|        }
 2241|      0|        return ranges::next(range.begin(), str.size());
 2242|  3.98k|    }
 2243|  3.99k|    else {
 2244|  3.99k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  3.99k|            if (ch < 'A' || ch > 'Z') {
 2246|  3.99k|                return ch;
 2247|  3.99k|            }
 2248|  3.99k|            return static_cast<char_type>(ch +
 2249|  3.99k|                                          static_cast<char_type>('a' - 'A'));
 2250|  3.99k|        };
 2251|       |
 2252|  3.99k|        SCN_TRY(it, read_exactly_n_code_units(
 2253|  3.99k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  3.99k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  3.99k|        if (SCN_UNLIKELY(!std::equal(
 2257|  3.99k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  3.99k|                    return ascii_tolower(a) ==
 2259|  3.99k|                           static_cast<detail::char_t<Range>>(b);
 2260|  3.99k|                }))) {
 2261|  3.99k|            return unexpected(parse_error::error);
 2262|  3.99k|        }
 2263|       |
 2264|  3.99k|        return it;
 2265|  3.99k|    }
 2266|  3.99k|}
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3257|     58|{
 3258|     58|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 0, False: 58]
  ------------------
 3259|      0|        return *r;
 3260|      0|    }
 3261|       |
 3262|     58|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 0, False: 58]
  ------------------
 3263|      0|        zero_parsed = true;
 3264|      0|        return *r;
 3265|      0|    }
 3266|       |
 3267|     58|    return unexpected(parse_error::error);
 3268|     58|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|  2.00k|{
 2146|  2.00k|    auto it = read_code_unit(range);
 2147|  2.00k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.00k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.00k]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|  2.00k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  2.00k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.00k, False: 0]
  |  |  ------------------
  ------------------
 2152|  2.00k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  2.00k|        return unexpected(parse_error::error);
 2154|  2.00k|    }
 2155|       |
 2156|      0|    return *it;
 2157|  2.00k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3250|    952|{
 3251|    952|    return read_matching_string_classic_nocase(range, "0x");
 3252|    952|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3273|     12|{
 3274|     12|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 0, False: 12]
  ------------------
 3275|      0|        return {*r, 16, false};
 3276|      0|    }
 3277|     12|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 0, False: 12]
  ------------------
 3278|      0|        return {*r, 2, false};
 3279|      0|    }
 3280|     12|    {
 3281|     12|        bool zero_parsed{false};
 3282|     12|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 0, False: 12]
  ------------------
 3283|      0|            return {*r, 8, zero_parsed};
 3284|      0|        }
 3285|     12|    }
 3286|     12|    return {range.begin(), 10, false};
 3287|     12|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3359|  2.85k|{
 3360|  2.85k|    using char_type = detail::char_t<Range>;
 3361|       |
 3362|  2.85k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (3362:19): [Folded - Ignored]
  ------------------
 3363|  2.85k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.85k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.85k]
  |  |  ------------------
  ------------------
 3364|      0|            return unexpected_scan_error(
 3365|      0|                scan_error::invalid_scanned_value,
 3366|      0|                "Failed to parse integer: No digits found");
 3367|      0|        }
 3368|  2.85k|        return range.end();
 3369|  2.85k|    }
 3370|  2.85k|    else {
 3371|  2.85k|        return read_while1_code_unit(range,
 3372|  2.85k|                                     [&](char_type ch) noexcept {
 3373|  2.85k|                                         return char_to_int(ch) < base;
 3374|  2.85k|                                     })
 3375|  2.85k|            .transform_error(map_parse_error_to_scan_error(
 3376|  2.85k|                scan_error::invalid_scanned_value,
 3377|  2.85k|                "Failed to parse integer: No digits found"));
 3378|  2.85k|    }
 3379|  2.85k|}
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3389|     40|{
 3390|     40|    std::basic_string<CharT> output;
 3391|     40|    std::string thsep_indices;
 3392|     40|    auto it = range.begin();
 3393|     40|    bool digit_matched = false;
 3394|     40|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3394:12): [True: 40, False: 0]
  ------------------
 3395|     40|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3395:13): [True: 0, False: 40]
  ------------------
 3396|      0|            thsep_indices.push_back(
 3397|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3398|      0|        }
 3399|     40|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3399:18): [True: 40, False: 0]
  ------------------
 3400|     40|            break;
 3401|     40|        }
 3402|      0|        else {
 3403|      0|            output.push_back(*it);
 3404|      0|            digit_matched = true;
 3405|      0|        }
 3406|     40|    }
 3407|     40|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     40|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 40, False: 0]
  |  |  ------------------
  ------------------
 3408|     40|        return unexpected_scan_error(
 3409|     40|            scan_error::invalid_scanned_value,
 3410|     40|            "Failed to parse integer: No digits found");
 3411|     40|    }
 3412|      0|    return std::tuple{it, output, thsep_indices};
 3413|     40|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|  16.6k|{
 1683|  16.6k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  16.6k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  16.6k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  16.6k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  16.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  16.6k|    }
 1688|  16.6k|    else {
 1689|  16.6k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  16.6k|    }
 1691|  16.6k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|  16.6k|    {
 1490|  16.6k|    }
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1502|  73.7k|    {
 1503|  73.7k|        return sv;
 1504|  73.7k|    }
_ZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEb:
 5950|  3.95k|{
 5951|  3.95k|    using char_type = detail::char_t<Range>;
 5952|  3.95k|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5953|       |
 5954|  3.95k|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5954:9): [True: 3.71k, False: 240]
  ------------------
 5955|  3.71k|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5956|  3.71k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5957|       |
 5958|  3.71k|        if (max_width == 0) {
  ------------------
  |  Branch (5958:13): [True: 3.57k, False: 146]
  ------------------
 5959|  3.57k|            auto it = read_while_code_unit(range, pred);
 5960|       |
 5961|  3.57k|            if (want_skipped_width) {
  ------------------
  |  Branch (5961:17): [True: 136, False: 3.43k]
  ------------------
 5962|    136|                auto prefix_width =
 5963|    136|                    static_cast<std::ptrdiff_t>(
 5964|    136|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5965|    136|                    ranges::distance(range.begin(), it);
 5966|    136|                return result_type{it, prefix_width};
 5967|    136|            }
 5968|  3.43k|            return result_type{it, 0};
 5969|  3.57k|        }
 5970|       |
 5971|    146|        auto max_width_view = take_width(range, max_width);
 5972|    146|        auto w_it = read_while_code_unit(max_width_view, pred);
 5973|       |
 5974|    146|        if (want_skipped_width) {
  ------------------
  |  Branch (5974:13): [True: 146, False: 0]
  ------------------
 5975|    146|            return result_type{w_it.base(), max_width - w_it.count()};
 5976|    146|        }
 5977|      0|        return result_type{w_it.base(), 0};
 5978|    146|    }
 5979|       |
 5980|    240|    const auto fill_chars = fill.template get_code_units<char_type>();
 5981|    240|    if (max_width == 0) {
  ------------------
  |  Branch (5981:9): [True: 132, False: 108]
  ------------------
 5982|    132|        auto it = read_while_code_units(range, fill_chars);
 5983|       |
 5984|    132|        if (want_skipped_width) {
  ------------------
  |  Branch (5984:13): [True: 52, False: 80]
  ------------------
 5985|     52|            auto prefix_width =
 5986|     52|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5987|     52|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5988|     52|            return result_type{it, prefix_width};
 5989|     52|        }
 5990|     80|        return result_type{it, 0};
 5991|    132|    }
 5992|       |
 5993|    108|    auto max_width_view = take_width(range, max_width);
 5994|    108|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5995|       |
 5996|    108|    if (want_skipped_width) {
  ------------------
  |  Branch (5996:9): [True: 108, False: 0]
  ------------------
 5997|    108|        return result_type{w_it.base(), max_width - w_it.count()};
 5998|    108|    }
 5999|      0|    return result_type{w_it.base(), 0};
 6000|    108|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|  3.78k|{
 1976|  3.78k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  3.78k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|  4.02k|{
 1957|  4.02k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  4.02k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  4.02k|    }
 1960|  4.02k|    else {
 1961|  4.02k|        auto first = range.begin();
 1962|  4.02k|        for (; first != range.end(); ++first) {
 1963|  4.02k|            if (pred(*first)) {
 1964|  4.02k|                return first;
 1965|  4.02k|            }
 1966|  4.02k|        }
 1967|  4.02k|        return first;
 1968|  4.02k|    }
 1969|  4.02k|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_SR_LPv0EEEOSH_:
  753|  3.71k|    {
  754|  3.71k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_SR_LPv0EEEOSH_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  4.14k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.14k|              cvref<T> obj = *get<T>(fn);
  745|  4.14k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  4.14k|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.14k|              }
  748|  4.14k|              else {
  749|  4.14k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.14k|              }
  751|  4.14k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRT_EEEElEEEESG_lRKNS0_6detail9fill_typeEbEUlcE_EEDaNS3_7storageE:
  683|  4.14k|    {
  684|  4.14k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  4.14k|            return static_cast<T*>(s.m_cp);
  686|  4.14k|        }
  687|  4.14k|        else if constexpr (std::is_object_v<T>) {
  688|  4.14k|            return static_cast<T*>(s.m_p);
  689|  4.14k|        }
  690|  4.14k|        else {
  691|  4.14k|            return reinterpret_cast<T*>(s.m_fp);
  692|  4.14k|        }
  693|  4.14k|    }
_ZZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEbENKUlcE_clEc:
 5956|  4.14k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_LPv0EEEPKSH_:
  666|  3.71k|        {
  667|  3.71k|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1975|    374|{
 1976|    374|    return read_until_code_unit(range, std::not_fn(pred));
 1977|    374|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1956|    812|{
 1957|    812|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|    812|        return std::find_if(range.begin(), range.end(), pred);
 1959|    812|    }
 1960|    812|    else {
 1961|    812|        auto first = range.begin();
 1962|  17.1k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 16.6k, False: 448]
  ------------------
 1963|  16.6k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 364, False: 16.2k]
  ------------------
 1964|    364|                return first;
 1965|    364|            }
 1966|  16.6k|        }
 1967|    448|        return first;
 1968|    812|    }
 1969|    812|}
_ZN3scn2v34impl21read_while_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEESG_RKT0_:
 2036|    132|{
 2037|    132|    static_assert(ranges::common_range<CodeUnits>);
 2038|       |
 2039|    132|    auto it = range.begin();
 2040|    168|    while (it != range.end()) {
  ------------------
  |  Branch (2040:12): [True: 168, False: 0]
  ------------------
 2041|    168|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2042|    168|                                           needle.size());
 2043|    168|        if (!r) {
  ------------------
  |  Branch (2043:13): [True: 6, False: 162]
  ------------------
 2044|      6|            return it;
 2045|      6|        }
 2046|    162|        static_assert(
 2047|    162|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2048|    162|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2048:13): [True: 126, False: 36]
  ------------------
 2049|    126|            return it;
 2050|    126|        }
 2051|     36|        it = *r;
 2052|     36|    }
 2053|      0|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2054|      0|    return it;
 2055|      0|}
_ZN3scn2v34impl21read_while_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEESI_RKT0_:
 2036|    108|{
 2037|    108|    static_assert(ranges::common_range<CodeUnits>);
 2038|       |
 2039|    108|    auto it = range.begin();
 2040|    156|    while (it != range.end()) {
  ------------------
  |  Branch (2040:12): [True: 126, False: 30]
  ------------------
 2041|    126|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2042|    126|                                           needle.size());
 2043|    126|        if (!r) {
  ------------------
  |  Branch (2043:13): [True: 30, False: 96]
  ------------------
 2044|     30|            return it;
 2045|     30|        }
 2046|     96|        static_assert(
 2047|     96|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2048|     96|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2048:13): [True: 48, False: 48]
  ------------------
 2049|     48|            return it;
 2050|     48|        }
 2051|     48|        it = *r;
 2052|     48|    }
 2053|     30|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  925|     30|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|     30|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2054|     30|    return it;
 2055|     30|}
_ZN3scn2v34impl23skip_classic_whitespaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_b:
 2950|    698|{
 2951|    698|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 0, False: 698]
  ------------------
 2952|      0|        auto it = read_while_classic_space(range);
 2953|      0|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|      0|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|      0|        return it;
 2959|      0|    }
 2960|       |
 2961|    698|    return read_while_classic_space(range);
 2962|    698|}
_ZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2116|    698|{
 2117|    698|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|    698|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|    698|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|    698|        auto buf = make_contiguous_buffer(range);
 2121|    698|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|    698|        return ranges::next(range.begin(),
 2123|    698|                            ranges::distance(buf.view().begin(), it));
 2124|    698|    }
 2125|    698|    else {
 2126|    698|        auto it = range.begin();
 2127|       |
 2128|    698|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|    698|            auto seg = get_contiguous_beginning(range);
 2130|    698|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|    698|                seg_it != seg.end()) {
  ------------------
  |  Branch (2131:17): [True: 0, False: 698]
  ------------------
 2132|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|      0|            }
 2134|    698|            ranges::advance(it, seg.size());
 2135|    698|        }
 2136|       |
 2137|    698|        return read_while_code_point(
 2138|    698|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|    698|    }
 2140|    698|}
_ZN3scn2v34impl24get_contiguous_beginningINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDaT_:
 1038|  1.71k|{
 1039|  1.71k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1039:19): [Folded - Ignored]
  |  Branch (1039:19): [Folded - Ignored]
  ------------------
 1040|  1.71k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1040:19): [Folded - Ignored]
  ------------------
 1041|  1.71k|        return r;
 1042|  1.71k|    }
 1043|  1.71k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1043:24): [Folded - Ignored]
  ------------------
 1044|  1.71k|                           ranges::const_iterator_t<Range>,
 1045|  1.71k|                           typename detail::basic_scan_buffer<
 1046|  1.71k|                               detail::char_t<Range>>::forward_iterator>) {
 1047|  1.71k|        if constexpr (ranges::common_range<Range>) {
 1048|  1.71k|            auto seg = r.begin().contiguous_segment();
 1049|  1.71k|            auto dist =
 1050|  1.71k|                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|  1.71k|            return seg.substr(0, std::min(seg.size(), dist));
 1052|  1.71k|        }
 1053|  1.71k|        else {
 1054|  1.71k|            return r.begin().contiguous_segment();
 1055|  1.71k|        }
 1056|  1.71k|    }
 1057|  1.71k|    else {
 1058|  1.71k|        return std::basic_string_view<detail::char_t<Range>>{};
 1059|  1.71k|    }
 1060|  1.71k|}
_ZN3scn2v34impl21read_while_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2081|  1.38k|{
 2082|  1.38k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  1.38k|}
_ZN3scn2v34impl21read_until_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2060|  1.53k|{
 2061|  1.53k|    auto it = range.begin();
 2062|   148k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 148k, False: 456]
  ------------------
 2063|   148k|        const auto val =
 2064|   148k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   148k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   148k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 142k, False: 5.91k]
  |  |  ------------------
  ------------------
 2066|   142k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   142k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   142k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 1.08k, False: 141k]
  ------------------
 2069|  1.08k|                return it;
 2070|  1.08k|            }
 2071|   142k|        }
 2072|   147k|        it = val.iterator;
 2073|   147k|    }
 2074|       |
 2075|    456|    return it;
 2076|  1.53k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISL_EEE4typeEEESL_:
 1898|   167k|{
 1899|   167k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   167k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   167k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   167k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   167k|    auto it = range.begin();
 1903|   167k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   167k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   167k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.85k, False: 157k]
  |  |  ------------------
  ------------------
 1906|  9.85k|        ++it;
 1907|  9.85k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|  9.85k|        return {it, {}};
 1909|  9.85k|    }
 1910|       |
 1911|   157k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 144k, False: 13.1k]
  ------------------
 1912|   144k|        ++it;
 1913|   144k|        return {it, string_type(1, *range.begin())};
 1914|   144k|    }
 1915|       |
 1916|  13.1k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|  13.1k|    return {it, string_type{range.begin(), it}};
 1918|   157k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_:
 1154|  9.85k|{
 1155|  9.85k|    auto it = input.begin();
 1156|  18.7k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 18.5k, False: 210]
  ------------------
 1157|  18.5k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 9.64k, False: 8.88k]
  ------------------
 1158|  9.64k|            break;
 1159|  9.64k|        }
 1160|  18.5k|    }
 1161|  9.85k|    return it;
 1162|  9.85k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EENS1_20incrementable_traitsISL_E15difference_typeEE4typeERSL_SP_SM_:
  282|  13.1k|    {
  283|  13.1k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  13.1k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SL_EENS1_20incrementable_traitsISL_E15difference_typeEE4typeERSL_SP_SM_:
  226|  13.1k|    {
  227|  13.1k|        constexpr iter_difference_t<I> zero{0};
  228|  13.1k|        iter_difference_t<I> counter{0};
  229|       |
  230|  13.1k|        if (n < zero) {
  ------------------
  |  Branch (230:13): [True: 0, False: 13.1k]
  ------------------
  231|      0|            do {
  232|      0|                --i;
  233|      0|                --counter;  // Yes, really
  234|      0|            } while (++n < zero && i != bound);
  ------------------
  |  Branch (234:22): [True: 0, False: 0]
  |  Branch (234:36): [True: 0, False: 0]
  ------------------
  235|      0|        }
  236|  13.1k|        else {
  237|  41.3k|            while (n-- > zero && i != bound) {
  ------------------
  |  Branch (237:20): [True: 28.3k, False: 13.0k]
  |  Branch (237:34): [True: 28.1k, False: 150]
  ------------------
  238|  28.1k|                ++i;
  239|  28.1k|                ++counter;
  240|  28.1k|            }
  241|  13.1k|        }
  242|       |
  243|  13.1k|        return counter;
  244|  13.1k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_:
  753|    698|    {
  754|    698|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESS_Di:
  743|  3.17k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.17k|              cvref<T> obj = *get<T>(fn);
  745|  3.17k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  3.17k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.17k|              }
  748|  3.17k|              else {
  749|  3.17k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.17k|              }
  751|  3.17k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  3.17k|    {
  684|  3.17k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  3.17k|            return static_cast<T*>(s.m_cp);
  686|  3.17k|        }
  687|  3.17k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  3.17k|            return static_cast<T*>(s.m_p);
  689|  3.17k|        }
  690|  3.17k|        else {
  691|  3.17k|            return reinterpret_cast<T*>(s.m_fp);
  692|  3.17k|        }
  693|  3.17k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2138|  3.17k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_LPv0EEEPSI_:
  661|    698|        {
  662|    698|        }
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|  7.69k|{
 2951|  7.69k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 7.41k, False: 278]
  ------------------
 2952|  7.41k|        auto it = read_while_classic_space(range);
 2953|  7.41k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  7.41k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  7.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.41k]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|  7.41k|        return it;
 2959|  7.41k|    }
 2960|       |
 2961|    278|    return read_while_classic_space(range);
 2962|  7.69k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|  15.4k|{
 2117|  15.4k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  15.4k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  15.4k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  15.4k|        auto buf = make_contiguous_buffer(range);
 2121|  15.4k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  15.4k|        return ranges::next(range.begin(),
 2123|  15.4k|                            ranges::distance(buf.view().begin(), it));
 2124|  15.4k|    }
 2125|  15.4k|    else {
 2126|  15.4k|        auto it = range.begin();
 2127|       |
 2128|  15.4k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|  15.4k|            auto seg = get_contiguous_beginning(range);
 2130|  15.4k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  15.4k|                seg_it != seg.end()) {
 2132|  15.4k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  15.4k|            }
 2134|  15.4k|            ranges::advance(it, seg.size());
 2135|  15.4k|        }
 2136|       |
 2137|  15.4k|        return read_while_code_point(
 2138|  15.4k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  15.4k|    }
 2140|  15.4k|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|  18.4k|{
 1683|  18.4k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  18.4k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  18.4k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  18.4k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  18.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  18.4k|    }
 1688|  18.4k|    else {
 1689|  18.4k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  18.4k|    }
 1691|  18.4k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|  18.4k|    {
 1490|  18.4k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  20.7k|    {
 3040|  20.7k|        reader_error_handler eh{};
 3041|  20.7k|        get_derived().check_specs_impl(specs, eh);
 3042|  20.7k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  20.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.4k, False: 1.30k]
  |  |  ------------------
  ------------------
 3043|  19.4k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  19.4k|        }
 3045|  1.30k|        return {};
 3046|  20.7k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE11get_derivedEv:
 3050|  20.7k|    {
 3051|  20.7k|        return static_cast<Derived&>(*this);
 3052|  20.7k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3484|  20.7k|    {
 3485|  20.7k|        detail::check_int_type_specs(specs, eh);
 3486|  20.7k|    }
_ZNK3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE19skip_ws_before_readEv:
 3034|  2.71k|    {
 3035|  2.71k|        return true;
 3036|  2.71k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEiEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    364|    {
 3539|    364|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    364|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    364|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    364|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    364|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 364]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    364|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    364|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    364|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    364|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 364]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    364|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 364]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    364|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    364|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 356, False: 8]
  |  |  ------------------
  ------------------
 3565|    356|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    356|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    356|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    356|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    356|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 356, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    356|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    356|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    356|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    356|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    356|    }                                                  \
  |  |  |  | 3671|    356|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      8|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      8|            localized_number_formatting_options<CharT>{loc};
 3586|      8|#endif
 3587|       |
 3588|      8|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      8|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      8|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      8|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      8|    }                                                  \
  |  |  |  | 3671|      8|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    264|    {
 3539|    264|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    264|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    264|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    264|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    264|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 264]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    264|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    264|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    264|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    264|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 264]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    264|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 264]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    264|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    264|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 244, False: 20]
  |  |  ------------------
  ------------------
 3565|    244|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    244|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    244|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    244|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    244|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 244]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    244|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    244|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    244|                    parse_integer_digits_without_thsep(
 3567|    244|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    244|                        prefix_result.parsed_base));
 3569|       |
 3570|    244|            auto buf = make_contiguous_buffer(
 3571|    244|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    244|            SCN_TRY(result_it,
  ------------------
  |  | 3672|    244|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    244|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    244|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    244|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 244, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    244|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    244|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    244|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    244|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    244|    }                                                  \
  |  |  |  | 3671|    244|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    244|        }
 3580|       |
 3581|     20|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     20|            localized_number_formatting_options<CharT>{loc};
 3586|     20|#endif
 3587|       |
 3588|     20|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     20|    }                                                  \
  |  |  |  | 3671|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEjEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    364|    {
 3539|    364|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    364|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    364|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    364|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    364|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 364]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    364|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    364|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    364|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    364|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 364]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    364|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 364]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    364|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    364|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 356, False: 8]
  |  |  ------------------
  ------------------
 3565|    356|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    356|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    356|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    356|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    356|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 356, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    356|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    356|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    356|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    356|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    356|    }                                                  \
  |  |  |  | 3671|    356|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      8|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      8|            localized_number_formatting_options<CharT>{loc};
 3586|      8|#endif
 3587|       |
 3588|      8|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      8|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      8|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      8|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      8|    }                                                  \
  |  |  |  | 3671|      8|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    264|    {
 3539|    264|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    264|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    264|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    264|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    264|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 264]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    264|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    264|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    264|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    264|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 264]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    264|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 264]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    264|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    264|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 244, False: 20]
  |  |  ------------------
  ------------------
 3565|    244|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    244|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    244|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    244|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    244|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 244]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    244|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    244|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    244|                    parse_integer_digits_without_thsep(
 3567|    244|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    244|                        prefix_result.parsed_base));
 3569|       |
 3570|    244|            auto buf = make_contiguous_buffer(
 3571|    244|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    244|            SCN_TRY(result_it,
  ------------------
  |  | 3672|    244|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    244|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    244|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    244|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 244, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    244|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    244|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    244|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    244|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    244|    }                                                  \
  |  |  |  | 3671|    244|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    244|        }
 3580|       |
 3581|     20|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     20|            localized_number_formatting_options<CharT>{loc};
 3586|     20|#endif
 3587|       |
 3588|     20|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     20|    }                                                  \
  |  |  |  | 3671|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEmEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    334|    {
 3539|    334|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    334|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    334|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    334|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    334|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 334]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    334|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    334|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    334|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    334|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 334]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    334|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 334]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    334|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    334|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 334, False: 0]
  |  |  ------------------
  ------------------
 3565|    334|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    334|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    334|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    334|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    334|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 334, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    334|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    334|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    334|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    334|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    334|    }                                                  \
  |  |  |  | 3671|    334|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEmEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    934|    {
 3539|    934|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    934|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    934|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    934|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    934|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 934]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    934|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    934|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    934|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    934|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 934]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    934|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 934]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    934|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    934|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 934, False: 0]
  |  |  ------------------
  ------------------
 3565|    934|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    934|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    934|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    934|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    934|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 934]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    934|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    934|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    934|                    parse_integer_digits_without_thsep(
 3567|    934|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    934|                        prefix_result.parsed_base));
 3569|       |
 3570|    934|            auto buf = make_contiguous_buffer(
 3571|    934|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    934|            SCN_TRY(result_it,
  ------------------
  |  | 3672|    934|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    934|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    934|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    934|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 934, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    934|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    934|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    934|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    934|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    934|    }                                                  \
  |  |  |  | 3671|    934|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    934|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  10.3k|    {
 3040|  10.3k|        reader_error_handler eh{};
 3041|  10.3k|        get_derived().check_specs_impl(specs, eh);
 3042|  10.3k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  10.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.69k, False: 678]
  |  |  ------------------
  ------------------
 3043|  9.69k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  9.69k|        }
 3045|    678|        return {};
 3046|  10.3k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3050|  10.3k|    {
 3051|  10.3k|        return static_cast<Derived&>(*this);
 3052|  10.3k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4144|  10.3k|    {
 4145|  10.3k|        detail::check_float_type_specs(specs, eh);
 4146|  10.3k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3034|  1.38k|    {
 3035|  1.38k|        return true;
 3036|  1.38k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4216|    654|    {
 4217|    654|        unsigned options{};
 4218|    654|        if (specs.localized) {
  ------------------
  |  Branch (4218:13): [True: 44, False: 610]
  ------------------
 4219|     44|            options |= float_reader_base::allow_thsep;
 4220|     44|        }
 4221|       |
 4222|    654|        SCN_GCC_COMPAT_PUSH
 4223|    654|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4224|       |
 4225|    654|        switch (specs.type) {
 4226|     30|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4226:13): [True: 30, False: 624]
  ------------------
 4227|     30|                return options | float_reader_base::allow_fixed;
 4228|       |
 4229|      6|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4229:13): [True: 6, False: 648]
  ------------------
 4230|      6|                return options | float_reader_base::allow_scientific;
 4231|       |
 4232|     42|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4232:13): [True: 42, False: 612]
  ------------------
 4233|     42|                return options | float_reader_base::allow_hex;
 4234|       |
 4235|      6|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4235:13): [True: 6, False: 648]
  ------------------
 4236|      6|                return options | float_reader_base::allow_scientific |
 4237|      6|                       float_reader_base::allow_fixed;
 4238|       |
 4239|    570|            case detail::presentation_type::none:
  ------------------
  |  Branch (4239:13): [True: 570, False: 84]
  ------------------
 4240|    570|                return options | float_reader_base::allow_scientific |
 4241|    570|                       float_reader_base::allow_fixed |
 4242|    570|                       float_reader_base::allow_hex;
 4243|       |
 4244|      0|            default:
  ------------------
  |  Branch (4244:13): [True: 0, False: 654]
  ------------------
 4245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4246|    654|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4247|    654|        }
 4248|       |
 4249|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4250|    654|    }
_ZN3scn2v34impl12float_readerIcEC2Ej:
 3659|    654|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2Ev:
 1770|  1.36k|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIcEC2Ev:
 1531|  2.72k|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIcE17handle_separatorsEv:
 4056|    972|    {
 4057|    972|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4057:13): [True: 972, False: 0]
  ------------------
 4058|    972|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4058:13): [True: 972, False: 0]
  ------------------
 4059|    972|            return;
 4060|    972|        }
 4061|       |
 4062|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4063|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4063:13): [True: 0, False: 0]
  ------------------
 4064|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4064:27): [True: 0, False: 0]
  ------------------
 4065|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4065:21): [True: 0, False: 0]
  ------------------
 4066|      0|                    ch = CharT{'.'};
 4067|      0|                }
 4068|      0|            }
 4069|      0|        }
 4070|       |
 4071|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4071:13): [True: 0, False: 0]
  ------------------
 4072|      0|            return;
 4073|      0|        }
 4074|       |
 4075|      0|        auto first =
 4076|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4077|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4077:13): [True: 0, False: 0]
  ------------------
 4078|      0|            return;
 4079|      0|        }
 4080|       |
 4081|      0|        m_thsep_indices.push_back(
 4082|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4083|       |
 4084|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4084:31): [True: 0, False: 0]
  ------------------
 4085|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4085:17): [True: 0, False: 0]
  ------------------
 4086|      0|                *first++ = std::move(*it);
 4087|      0|            }
 4088|      0|            else {
 4089|      0|                m_thsep_indices.push_back(
 4090|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4091|      0|            }
 4092|      0|        }
 4093|       |
 4094|      0|        str.erase(first, str.end());
 4095|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1586|    992|    {
 1587|    992|        return m_storage.has_value();
 1588|    992|    }
_ZNR3scn2v34impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1591|    496|    {
 1592|    496|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|    496|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    496|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|    496|        return *m_storage;
 1594|    496|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EclESC_SJ_SL_:
  762|    362|    {
  763|    362|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    362|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    362|    }
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3678|      8|    {
 3679|      8|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|      8|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|      8|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 8]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|      8|        return read_source_impl(range);
 3685|      8|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_:
 3704|    362|    {
 3705|    362|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|    362|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    362|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    362|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    362|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 362]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    362|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    362|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|    362|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|    362|        auto it = sign_result.first;
 3708|    362|        m_sign = sign_result.second;
 3709|       |
 3710|    362|        auto digits_begin = it;
 3711|    362|        auto r = ranges::subrange{it, range.end()};
 3712|    362|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|    362|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|    362|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3715|    362|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|    362|                SCN_TRY_ASSIGN(
 3717|    362|                    it,
 3718|    362|                    do_read_source_impl(
 3719|    362|                        r,
 3720|    362|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|    362|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|    362|            }
 3723|    362|            else {
 3724|    362|                auto cb = [&](const auto& rr)
 3725|    362|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|    362|                    auto res = read_all(rr);
 3727|    362|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|    362|                        return unexpected_scan_error(
 3729|    362|                            scan_error::invalid_scanned_value,
 3730|    362|                            "Invalid float value");
 3731|    362|                    }
 3732|    362|                    return res;
 3733|    362|                };
 3734|    362|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3735|    362|            }
 3736|    362|        }
 3737|    362|        else {
 3738|    362|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|    362|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    362|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    362|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 362, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    362|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    362|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    362|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    362|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    362|    }                                                  \
  |  | 3671|    362|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    362|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3739|      0|                it,
 3740|      0|                do_read_source_impl(
 3741|      0|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|      0|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|      0|        }
 3744|       |
 3745|      0|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|      0|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 0, False: 0]
  |  Branch (3747:48): [True: 0, False: 0]
  ------------------
 3748|      0|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 0, False: 0]
  ------------------
 3749|      0|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 0, False: 0]
  ------------------
 3750|      0|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|      0|        }
 3752|       |
 3753|      0|        handle_separators();
 3754|       |
 3755|      0|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 0]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|      0|        return it;
 3768|      0|    }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEZNS3_16read_source_implISG_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_EUlRKSO_E_ZNSK_ISG_EEST_SO_EUlSV_E0_EEST_SO_OT0_OT1_:
 3999|    362|    {
 4000|    362|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|    362|        const bool allowed_nonhex =
 4002|    362|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|    362|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|    362|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 362, False: 0]
  |  Branch (4005:45): [True: 0, False: 362]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|    362|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 362]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|    362|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 362, False: 0]
  |  Branch (4014:45): [True: 0, False: 362]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|    362|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 362]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|    362|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 346, False: 16]
  |  Branch (4021:28): [True: 6, False: 340]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|      6|            auto it = range.begin();
 4025|       |
 4026|      6|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 0, False: 6]
  ------------------
 4027|      0|                m_kind = float_kind::hex_with_prefix;
 4028|      0|                it = *r;
 4029|      0|            }
 4030|      6|            else {
 4031|      6|                m_kind = float_kind::hex_without_prefix;
 4032|      6|            }
 4033|       |
 4034|      6|            return read_hex(ranges::subrange{it, range.end()});
 4035|      6|        }
 4036|    356|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 16, False: 340]
  |  Branch (4036:29): [True: 16, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|     16|            m_kind = float_kind::generic;
 4040|     16|            return read_regular_float(range);
 4041|     16|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|    340|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    340|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 340]
  |  |  ------------------
  ------------------
 4047|      0|            m_kind = float_kind::hex_with_prefix;
 4048|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4049|      0|        }
 4050|       |
 4051|    340|        m_kind = float_kind::generic;
 4052|    340|        return read_regular(range);
 4053|    340|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3810|    362|    {
 3811|    362|        auto it = range.begin();
 3812|    362|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 362, False: 0]
  ------------------
 3813|    362|            return unexpected(r.error());
 3814|    362|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3833|    362|    {
 3834|    362|        auto it = range.begin();
 3835|    362|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 362, False: 0]
  ------------------
 3836|    362|            return r.transform_error(map_parse_error_to_scan_error(
 3837|    362|                scan_error::invalid_scanned_value,
 3838|    362|                "Invalid floating-point NaN value"));
 3839|    362|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3803|    346|    {
 3804|    346|        return read_matching_string_classic_nocase(range, "0x");
 3805|    346|    }
_ZN3scn2v34impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3903|      6|    {
 3904|      6|        auto it = range.begin();
 3905|       |
 3906|      6|        std::ptrdiff_t digits_count = 0;
 3907|      6|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3908|      6|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6, False: 0]
  |  |  ------------------
  ------------------
 3909|      6|            return r.transform_error(map_parse_error_to_scan_error(
 3910|      6|                scan_error::invalid_scanned_value,
 3911|      6|                "Invalid hexadecimal floating-point value"));
 3912|      6|        }
 3913|      0|        else {
 3914|      0|            digits_count += ranges::distance(it, *r);
 3915|      0|            it = *r;
 3916|      0|        }
 3917|       |
 3918|      0|        m_integral_part_length = digits_count;
 3919|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3919:18): [True: 0, False: 0]
  ------------------
 3920|      0|                                             m_locale_options.decimal_point)) {
 3921|      0|            it = *r;
 3922|      0|        }
 3923|       |
 3924|      0|        if (auto r =
  ------------------
  |  Branch (3924:18): [True: 0, False: 0]
  ------------------
 3925|      0|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3926|      0|            digits_count += ranges::distance(it, *r);
 3927|      0|            it = *r;
 3928|      0|        }
 3929|       |
 3930|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3931|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3932|      0|                                         "No significand digits in hexfloat");
 3933|      0|        }
 3934|       |
 3935|      0|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3936|       |
 3937|      0|        return it;
 3938|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3788|      6|    {
 3789|      6|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6]
  |  |  |  Branch (859:45): [True: 0, False: 6]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3790|      6|                         thsep_allowed)) {
 3791|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3792|      0|                return char_to_int(ch) < 16 ||
 3793|      0|                       ch == m_locale_options.thousands_sep;
 3794|      0|            });
 3795|      0|        }
 3796|       |
 3797|      6|        return read_while1_code_unit(
 3798|      6|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3799|      6|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_LPv0EEEOSR_:
  753|      6|    {
  754|      6|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEcE_clES12_c:
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|      6|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|      6|                  obj(static_cast<decltype(args)>(args)...);
  747|      6|              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlcE0_EEDaNS3_7storageE:
  683|      6|    {
  684|      6|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|      6|            return static_cast<T*>(s.m_cp);
  686|      6|        }
  687|      6|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|      6|            return static_cast<T*>(s.m_p);
  689|      6|        }
  690|      6|        else {
  691|      6|            return reinterpret_cast<T*>(s.m_fp);
  692|      6|        }
  693|      6|    }
_ZZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlcE0_clEc:
 3798|      6|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_LPv0EEEPSR_:
  661|      6|        {
  662|      6|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3943|    356|    {
 3944|    356|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|    356|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 344, False: 12]
  |  Branch (3945:50): [True: 0, False: 344]
  ------------------
 3946|       |
 3947|    356|        auto it = ranges::begin(range);
 3948|    356|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|    356|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|    356|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    356|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 356, False: 0]
  |  |  ------------------
  ------------------
 3952|    356|            return r.transform_error(
 3953|    356|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|    356|                                              "Invalid floating-point value"));
 3955|    356|        }
 3956|      0|        else {
 3957|      0|            digits_count += ranges::distance(it, *r);
 3958|      0|            it = *r;
 3959|      0|        }
 3960|       |
 3961|      0|        m_integral_part_length = digits_count;
 3962|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 0, False: 0]
  ------------------
 3963|      0|                                             m_locale_options.decimal_point)) {
 3964|      0|            it = *r;
 3965|      0|        }
 3966|       |
 3967|      0|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 0]
  ------------------
 3968|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|      0|        auto beg_exp_it = it;
 3979|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 0, False: 0]
  ------------------
 3980|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|      0|        }
 3982|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 0, False: 0]
  |  Branch (3982:29): [True: 0, False: 0]
  ------------------
 3983|      0|            return unexpected_scan_error(
 3984|      0|                scan_error::invalid_scanned_value,
 3985|      0|                "No exponent given to scientific float");
 3986|      0|        }
 3987|       |
 3988|      0|        m_kind =
 3989|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 0, False: 0]
  ------------------
 3990|       |
 3991|      0|        return it;
 3992|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3773|    356|    {
 3774|    356|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|    356|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 356]
  |  |  |  Branch (859:45): [True: 0, False: 356]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|    356|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|    356|        return read_while1_code_unit(
 3783|    356|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|    356|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_LPv0EEEOSR_:
  753|    356|    {
  754|    356|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEcE_clES12_c:
  743|    356|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    356|              cvref<T> obj = *get<T>(fn);
  745|    356|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    356|                  obj(static_cast<decltype(args)>(args)...);
  747|    356|              }
  748|    356|              else {
  749|    356|                  return obj(static_cast<decltype(args)>(args)...);
  750|    356|              }
  751|    356|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlcE0_EEDaNS3_7storageE:
  683|    356|    {
  684|    356|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    356|            return static_cast<T*>(s.m_cp);
  686|    356|        }
  687|    356|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    356|            return static_cast<T*>(s.m_p);
  689|    356|        }
  690|    356|        else {
  691|    356|            return reinterpret_cast<T*>(s.m_fp);
  692|    356|        }
  693|    356|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlcE0_clEc:
 3783|    356|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_LPv0EEEPSR_:
  661|    356|        {
  662|    356|        }
_ZN3scn2v34impl12float_readerIcE11read_sourceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3664|    354|    {
 3665|    354|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|    354|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 354]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|    354|        return read_source_impl(range);
 3671|    354|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|    998|    {
  763|    998|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    998|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    998|    }
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3678|     36|    {
 3679|     36|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|     36|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|     36|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 36]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|     36|        return read_source_impl(range);
 3685|     36|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3704|    998|    {
 3705|    998|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|    998|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    998|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    998|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    998|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 998]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    998|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    998|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|    998|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|    998|        auto it = sign_result.first;
 3708|    998|        m_sign = sign_result.second;
 3709|       |
 3710|    998|        auto digits_begin = it;
 3711|    998|        auto r = ranges::subrange{it, range.end()};
 3712|    998|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|    998|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|    998|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  1.99k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 998]
  |  |  |  Branch (859:45): [True: 0, False: 998]
  |  |  |  Branch (859:45): [True: 0, False: 998]
  |  |  ------------------
  ------------------
 3715|    998|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|      0|    }                                                  \
  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3717|      0|                    it,
 3718|      0|                    do_read_source_impl(
 3719|      0|                        r,
 3720|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|      0|            }
 3723|    998|            else {
 3724|    998|                auto cb = [&](const auto& rr)
 3725|    998|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|    998|                    auto res = read_all(rr);
 3727|    998|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|    998|                        return unexpected_scan_error(
 3729|    998|                            scan_error::invalid_scanned_value,
 3730|    998|                            "Invalid float value");
 3731|    998|                    }
 3732|    998|                    return res;
 3733|    998|                };
 3734|    998|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3667|    998|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    998|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    998|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 26, False: 972]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|     26|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|     26|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|     26|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|     26|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|     26|    }                                                  \
  |  | 3671|    998|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    998|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3735|    972|            }
 3736|    998|        }
 3737|    972|        else {
 3738|    972|            SCN_TRY_ASSIGN(
 3739|    972|                it,
 3740|    972|                do_read_source_impl(
 3741|    972|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|    972|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|    972|        }
 3744|       |
 3745|    972|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    972|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    972|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|    972|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 972, False: 0]
  |  Branch (3747:48): [True: 972, False: 0]
  ------------------
 3748|    972|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 972, False: 0]
  ------------------
 3749|    972|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 972, False: 0]
  ------------------
 3750|    972|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|    972|        }
 3752|       |
 3753|    972|        handle_separators();
 3754|       |
 3755|    972|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 972]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|    972|        return it;
 3768|    972|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3810|    998|    {
 3811|    998|        auto it = range.begin();
 3812|    998|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 998, False: 0]
  ------------------
 3813|    998|            return unexpected(r.error());
 3814|    998|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|    998|    {
 3834|    998|        auto it = range.begin();
 3835|    998|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 998, False: 0]
  ------------------
 3836|    998|            return r.transform_error(map_parse_error_to_scan_error(
 3837|    998|                scan_error::invalid_scanned_value,
 3838|    998|                "Invalid floating-point NaN value"));
 3839|    998|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3803|    972|    {
 3804|    972|        return read_matching_string_classic_nocase(range, "0x");
 3805|    972|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|     26|{
 1996|     26|    auto it = read_while_code_unit(range, pred);
 1997|     26|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 26, False: 0]
  ------------------
 1998|     26|        return unexpected(parse_error::error);
 1999|     26|    }
 2000|      0|    return it;
 2001|     26|}
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3943|     26|    {
 3944|     26|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|     26|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 8, False: 18]
  |  Branch (3945:50): [True: 6, False: 2]
  ------------------
 3946|       |
 3947|     26|        auto it = ranges::begin(range);
 3948|     26|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|     26|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|     26|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26, False: 0]
  |  |  ------------------
  ------------------
 3952|     26|            return r.transform_error(
 3953|     26|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|     26|                                              "Invalid floating-point value"));
 3955|     26|        }
 3956|      0|        else {
 3957|      0|            digits_count += ranges::distance(it, *r);
 3958|      0|            it = *r;
 3959|      0|        }
 3960|       |
 3961|      0|        m_integral_part_length = digits_count;
 3962|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 0, False: 0]
  ------------------
 3963|      0|                                             m_locale_options.decimal_point)) {
 3964|      0|            it = *r;
 3965|      0|        }
 3966|       |
 3967|      0|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 0]
  ------------------
 3968|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|      0|        auto beg_exp_it = it;
 3979|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 0, False: 0]
  ------------------
 3980|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|      0|        }
 3982|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 0, False: 0]
  |  Branch (3982:29): [True: 0, False: 0]
  ------------------
 3983|      0|            return unexpected_scan_error(
 3984|      0|                scan_error::invalid_scanned_value,
 3985|      0|                "No exponent given to scientific float");
 3986|      0|        }
 3987|       |
 3988|      0|        m_kind =
 3989|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 0, False: 0]
  ------------------
 3990|       |
 3991|      0|        return it;
 3992|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3773|     26|    {
 3774|     26|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 26]
  |  |  |  Branch (859:45): [True: 0, False: 26]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|     26|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|     26|        return read_while1_code_unit(
 3783|     26|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|     26|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_:
  753|     26|    {
  754|     26|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESU_c:
  743|     26|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     26|              cvref<T> obj = *get<T>(fn);
  745|     26|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|     26|                  obj(static_cast<decltype(args)>(args)...);
  747|     26|              }
  748|     26|              else {
  749|     26|                  return obj(static_cast<decltype(args)>(args)...);
  750|     26|              }
  751|     26|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  683|     26|    {
  684|     26|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|     26|            return static_cast<T*>(s.m_cp);
  686|     26|        }
  687|     26|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|     26|            return static_cast<T*>(s.m_p);
  689|     26|        }
  690|     26|        else {
  691|     26|            return reinterpret_cast<T*>(s.m_fp);
  692|     26|        }
  693|     26|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3783|     26|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_LPv0EEEPSJ_:
  661|     26|        {
  662|     26|        }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3999|    998|    {
 4000|    998|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|    998|        const bool allowed_nonhex =
 4002|    998|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|    998|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|    998|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 998, False: 0]
  |  Branch (4005:45): [True: 0, False: 998]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|    998|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 998]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|    998|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 998, False: 0]
  |  Branch (4014:45): [True: 0, False: 998]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|    998|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 998]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|    998|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 972, False: 26]
  |  Branch (4021:28): [True: 36, False: 936]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|     36|            auto it = range.begin();
 4025|       |
 4026|     36|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 0, False: 36]
  ------------------
 4027|      0|                m_kind = float_kind::hex_with_prefix;
 4028|      0|                it = *r;
 4029|      0|            }
 4030|     36|            else {
 4031|     36|                m_kind = float_kind::hex_without_prefix;
 4032|     36|            }
 4033|       |
 4034|     36|            return read_hex(ranges::subrange{it, range.end()});
 4035|     36|        }
 4036|    962|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 26, False: 936]
  |  Branch (4036:29): [True: 26, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|     26|            m_kind = float_kind::generic;
 4040|     26|            return read_regular_float(range);
 4041|     26|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|    936|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    936|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 936]
  |  |  ------------------
  ------------------
 4047|      0|            m_kind = float_kind::hex_with_prefix;
 4048|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4049|      0|        }
 4050|       |
 4051|    936|        m_kind = float_kind::generic;
 4052|    936|        return read_regular(range);
 4053|    936|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3725|    972|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|    972|                    auto res = read_all(rr);
 3727|    972|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|    972|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 972]
  |  |  ------------------
  ------------------
 3728|      0|                        return unexpected_scan_error(
 3729|      0|                            scan_error::invalid_scanned_value,
 3730|      0|                            "Invalid float value");
 3731|      0|                    }
 3732|    972|                    return res;
 3733|    972|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|    972|{
 1839|    972|    return ranges::next(range.begin(), range.end());
 1840|    972|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|    972|    {
  313|    972|        ranges::advance(x, bound);
  314|    972|        return x;
  315|    972|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|    972|    {
  275|    972|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|    972|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|  1.02k|    {
  190|  1.02k|        i = std::move(bound);
  191|  1.02k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEvOT_:
 1576|    972|    {
 1577|    972|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|    972|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|    972|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1620|    972|    {
 1621|    972|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|    972|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|    972|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|    972|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|    972|            m_storage.reset();
 1627|    972|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|    972|        }
 1629|    972|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|    972|                                          std::basic_string<CharT>>) {
 1631|    972|            m_storage.emplace(SCN_FWD(range));
 1632|    972|            m_view = string_view_type{*m_storage};
 1633|    972|        }
 1634|    972|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|    972|                                          typename detail::basic_scan_buffer<
 1636|    972|                                              value_t>::forward_iterator> &&
 1637|    972|                           ranges::common_range<Range>) {
 1638|    972|            auto beg_seg = range.begin().contiguous_segment();
 1639|    972|            auto end_seg = range.end().contiguous_segment();
 1640|    972|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|    972|                             detail::to_address(end_seg.end()))) {
 1642|    972|                auto& str = m_storage.emplace();
 1643|    972|                str.reserve(range.end().position() - range.begin().position());
 1644|    972|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|    972|                m_view = string_view_type{str};
 1646|    972|                return;
 1647|    972|            }
 1648|       |
 1649|    972|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|    972|                                                            end_seg.data());
 1651|    972|            m_storage.reset();
 1652|    972|        }
 1653|    972|        else {
 1654|    972|            auto& str = m_storage.emplace();
 1655|    972|            if constexpr (ranges::sized_range<Range>) {
 1656|    972|                str.reserve(range.size());
 1657|    972|            }
 1658|    972|            if constexpr (ranges::common_range<Range>) {
 1659|    972|                std::copy(ranges::begin(range), ranges::end(range),
 1660|    972|                          std::back_inserter(str));
 1661|    972|            }
 1662|    972|            else {
 1663|    972|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|    972|                     ++it) {
 1665|    972|                    str.push_back(*it);
 1666|    972|                }
 1667|    972|            }
 1668|    972|            m_view = string_view_type{str};
 1669|    972|        }
 1670|    972|    }
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3664|    962|    {
 3665|    962|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|    962|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 962]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|    962|        return read_source_impl(range);
 3671|    962|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3690|    972|    {
 3691|    972|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    972|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    972|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|    972|        const std::ptrdiff_t sign_len =
 3694|    972|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 0, False: 972]
  ------------------
 3695|       |
 3696|    972|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|    972|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    972|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    972|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    972|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 972, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    972|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    972|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    972|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    972|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    972|    }                                                  \
  |  |  |  | 3671|    972|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|      0|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|    972|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 4169|    362|    {
 4170|    362|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|    362|#if !SCN_DISABLE_LOCALE
 4173|    362|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 8, False: 354]
  ------------------
 4174|      8|            return read_impl<Range>(
 4175|      8|                range, rd,
 4176|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4177|      8|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|      8|                },
 4179|      8|                value, loc);
 4180|      8|        }
 4181|    354|#endif
 4182|       |
 4183|    354|        return read_impl<Range>(
 4184|    354|            range, rd,
 4185|    354|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    354|                return r.read_source(SCN_FWD(args)...);
 4187|    354|            },
 4188|    354|            value);
 4189|    362|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNS1_12float_readerIcEENS1_12function_refIFSM_SP_SH_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|    362|    {
 4206|    362|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|    362|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    362|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 362, False: 0]
  |  |  ------------------
  ------------------
 4208|    362|            return unexpected(r.error());
 4209|    362|        }
 4210|       |
 4211|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|      0|        return ranges::next(range.begin(), n);
 4213|      0|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_LPv0EEEOSU_:
  753|      8|    {
  754|      8|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_LPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1D_SC_SJ_SL_:
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|      8|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|      8|                  obj(static_cast<decltype(args)>(args)...);
  747|      8|              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|      8|    {
  684|      8|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|      8|            return static_cast<T*>(s.m_cp);
  686|      8|        }
  687|      8|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|      8|            return static_cast<T*>(s.m_p);
  689|      8|        }
  690|      8|        else {
  691|      8|            return reinterpret_cast<T*>(s.m_fp);
  692|      8|        }
  693|      8|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSD_ST_EEEDaSW_SZ_:
 4176|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4177|      8|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|      8|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSL_:
  661|      8|        {
  662|      8|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_LPv0EEEOSU_:
  753|    354|    {
  754|    354|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_LPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1D_SC_SJ_SL_:
  743|    354|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    354|              cvref<T> obj = *get<T>(fn);
  745|    354|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    354|                  obj(static_cast<decltype(args)>(args)...);
  747|    354|              }
  748|    354|              else {
  749|    354|                  return obj(static_cast<decltype(args)>(args)...);
  750|    354|              }
  751|    354|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|    354|    {
  684|    354|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    354|            return static_cast<T*>(s.m_cp);
  686|    354|        }
  687|    354|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    354|            return static_cast<T*>(s.m_p);
  689|    354|        }
  690|    354|        else {
  691|    354|            return reinterpret_cast<T*>(s.m_fp);
  692|    354|        }
  693|    354|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSD_ST_EEEDaSW_SZ_:
 4185|    354|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    354|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    354|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|    354|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSL_:
  661|    354|        {
  662|    354|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|    292|    {
 4170|    292|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|    292|#if !SCN_DISABLE_LOCALE
 4173|    292|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 36, False: 256]
  ------------------
 4174|     36|            return read_impl<Range>(
 4175|     36|                range, rd,
 4176|     36|                [](float_reader<CharT>& r, auto&&... args) {
 4177|     36|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|     36|                },
 4179|     36|                value, loc);
 4180|     36|        }
 4181|    256|#endif
 4182|       |
 4183|    256|        return read_impl<Range>(
 4184|    256|            range, rd,
 4185|    256|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    256|                return r.read_source(SCN_FWD(args)...);
 4187|    256|            },
 4188|    256|            value);
 4189|    292|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|    998|    {
 4206|    998|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|    998|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    998|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26, False: 972]
  |  |  ------------------
  ------------------
 4208|     26|            return unexpected(r.error());
 4209|     26|        }
 4210|       |
 4211|    972|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|    972|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    972|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    972|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    972|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 972, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    972|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    972|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    972|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    972|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    972|    }                                                  \
  |  |  |  | 3671|    972|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|      0|        return ranges::next(range.begin(), n);
 4213|    972|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|     36|    {
  754|     36|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|     36|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     36|              cvref<T> obj = *get<T>(fn);
  745|     36|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|     36|                  obj(static_cast<decltype(args)>(args)...);
  747|     36|              }
  748|     36|              else {
  749|     36|                  return obj(static_cast<decltype(args)>(args)...);
  750|     36|              }
  751|     36|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|     36|    {
  684|     36|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|     36|            return static_cast<T*>(s.m_cp);
  686|     36|        }
  687|     36|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|     36|            return static_cast<T*>(s.m_p);
  689|     36|        }
  690|     36|        else {
  691|     36|            return reinterpret_cast<T*>(s.m_fp);
  692|     36|        }
  693|     36|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|     36|                [](float_reader<CharT>& r, auto&&... args) {
 4177|     36|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|     36|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|     36|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|     36|        {
  662|     36|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|    256|    {
  754|    256|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|    256|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    256|              cvref<T> obj = *get<T>(fn);
  745|    256|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    256|                  obj(static_cast<decltype(args)>(args)...);
  747|    256|              }
  748|    256|              else {
  749|    256|                  return obj(static_cast<decltype(args)>(args)...);
  750|    256|              }
  751|    256|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|    256|    {
  684|    256|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    256|            return static_cast<T*>(s.m_cp);
  686|    256|        }
  687|    256|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    256|            return static_cast<T*>(s.m_p);
  689|    256|        }
  690|    256|        else {
  691|    256|            return reinterpret_cast<T*>(s.m_fp);
  692|    256|        }
  693|    256|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|    256|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    256|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    256|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|    256|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|    256|        {
  662|    256|        }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEcEEDav:
 5808|  11.0k|{
 5809|  11.0k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  11.0k|        return reader_impl_for_bool<CharT>{};
 5811|  11.0k|    }
 5812|  11.0k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  11.0k|        return reader_impl_for_char<CharT>{};
 5814|  11.0k|    }
 5815|  11.0k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  11.0k|        return reader_impl_for_wchar<CharT>{};
 5817|  11.0k|    }
 5818|  11.0k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  11.0k|        return reader_impl_for_code_point<CharT>{};
 5820|  11.0k|    }
 5821|  11.0k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  11.0k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  11.0k|        return reader_impl_for_string<CharT>{};
 5824|  11.0k|    }
 5825|  11.0k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5825:24): [Folded - Ignored]
  |  Branch (5825:24): [Folded - Ignored]
  ------------------
 5826|  11.0k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  11.0k|        return reader_impl_for_string<CharT>{};
 5828|  11.0k|    }
 5829|  11.0k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  11.0k|                       std::is_same_v<T, wregex_matches>) {
 5831|  11.0k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  11.0k|    }
 5833|  11.0k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  11.0k|        return reader_impl_for_voidptr<CharT>{};
 5835|  11.0k|    }
 5836|  11.0k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  11.0k|        return reader_impl_for_float<CharT>{};
 5838|  11.0k|    }
 5839|  11.0k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  11.0k|                       !std::is_same_v<T, wchar_t> &&
 5841|  11.0k|                       !std::is_same_v<T, char32_t> &&
 5842|  11.0k|                       !std::is_same_v<T, bool>) {
 5843|  11.0k|        return reader_impl_for_int<CharT>{};
 5844|  11.0k|    }
 5845|  11.0k|    else {
 5846|  11.0k|        return reader_impl_for_monostate<CharT>{};
 5847|  11.0k|    }
 5848|  11.0k|}
_ZN3scn2v34impl13string_readerIcEC2Ev:
 5205|  33.0k|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  30.9k|    {
 3040|  30.9k|        reader_error_handler eh{};
 3041|  30.9k|        get_derived().check_specs_impl(specs, eh);
 3042|  30.9k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  30.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 384, False: 30.5k]
  |  |  ------------------
  ------------------
 3043|    384|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|    384|        }
 3045|  30.5k|        return {};
 3046|  30.9k|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11get_derivedEv:
 3050|  30.9k|    {
 3051|  30.9k|        return static_cast<Derived&>(*this);
 3052|  30.9k|    }
_ZN3scn2v34impl13string_readerIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5209|  30.9k|    {
 5210|  30.9k|        detail::check_string_type_specs(specs, eh);
 5211|       |
 5212|  30.9k|        SCN_GCC_PUSH
 5213|  30.9k|        SCN_GCC_IGNORE("-Wswitch")
 5214|  30.9k|        SCN_GCC_IGNORE("-Wswitch-default")
 5215|       |
 5216|  30.9k|        SCN_CLANG_PUSH
 5217|  30.9k|        SCN_CLANG_IGNORE("-Wswitch")
 5218|  30.9k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5219|       |
 5220|  30.9k|        switch (specs.type) {
  ------------------
  |  Branch (5220:17): [True: 378, False: 30.5k]
  ------------------
 5221|  1.70k|            case detail::presentation_type::none:
  ------------------
  |  Branch (5221:13): [True: 1.70k, False: 29.2k]
  ------------------
 5222|  1.70k|                m_type = reader_type::word;
 5223|  1.70k|                break;
 5224|       |
 5225|    528|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5225:13): [True: 528, False: 30.4k]
  ------------------
 5226|    528|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5226:21): [True: 84, False: 444]
  ------------------
 5227|    528|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5227:21): [True: 222, False: 222]
  ------------------
 5228|    306|                    m_type = reader_type::custom_word;
 5229|    306|                }
 5230|    222|                else {
 5231|    222|                    m_type = reader_type::word;
 5232|    222|                }
 5233|    528|                break;
 5234|      0|            }
 5235|       |
 5236|    108|            case detail::presentation_type::character:
  ------------------
  |  Branch (5236:13): [True: 108, False: 30.8k]
  ------------------
 5237|    108|                m_type = reader_type::character;
 5238|    108|                break;
 5239|       |
 5240|  5.61k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5240:13): [True: 5.61k, False: 25.3k]
  ------------------
 5241|  5.61k|                m_type = reader_type::character_set;
 5242|  5.61k|                break;
 5243|       |
 5244|  19.0k|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5244:13): [True: 19.0k, False: 11.9k]
  ------------------
 5245|  19.0k|                m_type = reader_type::regex;
 5246|  19.0k|                break;
 5247|       |
 5248|  3.57k|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5248:13): [True: 3.57k, False: 27.3k]
  ------------------
 5249|  3.57k|                m_type = reader_type::regex_escaped;
 5250|  3.57k|                break;
 5251|  30.9k|        }
 5252|       |
 5253|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5254|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5255|  30.9k|    }
_ZNK3scn2v34impl13string_readerIcE19skip_ws_before_readEv:
 5258|  38.6k|    {
 5259|  38.6k|        return m_type == reader_type::word;
 5260|  38.6k|    }
_ZN3scn2v34impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|  14.1k|{
 1132|  14.1k|    auto it = src.begin();
 1133|  1.26M|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 1.25M, False: 11.2k]
  ------------------
 1134|  1.25M|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|  1.25M|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 1.77k, False: 1.25M]
  ------------------
 1136|  1.77k|            return false;
 1137|  1.77k|        }
 1138|  1.25M|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 270, False: 1.25M]
  ------------------
 1139|    270|            return false;
 1140|    270|        }
 1141|  1.25M|        const auto cp = detail::decode_code_point_exhaustive(
 1142|  1.25M|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|  1.25M|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 852, False: 1.25M]
  ------------------
 1144|    852|            return false;
 1145|    852|        }
 1146|  1.25M|        it += len;
 1147|  1.25M|    }
 1148|  11.2k|    return true;
 1149|  14.1k|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|    496|{
 2993|    496|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|    496|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2994:13): [True: 496, False: 0]
  ------------------
 2995|    496|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|    496|    static_cast<    \
  |  |  929|    496|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2996|    496|        }
 2997|      0|        else {
 2998|      0|            dest.assign(source.view());
 2999|      0|        }
 3000|    496|    }
 3001|    496|    else {
 3002|    496|        return transcode_impl(source.view(), dest);
 3003|    496|    }
 3004|       |
 3005|    496|    return {};
 3006|    496|}
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helper15handle_nonasciiEv:
 5102|  5.57k|        {
 5103|  5.57k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5103:17): [True: 900, False: 4.67k]
  ------------------
 5104|    900|                return {};
 5105|    900|            }
 5106|       |
 5107|  4.67k|            auto charset_string = specs.charset_string<SourceCharT>();
 5108|  4.67k|            auto it = detail::to_address(charset_string.begin());
 5109|  4.67k|            auto set = detail::parse_presentation_set(
 5110|  4.67k|                it, detail::to_address(charset_string.end()), nonascii);
 5111|  4.67k|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  859|  4.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.67k]
  |  |  ------------------
  ------------------
 5112|      0|                return nonascii.err;
 5113|      0|            }
 5114|  4.67k|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  925|  4.67k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.67k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5115|  4.67k|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  925|  4.67k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.67k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5116|       |
 5117|  4.67k|            std::sort(nonascii.extra_ranges.begin(),
 5118|  4.67k|                      nonascii.extra_ranges.end());
 5119|  4.67k|            return {};
 5120|  4.67k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE20read_source_callback28on_classic_with_extra_rangesEDi:
 5137|   923k|        {
 5138|   923k|            if (!is_ascii_char(cp)) {
  ------------------
  |  Branch (5138:17): [True: 102k, False: 820k]
  ------------------
 5139|   102k|                return helper.is_char_set_in_extra_literals(cp);
 5140|   102k|            }
 5141|       |
 5142|   820k|            return helper.is_char_set_in_literals(static_cast<char>(cp));
 5143|   923k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDi:
 5085|   102k|        {
 5086|       |            // TODO: binary search?
 5087|   102k|            if (nonascii.extra_ranges.empty()) {
  ------------------
  |  Branch (5087:17): [True: 0, False: 102k]
  ------------------
 5088|      0|                return false;
 5089|      0|            }
 5090|       |
 5091|   102k|            const auto cp_val = static_cast<uint32_t>(cp);
 5092|   102k|            return std::find_if(
 5093|   102k|                       nonascii.extra_ranges.begin(),
 5094|   102k|                       nonascii.extra_ranges.end(),
 5095|   102k|                       [cp_val](const auto& pair) noexcept {
 5096|   102k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
 5097|   102k|                                  static_cast<uint32_t>(pair.second) > cp_val;
 5098|   102k|                       }) != nonascii.extra_ranges.end();
 5099|   102k|        }
_ZZNK3scn2v34impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDiENKUlRKT_E_clINSt3__14pairIDiDiEEEEDaS7_:
 5095|  27.2M|                       [cp_val](const auto& pair) noexcept {
 5096|  27.2M|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
  ------------------
  |  Branch (5096:35): [True: 27.2M, False: 10.0k]
  ------------------
 5097|  27.2M|                                  static_cast<uint32_t>(pair.second) > cp_val;
  ------------------
  |  Branch (5097:35): [True: 101k, False: 27.1M]
  ------------------
 5098|  27.2M|                       }) != nonascii.extra_ranges.end();
_ZNK3scn2v34impl25character_set_reader_implIcE12specs_helper23is_char_set_in_literalsEc:
 5075|   832k|        {
 5076|   832k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  924|   832k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   832k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5077|   832k|            const auto val =
 5078|   832k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5079|   832k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5080|   832k|                    (val % 8)) &
 5081|   832k|                   1u;
 5082|   832k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE20read_source_callback13on_ascii_onlyEc:
 5128|  18.0k|        {
 5129|  18.0k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5129:17): [True: 5.68k, False: 12.3k]
  ------------------
 5130|  5.68k|                return false;
 5131|  5.68k|            }
 5132|       |
 5133|  12.3k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5134|  18.0k|        }
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helperC2ERKNS0_6detail12format_specsE:
 5072|  5.57k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v34impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5276|  1.43k|    {
 5277|  1.43k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  1.43k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  1.43k|        return read_impl(range, specs, value);
 5279|  1.43k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5294|  1.43k|    {
 5295|  1.43k|        SCN_CLANG_PUSH
 5296|  1.43k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  1.43k|        switch (m_type) {
 5299|    338|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 338, False: 1.09k]
  ------------------
 5300|    338|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     56|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 56, False: 1.38k]
  ------------------
 5303|     56|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     56|                                                                   value);
 5305|       |
 5306|     34|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 34, False: 1.40k]
  ------------------
 5307|     34|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    468|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 468, False: 968]
  ------------------
 5310|    468|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    468|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      2|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 2, False: 1.43k]
  ------------------
 5315|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      2|                    range, specs.charset_string<SourceCharT>(),
 5317|      2|                    specs.regexp_flags, value);
 5318|       |
 5319|    538|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 538, False: 898]
  ------------------
 5320|    538|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    538|                    range,
 5322|    538|                    get_unescaped_regex_pattern(
 5323|    538|                        specs.charset_string<SourceCharT>()),
 5324|    538|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 1.43k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  1.43k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  1.43k|        }
 5331|       |
 5332|  1.43k|        SCN_CLANG_POP
 5333|  1.43k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4819|    338|    {
 4820|    338|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    338|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4751|    428|{
 4752|    428|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    428|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    428|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 178, False: 250]
  ------------------
 4756|    178|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    178|                                     "Invalid encoding in scanned string");
 4758|    178|    }
 4759|    250|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    250|    static_cast<    \
  |  |  929|    250|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    250|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    250|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 250]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    250|    return SCN_MOVE(result);
  ------------------
  |  |  928|    250|    static_cast<    \
  |  |  929|    250|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    250|}
_ZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2087|  1.01k|{
 2088|  1.01k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  1.01k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  1.01k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  1.01k|        auto buf = make_contiguous_buffer(range);
 2092|  1.01k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  1.01k|        return ranges::next(range.begin(),
 2094|  1.01k|                            ranges::distance(buf.view().begin(), it));
 2095|  1.01k|    }
 2096|  1.01k|    else {
 2097|  1.01k|        auto it = range.begin();
 2098|       |
 2099|  1.01k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|  1.01k|            auto seg = get_contiguous_beginning(range);
 2101|  1.01k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  1.01k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2102:17): [True: 0, False: 1.01k]
  ------------------
 2103|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|      0|            }
 2105|  1.01k|            ranges::advance(it, seg.size());
 2106|  1.01k|        }
 2107|       |
 2108|  1.01k|        return read_until_code_point(
 2109|  1.01k|            ranges::subrange{it, range.end()},
 2110|  1.01k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  1.01k|    }
 2112|  1.01k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbDiESQ_EE:
 2060|  1.01k|{
 2061|  1.01k|    auto it = range.begin();
 2062|  19.8k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 19.0k, False: 732]
  ------------------
 2063|  19.0k|        const auto val =
 2064|  19.0k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  19.0k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  19.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 15.1k, False: 3.93k]
  |  |  ------------------
  ------------------
 2066|  15.1k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  15.1k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  15.1k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 282, False: 14.8k]
  ------------------
 2069|    282|                return it;
 2070|    282|            }
 2071|  15.1k|        }
 2072|  18.8k|        it = val.iterator;
 2073|  18.8k|    }
 2074|       |
 2075|    732|    return it;
 2076|  1.01k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_:
  753|  1.01k|    {
  754|  1.01k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESS_Di:
  743|  15.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  15.1k|              cvref<T> obj = *get<T>(fn);
  745|  15.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  15.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  15.1k|              }
  748|  15.1k|              else {
  749|  15.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  15.1k|              }
  751|  15.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  15.1k|    {
  684|  15.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  15.1k|            return static_cast<T*>(s.m_cp);
  686|  15.1k|        }
  687|  15.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  15.1k|            return static_cast<T*>(s.m_p);
  689|  15.1k|        }
  690|  15.1k|        else {
  691|  15.1k|            return reinterpret_cast<T*>(s.m_fp);
  692|  15.1k|        }
  693|  15.1k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2110|  15.1k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_LPv0EEEPSI_:
  661|  1.01k|        {
  662|  1.01k|        }
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4840|     56|    {
 4841|     56|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 34, False: 22]
  ------------------
 4842|     34|            return read_string_impl(
 4843|     34|                range,
 4844|     34|                read_until_code_unit(
 4845|     34|                    range,
 4846|     34|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     34|                        SourceCharT ch) { return ch == until; }),
 4848|     34|                value);
 4849|     34|        }
 4850|     22|        return read_string_impl(
 4851|     22|            range,
 4852|     22|            read_until_code_units(
 4853|     22|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|     22|            value);
 4855|     56|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_LPv0EEEOSL_:
  753|     34|    {
  754|     34|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES18_c:
  743|    782|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    782|              cvref<T> obj = *get<T>(fn);
  745|    782|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    782|                  obj(static_cast<decltype(args)>(args)...);
  747|    782|              }
  748|    782|              else {
  749|    782|                  return obj(static_cast<decltype(args)>(args)...);
  750|    782|              }
  751|    782|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|    782|    {
  684|    782|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    782|            return static_cast<T*>(s.m_cp);
  686|    782|        }
  687|    782|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    782|            return static_cast<T*>(s.m_p);
  689|    782|        }
  690|    782|        else {
  691|    782|            return reinterpret_cast<T*>(s.m_fp);
  692|    782|        }
  693|    782|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlcE_clEc:
 4847|    782|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_LPv0EEEPSL_:
  661|     34|        {
  662|     34|        }
_ZN3scn2v34impl21read_until_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEESI_RKT0_:
 2006|     66|{
 2007|     66|    static_assert(ranges::common_range<CodeUnits>);
 2008|       |
 2009|     66|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (2009:19): [Folded - Ignored]
  ------------------
 2010|     66|        return std::search(range.begin(), range.end(), needle.begin(),
 2011|     66|                           needle.end());
 2012|     66|    }
 2013|     66|    else {
 2014|     66|        auto first = range.begin();
 2015|    282|        while (true) {
  ------------------
  |  Branch (2015:16): [Folded - Ignored]
  ------------------
 2016|    282|            auto it = first;
 2017|    408|            for (auto needle_it = needle.begin();; ++it, (void)++needle_it) {
 2018|    408|                if (needle_it == needle.end()) {
  ------------------
  |  Branch (2018:21): [True: 36, False: 372]
  ------------------
 2019|     36|                    return first;
 2020|     36|                }
 2021|    372|                if (it == range.end()) {
  ------------------
  |  Branch (2021:21): [True: 30, False: 342]
  ------------------
 2022|     30|                    return it;
 2023|     30|                }
 2024|    342|                if (*it != *needle_it) {
  ------------------
  |  Branch (2024:21): [True: 216, False: 126]
  ------------------
 2025|    216|                    break;
 2026|    216|                }
 2027|    342|            }
 2028|    216|            ++first;
 2029|    216|        }
 2030|     66|    }
 2031|     66|}
_ZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4946|     34|    {
 4947|     34|        return read_impl(
 4948|     34|            range,
 4949|     34|            [&](const auto& rng) {
 4950|     34|                return read_string_impl(rng, read_all(rng), value);
 4951|     34|            },
 4952|     34|            detail::priority_tag<1>{});
 4953|     34|    }
_ZN3scn2v34impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     34|    {
 4974|     34|        return read_cb(range);
 4975|     34|    }
_ZZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4949|     34|            [&](const auto& rng) {
 4950|     34|                return read_string_impl(rng, read_all(rng), value);
 4951|     34|            },
_ZN3scn2v34impl8read_allINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 1838|    102|{
 1839|    102|    return ranges::next(range.begin(), range.end());
 1840|    102|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS1_6detail9subrange_8subrangeIS9_S9_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EESL_E4typeESL_SM_:
  312|    102|    {
  313|    102|        ranges::advance(x, bound);
  314|    102|        return x;
  315|    102|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EEvE4typeERSL_SM_:
  274|    102|    {
  275|    102|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|    102|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEvRT_T0_NS0_6detail12priority_tagILm0EEE:
  202|    102|    {
  203|  2.38k|        while (i != bound) {
  ------------------
  |  Branch (203:16): [True: 2.28k, False: 102]
  ------------------
  204|  2.28k|            ++i;
  205|  2.28k|        }
  206|    102|    }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5047|    468|    {
 5048|    468|        auto it = read_source_impl(range, {specs});
 5049|    468|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    468|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20, False: 448]
  |  |  ------------------
  ------------------
 5050|     20|            return unexpected(it.error());
 5051|     20|        }
 5052|       |
 5053|    448|        return read_string_impl(range, *it, value);
 5054|    468|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperE:
 5152|  1.40k|    {
 5153|  1.40k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|  1.40k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|  1.40k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.40k]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|  1.40k|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|  1.40k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 840, False: 564]
  ------------------
 5163|    840|            const auto cb = [&](char32_t cp) {
 5164|    840|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|    840|            };
 5166|       |
 5167|    840|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 156, False: 684]
  ------------------
 5168|    156|                auto it = read_until_code_point(range, cb);
 5169|    156|                return check_nonempty(it, range);
 5170|    156|            }
 5171|    684|            auto it = read_while_code_point(range, cb);
 5172|    684|            return check_nonempty(it, range);
 5173|    840|        }
 5174|       |
 5175|    564|        const auto cb = [&](SourceCharT ch) {
 5176|    564|            return cb_wrapper.on_ascii_only(ch);
 5177|    564|        };
 5178|       |
 5179|    564|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 336, False: 228]
  ------------------
 5180|    336|            auto it = read_until_code_unit(range, cb);
 5181|    336|            return check_nonempty(it, range);
 5182|    336|        }
 5183|    228|        auto it = read_while_code_unit(range, cb);
 5184|    228|        return check_nonempty(it, range);
 5185|    564|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_LPv0EEEOSL_:
  753|    840|    {
  754|    840|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   139k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   139k|              cvref<T> obj = *get<T>(fn);
  745|   139k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   139k|                  obj(static_cast<decltype(args)>(args)...);
  747|   139k|              }
  748|   139k|              else {
  749|   139k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   139k|              }
  751|   139k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|   139k|    {
  684|   139k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   139k|            return static_cast<T*>(s.m_cp);
  686|   139k|        }
  687|   139k|        else if constexpr (std::is_object_v<T>) {
  688|   139k|            return static_cast<T*>(s.m_p);
  689|   139k|        }
  690|   139k|        else {
  691|   139k|            return reinterpret_cast<T*>(s.m_fp);
  692|   139k|        }
  693|   139k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlDiE_clEDi:
 5163|   139k|            const auto cb = [&](char32_t cp) {
 5164|   139k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|   139k|            };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_LPv0EEEPKSL_:
  666|    840|        {
  667|    840|        }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEEEEENS0_13scan_expectedIT_EERKSI_T0_:
 5190|  1.40k|    {
 5191|  1.40k|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 60, False: 1.34k]
  ------------------
 5192|     60|            return unexpected_scan_error(
 5193|     60|                scan_error::invalid_scanned_value,
 5194|     60|                "No characters matched in [character set]");
 5195|     60|        }
 5196|       |
 5197|  1.34k|        return it;
 5198|  1.40k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_ST_LPv0EEEOSL_:
  753|    564|    {
  754|    564|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_ST_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clESZ_c:
  743|  13.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  13.9k|              cvref<T> obj = *get<T>(fn);
  745|  13.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  13.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  13.9k|              }
  748|  13.9k|              else {
  749|  13.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  13.9k|              }
  751|  13.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  13.9k|    {
  684|  13.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  13.9k|            return static_cast<T*>(s.m_cp);
  686|  13.9k|        }
  687|  13.9k|        else if constexpr (std::is_object_v<T>) {
  688|  13.9k|            return static_cast<T*>(s.m_p);
  689|  13.9k|        }
  690|  13.9k|        else {
  691|  13.9k|            return reinterpret_cast<T*>(s.m_fp);
  692|  13.9k|        }
  693|  13.9k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlcE_clEc:
 5175|  13.9k|        const auto cb = [&](SourceCharT ch) {
 5176|  13.9k|            return cb_wrapper.on_ascii_only(ch);
 5177|  13.9k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_LPv0EEEPKSL_:
  666|    564|        {
  667|    564|        }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4751|    448|{
 4752|    448|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    448|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    448|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 202, False: 246]
  ------------------
 4756|    202|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    202|                                     "Invalid encoding in scanned string");
 4758|    202|    }
 4759|    246|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    246|    static_cast<    \
  |  |  929|    246|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    246|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    246|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 246]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    246|    return SCN_MOVE(result);
  ------------------
  |  |  928|    246|    static_cast<    \
  |  |  929|    246|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    246|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4890|    540|    {
 4891|    540|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|    540|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    540|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    540|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    540|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 540, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    540|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    540|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    540|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    540|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    540|    }                                                  \
  |  |  |  | 3671|    540|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|      0|        return read_string_impl(range, it, value);
 4893|    540|    }
_ZN3scn2v34impl24regex_string_reader_implIcE4implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsE:
 4912|  1.62k|    {
 4913|  1.62k|        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|  3.24k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (4913:23): [Folded - Ignored]
  |  Branch (4913:23): [Folded - Ignored]
  ------------------
 4914|  1.62k|                      !std::is_same_v<SourceCharT, char>) {
  ------------------
  |  Branch (4914:23): [Folded - Ignored]
  ------------------
 4915|  1.62k|            return unexpected_scan_error(
 4916|  1.62k|                scan_error::invalid_scanned_value,
 4917|  1.62k|                "Regex backend doesn't support wide strings as input");
 4918|  1.62k|        }
 4919|  1.62k|        else {
 4920|  1.62k|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4920:17): [True: 1.62k, False: 0]
  ------------------
 4921|  1.62k|                return unexpected_scan_error(
 4922|  1.62k|                    scan_error::invalid_scanned_value,
 4923|  1.62k|                    "Cannot use regex with a non-contiguous source "
 4924|  1.62k|                    "range");
 4925|  1.62k|            }
 4926|       |
 4927|      0|            auto input = get_as_contiguous(range);
 4928|      0|            SCN_TRY(it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4929|      0|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4930|      0|            return ranges::next(range.begin(),
 4931|      0|                                ranges::distance(input.begin(), it));
 4932|      0|        }
 4933|  1.62k|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEbT_:
  958|  1.62k|{
  959|  1.62k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (959:19): [Folded - Ignored]
  |  Branch (959:19): [Folded - Ignored]
  ------------------
  960|  1.62k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (960:19): [Folded - Ignored]
  ------------------
  961|  1.62k|        return true;
  962|  1.62k|    }
  963|  1.62k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (963:24): [Folded - Ignored]
  ------------------
  964|  1.62k|                           ranges::const_iterator_t<Range>,
  965|  1.62k|                           typename detail::basic_scan_buffer<
  966|  1.62k|                               detail::char_t<Range>>::forward_iterator>) {
  967|  1.62k|        auto beg = r.begin();
  968|  1.62k|        if (!beg.stores_parent()) {
  969|  1.62k|            return true;
  970|  1.62k|        }
  971|  1.62k|        return beg.parent()->is_contiguous();
  972|  1.62k|    }
  973|  1.62k|    else {
  974|  1.62k|        return false;
  975|  1.62k|    }
  976|  1.62k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  8.71k|    {
 5277|  8.71k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  8.71k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  8.71k|        return read_impl(range, specs, value);
 5279|  8.71k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  8.71k|    {
 5295|  8.71k|        SCN_CLANG_PUSH
 5296|  8.71k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  8.71k|        switch (m_type) {
 5299|    288|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 288, False: 8.43k]
  ------------------
 5300|    288|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     46|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 46, False: 8.67k]
  ------------------
 5303|     46|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     46|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 8.71k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  1.39k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 1.39k, False: 7.32k]
  ------------------
 5310|  1.39k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  1.39k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  6.34k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 6.34k, False: 2.37k]
  ------------------
 5315|  6.34k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  6.34k|                    range, specs.charset_string<SourceCharT>(),
 5317|  6.34k|                    specs.regexp_flags, value);
 5318|       |
 5319|    654|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 654, False: 8.06k]
  ------------------
 5320|    654|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    654|                    range,
 5322|    654|                    get_unescaped_regex_pattern(
 5323|    654|                        specs.charset_string<SourceCharT>()),
 5324|    654|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 8.71k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  8.71k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  8.71k|        }
 5331|       |
 5332|  8.71k|        SCN_CLANG_POP
 5333|  8.71k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|    994|    {
 4820|    994|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    994|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|  1.04k|{
 4752|  1.04k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  1.04k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  1.04k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 392, False: 648]
  ------------------
 4756|    392|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    392|                                     "Invalid encoding in scanned string");
 4758|    392|    }
 4759|    648|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    648|    static_cast<    \
  |  |  929|    648|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    648|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    648|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 648]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    648|    return SCN_MOVE(result);
  ------------------
  |  |  928|    648|    static_cast<    \
  |  |  929|    648|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    648|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|  2.31k|{
 3012|  2.31k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|  2.31k|        dest.assign(source.view());
 3014|  2.31k|    }
 3015|  2.31k|    else {
 3016|  2.31k|        return transcode_impl(source.view(), dest);
 3017|  2.31k|    }
 3018|       |
 3019|  2.31k|    return {};
 3020|  2.31k|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2087|  2.98k|{
 2088|  2.98k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  2.98k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  2.98k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  2.98k|        auto buf = make_contiguous_buffer(range);
 2092|  2.98k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  2.98k|        return ranges::next(range.begin(),
 2094|  2.98k|                            ranges::distance(buf.view().begin(), it));
 2095|  2.98k|    }
 2096|  2.98k|    else {
 2097|  2.98k|        auto it = range.begin();
 2098|       |
 2099|  2.98k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2100|  2.98k|            auto seg = get_contiguous_beginning(range);
 2101|  2.98k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  2.98k|                seg_it != seg.end()) {
 2103|  2.98k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  2.98k|            }
 2105|  2.98k|            ranges::advance(it, seg.size());
 2106|  2.98k|        }
 2107|       |
 2108|  2.98k|        return read_until_code_point(
 2109|  2.98k|            ranges::subrange{it, range.end()},
 2110|  2.98k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  2.98k|    }
 2112|  2.98k|}
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4840|     46|    {
 4841|     46|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 32, False: 14]
  ------------------
 4842|     32|            return read_string_impl(
 4843|     32|                range,
 4844|     32|                read_until_code_unit(
 4845|     32|                    range,
 4846|     32|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     32|                        SourceCharT ch) { return ch == until; }),
 4848|     32|                value);
 4849|     32|        }
 4850|     14|        return read_string_impl(
 4851|     14|            range,
 4852|     14|            read_until_code_units(
 4853|     14|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|     14|            value);
 4855|     46|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_LPv0EEEOSJ_:
  753|     32|    {
  754|     32|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|    454|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    454|              cvref<T> obj = *get<T>(fn);
  745|    454|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    454|                  obj(static_cast<decltype(args)>(args)...);
  747|    454|              }
  748|    454|              else {
  749|    454|                  return obj(static_cast<decltype(args)>(args)...);
  750|    454|              }
  751|    454|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    454|    {
  684|    454|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    454|            return static_cast<T*>(s.m_cp);
  686|    454|        }
  687|    454|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    454|            return static_cast<T*>(s.m_p);
  689|    454|        }
  690|    454|        else {
  691|    454|            return reinterpret_cast<T*>(s.m_fp);
  692|    454|        }
  693|    454|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlcE_clEc:
 4847|    454|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_LPv0EEEPSJ_:
  661|     32|        {
  662|     32|        }
_ZN3scn2v34impl21read_until_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEESG_RKT0_:
 2006|     42|{
 2007|     42|    static_assert(ranges::common_range<CodeUnits>);
 2008|       |
 2009|     42|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (2009:19): [Folded - Ignored]
  ------------------
 2010|     42|        return std::search(range.begin(), range.end(), needle.begin(),
 2011|     42|                           needle.end());
 2012|     42|    }
 2013|     42|    else {
 2014|     42|        auto first = range.begin();
 2015|     42|        while (true) {
 2016|     42|            auto it = first;
 2017|     42|            for (auto needle_it = needle.begin();; ++it, (void)++needle_it) {
 2018|     42|                if (needle_it == needle.end()) {
 2019|     42|                    return first;
 2020|     42|                }
 2021|     42|                if (it == range.end()) {
 2022|     42|                    return it;
 2023|     42|                }
 2024|     42|                if (*it != *needle_it) {
 2025|     42|                    break;
 2026|     42|                }
 2027|     42|            }
 2028|     42|            ++first;
 2029|     42|        }
 2030|     42|    }
 2031|     42|}
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5047|  1.39k|    {
 5048|  1.39k|        auto it = read_source_impl(range, {specs});
 5049|  1.39k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 384, False: 1.00k]
  |  |  ------------------
  ------------------
 5050|    384|            return unexpected(it.error());
 5051|    384|        }
 5052|       |
 5053|  1.00k|        return read_string_impl(range, *it, value);
 5054|  1.39k|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5152|  4.17k|    {
 5153|  4.17k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|  4.17k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|  4.17k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  4.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.17k]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|  4.17k|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|  4.17k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 3.83k, False: 336]
  ------------------
 5163|  3.83k|            const auto cb = [&](char32_t cp) {
 5164|  3.83k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|  3.83k|            };
 5166|       |
 5167|  3.83k|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 294, False: 3.54k]
  ------------------
 5168|    294|                auto it = read_until_code_point(range, cb);
 5169|    294|                return check_nonempty(it, range);
 5170|    294|            }
 5171|  3.54k|            auto it = read_while_code_point(range, cb);
 5172|  3.54k|            return check_nonempty(it, range);
 5173|  3.83k|        }
 5174|       |
 5175|    336|        const auto cb = [&](SourceCharT ch) {
 5176|    336|            return cb_wrapper.on_ascii_only(ch);
 5177|    336|        };
 5178|       |
 5179|    336|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 150, False: 186]
  ------------------
 5180|    150|            auto it = read_until_code_unit(range, cb);
 5181|    150|            return check_nonempty(it, range);
 5182|    150|        }
 5183|    186|        auto it = read_while_code_unit(range, cb);
 5184|    186|        return check_nonempty(it, range);
 5185|    336|    }
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|  3.83k|{
 2061|  3.83k|    auto it = range.begin();
 2062|   786k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 786k, False: 258]
  ------------------
 2063|   786k|        const auto val =
 2064|   786k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   786k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   786k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 783k, False: 2.51k]
  |  |  ------------------
  ------------------
 2066|   783k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   783k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   783k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 3.57k, False: 780k]
  ------------------
 2069|  3.57k|                return it;
 2070|  3.57k|            }
 2071|   783k|        }
 2072|   782k|        it = val.iterator;
 2073|   782k|    }
 2074|       |
 2075|    258|    return it;
 2076|  3.83k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|   786k|{
 1899|   786k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   786k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   786k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   786k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   786k|    auto it = range.begin();
 1903|   786k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   786k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   786k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.51k, False: 783k]
  |  |  ------------------
  ------------------
 1906|  2.51k|        ++it;
 1907|  2.51k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|  2.51k|        return {it, {}};
 1909|  2.51k|    }
 1910|       |
 1911|   783k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 691k, False: 92.4k]
  ------------------
 1912|   691k|        ++it;
 1913|   691k|        return {it, string_type(1, *range.begin())};
 1914|   691k|    }
 1915|       |
 1916|  92.4k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|  92.4k|    return {it, string_type{range.begin(), it}};
 1918|   783k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1154|  2.51k|{
 1155|  2.51k|    auto it = input.begin();
 1156|  5.02k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 4.98k, False: 42]
  ------------------
 1157|  4.98k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 2.47k, False: 2.51k]
  ------------------
 1158|  2.47k|            break;
 1159|  2.47k|        }
 1160|  4.98k|    }
 1161|  2.51k|    return it;
 1162|  2.51k|}
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeERSA_SE_SB_:
  282|  92.4k|    {
  283|  92.4k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  92.4k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeERSB_SE_SA_:
  211|  92.4k|    {
  212|  92.4k|        if (fn::abs(n) >= fn::abs(bound - i)) {
  ------------------
  |  Branch (212:13): [True: 54, False: 92.4k]
  ------------------
  213|     54|            auto dist = bound - i;
  214|     54|            fn::impl_i_s(i, bound, priority_tag<2>{});
  215|     54|            return dist;
  216|     54|        }
  217|  92.4k|        fn::impl_i_n(i, n, priority_tag<1>{});
  218|  92.4k|        return n;
  219|  92.4k|    }
_ZN3scn2v36ranges6detail8advance_2fn3absIlEET_S6_:
  131|   184k|    {
  132|   184k|        if (t < T{0}) {
  ------------------
  |  Branch (132:13): [True: 0, False: 184k]
  ------------------
  133|      0|            return -t;
  134|      0|        }
  135|   184k|        return t;
  136|   184k|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKccE8is_validEv:
 1889|   786k|    {
 1890|   786k|        return !codepoint.empty();
 1891|   786k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_LPv0EEEOSJ_:
  753|  3.83k|    {
  754|  3.83k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESX_Di:
  743|   783k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   783k|              cvref<T> obj = *get<T>(fn);
  745|   783k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   783k|                  obj(static_cast<decltype(args)>(args)...);
  747|   783k|              }
  748|   783k|              else {
  749|   783k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   783k|              }
  751|   783k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|   783k|    {
  684|   783k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   783k|            return static_cast<T*>(s.m_cp);
  686|   783k|        }
  687|   783k|        else if constexpr (std::is_object_v<T>) {
  688|   783k|            return static_cast<T*>(s.m_p);
  689|   783k|        }
  690|   783k|        else {
  691|   783k|            return reinterpret_cast<T*>(s.m_fp);
  692|   783k|        }
  693|   783k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlDiE_clEDi:
 5163|   783k|            const auto cb = [&](char32_t cp) {
 5164|   783k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|   783k|            };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_LPv0EEEPKSJ_:
  666|  3.83k|        {
  667|  3.83k|        }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyIPKcNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5190|  4.17k|    {
 5191|  4.17k|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 1.15k, False: 3.01k]
  ------------------
 5192|  1.15k|            return unexpected_scan_error(
 5193|  1.15k|                scan_error::invalid_scanned_value,
 5194|  1.15k|                "No characters matched in [character set]");
 5195|  1.15k|        }
 5196|       |
 5197|  3.01k|        return it;
 5198|  4.17k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|  3.54k|{
 2082|  3.54k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  3.54k|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_LPv0EEEOSJ_:
  753|    336|    {
  754|    336|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  4.04k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.04k|              cvref<T> obj = *get<T>(fn);
  745|  4.04k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  4.04k|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.04k|              }
  748|  4.04k|              else {
  749|  4.04k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.04k|              }
  751|  4.04k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  4.04k|    {
  684|  4.04k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  4.04k|            return static_cast<T*>(s.m_cp);
  686|  4.04k|        }
  687|  4.04k|        else if constexpr (std::is_object_v<T>) {
  688|  4.04k|            return static_cast<T*>(s.m_p);
  689|  4.04k|        }
  690|  4.04k|        else {
  691|  4.04k|            return reinterpret_cast<T*>(s.m_fp);
  692|  4.04k|        }
  693|  4.04k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlcE_clEc:
 5175|  4.04k|        const auto cb = [&](SourceCharT ch) {
 5176|  4.04k|            return cb_wrapper.on_ascii_only(ch);
 5177|  4.04k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_LPv0EEEPKSJ_:
  666|    336|        {
  667|    336|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4751|  1.85k|{
 4752|  1.85k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  1.85k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  1.85k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 192, False: 1.66k]
  ------------------
 4756|    192|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    192|                                     "Invalid encoding in scanned string");
 4758|    192|    }
 4759|  1.66k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  1.66k|    static_cast<    \
  |  |  929|  1.66k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|  1.66k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.66k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.66k]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|  1.66k|    return SCN_MOVE(result);
  ------------------
  |  |  928|  1.66k|    static_cast<    \
  |  |  929|  1.66k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|  1.66k|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4890|  6.99k|    {
 4891|  6.99k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|  6.99k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  6.99k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  6.99k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  6.99k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.14k, False: 852]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  6.14k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  6.14k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  6.14k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  6.14k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  6.14k|    }                                                  \
  |  |  |  | 3671|  6.99k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    852|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|    852|        return read_string_impl(range, it, value);
 4893|  6.99k|    }
_ZN3scn2v34impl24regex_string_reader_implIcE4implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsE:
 4912|  20.9k|    {
 4913|  20.9k|        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|  41.9k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (4913:23): [Folded - Ignored]
  |  Branch (4913:23): [Folded - Ignored]
  ------------------
 4914|  20.9k|                      !std::is_same_v<SourceCharT, char>) {
  ------------------
  |  Branch (4914:23): [Folded - Ignored]
  ------------------
 4915|  20.9k|            return unexpected_scan_error(
 4916|  20.9k|                scan_error::invalid_scanned_value,
 4917|  20.9k|                "Regex backend doesn't support wide strings as input");
 4918|  20.9k|        }
 4919|  20.9k|        else {
 4920|  20.9k|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4920:17): [True: 0, False: 20.9k]
  ------------------
 4921|      0|                return unexpected_scan_error(
 4922|      0|                    scan_error::invalid_scanned_value,
 4923|      0|                    "Cannot use regex with a non-contiguous source "
 4924|      0|                    "range");
 4925|      0|            }
 4926|       |
 4927|  20.9k|            auto input = get_as_contiguous(range);
 4928|  20.9k|            SCN_TRY(it,
  ------------------
  |  | 3672|  20.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  20.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  20.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  20.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 18.4k, False: 2.55k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  18.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  18.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  18.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  18.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  18.4k|    }                                                  \
  |  |  |  | 3671|  20.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.55k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4929|  2.55k|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4930|  2.55k|            return ranges::next(range.begin(),
 4931|  2.55k|                                ranges::distance(input.begin(), it));
 4932|  20.9k|        }
 4933|  20.9k|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  958|  20.9k|{
  959|  20.9k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (959:19): [Folded - Ignored]
  |  Branch (959:19): [Folded - Ignored]
  ------------------
  960|  20.9k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (960:19): [Folded - Ignored]
  ------------------
  961|  20.9k|        return true;
  962|  20.9k|    }
  963|  20.9k|    else if constexpr (std::is_same_v<
  964|  20.9k|                           ranges::const_iterator_t<Range>,
  965|  20.9k|                           typename detail::basic_scan_buffer<
  966|  20.9k|                               detail::char_t<Range>>::forward_iterator>) {
  967|  20.9k|        auto beg = r.begin();
  968|  20.9k|        if (!beg.stores_parent()) {
  969|  20.9k|            return true;
  970|  20.9k|        }
  971|  20.9k|        return beg.parent()->is_contiguous();
  972|  20.9k|    }
  973|  20.9k|    else {
  974|  20.9k|        return false;
  975|  20.9k|    }
  976|  20.9k|}
_ZN3scn2v34impl17get_as_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaT_:
 1064|  20.9k|{
 1065|  20.9k|    SCN_EXPECT(is_segment_contiguous(r));
  ------------------
  |  |  924|  20.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  20.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1066|       |
 1067|  20.9k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1067:19): [Folded - Ignored]
  |  Branch (1067:19): [Folded - Ignored]
  ------------------
 1068|  20.9k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1068:19): [Folded - Ignored]
  ------------------
 1069|  20.9k|        return r;
 1070|  20.9k|    }
 1071|  20.9k|    else if constexpr (std::is_same_v<
 1072|  20.9k|                           ranges::const_iterator_t<Range>,
 1073|  20.9k|                           typename detail::basic_scan_buffer<
 1074|  20.9k|                               detail::char_t<Range>>::forward_iterator>) {
 1075|  20.9k|        if constexpr (ranges::common_range<Range>) {
 1076|  20.9k|            return detail::make_string_view_from_pointers(
 1077|  20.9k|                r.begin().to_contiguous_segment_iterator(),
 1078|  20.9k|                r.end().to_contiguous_segment_iterator());
 1079|  20.9k|        }
 1080|  20.9k|        else {
 1081|  20.9k|            return r.begin().contiguous_segment();
 1082|  20.9k|        }
 1083|  20.9k|    }
 1084|  20.9k|    else {
 1085|  20.9k|        SCN_EXPECT(false);
 1086|  20.9k|        SCN_UNREACHABLE;
 1087|       |        // for return type deduction
 1088|  20.9k|        return std::basic_string_view<detail::char_t<Range>>{};
 1089|  20.9k|    }
 1090|  20.9k|}
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  980|  20.9k|{
  981|  20.9k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|  20.9k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|  20.9k|        return true;
  984|  20.9k|    }
  985|  20.9k|    else if constexpr (std::is_same_v<
  986|  20.9k|                           ranges::const_iterator_t<Range>,
  987|  20.9k|                           typename detail::basic_scan_buffer<
  988|  20.9k|                               detail::char_t<Range>>::forward_iterator>) {
  989|  20.9k|        auto beg = r.begin();
  990|  20.9k|        if (beg.contiguous_segment().empty()) {
  991|  20.9k|            return false;
  992|  20.9k|        }
  993|  20.9k|        if constexpr (ranges::common_range<Range>) {
  994|  20.9k|            return beg.contiguous_segment().end() ==
  995|  20.9k|                   ranges::end(r).contiguous_segment().end();
  996|  20.9k|        }
  997|  20.9k|        else {
  998|  20.9k|            if (beg.stores_parent()) {
  999|  20.9k|                return beg.contiguous_segment().end() ==
 1000|  20.9k|                       beg.parent()->current_view().end();
 1001|  20.9k|            }
 1002|  20.9k|            return true;
 1003|  20.9k|        }
 1004|  20.9k|    }
 1005|  20.9k|    else {
 1006|  20.9k|        return false;
 1007|  20.9k|    }
 1008|  20.9k|}
_ZN3scn2v34impl22read_regex_string_implIcNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT0_EEEEEENSt3__117basic_string_viewIT_NSF_11char_traitsISH_EEEENS0_6detail11regex_flagsESB_:
 4345|  20.9k|{
 4346|  20.9k|    static_assert(ranges::contiguous_range<Input> &&
 4347|  20.9k|                  ranges::borrowed_range<Input> &&
 4348|  20.9k|                  std::is_same_v<ranges::range_value_t<Input>, CharT>);
 4349|       |
 4350|  20.9k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 4351|  20.9k|    std::basic_regex<CharT> re{};
 4352|  20.9k|    try {
 4353|  20.9k|        SCN_TRY(re_flags, make_regex_flags(flags));
  ------------------
  |  | 3672|  20.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  20.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  20.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  20.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 20.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  20.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  20.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4354|  20.9k|        re = std::basic_regex<CharT>{pattern.data(), pattern.size(),
 4355|  20.9k|                                     re_flags | std::regex_constants::nosubs};
 4356|  20.9k|    }
 4357|  20.9k|    catch (const std::regex_error& err) {
 4358|  13.2k|        return unexpected_scan_error(scan_error::invalid_format_string,
 4359|  13.2k|                                     "Invalid regex");
 4360|  13.2k|    }
 4361|       |
 4362|  7.75k|    std::match_results<const CharT*> matches{};
 4363|  7.75k|    try {
 4364|  7.75k|        bool found = std::regex_search(input.data(),
 4365|  7.75k|                                       input.data() + input.size(), matches, re,
 4366|  7.75k|                                       std::regex_constants::match_continuous);
 4367|  7.75k|        if (!found || matches.prefix().matched) {
  ------------------
  |  Branch (4367:13): [True: 5.20k, False: 2.55k]
  |  Branch (4367:23): [True: 0, False: 2.55k]
  ------------------
 4368|  4.83k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4369|  4.83k|                                         "Regular expression didn't match");
 4370|  4.83k|        }
 4371|  7.75k|    }
 4372|  7.75k|    catch (const std::regex_error& err) {
 4373|    372|        return unexpected_scan_error(scan_error::invalid_format_string,
 4374|    372|                                     "Regex matching failed with an error");
 4375|    372|    }
 4376|       |
 4377|  2.55k|    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4378|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_BOOST
 4379|       |    auto re =
 4380|       |#if SCN_REGEX_BOOST_USE_ICU
 4381|       |        boost::make_u32regex(pattern.data(), pattern.data() + pattern.size(),
 4382|       |                             make_regex_flags(flags) |
 4383|       |                                 boost::regex_constants::no_except |
 4384|       |                                 boost::regex_constants::nosubs);
 4385|       |#else
 4386|       |        boost::basic_regex<CharT>{pattern.data(), pattern.size(),
 4387|       |                                  make_regex_flags(flags) |
 4388|       |                                      boost::regex_constants::no_except |
 4389|       |                                      boost::regex_constants::nosubs};
 4390|       |#endif
 4391|       |    if (re.status() != 0) {
 4392|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4393|       |                                     "Invalid regex");
 4394|       |    }
 4395|       |
 4396|       |    boost::match_results<const CharT*> matches{};
 4397|       |    try {
 4398|       |        bool found =
 4399|       |#if SCN_REGEX_BOOST_USE_ICU
 4400|       |            boost::u32regex_search(input.data(), input.data() + input.size(),
 4401|       |                                   matches, re,
 4402|       |                                   boost::regex_constants::match_continuous);
 4403|       |#else
 4404|       |            boost::regex_search(input.data(), input.data() + input.size(),
 4405|       |                                matches, re,
 4406|       |                                boost::regex_constants::match_continuous);
 4407|       |#endif
 4408|       |        if (!found || matches.prefix().matched) {
 4409|       |            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4410|       |                                         "Regular expression didn't match");
 4411|       |        }
 4412|       |    }
 4413|       |    catch (const std::runtime_error& err) {
 4414|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4415|       |                                     "Regex matching failed with an error");
 4416|       |    }
 4417|       |
 4418|       |    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4419|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_RE2
 4420|       |    static_assert(std::is_same_v<CharT, char>);
 4421|       |    std::string flagged_pattern{};
 4422|       |    auto re = [&]() {
 4423|       |        auto [opts, flagstr] = make_regex_flags(flags);
 4424|       |        opts.set_never_capture(true);
 4425|       |        if (flagstr.empty()) {
 4426|       |            return re2::RE2{pattern, opts};
 4427|       |        }
 4428|       |        flagged_pattern.reserve(flagstr.size() + pattern.size());
 4429|       |        flagged_pattern.append(flagstr);
 4430|       |        flagged_pattern.append(pattern);
 4431|       |        return re2::RE2{flagged_pattern, opts};
 4432|       |    }();
 4433|       |    if (!re.ok()) {
 4434|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4435|       |                                     "Failed to parse regular expression");
 4436|       |    }
 4437|       |
 4438|       |    auto new_input = detail::make_string_view_from_pointers(
 4439|       |        detail::to_address(input.begin()), detail::to_address(input.end()));
 4440|       |    bool found = re2::RE2::Consume(&new_input, re);
 4441|       |    if (!found) {
 4442|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4443|       |                                     "Regular expression didn't match");
 4444|       |    }
 4445|       |    return input.begin() + ranges::distance(input.data(), new_input.data());
 4446|       |#endif  // SCN_REGEX_BACKEND == ...
 4447|  7.75k|}
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEcEEDav:
 5808|  11.0k|{
 5809|  11.0k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  11.0k|        return reader_impl_for_bool<CharT>{};
 5811|  11.0k|    }
 5812|  11.0k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  11.0k|        return reader_impl_for_char<CharT>{};
 5814|  11.0k|    }
 5815|  11.0k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  11.0k|        return reader_impl_for_wchar<CharT>{};
 5817|  11.0k|    }
 5818|  11.0k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  11.0k|        return reader_impl_for_code_point<CharT>{};
 5820|  11.0k|    }
 5821|  11.0k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  11.0k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  11.0k|        return reader_impl_for_string<CharT>{};
 5824|  11.0k|    }
 5825|  11.0k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5825:24): [Folded - Ignored]
  |  Branch (5825:24): [Folded - Ignored]
  ------------------
 5826|  11.0k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  11.0k|        return reader_impl_for_string<CharT>{};
 5828|  11.0k|    }
 5829|  11.0k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  11.0k|                       std::is_same_v<T, wregex_matches>) {
 5831|  11.0k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  11.0k|    }
 5833|  11.0k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  11.0k|        return reader_impl_for_voidptr<CharT>{};
 5835|  11.0k|    }
 5836|  11.0k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  11.0k|        return reader_impl_for_float<CharT>{};
 5838|  11.0k|    }
 5839|  11.0k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  11.0k|                       !std::is_same_v<T, wchar_t> &&
 5841|  11.0k|                       !std::is_same_v<T, char32_t> &&
 5842|  11.0k|                       !std::is_same_v<T, bool>) {
 5843|  11.0k|        return reader_impl_for_int<CharT>{};
 5844|  11.0k|    }
 5845|  11.0k|    else {
 5846|  11.0k|        return reader_impl_for_monostate<CharT>{};
 5847|  11.0k|    }
 5848|  11.0k|}
_ZN3scn2v34impl22transcode_if_necessaryIcwEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|    496|{
 2993|    496|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|    496|        if (source.stores_allocated_string()) {
 2995|    496|            dest.assign(SCN_MOVE(source.get_allocated_string()));
 2996|    496|        }
 2997|    496|        else {
 2998|    496|            dest.assign(source.view());
 2999|    496|        }
 3000|    496|    }
 3001|    496|    else {
 3002|    496|        return transcode_impl(source.view(), dest);
 3003|    496|    }
 3004|       |
 3005|      0|    return {};
 3006|    496|}
_ZN3scn2v34impl14transcode_implIcwEENS0_10scan_errorENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEERNS4_12basic_stringIT0_NS7_ISB_EENS4_9allocatorISB_EEEE:
 2967|  2.81k|{
 2968|  2.81k|    dst.clear();
 2969|  2.81k|    transcode_valid_to_string(src, dst);
 2970|  2.81k|    return {};
 2971|  2.81k|}
_ZN3scn2v34impl25transcode_valid_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1402|  2.81k|{
 1403|  2.81k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1404|       |
 1405|  2.81k|    SCN_EXPECT(validate_unicode(src));
  ------------------
  |  |  924|  2.81k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.81k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1406|  2.81k|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1406:19): [Folded - Ignored]
  ------------------
 1407|  2.81k|        if constexpr (sizeof(DestCharT) == 2) {
  ------------------
  |  Branch (1407:23): [Folded - Ignored]
  ------------------
 1408|       |            // TODO: Optimize, remove utf32-step, go direct utf8->utf16
 1409|  2.81k|            std::u32string tmp;
 1410|  2.81k|            transcode_valid_to_string_impl_to32(src, tmp);
 1411|  2.81k|            return transcode_to_string_impl_32to16<true>(
 1412|  2.81k|                std::u32string_view{tmp}, dest);
 1413|  2.81k|        }
 1414|  2.81k|        else if constexpr (sizeof(DestCharT) == 4) {
  ------------------
  |  Branch (1414:28): [Folded - Ignored]
  ------------------
 1415|  2.81k|            return transcode_valid_to_string_impl_to32(src, dest);
 1416|  2.81k|        }
 1417|  2.81k|    }
 1418|      0|    else if constexpr (sizeof(SourceCharT) == 2) {
 1419|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1420|      0|            std::u32string tmp;
 1421|      0|            transcode_valid_to_string_impl_to32(src, tmp);
 1422|      0|            return transcode_to_string_impl_32to8<true>(
 1423|      0|                std::u32string_view{tmp}, dest);
 1424|      0|        }
 1425|      0|        else if constexpr (sizeof(DestCharT) == 4) {
 1426|      0|            return trasncode_valid_to_string_impl_to32(src, dest);
 1427|      0|        }
 1428|      0|    }
 1429|      0|    else if constexpr (sizeof(SourceCharT) == 4) {
 1430|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1431|      0|            return transcode_to_string_impl_32to8<true>(src, dest);
 1432|      0|        }
 1433|      0|        else if constexpr (sizeof(DestCharT) == 2) {
 1434|      0|            return transcode_to_string_impl_32to16<true>(src, dest);
 1435|      0|        }
 1436|      0|    }
 1437|       |
 1438|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1439|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1440|      0|}
_ZN3scn2v34impl35transcode_valid_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1276|  2.81k|{
 1277|  2.81k|    static_assert(sizeof(DestCharT) == 4);
 1278|       |
 1279|  2.81k|    auto it = src.begin();
 1280|   303k|    while (it != src.end()) {
  ------------------
  |  Branch (1280:12): [True: 300k, False: 2.81k]
  ------------------
 1281|   300k|        auto res = get_next_code_point_valid(
 1282|   300k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1283|   300k|                                                                 src.end()));
 1284|   300k|        SCN_EXPECT(res.value < detail::invalid_code_point);
  ------------------
  |  |  924|   300k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   300k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1285|   300k|        dest.push_back(res.value);
 1286|   300k|        it = detail::make_string_view_iterator(src, res.iterator);
 1287|   300k|    }
 1288|  2.81k|}
_ZN3scn2v34impl25get_next_code_point_validIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1188|   300k|{
 1189|   300k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   300k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   300k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1190|       |
 1191|   300k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1192|   300k|    SCN_EXPECT(len <= input.size());
  ------------------
  |  |  924|   300k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   300k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1193|       |
 1194|   300k|    return {input.begin() + len,
 1195|   300k|            detail::decode_code_point_exhaustive_valid(input.substr(0, len))};
 1196|   300k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5276|  1.43k|    {
 5277|  1.43k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  1.43k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  1.43k|        return read_impl(range, specs, value);
 5279|  1.43k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5294|  1.43k|    {
 5295|  1.43k|        SCN_CLANG_PUSH
 5296|  1.43k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  1.43k|        switch (m_type) {
 5299|    338|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 338, False: 1.09k]
  ------------------
 5300|    338|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     56|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 56, False: 1.38k]
  ------------------
 5303|     56|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     56|                                                                   value);
 5305|       |
 5306|     34|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 34, False: 1.40k]
  ------------------
 5307|     34|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    468|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 468, False: 968]
  ------------------
 5310|    468|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    468|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      2|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 2, False: 1.43k]
  ------------------
 5315|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      2|                    range, specs.charset_string<SourceCharT>(),
 5317|      2|                    specs.regexp_flags, value);
 5318|       |
 5319|    538|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 538, False: 898]
  ------------------
 5320|    538|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    538|                    range,
 5322|    538|                    get_unescaped_regex_pattern(
 5323|    538|                        specs.charset_string<SourceCharT>()),
 5324|    538|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 1.43k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  1.43k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  1.43k|        }
 5331|       |
 5332|  1.43k|        SCN_CLANG_POP
 5333|  1.43k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4819|    338|    {
 4820|    338|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    338|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4751|    428|{
 4752|    428|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    428|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    428|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 178, False: 250]
  ------------------
 4756|    178|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    178|                                     "Invalid encoding in scanned string");
 4758|    178|    }
 4759|    250|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    250|    static_cast<    \
  |  |  929|    250|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    250|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    250|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 250]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    250|    return SCN_MOVE(result);
  ------------------
  |  |  928|    250|    static_cast<    \
  |  |  929|    250|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    250|}
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4840|     56|    {
 4841|     56|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 34, False: 22]
  ------------------
 4842|     34|            return read_string_impl(
 4843|     34|                range,
 4844|     34|                read_until_code_unit(
 4845|     34|                    range,
 4846|     34|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     34|                        SourceCharT ch) { return ch == until; }),
 4848|     34|                value);
 4849|     34|        }
 4850|     22|        return read_string_impl(
 4851|     22|            range,
 4852|     22|            read_until_code_units(
 4853|     22|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|     22|            value);
 4855|     56|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_LPv0EEEOSL_:
  753|     34|    {
  754|     34|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES18_c:
  743|    782|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    782|              cvref<T> obj = *get<T>(fn);
  745|    782|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    782|                  obj(static_cast<decltype(args)>(args)...);
  747|    782|              }
  748|    782|              else {
  749|    782|                  return obj(static_cast<decltype(args)>(args)...);
  750|    782|              }
  751|    782|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|    782|    {
  684|    782|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    782|            return static_cast<T*>(s.m_cp);
  686|    782|        }
  687|    782|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    782|            return static_cast<T*>(s.m_p);
  689|    782|        }
  690|    782|        else {
  691|    782|            return reinterpret_cast<T*>(s.m_fp);
  692|    782|        }
  693|    782|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlcE_clEc:
 4847|    782|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_LPv0EEEPSL_:
  661|     34|        {
  662|     34|        }
_ZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4946|     34|    {
 4947|     34|        return read_impl(
 4948|     34|            range,
 4949|     34|            [&](const auto& rng) {
 4950|     34|                return read_string_impl(rng, read_all(rng), value);
 4951|     34|            },
 4952|     34|            detail::priority_tag<1>{});
 4953|     34|    }
_ZN3scn2v34impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     34|    {
 4974|     34|        return read_cb(range);
 4975|     34|    }
_ZZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4949|     34|            [&](const auto& rng) {
 4950|     34|                return read_string_impl(rng, read_all(rng), value);
 4951|     34|            },
_ZN3scn2v34impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5047|    468|    {
 5048|    468|        auto it = read_source_impl(range, {specs});
 5049|    468|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    468|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20, False: 448]
  |  |  ------------------
  ------------------
 5050|     20|            return unexpected(it.error());
 5051|     20|        }
 5052|       |
 5053|    448|        return read_string_impl(range, *it, value);
 5054|    468|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4751|    448|{
 4752|    448|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    448|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    448|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 202, False: 246]
  ------------------
 4756|    202|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    202|                                     "Invalid encoding in scanned string");
 4758|    202|    }
 4759|    246|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    246|    static_cast<    \
  |  |  929|    246|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    246|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    246|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 246]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    246|    return SCN_MOVE(result);
  ------------------
  |  |  928|    246|    static_cast<    \
  |  |  929|    246|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    246|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4890|    540|    {
 4891|    540|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|    540|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    540|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    540|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    540|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 540, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    540|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    540|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    540|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    540|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    540|    }                                                  \
  |  |  |  | 3671|    540|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|      0|        return read_string_impl(range, it, value);
 4893|    540|    }
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  8.71k|    {
 5277|  8.71k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  8.71k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  8.71k|        return read_impl(range, specs, value);
 5279|  8.71k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  8.71k|    {
 5295|  8.71k|        SCN_CLANG_PUSH
 5296|  8.71k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  8.71k|        switch (m_type) {
 5299|    288|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 288, False: 8.43k]
  ------------------
 5300|    288|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     46|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 46, False: 8.67k]
  ------------------
 5303|     46|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     46|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 8.71k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  1.39k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 1.39k, False: 7.32k]
  ------------------
 5310|  1.39k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  1.39k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  6.34k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 6.34k, False: 2.37k]
  ------------------
 5315|  6.34k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  6.34k|                    range, specs.charset_string<SourceCharT>(),
 5317|  6.34k|                    specs.regexp_flags, value);
 5318|       |
 5319|    654|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 654, False: 8.06k]
  ------------------
 5320|    654|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    654|                    range,
 5322|    654|                    get_unescaped_regex_pattern(
 5323|    654|                        specs.charset_string<SourceCharT>()),
 5324|    654|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 8.71k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  8.71k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  8.71k|        }
 5331|       |
 5332|  8.71k|        SCN_CLANG_POP
 5333|  8.71k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|    994|    {
 4820|    994|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    994|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|  1.04k|{
 4752|  1.04k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  1.04k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  1.04k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 392, False: 648]
  ------------------
 4756|    392|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    392|                                     "Invalid encoding in scanned string");
 4758|    392|    }
 4759|    648|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    648|    static_cast<    \
  |  |  929|    648|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    648|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    648|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 648]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    648|    return SCN_MOVE(result);
  ------------------
  |  |  928|    648|    static_cast<    \
  |  |  929|    648|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    648|}
_ZN3scn2v34impl22transcode_if_necessaryIcwEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|  2.31k|{
 3012|  2.31k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|  2.31k|        dest.assign(source.view());
 3014|  2.31k|    }
 3015|  2.31k|    else {
 3016|  2.31k|        return transcode_impl(source.view(), dest);
 3017|  2.31k|    }
 3018|       |
 3019|      0|    return {};
 3020|  2.31k|}
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4840|     46|    {
 4841|     46|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 32, False: 14]
  ------------------
 4842|     32|            return read_string_impl(
 4843|     32|                range,
 4844|     32|                read_until_code_unit(
 4845|     32|                    range,
 4846|     32|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     32|                        SourceCharT ch) { return ch == until; }),
 4848|     32|                value);
 4849|     32|        }
 4850|     14|        return read_string_impl(
 4851|     14|            range,
 4852|     14|            read_until_code_units(
 4853|     14|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|     14|            value);
 4855|     46|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_LPv0EEEOSJ_:
  753|     32|    {
  754|     32|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|    454|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    454|              cvref<T> obj = *get<T>(fn);
  745|    454|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    454|                  obj(static_cast<decltype(args)>(args)...);
  747|    454|              }
  748|    454|              else {
  749|    454|                  return obj(static_cast<decltype(args)>(args)...);
  750|    454|              }
  751|    454|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    454|    {
  684|    454|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    454|            return static_cast<T*>(s.m_cp);
  686|    454|        }
  687|    454|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    454|            return static_cast<T*>(s.m_p);
  689|    454|        }
  690|    454|        else {
  691|    454|            return reinterpret_cast<T*>(s.m_fp);
  692|    454|        }
  693|    454|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlcE_clEc:
 4847|    454|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_LPv0EEEPSJ_:
  661|     32|        {
  662|     32|        }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5047|  1.39k|    {
 5048|  1.39k|        auto it = read_source_impl(range, {specs});
 5049|  1.39k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 384, False: 1.00k]
  |  |  ------------------
  ------------------
 5050|    384|            return unexpected(it.error());
 5051|    384|        }
 5052|       |
 5053|  1.00k|        return read_string_impl(range, *it, value);
 5054|  1.39k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4751|  1.85k|{
 4752|  1.85k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  1.85k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  1.85k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 192, False: 1.66k]
  ------------------
 4756|    192|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    192|                                     "Invalid encoding in scanned string");
 4758|    192|    }
 4759|  1.66k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  1.66k|    static_cast<    \
  |  |  929|  1.66k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|  1.66k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.66k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.66k]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|  1.66k|    return SCN_MOVE(result);
  ------------------
  |  |  928|  1.66k|    static_cast<    \
  |  |  929|  1.66k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|  1.66k|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4890|  6.99k|    {
 4891|  6.99k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|  6.99k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  6.99k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  6.99k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  6.99k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.14k, False: 852]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  6.14k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  6.14k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  6.14k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  6.14k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  6.14k|    }                                                  \
  |  |  |  | 3671|  6.99k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    852|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|    852|        return read_string_impl(range, it, value);
 4893|  6.99k|    }
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEEDav:
 5808|  11.0k|{
 5809|  11.0k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  11.0k|        return reader_impl_for_bool<CharT>{};
 5811|  11.0k|    }
 5812|  11.0k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  11.0k|        return reader_impl_for_char<CharT>{};
 5814|  11.0k|    }
 5815|  11.0k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  11.0k|        return reader_impl_for_wchar<CharT>{};
 5817|  11.0k|    }
 5818|  11.0k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  11.0k|        return reader_impl_for_code_point<CharT>{};
 5820|  11.0k|    }
 5821|  11.0k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  11.0k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  11.0k|        return reader_impl_for_string<CharT>{};
 5824|  11.0k|    }
 5825|  11.0k|    else if constexpr (std::is_same_v<T, std::string> ||
 5826|  11.0k|                       std::is_same_v<T, std::wstring>) {
 5827|  11.0k|        return reader_impl_for_string<CharT>{};
 5828|  11.0k|    }
 5829|  11.0k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  11.0k|                       std::is_same_v<T, wregex_matches>) {
 5831|  11.0k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  11.0k|    }
 5833|  11.0k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  11.0k|        return reader_impl_for_voidptr<CharT>{};
 5835|  11.0k|    }
 5836|  11.0k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  11.0k|        return reader_impl_for_float<CharT>{};
 5838|  11.0k|    }
 5839|  11.0k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  11.0k|                       !std::is_same_v<T, wchar_t> &&
 5841|  11.0k|                       !std::is_same_v<T, char32_t> &&
 5842|  11.0k|                       !std::is_same_v<T, bool>) {
 5843|  11.0k|        return reader_impl_for_int<CharT>{};
 5844|  11.0k|    }
 5845|  11.0k|    else {
 5846|  11.0k|        return reader_impl_for_monostate<CharT>{};
 5847|  11.0k|    }
 5848|  11.0k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  1.43k|    {
 5277|  1.43k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  1.43k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  1.43k|        return read_impl(range, specs, value);
 5279|  1.43k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  1.43k|    {
 5295|  1.43k|        SCN_CLANG_PUSH
 5296|  1.43k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  1.43k|        switch (m_type) {
 5299|    338|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 338, False: 1.09k]
  ------------------
 5300|    338|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     56|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 56, False: 1.38k]
  ------------------
 5303|     56|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     56|                                                                   value);
 5305|       |
 5306|     34|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 34, False: 1.40k]
  ------------------
 5307|     34|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    468|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 468, False: 968]
  ------------------
 5310|    468|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    468|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      2|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 2, False: 1.43k]
  ------------------
 5315|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      2|                    range, specs.charset_string<SourceCharT>(),
 5317|      2|                    specs.regexp_flags, value);
 5318|       |
 5319|    538|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 538, False: 898]
  ------------------
 5320|    538|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    538|                    range,
 5322|    538|                    get_unescaped_regex_pattern(
 5323|    538|                        specs.charset_string<SourceCharT>()),
 5324|    538|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 1.43k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  1.43k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  1.43k|        }
 5331|       |
 5332|  1.43k|        SCN_CLANG_POP
 5333|  1.43k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4826|    338|    {
 4827|    338|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|    338|                                     value);
 4829|    338|    }
_ZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEE:
 4772|    428|{
 4773|    428|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    428|    auto src = [&]() {
 4776|    428|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    428|            return make_contiguous_buffer(
 4778|    428|                ranges::subrange{range.begin().base(), result.base()});
 4779|    428|        }
 4780|    428|        else {
 4781|    428|            return make_contiguous_buffer(
 4782|    428|                ranges::subrange{range.begin(), result});
 4783|    428|        }
 4784|    428|    }();
 4785|    428|    using src_type = decltype(src);
 4786|       |
 4787|    428|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|    428|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|    428|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|    428|                                     "Cannot read a string_view from "
 4796|    428|                                     "this source range (would require "
 4797|    428|                                     "transcoding)");
 4798|    428|    }
 4799|    428|    else {
 4800|    428|        const auto view = src.view();
 4801|    428|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    428|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 178, False: 250]
  ------------------
 4804|    178|            return unexpected_scan_error(
 4805|    178|                scan_error::invalid_scanned_value,
 4806|    178|                "Invalid encoding in scanned string_view");
 4807|    178|        }
 4808|       |
 4809|    250|        return SCN_MOVE(result);
  ------------------
  |  |  928|    250|    static_cast<    \
  |  |  929|    250|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    428|    }
 4811|    428|}
_ZZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEEENKUlvE_clEv:
 4775|    428|    auto src = [&]() {
 4776|    428|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|    428|            return make_contiguous_buffer(
 4778|    428|                ranges::subrange{range.begin().base(), result.base()});
 4779|    428|        }
 4780|    428|        else {
 4781|    428|            return make_contiguous_buffer(
 4782|    428|                ranges::subrange{range.begin(), result});
 4783|    428|        }
 4784|    428|    }();
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 4862|     56|    {
 4863|     56|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4863:13): [True: 34, False: 22]
  ------------------
 4864|     34|            return read_string_view_impl(
 4865|     34|                range,
 4866|     34|                read_until_code_unit(
 4867|     34|                    range,
 4868|     34|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4869|     34|                        SourceCharT ch) { return ch == until; }),
 4870|     34|                value);
 4871|     34|        }
 4872|     22|        return read_string_view_impl(
 4873|     22|            range,
 4874|     22|            read_until_code_units(
 4875|     22|                range, specs.fill.template get_code_units<SourceCharT>()),
 4876|     22|            value);
 4877|     56|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_S11_LPv0EEEOSL_:
  753|     34|    {
  754|     34|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_S11_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|    782|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    782|              cvref<T> obj = *get<T>(fn);
  745|    782|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    782|                  obj(static_cast<decltype(args)>(args)...);
  747|    782|              }
  748|    782|              else {
  749|    782|                  return obj(static_cast<decltype(args)>(args)...);
  750|    782|              }
  751|    782|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_17basic_string_viewIT0_NSI_11char_traitsISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|    782|    {
  684|    782|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    782|            return static_cast<T*>(s.m_cp);
  686|    782|        }
  687|    782|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    782|            return static_cast<T*>(s.m_p);
  689|    782|        }
  690|    782|        else {
  691|    782|            return reinterpret_cast<T*>(s.m_fp);
  692|    782|        }
  693|    782|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEEENKUlcE_clEc:
 4869|    782|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_LPv0EEEPSL_:
  661|     34|        {
  662|     34|        }
_ZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4958|     34|    {
 4959|     34|        return read_impl(
 4960|     34|            range,
 4961|     34|            [&](const auto& rng) {
 4962|     34|                return read_string_view_impl(rng, read_all(rng), value);
 4963|     34|            },
 4964|     34|            detail::priority_tag<1>{});
 4965|     34|    }
_ZN3scn2v34impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_17basic_string_viewIT0_NSG_11char_traitsISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSX_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     34|    {
 4974|     34|        return read_cb(range);
 4975|     34|    }
_ZZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEEENKUlRKSH_E_clISD_EEDaSU_:
 4961|     34|            [&](const auto& rng) {
 4962|     34|                return read_string_view_impl(rng, read_all(rng), value);
 4963|     34|            },
_ZN3scn2v34impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 5061|    468|    {
 5062|    468|        auto it = read_source_impl(range, {specs});
 5063|    468|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    468|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20, False: 448]
  |  |  ------------------
  ------------------
 5064|     20|            return unexpected(it.error());
 5065|     20|        }
 5066|       |
 5067|    448|        return read_string_view_impl(range, *it, value);
 5068|    468|    }
_ZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEE:
 4772|    448|{
 4773|    448|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    448|    auto src = [&]() {
 4776|    448|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    448|            return make_contiguous_buffer(
 4778|    448|                ranges::subrange{range.begin().base(), result.base()});
 4779|    448|        }
 4780|    448|        else {
 4781|    448|            return make_contiguous_buffer(
 4782|    448|                ranges::subrange{range.begin(), result});
 4783|    448|        }
 4784|    448|    }();
 4785|    448|    using src_type = decltype(src);
 4786|       |
 4787|    448|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|    448|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|    448|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|    448|                                     "Cannot read a string_view from "
 4796|    448|                                     "this source range (would require "
 4797|    448|                                     "transcoding)");
 4798|    448|    }
 4799|    448|    else {
 4800|    448|        const auto view = src.view();
 4801|    448|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    448|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 202, False: 246]
  ------------------
 4804|    202|            return unexpected_scan_error(
 4805|    202|                scan_error::invalid_scanned_value,
 4806|    202|                "Invalid encoding in scanned string_view");
 4807|    202|        }
 4808|       |
 4809|    246|        return SCN_MOVE(result);
  ------------------
  |  |  928|    246|    static_cast<    \
  |  |  929|    246|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    448|    }
 4811|    448|}
_ZZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEEENKUlvE_clEv:
 4775|    448|    auto src = [&]() {
 4776|    448|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|    448|            return make_contiguous_buffer(
 4778|    448|                ranges::subrange{range.begin().base(), result.base()});
 4779|    448|        }
 4780|    448|        else {
 4781|    448|            return make_contiguous_buffer(
 4782|    448|                ranges::subrange{range.begin(), result});
 4783|    448|        }
 4784|    448|    }();
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSN_IT0_NSO_IST_EEEE:
 4901|    540|    {
 4902|    540|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|    540|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    540|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    540|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    540|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 540, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    540|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    540|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    540|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    540|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    540|    }                                                  \
  |  |  |  | 3671|    540|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4903|      0|        return read_string_view_impl(range, it, value);
 4904|    540|    }
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5276|  8.71k|    {
 5277|  8.71k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  8.71k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  8.71k|        return read_impl(range, specs, value);
 5279|  8.71k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5294|  8.71k|    {
 5295|  8.71k|        SCN_CLANG_PUSH
 5296|  8.71k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  8.71k|        switch (m_type) {
 5299|    288|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 288, False: 8.43k]
  ------------------
 5300|    288|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     46|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 46, False: 8.67k]
  ------------------
 5303|     46|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     46|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 8.71k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  1.39k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 1.39k, False: 7.32k]
  ------------------
 5310|  1.39k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  1.39k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  6.34k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 6.34k, False: 2.37k]
  ------------------
 5315|  6.34k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  6.34k|                    range, specs.charset_string<SourceCharT>(),
 5317|  6.34k|                    specs.regexp_flags, value);
 5318|       |
 5319|    654|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 654, False: 8.06k]
  ------------------
 5320|    654|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    654|                    range,
 5322|    654|                    get_unescaped_regex_pattern(
 5323|    654|                        specs.charset_string<SourceCharT>()),
 5324|    654|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 8.71k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  8.71k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  8.71k|        }
 5331|       |
 5332|  8.71k|        SCN_CLANG_POP
 5333|  8.71k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4826|    994|    {
 4827|    994|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|    994|                                     value);
 4829|    994|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4772|  1.04k|{
 4773|  1.04k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|  1.04k|    auto src = [&]() {
 4776|  1.04k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|  1.04k|            return make_contiguous_buffer(
 4778|  1.04k|                ranges::subrange{range.begin().base(), result.base()});
 4779|  1.04k|        }
 4780|  1.04k|        else {
 4781|  1.04k|            return make_contiguous_buffer(
 4782|  1.04k|                ranges::subrange{range.begin(), result});
 4783|  1.04k|        }
 4784|  1.04k|    }();
 4785|  1.04k|    using src_type = decltype(src);
 4786|       |
 4787|  1.04k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|  1.04k|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|  1.04k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|  1.04k|                                     "Cannot read a string_view from "
 4796|  1.04k|                                     "this source range (would require "
 4797|  1.04k|                                     "transcoding)");
 4798|  1.04k|    }
 4799|  1.04k|    else {
 4800|  1.04k|        const auto view = src.view();
 4801|  1.04k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|  1.04k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 392, False: 648]
  ------------------
 4804|    392|            return unexpected_scan_error(
 4805|    392|                scan_error::invalid_scanned_value,
 4806|    392|                "Invalid encoding in scanned string_view");
 4807|    392|        }
 4808|       |
 4809|    648|        return SCN_MOVE(result);
  ------------------
  |  |  928|    648|    static_cast<    \
  |  |  929|    648|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|  1.04k|    }
 4811|  1.04k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4775|  1.04k|    auto src = [&]() {
 4776|  1.04k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|  1.04k|            return make_contiguous_buffer(
 4778|  1.04k|                ranges::subrange{range.begin().base(), result.base()});
 4779|  1.04k|        }
 4780|  1.04k|        else {
 4781|  1.04k|            return make_contiguous_buffer(
 4782|  1.04k|                ranges::subrange{range.begin(), result});
 4783|  1.04k|        }
 4784|  1.04k|    }();
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 4862|     46|    {
 4863|     46|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4863:13): [True: 32, False: 14]
  ------------------
 4864|     32|            return read_string_view_impl(
 4865|     32|                range,
 4866|     32|                read_until_code_unit(
 4867|     32|                    range,
 4868|     32|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4869|     32|                        SourceCharT ch) { return ch == until; }),
 4870|     32|                value);
 4871|     32|        }
 4872|     14|        return read_string_view_impl(
 4873|     14|            range,
 4874|     14|            read_until_code_units(
 4875|     14|                range, specs.fill.template get_code_units<SourceCharT>()),
 4876|     14|            value);
 4877|     46|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_SZ_LPv0EEEOSJ_:
  753|     32|    {
  754|     32|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_SZ_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES14_c:
  743|    454|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    454|              cvref<T> obj = *get<T>(fn);
  745|    454|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    454|                  obj(static_cast<decltype(args)>(args)...);
  747|    454|              }
  748|    454|              else {
  749|    454|                  return obj(static_cast<decltype(args)>(args)...);
  750|    454|              }
  751|    454|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_17basic_string_viewIT0_NSG_11char_traitsIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    454|    {
  684|    454|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    454|            return static_cast<T*>(s.m_cp);
  686|    454|        }
  687|    454|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    454|            return static_cast<T*>(s.m_p);
  689|    454|        }
  690|    454|        else {
  691|    454|            return reinterpret_cast<T*>(s.m_fp);
  692|    454|        }
  693|    454|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEEENKUlcE_clEc:
 4869|    454|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_LPv0EEEPSJ_:
  661|     32|        {
  662|     32|        }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5061|  1.39k|    {
 5062|  1.39k|        auto it = read_source_impl(range, {specs});
 5063|  1.39k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 384, False: 1.00k]
  |  |  ------------------
  ------------------
 5064|    384|            return unexpected(it.error());
 5065|    384|        }
 5066|       |
 5067|  1.00k|        return read_string_view_impl(range, *it, value);
 5068|  1.39k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4772|  1.85k|{
 4773|  1.85k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|  1.85k|    auto src = [&]() {
 4776|  1.85k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|  1.85k|            return make_contiguous_buffer(
 4778|  1.85k|                ranges::subrange{range.begin().base(), result.base()});
 4779|  1.85k|        }
 4780|  1.85k|        else {
 4781|  1.85k|            return make_contiguous_buffer(
 4782|  1.85k|                ranges::subrange{range.begin(), result});
 4783|  1.85k|        }
 4784|  1.85k|    }();
 4785|  1.85k|    using src_type = decltype(src);
 4786|       |
 4787|  1.85k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|  1.85k|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|  1.85k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|  1.85k|                                     "Cannot read a string_view from "
 4796|  1.85k|                                     "this source range (would require "
 4797|  1.85k|                                     "transcoding)");
 4798|  1.85k|    }
 4799|  1.85k|    else {
 4800|  1.85k|        const auto view = src.view();
 4801|  1.85k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|  1.85k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 192, False: 1.66k]
  ------------------
 4804|    192|            return unexpected_scan_error(
 4805|    192|                scan_error::invalid_scanned_value,
 4806|    192|                "Invalid encoding in scanned string_view");
 4807|    192|        }
 4808|       |
 4809|  1.66k|        return SCN_MOVE(result);
  ------------------
  |  |  928|  1.66k|    static_cast<    \
  |  |  929|  1.66k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|  1.85k|    }
 4811|  1.85k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4775|  1.85k|    auto src = [&]() {
 4776|  1.85k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|  1.85k|            return make_contiguous_buffer(
 4778|  1.85k|                ranges::subrange{range.begin().base(), result.base()});
 4779|  1.85k|        }
 4780|  1.85k|        else {
 4781|  1.85k|            return make_contiguous_buffer(
 4782|  1.85k|                ranges::subrange{range.begin(), result});
 4783|  1.85k|        }
 4784|  1.85k|    }();
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSL_IT0_NSM_ISR_EEEE:
 4901|  6.99k|    {
 4902|  6.99k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|  6.99k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  6.99k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  6.99k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  6.99k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.14k, False: 852]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  6.14k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  6.14k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  6.14k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  6.14k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  6.14k|    }                                                  \
  |  |  |  | 3671|  6.99k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    852|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4903|    852|        return read_string_view_impl(range, it, value);
 4904|  6.99k|    }
_ZN3scn2v34impl16char_reader_baseIwE11check_specsERKNS0_6detail12format_specsE:
 5623|  6.20k|    {
 5624|  6.20k|        reader_error_handler eh{};
 5625|  6.20k|        if constexpr (std::is_same_v<ValueCharT, char32_t>) {
  ------------------
  |  Branch (5625:23): [Folded - Ignored]
  ------------------
 5626|  6.20k|            detail::check_code_point_type_specs(specs, eh);
 5627|  6.20k|        }
 5628|  6.20k|        else {
 5629|  6.20k|            detail::check_char_type_specs(specs, eh);
 5630|  6.20k|        }
 5631|  6.20k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  6.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.64k, False: 562]
  |  |  ------------------
  ------------------
 5632|  5.64k|            return {scan_error::invalid_format_string, eh.m_msg};
 5633|  5.64k|        }
 5634|    562|        return {};
 5635|  6.20k|    }
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|  9.91k|    {
  763|  9.91k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  9.91k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  9.91k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  1.70k|    {
  754|  1.70k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEwE_clESE_w:
  743|  3.20k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.20k|              cvref<T> obj = *get<T>(fn);
  745|  3.20k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  3.20k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.20k|              }
  748|  3.20k|              else {
  749|  3.20k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.20k|              }
  751|  3.20k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  3.20k|    {
  684|  3.20k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  3.20k|            return static_cast<T*>(s.m_cp);
  686|  3.20k|        }
  687|  3.20k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  3.20k|            return static_cast<T*>(s.m_p);
  689|  3.20k|        }
  690|  3.20k|        else {
  691|  3.20k|            return reinterpret_cast<T*>(s.m_fp);
  692|  3.20k|        }
  693|  3.20k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEELPv0EEEPT_:
  661|  1.70k|        {
  662|  1.70k|        }
_ZNK3scn2v34impl16char_reader_baseIwE19skip_ws_before_readEv:
 5618|  20.6k|    {
 5619|  20.6k|        return false;
 5620|  20.6k|    }
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1779|    104|    {
 1780|    104|        auto stdloc = loc.get<std::locale>();
 1781|    104|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|    104|        grouping = numpunct.grouping();
 1783|    104|        thousands_sep =
 1784|    104|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 104]
  ------------------
 1785|    104|        decimal_point = numpunct.decimal_point();
 1786|    104|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1716|    134|{
 1717|    134|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 134, False: 0]
  ------------------
 1718|    134|        return std::use_facet<Facet>(stdloc);
 1719|    134|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|    134|}
_ZN3scn2v34impl20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2348|  4.77k|{
 2349|  4.77k|    size_t count{0};
 2350|  4.77k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|  4.77k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|  4.77k|    });
 2353|  4.77k|    return count;
 2354|  4.77k|}
_ZN3scn2v34impl19for_each_code_pointIwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_12function_refIFvDiESA_EE:
 1445|  4.77k|{
 1446|       |    // TODO: Could be optimized by being eager
 1447|  4.77k|    auto it = input.begin();
 1448|  10.8k|    while (it != input.end()) {
  ------------------
  |  Branch (1448:12): [True: 6.05k, False: 4.77k]
  ------------------
 1449|  6.05k|        auto res = get_next_code_point(
 1450|  6.05k|            detail::make_string_view_from_iterators<CharT>(it, input.end()));
 1451|  6.05k|        cb(res.value);
 1452|  6.05k|        it = detail::make_string_view_iterator(input, res.iterator);
 1453|  6.05k|    }
 1454|  4.77k|}
_ZN3scn2v34impl19get_next_code_pointIwEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|   701M|{
 1169|   701M|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   701M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   701M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|   701M|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|   701M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   701M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 701M]
  |  |  ------------------
  ------------------
 1173|      0|        return {get_start_for_next_code_point(input),
 1174|      0|                detail::invalid_code_point};
 1175|      0|    }
 1176|   701M|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|   701M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 701M]
  |  |  ------------------
  ------------------
 1177|      0|        return {input.end(), detail::invalid_code_point};
 1178|      0|    }
 1179|       |
 1180|   701M|    return {input.begin() + len,
 1181|   701M|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|   701M|}
_ZN3scn2v34impl12function_refIFvDiES3_EC2IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_LPv0EEEOS9_:
  753|  4.77k|    {
  754|  4.77k|    }
_ZZN3scn2v34impl12function_refIFvDiES3_EC1IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_LPv0EEEOS9_ENKUlNS1_12fnref_detail4base7storageEDiE_clESI_Di:
  743|  6.05k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.05k|              cvref<T> obj = *get<T>(fn);
  745|  6.05k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  6.05k|                  obj(static_cast<decltype(args)>(args)...);
  747|  6.05k|              }
  748|  6.05k|              else {
  749|  6.05k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.05k|              }
  751|  6.05k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEUlDiE_EEDaNS3_7storageE:
  683|  6.05k|    {
  684|  6.05k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  6.05k|            return static_cast<T*>(s.m_cp);
  686|  6.05k|        }
  687|  6.05k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  6.05k|            return static_cast<T*>(s.m_p);
  689|  6.05k|        }
  690|  6.05k|        else {
  691|  6.05k|            return reinterpret_cast<T*>(s.m_fp);
  692|  6.05k|        }
  693|  6.05k|    }
_ZZN3scn2v34impl20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEENKUlDiE_clEDi:
 2350|  6.05k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|  6.05k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|  6.05k|    });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_LPv0EEEPS9_:
  661|  4.77k|        {
  662|  4.77k|        }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1581|  40.3k|    {
 1582|  40.3k|        return m_view;
 1583|  40.3k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1571|  40.7k|    ~contiguous_range_factory() = default;
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E14multibyte_leftEv:
 2420|    336|    {
 2421|    336|        return m_multibyte_left;
 2422|    336|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EdeEv:
 2425|  67.9k|    {
 2426|  67.9k|        return *m_current;
 2427|  67.9k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EppEv:
 2434|  45.6k|    {
 2435|  45.6k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  45.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  45.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2436|  45.6k|        _increment_current();
 2437|  45.6k|        return *this;
 2438|  45.6k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E18_increment_currentEv:
 2667|  45.6k|    {
 2668|  45.6k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2668:13): [True: 45.6k, False: 0]
  ------------------
 2669|  45.6k|            auto cplen = _get_cp_length_at_current();
 2670|  45.6k|            m_multibyte_left = cplen - 1;
 2671|  45.6k|            m_count -= _get_width_at_current_cp_start(cplen);
 2672|  45.6k|        }
 2673|      0|        else {
 2674|      0|            --m_multibyte_left;
 2675|      0|        }
 2676|       |
 2677|  45.6k|        ++m_current;
 2678|  45.6k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E25_get_cp_length_at_currentEv:
 2638|  45.6k|    {
 2639|  45.6k|        return static_cast<difference_type>(
 2640|  45.6k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2641|  45.6k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E30_get_width_at_current_cp_startEl:
 2644|  45.6k|    {
 2645|  45.6k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|  45.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 45.6k]
  |  |  ------------------
  ------------------
 2646|      0|            return 0;
 2647|      0|        }
 2648|       |
 2649|  45.6k|        if (cplen == 1) {
  ------------------
  |  Branch (2649:13): [True: 45.6k, False: 0]
  ------------------
 2650|  45.6k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  45.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  45.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2651|  45.6k|            auto cp = static_cast<char32_t>(*m_current);
 2652|  45.6k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2653|  45.6k|        }
 2654|       |
 2655|      0|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2656|      0|                                           cplen);
 2657|      0|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2658|      0|            return 0;
 2659|      0|        }
 2660|       |
 2661|      0|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2662|      0|        return static_cast<difference_type>(
 2663|      0|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2664|      0|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1856|   119k|{
 1857|   119k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|   119k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   119k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|   119k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|   119k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|   119k|        if (sz < count) {
  ------------------
  |  Branch (1861:13): [True: 146, False: 119k]
  ------------------
 1862|    146|            return unexpected(eof_error::eof);
 1863|    146|        }
 1864|       |
 1865|   119k|        return ranges::next(range.begin(), count);
 1866|   119k|    }
 1867|   119k|    else {
 1868|   119k|        auto it = range.begin();
 1869|   119k|        if (guaranteed_minimum_size(range) >= count) {
 1870|   119k|            return ranges::next(it, count);
 1871|   119k|        }
 1872|       |
 1873|   119k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1874|   119k|            if (it == range.end()) {
 1875|   119k|                return unexpected(eof_error::eof);
 1876|   119k|            }
 1877|   119k|        }
 1878|       |
 1879|   119k|        return it;
 1880|   119k|    }
 1881|   119k|}
_ZN3scn2v34impl27counted_width_iterator_implneIPKwS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2530|  16.8k|    {
 2531|  16.8k|        return !(a == b);
 2532|  16.8k|    }
_ZN3scn2v34impl27counted_width_iterator_impleqIPKwS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2522|  17.5k|    {
 2523|  17.5k|        return a.m_current == b.m_current;
 2524|  17.5k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EdeEv:
 2429|  2.69k|    {
 2430|  2.69k|        return *m_current;
 2431|  2.69k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EEwE8is_validEv:
 1889|  21.8k|    {
 1890|  21.8k|        return !codepoint.empty();
 1891|  21.8k|    }
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EESB_EEEEDaOT_:
 1682|    442|{
 1683|    442|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|    442|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|    442|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|    442|        return string_view_wrapper{SCN_FWD(range)};
 1687|    442|    }
 1688|    442|    else {
 1689|    442|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|    442|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1690|    442|    }
 1691|    442|}
_ZN3scn2v34impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EELPv0EEEOT_:
 1536|    442|    {
 1537|    442|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|    442|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1538|    442|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEvOT_:
 1620|    442|    {
 1621|    442|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|    442|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|    442|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|    442|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|    442|            m_storage.reset();
 1627|    442|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|    442|        }
 1629|    442|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|    442|                                          std::basic_string<CharT>>) {
 1631|    442|            m_storage.emplace(SCN_FWD(range));
 1632|    442|            m_view = string_view_type{*m_storage};
 1633|    442|        }
 1634|    442|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|    442|                                          typename detail::basic_scan_buffer<
 1636|    442|                                              value_t>::forward_iterator> &&
 1637|    442|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|    442|            auto beg_seg = range.begin().contiguous_segment();
 1639|    442|            auto end_seg = range.end().contiguous_segment();
 1640|    442|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|    442|                             detail::to_address(end_seg.end()))) {
 1642|    442|                auto& str = m_storage.emplace();
 1643|    442|                str.reserve(range.end().position() - range.begin().position());
 1644|    442|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|    442|                m_view = string_view_type{str};
 1646|    442|                return;
 1647|    442|            }
 1648|       |
 1649|    442|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|    442|                                                            end_seg.data());
 1651|    442|            m_storage.reset();
 1652|    442|        }
 1653|    442|        else {
 1654|    442|            auto& str = m_storage.emplace();
 1655|    442|            if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1655:27): [Folded - Ignored]
  ------------------
 1656|    442|                str.reserve(range.size());
 1657|    442|            }
 1658|    442|            if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1658:27): [Folded - Ignored]
  ------------------
 1659|    442|                std::copy(ranges::begin(range), ranges::end(range),
 1660|    442|                          std::back_inserter(str));
 1661|    442|            }
 1662|    442|            else {
 1663|    442|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|    442|                     ++it) {
 1665|    442|                    str.push_back(*it);
 1666|    442|                }
 1667|    442|            }
 1668|    442|            m_view = string_view_type{str};
 1669|    442|        }
 1670|    442|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EC2ES5_S5_l:
 2381|  11.1k|    {
 2382|  11.1k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E4baseEv:
 2412|  62.0k|    {
 2413|  62.0k|        return m_current;
 2414|  62.0k|    }
_ZN3scn2v34impl24read_while_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2116|   361k|{
 2117|   361k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|   361k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|   361k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|   361k|        auto buf = make_contiguous_buffer(range);
 2121|   361k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|   361k|        return ranges::next(range.begin(),
 2123|   361k|                            ranges::distance(buf.view().begin(), it));
 2124|   361k|    }
 2125|   361k|    else {
 2126|   361k|        auto it = range.begin();
 2127|       |
 2128|   361k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|   361k|            auto seg = get_contiguous_beginning(range);
 2130|   361k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|   361k|                seg_it != seg.end()) {
 2132|   361k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   361k|            }
 2134|   361k|            ranges::advance(it, seg.size());
 2135|   361k|        }
 2136|       |
 2137|   361k|        return read_while_code_point(
 2138|   361k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   361k|    }
 2140|   361k|}
_ZN3scn2v34impl21read_while_code_pointINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_NS1_12function_refIFbDiESG_EE:
 2081|   361k|{
 2082|   361k|    return read_until_code_point(range, std::not_fn(pred));
 2083|   361k|}
_ZN3scn2v34impl21read_until_code_pointINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_NS1_12function_refIFbDiESG_EE:
 2060|   361k|{
 2061|   361k|    auto it = range.begin();
 2062|   368k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 367k, False: 1.04k]
  ------------------
 2063|   367k|        const auto val =
 2064|   367k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   367k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   367k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 367k, False: 0]
  |  |  ------------------
  ------------------
 2066|   367k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   367k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   367k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 360k, False: 7.55k]
  ------------------
 2069|   360k|                return it;
 2070|   360k|            }
 2071|   367k|        }
 2072|  7.55k|        it = val.iterator;
 2073|  7.55k|    }
 2074|       |
 2075|  1.04k|    return it;
 2076|   361k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|  1.56M|{
 1899|  1.56M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  1.56M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.56M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  1.56M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  1.56M|    auto it = range.begin();
 1903|  1.56M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  1.56M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  1.56M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.56M]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|  1.56M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 1.56M, False: 0]
  ------------------
 1912|  1.56M|        ++it;
 1913|  1.56M|        return {it, string_type(1, *range.begin())};
 1914|  1.56M|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|  1.56M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|  2.09M|{
  944|  2.09M|    return is_range_eof(r.begin(), r.end());
  945|  2.09M|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|   703M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   703M|    {
  937|   703M|        return begin == end;
  938|   703M|    }
  939|   703M|}
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|  19.9k|    {
  190|  19.9k|        i = std::move(bound);
  191|  19.9k|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1889|  1.56M|    {
 1890|  1.56M|        return !codepoint.empty();
 1891|  1.56M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_LPv0EEEOSE_:
  753|   361k|    {
  754|   361k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_LPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESO_Di:
  743|   367k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   367k|              cvref<T> obj = *get<T>(fn);
  745|   367k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   367k|                  obj(static_cast<decltype(args)>(args)...);
  747|   367k|              }
  748|   367k|              else {
  749|   367k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   367k|              }
  751|   367k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  683|   367k|    {
  684|   367k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   367k|            return static_cast<T*>(s.m_cp);
  686|   367k|        }
  687|   367k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   367k|            return static_cast<T*>(s.m_p);
  689|   367k|        }
  690|   367k|        else {
  691|   367k|            return reinterpret_cast<T*>(s.m_fp);
  692|   367k|        }
  693|   367k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2138|   367k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_LPv0EEEPSE_:
  661|   361k|        {
  662|   361k|        }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|   534k|{
  950|   534k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|   534k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 534k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|   534k|    return eof_error::good;
  954|   534k|}
_ZNK3scn2v34impl14_take_width_fnclINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEDTtlNS1_15take_width_viewEfp_fp0_EERKT_l:
 2831|  3.98k|    {
 2832|  3.98k|        return take_width_view{r, n};
 2833|  3.98k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2ERKS9_l:
 2800|  3.98k|    {
 2801|  3.98k|    }
_ZN3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEvEC2ERKS9_:
 2713|  3.98k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impl21reader_impl_for_wcharIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERwNSN_10locale_refE:
 5698|    186|    {
 5699|    186|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5699:13): [True: 158, False: 28]
  ------------------
 5700|    186|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5700:13): [True: 0, False: 28]
  ------------------
 5701|    158|            return read_default(range, value, loc);
 5702|    158|        }
 5703|       |
 5704|     28|        reader_impl_for_int<CharT> reader{};
 5705|     28|        using integer_type =
 5706|     28|            std::conditional_t<sizeof(wchar_t) == 2, int16_t, int32_t>;
 5707|     28|        integer_type tmp_value{};
 5708|     28|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5709|     28|        value = static_cast<integer_type>(value);
 5710|     28|        return ret;
 5711|    186|    }
_ZN3scn2v34impl21reader_impl_for_wcharIwE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RwNS0_6detail10locale_refE:
 5682|    158|    {
 5683|    158|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    158|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5684|    158|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (5684:23): [Folded - Ignored]
  ------------------
 5685|    158|            return code_point_reader<wchar_t>{}.read(range, value);
 5686|    158|        }
 5687|    158|        else {
 5688|    158|            return code_unit_reader<wchar_t>{}.read(range, value);
 5689|    158|        }
 5690|    158|    }
_ZN3scn2v34impl16code_unit_readerIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSH_Rw:
 5563|    158|    {
 5564|    158|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3672|    158|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    158|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    158|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    158|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 158]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    158|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    158|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5565|    158|        ch = *range.begin();
 5566|    158|        return it;
 5567|    158|    }
_ZN3scn2v34impl14read_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 1845|  1.34k|{
 1846|  1.34k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.34k]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|  1.34k|    return ranges::next(range.begin());
 1851|  1.34k|}
_ZN3scn2v34impl9eof_checkINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_9eof_errorET_:
  949|  1.34k|{
  950|  1.34k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.34k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  1.34k|    return eof_error::good;
  954|  1.34k|}
_ZN3scn2v34impl12is_range_eofINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEbT_:
  943|  1.34k|{
  944|  1.34k|    return is_range_eof(r.begin(), r.end());
  945|  1.34k|}
_ZN3scn2v34impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEbT_T0_:
  927|  23.1k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  23.1k|    {
  937|  23.1k|        return begin == end;
  938|  23.1k|    }
  939|  23.1k|}
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2769|  59.4k|        {
 2770|  59.4k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2770:21): [True: 336, False: 59.0k]
  |  Branch (2770:39): [True: 336, False: 0]
  ------------------
 2771|  59.4k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2771:20): [True: 408, False: 58.6k]
  ------------------
 2772|  59.4k|        }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE3endEv:
 2815|  14.0k|    {
 2816|  14.0k|        return sentinel<true>{m_base.get().end()};
 2817|  14.0k|    }
_ZNK3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEvE3getEv:
 2716|  36.3k|    {
 2717|  36.3k|        return view;
 2718|  36.3k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE8sentinelILb1EEC2ES8_:
 2750|  14.0k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
  295|  1.38k|    {
  296|  1.38k|        ++x;
  297|  1.38k|        return x;
  298|  1.38k|    }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 2809|  11.1k|    {
 2810|  11.1k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2811|  11.1k|                                      m_count};
 2812|  11.1k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEiEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    228|    {
 3539|    228|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    228|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    228|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    228|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    228|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 228]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    228|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    228|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    228|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    228|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 228]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    228|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 228]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    228|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    228|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 214, False: 14]
  |  |  ------------------
  ------------------
 3565|    214|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    214|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    214|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    214|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    214|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 214, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    214|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    214|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    214|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    214|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    214|    }                                                  \
  |  |  |  | 3671|    214|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|     14|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     14|            localized_number_formatting_options<CharT>{loc};
 3586|     14|#endif
 3587|       |
 3588|     14|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     14|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     14|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     14|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     14|    }                                                  \
  |  |  |  | 3671|     14|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESG_i:
 3325|    590|{
 3326|    590|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3672|    590|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    590|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    590|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    590|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 590]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    590|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    590|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|    590|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|    590|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|    590|        parse_integer_base_prefix(
 3331|    590|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|    590|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 0, False: 590]
  ------------------
 3334|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 0, False: 0]
  |  Branch (3334:13): [True: 0, False: 0]
  ------------------
 3335|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 0, False: 0]
  ------------------
 3336|      0|            digits_begin_it = base_prefix_begin_it;
 3337|      0|        }
 3338|      0|        else {
 3339|      0|            parsed_zero = false;
 3340|      0|        }
 3341|      0|    }
 3342|    590|    else {
 3343|    590|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3343:13): [True: 0, False: 590]
  |  Branch (3343:13): [True: 590, False: 0]
  ------------------
 3344|    590|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3344:13): [True: 590, False: 0]
  ------------------
 3345|    590|            digits_begin_it = base_prefix_begin_it;
 3346|    590|        }
 3347|    590|    }
 3348|       |
 3349|    590|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3349:9): [True: 590, False: 0]
  ------------------
 3350|    590|        sign = sign_type::plus_sign;
 3351|    590|    }
 3352|    590|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3353|    590|        digits_begin_it, parsed_base, sign, parsed_zero};
 3354|    590|}
_ZN3scn2v34impl18parse_numeric_signINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESG_:
 3140|    790|{
 3141|    790|    auto r = read_one_of_code_unit(range, "+-");
 3142|    790|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 790, False: 0]
  ------------------
 3143|    790|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 790, False: 0]
  ------------------
 3144|    790|            return std::pair{range.begin(), sign_type::default_sign};
 3145|    790|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|    790|    }
 3148|       |
 3149|      0|    auto& it = *r;
 3150|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 0, False: 0]
  ------------------
 3151|      0|        return std::pair{it, sign_type::minus_sign};
 3152|      0|    }
 3153|      0|    return std::pair{it, sign_type::plus_sign};
 3154|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2271|    790|{
 2272|    790|    auto it = read_code_unit(range);
 2273|    790|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    790|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 790]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|  1.58k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 1.58k, False: 790]
  ------------------
 2278|  1.58k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 0, False: 1.58k]
  ------------------
 2279|      0|            return *it;
 2280|      0|        }
 2281|  1.58k|    }
 2282|       |
 2283|    790|    return unexpected(parse_error::error);
 2284|    790|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_i:
 3292|    590|{
 3293|    590|    switch (base) {
 3294|      6|        case 2:
  ------------------
  |  Branch (3294:9): [True: 6, False: 584]
  ------------------
 3295|       |            // allow 0b/0B
 3296|      6|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|      6|                    false};
 3298|       |
 3299|     24|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 24, False: 566]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|     24|            bool zero_parsed = false;
 3302|     24|            auto it = apply_opt(
 3303|     24|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|     24|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|    168|        case 16:
  ------------------
  |  Branch (3307:9): [True: 168, False: 422]
  ------------------
 3308|       |            // allow 0x/0X
 3309|    168|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|    168|                    false};
 3311|       |
 3312|     12|        case 0:
  ------------------
  |  Branch (3312:9): [True: 12, False: 578]
  ------------------
 3313|       |            // detect base
 3314|     12|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|    380|        default:
  ------------------
  |  Branch (3316:9): [True: 380, False: 210]
  ------------------
 3317|       |            // no base prefix allowed
 3318|    380|            return {range.begin(), base, false};
 3319|    590|    }
 3320|    590|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENS1_14parse_expectedESB_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEEE4typeEOSN_SP_:
 2290|    198|{
 2291|    198|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 198, False: 0]
  ------------------
 2292|    198|        return range.begin();
 2293|    198|    }
 2294|      0|    return *result;
 2295|    198|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3243|     18|{
 3244|     18|    return read_matching_string_classic_nocase(range, "0b");
 3245|     18|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEE:
 2230|    818|{
 2231|    818|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|    818|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|    818|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|    818|        if (range.size() < str.size()) {
 2236|    818|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|    818|        }
 2238|    818|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|    818|            return unexpected(parse_error::error);
 2240|    818|        }
 2241|    818|        return ranges::next(range.begin(), str.size());
 2242|    818|    }
 2243|    818|    else {
 2244|    818|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|    818|            if (ch < 'A' || ch > 'Z') {
 2246|    818|                return ch;
 2247|    818|            }
 2248|    818|            return static_cast<char_type>(ch +
 2249|    818|                                          static_cast<char_type>('a' - 'A'));
 2250|    818|        };
 2251|       |
 2252|    818|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|    818|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    818|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    818|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    818|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 78, False: 740]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     78|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     78|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     78|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     78|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     78|    }                                                  \
  |  |  |  | 3671|    818|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    740|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|    740|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|    740|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|    740|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|    740|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 740, False: 0]
  |  |  ------------------
  ------------------
 2257|    740|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|    740|                    return ascii_tolower(a) ==
 2259|    740|                           static_cast<detail::char_t<Range>>(b);
 2260|    740|                }))) {
 2261|    740|            return unexpected(parse_error::error);
 2262|    740|        }
 2263|       |
 2264|      0|        return it;
 2265|    740|    }
 2266|    818|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_l:
 1856|    818|{
 1857|    818|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|    818|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    818|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|    818|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|    818|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|    818|        if (sz < count) {
 1862|    818|            return unexpected(eof_error::eof);
 1863|    818|        }
 1864|       |
 1865|    818|        return ranges::next(range.begin(), count);
 1866|    818|    }
 1867|    818|    else {
 1868|    818|        auto it = range.begin();
 1869|    818|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 818]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|  2.76k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 2.02k, False: 740]
  ------------------
 1874|  2.02k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 78, False: 1.94k]
  ------------------
 1875|     78|                return unexpected(eof_error::eof);
 1876|     78|            }
 1877|  2.02k|        }
 1878|       |
 1879|    740|        return it;
 1880|    818|    }
 1881|    818|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEmT_:
 1094|    818|{
 1095|    818|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|    818|        return r.size();
 1097|    818|    }
 1098|    818|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|    818|                           ranges::const_iterator_t<Range>,
 1100|    818|                           typename detail::basic_scan_buffer<
 1101|    818|                               detail::char_t<Range>>::forward_iterator>) {
 1102|    818|        if constexpr (ranges::common_range<Range>) {
 1103|    818|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|    818|        }
 1105|    818|        else {
 1106|    818|            if (r.begin().stores_parent()) {
 1107|    818|                return static_cast<size_t>(
 1108|    818|                    r.begin().parent()->chars_available() -
 1109|    818|                    r.begin().position());
 1110|    818|            }
 1111|    818|            return r.begin().contiguous_segment().size();
 1112|    818|        }
 1113|    818|    }
 1114|    818|    else {
 1115|    818|        return 0;
 1116|    818|    }
 1117|    818|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlwE_clEw:
 2244|    740|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|    740|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 22, False: 718]
  |  Branch (2245:29): [True: 718, False: 0]
  ------------------
 2246|    740|                return ch;
 2247|    740|            }
 2248|      0|            return static_cast<char_type>(ch +
 2249|      0|                                          static_cast<char_type>('a' - 'A'));
 2250|    740|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_Rb:
 3257|     36|{
 3258|     36|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 0, False: 36]
  ------------------
 3259|      0|        return *r;
 3260|      0|    }
 3261|       |
 3262|     36|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 0, False: 36]
  ------------------
 3263|      0|        zero_parsed = true;
 3264|      0|        return *r;
 3265|      0|    }
 3266|       |
 3267|     36|    return unexpected(parse_error::error);
 3268|     36|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NDTcl4implISL_EEE4typeE:
 2145|     36|{
 2146|     36|    auto it = read_code_unit(range);
 2147|     36|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|     36|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 36]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|     36|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|     36|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 36, False: 0]
  |  |  ------------------
  ------------------
 2152|     36|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|     36|        return unexpected(parse_error::error);
 2154|     36|    }
 2155|       |
 2156|      0|    return *it;
 2157|     36|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 1845|     36|{
 1846|     36|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     36|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 36]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|     36|    return ranges::next(range.begin());
 1851|     36|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_9eof_errorET_:
  949|     36|{
  950|     36|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|     36|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 36]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|     36|    return eof_error::good;
  954|     36|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEbT_:
  943|  21.8k|{
  944|  21.8k|    return is_range_eof(r.begin(), r.end());
  945|  21.8k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3250|    180|{
 3251|    180|    return read_matching_string_classic_nocase(range, "0x");
 3252|    180|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_:
 3273|     12|{
 3274|     12|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 0, False: 12]
  ------------------
 3275|      0|        return {*r, 16, false};
 3276|      0|    }
 3277|     12|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 0, False: 12]
  ------------------
 3278|      0|        return {*r, 2, false};
 3279|      0|    }
 3280|     12|    {
 3281|     12|        bool zero_parsed{false};
 3282|     12|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 0, False: 12]
  ------------------
 3283|      0|            return {*r, 8, zero_parsed};
 3284|      0|        }
 3285|     12|    }
 3286|     12|    return {range.begin(), 10, false};
 3287|     12|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_i:
 3359|    562|{
 3360|    562|    using char_type = detail::char_t<Range>;
 3361|       |
 3362|    562|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (3362:19): [Folded - Ignored]
  ------------------
 3363|    562|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3364|    562|            return unexpected_scan_error(
 3365|    562|                scan_error::invalid_scanned_value,
 3366|    562|                "Failed to parse integer: No digits found");
 3367|    562|        }
 3368|    562|        return range.end();
 3369|    562|    }
 3370|    562|    else {
 3371|    562|        return read_while1_code_unit(range,
 3372|    562|                                     [&](char_type ch) noexcept {
 3373|    562|                                         return char_to_int(ch) < base;
 3374|    562|                                     })
 3375|    562|            .transform_error(map_parse_error_to_scan_error(
 3376|    562|                scan_error::invalid_scanned_value,
 3377|    562|                "Failed to parse integer: No digits found"));
 3378|    562|    }
 3379|    562|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigISU_E8functionEEE:
 1995|    762|{
 1996|    762|    auto it = read_while_code_unit(range, pred);
 1997|    762|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 762, False: 0]
  ------------------
 1998|    762|        return unexpected(parse_error::error);
 1999|    762|    }
 2000|      0|    return it;
 2001|    762|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1975|    762|{
 1976|    762|    return read_until_code_unit(range, std::not_fn(pred));
 1977|    762|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1956|    762|{
 1957|    762|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|    762|        return std::find_if(range.begin(), range.end(), pred);
 1959|    762|    }
 1960|    762|    else {
 1961|    762|        auto first = range.begin();
 1962|    762|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 762, False: 0]
  ------------------
 1963|    762|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 762, False: 0]
  ------------------
 1964|    762|                return first;
 1965|    762|            }
 1966|    762|        }
 1967|      0|        return first;
 1968|    762|    }
 1969|    762|}
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2780|  27.7k|        {
 2781|  27.7k|            return !(y == x);
 2782|  27.7k|        }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_SV_LPv0EEEOSP_:
  753|    562|    {
  754|    562|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_SV_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageEwE_clES10_w:
  743|    562|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    562|              cvref<T> obj = *get<T>(fn);
  745|    562|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    562|                  obj(static_cast<decltype(args)>(args)...);
  747|    562|              }
  748|    562|              else {
  749|    562|                  return obj(static_cast<decltype(args)>(args)...);
  750|    562|              }
  751|    562|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSD_EENS1_15take_width_viewINS9_ISD_SD_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_iEUlwE_EEDaNS3_7storageE:
  683|    562|    {
  684|    562|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    562|            return static_cast<T*>(s.m_cp);
  686|    562|        }
  687|    562|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    562|            return static_cast<T*>(s.m_p);
  689|    562|        }
  690|    562|        else {
  691|    562|            return reinterpret_cast<T*>(s.m_fp);
  692|    562|        }
  693|    562|    }
_ZZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_iENKUlwE_clEw:
 3372|    562|                                     [&](char_type ch) noexcept {
 3373|    562|                                         return char_to_int(ch) < base;
 3374|    562|                                     })
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_LPv0EEEPSP_:
  661|    562|        {
  662|    562|        }
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEENSJ_12basic_stringIT0_NSJ_11char_traitsISS_EENSJ_9allocatorISS_EEEENSR_IcNST_IcEENSV_IcEEEEEEEEESM_iRKNS1_35localized_number_formatting_optionsISS_EE:
 3389|     28|{
 3390|     28|    std::basic_string<CharT> output;
 3391|     28|    std::string thsep_indices;
 3392|     28|    auto it = range.begin();
 3393|     28|    bool digit_matched = false;
 3394|     28|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3394:12): [True: 28, False: 0]
  ------------------
 3395|     28|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3395:13): [True: 0, False: 28]
  ------------------
 3396|      0|            thsep_indices.push_back(
 3397|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3398|      0|        }
 3399|     28|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3399:18): [True: 28, False: 0]
  ------------------
 3400|     28|            break;
 3401|     28|        }
 3402|      0|        else {
 3403|      0|            output.push_back(*it);
 3404|      0|            digit_matched = true;
 3405|      0|        }
 3406|     28|    }
 3407|     28|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     28|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28, False: 0]
  |  |  ------------------
  ------------------
 3408|     28|        return unexpected_scan_error(
 3409|     28|            scan_error::invalid_scanned_value,
 3410|     28|            "Failed to parse integer: No digits found");
 3411|     28|    }
 3412|      0|    return std::tuple{it, output, thsep_indices};
 3413|     28|}
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E5countEv:
 2416|  60.0k|    {
 2417|  60.0k|        return m_count;
 2418|  60.0k|    }
_ZN3scn2v34impl21reader_impl_for_wcharIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERwNSL_10locale_refE:
 5698|    374|    {
 5699|    374|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5699:13): [True: 360, False: 14]
  ------------------
 5700|    374|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5700:13): [True: 0, False: 14]
  ------------------
 5701|    360|            return read_default(range, value, loc);
 5702|    360|        }
 5703|       |
 5704|     14|        reader_impl_for_int<CharT> reader{};
 5705|     14|        using integer_type =
 5706|     14|            std::conditional_t<sizeof(wchar_t) == 2, int16_t, int32_t>;
 5707|     14|        integer_type tmp_value{};
 5708|     14|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5709|     14|        value = static_cast<integer_type>(value);
 5710|     14|        return ret;
 5711|    374|    }
_ZN3scn2v34impl21reader_impl_for_wcharIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RwNS0_6detail10locale_refE:
 5682|  19.9k|    {
 5683|  19.9k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  19.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5684|  19.9k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (5684:23): [Folded - Ignored]
  ------------------
 5685|  19.9k|            return code_point_reader<wchar_t>{}.read(range, value);
 5686|  19.9k|        }
 5687|  19.9k|        else {
 5688|  19.9k|            return code_unit_reader<wchar_t>{}.read(range, value);
 5689|  19.9k|        }
 5690|  19.9k|    }
_ZN3scn2v34impl16code_unit_readerIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_Rw:
 5563|  19.9k|    {
 5564|  19.9k|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3672|  19.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  19.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  19.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  19.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 19.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  19.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  19.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5565|  19.9k|        ch = *range.begin();
 5566|  19.9k|        return it;
 5567|  19.9k|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|   139k|{
 1846|   139k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   139k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 139k]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|   139k|    return ranges::next(range.begin());
 1851|   139k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   701M|    {
  296|   701M|        ++x;
  297|   701M|        return x;
  298|   701M|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    414|    {
 3539|    414|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    414|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    414|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    414|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    414|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 414]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    414|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    414|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    414|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    414|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 414]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    414|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 414]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    414|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    414|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 388, False: 26]
  |  |  ------------------
  ------------------
 3565|    388|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    388|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    388|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    388|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    388|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 388]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    388|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    388|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    388|                    parse_integer_digits_without_thsep(
 3567|    388|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    388|                        prefix_result.parsed_base));
 3569|       |
 3570|    388|            auto buf = make_contiguous_buffer(
 3571|    388|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    388|            SCN_TRY(result_it,
  ------------------
  |  | 3672|    388|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    388|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    388|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    388|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 388, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    388|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    388|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    388|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    388|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    388|    }                                                  \
  |  |  |  | 3671|    388|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    388|        }
 3580|       |
 3581|     26|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     26|            localized_number_formatting_options<CharT>{loc};
 3586|     26|#endif
 3587|       |
 3588|     26|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     26|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     26|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     26|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 26, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     26|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     26|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     26|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     26|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     26|    }                                                  \
  |  |  |  | 3671|     26|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3325|  59.8k|{
 3326|  59.8k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3672|  59.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  59.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  59.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  59.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 59.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  59.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  59.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|  59.8k|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|  59.8k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|  59.8k|        parse_integer_base_prefix(
 3331|  59.8k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|  59.8k|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 0, False: 59.8k]
  ------------------
 3334|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 0, False: 0]
  ------------------
 3335|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 0, False: 0]
  ------------------
 3336|      0|            digits_begin_it = base_prefix_begin_it;
 3337|      0|        }
 3338|      0|        else {
 3339|      0|            parsed_zero = false;
 3340|      0|        }
 3341|      0|    }
 3342|  59.8k|    else {
 3343|  59.8k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3343:13): [True: 0, False: 59.8k]
  ------------------
 3344|  59.8k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3344:13): [True: 59.8k, False: 0]
  ------------------
 3345|  59.8k|            digits_begin_it = base_prefix_begin_it;
 3346|  59.8k|        }
 3347|  59.8k|    }
 3348|       |
 3349|  59.8k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3349:9): [True: 59.8k, False: 0]
  ------------------
 3350|  59.8k|        sign = sign_type::plus_sign;
 3351|  59.8k|    }
 3352|  59.8k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3353|  59.8k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3354|  59.8k|}
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|  79.7k|{
 3141|  79.7k|    auto r = read_one_of_code_unit(range, "+-");
 3142|  79.7k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 79.7k, False: 0]
  ------------------
 3143|  79.7k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 79.7k, False: 0]
  ------------------
 3144|  79.7k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  79.7k|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|  79.7k|    }
 3148|       |
 3149|      0|    auto& it = *r;
 3150|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 0, False: 0]
  ------------------
 3151|      0|        return std::pair{it, sign_type::minus_sign};
 3152|      0|    }
 3153|      0|    return std::pair{it, sign_type::plus_sign};
 3154|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|  79.7k|{
 2272|  79.7k|    auto it = read_code_unit(range);
 2273|  79.7k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  79.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 79.7k]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|   159k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 159k, False: 79.7k]
  ------------------
 2278|   159k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 0, False: 159k]
  ------------------
 2279|      0|            return *it;
 2280|      0|        }
 2281|   159k|    }
 2282|       |
 2283|  79.7k|    return unexpected(parse_error::error);
 2284|  79.7k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3292|  59.8k|{
 3293|  59.8k|    switch (base) {
 3294|      6|        case 2:
  ------------------
  |  Branch (3294:9): [True: 6, False: 59.8k]
  ------------------
 3295|       |            // allow 0b/0B
 3296|      6|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|      6|                    false};
 3298|       |
 3299|     10|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 10, False: 59.7k]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|     10|            bool zero_parsed = false;
 3302|     10|            auto it = apply_opt(
 3303|     10|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|     10|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|  19.9k|        case 16:
  ------------------
  |  Branch (3307:9): [True: 19.9k, False: 39.8k]
  ------------------
 3308|       |            // allow 0x/0X
 3309|  19.9k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|  19.9k|                    false};
 3311|       |
 3312|     10|        case 0:
  ------------------
  |  Branch (3312:9): [True: 10, False: 59.7k]
  ------------------
 3313|       |            // detect base
 3314|     10|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|  39.8k|        default:
  ------------------
  |  Branch (3316:9): [True: 39.8k, False: 19.9k]
  ------------------
 3317|       |            // no base prefix allowed
 3318|  39.8k|            return {range.begin(), base, false};
 3319|  59.8k|    }
 3320|  59.8k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2290|  19.9k|{
 2291|  19.9k|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 19.9k, False: 0]
  ------------------
 2292|  19.9k|        return range.begin();
 2293|  19.9k|    }
 2294|      0|    return *result;
 2295|  19.9k|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3243|     16|{
 3244|     16|    return read_matching_string_classic_nocase(range, "0b");
 3245|     16|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  79.7k|{
 2231|  79.7k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  79.7k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  79.7k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  79.7k|        if (range.size() < str.size()) {
 2236|  79.7k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  79.7k|        }
 2238|  79.7k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  79.7k|            return unexpected(parse_error::error);
 2240|  79.7k|        }
 2241|  79.7k|        return ranges::next(range.begin(), str.size());
 2242|  79.7k|    }
 2243|  79.7k|    else {
 2244|  79.7k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  79.7k|            if (ch < 'A' || ch > 'Z') {
 2246|  79.7k|                return ch;
 2247|  79.7k|            }
 2248|  79.7k|            return static_cast<char_type>(ch +
 2249|  79.7k|                                          static_cast<char_type>('a' - 'A'));
 2250|  79.7k|        };
 2251|       |
 2252|  79.7k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  79.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  79.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  79.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  79.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8, False: 79.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      8|    }                                                  \
  |  |  |  | 3671|  79.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  79.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  79.7k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  79.7k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  79.7k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  79.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 79.7k, False: 0]
  |  |  ------------------
  ------------------
 2257|  79.7k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  79.7k|                    return ascii_tolower(a) ==
 2259|  79.7k|                           static_cast<detail::char_t<Range>>(b);
 2260|  79.7k|                }))) {
 2261|  79.7k|            return unexpected(parse_error::error);
 2262|  79.7k|        }
 2263|       |
 2264|      0|        return it;
 2265|  79.7k|    }
 2266|  79.7k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2244|  79.7k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  79.7k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 14, False: 79.7k]
  |  Branch (2245:29): [True: 79.7k, False: 0]
  ------------------
 2246|  79.7k|                return ch;
 2247|  79.7k|            }
 2248|      0|            return static_cast<char_type>(ch +
 2249|      0|                                          static_cast<char_type>('a' - 'A'));
 2250|  79.7k|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3257|     20|{
 3258|     20|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 0, False: 20]
  ------------------
 3259|      0|        return *r;
 3260|      0|    }
 3261|       |
 3262|     20|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 0, False: 20]
  ------------------
 3263|      0|        zero_parsed = true;
 3264|      0|        return *r;
 3265|      0|    }
 3266|       |
 3267|     20|    return unexpected(parse_error::error);
 3268|     20|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|  39.9k|{
 2146|  39.9k|    auto it = read_code_unit(range);
 2147|  39.9k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  39.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 39.9k]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|  39.9k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  39.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 39.9k, False: 0]
  |  |  ------------------
  ------------------
 2152|  39.9k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  39.9k|        return unexpected(parse_error::error);
 2154|  39.9k|    }
 2155|       |
 2156|      0|    return *it;
 2157|  39.9k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3250|  19.9k|{
 3251|  19.9k|    return read_matching_string_classic_nocase(range, "0x");
 3252|  19.9k|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3273|     10|{
 3274|     10|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 0, False: 10]
  ------------------
 3275|      0|        return {*r, 16, false};
 3276|      0|    }
 3277|     10|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 0, False: 10]
  ------------------
 3278|      0|        return {*r, 2, false};
 3279|      0|    }
 3280|     10|    {
 3281|     10|        bool zero_parsed{false};
 3282|     10|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 0, False: 10]
  ------------------
 3283|      0|            return {*r, 8, zero_parsed};
 3284|      0|        }
 3285|     10|    }
 3286|     10|    return {range.begin(), 10, false};
 3287|     10|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3359|  59.7k|{
 3360|  59.7k|    using char_type = detail::char_t<Range>;
 3361|       |
 3362|  59.7k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (3362:19): [Folded - Ignored]
  ------------------
 3363|  59.7k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  59.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 59.7k]
  |  |  ------------------
  ------------------
 3364|      0|            return unexpected_scan_error(
 3365|      0|                scan_error::invalid_scanned_value,
 3366|      0|                "Failed to parse integer: No digits found");
 3367|      0|        }
 3368|  59.7k|        return range.end();
 3369|  59.7k|    }
 3370|  59.7k|    else {
 3371|  59.7k|        return read_while1_code_unit(range,
 3372|  59.7k|                                     [&](char_type ch) noexcept {
 3373|  59.7k|                                         return char_to_int(ch) < base;
 3374|  59.7k|                                     })
 3375|  59.7k|            .transform_error(map_parse_error_to_scan_error(
 3376|  59.7k|                scan_error::invalid_scanned_value,
 3377|  59.7k|                "Failed to parse integer: No digits found"));
 3378|  59.7k|    }
 3379|  59.7k|}
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3389|     52|{
 3390|     52|    std::basic_string<CharT> output;
 3391|     52|    std::string thsep_indices;
 3392|     52|    auto it = range.begin();
 3393|     52|    bool digit_matched = false;
 3394|     52|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3394:12): [True: 52, False: 0]
  ------------------
 3395|     52|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3395:13): [True: 0, False: 52]
  ------------------
 3396|      0|            thsep_indices.push_back(
 3397|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3398|      0|        }
 3399|     52|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3399:18): [True: 52, False: 0]
  ------------------
 3400|     52|            break;
 3401|     52|        }
 3402|      0|        else {
 3403|      0|            output.push_back(*it);
 3404|      0|            digit_matched = true;
 3405|      0|        }
 3406|     52|    }
 3407|     52|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     52|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52, False: 0]
  |  |  ------------------
  ------------------
 3408|     52|        return unexpected_scan_error(
 3409|     52|            scan_error::invalid_scanned_value,
 3410|     52|            "Failed to parse integer: No digits found");
 3411|     52|    }
 3412|      0|    return std::tuple{it, output, thsep_indices};
 3413|     52|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1682|   127k|{
 1683|   127k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|   127k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|   127k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|   127k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|   127k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|   127k|    }
 1688|   127k|    else {
 1689|   127k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|   127k|    }
 1691|   127k|}
_ZN3scn2v34impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_:
 1489|   127k|    {
 1490|   127k|    }
_ZNK3scn2v34impl19string_view_wrapperIwE4viewEv:
 1502|   167k|    {
 1503|   167k|        return sv;
 1504|   167k|    }
_ZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEb:
 5950|    380|{
 5951|    380|    using char_type = detail::char_t<Range>;
 5952|    380|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5953|       |
 5954|    380|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5954:9): [True: 380, False: 0]
  ------------------
 5955|    380|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5956|    380|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5957|       |
 5958|    380|        if (max_width == 0) {
  ------------------
  |  Branch (5958:13): [True: 330, False: 50]
  ------------------
 5959|    330|            auto it = read_while_code_unit(range, pred);
 5960|       |
 5961|    330|            if (want_skipped_width) {
  ------------------
  |  Branch (5961:17): [True: 42, False: 288]
  ------------------
 5962|     42|                auto prefix_width =
 5963|     42|                    static_cast<std::ptrdiff_t>(
 5964|     42|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5965|     42|                    ranges::distance(range.begin(), it);
 5966|     42|                return result_type{it, prefix_width};
 5967|     42|            }
 5968|    288|            return result_type{it, 0};
 5969|    330|        }
 5970|       |
 5971|     50|        auto max_width_view = take_width(range, max_width);
 5972|     50|        auto w_it = read_while_code_unit(max_width_view, pred);
 5973|       |
 5974|     50|        if (want_skipped_width) {
  ------------------
  |  Branch (5974:13): [True: 50, False: 0]
  ------------------
 5975|     50|            return result_type{w_it.base(), max_width - w_it.count()};
 5976|     50|        }
 5977|      0|        return result_type{w_it.base(), 0};
 5978|     50|    }
 5979|       |
 5980|      0|    const auto fill_chars = fill.template get_code_units<char_type>();
 5981|      0|    if (max_width == 0) {
  ------------------
  |  Branch (5981:9): [True: 0, False: 0]
  ------------------
 5982|      0|        auto it = read_while_code_units(range, fill_chars);
 5983|       |
 5984|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (5984:13): [True: 0, False: 0]
  ------------------
 5985|      0|            auto prefix_width =
 5986|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5987|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5988|      0|            return result_type{it, prefix_width};
 5989|      0|        }
 5990|      0|        return result_type{it, 0};
 5991|      0|    }
 5992|       |
 5993|      0|    auto max_width_view = take_width(range, max_width);
 5994|      0|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5995|       |
 5996|      0|    if (want_skipped_width) {
  ------------------
  |  Branch (5996:9): [True: 0, False: 0]
  ------------------
 5997|      0|        return result_type{w_it.base(), max_width - w_it.count()};
 5998|      0|    }
 5999|      0|    return result_type{w_it.base(), 0};
 6000|      0|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|    512|{
 1976|    512|    return read_until_code_unit(range, std::not_fn(pred));
 1977|    512|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|    716|{
 1957|    716|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|    716|        return std::find_if(range.begin(), range.end(), pred);
 1959|    716|    }
 1960|    716|    else {
 1961|    716|        auto first = range.begin();
 1962|    716|        for (; first != range.end(); ++first) {
 1963|    716|            if (pred(*first)) {
 1964|    716|                return first;
 1965|    716|            }
 1966|    716|        }
 1967|    716|        return first;
 1968|    716|    }
 1969|    716|}
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_SR_LPv0EEEOSH_:
  753|    380|    {
  754|    380|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_SR_LPv0EEEOSH_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|    488|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    488|              cvref<T> obj = *get<T>(fn);
  745|    488|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    488|                  obj(static_cast<decltype(args)>(args)...);
  747|    488|              }
  748|    488|              else {
  749|    488|                  return obj(static_cast<decltype(args)>(args)...);
  750|    488|              }
  751|    488|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRT_EEEElEEEESG_lRKNS0_6detail9fill_typeEbEUlwE_EEDaNS3_7storageE:
  683|    488|    {
  684|    488|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    488|            return static_cast<T*>(s.m_cp);
  686|    488|        }
  687|    488|        else if constexpr (std::is_object_v<T>) {
  688|    488|            return static_cast<T*>(s.m_p);
  689|    488|        }
  690|    488|        else {
  691|    488|            return reinterpret_cast<T*>(s.m_fp);
  692|    488|        }
  693|    488|    }
_ZZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEbENKUlwE_clEw:
 5956|    488|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_LPv0EEEPKSH_:
  666|    380|        {
  667|    380|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1975|     50|{
 1976|     50|    return read_until_code_unit(range, std::not_fn(pred));
 1977|     50|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1956|    140|{
 1957|    140|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|    140|        return std::find_if(range.begin(), range.end(), pred);
 1959|    140|    }
 1960|    140|    else {
 1961|    140|        auto first = range.begin();
 1962|  1.18k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 1.09k, False: 92]
  ------------------
 1963|  1.09k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 48, False: 1.04k]
  ------------------
 1964|     48|                return first;
 1965|     48|            }
 1966|  1.09k|        }
 1967|     92|        return first;
 1968|    140|    }
 1969|    140|}
_ZN3scn2v34impl23skip_classic_whitespaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_b:
 2950|    136|{
 2951|    136|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 0, False: 136]
  ------------------
 2952|      0|        auto it = read_while_classic_space(range);
 2953|      0|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|      0|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|      0|        return it;
 2959|      0|    }
 2960|       |
 2961|    136|    return read_while_classic_space(range);
 2962|    136|}
_ZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2116|    136|{
 2117|    136|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|    136|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|    136|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|    136|        auto buf = make_contiguous_buffer(range);
 2121|    136|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|    136|        return ranges::next(range.begin(),
 2123|    136|                            ranges::distance(buf.view().begin(), it));
 2124|    136|    }
 2125|    136|    else {
 2126|    136|        auto it = range.begin();
 2127|       |
 2128|    136|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|    136|            auto seg = get_contiguous_beginning(range);
 2130|    136|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|    136|                seg_it != seg.end()) {
 2132|    136|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|    136|            }
 2134|    136|            ranges::advance(it, seg.size());
 2135|    136|        }
 2136|       |
 2137|    136|        return read_while_code_point(
 2138|    136|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|    136|    }
 2140|    136|}
_ZN3scn2v34impl21read_while_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2081|    136|{
 2082|    136|    return read_until_code_point(range, std::not_fn(pred));
 2083|    136|}
_ZN3scn2v34impl21read_until_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2060|    136|{
 2061|    136|    auto it = range.begin();
 2062|    136|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 136, False: 0]
  ------------------
 2063|    136|        const auto val =
 2064|    136|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|    136|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|    136|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 136, False: 0]
  |  |  ------------------
  ------------------
 2066|    136|            const auto cp = detail::decode_code_point_exhaustive(
 2067|    136|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|    136|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 136, False: 0]
  ------------------
 2069|    136|                return it;
 2070|    136|            }
 2071|    136|        }
 2072|      0|        it = val.iterator;
 2073|      0|    }
 2074|       |
 2075|      0|    return it;
 2076|    136|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISL_EEE4typeEEESL_:
 1898|  21.8k|{
 1899|  21.8k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  21.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  21.8k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  21.8k|    auto it = range.begin();
 1903|  21.8k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  21.8k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  21.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 21.8k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|  21.8k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 21.8k, False: 0]
  ------------------
 1912|  21.8k|        ++it;
 1913|  21.8k|        return {it, string_type(1, *range.begin())};
 1914|  21.8k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|  21.8k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_:
  753|    136|    {
  754|    136|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESS_Di:
  743|    136|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    136|              cvref<T> obj = *get<T>(fn);
  745|    136|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    136|                  obj(static_cast<decltype(args)>(args)...);
  747|    136|              }
  748|    136|              else {
  749|    136|                  return obj(static_cast<decltype(args)>(args)...);
  750|    136|              }
  751|    136|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|    136|    {
  684|    136|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    136|            return static_cast<T*>(s.m_cp);
  686|    136|        }
  687|    136|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    136|            return static_cast<T*>(s.m_p);
  689|    136|        }
  690|    136|        else {
  691|    136|            return reinterpret_cast<T*>(s.m_fp);
  692|    136|        }
  693|    136|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2138|    136|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_LPv0EEEPSI_:
  661|    136|        {
  662|    136|        }
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|   160k|{
 2951|   160k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 159k, False: 872]
  ------------------
 2952|   159k|        auto it = read_while_classic_space(range);
 2953|   159k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   159k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   159k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 159k]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|   159k|        return it;
 2959|   159k|    }
 2960|       |
 2961|    872|    return read_while_classic_space(range);
 2962|   160k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|   521k|{
 2117|   521k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|   521k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|   521k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|   521k|        auto buf = make_contiguous_buffer(range);
 2121|   521k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|   521k|        return ranges::next(range.begin(),
 2123|   521k|                            ranges::distance(buf.view().begin(), it));
 2124|   521k|    }
 2125|   521k|    else {
 2126|   521k|        auto it = range.begin();
 2127|       |
 2128|   521k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|   521k|            auto seg = get_contiguous_beginning(range);
 2130|   521k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|   521k|                seg_it != seg.end()) {
 2132|   521k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   521k|            }
 2134|   521k|            ranges::advance(it, seg.size());
 2135|   521k|        }
 2136|       |
 2137|   521k|        return read_while_code_point(
 2138|   521k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   521k|    }
 2140|   521k|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|   521k|{
 2082|   521k|    return read_until_code_point(range, std::not_fn(pred));
 2083|   521k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|   581k|{
 2061|   581k|    auto it = range.begin();
 2062|  1.19M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 1.19M, False: 3.04k]
  ------------------
 2063|  1.19M|        const auto val =
 2064|  1.19M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  1.19M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  1.19M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.19M, False: 0]
  |  |  ------------------
  ------------------
 2066|  1.19M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  1.19M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  1.19M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 578k, False: 615k]
  ------------------
 2069|   578k|                return it;
 2070|   578k|            }
 2071|  1.19M|        }
 2072|   615k|        it = val.iterator;
 2073|   615k|    }
 2074|       |
 2075|  3.04k|    return it;
 2076|   581k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|   521k|    {
  754|   521k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|   865k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   865k|              cvref<T> obj = *get<T>(fn);
  745|   865k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   865k|                  obj(static_cast<decltype(args)>(args)...);
  747|   865k|              }
  748|   865k|              else {
  749|   865k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   865k|              }
  751|   865k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   865k|    {
  684|   865k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   865k|            return static_cast<T*>(s.m_cp);
  686|   865k|        }
  687|   865k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   865k|            return static_cast<T*>(s.m_p);
  689|   865k|        }
  690|   865k|        else {
  691|   865k|            return reinterpret_cast<T*>(s.m_fp);
  692|   865k|        }
  693|   865k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2138|   865k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|   521k|        {
  662|   521k|        }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|  12.5k|    {
 3040|  12.5k|        reader_error_handler eh{};
 3041|  12.5k|        get_derived().check_specs_impl(specs, eh);
 3042|  12.5k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.3k, False: 1.20k]
  |  |  ------------------
  ------------------
 3043|  11.3k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  11.3k|        }
 3045|  1.20k|        return {};
 3046|  12.5k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE11get_derivedEv:
 3050|  12.5k|    {
 3051|  12.5k|        return static_cast<Derived&>(*this);
 3052|  12.5k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3484|  12.5k|    {
 3485|  12.5k|        detail::check_int_type_specs(specs, eh);
 3486|  12.5k|    }
_ZNK3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE19skip_ws_before_readEv:
 3034|  40.2k|    {
 3035|  40.2k|        return true;
 3036|  40.2k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEjEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    200|    {
 3539|    200|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    200|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    200|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    200|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    200|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 200]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    200|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    200|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    200|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    200|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 200]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    200|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 200]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    200|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    200|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 186, False: 14]
  |  |  ------------------
  ------------------
 3565|    186|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    186|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    186|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    186|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    186|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 186, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    186|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    186|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    186|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    186|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    186|    }                                                  \
  |  |  |  | 3671|    186|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|     14|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     14|            localized_number_formatting_options<CharT>{loc};
 3586|     14|#endif
 3587|       |
 3588|     14|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     14|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     14|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     14|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     14|    }                                                  \
  |  |  |  | 3671|     14|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    400|    {
 3539|    400|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    400|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    400|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    400|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    400|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 400]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    400|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    400|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    400|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    400|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 400]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    400|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 400]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    400|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    400|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 374, False: 26]
  |  |  ------------------
  ------------------
 3565|    374|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    374|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    374|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    374|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    374|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 374]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    374|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    374|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    374|                    parse_integer_digits_without_thsep(
 3567|    374|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    374|                        prefix_result.parsed_base));
 3569|       |
 3570|    374|            auto buf = make_contiguous_buffer(
 3571|    374|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    374|            SCN_TRY(result_it,
  ------------------
  |  | 3672|    374|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    374|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    374|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    374|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 374, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    374|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    374|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    374|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    374|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    374|    }                                                  \
  |  |  |  | 3671|    374|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    374|        }
 3580|       |
 3581|     26|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     26|            localized_number_formatting_options<CharT>{loc};
 3586|     26|#endif
 3587|       |
 3588|     26|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     26|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     26|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     26|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 26, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     26|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     26|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     26|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     26|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     26|    }                                                  \
  |  |  |  | 3671|     26|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEmEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    162|    {
 3539|    162|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    162|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    162|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    162|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    162|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 162]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    162|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    162|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    162|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    162|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 162]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    162|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 162]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    162|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    162|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 162, False: 0]
  |  |  ------------------
  ------------------
 3565|    162|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    162|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    162|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    162|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    162|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 162, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    162|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    162|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    162|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    162|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    162|    }                                                  \
  |  |  |  | 3671|    162|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEmEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|  19.9k|    {
 3539|  19.9k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|  19.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  19.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  19.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  19.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 19.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  19.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  19.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|  19.9k|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|  19.9k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 19.9k]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|  19.9k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 19.9k]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|  19.9k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  19.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 19.9k, False: 0]
  |  |  ------------------
  ------------------
 3565|  19.9k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|  19.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  19.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  19.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  19.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 19.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  19.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  19.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|  19.9k|                    parse_integer_digits_without_thsep(
 3567|  19.9k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|  19.9k|                        prefix_result.parsed_base));
 3569|       |
 3570|  19.9k|            auto buf = make_contiguous_buffer(
 3571|  19.9k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|  19.9k|            SCN_TRY(result_it,
  ------------------
  |  | 3672|  19.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  19.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  19.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  19.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 19.9k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  19.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  19.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  19.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  19.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  19.9k|    }                                                  \
  |  |  |  | 3671|  19.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|  19.9k|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|  6.26k|    {
 3040|  6.26k|        reader_error_handler eh{};
 3041|  6.26k|        get_derived().check_specs_impl(specs, eh);
 3042|  6.26k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  6.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.66k, False: 592]
  |  |  ------------------
  ------------------
 3043|  5.66k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  5.66k|        }
 3045|    592|        return {};
 3046|  6.26k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3050|  6.26k|    {
 3051|  6.26k|        return static_cast<Derived&>(*this);
 3052|  6.26k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4144|  6.26k|    {
 4145|  6.26k|        detail::check_float_type_specs(specs, eh);
 4146|  6.26k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3034|  20.1k|    {
 3035|  20.1k|        return true;
 3036|  20.1k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4216|    588|    {
 4217|    588|        unsigned options{};
 4218|    588|        if (specs.localized) {
  ------------------
  |  Branch (4218:13): [True: 24, False: 564]
  ------------------
 4219|     24|            options |= float_reader_base::allow_thsep;
 4220|     24|        }
 4221|       |
 4222|    588|        SCN_GCC_COMPAT_PUSH
 4223|    588|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4224|       |
 4225|    588|        switch (specs.type) {
 4226|     12|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4226:13): [True: 12, False: 576]
  ------------------
 4227|     12|                return options | float_reader_base::allow_fixed;
 4228|       |
 4229|     12|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4229:13): [True: 12, False: 576]
  ------------------
 4230|     12|                return options | float_reader_base::allow_scientific;
 4231|       |
 4232|     26|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4232:13): [True: 26, False: 562]
  ------------------
 4233|     26|                return options | float_reader_base::allow_hex;
 4234|       |
 4235|      0|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4235:13): [True: 0, False: 588]
  ------------------
 4236|      0|                return options | float_reader_base::allow_scientific |
 4237|      0|                       float_reader_base::allow_fixed;
 4238|       |
 4239|    538|            case detail::presentation_type::none:
  ------------------
  |  Branch (4239:13): [True: 538, False: 50]
  ------------------
 4240|    538|                return options | float_reader_base::allow_scientific |
 4241|    538|                       float_reader_base::allow_fixed |
 4242|    538|                       float_reader_base::allow_hex;
 4243|       |
 4244|      0|            default:
  ------------------
  |  Branch (4244:13): [True: 0, False: 588]
  ------------------
 4245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4246|    588|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4247|    588|        }
 4248|       |
 4249|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4250|    588|    }
_ZN3scn2v34impl12float_readerIwEC2Ej:
 3659|    588|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2Ev:
 1770|  20.1k|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIwEC2Ev:
 1531|  40.2k|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIwE17handle_separatorsEv:
 4056|  19.9k|    {
 4057|  19.9k|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4057:13): [True: 19.9k, False: 0]
  ------------------
 4058|  19.9k|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4058:13): [True: 19.9k, False: 0]
  ------------------
 4059|  19.9k|            return;
 4060|  19.9k|        }
 4061|       |
 4062|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4063|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4063:13): [True: 0, False: 0]
  ------------------
 4064|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4064:27): [True: 0, False: 0]
  ------------------
 4065|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4065:21): [True: 0, False: 0]
  ------------------
 4066|      0|                    ch = CharT{'.'};
 4067|      0|                }
 4068|      0|            }
 4069|      0|        }
 4070|       |
 4071|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4071:13): [True: 0, False: 0]
  ------------------
 4072|      0|            return;
 4073|      0|        }
 4074|       |
 4075|      0|        auto first =
 4076|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4077|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4077:13): [True: 0, False: 0]
  ------------------
 4078|      0|            return;
 4079|      0|        }
 4080|       |
 4081|      0|        m_thsep_indices.push_back(
 4082|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4083|       |
 4084|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4084:31): [True: 0, False: 0]
  ------------------
 4085|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4085:17): [True: 0, False: 0]
  ------------------
 4086|      0|                *first++ = std::move(*it);
 4087|      0|            }
 4088|      0|            else {
 4089|      0|                m_thsep_indices.push_back(
 4090|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4091|      0|            }
 4092|      0|        }
 4093|       |
 4094|      0|        str.erase(first, str.end());
 4095|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1586|    192|    {
 1587|    192|        return m_storage.has_value();
 1588|    192|    }
_ZNR3scn2v34impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1591|     96|    {
 1592|     96|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|     96|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     96|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|     96|        return *m_storage;
 1594|     96|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EclESC_SJ_SL_:
  762|    200|    {
  763|    200|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    200|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    200|    }
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3678|     14|    {
 3679|     14|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|     14|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|     14|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 14]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|     14|        return read_source_impl(range);
 3685|     14|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_:
 3704|    200|    {
 3705|    200|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|    200|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    200|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    200|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    200|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 200]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    200|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    200|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|    200|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|    200|        auto it = sign_result.first;
 3708|    200|        m_sign = sign_result.second;
 3709|       |
 3710|    200|        auto digits_begin = it;
 3711|    200|        auto r = ranges::subrange{it, range.end()};
 3712|    200|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|    200|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|    200|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3715|    200|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|    200|                SCN_TRY_ASSIGN(
 3717|    200|                    it,
 3718|    200|                    do_read_source_impl(
 3719|    200|                        r,
 3720|    200|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|    200|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|    200|            }
 3723|    200|            else {
 3724|    200|                auto cb = [&](const auto& rr)
 3725|    200|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|    200|                    auto res = read_all(rr);
 3727|    200|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|    200|                        return unexpected_scan_error(
 3729|    200|                            scan_error::invalid_scanned_value,
 3730|    200|                            "Invalid float value");
 3731|    200|                    }
 3732|    200|                    return res;
 3733|    200|                };
 3734|    200|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3735|    200|            }
 3736|    200|        }
 3737|    200|        else {
 3738|    200|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|    200|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    200|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    200|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 200, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    200|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    200|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    200|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    200|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    200|    }                                                  \
  |  | 3671|    200|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    200|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3739|      0|                it,
 3740|      0|                do_read_source_impl(
 3741|      0|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|      0|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|      0|        }
 3744|       |
 3745|      0|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|      0|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 0, False: 0]
  |  Branch (3747:48): [True: 0, False: 0]
  ------------------
 3748|      0|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 0, False: 0]
  ------------------
 3749|      0|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 0, False: 0]
  ------------------
 3750|      0|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|      0|        }
 3752|       |
 3753|      0|        handle_separators();
 3754|       |
 3755|      0|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 0]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|      0|        return it;
 3768|      0|    }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEZNS3_16read_source_implISG_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_EUlRKSO_E_ZNSK_ISG_EEST_SO_EUlSV_E0_EEST_SO_OT0_OT1_:
 3999|    200|    {
 4000|    200|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|    200|        const bool allowed_nonhex =
 4002|    200|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|    200|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|    200|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 200, False: 0]
  |  Branch (4005:45): [True: 0, False: 200]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|    200|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 200]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|    200|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 200, False: 0]
  |  Branch (4014:45): [True: 0, False: 200]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|    200|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 200]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|    200|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 184, False: 16]
  |  Branch (4021:28): [True: 12, False: 172]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|     12|            auto it = range.begin();
 4025|       |
 4026|     12|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 0, False: 12]
  ------------------
 4027|      0|                m_kind = float_kind::hex_with_prefix;
 4028|      0|                it = *r;
 4029|      0|            }
 4030|     12|            else {
 4031|     12|                m_kind = float_kind::hex_without_prefix;
 4032|     12|            }
 4033|       |
 4034|     12|            return read_hex(ranges::subrange{it, range.end()});
 4035|     12|        }
 4036|    188|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 16, False: 172]
  |  Branch (4036:29): [True: 16, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|     16|            m_kind = float_kind::generic;
 4040|     16|            return read_regular_float(range);
 4041|     16|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|    172|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    172|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 172]
  |  |  ------------------
  ------------------
 4047|      0|            m_kind = float_kind::hex_with_prefix;
 4048|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4049|      0|        }
 4050|       |
 4051|    172|        m_kind = float_kind::generic;
 4052|    172|        return read_regular(range);
 4053|    172|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3810|    200|    {
 3811|    200|        auto it = range.begin();
 3812|    200|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 200, False: 0]
  ------------------
 3813|    200|            return unexpected(r.error());
 3814|    200|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3833|    200|    {
 3834|    200|        auto it = range.begin();
 3835|    200|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 200, False: 0]
  ------------------
 3836|    200|            return r.transform_error(map_parse_error_to_scan_error(
 3837|    200|                scan_error::invalid_scanned_value,
 3838|    200|                "Invalid floating-point NaN value"));
 3839|    200|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3803|    184|    {
 3804|    184|        return read_matching_string_classic_nocase(range, "0x");
 3805|    184|    }
_ZN3scn2v34impl12float_readerIwE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3903|     12|    {
 3904|     12|        auto it = range.begin();
 3905|       |
 3906|     12|        std::ptrdiff_t digits_count = 0;
 3907|     12|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3908|     12|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 0]
  |  |  ------------------
  ------------------
 3909|     12|            return r.transform_error(map_parse_error_to_scan_error(
 3910|     12|                scan_error::invalid_scanned_value,
 3911|     12|                "Invalid hexadecimal floating-point value"));
 3912|     12|        }
 3913|      0|        else {
 3914|      0|            digits_count += ranges::distance(it, *r);
 3915|      0|            it = *r;
 3916|      0|        }
 3917|       |
 3918|      0|        m_integral_part_length = digits_count;
 3919|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3919:18): [True: 0, False: 0]
  ------------------
 3920|      0|                                             m_locale_options.decimal_point)) {
 3921|      0|            it = *r;
 3922|      0|        }
 3923|       |
 3924|      0|        if (auto r =
  ------------------
  |  Branch (3924:18): [True: 0, False: 0]
  ------------------
 3925|      0|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3926|      0|            digits_count += ranges::distance(it, *r);
 3927|      0|            it = *r;
 3928|      0|        }
 3929|       |
 3930|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3931|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3932|      0|                                         "No significand digits in hexfloat");
 3933|      0|        }
 3934|       |
 3935|      0|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3936|       |
 3937|      0|        return it;
 3938|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3788|     12|    {
 3789|     12|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12]
  |  |  |  Branch (859:45): [True: 0, False: 12]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3790|     12|                         thsep_allowed)) {
 3791|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3792|      0|                return char_to_int(ch) < 16 ||
 3793|      0|                       ch == m_locale_options.thousands_sep;
 3794|      0|            });
 3795|      0|        }
 3796|       |
 3797|     12|        return read_while1_code_unit(
 3798|     12|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3799|     12|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_LPv0EEEOSR_:
  753|     12|    {
  754|     12|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEwE_clES12_w:
  743|     12|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     12|              cvref<T> obj = *get<T>(fn);
  745|     12|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|     12|                  obj(static_cast<decltype(args)>(args)...);
  747|     12|              }
  748|     12|              else {
  749|     12|                  return obj(static_cast<decltype(args)>(args)...);
  750|     12|              }
  751|     12|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlwE0_EEDaNS3_7storageE:
  683|     12|    {
  684|     12|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|     12|            return static_cast<T*>(s.m_cp);
  686|     12|        }
  687|     12|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|     12|            return static_cast<T*>(s.m_p);
  689|     12|        }
  690|     12|        else {
  691|     12|            return reinterpret_cast<T*>(s.m_fp);
  692|     12|        }
  693|     12|    }
_ZZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlwE0_clEw:
 3798|     12|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_LPv0EEEPSR_:
  661|     12|        {
  662|     12|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3943|    188|    {
 3944|    188|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|    188|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 182, False: 6]
  |  Branch (3945:50): [True: 10, False: 172]
  ------------------
 3946|       |
 3947|    188|        auto it = ranges::begin(range);
 3948|    188|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|    188|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|    188|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    188|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 188, False: 0]
  |  |  ------------------
  ------------------
 3952|    188|            return r.transform_error(
 3953|    188|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|    188|                                              "Invalid floating-point value"));
 3955|    188|        }
 3956|      0|        else {
 3957|      0|            digits_count += ranges::distance(it, *r);
 3958|      0|            it = *r;
 3959|      0|        }
 3960|       |
 3961|      0|        m_integral_part_length = digits_count;
 3962|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 0, False: 0]
  ------------------
 3963|      0|                                             m_locale_options.decimal_point)) {
 3964|      0|            it = *r;
 3965|      0|        }
 3966|       |
 3967|      0|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 0]
  ------------------
 3968|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|      0|        auto beg_exp_it = it;
 3979|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 0, False: 0]
  ------------------
 3980|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|      0|        }
 3982|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 0, False: 0]
  |  Branch (3982:29): [True: 0, False: 0]
  ------------------
 3983|      0|            return unexpected_scan_error(
 3984|      0|                scan_error::invalid_scanned_value,
 3985|      0|                "No exponent given to scientific float");
 3986|      0|        }
 3987|       |
 3988|      0|        m_kind =
 3989|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 0, False: 0]
  ------------------
 3990|       |
 3991|      0|        return it;
 3992|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3773|    188|    {
 3774|    188|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|    188|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 188]
  |  |  |  Branch (859:45): [True: 0, False: 188]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|    188|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|    188|        return read_while1_code_unit(
 3783|    188|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|    188|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_LPv0EEEOSR_:
  753|    188|    {
  754|    188|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEwE_clES12_w:
  743|    188|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    188|              cvref<T> obj = *get<T>(fn);
  745|    188|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    188|                  obj(static_cast<decltype(args)>(args)...);
  747|    188|              }
  748|    188|              else {
  749|    188|                  return obj(static_cast<decltype(args)>(args)...);
  750|    188|              }
  751|    188|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlwE0_EEDaNS3_7storageE:
  683|    188|    {
  684|    188|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    188|            return static_cast<T*>(s.m_cp);
  686|    188|        }
  687|    188|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    188|            return static_cast<T*>(s.m_p);
  689|    188|        }
  690|    188|        else {
  691|    188|            return reinterpret_cast<T*>(s.m_fp);
  692|    188|        }
  693|    188|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlwE0_clEw:
 3783|    188|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_LPv0EEEPSR_:
  661|    188|        {
  662|    188|        }
_ZN3scn2v34impl12float_readerIwE11read_sourceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3664|    186|    {
 3665|    186|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|    186|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 186]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|    186|        return read_source_impl(range);
 3671|    186|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|  19.9k|    {
  763|  19.9k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  19.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  19.9k|    }
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3678|     10|    {
 3679|     10|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|     10|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|     10|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 10]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|     10|        return read_source_impl(range);
 3685|     10|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3704|  19.9k|    {
 3705|  19.9k|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|  19.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  19.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  19.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  19.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 19.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  19.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  19.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|  19.9k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|  19.9k|        auto it = sign_result.first;
 3708|  19.9k|        m_sign = sign_result.second;
 3709|       |
 3710|  19.9k|        auto digits_begin = it;
 3711|  19.9k|        auto r = ranges::subrange{it, range.end()};
 3712|  19.9k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|  19.9k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|  19.9k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  39.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 19.9k]
  |  |  |  Branch (859:45): [True: 0, False: 19.9k]
  |  |  |  Branch (859:45): [True: 0, False: 19.9k]
  |  |  ------------------
  ------------------
 3715|  19.9k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|      0|    }                                                  \
  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3717|      0|                    it,
 3718|      0|                    do_read_source_impl(
 3719|      0|                        r,
 3720|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|      0|            }
 3723|  19.9k|            else {
 3724|  19.9k|                auto cb = [&](const auto& rr)
 3725|  19.9k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|  19.9k|                    auto res = read_all(rr);
 3727|  19.9k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|  19.9k|                        return unexpected_scan_error(
 3729|  19.9k|                            scan_error::invalid_scanned_value,
 3730|  19.9k|                            "Invalid float value");
 3731|  19.9k|                    }
 3732|  19.9k|                    return res;
 3733|  19.9k|                };
 3734|  19.9k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3667|  19.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  19.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  19.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 8, False: 19.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|      8|    }                                                  \
  |  | 3671|  19.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  19.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3735|  19.9k|            }
 3736|  19.9k|        }
 3737|  19.9k|        else {
 3738|  19.9k|            SCN_TRY_ASSIGN(
 3739|  19.9k|                it,
 3740|  19.9k|                do_read_source_impl(
 3741|  19.9k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|  19.9k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|  19.9k|        }
 3744|       |
 3745|  19.9k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  19.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|  19.9k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 19.9k, False: 0]
  |  Branch (3747:48): [True: 19.9k, False: 0]
  ------------------
 3748|  19.9k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 19.9k, False: 0]
  ------------------
 3749|  19.9k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 19.9k, False: 0]
  ------------------
 3750|  19.9k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|  19.9k|        }
 3752|       |
 3753|  19.9k|        handle_separators();
 3754|       |
 3755|  19.9k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 19.9k]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|  19.9k|        return it;
 3768|  19.9k|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3810|  19.9k|    {
 3811|  19.9k|        auto it = range.begin();
 3812|  19.9k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 19.9k, False: 0]
  ------------------
 3813|  19.9k|            return unexpected(r.error());
 3814|  19.9k|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|  19.9k|    {
 3834|  19.9k|        auto it = range.begin();
 3835|  19.9k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 19.9k, False: 0]
  ------------------
 3836|  19.9k|            return r.transform_error(map_parse_error_to_scan_error(
 3837|  19.9k|                scan_error::invalid_scanned_value,
 3838|  19.9k|                "Invalid floating-point NaN value"));
 3839|  19.9k|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3803|  19.9k|    {
 3804|  19.9k|        return read_matching_string_classic_nocase(range, "0x");
 3805|  19.9k|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|      8|{
 1996|      8|    auto it = read_while_code_unit(range, pred);
 1997|      8|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 8, False: 0]
  ------------------
 1998|      8|        return unexpected(parse_error::error);
 1999|      8|    }
 2000|      0|    return it;
 2001|      8|}
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3943|      8|    {
 3944|      8|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|      8|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 2, False: 6]
  |  Branch (3945:50): [True: 2, False: 0]
  ------------------
 3946|       |
 3947|      8|        auto it = ranges::begin(range);
 3948|      8|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|      8|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|      8|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 0]
  |  |  ------------------
  ------------------
 3952|      8|            return r.transform_error(
 3953|      8|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|      8|                                              "Invalid floating-point value"));
 3955|      8|        }
 3956|      0|        else {
 3957|      0|            digits_count += ranges::distance(it, *r);
 3958|      0|            it = *r;
 3959|      0|        }
 3960|       |
 3961|      0|        m_integral_part_length = digits_count;
 3962|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 0, False: 0]
  ------------------
 3963|      0|                                             m_locale_options.decimal_point)) {
 3964|      0|            it = *r;
 3965|      0|        }
 3966|       |
 3967|      0|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 0]
  ------------------
 3968|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|      0|        auto beg_exp_it = it;
 3979|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 0, False: 0]
  ------------------
 3980|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|      0|        }
 3982|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 0, False: 0]
  |  Branch (3982:29): [True: 0, False: 0]
  ------------------
 3983|      0|            return unexpected_scan_error(
 3984|      0|                scan_error::invalid_scanned_value,
 3985|      0|                "No exponent given to scientific float");
 3986|      0|        }
 3987|       |
 3988|      0|        m_kind =
 3989|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 0, False: 0]
  ------------------
 3990|       |
 3991|      0|        return it;
 3992|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3773|      8|    {
 3774|      8|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8]
  |  |  |  Branch (859:45): [True: 0, False: 8]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|      8|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|      8|        return read_while1_code_unit(
 3783|      8|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|      8|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_:
  753|      8|    {
  754|      8|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clESU_w:
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|      8|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|      8|                  obj(static_cast<decltype(args)>(args)...);
  747|      8|              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  683|      8|    {
  684|      8|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|      8|            return static_cast<T*>(s.m_cp);
  686|      8|        }
  687|      8|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|      8|            return static_cast<T*>(s.m_p);
  689|      8|        }
  690|      8|        else {
  691|      8|            return reinterpret_cast<T*>(s.m_fp);
  692|      8|        }
  693|      8|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3783|      8|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_LPv0EEEPSJ_:
  661|      8|        {
  662|      8|        }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3999|  19.9k|    {
 4000|  19.9k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|  19.9k|        const bool allowed_nonhex =
 4002|  19.9k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|  19.9k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|  19.9k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 19.9k, False: 0]
  |  Branch (4005:45): [True: 0, False: 19.9k]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|  19.9k|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 19.9k]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|  19.9k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 19.9k, False: 0]
  |  Branch (4014:45): [True: 0, False: 19.9k]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|  19.9k|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 19.9k]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|  19.9k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 19.9k, False: 8]
  |  Branch (4021:28): [True: 14, False: 19.9k]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|     14|            auto it = range.begin();
 4025|       |
 4026|     14|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 0, False: 14]
  ------------------
 4027|      0|                m_kind = float_kind::hex_with_prefix;
 4028|      0|                it = *r;
 4029|      0|            }
 4030|     14|            else {
 4031|     14|                m_kind = float_kind::hex_without_prefix;
 4032|     14|            }
 4033|       |
 4034|     14|            return read_hex(ranges::subrange{it, range.end()});
 4035|     14|        }
 4036|  19.9k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 8, False: 19.9k]
  |  Branch (4036:29): [True: 8, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|      8|            m_kind = float_kind::generic;
 4040|      8|            return read_regular_float(range);
 4041|      8|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|  19.9k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|  19.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 19.9k]
  |  |  ------------------
  ------------------
 4047|      0|            m_kind = float_kind::hex_with_prefix;
 4048|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4049|      0|        }
 4050|       |
 4051|  19.9k|        m_kind = float_kind::generic;
 4052|  19.9k|        return read_regular(range);
 4053|  19.9k|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3725|  19.9k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|  19.9k|                    auto res = read_all(rr);
 3727|  19.9k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|  19.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 19.9k]
  |  |  ------------------
  ------------------
 3728|      0|                        return unexpected_scan_error(
 3729|      0|                            scan_error::invalid_scanned_value,
 3730|      0|                            "Invalid float value");
 3731|      0|                    }
 3732|  19.9k|                    return res;
 3733|  19.9k|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|  19.9k|{
 1839|  19.9k|    return ranges::next(range.begin(), range.end());
 1840|  19.9k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|  19.9k|    {
  313|  19.9k|        ranges::advance(x, bound);
  314|  19.9k|        return x;
  315|  19.9k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|  19.9k|    {
  275|  19.9k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|  19.9k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEvOT_:
 1576|  19.9k|    {
 1577|  19.9k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  19.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  19.9k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1620|  19.9k|    {
 1621|  19.9k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  19.9k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  19.9k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  19.9k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  19.9k|            m_storage.reset();
 1627|  19.9k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  19.9k|        }
 1629|  19.9k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|  19.9k|                                          std::basic_string<CharT>>) {
 1631|  19.9k|            m_storage.emplace(SCN_FWD(range));
 1632|  19.9k|            m_view = string_view_type{*m_storage};
 1633|  19.9k|        }
 1634|  19.9k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|  19.9k|                                          typename detail::basic_scan_buffer<
 1636|  19.9k|                                              value_t>::forward_iterator> &&
 1637|  19.9k|                           ranges::common_range<Range>) {
 1638|  19.9k|            auto beg_seg = range.begin().contiguous_segment();
 1639|  19.9k|            auto end_seg = range.end().contiguous_segment();
 1640|  19.9k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|  19.9k|                             detail::to_address(end_seg.end()))) {
 1642|  19.9k|                auto& str = m_storage.emplace();
 1643|  19.9k|                str.reserve(range.end().position() - range.begin().position());
 1644|  19.9k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  19.9k|                m_view = string_view_type{str};
 1646|  19.9k|                return;
 1647|  19.9k|            }
 1648|       |
 1649|  19.9k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  19.9k|                                                            end_seg.data());
 1651|  19.9k|            m_storage.reset();
 1652|  19.9k|        }
 1653|  19.9k|        else {
 1654|  19.9k|            auto& str = m_storage.emplace();
 1655|  19.9k|            if constexpr (ranges::sized_range<Range>) {
 1656|  19.9k|                str.reserve(range.size());
 1657|  19.9k|            }
 1658|  19.9k|            if constexpr (ranges::common_range<Range>) {
 1659|  19.9k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  19.9k|                          std::back_inserter(str));
 1661|  19.9k|            }
 1662|  19.9k|            else {
 1663|  19.9k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  19.9k|                     ++it) {
 1665|  19.9k|                    str.push_back(*it);
 1666|  19.9k|                }
 1667|  19.9k|            }
 1668|  19.9k|            m_view = string_view_type{str};
 1669|  19.9k|        }
 1670|  19.9k|    }
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3664|  19.9k|    {
 3665|  19.9k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|  19.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 19.9k]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|  19.9k|        return read_source_impl(range);
 3671|  19.9k|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3690|  19.9k|    {
 3691|  19.9k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  19.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|  19.9k|        const std::ptrdiff_t sign_len =
 3694|  19.9k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 0, False: 19.9k]
  ------------------
 3695|       |
 3696|  19.9k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|  19.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  19.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  19.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  19.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 19.9k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  19.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  19.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  19.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  19.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  19.9k|    }                                                  \
  |  |  |  | 3671|  19.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|      0|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|  19.9k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 4169|    200|    {
 4170|    200|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|    200|#if !SCN_DISABLE_LOCALE
 4173|    200|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 14, False: 186]
  ------------------
 4174|     14|            return read_impl<Range>(
 4175|     14|                range, rd,
 4176|     14|                [](float_reader<CharT>& r, auto&&... args) {
 4177|     14|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|     14|                },
 4179|     14|                value, loc);
 4180|     14|        }
 4181|    186|#endif
 4182|       |
 4183|    186|        return read_impl<Range>(
 4184|    186|            range, rd,
 4185|    186|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    186|                return r.read_source(SCN_FWD(args)...);
 4187|    186|            },
 4188|    186|            value);
 4189|    200|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNS1_12float_readerIwEENS1_12function_refIFSM_SP_SH_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|    200|    {
 4206|    200|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|    200|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    200|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 200, False: 0]
  |  |  ------------------
  ------------------
 4208|    200|            return unexpected(r.error());
 4209|    200|        }
 4210|       |
 4211|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|      0|        return ranges::next(range.begin(), n);
 4213|      0|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_LPv0EEEOSU_:
  753|     14|    {
  754|     14|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_LPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1D_SC_SJ_SL_:
  743|     14|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     14|              cvref<T> obj = *get<T>(fn);
  745|     14|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|     14|                  obj(static_cast<decltype(args)>(args)...);
  747|     14|              }
  748|     14|              else {
  749|     14|                  return obj(static_cast<decltype(args)>(args)...);
  750|     14|              }
  751|     14|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|     14|    {
  684|     14|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|     14|            return static_cast<T*>(s.m_cp);
  686|     14|        }
  687|     14|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|     14|            return static_cast<T*>(s.m_p);
  689|     14|        }
  690|     14|        else {
  691|     14|            return reinterpret_cast<T*>(s.m_fp);
  692|     14|        }
  693|     14|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSD_ST_EEEDaSW_SZ_:
 4176|     14|                [](float_reader<CharT>& r, auto&&... args) {
 4177|     14|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|     14|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|     14|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSL_:
  661|     14|        {
  662|     14|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_LPv0EEEOSU_:
  753|    186|    {
  754|    186|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_LPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1D_SC_SJ_SL_:
  743|    186|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    186|              cvref<T> obj = *get<T>(fn);
  745|    186|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    186|                  obj(static_cast<decltype(args)>(args)...);
  747|    186|              }
  748|    186|              else {
  749|    186|                  return obj(static_cast<decltype(args)>(args)...);
  750|    186|              }
  751|    186|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|    186|    {
  684|    186|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    186|            return static_cast<T*>(s.m_cp);
  686|    186|        }
  687|    186|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    186|            return static_cast<T*>(s.m_p);
  689|    186|        }
  690|    186|        else {
  691|    186|            return reinterpret_cast<T*>(s.m_fp);
  692|    186|        }
  693|    186|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSD_ST_EEEDaSW_SZ_:
 4185|    186|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    186|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    186|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|    186|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSL_:
  661|    186|        {
  662|    186|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|    388|    {
 4170|    388|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|    388|#if !SCN_DISABLE_LOCALE
 4173|    388|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 10, False: 378]
  ------------------
 4174|     10|            return read_impl<Range>(
 4175|     10|                range, rd,
 4176|     10|                [](float_reader<CharT>& r, auto&&... args) {
 4177|     10|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|     10|                },
 4179|     10|                value, loc);
 4180|     10|        }
 4181|    378|#endif
 4182|       |
 4183|    378|        return read_impl<Range>(
 4184|    378|            range, rd,
 4185|    378|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    378|                return r.read_source(SCN_FWD(args)...);
 4187|    378|            },
 4188|    378|            value);
 4189|    388|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|  19.9k|    {
 4206|  19.9k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|  19.9k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  19.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 19.9k]
  |  |  ------------------
  ------------------
 4208|      8|            return unexpected(r.error());
 4209|      8|        }
 4210|       |
 4211|  19.9k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|  19.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  19.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  19.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  19.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 19.9k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  19.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  19.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  19.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  19.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  19.9k|    }                                                  \
  |  |  |  | 3671|  19.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|      0|        return ranges::next(range.begin(), n);
 4213|  19.9k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|     10|    {
  754|     10|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|     10|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     10|              cvref<T> obj = *get<T>(fn);
  745|     10|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|     10|                  obj(static_cast<decltype(args)>(args)...);
  747|     10|              }
  748|     10|              else {
  749|     10|                  return obj(static_cast<decltype(args)>(args)...);
  750|     10|              }
  751|     10|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|     10|    {
  684|     10|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|     10|            return static_cast<T*>(s.m_cp);
  686|     10|        }
  687|     10|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|     10|            return static_cast<T*>(s.m_p);
  689|     10|        }
  690|     10|        else {
  691|     10|            return reinterpret_cast<T*>(s.m_fp);
  692|     10|        }
  693|     10|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|     10|                [](float_reader<CharT>& r, auto&&... args) {
 4177|     10|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|     10|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|     10|        {
  662|     10|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|    378|    {
  754|    378|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|    378|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    378|              cvref<T> obj = *get<T>(fn);
  745|    378|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    378|                  obj(static_cast<decltype(args)>(args)...);
  747|    378|              }
  748|    378|              else {
  749|    378|                  return obj(static_cast<decltype(args)>(args)...);
  750|    378|              }
  751|    378|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|    378|    {
  684|    378|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    378|            return static_cast<T*>(s.m_cp);
  686|    378|        }
  687|    378|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    378|            return static_cast<T*>(s.m_p);
  689|    378|        }
  690|    378|        else {
  691|    378|            return reinterpret_cast<T*>(s.m_fp);
  692|    378|        }
  693|    378|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|    378|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    378|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    378|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|    378|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|    378|        {
  662|    378|        }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEwEEDav:
 5808|  25.7k|{
 5809|  25.7k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  25.7k|        return reader_impl_for_bool<CharT>{};
 5811|  25.7k|    }
 5812|  25.7k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  25.7k|        return reader_impl_for_char<CharT>{};
 5814|  25.7k|    }
 5815|  25.7k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  25.7k|        return reader_impl_for_wchar<CharT>{};
 5817|  25.7k|    }
 5818|  25.7k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  25.7k|        return reader_impl_for_code_point<CharT>{};
 5820|  25.7k|    }
 5821|  25.7k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  25.7k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  25.7k|        return reader_impl_for_string<CharT>{};
 5824|  25.7k|    }
 5825|  25.7k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5825:24): [Folded - Ignored]
  |  Branch (5825:24): [Folded - Ignored]
  ------------------
 5826|  25.7k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  25.7k|        return reader_impl_for_string<CharT>{};
 5828|  25.7k|    }
 5829|  25.7k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  25.7k|                       std::is_same_v<T, wregex_matches>) {
 5831|  25.7k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  25.7k|    }
 5833|  25.7k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  25.7k|        return reader_impl_for_voidptr<CharT>{};
 5835|  25.7k|    }
 5836|  25.7k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  25.7k|        return reader_impl_for_float<CharT>{};
 5838|  25.7k|    }
 5839|  25.7k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  25.7k|                       !std::is_same_v<T, wchar_t> &&
 5841|  25.7k|                       !std::is_same_v<T, char32_t> &&
 5842|  25.7k|                       !std::is_same_v<T, bool>) {
 5843|  25.7k|        return reader_impl_for_int<CharT>{};
 5844|  25.7k|    }
 5845|  25.7k|    else {
 5846|  25.7k|        return reader_impl_for_monostate<CharT>{};
 5847|  25.7k|    }
 5848|  25.7k|}
_ZN3scn2v34impl13string_readerIwEC2Ev:
 5205|  77.2k|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|  18.6k|    {
 3040|  18.6k|        reader_error_handler eh{};
 3041|  18.6k|        get_derived().check_specs_impl(specs, eh);
 3042|  18.6k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  18.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 294, False: 18.3k]
  |  |  ------------------
  ------------------
 3043|    294|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|    294|        }
 3045|  18.3k|        return {};
 3046|  18.6k|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11get_derivedEv:
 3050|  18.6k|    {
 3051|  18.6k|        return static_cast<Derived&>(*this);
 3052|  18.6k|    }
_ZN3scn2v34impl13string_readerIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5209|  18.6k|    {
 5210|  18.6k|        detail::check_string_type_specs(specs, eh);
 5211|       |
 5212|  18.6k|        SCN_GCC_PUSH
 5213|  18.6k|        SCN_GCC_IGNORE("-Wswitch")
 5214|  18.6k|        SCN_GCC_IGNORE("-Wswitch-default")
 5215|       |
 5216|  18.6k|        SCN_CLANG_PUSH
 5217|  18.6k|        SCN_CLANG_IGNORE("-Wswitch")
 5218|  18.6k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5219|       |
 5220|  18.6k|        switch (specs.type) {
  ------------------
  |  Branch (5220:17): [True: 288, False: 18.3k]
  ------------------
 5221|  1.56k|            case detail::presentation_type::none:
  ------------------
  |  Branch (5221:13): [True: 1.56k, False: 17.0k]
  ------------------
 5222|  1.56k|                m_type = reader_type::word;
 5223|  1.56k|                break;
 5224|       |
 5225|    240|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5225:13): [True: 240, False: 18.3k]
  ------------------
 5226|    240|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5226:21): [True: 96, False: 144]
  ------------------
 5227|    240|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5227:21): [True: 96, False: 48]
  ------------------
 5228|    192|                    m_type = reader_type::custom_word;
 5229|    192|                }
 5230|     48|                else {
 5231|     48|                    m_type = reader_type::word;
 5232|     48|                }
 5233|    240|                break;
 5234|      0|            }
 5235|       |
 5236|     72|            case detail::presentation_type::character:
  ------------------
  |  Branch (5236:13): [True: 72, False: 18.5k]
  ------------------
 5237|     72|                m_type = reader_type::character;
 5238|     72|                break;
 5239|       |
 5240|    852|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5240:13): [True: 852, False: 17.7k]
  ------------------
 5241|    852|                m_type = reader_type::character_set;
 5242|    852|                break;
 5243|       |
 5244|  15.2k|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5244:13): [True: 15.2k, False: 3.35k]
  ------------------
 5245|  15.2k|                m_type = reader_type::regex;
 5246|  15.2k|                break;
 5247|       |
 5248|    342|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5248:13): [True: 342, False: 18.2k]
  ------------------
 5249|    342|                m_type = reader_type::regex_escaped;
 5250|    342|                break;
 5251|  18.6k|        }
 5252|       |
 5253|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5254|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5255|  18.6k|    }
_ZNK3scn2v34impl13string_readerIwE19skip_ws_before_readEv:
 5258|  78.9k|    {
 5259|  78.9k|        return m_type == reader_type::word;
 5260|  78.9k|    }
_ZN3scn2v34impl16validate_unicodeIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|  83.0k|{
 1132|  83.0k|    auto it = src.begin();
 1133|   437k|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 356k, False: 80.8k]
  ------------------
 1134|   356k|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|   356k|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 0, False: 356k]
  ------------------
 1136|      0|            return false;
 1137|      0|        }
 1138|   356k|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 0, False: 356k]
  ------------------
 1139|      0|            return false;
 1140|      0|        }
 1141|   356k|        const auto cp = detail::decode_code_point_exhaustive(
 1142|   356k|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|   356k|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 2.23k, False: 354k]
  ------------------
 1144|  2.23k|            return false;
 1145|  2.23k|        }
 1146|   354k|        it += len;
 1147|   354k|    }
 1148|  80.8k|    return true;
 1149|  83.0k|}
_ZN3scn2v34impl22transcode_if_necessaryIwcEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|     96|{
 2993|     96|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|     96|        if (source.stores_allocated_string()) {
 2995|     96|            dest.assign(SCN_MOVE(source.get_allocated_string()));
 2996|     96|        }
 2997|     96|        else {
 2998|     96|            dest.assign(source.view());
 2999|     96|        }
 3000|     96|    }
 3001|     96|    else {
 3002|     96|        return transcode_impl(source.view(), dest);
 3003|     96|    }
 3004|       |
 3005|      0|    return {};
 3006|     96|}
_ZN3scn2v34impl14transcode_implIwcEENS0_10scan_errorENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEERNS4_12basic_stringIT0_NS7_ISB_EENS4_9allocatorISB_EEEE:
 2967|  20.2k|{
 2968|  20.2k|    dst.clear();
 2969|  20.2k|    transcode_valid_to_string(src, dst);
 2970|  20.2k|    return {};
 2971|  20.2k|}
_ZN3scn2v34impl25transcode_valid_to_stringIwcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1402|  20.2k|{
 1403|  20.2k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1404|       |
 1405|  20.2k|    SCN_EXPECT(validate_unicode(src));
  ------------------
  |  |  924|  20.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  20.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1406|  20.2k|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1406:19): [Folded - Ignored]
  ------------------
 1407|  20.2k|        if constexpr (sizeof(DestCharT) == 2) {
 1408|       |            // TODO: Optimize, remove utf32-step, go direct utf8->utf16
 1409|  20.2k|            std::u32string tmp;
 1410|  20.2k|            transcode_valid_to_string_impl_to32(src, tmp);
 1411|  20.2k|            return transcode_to_string_impl_32to16<true>(
 1412|  20.2k|                std::u32string_view{tmp}, dest);
 1413|  20.2k|        }
 1414|  20.2k|        else if constexpr (sizeof(DestCharT) == 4) {
 1415|  20.2k|            return transcode_valid_to_string_impl_to32(src, dest);
 1416|  20.2k|        }
 1417|  20.2k|    }
 1418|  20.2k|    else if constexpr (sizeof(SourceCharT) == 2) {
  ------------------
  |  Branch (1418:24): [Folded - Ignored]
  ------------------
 1419|  20.2k|        if constexpr (sizeof(DestCharT) == 1) {
 1420|  20.2k|            std::u32string tmp;
 1421|  20.2k|            transcode_valid_to_string_impl_to32(src, tmp);
 1422|  20.2k|            return transcode_to_string_impl_32to8<true>(
 1423|  20.2k|                std::u32string_view{tmp}, dest);
 1424|  20.2k|        }
 1425|  20.2k|        else if constexpr (sizeof(DestCharT) == 4) {
 1426|  20.2k|            return trasncode_valid_to_string_impl_to32(src, dest);
 1427|  20.2k|        }
 1428|  20.2k|    }
 1429|  20.2k|    else if constexpr (sizeof(SourceCharT) == 4) {
  ------------------
  |  Branch (1429:24): [Folded - Ignored]
  ------------------
 1430|  20.2k|        if constexpr (sizeof(DestCharT) == 1) {
  ------------------
  |  Branch (1430:23): [Folded - Ignored]
  ------------------
 1431|  20.2k|            return transcode_to_string_impl_32to8<true>(src, dest);
 1432|  20.2k|        }
 1433|  20.2k|        else if constexpr (sizeof(DestCharT) == 2) {
 1434|  20.2k|            return transcode_to_string_impl_32to16<true>(src, dest);
 1435|  20.2k|        }
 1436|  20.2k|    }
 1437|       |
 1438|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1439|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1440|      0|}
_ZN3scn2v34impl30transcode_to_string_impl_32to8ILb1EwcEEvNSt3__117basic_string_viewIT0_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT1_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1293|  20.2k|{
 1294|  20.2k|    static_assert(sizeof(SourceCharT) == 4);
 1295|  20.2k|    static_assert(sizeof(DestCharT) == 1);
 1296|       |
 1297|  85.2k|    for (auto cp : src) {
  ------------------
  |  Branch (1297:18): [True: 85.2k, False: 20.2k]
  ------------------
 1298|  85.2k|        const auto u32cp = static_cast<uint32_t>(cp);
 1299|  85.2k|        if (SCN_UNLIKELY(!VerifiedValid && cp >= detail::invalid_code_point)) {
  ------------------
  |  |  859|  85.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [Folded - Ignored]
  |  |  |  Branch (859:45): [Folded - Ignored]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1300|       |            // Replacement character
 1301|      0|            dest.push_back(static_cast<char>(0xef));
 1302|      0|            dest.push_back(static_cast<char>(0xbf));
 1303|      0|            dest.push_back(static_cast<char>(0xbd));
 1304|      0|        }
 1305|  85.2k|        else if (cp < 128) {
  ------------------
  |  Branch (1305:18): [True: 64.9k, False: 20.2k]
  ------------------
 1306|  64.9k|            dest.push_back(static_cast<char>(cp));
 1307|  64.9k|        }
 1308|  20.2k|        else if (cp < 2048) {
  ------------------
  |  Branch (1308:18): [True: 294, False: 19.9k]
  ------------------
 1309|    294|            dest.push_back(
 1310|    294|                static_cast<char>(0xc0 | (static_cast<char>(u32cp >> 6))));
 1311|    294|            dest.push_back(
 1312|    294|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1313|    294|        }
 1314|  19.9k|        else if (cp < 65536) {
  ------------------
  |  Branch (1314:18): [True: 19.4k, False: 506]
  ------------------
 1315|  19.4k|            dest.push_back(
 1316|  19.4k|                static_cast<char>(0xe0 | (static_cast<char>(u32cp >> 12))));
 1317|  19.4k|            dest.push_back(static_cast<char>(
 1318|  19.4k|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1319|  19.4k|            dest.push_back(
 1320|  19.4k|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1321|  19.4k|        }
 1322|    506|        else {
 1323|    506|            dest.push_back(
 1324|    506|                static_cast<char>(0xf0 | (static_cast<char>(u32cp >> 18))));
 1325|    506|            dest.push_back(static_cast<char>(
 1326|    506|                0x80 | (static_cast<char>(u32cp >> 12) & 0x3f)));
 1327|    506|            dest.push_back(static_cast<char>(
 1328|    506|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1329|    506|            dest.push_back(
 1330|    506|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1331|    506|        }
 1332|  85.2k|    }
 1333|  20.2k|}
_ZN3scn2v34impl25character_set_reader_implIwE12specs_helper15handle_nonasciiEv:
 5102|    852|        {
 5103|    852|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5103:17): [True: 282, False: 570]
  ------------------
 5104|    282|                return {};
 5105|    282|            }
 5106|       |
 5107|    570|            auto charset_string = specs.charset_string<SourceCharT>();
 5108|    570|            auto it = detail::to_address(charset_string.begin());
 5109|    570|            auto set = detail::parse_presentation_set(
 5110|    570|                it, detail::to_address(charset_string.end()), nonascii);
 5111|    570|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  859|    570|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 570]
  |  |  ------------------
  ------------------
 5112|      0|                return nonascii.err;
 5113|      0|            }
 5114|    570|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  925|    570|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|    570|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5115|    570|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  925|    570|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|    570|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5116|       |
 5117|    570|            std::sort(nonascii.extra_ranges.begin(),
 5118|    570|                      nonascii.extra_ranges.end());
 5119|    570|            return {};
 5120|    570|        }
_ZNK3scn2v34impl25character_set_reader_implIwE20read_source_callback28on_classic_with_extra_rangesEDi:
 5137|  9.64k|        {
 5138|  9.64k|            if (!is_ascii_char(cp)) {
  ------------------
  |  Branch (5138:17): [True: 1.30k, False: 8.34k]
  ------------------
 5139|  1.30k|                return helper.is_char_set_in_extra_literals(cp);
 5140|  1.30k|            }
 5141|       |
 5142|  8.34k|            return helper.is_char_set_in_literals(static_cast<char>(cp));
 5143|  9.64k|        }
_ZNK3scn2v34impl25character_set_reader_implIwE12specs_helper29is_char_set_in_extra_literalsEDi:
 5085|  1.30k|        {
 5086|       |            // TODO: binary search?
 5087|  1.30k|            if (nonascii.extra_ranges.empty()) {
  ------------------
  |  Branch (5087:17): [True: 0, False: 1.30k]
  ------------------
 5088|      0|                return false;
 5089|      0|            }
 5090|       |
 5091|  1.30k|            const auto cp_val = static_cast<uint32_t>(cp);
 5092|  1.30k|            return std::find_if(
 5093|  1.30k|                       nonascii.extra_ranges.begin(),
 5094|  1.30k|                       nonascii.extra_ranges.end(),
 5095|  1.30k|                       [cp_val](const auto& pair) noexcept {
 5096|  1.30k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
 5097|  1.30k|                                  static_cast<uint32_t>(pair.second) > cp_val;
 5098|  1.30k|                       }) != nonascii.extra_ranges.end();
 5099|  1.30k|        }
_ZZNK3scn2v34impl25character_set_reader_implIwE12specs_helper29is_char_set_in_extra_literalsEDiENKUlRKT_E_clINSt3__14pairIDiDiEEEEDaS7_:
 5095|  4.75k|                       [cp_val](const auto& pair) noexcept {
 5096|  4.75k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
  ------------------
  |  Branch (5096:35): [True: 4.75k, False: 0]
  ------------------
 5097|  4.75k|                                  static_cast<uint32_t>(pair.second) > cp_val;
  ------------------
  |  Branch (5097:35): [True: 1.30k, False: 3.45k]
  ------------------
 5098|  4.75k|                       }) != nonascii.extra_ranges.end();
_ZNK3scn2v34impl25character_set_reader_implIwE12specs_helper23is_char_set_in_literalsEc:
 5075|  10.2k|        {
 5076|  10.2k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  924|  10.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5077|  10.2k|            const auto val =
 5078|  10.2k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5079|  10.2k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5080|  10.2k|                    (val % 8)) &
 5081|  10.2k|                   1u;
 5082|  10.2k|        }
_ZNK3scn2v34impl25character_set_reader_implIwE20read_source_callback13on_ascii_onlyEw:
 5128|  1.95k|        {
 5129|  1.95k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5129:17): [True: 0, False: 1.95k]
  ------------------
 5130|      0|                return false;
 5131|      0|            }
 5132|       |
 5133|  1.95k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5134|  1.95k|        }
_ZN3scn2v34impl25character_set_reader_implIwE12specs_helperC2ERKNS0_6detail12format_specsE:
 5072|    852|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v34impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5276|    230|    {
 5277|    230|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    230|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|    230|        return read_impl(range, specs, value);
 5279|    230|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5294|    230|    {
 5295|    230|        SCN_CLANG_PUSH
 5296|    230|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|    230|        switch (m_type) {
 5299|    162|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 162, False: 68]
  ------------------
 5300|    162|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     30|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 30, False: 200]
  ------------------
 5303|     30|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     30|                                                                   value);
 5305|       |
 5306|     22|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 22, False: 208]
  ------------------
 5307|     22|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|      0|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 0, False: 230]
  ------------------
 5310|      0|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|      0|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|     10|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 10, False: 220]
  ------------------
 5315|     10|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|     10|                    range, specs.charset_string<SourceCharT>(),
 5317|     10|                    specs.regexp_flags, value);
 5318|       |
 5319|      6|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 6, False: 224]
  ------------------
 5320|      6|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      6|                    range,
 5322|      6|                    get_unescaped_regex_pattern(
 5323|      6|                        specs.charset_string<SourceCharT>()),
 5324|      6|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 230]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|    230|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|    230|        }
 5331|       |
 5332|    230|        SCN_CLANG_POP
 5333|    230|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4819|    162|    {
 4820|    162|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    162|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4751|    214|{
 4752|    214|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    214|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    214|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 118, False: 96]
  ------------------
 4756|    118|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    118|                                     "Invalid encoding in scanned string");
 4758|    118|    }
 4759|     96|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|     96|    static_cast<    \
  |  |  929|     96|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|     96|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     96|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 96]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|     96|    return SCN_MOVE(result);
  ------------------
  |  |  928|     96|    static_cast<    \
  |  |  929|     96|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|     96|}
_ZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2087|    486|{
 2088|    486|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|    486|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|    486|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|    486|        auto buf = make_contiguous_buffer(range);
 2092|    486|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|    486|        return ranges::next(range.begin(),
 2094|    486|                            ranges::distance(buf.view().begin(), it));
 2095|    486|    }
 2096|    486|    else {
 2097|    486|        auto it = range.begin();
 2098|       |
 2099|    486|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|    486|            auto seg = get_contiguous_beginning(range);
 2101|    486|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|    486|                seg_it != seg.end()) {
 2103|    486|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|    486|            }
 2105|    486|            ranges::advance(it, seg.size());
 2106|    486|        }
 2107|       |
 2108|    486|        return read_until_code_point(
 2109|    486|            ranges::subrange{it, range.end()},
 2110|    486|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|    486|    }
 2112|    486|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbDiESQ_EE:
 2060|    486|{
 2061|    486|    auto it = range.begin();
 2062|  22.1k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 21.6k, False: 438]
  ------------------
 2063|  21.6k|        const auto val =
 2064|  21.6k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  21.6k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  21.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 21.6k, False: 0]
  |  |  ------------------
  ------------------
 2066|  21.6k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  21.6k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  21.6k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 48, False: 21.6k]
  ------------------
 2069|     48|                return it;
 2070|     48|            }
 2071|  21.6k|        }
 2072|  21.6k|        it = val.iterator;
 2073|  21.6k|    }
 2074|       |
 2075|    438|    return it;
 2076|    486|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_:
  753|    486|    {
  754|    486|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESS_Di:
  743|  21.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  21.6k|              cvref<T> obj = *get<T>(fn);
  745|  21.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  21.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  21.6k|              }
  748|  21.6k|              else {
  749|  21.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  21.6k|              }
  751|  21.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  21.6k|    {
  684|  21.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  21.6k|            return static_cast<T*>(s.m_cp);
  686|  21.6k|        }
  687|  21.6k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  21.6k|            return static_cast<T*>(s.m_p);
  689|  21.6k|        }
  690|  21.6k|        else {
  691|  21.6k|            return reinterpret_cast<T*>(s.m_fp);
  692|  21.6k|        }
  693|  21.6k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2110|  21.6k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_LPv0EEEPSI_:
  661|    486|        {
  662|    486|        }
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4840|     30|    {
 4841|     30|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 30, False: 0]
  ------------------
 4842|     30|            return read_string_impl(
 4843|     30|                range,
 4844|     30|                read_until_code_unit(
 4845|     30|                    range,
 4846|     30|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     30|                        SourceCharT ch) { return ch == until; }),
 4848|     30|                value);
 4849|     30|        }
 4850|      0|        return read_string_impl(
 4851|      0|            range,
 4852|      0|            read_until_code_units(
 4853|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|      0|            value);
 4855|     30|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_LPv0EEEOSL_:
  753|     30|    {
  754|     30|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES18_w:
  743|    340|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    340|              cvref<T> obj = *get<T>(fn);
  745|    340|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    340|                  obj(static_cast<decltype(args)>(args)...);
  747|    340|              }
  748|    340|              else {
  749|    340|                  return obj(static_cast<decltype(args)>(args)...);
  750|    340|              }
  751|    340|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlwE_EEDaNS3_7storageE:
  683|    340|    {
  684|    340|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    340|            return static_cast<T*>(s.m_cp);
  686|    340|        }
  687|    340|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    340|            return static_cast<T*>(s.m_p);
  689|    340|        }
  690|    340|        else {
  691|    340|            return reinterpret_cast<T*>(s.m_fp);
  692|    340|        }
  693|    340|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlwE_clEw:
 4847|    340|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_LPv0EEEPSL_:
  661|     30|        {
  662|     30|        }
_ZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4946|     22|    {
 4947|     22|        return read_impl(
 4948|     22|            range,
 4949|     22|            [&](const auto& rng) {
 4950|     22|                return read_string_impl(rng, read_all(rng), value);
 4951|     22|            },
 4952|     22|            detail::priority_tag<1>{});
 4953|     22|    }
_ZN3scn2v34impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     22|    {
 4974|     22|        return read_cb(range);
 4975|     22|    }
_ZZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4949|     22|            [&](const auto& rng) {
 4950|     22|                return read_string_impl(rng, read_all(rng), value);
 4951|     22|            },
_ZN3scn2v34impl8read_allINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 1838|     66|{
 1839|     66|    return ranges::next(range.begin(), range.end());
 1840|     66|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS1_6detail9subrange_8subrangeIS9_S9_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EESL_E4typeESL_SM_:
  312|     66|    {
  313|     66|        ranges::advance(x, bound);
  314|     66|        return x;
  315|     66|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EEvE4typeERSL_SM_:
  274|     66|    {
  275|     66|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|     66|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEvRT_T0_NS0_6detail12priority_tagILm0EEE:
  202|     66|    {
  203|    798|        while (i != bound) {
  ------------------
  |  Branch (203:16): [True: 732, False: 66]
  ------------------
  204|    732|            ++i;
  205|    732|        }
  206|     66|    }
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4890|     16|    {
 4891|     16|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 16, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     16|    }                                                  \
  |  |  |  | 3671|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|      0|        return read_string_impl(range, it, value);
 4893|     16|    }
_ZN3scn2v34impl24regex_string_reader_implIwE4implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsE:
 4912|     48|    {
 4913|     48|        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|     96|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (4913:23): [Folded - Ignored]
  |  Branch (4913:23): [Folded - Ignored]
  ------------------
 4914|     48|                      !std::is_same_v<SourceCharT, char>) {
  ------------------
  |  Branch (4914:23): [Folded - Ignored]
  ------------------
 4915|     48|            return unexpected_scan_error(
 4916|     48|                scan_error::invalid_scanned_value,
 4917|     48|                "Regex backend doesn't support wide strings as input");
 4918|     48|        }
 4919|     48|        else {
 4920|     48|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4920:17): [True: 48, False: 0]
  ------------------
 4921|     48|                return unexpected_scan_error(
 4922|     48|                    scan_error::invalid_scanned_value,
 4923|     48|                    "Cannot use regex with a non-contiguous source "
 4924|     48|                    "range");
 4925|     48|            }
 4926|       |
 4927|      0|            auto input = get_as_contiguous(range);
 4928|      0|            SCN_TRY(it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4929|      0|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4930|      0|            return ranges::next(range.begin(),
 4931|      0|                                ranges::distance(input.begin(), it));
 4932|      0|        }
 4933|     48|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEbT_:
  958|     48|{
  959|     48|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (959:19): [Folded - Ignored]
  |  Branch (959:19): [Folded - Ignored]
  ------------------
  960|     48|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (960:19): [Folded - Ignored]
  ------------------
  961|     48|        return true;
  962|     48|    }
  963|     48|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (963:24): [Folded - Ignored]
  ------------------
  964|     48|                           ranges::const_iterator_t<Range>,
  965|     48|                           typename detail::basic_scan_buffer<
  966|     48|                               detail::char_t<Range>>::forward_iterator>) {
  967|     48|        auto beg = r.begin();
  968|     48|        if (!beg.stores_parent()) {
  969|     48|            return true;
  970|     48|        }
  971|     48|        return beg.parent()->is_contiguous();
  972|     48|    }
  973|     48|    else {
  974|     48|        return false;
  975|     48|    }
  976|     48|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  5.86k|    {
 5277|  5.86k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  5.86k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  5.86k|        return read_impl(range, specs, value);
 5279|  5.86k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  5.86k|    {
 5295|  5.86k|        SCN_CLANG_PUSH
 5296|  5.86k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  5.86k|        switch (m_type) {
 5299|    372|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 372, False: 5.49k]
  ------------------
 5300|    372|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     32|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 32, False: 5.83k]
  ------------------
 5303|     32|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     32|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 5.86k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    284|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 284, False: 5.58k]
  ------------------
 5310|    284|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    284|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  5.06k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 5.06k, False: 796]
  ------------------
 5315|  5.06k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  5.06k|                    range, specs.charset_string<SourceCharT>(),
 5317|  5.06k|                    specs.regexp_flags, value);
 5318|       |
 5319|    108|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 108, False: 5.75k]
  ------------------
 5320|    108|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    108|                    range,
 5322|    108|                    get_unescaped_regex_pattern(
 5323|    108|                        specs.charset_string<SourceCharT>()),
 5324|    108|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 5.86k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  5.86k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  5.86k|        }
 5331|       |
 5332|  5.86k|        SCN_CLANG_POP
 5333|  5.86k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|  19.9k|    {
 4820|  19.9k|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|  19.9k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|  19.9k|{
 4752|  19.9k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  19.9k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  19.9k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 324, False: 19.6k]
  ------------------
 4756|    324|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    324|                                     "Invalid encoding in scanned string");
 4758|    324|    }
 4759|  19.6k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  19.6k|    static_cast<    \
  |  |  929|  19.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|  19.6k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  19.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 19.6k]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|  19.6k|    return SCN_MOVE(result);
  ------------------
  |  |  928|  19.6k|    static_cast<    \
  |  |  929|  19.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|  19.6k|}
_ZN3scn2v34impl22transcode_if_necessaryIwcEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|  20.1k|{
 3012|  20.1k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|  20.1k|        dest.assign(source.view());
 3014|  20.1k|    }
 3015|  20.1k|    else {
 3016|  20.1k|        return transcode_impl(source.view(), dest);
 3017|  20.1k|    }
 3018|       |
 3019|      0|    return {};
 3020|  20.1k|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2087|  59.7k|{
 2088|  59.7k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  59.7k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  59.7k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  59.7k|        auto buf = make_contiguous_buffer(range);
 2092|  59.7k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  59.7k|        return ranges::next(range.begin(),
 2094|  59.7k|                            ranges::distance(buf.view().begin(), it));
 2095|  59.7k|    }
 2096|  59.7k|    else {
 2097|  59.7k|        auto it = range.begin();
 2098|       |
 2099|  59.7k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|  59.7k|            auto seg = get_contiguous_beginning(range);
 2101|  59.7k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  59.7k|                seg_it != seg.end()) {
 2103|  59.7k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  59.7k|            }
 2105|  59.7k|            ranges::advance(it, seg.size());
 2106|  59.7k|        }
 2107|       |
 2108|  59.7k|        return read_until_code_point(
 2109|  59.7k|            ranges::subrange{it, range.end()},
 2110|  59.7k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  59.7k|    }
 2112|  59.7k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|  59.7k|    {
  754|  59.7k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|   319k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   319k|              cvref<T> obj = *get<T>(fn);
  745|   319k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   319k|                  obj(static_cast<decltype(args)>(args)...);
  747|   319k|              }
  748|   319k|              else {
  749|   319k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   319k|              }
  751|   319k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   319k|    {
  684|   319k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   319k|            return static_cast<T*>(s.m_cp);
  686|   319k|        }
  687|   319k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   319k|            return static_cast<T*>(s.m_p);
  689|   319k|        }
  690|   319k|        else {
  691|   319k|            return reinterpret_cast<T*>(s.m_fp);
  692|   319k|        }
  693|   319k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2110|   319k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|  59.7k|        {
  662|  59.7k|        }
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4840|     32|    {
 4841|     32|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 32, False: 0]
  ------------------
 4842|     32|            return read_string_impl(
 4843|     32|                range,
 4844|     32|                read_until_code_unit(
 4845|     32|                    range,
 4846|     32|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     32|                        SourceCharT ch) { return ch == until; }),
 4848|     32|                value);
 4849|     32|        }
 4850|      0|        return read_string_impl(
 4851|      0|            range,
 4852|      0|            read_until_code_units(
 4853|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|      0|            value);
 4855|     32|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_LPv0EEEOSJ_:
  753|     32|    {
  754|     32|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  743|    678|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    678|              cvref<T> obj = *get<T>(fn);
  745|    678|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    678|                  obj(static_cast<decltype(args)>(args)...);
  747|    678|              }
  748|    678|              else {
  749|    678|                  return obj(static_cast<decltype(args)>(args)...);
  750|    678|              }
  751|    678|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    678|    {
  684|    678|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    678|            return static_cast<T*>(s.m_cp);
  686|    678|        }
  687|    678|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    678|            return static_cast<T*>(s.m_p);
  689|    678|        }
  690|    678|        else {
  691|    678|            return reinterpret_cast<T*>(s.m_fp);
  692|    678|        }
  693|    678|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlwE_clEw:
 4847|    678|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_LPv0EEEPSJ_:
  661|     32|        {
  662|     32|        }
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5047|    284|    {
 5048|    284|        auto it = read_source_impl(range, {specs});
 5049|    284|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    284|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 46, False: 238]
  |  |  ------------------
  ------------------
 5050|     46|            return unexpected(it.error());
 5051|     46|        }
 5052|       |
 5053|    238|        return read_string_impl(range, *it, value);
 5054|    284|    }
_ZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5152|    852|    {
 5153|    852|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|    852|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|    852|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    852|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 852]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|    852|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|    852|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 570, False: 282]
  ------------------
 5163|    570|            const auto cb = [&](char32_t cp) {
 5164|    570|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|    570|            };
 5166|       |
 5167|    570|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 120, False: 450]
  ------------------
 5168|    120|                auto it = read_until_code_point(range, cb);
 5169|    120|                return check_nonempty(it, range);
 5170|    120|            }
 5171|    450|            auto it = read_while_code_point(range, cb);
 5172|    450|            return check_nonempty(it, range);
 5173|    570|        }
 5174|       |
 5175|    282|        const auto cb = [&](SourceCharT ch) {
 5176|    282|            return cb_wrapper.on_ascii_only(ch);
 5177|    282|        };
 5178|       |
 5179|    282|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 108, False: 174]
  ------------------
 5180|    108|            auto it = read_until_code_unit(range, cb);
 5181|    108|            return check_nonempty(it, range);
 5182|    108|        }
 5183|    174|        auto it = read_while_code_unit(range, cb);
 5184|    174|        return check_nonempty(it, range);
 5185|    282|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_LPv0EEEOSJ_:
  753|    570|    {
  754|    570|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESX_Di:
  743|  9.64k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  9.64k|              cvref<T> obj = *get<T>(fn);
  745|  9.64k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  9.64k|                  obj(static_cast<decltype(args)>(args)...);
  747|  9.64k|              }
  748|  9.64k|              else {
  749|  9.64k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  9.64k|              }
  751|  9.64k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|  9.64k|    {
  684|  9.64k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  9.64k|            return static_cast<T*>(s.m_cp);
  686|  9.64k|        }
  687|  9.64k|        else if constexpr (std::is_object_v<T>) {
  688|  9.64k|            return static_cast<T*>(s.m_p);
  689|  9.64k|        }
  690|  9.64k|        else {
  691|  9.64k|            return reinterpret_cast<T*>(s.m_fp);
  692|  9.64k|        }
  693|  9.64k|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlDiE_clEDi:
 5163|  9.64k|            const auto cb = [&](char32_t cp) {
 5164|  9.64k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|  9.64k|            };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_LPv0EEEPKSJ_:
  666|    570|        {
  667|    570|        }
_ZN3scn2v34impl25character_set_reader_implIwE14check_nonemptyIPKwNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5190|    852|    {
 5191|    852|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 138, False: 714]
  ------------------
 5192|    138|            return unexpected_scan_error(
 5193|    138|                scan_error::invalid_scanned_value,
 5194|    138|                "No characters matched in [character set]");
 5195|    138|        }
 5196|       |
 5197|    714|        return it;
 5198|    852|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_LPv0EEEOSJ_:
  753|    282|    {
  754|    282|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|  1.95k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.95k|              cvref<T> obj = *get<T>(fn);
  745|  1.95k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.95k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.95k|              }
  748|  1.95k|              else {
  749|  1.95k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.95k|              }
  751|  1.95k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  1.95k|    {
  684|  1.95k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.95k|            return static_cast<T*>(s.m_cp);
  686|  1.95k|        }
  687|  1.95k|        else if constexpr (std::is_object_v<T>) {
  688|  1.95k|            return static_cast<T*>(s.m_p);
  689|  1.95k|        }
  690|  1.95k|        else {
  691|  1.95k|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.95k|        }
  693|  1.95k|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlwE_clEw:
 5175|  1.95k|        const auto cb = [&](SourceCharT ch) {
 5176|  1.95k|            return cb_wrapper.on_ascii_only(ch);
 5177|  1.95k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_LPv0EEEPKSJ_:
  666|    282|        {
  667|    282|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4751|    798|{
 4752|    798|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    798|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    798|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 302, False: 496]
  ------------------
 4756|    302|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    302|                                     "Invalid encoding in scanned string");
 4758|    302|    }
 4759|    496|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    496|    static_cast<    \
  |  |  929|    496|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    496|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    496|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 496]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    496|    return SCN_MOVE(result);
  ------------------
  |  |  928|    496|    static_cast<    \
  |  |  929|    496|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    496|}
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4890|  5.17k|    {
 4891|  5.17k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|  5.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  5.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  5.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  5.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.61k, False: 560]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.61k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.61k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.61k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.61k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.61k|    }                                                  \
  |  |  |  | 3671|  5.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    560|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|    560|        return read_string_impl(range, it, value);
 4893|  5.17k|    }
_ZN3scn2v34impl24regex_string_reader_implIwE4implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsE:
 4912|  15.5k|    {
 4913|  15.5k|        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|  31.0k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (4913:23): [Folded - Ignored]
  |  Branch (4913:23): [Folded - Ignored]
  ------------------
 4914|  15.5k|                      !std::is_same_v<SourceCharT, char>) {
  ------------------
  |  Branch (4914:23): [Folded - Ignored]
  ------------------
 4915|  15.5k|            return unexpected_scan_error(
 4916|  15.5k|                scan_error::invalid_scanned_value,
 4917|  15.5k|                "Regex backend doesn't support wide strings as input");
 4918|  15.5k|        }
 4919|  15.5k|        else {
 4920|  15.5k|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4920:17): [True: 0, False: 15.5k]
  ------------------
 4921|      0|                return unexpected_scan_error(
 4922|      0|                    scan_error::invalid_scanned_value,
 4923|      0|                    "Cannot use regex with a non-contiguous source "
 4924|      0|                    "range");
 4925|      0|            }
 4926|       |
 4927|  15.5k|            auto input = get_as_contiguous(range);
 4928|  15.5k|            SCN_TRY(it,
  ------------------
  |  | 3672|  15.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  15.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  15.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  15.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 13.8k, False: 1.68k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  13.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  13.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  13.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  13.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  13.8k|    }                                                  \
  |  |  |  | 3671|  15.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.68k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4929|  1.68k|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4930|  1.68k|            return ranges::next(range.begin(),
 4931|  1.68k|                                ranges::distance(input.begin(), it));
 4932|  15.5k|        }
 4933|  15.5k|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  958|  15.5k|{
  959|  15.5k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (959:19): [Folded - Ignored]
  |  Branch (959:19): [Folded - Ignored]
  ------------------
  960|  15.5k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (960:19): [Folded - Ignored]
  ------------------
  961|  15.5k|        return true;
  962|  15.5k|    }
  963|  15.5k|    else if constexpr (std::is_same_v<
  964|  15.5k|                           ranges::const_iterator_t<Range>,
  965|  15.5k|                           typename detail::basic_scan_buffer<
  966|  15.5k|                               detail::char_t<Range>>::forward_iterator>) {
  967|  15.5k|        auto beg = r.begin();
  968|  15.5k|        if (!beg.stores_parent()) {
  969|  15.5k|            return true;
  970|  15.5k|        }
  971|  15.5k|        return beg.parent()->is_contiguous();
  972|  15.5k|    }
  973|  15.5k|    else {
  974|  15.5k|        return false;
  975|  15.5k|    }
  976|  15.5k|}
_ZN3scn2v34impl17get_as_contiguousINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaT_:
 1064|  15.5k|{
 1065|  15.5k|    SCN_EXPECT(is_segment_contiguous(r));
  ------------------
  |  |  924|  15.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  15.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1066|       |
 1067|  15.5k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1067:19): [Folded - Ignored]
  |  Branch (1067:19): [Folded - Ignored]
  ------------------
 1068|  15.5k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1068:19): [Folded - Ignored]
  ------------------
 1069|  15.5k|        return r;
 1070|  15.5k|    }
 1071|  15.5k|    else if constexpr (std::is_same_v<
 1072|  15.5k|                           ranges::const_iterator_t<Range>,
 1073|  15.5k|                           typename detail::basic_scan_buffer<
 1074|  15.5k|                               detail::char_t<Range>>::forward_iterator>) {
 1075|  15.5k|        if constexpr (ranges::common_range<Range>) {
 1076|  15.5k|            return detail::make_string_view_from_pointers(
 1077|  15.5k|                r.begin().to_contiguous_segment_iterator(),
 1078|  15.5k|                r.end().to_contiguous_segment_iterator());
 1079|  15.5k|        }
 1080|  15.5k|        else {
 1081|  15.5k|            return r.begin().contiguous_segment();
 1082|  15.5k|        }
 1083|  15.5k|    }
 1084|  15.5k|    else {
 1085|  15.5k|        SCN_EXPECT(false);
 1086|  15.5k|        SCN_UNREACHABLE;
 1087|       |        // for return type deduction
 1088|  15.5k|        return std::basic_string_view<detail::char_t<Range>>{};
 1089|  15.5k|    }
 1090|  15.5k|}
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  980|  15.5k|{
  981|  15.5k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|  15.5k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|  15.5k|        return true;
  984|  15.5k|    }
  985|  15.5k|    else if constexpr (std::is_same_v<
  986|  15.5k|                           ranges::const_iterator_t<Range>,
  987|  15.5k|                           typename detail::basic_scan_buffer<
  988|  15.5k|                               detail::char_t<Range>>::forward_iterator>) {
  989|  15.5k|        auto beg = r.begin();
  990|  15.5k|        if (beg.contiguous_segment().empty()) {
  991|  15.5k|            return false;
  992|  15.5k|        }
  993|  15.5k|        if constexpr (ranges::common_range<Range>) {
  994|  15.5k|            return beg.contiguous_segment().end() ==
  995|  15.5k|                   ranges::end(r).contiguous_segment().end();
  996|  15.5k|        }
  997|  15.5k|        else {
  998|  15.5k|            if (beg.stores_parent()) {
  999|  15.5k|                return beg.contiguous_segment().end() ==
 1000|  15.5k|                       beg.parent()->current_view().end();
 1001|  15.5k|            }
 1002|  15.5k|            return true;
 1003|  15.5k|        }
 1004|  15.5k|    }
 1005|  15.5k|    else {
 1006|  15.5k|        return false;
 1007|  15.5k|    }
 1008|  15.5k|}
_ZN3scn2v34impl22read_regex_string_implIwNS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT0_EEEEEENSt3__117basic_string_viewIT_NSF_11char_traitsISH_EEEENS0_6detail11regex_flagsESB_:
 4345|  15.5k|{
 4346|  15.5k|    static_assert(ranges::contiguous_range<Input> &&
 4347|  15.5k|                  ranges::borrowed_range<Input> &&
 4348|  15.5k|                  std::is_same_v<ranges::range_value_t<Input>, CharT>);
 4349|       |
 4350|  15.5k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 4351|  15.5k|    std::basic_regex<CharT> re{};
 4352|  15.5k|    try {
 4353|  15.5k|        SCN_TRY(re_flags, make_regex_flags(flags));
  ------------------
  |  | 3672|  15.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  15.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  15.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  15.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 15.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  15.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  15.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4354|  15.5k|        re = std::basic_regex<CharT>{pattern.data(), pattern.size(),
 4355|  15.5k|                                     re_flags | std::regex_constants::nosubs};
 4356|  15.5k|    }
 4357|  15.5k|    catch (const std::regex_error& err) {
 4358|  6.22k|        return unexpected_scan_error(scan_error::invalid_format_string,
 4359|  6.22k|                                     "Invalid regex");
 4360|  6.22k|    }
 4361|       |
 4362|  9.30k|    std::match_results<const CharT*> matches{};
 4363|  9.30k|    try {
 4364|  9.30k|        bool found = std::regex_search(input.data(),
 4365|  9.30k|                                       input.data() + input.size(), matches, re,
 4366|  9.30k|                                       std::regex_constants::match_continuous);
 4367|  9.30k|        if (!found || matches.prefix().matched) {
  ------------------
  |  Branch (4367:13): [True: 7.62k, False: 1.68k]
  |  Branch (4367:23): [True: 0, False: 1.68k]
  ------------------
 4368|  7.62k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4369|  7.62k|                                         "Regular expression didn't match");
 4370|  7.62k|        }
 4371|  9.30k|    }
 4372|  9.30k|    catch (const std::regex_error& err) {
 4373|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 4374|      0|                                     "Regex matching failed with an error");
 4375|      0|    }
 4376|       |
 4377|  1.68k|    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4378|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_BOOST
 4379|       |    auto re =
 4380|       |#if SCN_REGEX_BOOST_USE_ICU
 4381|       |        boost::make_u32regex(pattern.data(), pattern.data() + pattern.size(),
 4382|       |                             make_regex_flags(flags) |
 4383|       |                                 boost::regex_constants::no_except |
 4384|       |                                 boost::regex_constants::nosubs);
 4385|       |#else
 4386|       |        boost::basic_regex<CharT>{pattern.data(), pattern.size(),
 4387|       |                                  make_regex_flags(flags) |
 4388|       |                                      boost::regex_constants::no_except |
 4389|       |                                      boost::regex_constants::nosubs};
 4390|       |#endif
 4391|       |    if (re.status() != 0) {
 4392|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4393|       |                                     "Invalid regex");
 4394|       |    }
 4395|       |
 4396|       |    boost::match_results<const CharT*> matches{};
 4397|       |    try {
 4398|       |        bool found =
 4399|       |#if SCN_REGEX_BOOST_USE_ICU
 4400|       |            boost::u32regex_search(input.data(), input.data() + input.size(),
 4401|       |                                   matches, re,
 4402|       |                                   boost::regex_constants::match_continuous);
 4403|       |#else
 4404|       |            boost::regex_search(input.data(), input.data() + input.size(),
 4405|       |                                matches, re,
 4406|       |                                boost::regex_constants::match_continuous);
 4407|       |#endif
 4408|       |        if (!found || matches.prefix().matched) {
 4409|       |            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4410|       |                                         "Regular expression didn't match");
 4411|       |        }
 4412|       |    }
 4413|       |    catch (const std::runtime_error& err) {
 4414|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4415|       |                                     "Regex matching failed with an error");
 4416|       |    }
 4417|       |
 4418|       |    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4419|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_RE2
 4420|       |    static_assert(std::is_same_v<CharT, char>);
 4421|       |    std::string flagged_pattern{};
 4422|       |    auto re = [&]() {
 4423|       |        auto [opts, flagstr] = make_regex_flags(flags);
 4424|       |        opts.set_never_capture(true);
 4425|       |        if (flagstr.empty()) {
 4426|       |            return re2::RE2{pattern, opts};
 4427|       |        }
 4428|       |        flagged_pattern.reserve(flagstr.size() + pattern.size());
 4429|       |        flagged_pattern.append(flagstr);
 4430|       |        flagged_pattern.append(pattern);
 4431|       |        return re2::RE2{flagged_pattern, opts};
 4432|       |    }();
 4433|       |    if (!re.ok()) {
 4434|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4435|       |                                     "Failed to parse regular expression");
 4436|       |    }
 4437|       |
 4438|       |    auto new_input = detail::make_string_view_from_pointers(
 4439|       |        detail::to_address(input.begin()), detail::to_address(input.end()));
 4440|       |    bool found = re2::RE2::Consume(&new_input, re);
 4441|       |    if (!found) {
 4442|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4443|       |                                     "Regular expression didn't match");
 4444|       |    }
 4445|       |    return input.begin() + ranges::distance(input.data(), new_input.data());
 4446|       |#endif  // SCN_REGEX_BACKEND == ...
 4447|  9.30k|}
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEwEEDav:
 5808|  25.7k|{
 5809|  25.7k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  25.7k|        return reader_impl_for_bool<CharT>{};
 5811|  25.7k|    }
 5812|  25.7k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  25.7k|        return reader_impl_for_char<CharT>{};
 5814|  25.7k|    }
 5815|  25.7k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  25.7k|        return reader_impl_for_wchar<CharT>{};
 5817|  25.7k|    }
 5818|  25.7k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  25.7k|        return reader_impl_for_code_point<CharT>{};
 5820|  25.7k|    }
 5821|  25.7k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  25.7k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  25.7k|        return reader_impl_for_string<CharT>{};
 5824|  25.7k|    }
 5825|  25.7k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5825:24): [Folded - Ignored]
  |  Branch (5825:24): [Folded - Ignored]
  ------------------
 5826|  25.7k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  25.7k|        return reader_impl_for_string<CharT>{};
 5828|  25.7k|    }
 5829|  25.7k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  25.7k|                       std::is_same_v<T, wregex_matches>) {
 5831|  25.7k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  25.7k|    }
 5833|  25.7k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  25.7k|        return reader_impl_for_voidptr<CharT>{};
 5835|  25.7k|    }
 5836|  25.7k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  25.7k|        return reader_impl_for_float<CharT>{};
 5838|  25.7k|    }
 5839|  25.7k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  25.7k|                       !std::is_same_v<T, wchar_t> &&
 5841|  25.7k|                       !std::is_same_v<T, char32_t> &&
 5842|  25.7k|                       !std::is_same_v<T, bool>) {
 5843|  25.7k|        return reader_impl_for_int<CharT>{};
 5844|  25.7k|    }
 5845|  25.7k|    else {
 5846|  25.7k|        return reader_impl_for_monostate<CharT>{};
 5847|  25.7k|    }
 5848|  25.7k|}
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|     96|{
 2993|     96|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|     96|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2994:13): [True: 96, False: 0]
  ------------------
 2995|     96|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|     96|    static_cast<    \
  |  |  929|     96|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2996|     96|        }
 2997|      0|        else {
 2998|      0|            dest.assign(source.view());
 2999|      0|        }
 3000|     96|    }
 3001|     96|    else {
 3002|     96|        return transcode_impl(source.view(), dest);
 3003|     96|    }
 3004|       |
 3005|     96|    return {};
 3006|     96|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5276|    230|    {
 5277|    230|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    230|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|    230|        return read_impl(range, specs, value);
 5279|    230|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5294|    230|    {
 5295|    230|        SCN_CLANG_PUSH
 5296|    230|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|    230|        switch (m_type) {
 5299|    162|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 162, False: 68]
  ------------------
 5300|    162|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     30|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 30, False: 200]
  ------------------
 5303|     30|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     30|                                                                   value);
 5305|       |
 5306|     22|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 22, False: 208]
  ------------------
 5307|     22|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|      0|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 0, False: 230]
  ------------------
 5310|      0|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|      0|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|     10|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 10, False: 220]
  ------------------
 5315|     10|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|     10|                    range, specs.charset_string<SourceCharT>(),
 5317|     10|                    specs.regexp_flags, value);
 5318|       |
 5319|      6|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 6, False: 224]
  ------------------
 5320|      6|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      6|                    range,
 5322|      6|                    get_unescaped_regex_pattern(
 5323|      6|                        specs.charset_string<SourceCharT>()),
 5324|      6|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 230]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|    230|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|    230|        }
 5331|       |
 5332|    230|        SCN_CLANG_POP
 5333|    230|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4819|    162|    {
 4820|    162|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    162|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4751|    214|{
 4752|    214|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    214|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    214|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 118, False: 96]
  ------------------
 4756|    118|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    118|                                     "Invalid encoding in scanned string");
 4758|    118|    }
 4759|     96|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|     96|    static_cast<    \
  |  |  929|     96|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|     96|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     96|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 96]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|     96|    return SCN_MOVE(result);
  ------------------
  |  |  928|     96|    static_cast<    \
  |  |  929|     96|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|     96|}
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4840|     30|    {
 4841|     30|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 30, False: 0]
  ------------------
 4842|     30|            return read_string_impl(
 4843|     30|                range,
 4844|     30|                read_until_code_unit(
 4845|     30|                    range,
 4846|     30|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     30|                        SourceCharT ch) { return ch == until; }),
 4848|     30|                value);
 4849|     30|        }
 4850|      0|        return read_string_impl(
 4851|      0|            range,
 4852|      0|            read_until_code_units(
 4853|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|      0|            value);
 4855|     30|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_LPv0EEEOSL_:
  753|     30|    {
  754|     30|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES18_w:
  743|    340|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    340|              cvref<T> obj = *get<T>(fn);
  745|    340|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    340|                  obj(static_cast<decltype(args)>(args)...);
  747|    340|              }
  748|    340|              else {
  749|    340|                  return obj(static_cast<decltype(args)>(args)...);
  750|    340|              }
  751|    340|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlwE_EEDaNS3_7storageE:
  683|    340|    {
  684|    340|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    340|            return static_cast<T*>(s.m_cp);
  686|    340|        }
  687|    340|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    340|            return static_cast<T*>(s.m_p);
  689|    340|        }
  690|    340|        else {
  691|    340|            return reinterpret_cast<T*>(s.m_fp);
  692|    340|        }
  693|    340|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlwE_clEw:
 4847|    340|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_LPv0EEEPSL_:
  661|     30|        {
  662|     30|        }
_ZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4946|     22|    {
 4947|     22|        return read_impl(
 4948|     22|            range,
 4949|     22|            [&](const auto& rng) {
 4950|     22|                return read_string_impl(rng, read_all(rng), value);
 4951|     22|            },
 4952|     22|            detail::priority_tag<1>{});
 4953|     22|    }
_ZN3scn2v34impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     22|    {
 4974|     22|        return read_cb(range);
 4975|     22|    }
_ZZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4949|     22|            [&](const auto& rng) {
 4950|     22|                return read_string_impl(rng, read_all(rng), value);
 4951|     22|            },
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4890|     16|    {
 4891|     16|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 16, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     16|    }                                                  \
  |  |  |  | 3671|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|      0|        return read_string_impl(range, it, value);
 4893|     16|    }
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  5.86k|    {
 5277|  5.86k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  5.86k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  5.86k|        return read_impl(range, specs, value);
 5279|  5.86k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  5.86k|    {
 5295|  5.86k|        SCN_CLANG_PUSH
 5296|  5.86k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  5.86k|        switch (m_type) {
 5299|    372|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 372, False: 5.49k]
  ------------------
 5300|    372|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     32|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 32, False: 5.83k]
  ------------------
 5303|     32|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     32|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 5.86k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    284|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 284, False: 5.58k]
  ------------------
 5310|    284|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    284|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  5.06k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 5.06k, False: 796]
  ------------------
 5315|  5.06k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  5.06k|                    range, specs.charset_string<SourceCharT>(),
 5317|  5.06k|                    specs.regexp_flags, value);
 5318|       |
 5319|    108|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 108, False: 5.75k]
  ------------------
 5320|    108|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    108|                    range,
 5322|    108|                    get_unescaped_regex_pattern(
 5323|    108|                        specs.charset_string<SourceCharT>()),
 5324|    108|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 5.86k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  5.86k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  5.86k|        }
 5331|       |
 5332|  5.86k|        SCN_CLANG_POP
 5333|  5.86k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|  19.9k|    {
 4820|  19.9k|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|  19.9k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|  19.9k|{
 4752|  19.9k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  19.9k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  19.9k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 324, False: 19.6k]
  ------------------
 4756|    324|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    324|                                     "Invalid encoding in scanned string");
 4758|    324|    }
 4759|  19.6k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  19.6k|    static_cast<    \
  |  |  929|  19.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|  19.6k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  19.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 19.6k]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|  19.6k|    return SCN_MOVE(result);
  ------------------
  |  |  928|  19.6k|    static_cast<    \
  |  |  929|  19.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|  19.6k|}
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|  20.1k|{
 3012|  20.1k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|  20.1k|        dest.assign(source.view());
 3014|  20.1k|    }
 3015|  20.1k|    else {
 3016|  20.1k|        return transcode_impl(source.view(), dest);
 3017|  20.1k|    }
 3018|       |
 3019|  20.1k|    return {};
 3020|  20.1k|}
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4840|     32|    {
 4841|     32|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 32, False: 0]
  ------------------
 4842|     32|            return read_string_impl(
 4843|     32|                range,
 4844|     32|                read_until_code_unit(
 4845|     32|                    range,
 4846|     32|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     32|                        SourceCharT ch) { return ch == until; }),
 4848|     32|                value);
 4849|     32|        }
 4850|      0|        return read_string_impl(
 4851|      0|            range,
 4852|      0|            read_until_code_units(
 4853|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|      0|            value);
 4855|     32|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_LPv0EEEOSJ_:
  753|     32|    {
  754|     32|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  743|    678|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    678|              cvref<T> obj = *get<T>(fn);
  745|    678|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    678|                  obj(static_cast<decltype(args)>(args)...);
  747|    678|              }
  748|    678|              else {
  749|    678|                  return obj(static_cast<decltype(args)>(args)...);
  750|    678|              }
  751|    678|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    678|    {
  684|    678|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    678|            return static_cast<T*>(s.m_cp);
  686|    678|        }
  687|    678|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    678|            return static_cast<T*>(s.m_p);
  689|    678|        }
  690|    678|        else {
  691|    678|            return reinterpret_cast<T*>(s.m_fp);
  692|    678|        }
  693|    678|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlwE_clEw:
 4847|    678|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_LPv0EEEPSJ_:
  661|     32|        {
  662|     32|        }
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5047|    284|    {
 5048|    284|        auto it = read_source_impl(range, {specs});
 5049|    284|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    284|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 46, False: 238]
  |  |  ------------------
  ------------------
 5050|     46|            return unexpected(it.error());
 5051|     46|        }
 5052|       |
 5053|    238|        return read_string_impl(range, *it, value);
 5054|    284|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4751|    798|{
 4752|    798|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    798|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    798|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 302, False: 496]
  ------------------
 4756|    302|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    302|                                     "Invalid encoding in scanned string");
 4758|    302|    }
 4759|    496|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    496|    static_cast<    \
  |  |  929|    496|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    496|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    496|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 496]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    496|    return SCN_MOVE(result);
  ------------------
  |  |  928|    496|    static_cast<    \
  |  |  929|    496|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    496|}
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4890|  5.17k|    {
 4891|  5.17k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|  5.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  5.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  5.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  5.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.61k, False: 560]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.61k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.61k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.61k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.61k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.61k|    }                                                  \
  |  |  |  | 3671|  5.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    560|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|    560|        return read_string_impl(range, it, value);
 4893|  5.17k|    }
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEEDav:
 5808|  25.7k|{
 5809|  25.7k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  25.7k|        return reader_impl_for_bool<CharT>{};
 5811|  25.7k|    }
 5812|  25.7k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  25.7k|        return reader_impl_for_char<CharT>{};
 5814|  25.7k|    }
 5815|  25.7k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  25.7k|        return reader_impl_for_wchar<CharT>{};
 5817|  25.7k|    }
 5818|  25.7k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  25.7k|        return reader_impl_for_code_point<CharT>{};
 5820|  25.7k|    }
 5821|  25.7k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  25.7k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  25.7k|        return reader_impl_for_string<CharT>{};
 5824|  25.7k|    }
 5825|  25.7k|    else if constexpr (std::is_same_v<T, std::string> ||
 5826|  25.7k|                       std::is_same_v<T, std::wstring>) {
 5827|  25.7k|        return reader_impl_for_string<CharT>{};
 5828|  25.7k|    }
 5829|  25.7k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  25.7k|                       std::is_same_v<T, wregex_matches>) {
 5831|  25.7k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  25.7k|    }
 5833|  25.7k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  25.7k|        return reader_impl_for_voidptr<CharT>{};
 5835|  25.7k|    }
 5836|  25.7k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  25.7k|        return reader_impl_for_float<CharT>{};
 5838|  25.7k|    }
 5839|  25.7k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  25.7k|                       !std::is_same_v<T, wchar_t> &&
 5841|  25.7k|                       !std::is_same_v<T, char32_t> &&
 5842|  25.7k|                       !std::is_same_v<T, bool>) {
 5843|  25.7k|        return reader_impl_for_int<CharT>{};
 5844|  25.7k|    }
 5845|  25.7k|    else {
 5846|  25.7k|        return reader_impl_for_monostate<CharT>{};
 5847|  25.7k|    }
 5848|  25.7k|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|    230|    {
 5277|    230|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    230|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|    230|        return read_impl(range, specs, value);
 5279|    230|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|    230|    {
 5295|    230|        SCN_CLANG_PUSH
 5296|    230|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|    230|        switch (m_type) {
 5299|    162|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 162, False: 68]
  ------------------
 5300|    162|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     30|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 30, False: 200]
  ------------------
 5303|     30|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     30|                                                                   value);
 5305|       |
 5306|     22|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 22, False: 208]
  ------------------
 5307|     22|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|      0|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 0, False: 230]
  ------------------
 5310|      0|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|      0|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|     10|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 10, False: 220]
  ------------------
 5315|     10|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|     10|                    range, specs.charset_string<SourceCharT>(),
 5317|     10|                    specs.regexp_flags, value);
 5318|       |
 5319|      6|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 6, False: 224]
  ------------------
 5320|      6|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      6|                    range,
 5322|      6|                    get_unescaped_regex_pattern(
 5323|      6|                        specs.charset_string<SourceCharT>()),
 5324|      6|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 230]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|    230|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|    230|        }
 5331|       |
 5332|    230|        SCN_CLANG_POP
 5333|    230|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4826|    162|    {
 4827|    162|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|    162|                                     value);
 4829|    162|    }
_ZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEE:
 4772|    214|{
 4773|    214|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    214|    auto src = [&]() {
 4776|    214|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    214|            return make_contiguous_buffer(
 4778|    214|                ranges::subrange{range.begin().base(), result.base()});
 4779|    214|        }
 4780|    214|        else {
 4781|    214|            return make_contiguous_buffer(
 4782|    214|                ranges::subrange{range.begin(), result});
 4783|    214|        }
 4784|    214|    }();
 4785|    214|    using src_type = decltype(src);
 4786|       |
 4787|    214|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|    214|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|    214|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|    214|                                     "Cannot read a string_view from "
 4796|    214|                                     "this source range (would require "
 4797|    214|                                     "transcoding)");
 4798|    214|    }
 4799|    214|    else {
 4800|    214|        const auto view = src.view();
 4801|    214|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    214|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 118, False: 96]
  ------------------
 4804|    118|            return unexpected_scan_error(
 4805|    118|                scan_error::invalid_scanned_value,
 4806|    118|                "Invalid encoding in scanned string_view");
 4807|    118|        }
 4808|       |
 4809|     96|        return SCN_MOVE(result);
  ------------------
  |  |  928|     96|    static_cast<    \
  |  |  929|     96|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    214|    }
 4811|    214|}
_ZZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEEENKUlvE_clEv:
 4775|    214|    auto src = [&]() {
 4776|    214|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|    214|            return make_contiguous_buffer(
 4778|    214|                ranges::subrange{range.begin().base(), result.base()});
 4779|    214|        }
 4780|    214|        else {
 4781|    214|            return make_contiguous_buffer(
 4782|    214|                ranges::subrange{range.begin(), result});
 4783|    214|        }
 4784|    214|    }();
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 4862|     30|    {
 4863|     30|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4863:13): [True: 30, False: 0]
  ------------------
 4864|     30|            return read_string_view_impl(
 4865|     30|                range,
 4866|     30|                read_until_code_unit(
 4867|     30|                    range,
 4868|     30|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4869|     30|                        SourceCharT ch) { return ch == until; }),
 4870|     30|                value);
 4871|     30|        }
 4872|      0|        return read_string_view_impl(
 4873|      0|            range,
 4874|      0|            read_until_code_units(
 4875|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4876|      0|            value);
 4877|     30|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlwE_S11_LPv0EEEOSL_:
  753|     30|    {
  754|     30|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlwE_S11_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  743|    340|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    340|              cvref<T> obj = *get<T>(fn);
  745|    340|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    340|                  obj(static_cast<decltype(args)>(args)...);
  747|    340|              }
  748|    340|              else {
  749|    340|                  return obj(static_cast<decltype(args)>(args)...);
  750|    340|              }
  751|    340|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_17basic_string_viewIT0_NSI_11char_traitsISV_EEEEEUlwE_EEDaNS3_7storageE:
  683|    340|    {
  684|    340|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    340|            return static_cast<T*>(s.m_cp);
  686|    340|        }
  687|    340|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    340|            return static_cast<T*>(s.m_p);
  689|    340|        }
  690|    340|        else {
  691|    340|            return reinterpret_cast<T*>(s.m_fp);
  692|    340|        }
  693|    340|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEEENKUlwE_clEw:
 4869|    340|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlwE_LPv0EEEPSL_:
  661|     30|        {
  662|     30|        }
_ZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4958|     22|    {
 4959|     22|        return read_impl(
 4960|     22|            range,
 4961|     22|            [&](const auto& rng) {
 4962|     22|                return read_string_view_impl(rng, read_all(rng), value);
 4963|     22|            },
 4964|     22|            detail::priority_tag<1>{});
 4965|     22|    }
_ZN3scn2v34impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_17basic_string_viewIT0_NSG_11char_traitsISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSX_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     22|    {
 4974|     22|        return read_cb(range);
 4975|     22|    }
_ZZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEEENKUlRKSH_E_clISD_EEDaSU_:
 4961|     22|            [&](const auto& rng) {
 4962|     22|                return read_string_view_impl(rng, read_all(rng), value);
 4963|     22|            },
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsERNSN_IT0_NSO_IST_EEEE:
 4901|     16|    {
 4902|     16|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 16, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     16|    }                                                  \
  |  |  |  | 3671|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4903|      0|        return read_string_view_impl(range, it, value);
 4904|     16|    }
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5276|  5.86k|    {
 5277|  5.86k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  5.86k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  5.86k|        return read_impl(range, specs, value);
 5279|  5.86k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5294|  5.86k|    {
 5295|  5.86k|        SCN_CLANG_PUSH
 5296|  5.86k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  5.86k|        switch (m_type) {
 5299|    372|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 372, False: 5.49k]
  ------------------
 5300|    372|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     32|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 32, False: 5.83k]
  ------------------
 5303|     32|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     32|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 5.86k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    284|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 284, False: 5.58k]
  ------------------
 5310|    284|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    284|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  5.06k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 5.06k, False: 796]
  ------------------
 5315|  5.06k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  5.06k|                    range, specs.charset_string<SourceCharT>(),
 5317|  5.06k|                    specs.regexp_flags, value);
 5318|       |
 5319|    108|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 108, False: 5.75k]
  ------------------
 5320|    108|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    108|                    range,
 5322|    108|                    get_unescaped_regex_pattern(
 5323|    108|                        specs.charset_string<SourceCharT>()),
 5324|    108|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 5.86k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  5.86k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  5.86k|        }
 5331|       |
 5332|  5.86k|        SCN_CLANG_POP
 5333|  5.86k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4826|  19.9k|    {
 4827|  19.9k|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|  19.9k|                                     value);
 4829|  19.9k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4772|  19.9k|{
 4773|  19.9k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|  19.9k|    auto src = [&]() {
 4776|  19.9k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|  19.9k|            return make_contiguous_buffer(
 4778|  19.9k|                ranges::subrange{range.begin().base(), result.base()});
 4779|  19.9k|        }
 4780|  19.9k|        else {
 4781|  19.9k|            return make_contiguous_buffer(
 4782|  19.9k|                ranges::subrange{range.begin(), result});
 4783|  19.9k|        }
 4784|  19.9k|    }();
 4785|  19.9k|    using src_type = decltype(src);
 4786|       |
 4787|  19.9k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|  19.9k|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|  19.9k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|  19.9k|                                     "Cannot read a string_view from "
 4796|  19.9k|                                     "this source range (would require "
 4797|  19.9k|                                     "transcoding)");
 4798|  19.9k|    }
 4799|  19.9k|    else {
 4800|  19.9k|        const auto view = src.view();
 4801|  19.9k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|  19.9k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 324, False: 19.6k]
  ------------------
 4804|    324|            return unexpected_scan_error(
 4805|    324|                scan_error::invalid_scanned_value,
 4806|    324|                "Invalid encoding in scanned string_view");
 4807|    324|        }
 4808|       |
 4809|  19.6k|        return SCN_MOVE(result);
  ------------------
  |  |  928|  19.6k|    static_cast<    \
  |  |  929|  19.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|  19.9k|    }
 4811|  19.9k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4775|  19.9k|    auto src = [&]() {
 4776|  19.9k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|  19.9k|            return make_contiguous_buffer(
 4778|  19.9k|                ranges::subrange{range.begin().base(), result.base()});
 4779|  19.9k|        }
 4780|  19.9k|        else {
 4781|  19.9k|            return make_contiguous_buffer(
 4782|  19.9k|                ranges::subrange{range.begin(), result});
 4783|  19.9k|        }
 4784|  19.9k|    }();
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 4862|     32|    {
 4863|     32|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4863:13): [True: 32, False: 0]
  ------------------
 4864|     32|            return read_string_view_impl(
 4865|     32|                range,
 4866|     32|                read_until_code_unit(
 4867|     32|                    range,
 4868|     32|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4869|     32|                        SourceCharT ch) { return ch == until; }),
 4870|     32|                value);
 4871|     32|        }
 4872|      0|        return read_string_view_impl(
 4873|      0|            range,
 4874|      0|            read_until_code_units(
 4875|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4876|      0|            value);
 4877|     32|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_SZ_LPv0EEEOSJ_:
  753|     32|    {
  754|     32|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_SZ_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES14_w:
  743|    678|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    678|              cvref<T> obj = *get<T>(fn);
  745|    678|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    678|                  obj(static_cast<decltype(args)>(args)...);
  747|    678|              }
  748|    678|              else {
  749|    678|                  return obj(static_cast<decltype(args)>(args)...);
  750|    678|              }
  751|    678|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_17basic_string_viewIT0_NSG_11char_traitsIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    678|    {
  684|    678|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    678|            return static_cast<T*>(s.m_cp);
  686|    678|        }
  687|    678|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    678|            return static_cast<T*>(s.m_p);
  689|    678|        }
  690|    678|        else {
  691|    678|            return reinterpret_cast<T*>(s.m_fp);
  692|    678|        }
  693|    678|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEEENKUlwE_clEw:
 4869|    678|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_LPv0EEEPSJ_:
  661|     32|        {
  662|     32|        }
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5061|    284|    {
 5062|    284|        auto it = read_source_impl(range, {specs});
 5063|    284|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    284|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 46, False: 238]
  |  |  ------------------
  ------------------
 5064|     46|            return unexpected(it.error());
 5065|     46|        }
 5066|       |
 5067|    238|        return read_string_view_impl(range, *it, value);
 5068|    284|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4772|    798|{
 4773|    798|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    798|    auto src = [&]() {
 4776|    798|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    798|            return make_contiguous_buffer(
 4778|    798|                ranges::subrange{range.begin().base(), result.base()});
 4779|    798|        }
 4780|    798|        else {
 4781|    798|            return make_contiguous_buffer(
 4782|    798|                ranges::subrange{range.begin(), result});
 4783|    798|        }
 4784|    798|    }();
 4785|    798|    using src_type = decltype(src);
 4786|       |
 4787|    798|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|    798|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|    798|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|    798|                                     "Cannot read a string_view from "
 4796|    798|                                     "this source range (would require "
 4797|    798|                                     "transcoding)");
 4798|    798|    }
 4799|    798|    else {
 4800|    798|        const auto view = src.view();
 4801|    798|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    798|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 302, False: 496]
  ------------------
 4804|    302|            return unexpected_scan_error(
 4805|    302|                scan_error::invalid_scanned_value,
 4806|    302|                "Invalid encoding in scanned string_view");
 4807|    302|        }
 4808|       |
 4809|    496|        return SCN_MOVE(result);
  ------------------
  |  |  928|    496|    static_cast<    \
  |  |  929|    496|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    798|    }
 4811|    798|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4775|    798|    auto src = [&]() {
 4776|    798|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|    798|            return make_contiguous_buffer(
 4778|    798|                ranges::subrange{range.begin().base(), result.base()});
 4779|    798|        }
 4780|    798|        else {
 4781|    798|            return make_contiguous_buffer(
 4782|    798|                ranges::subrange{range.begin(), result});
 4783|    798|        }
 4784|    798|    }();
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsERNSL_IT0_NSM_ISR_EEEE:
 4901|  5.17k|    {
 4902|  5.17k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|  5.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  5.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  5.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  5.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.61k, False: 560]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.61k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.61k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.61k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.61k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.61k|    }                                                  \
  |  |  |  | 3671|  5.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    560|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4903|    560|        return read_string_view_impl(range, it, value);
 4904|  5.17k|    }
_ZN3scn2v34impl22make_contiguous_bufferIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 1682|  7.78k|{
 1683|  7.78k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  7.78k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  7.78k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  7.78k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  7.78k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  7.78k|    }
 1688|  7.78k|    else {
 1689|  7.78k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  7.78k|    }
 1691|  7.78k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEELPv0EEEOT_:
 1489|  7.78k|    {
 1490|  7.78k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIdEET_S5_:
 4099|    972|    {
 4100|    972|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 0, False: 972]
  ------------------
 4101|      0|            return std::copysign(value, T{-1.0});
 4102|      0|        }
 4103|    972|        return std::copysign(value, T{1.0});
 4104|    972|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIdEET_S5_:
 4099|  19.9k|    {
 4100|  19.9k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 0, False: 19.9k]
  ------------------
 4101|      0|            return std::copysign(value, T{-1.0});
 4102|      0|        }
 4103|  19.9k|        return std::copysign(value, T{1.0});
 4104|  19.9k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|  6.35k|{
 5795|  6.35k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.35k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.35k]
  |  |  ------------------
  ------------------
 5796|      0|        return unexpected(e);
 5797|      0|    }
 5798|       |
 5799|  6.35k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 706, False: 5.64k]
  ------------------
 5800|    706|        return range.begin();
 5801|    706|    }
 5802|       |
 5803|  5.64k|    return skip_classic_whitespace(range);
 5804|  6.35k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
 5870|    706|    {
 5871|    706|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    706|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    706|                          basic_contiguous_scan_context<char_type>>) {
 5875|    706|            auto rd = make_reader<T, char_type>();
 5876|    706|            return impl(rd, range, value);
 5877|    706|        }
 5878|    706|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    706|            auto rd = make_reader<T, char_type>();
 5880|    706|            if (!is_segment_contiguous(range)) {
 5881|    706|                return impl(rd, range, value);
 5882|    706|            }
 5883|    706|            auto crange = get_as_contiguous(range);
 5884|    706|            SCN_TRY(it, impl(rd, crange, value));
 5885|    706|            return ranges::next(range.begin(),
 5886|    706|                                ranges::distance(crange.begin(), it));
 5887|    706|        }
 5888|    706|        else {
 5889|    706|            SCN_EXPECT(false);
 5890|    706|            SCN_UNREACHABLE;
 5891|    706|        }
 5892|    706|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    706|    {
 5863|    706|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    706|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    706|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    706|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    706|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 706]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    706|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    706|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    706|                        .transform_error(make_eof_scan_error));
 5865|    706|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    706|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|    706|    {
 3528|    706|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    706|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|    706|        return read_default_with_base(range, value, 10);
 3530|    706|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
 5870|    706|    {
 5871|    706|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    706|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    706|                          basic_contiguous_scan_context<char_type>>) {
 5875|    706|            auto rd = make_reader<T, char_type>();
 5876|    706|            return impl(rd, range, value);
 5877|    706|        }
 5878|    706|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    706|            auto rd = make_reader<T, char_type>();
 5880|    706|            if (!is_segment_contiguous(range)) {
 5881|    706|                return impl(rd, range, value);
 5882|    706|            }
 5883|    706|            auto crange = get_as_contiguous(range);
 5884|    706|            SCN_TRY(it, impl(rd, crange, value));
 5885|    706|            return ranges::next(range.begin(),
 5886|    706|                                ranges::distance(crange.begin(), it));
 5887|    706|        }
 5888|    706|        else {
 5889|    706|            SCN_EXPECT(false);
 5890|    706|            SCN_UNREACHABLE;
 5891|    706|        }
 5892|    706|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    706|    {
 5863|    706|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    706|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    706|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    706|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    706|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 706]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    706|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    706|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    706|                        .transform_error(make_eof_scan_error));
 5865|    706|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    706|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|    706|    {
 3528|    706|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    706|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|    706|        return read_default_with_base(range, value, 10);
 3530|    706|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIPvEENS0_13scan_expectedIPKcEERT_:
 5870|    706|    {
 5871|    706|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    706|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    706|                          basic_contiguous_scan_context<char_type>>) {
 5875|    706|            auto rd = make_reader<T, char_type>();
 5876|    706|            return impl(rd, range, value);
 5877|    706|        }
 5878|    706|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    706|            auto rd = make_reader<T, char_type>();
 5880|    706|            if (!is_segment_contiguous(range)) {
 5881|    706|                return impl(rd, range, value);
 5882|    706|            }
 5883|    706|            auto crange = get_as_contiguous(range);
 5884|    706|            SCN_TRY(it, impl(rd, crange, value));
 5885|    706|            return ranges::next(range.begin(),
 5886|    706|                                ranges::distance(crange.begin(), it));
 5887|    706|        }
 5888|    706|        else {
 5889|    706|            SCN_EXPECT(false);
 5890|    706|            SCN_UNREACHABLE;
 5891|    706|        }
 5892|    706|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_23reader_impl_for_voidptrIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 5862|    706|    {
 5863|    706|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    706|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    706|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    706|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    706|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 706]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    706|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    706|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    706|                        .transform_error(make_eof_scan_error));
 5865|    706|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    706|    }
_ZNK3scn2v34impl23reader_impl_for_voidptrIcE19skip_ws_before_readEv:
 5747|  1.28k|    {
 5748|  1.28k|        return true;
 5749|  1.28k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RPvNS0_6detail10locale_refE:
 5764|    934|    {
 5765|    934|        detail::format_specs specs{};
 5766|    934|        specs.type = detail::presentation_type::int_hex;
 5767|       |
 5768|    934|        std::uintptr_t intvalue{};
 5769|    934|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3672|    934|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    934|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    934|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    934|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 934, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    934|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    934|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    934|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    934|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    934|    }                                                  \
  |  |  |  | 3671|    934|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5770|      0|                                                                intvalue, loc));
 5771|      0|        value = reinterpret_cast<void*>(intvalue);
 5772|      0|        return result;
 5773|    934|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIbEENS0_13scan_expectedIPKcEERT_:
 5870|    706|    {
 5871|    706|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    706|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    706|                          basic_contiguous_scan_context<char_type>>) {
 5875|    706|            auto rd = make_reader<T, char_type>();
 5876|    706|            return impl(rd, range, value);
 5877|    706|        }
 5878|    706|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    706|            auto rd = make_reader<T, char_type>();
 5880|    706|            if (!is_segment_contiguous(range)) {
 5881|    706|                return impl(rd, range, value);
 5882|    706|            }
 5883|    706|            auto crange = get_as_contiguous(range);
 5884|    706|            SCN_TRY(it, impl(rd, crange, value));
 5885|    706|            return ranges::next(range.begin(),
 5886|    706|                                ranges::distance(crange.begin(), it));
 5887|    706|        }
 5888|    706|        else {
 5889|    706|            SCN_EXPECT(false);
 5890|    706|            SCN_UNREACHABLE;
 5891|    706|        }
 5892|    706|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_boolIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    706|    {
 5863|    706|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    706|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    706|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    706|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    706|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 706]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    706|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    706|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    706|                        .transform_error(make_eof_scan_error));
 5865|    706|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    706|    }
_ZNK3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIcEEcE19skip_ws_before_readEv:
 3034|  1.54k|    {
 3035|  1.54k|        return true;
 3036|  1.54k|    }
_ZNK3scn2v34impl20reader_impl_for_boolIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNS0_6detail10locale_refE:
 5503|    706|    {
 5504|    706|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    706|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5505|       |
 5506|    706|        return bool_reader<CharT>{}.read_classic(range, value);
 5507|    706|    }
_ZN3scn2v34impl16bool_reader_baseC2Ev:
 5348|  20.2k|    constexpr bool_reader_base() = default;
_ZNK3scn2v34impl16bool_reader_base12read_classicINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5354|  1.06k|    {
 5355|  1.06k|        scan_error err{scan_error::invalid_scanned_value,
 5356|  1.06k|                       "Failed to read boolean"};
 5357|       |
 5358|  1.06k|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5358:13): [True: 950, False: 110]
  ------------------
 5359|    950|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5359:22): [True: 0, False: 950]
  ------------------
 5360|      0|                return *r;
 5361|      0|            }
 5362|    950|            else {
 5363|    950|                err = r.error();
 5364|    950|            }
 5365|    950|        }
 5366|       |
 5367|  1.06k|        if (m_options & allow_text) {
  ------------------
  |  Branch (5367:13): [True: 1.04k, False: 20]
  ------------------
 5368|  1.04k|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5368:22): [True: 0, False: 1.04k]
  ------------------
 5369|      0|                return *r;
 5370|      0|            }
 5371|  1.04k|            else {
 5372|  1.04k|                err = r.error();
 5373|  1.04k|            }
 5374|  1.04k|        }
 5375|       |
 5376|  1.06k|        return unexpected(err);
 5377|  1.06k|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5383|    972|    {
 5384|    972|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5384:18): [True: 0, False: 972]
  ------------------
 5385|      0|            value = false;
 5386|      0|            return *r;
 5387|      0|        }
 5388|    972|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5388:18): [True: 0, False: 972]
  ------------------
 5389|      0|            value = true;
 5390|      0|            return *r;
 5391|      0|        }
 5392|       |
 5393|    972|        return unexpected_scan_error(
 5394|    972|            scan_error::invalid_scanned_value,
 5395|    972|            "Failed to read numeric boolean value: No match");
 5396|    972|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5401|  1.04k|    {
 5402|  1.04k|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5402:18): [True: 0, False: 1.04k]
  ------------------
 5403|      0|            value = true;
 5404|      0|            return *r;
 5405|      0|        }
 5406|  1.04k|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5406:18): [True: 0, False: 1.04k]
  ------------------
 5407|      0|            value = false;
 5408|      0|            return *r;
 5409|      0|        }
 5410|       |
 5411|  1.04k|        return unexpected_scan_error(
 5412|  1.04k|            scan_error::invalid_scanned_value,
 5413|  1.04k|            "Failed to read textual boolean value: No match");
 5414|  1.04k|    }
_ZN3scn2v34impl28read_matching_string_classicINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2193|  2.08k|{
 2194|  2.08k|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  2.08k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.08k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.08k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 100, False: 1.98k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    100|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    100|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    100|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    100|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    100|    }                                                  \
  |  |  |  | 3671|  2.08k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.98k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2195|  1.98k|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2196|  1.98k|                    .transform_error(make_eof_parse_error));
 2197|       |
 2198|  1.98k|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2198:19): [Folded - Ignored]
  ------------------
 2199|  1.98k|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2200|  1.98k|        if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|  1.98k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.98k, False: 0]
  |  |  ------------------
  ------------------
 2201|  1.98k|            return unexpected(parse_error::error);
 2202|  1.98k|        }
 2203|      0|        return it;
 2204|  1.98k|    }
 2205|  1.98k|    else {
 2206|  1.98k|        auto range_it = range.begin();
 2207|  1.98k|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
 2208|  1.98k|            if (SCN_UNLIKELY(*range_it !=
 2209|  1.98k|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2210|  1.98k|                return unexpected(parse_error::error);
 2211|  1.98k|            }
 2212|  1.98k|        }
 2213|  1.98k|        return it;
 2214|  1.98k|    }
 2215|  1.98k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIcEENS0_13scan_expectedIPKcEERT_:
 5870|    706|    {
 5871|    706|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    706|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    706|                          basic_contiguous_scan_context<char_type>>) {
 5875|    706|            auto rd = make_reader<T, char_type>();
 5876|    706|            return impl(rd, range, value);
 5877|    706|        }
 5878|    706|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    706|            auto rd = make_reader<T, char_type>();
 5880|    706|            if (!is_segment_contiguous(range)) {
 5881|    706|                return impl(rd, range, value);
 5882|    706|            }
 5883|    706|            auto crange = get_as_contiguous(range);
 5884|    706|            SCN_TRY(it, impl(rd, crange, value));
 5885|    706|            return ranges::next(range.begin(),
 5886|    706|                                ranges::distance(crange.begin(), it));
 5887|    706|        }
 5888|    706|        else {
 5889|    706|            SCN_EXPECT(false);
 5890|    706|            SCN_UNREACHABLE;
 5891|    706|        }
 5892|    706|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_charIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    706|    {
 5863|    706|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    706|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    706|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    706|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    706|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 706]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    706|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    706|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    706|                        .transform_error(make_eof_scan_error));
 5865|    706|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    706|    }
_ZN3scn2v34impl12float_readerIcEC2Ev:
 3657|    706|    constexpr float_reader() = default;
_ZN3scn2v34impl17float_reader_baseC2Ev:
 3643|  20.2k|    constexpr float_reader_base() = default;
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 5870|    706|    {
 5871|    706|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    706|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    706|                          basic_contiguous_scan_context<char_type>>) {
 5875|    706|            auto rd = make_reader<T, char_type>();
 5876|    706|            return impl(rd, range, value);
 5877|    706|        }
 5878|    706|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    706|            auto rd = make_reader<T, char_type>();
 5880|    706|            if (!is_segment_contiguous(range)) {
 5881|    706|                return impl(rd, range, value);
 5882|    706|            }
 5883|    706|            auto crange = get_as_contiguous(range);
 5884|    706|            SCN_TRY(it, impl(rd, crange, value));
 5885|    706|            return ranges::next(range.begin(),
 5886|    706|                                ranges::distance(crange.begin(), it));
 5887|    706|        }
 5888|    706|        else {
 5889|    706|            SCN_EXPECT(false);
 5890|    706|            SCN_UNREACHABLE;
 5891|    706|        }
 5892|    706|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    706|    {
 5863|    706|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    706|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    706|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    706|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    706|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 706]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    706|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    706|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    706|                        .transform_error(make_eof_scan_error));
 5865|    706|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    706|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|    706|    {
 4152|    706|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    706|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|    706|        float_reader<CharT> rd{};
 4155|    706|        return read_impl<Range>(
 4156|    706|            range, rd,
 4157|    706|            [](float_reader<CharT>& r, auto&&... args) {
 4158|    706|                return r.read_source(SCN_FWD(args)...);
 4159|    706|            },
 4160|    706|            value);
 4161|    706|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|    706|    {
  754|    706|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|    706|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    706|              cvref<T> obj = *get<T>(fn);
  745|    706|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    706|                  obj(static_cast<decltype(args)>(args)...);
  747|    706|              }
  748|    706|              else {
  749|    706|                  return obj(static_cast<decltype(args)>(args)...);
  750|    706|              }
  751|    706|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|    706|    {
  684|    706|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    706|            return static_cast<T*>(s.m_cp);
  686|    706|        }
  687|    706|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    706|            return static_cast<T*>(s.m_p);
  689|    706|        }
  690|    706|        else {
  691|    706|            return reinterpret_cast<T*>(s.m_fp);
  692|    706|        }
  693|    706|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|    706|            [](float_reader<CharT>& r, auto&&... args) {
 4158|    706|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    706|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|    706|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|    706|        {
  662|    706|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5870|    706|    {
 5871|    706|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    706|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    706|                          basic_contiguous_scan_context<char_type>>) {
 5875|    706|            auto rd = make_reader<T, char_type>();
 5876|    706|            return impl(rd, range, value);
 5877|    706|        }
 5878|    706|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    706|            auto rd = make_reader<T, char_type>();
 5880|    706|            if (!is_segment_contiguous(range)) {
 5881|    706|                return impl(rd, range, value);
 5882|    706|            }
 5883|    706|            auto crange = get_as_contiguous(range);
 5884|    706|            SCN_TRY(it, impl(rd, crange, value));
 5885|    706|            return ranges::next(range.begin(),
 5886|    706|                                ranges::distance(crange.begin(), it));
 5887|    706|        }
 5888|    706|        else {
 5889|    706|            SCN_EXPECT(false);
 5890|    706|            SCN_UNREACHABLE;
 5891|    706|        }
 5892|    706|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5862|    706|    {
 5863|    706|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    706|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    706|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    706|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    706|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 706]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    706|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    706|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    706|                        .transform_error(make_eof_scan_error));
 5865|    706|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    706|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5265|    706|    {
 5266|    706|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    706|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    706|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    706|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5870|    706|    {
 5871|    706|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    706|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    706|                          basic_contiguous_scan_context<char_type>>) {
 5875|    706|            auto rd = make_reader<T, char_type>();
 5876|    706|            return impl(rd, range, value);
 5877|    706|        }
 5878|    706|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    706|            auto rd = make_reader<T, char_type>();
 5880|    706|            if (!is_segment_contiguous(range)) {
 5881|    706|                return impl(rd, range, value);
 5882|    706|            }
 5883|    706|            auto crange = get_as_contiguous(range);
 5884|    706|            SCN_TRY(it, impl(rd, crange, value));
 5885|    706|            return ranges::next(range.begin(),
 5886|    706|                                ranges::distance(crange.begin(), it));
 5887|    706|        }
 5888|    706|        else {
 5889|    706|            SCN_EXPECT(false);
 5890|    706|            SCN_UNREACHABLE;
 5891|    706|        }
 5892|    706|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|    706|    {
 5863|    706|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    706|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    706|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    706|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    706|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 706]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    706|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    706|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    706|                        .transform_error(make_eof_scan_error));
 5865|    706|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    706|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|    706|    {
 5266|    706|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    706|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    706|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    706|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKcEERT_:
 5870|    706|    {
 5871|    706|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    706|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    706|                          basic_contiguous_scan_context<char_type>>) {
 5875|    706|            auto rd = make_reader<T, char_type>();
 5876|    706|            return impl(rd, range, value);
 5877|    706|        }
 5878|    706|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    706|            auto rd = make_reader<T, char_type>();
 5880|    706|            if (!is_segment_contiguous(range)) {
 5881|    706|                return impl(rd, range, value);
 5882|    706|            }
 5883|    706|            auto crange = get_as_contiguous(range);
 5884|    706|            SCN_TRY(it, impl(rd, crange, value));
 5885|    706|            return ranges::next(range.begin(),
 5886|    706|                                ranges::distance(crange.begin(), it));
 5887|    706|        }
 5888|    706|        else {
 5889|    706|            SCN_EXPECT(false);
 5890|    706|            SCN_UNREACHABLE;
 5891|    706|        }
 5892|    706|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|    706|    {
 5863|    706|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    706|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    706|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    706|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    706|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 706]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    706|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    706|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    706|                        .transform_error(make_eof_scan_error));
 5865|    706|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    706|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|    706|    {
 5266|    706|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    706|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    706|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    706|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2878|   170k|    {
 2879|   170k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2882|   352k|    {
 2883|   352k|        return m_current;
 2884|   352k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2887|   252k|    {
 2888|   252k|        return m_range.end();
 2889|   252k|    }
_ZN3scn2v34impl19is_first_char_spaceIcEENS1_26is_first_char_space_resultIT_EENSt3__117basic_string_viewIS4_NS6_11char_traitsIS4_EEEE:
 1220|  70.0k|{
 1221|       |    // TODO: optimize
 1222|  70.0k|    SCN_EXPECT(!str.empty());
  ------------------
  |  |  924|  70.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  70.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1223|  70.0k|    auto res = get_next_code_point(str);
 1224|  70.0k|    return {res.iterator, res.value, is_cp_space(res.value)};
 1225|  70.0k|}
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2902|  73.7k|    {
 2903|  73.7k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|  73.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  73.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|  73.7k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|  73.7k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 73.7k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|  73.7k|        }
 2909|  73.7k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  73.7k|    static_cast<    \
  |  |  929|  73.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|  73.7k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2892|   107k|    {
 2893|   107k|        return ranges::subrange{begin(), end()};
 2894|   107k|    }
_ZN3scn2v34impl24read_while_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2116|  7.78k|{
 2117|  7.78k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  7.78k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  7.78k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  7.78k|        auto buf = make_contiguous_buffer(range);
 2121|  7.78k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  7.78k|        return ranges::next(range.begin(),
 2123|  7.78k|                            ranges::distance(buf.view().begin(), it));
 2124|  7.78k|    }
 2125|  7.78k|    else {
 2126|  7.78k|        auto it = range.begin();
 2127|       |
 2128|  7.78k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|  7.78k|            auto seg = get_contiguous_beginning(range);
 2130|  7.78k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  7.78k|                seg_it != seg.end()) {
 2132|  7.78k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  7.78k|            }
 2134|  7.78k|            ranges::advance(it, seg.size());
 2135|  7.78k|        }
 2136|       |
 2137|  7.78k|        return read_while_code_point(
 2138|  7.78k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  7.78k|    }
 2140|  7.78k|}
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_b:
 6036|  6.73k|    {
 6037|  6.73k|        const bool need_skipped_width =
 6038|  6.73k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 178, False: 6.55k]
  |  Branch (6038:33): [True: 6.55k, False: 0]
  ------------------
 6039|  6.73k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  6.73k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 556, False: 6.17k]
  ------------------
 6043|  6.73k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 530, False: 5.64k]
  ------------------
 6044|  1.08k|            return skip_fill(rng, specs.precision, specs.fill,
 6045|  1.08k|                             need_skipped_width);
 6046|  1.08k|        }
 6047|  5.64k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 5.31k, False: 328]
  |  Branch (6047:56): [True: 2.58k, False: 2.73k]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  2.58k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 2.58k, False: 0]
  ------------------
 6051|  2.58k|                auto max_width_view = take_width(rng, specs.precision);
 6052|  2.58k|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|  2.58k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.58k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.58k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 112, False: 2.46k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    112|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    112|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    112|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    112|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    112|    }                                                  \
  |  |  |  | 3671|  2.58k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.46k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|  2.46k|                                  .transform_error(make_eof_scan_error));
 6054|  2.46k|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|  2.58k|            }
 6056|      0|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|      0|                            make_eof_scan_error));
 6058|       |
 6059|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 0]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|      0|            return result_type{it, 0};
 6067|      0|        }
 6068|       |
 6069|  3.06k|        return result_type{rng.begin(), 0};
 6070|  5.64k|    }
_ZN3scn2v34impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEb:
 5950|  1.08k|{
 5951|  1.08k|    using char_type = detail::char_t<Range>;
 5952|  1.08k|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5953|       |
 5954|  1.08k|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5954:9): [True: 848, False: 238]
  ------------------
 5955|    848|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5956|    848|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5957|       |
 5958|    848|        if (max_width == 0) {
  ------------------
  |  Branch (5958:13): [True: 0, False: 848]
  ------------------
 5959|      0|            auto it = read_while_code_unit(range, pred);
 5960|       |
 5961|      0|            if (want_skipped_width) {
  ------------------
  |  Branch (5961:17): [True: 0, False: 0]
  ------------------
 5962|      0|                auto prefix_width =
 5963|      0|                    static_cast<std::ptrdiff_t>(
 5964|      0|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5965|      0|                    ranges::distance(range.begin(), it);
 5966|      0|                return result_type{it, prefix_width};
 5967|      0|            }
 5968|      0|            return result_type{it, 0};
 5969|      0|        }
 5970|       |
 5971|    848|        auto max_width_view = take_width(range, max_width);
 5972|    848|        auto w_it = read_while_code_unit(max_width_view, pred);
 5973|       |
 5974|    848|        if (want_skipped_width) {
  ------------------
  |  Branch (5974:13): [True: 848, False: 0]
  ------------------
 5975|    848|            return result_type{w_it.base(), max_width - w_it.count()};
 5976|    848|        }
 5977|      0|        return result_type{w_it.base(), 0};
 5978|    848|    }
 5979|       |
 5980|    238|    const auto fill_chars = fill.template get_code_units<char_type>();
 5981|    238|    if (max_width == 0) {
  ------------------
  |  Branch (5981:9): [True: 0, False: 238]
  ------------------
 5982|      0|        auto it = read_while_code_units(range, fill_chars);
 5983|       |
 5984|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (5984:13): [True: 0, False: 0]
  ------------------
 5985|      0|            auto prefix_width =
 5986|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5987|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5988|      0|            return result_type{it, prefix_width};
 5989|      0|        }
 5990|      0|        return result_type{it, 0};
 5991|      0|    }
 5992|       |
 5993|    238|    auto max_width_view = take_width(range, max_width);
 5994|    238|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5995|       |
 5996|    238|    if (want_skipped_width) {
  ------------------
  |  Branch (5996:9): [True: 238, False: 0]
  ------------------
 5997|    238|        return result_type{w_it.base(), max_width - w_it.count()};
 5998|    238|    }
 5999|      0|    return result_type{w_it.base(), 0};
 6000|    238|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_ST_LPv0EEEOSJ_:
  753|    848|    {
  754|    848|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_ST_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESZ_c:
  743|  1.16k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.16k|              cvref<T> obj = *get<T>(fn);
  745|  1.16k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.16k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.16k|              }
  748|  1.16k|              else {
  749|  1.16k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.16k|              }
  751|  1.16k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESI_lRKNS0_6detail9fill_typeEbEUlcE_EEDaNS3_7storageE:
  683|  1.16k|    {
  684|  1.16k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.16k|            return static_cast<T*>(s.m_cp);
  686|  1.16k|        }
  687|  1.16k|        else if constexpr (std::is_object_v<T>) {
  688|  1.16k|            return static_cast<T*>(s.m_p);
  689|  1.16k|        }
  690|  1.16k|        else {
  691|  1.16k|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.16k|        }
  693|  1.16k|    }
_ZZN3scn2v34impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEbENKUlcE_clEc:
 5956|  1.16k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_LPv0EEEPKSJ_:
  666|    848|        {
  667|    848|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|    848|{
 1976|    848|    return read_until_code_unit(range, std::not_fn(pred));
 1977|    848|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|    848|{
 1957|    848|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|    848|        return std::find_if(range.begin(), range.end(), pred);
 1959|    848|    }
 1960|    848|    else {
 1961|    848|        auto first = range.begin();
 1962|  1.24k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 1.16k, False: 84]
  ------------------
 1963|  1.16k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 764, False: 398]
  ------------------
 1964|    764|                return first;
 1965|    764|            }
 1966|  1.16k|        }
 1967|     84|        return first;
 1968|    848|    }
 1969|    848|}
_ZNK3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE5beginEv:
 2809|  6.24k|    {
 2810|  6.24k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2811|  6.24k|                                      m_count};
 2812|  6.24k|    }
_ZNK3scn2v34impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEvE3getEv:
 2716|  24.3k|    {
 2717|  24.3k|        return view;
 2718|  24.3k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEC2ES6_SF_l:
 2381|  6.24k|    {
 2382|  6.24k|    }
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2780|  6.29k|        {
 2781|  6.29k|            return !(y == x);
 2782|  6.29k|        }
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2769|  13.3k|        {
 2770|  13.3k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2770:21): [True: 590, False: 12.7k]
  |  Branch (2770:39): [True: 386, False: 204]
  ------------------
 2771|  13.3k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2771:20): [True: 0, False: 12.9k]
  ------------------
 2772|  13.3k|        }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE14multibyte_leftEv:
 2420|    590|    {
 2421|    590|        return m_multibyte_left;
 2422|    590|    }
_ZNK3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE3endEv:
 2815|  11.8k|    {
 2816|  11.8k|        return sentinel<true>{m_base.get().end()};
 2817|  11.8k|    }
_ZN3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE8sentinelILb1EEC2ENSA_8sentinelILb1EEE:
 2750|  11.8k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEdeEv:
 2425|  9.35k|    {
 2426|  9.35k|        return *m_current;
 2427|  9.35k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEppEv:
 2434|  7.42k|    {
 2435|  7.42k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  7.42k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.42k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2436|  7.42k|        _increment_current();
 2437|  7.42k|        return *this;
 2438|  7.42k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE18_increment_currentEv:
 2667|  7.42k|    {
 2668|  7.42k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2668:13): [True: 5.43k, False: 1.98k]
  ------------------
 2669|  5.43k|            auto cplen = _get_cp_length_at_current();
 2670|  5.43k|            m_multibyte_left = cplen - 1;
 2671|  5.43k|            m_count -= _get_width_at_current_cp_start(cplen);
 2672|  5.43k|        }
 2673|  1.98k|        else {
 2674|  1.98k|            --m_multibyte_left;
 2675|  1.98k|        }
 2676|       |
 2677|  7.42k|        ++m_current;
 2678|  7.42k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE25_get_cp_length_at_currentEv:
 2638|  5.43k|    {
 2639|  5.43k|        return static_cast<difference_type>(
 2640|  5.43k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2641|  5.43k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE30_get_width_at_current_cp_startEl:
 2644|  5.43k|    {
 2645|  5.43k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|  5.43k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.43k]
  |  |  ------------------
  ------------------
 2646|      0|            return 0;
 2647|      0|        }
 2648|       |
 2649|  5.43k|        if (cplen == 1) {
  ------------------
  |  Branch (2649:13): [True: 4.19k, False: 1.24k]
  ------------------
 2650|  4.19k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  4.19k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.19k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2651|  4.19k|            auto cp = static_cast<char32_t>(*m_current);
 2652|  4.19k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2653|  4.19k|        }
 2654|       |
 2655|  1.24k|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2656|  1.24k|                                           cplen);
 2657|  1.24k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.24k]
  |  |  ------------------
  ------------------
 2658|      0|            return 0;
 2659|      0|        }
 2660|       |
 2661|  1.24k|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2662|  1.24k|        return static_cast<difference_type>(
 2663|  1.24k|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2664|  1.24k|    }
_ZN3scn2v34impl21read_while_code_unitsINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENSt3__117basic_string_viewIcNSD_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEESJ_RKT0_:
 2036|    238|{
 2037|    238|    static_assert(ranges::common_range<CodeUnits>);
 2038|       |
 2039|    238|    auto it = range.begin();
 2040|    238|    while (it != range.end()) {
  ------------------
  |  Branch (2040:12): [True: 238, False: 0]
  ------------------
 2041|    238|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2042|    238|                                           needle.size());
 2043|    238|        if (!r) {
  ------------------
  |  Branch (2043:13): [True: 78, False: 160]
  ------------------
 2044|     78|            return it;
 2045|     78|        }
 2046|    160|        static_assert(
 2047|    160|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2048|    160|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2048:13): [True: 160, False: 0]
  ------------------
 2049|    160|            return it;
 2050|    160|        }
 2051|      0|        it = *r;
 2052|      0|    }
 2053|      0|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2054|      0|    return it;
 2055|      0|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_l:
 1856|    238|{
 1857|    238|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|    238|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    238|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|    238|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|    238|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|    238|        if (sz < count) {
 1862|    238|            return unexpected(eof_error::eof);
 1863|    238|        }
 1864|       |
 1865|    238|        return ranges::next(range.begin(), count);
 1866|    238|    }
 1867|    238|    else {
 1868|    238|        auto it = range.begin();
 1869|    238|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 238]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|    946|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 786, False: 160]
  ------------------
 1874|    786|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 78, False: 708]
  ------------------
 1875|     78|                return unexpected(eof_error::eof);
 1876|     78|            }
 1877|    786|        }
 1878|       |
 1879|    160|        return it;
 1880|    238|    }
 1881|    238|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEmT_:
 1094|    238|{
 1095|    238|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|    238|        return r.size();
 1097|    238|    }
 1098|    238|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|    238|                           ranges::const_iterator_t<Range>,
 1100|    238|                           typename detail::basic_scan_buffer<
 1101|    238|                               detail::char_t<Range>>::forward_iterator>) {
 1102|    238|        if constexpr (ranges::common_range<Range>) {
 1103|    238|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|    238|        }
 1105|    238|        else {
 1106|    238|            if (r.begin().stores_parent()) {
 1107|    238|                return static_cast<size_t>(
 1108|    238|                    r.begin().parent()->chars_available() -
 1109|    238|                    r.begin().position());
 1110|    238|            }
 1111|    238|            return r.begin().contiguous_segment().size();
 1112|    238|        }
 1113|    238|    }
 1114|    238|    else {
 1115|    238|        return 0;
 1116|    238|    }
 1117|    238|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSM_NS1_20incrementable_traitsISM_E15difference_typeE:
  267|  2.58k|    {
  268|  2.58k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  2.58k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent22random_access_iteratorISM_EEvE4typeERSM_NS1_20incrementable_traitsISM_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  160|  2.58k|    {
  161|  2.58k|        constexpr auto zero = iter_difference_t<I>{0};
  162|       |
  163|  2.58k|        if (n > zero) {
  ------------------
  |  Branch (163:13): [True: 0, False: 2.58k]
  ------------------
  164|      0|            while (n-- > zero) {
  ------------------
  |  Branch (164:20): [True: 0, False: 0]
  ------------------
  165|      0|                ++i;
  166|      0|            }
  167|      0|        }
  168|  2.58k|        else {
  169|  2.58k|            while (n++ < zero) {
  ------------------
  |  Branch (169:20): [True: 0, False: 2.58k]
  ------------------
  170|      0|                --i;
  171|      0|            }
  172|  2.58k|        }
  173|  2.58k|    }
_ZN3scn2v34impl27counted_width_iterator_implneINS2_22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEDTeqclscPFRKS7_vELDnEEclscPFRKT_vELDnEEERKNS4_IS7_SG_EERKNS4_ISL_T0_EE:
 2530|  2.90k|    {
 2531|  2.90k|        return !(a == b);
 2532|  2.90k|    }
_ZN3scn2v34impl27counted_width_iterator_impleqINS2_22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEDTeqclscPFRKS7_vELDnEEclscPFRKT_vELDnEEERKNS4_IS7_SG_EERKNS4_ISL_T0_EE:
 2522|  2.90k|    {
 2523|  2.90k|        return a.m_current == b.m_current;
 2524|  2.90k|    }
_ZNK3scn2v34impl14_take_width_fnclINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEEDTtlS4_fp_fp0_EERKT_l:
 2831|  3.66k|    {
 2832|  3.66k|        return take_width_view{r, n};
 2833|  3.66k|    }
_ZN3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEEC2ERKSA_l:
 2800|  3.66k|    {
 2801|  3.66k|    }
_ZN3scn2v34impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEvEC2ERKSB_:
 2713|  3.66k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impl23skip_classic_whitespaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|  2.58k|{
 2951|  2.58k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 2.58k, False: 0]
  ------------------
 2952|  2.58k|        auto it = read_while_classic_space(range);
 2953|  2.58k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  2.58k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 112, False: 2.46k]
  |  |  ------------------
  ------------------
 2955|    112|            return unexpected(e);
 2956|    112|        }
 2957|       |
 2958|  2.46k|        return it;
 2959|  2.58k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  2.58k|}
_ZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|  2.58k|{
 2117|  2.58k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  2.58k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  2.58k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  2.58k|        auto buf = make_contiguous_buffer(range);
 2121|  2.58k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  2.58k|        return ranges::next(range.begin(),
 2123|  2.58k|                            ranges::distance(buf.view().begin(), it));
 2124|  2.58k|    }
 2125|  2.58k|    else {
 2126|  2.58k|        auto it = range.begin();
 2127|       |
 2128|  2.58k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  2.58k|            auto seg = get_contiguous_beginning(range);
 2130|  2.58k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  2.58k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2131:17): [True: 0, False: 2.58k]
  ------------------
 2132|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|      0|            }
 2134|  2.58k|            ranges::advance(it, seg.size());
 2135|  2.58k|        }
 2136|       |
 2137|  2.58k|        return read_while_code_point(
 2138|  2.58k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  2.58k|    }
 2140|  2.58k|}
_ZN3scn2v34impl24get_contiguous_beginningINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDaT_:
 1038|  2.58k|{
 1039|  2.58k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1039:19): [Folded - Ignored]
  |  Branch (1039:19): [Folded - Ignored]
  ------------------
 1040|  2.58k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1040:19): [Folded - Ignored]
  ------------------
 1041|  2.58k|        return r;
 1042|  2.58k|    }
 1043|  2.58k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1043:24): [Folded - Ignored]
  ------------------
 1044|  2.58k|                           ranges::const_iterator_t<Range>,
 1045|  2.58k|                           typename detail::basic_scan_buffer<
 1046|  2.58k|                               detail::char_t<Range>>::forward_iterator>) {
 1047|  2.58k|        if constexpr (ranges::common_range<Range>) {
 1048|  2.58k|            auto seg = r.begin().contiguous_segment();
 1049|  2.58k|            auto dist =
 1050|  2.58k|                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|  2.58k|            return seg.substr(0, std::min(seg.size(), dist));
 1052|  2.58k|        }
 1053|  2.58k|        else {
 1054|  2.58k|            return r.begin().contiguous_segment();
 1055|  2.58k|        }
 1056|  2.58k|    }
 1057|  2.58k|    else {
 1058|  2.58k|        return std::basic_string_view<detail::char_t<Range>>{};
 1059|  2.58k|    }
 1060|  2.58k|}
_ZN3scn2v34impl21read_while_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|  2.58k|{
 2082|  2.58k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  2.58k|}
_ZN3scn2v34impl21read_until_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|  2.58k|{
 2061|  2.58k|    auto it = range.begin();
 2062|  3.82k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 3.70k, False: 112]
  ------------------
 2063|  3.70k|        const auto val =
 2064|  3.70k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  3.70k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  3.70k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.70k, False: 0]
  |  |  ------------------
  ------------------
 2066|  3.70k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  3.70k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  3.70k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 2.46k, False: 1.24k]
  ------------------
 2069|  2.46k|                return it;
 2070|  2.46k|            }
 2071|  3.70k|        }
 2072|  1.24k|        it = val.iterator;
 2073|  1.24k|    }
 2074|       |
 2075|    112|    return it;
 2076|  2.58k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISP_EEE4typeEEESP_:
 1898|  3.70k|{
 1899|  3.70k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  3.70k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.70k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  3.70k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  3.70k|    auto it = range.begin();
 1903|  3.70k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  3.70k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  3.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.70k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|  3.70k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 3.33k, False: 376]
  ------------------
 1912|  3.33k|        ++it;
 1913|  3.33k|        return {it, string_type(1, *range.begin())};
 1914|  3.33k|    }
 1915|       |
 1916|    376|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|    376|    return {it, string_type{range.begin(), it}};
 1918|  3.70k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEbT_:
  943|  6.28k|{
  944|  6.28k|    return is_range_eof(r.begin(), r.end());
  945|  6.28k|}
_ZN3scn2v34impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS8_ISE_E8sentinelILb1EEEEEbT_T0_:
  927|  6.28k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  6.28k|    {
  937|  6.28k|        return begin == end;
  938|  6.28k|    }
  939|  6.28k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSC_ISG_E8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SP_EENS1_20incrementable_traitsISP_E15difference_typeEE4typeERSP_ST_SQ_:
  282|    376|    {
  283|    376|        return n - fn::impl_i_n_s(i, n, bound);
  284|    376|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSC_ISG_E8sentinelILb1EEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SP_EENS1_20incrementable_traitsISP_E15difference_typeEE4typeERSP_ST_SQ_:
  226|    376|    {
  227|    376|        constexpr iter_difference_t<I> zero{0};
  228|    376|        iter_difference_t<I> counter{0};
  229|       |
  230|    376|        if (n < zero) {
  ------------------
  |  Branch (230:13): [True: 0, False: 376]
  ------------------
  231|      0|            do {
  232|      0|                --i;
  233|      0|                --counter;  // Yes, really
  234|      0|            } while (++n < zero && i != bound);
  ------------------
  |  Branch (234:22): [True: 0, False: 0]
  |  Branch (234:36): [True: 0, False: 0]
  ------------------
  235|      0|        }
  236|    376|        else {
  237|  1.37k|            while (n-- > zero && i != bound) {
  ------------------
  |  Branch (237:20): [True: 994, False: 376]
  |  Branch (237:34): [True: 994, False: 0]
  ------------------
  238|    994|                ++i;
  239|    994|                ++counter;
  240|    994|            }
  241|    376|        }
  242|       |
  243|    376|        return counter;
  244|    376|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEcE8is_validEv:
 1889|  3.70k|    {
 1890|  3.70k|        return !codepoint.empty();
 1891|  3.70k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|  2.58k|    {
  754|  2.58k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|  3.70k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.70k|              cvref<T> obj = *get<T>(fn);
  745|  3.70k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  3.70k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.70k|              }
  748|  3.70k|              else {
  749|  3.70k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.70k|              }
  751|  3.70k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS6_INS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  3.70k|    {
  684|  3.70k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  3.70k|            return static_cast<T*>(s.m_cp);
  686|  3.70k|        }
  687|  3.70k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  3.70k|            return static_cast<T*>(s.m_p);
  689|  3.70k|        }
  690|  3.70k|        else {
  691|  3.70k|            return reinterpret_cast<T*>(s.m_fp);
  692|  3.70k|        }
  693|  3.70k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|  3.70k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|  2.58k|        {
  662|  2.58k|        }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_9eof_errorET_:
  949|  2.58k|{
  950|  2.58k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  2.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 112, False: 2.46k]
  |  |  ------------------
  ------------------
  951|    112|        return eof_error::eof;
  952|    112|    }
  953|  2.46k|    return eof_error::good;
  954|  2.58k|}
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE4baseEv:
 2412|  16.5k|    {
 2413|  16.5k|        return m_current;
 2414|  16.5k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE5countEv:
 2416|  16.9k|    {
 2417|  16.9k|        return m_count;
 2418|  16.9k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|  27.8k|    {
 6037|  27.8k|        const bool need_skipped_width =
 6038|  27.8k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 1.83k, False: 25.9k]
  |  Branch (6038:33): [True: 0, False: 25.9k]
  ------------------
 6039|  27.8k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  27.8k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 206, False: 27.6k]
  ------------------
 6043|  27.8k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 3.31k, False: 24.3k]
  ------------------
 6044|  3.52k|            return skip_fill(rng, specs.precision, specs.fill,
 6045|  3.52k|                             need_skipped_width);
 6046|  3.52k|        }
 6047|  24.3k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 23.9k, False: 396]
  |  Branch (6047:56): [True: 1.77k, False: 22.1k]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  1.77k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 1.77k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  3.54k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|  1.77k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.77k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.77k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.77k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.77k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.77k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  3.54k|                            make_eof_scan_error));
 6058|       |
 6059|  3.54k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 1.09k, False: 672]
  ------------------
 6060|  1.09k|                return result_type{
 6061|  1.09k|                    it,
 6062|  1.09k|                    calculate_text_width(make_contiguous_buffer(
 6063|  1.09k|                                             ranges::subrange{rng.begin(), it})
 6064|  1.09k|                                             .view())};
 6065|  1.09k|            }
 6066|    672|            return result_type{it, 0};
 6067|  3.54k|        }
 6068|       |
 6069|  22.5k|        return result_type{rng.begin(), 0};
 6070|  24.3k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|  6.51k|    {
 6079|  6.51k|        const bool need_skipped_width =
 6080|  6.51k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 488, False: 6.02k]
  |  Branch (6080:33): [True: 1.53k, False: 4.48k]
  ------------------
 6081|  6.51k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  6.51k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 202, False: 6.30k]
  ------------------
 6084|  6.51k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 314, False: 5.99k]
  ------------------
 6085|    516|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 240, False: 276]
  ------------------
 6086|    516|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 84, False: 156]
  ------------------
 6087|     84|                return result_type{rng.begin(), 0};
 6088|     84|            }
 6089|    432|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|    432|                             specs.fill, need_skipped_width);
 6091|    516|        }
 6092|  5.99k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 5.76k, False: 228]
  ------------------
 6093|  5.99k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 5.35k, False: 408]
  ------------------
 6094|  5.99k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 318, False: 5.04k]
  |  Branch (6094:35): [True: 282, False: 36]
  ------------------
 6095|  5.35k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 794, False: 4.28k]
  ------------------
 6096|  5.07k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 694, False: 100]
  ------------------
 6097|    976|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 698, False: 278]
  ------------------
 6098|    698|                const auto initial_width =
 6099|    698|                    specs.precision - prefix_width - value_width;
 6100|    698|                auto max_width_view = take_width(rng, initial_width);
 6101|    698|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|    698|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    698|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    698|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    698|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 698]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    698|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    698|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|    698|                                  .transform_error(make_eof_scan_error));
 6103|    698|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|    698|            }
 6105|    556|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|    278|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    278|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    278|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    278|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 278]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    278|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    278|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|    556|                            make_eof_scan_error));
 6107|       |
 6108|    556|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 278, False: 0]
  ------------------
 6109|    278|                return result_type{
 6110|    278|                    it,
 6111|    278|                    calculate_text_width(make_contiguous_buffer(
 6112|    278|                                             ranges::subrange{rng.begin(), it})
 6113|    278|                                             .view())};
 6114|    278|            }
 6115|      0|            return result_type{it, 0};
 6116|    556|        }
 6117|  5.01k|        return result_type{rng.begin(), 0};
 6118|  5.99k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
 6192|  10.3k|    {
 6193|  10.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  10.3k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  10.3k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  10.3k|            auto rd = make_reader<T, char_type>();
 6198|  10.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  10.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.72k, False: 650]
  |  |  ------------------
  ------------------
 6199|  9.72k|                return unexpected(e);
 6200|  9.72k|            }
 6201|       |
 6202|    650|            return impl(rd, range, value);
 6203|  10.3k|        }
 6204|  10.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  10.3k|            auto rd = make_reader<T, char_type>();
 6206|  10.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  10.3k|                return unexpected(e);
 6208|  10.3k|            }
 6209|       |
 6210|  10.3k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  10.3k|                specs.width != 0) {
 6212|  10.3k|                return impl(rd, range, value);
 6213|  10.3k|            }
 6214|       |
 6215|  10.3k|            auto crange = get_as_contiguous(range);
 6216|  10.3k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  10.3k|            return ranges::next(range.begin(),
 6218|  10.3k|                                ranges::distance(crange.begin(), it));
 6219|  10.3k|        }
 6220|  10.3k|        else {
 6221|  10.3k|            SCN_EXPECT(false);
 6222|  10.3k|            SCN_UNREACHABLE;
 6223|  10.3k|        }
 6224|  10.3k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    650|    {
 6124|    650|        const bool need_skipped_width =
 6125|    650|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 176, False: 474]
  |  Branch (6125:33): [True: 380, False: 94]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    650|        auto it = rng.begin();
 6129|    650|        std::ptrdiff_t prefix_width = 0;
 6130|    650|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 386, False: 264]
  ------------------
 6131|    386|            auto max_width_view = take_width(rng, specs.precision);
 6132|    386|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    386|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    386|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    386|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    386|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 16, False: 370]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     16|    }                                                  \
  |  |  |  | 3671|    386|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    370|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    370|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    370|            it = prefix_result.first.base();
 6135|    370|            prefix_width = prefix_result.second;
 6136|    370|        }
 6137|    264|        else {
 6138|    264|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    264|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    264|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    264|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    264|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 264]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    264|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    264|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    264|            std::tie(it, prefix_width) = prefix_result;
 6140|    264|        }
 6141|    634|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    634|        std::ptrdiff_t value_width = 0;
 6145|    634|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 370, False: 264]
  ------------------
 6146|    370|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 364]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|    364|            const auto initial_width = specs.precision - prefix_width;
 6154|    364|            auto max_width_view =
 6155|    364|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    364|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    364|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    364|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    364|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    364|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 364, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    364|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    364|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    364|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    364|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    364|    }                                                  \
  |  |  |  | 3671|    364|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    264|        else {
 6161|    264|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    264|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    264|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    264|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 264, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    264|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    264|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    264|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    264|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    264|    }                                                  \
  |  | 3671|    264|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    264|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
 6192|  10.3k|    {
 6193|  10.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  10.3k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  10.3k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  10.3k|            auto rd = make_reader<T, char_type>();
 6198|  10.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  10.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.72k, False: 650]
  |  |  ------------------
  ------------------
 6199|  9.72k|                return unexpected(e);
 6200|  9.72k|            }
 6201|       |
 6202|    650|            return impl(rd, range, value);
 6203|  10.3k|        }
 6204|  10.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  10.3k|            auto rd = make_reader<T, char_type>();
 6206|  10.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  10.3k|                return unexpected(e);
 6208|  10.3k|            }
 6209|       |
 6210|  10.3k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  10.3k|                specs.width != 0) {
 6212|  10.3k|                return impl(rd, range, value);
 6213|  10.3k|            }
 6214|       |
 6215|  10.3k|            auto crange = get_as_contiguous(range);
 6216|  10.3k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  10.3k|            return ranges::next(range.begin(),
 6218|  10.3k|                                ranges::distance(crange.begin(), it));
 6219|  10.3k|        }
 6220|  10.3k|        else {
 6221|  10.3k|            SCN_EXPECT(false);
 6222|  10.3k|            SCN_UNREACHABLE;
 6223|  10.3k|        }
 6224|  10.3k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    650|    {
 6124|    650|        const bool need_skipped_width =
 6125|    650|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 176, False: 474]
  |  Branch (6125:33): [True: 380, False: 94]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    650|        auto it = rng.begin();
 6129|    650|        std::ptrdiff_t prefix_width = 0;
 6130|    650|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 386, False: 264]
  ------------------
 6131|    386|            auto max_width_view = take_width(rng, specs.precision);
 6132|    386|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    386|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    386|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    386|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    386|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 16, False: 370]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     16|    }                                                  \
  |  |  |  | 3671|    386|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    370|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    370|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    370|            it = prefix_result.first.base();
 6135|    370|            prefix_width = prefix_result.second;
 6136|    370|        }
 6137|    264|        else {
 6138|    264|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    264|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    264|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    264|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    264|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 264]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    264|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    264|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    264|            std::tie(it, prefix_width) = prefix_result;
 6140|    264|        }
 6141|    634|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    634|        std::ptrdiff_t value_width = 0;
 6145|    634|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 370, False: 264]
  ------------------
 6146|    370|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 364]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|    364|            const auto initial_width = specs.precision - prefix_width;
 6154|    364|            auto max_width_view =
 6155|    364|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    364|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    364|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    364|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    364|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    364|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 364, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    364|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    364|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    364|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    364|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    364|    }                                                  \
  |  |  |  | 3671|    364|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    264|        else {
 6161|    264|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    264|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    264|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    264|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 264, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    264|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    264|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    264|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    264|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    264|    }                                                  \
  |  | 3671|    264|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    264|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIPvEENS0_13scan_expectedIPKcEERT_:
 6192|  10.3k|    {
 6193|  10.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  10.3k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  10.3k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  10.3k|            auto rd = make_reader<T, char_type>();
 6198|  10.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  10.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.73k, False: 574]
  |  |  ------------------
  ------------------
 6199|  9.73k|                return unexpected(e);
 6200|  9.73k|            }
 6201|       |
 6202|    574|            return impl(rd, range, value);
 6203|  10.3k|        }
 6204|  10.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  10.3k|            auto rd = make_reader<T, char_type>();
 6206|  10.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  10.3k|                return unexpected(e);
 6208|  10.3k|            }
 6209|       |
 6210|  10.3k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  10.3k|                specs.width != 0) {
 6212|  10.3k|                return impl(rd, range, value);
 6213|  10.3k|            }
 6214|       |
 6215|  10.3k|            auto crange = get_as_contiguous(range);
 6216|  10.3k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  10.3k|            return ranges::next(range.begin(),
 6218|  10.3k|                                ranges::distance(crange.begin(), it));
 6219|  10.3k|        }
 6220|  10.3k|        else {
 6221|  10.3k|            SCN_EXPECT(false);
 6222|  10.3k|            SCN_UNREACHABLE;
 6223|  10.3k|        }
 6224|  10.3k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE11check_specsERKNS0_6detail12format_specsE:
 5752|  10.3k|    {
 5753|  10.3k|        reader_error_handler eh{};
 5754|  10.3k|        detail::check_pointer_type_specs(specs, eh);
 5755|  10.3k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  10.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.73k, False: 574]
  |  |  ------------------
  ------------------
 5756|  9.73k|            return {scan_error::invalid_format_string, eh.m_msg};
 5757|  9.73k|        }
 5758|    574|        return {};
 5759|  10.3k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_23reader_impl_for_voidptrIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 6123|    574|    {
 6124|    574|        const bool need_skipped_width =
 6125|    574|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 172, False: 402]
  |  Branch (6125:33): [True: 340, False: 62]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    574|        auto it = rng.begin();
 6129|    574|        std::ptrdiff_t prefix_width = 0;
 6130|    574|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 346, False: 228]
  ------------------
 6131|    346|            auto max_width_view = take_width(rng, specs.precision);
 6132|    346|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    346|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    346|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    346|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    346|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8, False: 338]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      8|    }                                                  \
  |  |  |  | 3671|    346|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    338|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    338|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    338|            it = prefix_result.first.base();
 6135|    338|            prefix_width = prefix_result.second;
 6136|    338|        }
 6137|    228|        else {
 6138|    228|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    228|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    228|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    228|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    228|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 228]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    228|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    228|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    228|            std::tie(it, prefix_width) = prefix_result;
 6140|    228|        }
 6141|    566|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    566|        std::ptrdiff_t value_width = 0;
 6145|    566|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 338, False: 228]
  ------------------
 6146|    338|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 4, False: 334]
  ------------------
 6147|      4|                return unexpected_scan_error(
 6148|      4|                    scan_error::invalid_scanned_value,
 6149|      4|                    "Too many fill characters before value, "
 6150|      4|                    "precision exceeded before reading value");
 6151|      4|            }
 6152|       |
 6153|    334|            const auto initial_width = specs.precision - prefix_width;
 6154|    334|            auto max_width_view =
 6155|    334|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    334|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    334|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    334|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    334|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    334|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 334, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    334|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    334|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    334|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    334|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    334|    }                                                  \
  |  |  |  | 3671|    334|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    228|        else {
 6161|    228|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    228|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    228|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    228|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 228, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    228|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    228|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    228|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    228|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    228|    }                                                  \
  |  | 3671|    228|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    228|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERPvNSN_10locale_refE:
 5781|    334|    {
 5782|    334|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    334|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5783|    334|        return read_default(range, value, loc);
 5784|    334|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RPvNS0_6detail10locale_refE:
 5764|    334|    {
 5765|    334|        detail::format_specs specs{};
 5766|    334|        specs.type = detail::presentation_type::int_hex;
 5767|       |
 5768|    334|        std::uintptr_t intvalue{};
 5769|    334|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3672|    334|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    334|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    334|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    334|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 334, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    334|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    334|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    334|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    334|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    334|    }                                                  \
  |  |  |  | 3671|    334|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5770|      0|                                                                intvalue, loc));
 5771|      0|        value = reinterpret_cast<void*>(intvalue);
 5772|      0|        return result;
 5773|    334|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERPvNSL_10locale_refE:
 5781|    228|    {
 5782|    228|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    228|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5783|    228|        return read_default(range, value, loc);
 5784|    228|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIbEENS0_13scan_expectedIPKcEERT_:
 6192|  10.3k|    {
 6193|  10.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  10.3k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  10.3k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  10.3k|            auto rd = make_reader<T, char_type>();
 6198|  10.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  10.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.54k, False: 834]
  |  |  ------------------
  ------------------
 6199|  9.54k|                return unexpected(e);
 6200|  9.54k|            }
 6201|       |
 6202|    834|            return impl(rd, range, value);
 6203|  10.3k|        }
 6204|  10.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  10.3k|            auto rd = make_reader<T, char_type>();
 6206|  10.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  10.3k|                return unexpected(e);
 6208|  10.3k|            }
 6209|       |
 6210|  10.3k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  10.3k|                specs.width != 0) {
 6212|  10.3k|                return impl(rd, range, value);
 6213|  10.3k|            }
 6214|       |
 6215|  10.3k|            auto crange = get_as_contiguous(range);
 6216|  10.3k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  10.3k|            return ranges::next(range.begin(),
 6218|  10.3k|                                ranges::distance(crange.begin(), it));
 6219|  10.3k|        }
 6220|  10.3k|        else {
 6221|  10.3k|            SCN_EXPECT(false);
 6222|  10.3k|            SCN_UNREACHABLE;
 6223|  10.3k|        }
 6224|  10.3k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  10.3k|    {
 3040|  10.3k|        reader_error_handler eh{};
 3041|  10.3k|        get_derived().check_specs_impl(specs, eh);
 3042|  10.3k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  10.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.54k, False: 834]
  |  |  ------------------
  ------------------
 3043|  9.54k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  9.54k|        }
 3045|    834|        return {};
 3046|  10.3k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIcEEcE11get_derivedEv:
 3050|  10.3k|    {
 3051|  10.3k|        return static_cast<Derived&>(*this);
 3052|  10.3k|    }
_ZN3scn2v34impl20reader_impl_for_boolIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5496|  10.3k|    {
 5497|  10.3k|        detail::check_bool_type_specs(specs, eh);
 5498|  10.3k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_boolIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    834|    {
 6124|    834|        const bool need_skipped_width =
 6125|    834|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 186, False: 648]
  |  Branch (6125:33): [True: 448, False: 200]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    834|        auto it = rng.begin();
 6129|    834|        std::ptrdiff_t prefix_width = 0;
 6130|    834|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 456, False: 378]
  ------------------
 6131|    456|            auto max_width_view = take_width(rng, specs.precision);
 6132|    456|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    456|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    456|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    456|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    456|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 436]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     20|    }                                                  \
  |  |  |  | 3671|    456|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    436|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    436|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    436|            it = prefix_result.first.base();
 6135|    436|            prefix_width = prefix_result.second;
 6136|    436|        }
 6137|    378|        else {
 6138|    378|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    378|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    378|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    378|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    378|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 378]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    378|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    378|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    378|            std::tie(it, prefix_width) = prefix_result;
 6140|    378|        }
 6141|    814|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    814|        std::ptrdiff_t value_width = 0;
 6145|    814|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 436, False: 378]
  ------------------
 6146|    436|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 430]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|    430|            const auto initial_width = specs.precision - prefix_width;
 6154|    430|            auto max_width_view =
 6155|    430|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    430|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    430|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    430|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    430|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    430|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 430, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    430|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    430|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    430|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    430|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    430|    }                                                  \
  |  |  |  | 3671|    430|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    378|        else {
 6161|    378|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    378|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    378|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    378|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 378, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    378|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    378|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    378|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    378|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    378|    }                                                  \
  |  | 3671|    378|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    378|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZNK3scn2v34impl20reader_impl_for_boolIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERbNSN_10locale_refE:
 5515|    430|    {
 5516|    430|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5517|       |
 5518|    430|#if !SCN_DISABLE_LOCALE
 5519|    430|        if (specs.localized) {
  ------------------
  |  Branch (5519:13): [True: 12, False: 418]
  ------------------
 5520|     12|            return rd.read_localized(range, loc, value);
 5521|     12|        }
 5522|    418|#endif
 5523|       |
 5524|    418|        return rd.read_classic(range, value);
 5525|    430|    }
_ZN3scn2v34impl20reader_impl_for_boolIcE11get_optionsERKNS0_6detail12format_specsE:
 5528|    808|    {
 5529|    808|        SCN_GCC_COMPAT_PUSH
 5530|    808|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 5531|       |
 5532|    808|        switch (specs.type) {
 5533|    176|            case detail::presentation_type::string:
  ------------------
  |  Branch (5533:13): [True: 176, False: 632]
  ------------------
 5534|    176|                return bool_reader_base::allow_text;
 5535|       |
 5536|     10|            case detail::presentation_type::int_generic:
  ------------------
  |  Branch (5536:13): [True: 10, False: 798]
  ------------------
 5537|     20|            case detail::presentation_type::int_binary:
  ------------------
  |  Branch (5537:13): [True: 10, False: 798]
  ------------------
 5538|     26|            case detail::presentation_type::int_decimal:
  ------------------
  |  Branch (5538:13): [True: 6, False: 802]
  ------------------
 5539|     34|            case detail::presentation_type::int_hex:
  ------------------
  |  Branch (5539:13): [True: 8, False: 800]
  ------------------
 5540|     58|            case detail::presentation_type::int_octal:
  ------------------
  |  Branch (5540:13): [True: 24, False: 784]
  ------------------
 5541|     62|            case detail::presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (5541:13): [True: 4, False: 804]
  ------------------
 5542|     62|                return bool_reader_base::allow_numeric;
 5543|       |
 5544|    570|            default:
  ------------------
  |  Branch (5544:13): [True: 570, False: 238]
  ------------------
 5545|    570|                return bool_reader_base::allow_text |
 5546|    570|                       bool_reader_base::allow_numeric;
 5547|    808|        }
 5548|       |
 5549|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 5550|    808|    }
_ZNK3scn2v34impl11bool_readerIcE14read_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refERb:
 5427|     12|    {
 5428|     12|        scan_error err{scan_error::invalid_scanned_value,
 5429|     12|                       "Failed to read boolean"};
 5430|       |
 5431|     12|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5431:13): [True: 10, False: 2]
  ------------------
 5432|     10|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5432:22): [True: 0, False: 10]
  ------------------
 5433|      0|                return *r;
 5434|      0|            }
 5435|     10|            else {
 5436|     10|                err = r.error();
 5437|     10|            }
 5438|     10|        }
 5439|       |
 5440|     12|        if (m_options & allow_text) {
  ------------------
  |  Branch (5440:13): [True: 10, False: 2]
  ------------------
 5441|     10|            auto stdloc = loc.get<std::locale>();
 5442|     10|            const auto& numpunct =
 5443|     10|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5444|     10|            const auto truename = numpunct.truename();
 5445|     10|            const auto falsename = numpunct.falsename();
 5446|       |
 5447|     10|            if (auto r =
  ------------------
  |  Branch (5447:22): [True: 0, False: 10]
  ------------------
 5448|     10|                    read_textual_custom(range, value, truename, falsename)) {
 5449|      0|                return *r;
 5450|      0|            }
 5451|     10|            else {
 5452|     10|                err = r.error();
 5453|     10|            }
 5454|     10|        }
 5455|       |
 5456|     12|        return unexpected(err);
 5457|     12|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5383|    366|    {
 5384|    366|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5384:18): [True: 0, False: 366]
  ------------------
 5385|      0|            value = false;
 5386|      0|            return *r;
 5387|      0|        }
 5388|    366|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5388:18): [True: 0, False: 366]
  ------------------
 5389|      0|            value = true;
 5390|      0|            return *r;
 5391|      0|        }
 5392|       |
 5393|    366|        return unexpected_scan_error(
 5394|    366|            scan_error::invalid_scanned_value,
 5395|    366|            "Failed to read numeric boolean value: No match");
 5396|    366|    }
_ZN3scn2v34impl23read_matching_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NDTcl4implISF_EEE4typeE:
 2145|    732|{
 2146|    732|    auto it = read_code_unit(range);
 2147|    732|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    732|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 732]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|    732|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|    732|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 732, False: 0]
  |  |  ------------------
  ------------------
 2152|    732|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|    732|        return unexpected(parse_error::error);
 2154|    732|    }
 2155|       |
 2156|      0|    return *it;
 2157|    732|}
_ZNK3scn2v34impl11bool_readerIcE19read_textual_customINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RbNSF_17basic_string_viewIcNSF_11char_traitsIcEEEESR_:
 5467|     10|    {
 5468|     10|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5469|     10|        const auto shorter = std::pair{
 5470|     10|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5470:13): [True: 10, False: 0]
  ------------------
 5471|     10|        const auto longer = std::pair{
 5472|     10|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5472:13): [True: 0, False: 10]
  ------------------
 5473|       |
 5474|     10|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5474:18): [True: 0, False: 10]
  ------------------
 5475|      0|            value = shorter.second;
 5476|      0|            return *r;
 5477|      0|        }
 5478|     10|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5478:18): [True: 0, False: 10]
  ------------------
 5479|      0|            value = longer.second;
 5480|      0|            return *r;
 5481|      0|        }
 5482|       |
 5483|     10|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5484|     10|                                     "read_textual: No match");
 5485|     10|    }
_ZN3scn2v34impl20read_matching_stringINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewINDTcl4implISF_EEE4typeENSD_11char_traitsISN_EEEE:
 2178|     20|{
 2179|     20|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     12|    }                                                  \
  |  |  |  | 3671|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2180|      8|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2181|      8|                    .transform_error(make_eof_parse_error));
 2182|       |
 2183|      8|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2184|      8|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 0]
  |  |  ------------------
  ------------------
 2185|      8|        return unexpected(parse_error::error);
 2186|      8|    }
 2187|      0|    return it;
 2188|      8|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_l:
 1856|    808|{
 1857|    808|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|    808|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    808|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|    808|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|    808|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|    808|        if (sz < count) {
 1862|    808|            return unexpected(eof_error::eof);
 1863|    808|        }
 1864|       |
 1865|    808|        return ranges::next(range.begin(), count);
 1866|    808|    }
 1867|    808|    else {
 1868|    808|        auto it = range.begin();
 1869|    808|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 808]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|  4.07k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 3.40k, False: 666]
  ------------------
 1874|  3.40k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 142, False: 3.26k]
  ------------------
 1875|    142|                return unexpected(eof_error::eof);
 1876|    142|            }
 1877|  3.40k|        }
 1878|       |
 1879|    666|        return it;
 1880|    808|    }
 1881|    808|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEmT_:
 1094|    808|{
 1095|    808|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|    808|        return r.size();
 1097|    808|    }
 1098|    808|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|    808|                           ranges::const_iterator_t<Range>,
 1100|    808|                           typename detail::basic_scan_buffer<
 1101|    808|                               detail::char_t<Range>>::forward_iterator>) {
 1102|    808|        if constexpr (ranges::common_range<Range>) {
 1103|    808|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|    808|        }
 1105|    808|        else {
 1106|    808|            if (r.begin().stores_parent()) {
 1107|    808|                return static_cast<size_t>(
 1108|    808|                    r.begin().parent()->chars_available() -
 1109|    808|                    r.begin().position());
 1110|    808|            }
 1111|    808|            return r.begin().contiguous_segment().size();
 1112|    808|        }
 1113|    808|    }
 1114|    808|    else {
 1115|    808|        return 0;
 1116|    808|    }
 1117|    808|}
_ZNK3scn2v34impl16bool_reader_base12read_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5354|    418|    {
 5355|    418|        scan_error err{scan_error::invalid_scanned_value,
 5356|    418|                       "Failed to read boolean"};
 5357|       |
 5358|    418|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5358:13): [True: 356, False: 62]
  ------------------
 5359|    356|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5359:22): [True: 0, False: 356]
  ------------------
 5360|      0|                return *r;
 5361|      0|            }
 5362|    356|            else {
 5363|    356|                err = r.error();
 5364|    356|            }
 5365|    356|        }
 5366|       |
 5367|    418|        if (m_options & allow_text) {
  ------------------
  |  Branch (5367:13): [True: 394, False: 24]
  ------------------
 5368|    394|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5368:22): [True: 0, False: 394]
  ------------------
 5369|      0|                return *r;
 5370|      0|            }
 5371|    394|            else {
 5372|    394|                err = r.error();
 5373|    394|            }
 5374|    394|        }
 5375|       |
 5376|    418|        return unexpected(err);
 5377|    418|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5401|    394|    {
 5402|    394|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5402:18): [True: 0, False: 394]
  ------------------
 5403|      0|            value = true;
 5404|      0|            return *r;
 5405|      0|        }
 5406|    394|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5406:18): [True: 0, False: 394]
  ------------------
 5407|      0|            value = false;
 5408|      0|            return *r;
 5409|      0|        }
 5410|       |
 5411|    394|        return unexpected_scan_error(
 5412|    394|            scan_error::invalid_scanned_value,
 5413|    394|            "Failed to read textual boolean value: No match");
 5414|    394|    }
_ZN3scn2v34impl28read_matching_string_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2193|    788|{
 2194|    788|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|    788|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    788|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    788|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    788|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 130, False: 658]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    130|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    130|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    130|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    130|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    130|    }                                                  \
  |  |  |  | 3671|    788|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    658|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2195|    658|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2196|    658|                    .transform_error(make_eof_parse_error));
 2197|       |
 2198|    658|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2198:19): [Folded - Ignored]
  ------------------
 2199|    658|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2200|    658|        if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|    658|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 658, False: 0]
  |  |  ------------------
  ------------------
 2201|    658|            return unexpected(parse_error::error);
 2202|    658|        }
 2203|      0|        return it;
 2204|    658|    }
 2205|    658|    else {
 2206|    658|        auto range_it = range.begin();
 2207|    658|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
 2208|    658|            if (SCN_UNLIKELY(*range_it !=
 2209|    658|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2210|    658|                return unexpected(parse_error::error);
 2211|    658|            }
 2212|    658|        }
 2213|    658|        return it;
 2214|    658|    }
 2215|    658|}
_ZNK3scn2v34impl20reader_impl_for_boolIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERbNSL_10locale_refE:
 5515|    378|    {
 5516|    378|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5517|       |
 5518|    378|#if !SCN_DISABLE_LOCALE
 5519|    378|        if (specs.localized) {
  ------------------
  |  Branch (5519:13): [True: 24, False: 354]
  ------------------
 5520|     24|            return rd.read_localized(range, loc, value);
 5521|     24|        }
 5522|    354|#endif
 5523|       |
 5524|    354|        return rd.read_classic(range, value);
 5525|    378|    }
_ZNK3scn2v34impl11bool_readerIcE14read_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refERb:
 5427|     24|    {
 5428|     24|        scan_error err{scan_error::invalid_scanned_value,
 5429|     24|                       "Failed to read boolean"};
 5430|       |
 5431|     24|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5431:13): [True: 22, False: 2]
  ------------------
 5432|     22|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5432:22): [True: 0, False: 22]
  ------------------
 5433|      0|                return *r;
 5434|      0|            }
 5435|     22|            else {
 5436|     22|                err = r.error();
 5437|     22|            }
 5438|     22|        }
 5439|       |
 5440|     24|        if (m_options & allow_text) {
  ------------------
  |  Branch (5440:13): [True: 8, False: 16]
  ------------------
 5441|      8|            auto stdloc = loc.get<std::locale>();
 5442|      8|            const auto& numpunct =
 5443|      8|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5444|      8|            const auto truename = numpunct.truename();
 5445|      8|            const auto falsename = numpunct.falsename();
 5446|       |
 5447|      8|            if (auto r =
  ------------------
  |  Branch (5447:22): [True: 0, False: 8]
  ------------------
 5448|      8|                    read_textual_custom(range, value, truename, falsename)) {
 5449|      0|                return *r;
 5450|      0|            }
 5451|      8|            else {
 5452|      8|                err = r.error();
 5453|      8|            }
 5454|      8|        }
 5455|       |
 5456|     24|        return unexpected(err);
 5457|     24|    }
_ZNK3scn2v34impl11bool_readerIcE19read_textual_customINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNSD_17basic_string_viewIcNSD_11char_traitsIcEEEESP_:
 5467|      8|    {
 5468|      8|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5469|      8|        const auto shorter = std::pair{
 5470|      8|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5470:13): [True: 8, False: 0]
  ------------------
 5471|      8|        const auto longer = std::pair{
 5472|      8|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5472:13): [True: 0, False: 8]
  ------------------
 5473|       |
 5474|      8|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5474:18): [True: 0, False: 8]
  ------------------
 5475|      0|            value = shorter.second;
 5476|      0|            return *r;
 5477|      0|        }
 5478|      8|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5478:18): [True: 0, False: 8]
  ------------------
 5479|      0|            value = longer.second;
 5480|      0|            return *r;
 5481|      0|        }
 5482|       |
 5483|      8|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5484|      8|                                     "read_textual: No match");
 5485|      8|    }
_ZN3scn2v34impl20read_matching_stringINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewINDTcl4implISD_EEE4typeENSB_11char_traitsISL_EEEE:
 2178|     16|{
 2179|     16|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2, False: 14]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      2|    }                                                  \
  |  |  |  | 3671|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     14|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2180|     14|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2181|     14|                    .transform_error(make_eof_parse_error));
 2182|       |
 2183|     14|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2184|     14|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14, False: 0]
  |  |  ------------------
  ------------------
 2185|     14|        return unexpected(parse_error::error);
 2186|     14|    }
 2187|      0|    return it;
 2188|     14|}
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIcEENS0_13scan_expectedIPKcEERT_:
 6192|  10.3k|    {
 6193|  10.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  10.3k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  10.3k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  10.3k|            auto rd = make_reader<T, char_type>();
 6198|  10.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  10.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.68k, False: 622]
  |  |  ------------------
  ------------------
 6199|  9.68k|                return unexpected(e);
 6200|  9.68k|            }
 6201|       |
 6202|    622|            return impl(rd, range, value);
 6203|  10.3k|        }
 6204|  10.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  10.3k|            auto rd = make_reader<T, char_type>();
 6206|  10.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  10.3k|                return unexpected(e);
 6208|  10.3k|            }
 6209|       |
 6210|  10.3k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  10.3k|                specs.width != 0) {
 6212|  10.3k|                return impl(rd, range, value);
 6213|  10.3k|            }
 6214|       |
 6215|  10.3k|            auto crange = get_as_contiguous(range);
 6216|  10.3k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  10.3k|            return ranges::next(range.begin(),
 6218|  10.3k|                                ranges::distance(crange.begin(), it));
 6219|  10.3k|        }
 6220|  10.3k|        else {
 6221|  10.3k|            SCN_EXPECT(false);
 6222|  10.3k|            SCN_UNREACHABLE;
 6223|  10.3k|        }
 6224|  10.3k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_charIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    622|    {
 6124|    622|        const bool need_skipped_width =
 6125|    622|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 174, False: 448]
  |  Branch (6125:33): [True: 372, False: 76]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    622|        auto it = rng.begin();
 6129|    622|        std::ptrdiff_t prefix_width = 0;
 6130|    622|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 378, False: 244]
  ------------------
 6131|    378|            auto max_width_view = take_width(rng, specs.precision);
 6132|    378|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    378|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    378|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    378|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    378|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 378]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    378|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    378|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    378|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    378|            it = prefix_result.first.base();
 6135|    378|            prefix_width = prefix_result.second;
 6136|    378|        }
 6137|    244|        else {
 6138|    244|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    244|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    244|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    244|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    244|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 244]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    244|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    244|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    244|            std::tie(it, prefix_width) = prefix_result;
 6140|    244|        }
 6141|    622|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    622|        std::ptrdiff_t value_width = 0;
 6145|    622|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 378, False: 244]
  ------------------
 6146|    378|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 372]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|    372|            const auto initial_width = specs.precision - prefix_width;
 6154|    372|            auto max_width_view =
 6155|    372|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    372|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    372|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    372|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    372|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    372|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 32, False: 340]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     32|    }                                                  \
  |  |  |  | 3671|    372|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    340|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    340|            it = w_it.base();
 6158|    340|            value_width = initial_width - w_it.count();
 6159|    340|        }
 6160|    244|        else {
 6161|    244|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    244|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    244|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    244|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 20, False: 224]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|     20|    }                                                  \
  |  | 3671|    244|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    244|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|    224|                                             specs, value, loc));
 6163|       |
 6164|    224|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 164, False: 60]
  ------------------
 6165|    164|                value_width = calculate_text_width(
 6166|    164|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    164|                        .view());
 6168|    164|            }
 6169|    224|        }
 6170|       |
 6171|       |        // Read postfix
 6172|    564|        std::ptrdiff_t postfix_width = 0;
 6173|    564|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 564, False: 0]
  ------------------
 6174|    564|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|    564|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    564|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    564|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    564|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 564]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    564|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    564|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|    564|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|    564|                                 rd.skip_ws_before_read(), prefix_width,
 6177|    564|                                 value_width));
 6178|    564|            std::tie(it, postfix_width) = postfix_result;
 6179|    564|        }
 6180|       |
 6181|    564|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|    564|                                                 value_width, postfix_width);
 6183|    564|            !e) {
  ------------------
  |  Branch (6183:13): [True: 152, False: 412]
  ------------------
 6184|    152|            return unexpected(e);
 6185|    152|        }
 6186|       |
 6187|    412|        return it;
 6188|    564|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 6192|  10.3k|    {
 6193|  10.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  10.3k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  10.3k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  10.3k|            auto rd = make_reader<T, char_type>();
 6198|  10.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  10.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.69k, False: 678]
  |  |  ------------------
  ------------------
 6199|  9.69k|                return unexpected(e);
 6200|  9.69k|            }
 6201|       |
 6202|    678|            return impl(rd, range, value);
 6203|  10.3k|        }
 6204|  10.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  10.3k|            auto rd = make_reader<T, char_type>();
 6206|  10.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  10.3k|                return unexpected(e);
 6208|  10.3k|            }
 6209|       |
 6210|  10.3k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  10.3k|                specs.width != 0) {
 6212|  10.3k|                return impl(rd, range, value);
 6213|  10.3k|            }
 6214|       |
 6215|  10.3k|            auto crange = get_as_contiguous(range);
 6216|  10.3k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  10.3k|            return ranges::next(range.begin(),
 6218|  10.3k|                                ranges::distance(crange.begin(), it));
 6219|  10.3k|        }
 6220|  10.3k|        else {
 6221|  10.3k|            SCN_EXPECT(false);
 6222|  10.3k|            SCN_UNREACHABLE;
 6223|  10.3k|        }
 6224|  10.3k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    678|    {
 6124|    678|        const bool need_skipped_width =
 6125|    678|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 182, False: 496]
  |  Branch (6125:33): [True: 378, False: 118]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    678|        auto it = rng.begin();
 6129|    678|        std::ptrdiff_t prefix_width = 0;
 6130|    678|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 386, False: 292]
  ------------------
 6131|    386|            auto max_width_view = take_width(rng, specs.precision);
 6132|    386|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    386|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    386|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    386|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    386|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 16, False: 370]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     16|    }                                                  \
  |  |  |  | 3671|    386|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    370|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    370|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    370|            it = prefix_result.first.base();
 6135|    370|            prefix_width = prefix_result.second;
 6136|    370|        }
 6137|    292|        else {
 6138|    292|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    292|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    292|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    292|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    292|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 292]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    292|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    292|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    292|            std::tie(it, prefix_width) = prefix_result;
 6140|    292|        }
 6141|    662|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    662|        std::ptrdiff_t value_width = 0;
 6145|    662|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 370, False: 292]
  ------------------
 6146|    370|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 8, False: 362]
  ------------------
 6147|      8|                return unexpected_scan_error(
 6148|      8|                    scan_error::invalid_scanned_value,
 6149|      8|                    "Too many fill characters before value, "
 6150|      8|                    "precision exceeded before reading value");
 6151|      8|            }
 6152|       |
 6153|    362|            const auto initial_width = specs.precision - prefix_width;
 6154|    362|            auto max_width_view =
 6155|    362|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    362|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    362|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    362|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    362|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    362|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 362, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    362|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    362|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    362|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    362|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    362|    }                                                  \
  |  |  |  | 3671|    362|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    292|        else {
 6161|    292|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    292|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    292|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    292|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 292, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    292|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    292|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    292|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    292|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    292|    }                                                  \
  |  | 3671|    292|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    292|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6192|  10.3k|    {
 6193|  10.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  10.3k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  10.3k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  10.3k|            auto rd = make_reader<T, char_type>();
 6198|  10.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  10.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 128, False: 10.1k]
  |  |  ------------------
  ------------------
 6199|    128|                return unexpected(e);
 6200|    128|            }
 6201|       |
 6202|  10.1k|            return impl(rd, range, value);
 6203|  10.3k|        }
 6204|  10.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  10.3k|            auto rd = make_reader<T, char_type>();
 6206|  10.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  10.3k|                return unexpected(e);
 6208|  10.3k|            }
 6209|       |
 6210|  10.3k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  10.3k|                specs.width != 0) {
 6212|  10.3k|                return impl(rd, range, value);
 6213|  10.3k|            }
 6214|       |
 6215|  10.3k|            auto crange = get_as_contiguous(range);
 6216|  10.3k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  10.3k|            return ranges::next(range.begin(),
 6218|  10.3k|                                ranges::distance(crange.begin(), it));
 6219|  10.3k|        }
 6220|  10.3k|        else {
 6221|  10.3k|            SCN_EXPECT(false);
 6222|  10.3k|            SCN_UNREACHABLE;
 6223|  10.3k|        }
 6224|  10.3k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6123|  10.1k|    {
 6124|  10.1k|        const bool need_skipped_width =
 6125|  10.1k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 316, False: 9.86k]
  |  Branch (6125:33): [True: 1.41k, False: 8.44k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  10.1k|        auto it = rng.begin();
 6129|  10.1k|        std::ptrdiff_t prefix_width = 0;
 6130|  10.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 1.46k, False: 8.71k]
  ------------------
 6131|  1.46k|            auto max_width_view = take_width(rng, specs.precision);
 6132|  1.46k|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|  1.46k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.46k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.46k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 1.45k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     12|    }                                                  \
  |  |  |  | 3671|  1.46k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.45k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|  1.45k|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|  1.45k|            it = prefix_result.first.base();
 6135|  1.45k|            prefix_width = prefix_result.second;
 6136|  1.45k|        }
 6137|  8.71k|        else {
 6138|  8.71k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  8.71k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  8.71k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  8.71k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  8.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 8.71k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  8.71k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  8.71k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  8.71k|            std::tie(it, prefix_width) = prefix_result;
 6140|  8.71k|        }
 6141|  10.1k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  10.1k|        std::ptrdiff_t value_width = 0;
 6145|  10.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 1.45k, False: 8.71k]
  ------------------
 6146|  1.45k|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 16, False: 1.43k]
  ------------------
 6147|     16|                return unexpected_scan_error(
 6148|     16|                    scan_error::invalid_scanned_value,
 6149|     16|                    "Too many fill characters before value, "
 6150|     16|                    "precision exceeded before reading value");
 6151|     16|            }
 6152|       |
 6153|  1.43k|            const auto initial_width = specs.precision - prefix_width;
 6154|  1.43k|            auto max_width_view =
 6155|  1.43k|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|  1.43k|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|  1.43k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.43k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.43k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.43k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 940, False: 496]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    940|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    940|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    940|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    940|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    940|    }                                                  \
  |  |  |  | 3671|  1.43k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    496|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    496|            it = w_it.base();
 6158|    496|            value_width = initial_width - w_it.count();
 6159|    496|        }
 6160|  8.71k|        else {
 6161|  8.71k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  8.71k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  8.71k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  8.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 6.78k, False: 1.93k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  6.78k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  6.78k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  6.78k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  6.78k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  6.78k|    }                                                  \
  |  | 3671|  8.71k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  8.71k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  1.93k|                                             specs, value, loc));
 6163|       |
 6164|  1.93k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 230, False: 1.70k]
  ------------------
 6165|    230|                value_width = calculate_text_width(
 6166|    230|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    230|                        .view());
 6168|    230|            }
 6169|  1.93k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  2.42k|        std::ptrdiff_t postfix_width = 0;
 6173|  2.42k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 1.98k, False: 446]
  ------------------
 6174|  1.98k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  1.98k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.98k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.98k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.98k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.98k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.98k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.98k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  1.98k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  1.98k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  1.98k|                                 value_width));
 6178|  1.98k|            std::tie(it, postfix_width) = postfix_result;
 6179|  1.98k|        }
 6180|       |
 6181|  2.42k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  2.42k|                                                 value_width, postfix_width);
 6183|  2.42k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 130, False: 2.29k]
  ------------------
 6184|    130|            return unexpected(e);
 6185|    130|        }
 6186|       |
 6187|  2.29k|        return it;
 6188|  2.42k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6192|  10.3k|    {
 6193|  10.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  10.3k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  10.3k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  10.3k|            auto rd = make_reader<T, char_type>();
 6198|  10.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  10.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 128, False: 10.1k]
  |  |  ------------------
  ------------------
 6199|    128|                return unexpected(e);
 6200|    128|            }
 6201|       |
 6202|  10.1k|            return impl(rd, range, value);
 6203|  10.3k|        }
 6204|  10.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  10.3k|            auto rd = make_reader<T, char_type>();
 6206|  10.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  10.3k|                return unexpected(e);
 6208|  10.3k|            }
 6209|       |
 6210|  10.3k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  10.3k|                specs.width != 0) {
 6212|  10.3k|                return impl(rd, range, value);
 6213|  10.3k|            }
 6214|       |
 6215|  10.3k|            auto crange = get_as_contiguous(range);
 6216|  10.3k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  10.3k|            return ranges::next(range.begin(),
 6218|  10.3k|                                ranges::distance(crange.begin(), it));
 6219|  10.3k|        }
 6220|  10.3k|        else {
 6221|  10.3k|            SCN_EXPECT(false);
 6222|  10.3k|            SCN_UNREACHABLE;
 6223|  10.3k|        }
 6224|  10.3k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6123|  10.1k|    {
 6124|  10.1k|        const bool need_skipped_width =
 6125|  10.1k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 316, False: 9.86k]
  |  Branch (6125:33): [True: 1.41k, False: 8.44k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  10.1k|        auto it = rng.begin();
 6129|  10.1k|        std::ptrdiff_t prefix_width = 0;
 6130|  10.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 1.46k, False: 8.71k]
  ------------------
 6131|  1.46k|            auto max_width_view = take_width(rng, specs.precision);
 6132|  1.46k|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|  1.46k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.46k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.46k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 1.45k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     12|    }                                                  \
  |  |  |  | 3671|  1.46k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.45k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|  1.45k|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|  1.45k|            it = prefix_result.first.base();
 6135|  1.45k|            prefix_width = prefix_result.second;
 6136|  1.45k|        }
 6137|  8.71k|        else {
 6138|  8.71k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  8.71k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  8.71k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  8.71k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  8.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 8.71k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  8.71k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  8.71k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  8.71k|            std::tie(it, prefix_width) = prefix_result;
 6140|  8.71k|        }
 6141|  10.1k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  10.1k|        std::ptrdiff_t value_width = 0;
 6145|  10.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 1.45k, False: 8.71k]
  ------------------
 6146|  1.45k|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 16, False: 1.43k]
  ------------------
 6147|     16|                return unexpected_scan_error(
 6148|     16|                    scan_error::invalid_scanned_value,
 6149|     16|                    "Too many fill characters before value, "
 6150|     16|                    "precision exceeded before reading value");
 6151|     16|            }
 6152|       |
 6153|  1.43k|            const auto initial_width = specs.precision - prefix_width;
 6154|  1.43k|            auto max_width_view =
 6155|  1.43k|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|  1.43k|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|  1.43k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.43k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.43k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.43k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 940, False: 496]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    940|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    940|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    940|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    940|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    940|    }                                                  \
  |  |  |  | 3671|  1.43k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    496|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    496|            it = w_it.base();
 6158|    496|            value_width = initial_width - w_it.count();
 6159|    496|        }
 6160|  8.71k|        else {
 6161|  8.71k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  8.71k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  8.71k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  8.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 6.78k, False: 1.93k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  6.78k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  6.78k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  6.78k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  6.78k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  6.78k|    }                                                  \
  |  | 3671|  8.71k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  8.71k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  1.93k|                                             specs, value, loc));
 6163|       |
 6164|  1.93k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 230, False: 1.70k]
  ------------------
 6165|    230|                value_width = calculate_text_width(
 6166|    230|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    230|                        .view());
 6168|    230|            }
 6169|  1.93k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  2.42k|        std::ptrdiff_t postfix_width = 0;
 6173|  2.42k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 1.98k, False: 446]
  ------------------
 6174|  1.98k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  1.98k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.98k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.98k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.98k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.98k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.98k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.98k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  1.98k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  1.98k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  1.98k|                                 value_width));
 6178|  1.98k|            std::tie(it, postfix_width) = postfix_result;
 6179|  1.98k|        }
 6180|       |
 6181|  2.42k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  2.42k|                                                 value_width, postfix_width);
 6183|  2.42k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 130, False: 2.29k]
  ------------------
 6184|    130|            return unexpected(e);
 6185|    130|        }
 6186|       |
 6187|  2.29k|        return it;
 6188|  2.42k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKcEERT_:
 6192|  10.3k|    {
 6193|  10.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  10.3k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  10.3k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  10.3k|            auto rd = make_reader<T, char_type>();
 6198|  10.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  10.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 128, False: 10.1k]
  |  |  ------------------
  ------------------
 6199|    128|                return unexpected(e);
 6200|    128|            }
 6201|       |
 6202|  10.1k|            return impl(rd, range, value);
 6203|  10.3k|        }
 6204|  10.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  10.3k|            auto rd = make_reader<T, char_type>();
 6206|  10.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  10.3k|                return unexpected(e);
 6208|  10.3k|            }
 6209|       |
 6210|  10.3k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  10.3k|                specs.width != 0) {
 6212|  10.3k|                return impl(rd, range, value);
 6213|  10.3k|            }
 6214|       |
 6215|  10.3k|            auto crange = get_as_contiguous(range);
 6216|  10.3k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  10.3k|            return ranges::next(range.begin(),
 6218|  10.3k|                                ranges::distance(crange.begin(), it));
 6219|  10.3k|        }
 6220|  10.3k|        else {
 6221|  10.3k|            SCN_EXPECT(false);
 6222|  10.3k|            SCN_UNREACHABLE;
 6223|  10.3k|        }
 6224|  10.3k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6123|  10.1k|    {
 6124|  10.1k|        const bool need_skipped_width =
 6125|  10.1k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 316, False: 9.86k]
  |  Branch (6125:33): [True: 1.41k, False: 8.44k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  10.1k|        auto it = rng.begin();
 6129|  10.1k|        std::ptrdiff_t prefix_width = 0;
 6130|  10.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 1.46k, False: 8.71k]
  ------------------
 6131|  1.46k|            auto max_width_view = take_width(rng, specs.precision);
 6132|  1.46k|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|  1.46k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.46k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.46k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 1.45k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     12|    }                                                  \
  |  |  |  | 3671|  1.46k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.45k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|  1.45k|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|  1.45k|            it = prefix_result.first.base();
 6135|  1.45k|            prefix_width = prefix_result.second;
 6136|  1.45k|        }
 6137|  8.71k|        else {
 6138|  8.71k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  8.71k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  8.71k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  8.71k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  8.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 8.71k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  8.71k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  8.71k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  8.71k|            std::tie(it, prefix_width) = prefix_result;
 6140|  8.71k|        }
 6141|  10.1k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  10.1k|        std::ptrdiff_t value_width = 0;
 6145|  10.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 1.45k, False: 8.71k]
  ------------------
 6146|  1.45k|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 16, False: 1.43k]
  ------------------
 6147|     16|                return unexpected_scan_error(
 6148|     16|                    scan_error::invalid_scanned_value,
 6149|     16|                    "Too many fill characters before value, "
 6150|     16|                    "precision exceeded before reading value");
 6151|     16|            }
 6152|       |
 6153|  1.43k|            const auto initial_width = specs.precision - prefix_width;
 6154|  1.43k|            auto max_width_view =
 6155|  1.43k|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|  1.43k|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|  1.43k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.43k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.43k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.43k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 940, False: 496]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    940|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    940|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    940|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    940|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    940|    }                                                  \
  |  |  |  | 3671|  1.43k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    496|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    496|            it = w_it.base();
 6158|    496|            value_width = initial_width - w_it.count();
 6159|    496|        }
 6160|  8.71k|        else {
 6161|  8.71k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  8.71k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  8.71k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  8.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 6.78k, False: 1.93k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  6.78k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  6.78k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  6.78k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  6.78k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  6.78k|    }                                                  \
  |  | 3671|  8.71k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  8.71k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  1.93k|                                             specs, value, loc));
 6163|       |
 6164|  1.93k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 230, False: 1.70k]
  ------------------
 6165|    230|                value_width = calculate_text_width(
 6166|    230|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    230|                        .view());
 6168|    230|            }
 6169|  1.93k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  2.42k|        std::ptrdiff_t postfix_width = 0;
 6173|  2.42k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 1.98k, False: 446]
  ------------------
 6174|  1.98k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  1.98k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.98k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.98k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.98k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.98k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.98k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.98k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  1.98k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  1.98k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  1.98k|                                 value_width));
 6178|  1.98k|            std::tie(it, postfix_width) = postfix_result;
 6179|  1.98k|        }
 6180|       |
 6181|  2.42k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  2.42k|                                                 value_width, postfix_width);
 6183|  2.42k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 130, False: 2.29k]
  ------------------
 6184|    130|            return unexpected(e);
 6185|    130|        }
 6186|       |
 6187|  2.29k|        return it;
 6188|  2.42k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|   175k|{
 5795|   175k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   175k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 175k]
  |  |  ------------------
  ------------------
 5796|      0|        return unexpected(e);
 5797|      0|    }
 5798|       |
 5799|   175k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 19.5k, False: 156k]
  ------------------
 5800|  19.5k|        return range.begin();
 5801|  19.5k|    }
 5802|       |
 5803|   156k|    return skip_classic_whitespace(range);
 5804|   175k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
 5870|  19.5k|    {
 5871|  19.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  19.5k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  19.5k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  19.5k|            auto rd = make_reader<T, char_type>();
 5876|  19.5k|            return impl(rd, range, value);
 5877|  19.5k|        }
 5878|  19.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  19.5k|            auto rd = make_reader<T, char_type>();
 5880|  19.5k|            if (!is_segment_contiguous(range)) {
 5881|  19.5k|                return impl(rd, range, value);
 5882|  19.5k|            }
 5883|  19.5k|            auto crange = get_as_contiguous(range);
 5884|  19.5k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  19.5k|            return ranges::next(range.begin(),
 5886|  19.5k|                                ranges::distance(crange.begin(), it));
 5887|  19.5k|        }
 5888|  19.5k|        else {
 5889|  19.5k|            SCN_EXPECT(false);
 5890|  19.5k|            SCN_UNREACHABLE;
 5891|  19.5k|        }
 5892|  19.5k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  19.5k|    {
 5863|  19.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  19.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  19.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  19.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  19.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 19.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  19.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  19.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  19.5k|                        .transform_error(make_eof_scan_error));
 5865|  19.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  19.5k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|  19.5k|    {
 3528|  19.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  19.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|  19.5k|        return read_default_with_base(range, value, 10);
 3530|  19.5k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|  19.5k|    {
 3492|  19.5k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3672|  19.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  19.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  19.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  19.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 19.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  19.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  19.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|  19.5k|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|  19.5k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|  19.5k|            if (prefix_result.sign == sign_type::minus_sign) {
 3497|  19.5k|                return unexpected_scan_error(
 3498|  19.5k|                    scan_error::invalid_scanned_value,
 3499|  19.5k|                    "Unexpected '-' sign when parsing an "
 3500|  19.5k|                    "unsigned value");
 3501|  19.5k|            }
 3502|  19.5k|        }
 3503|       |
 3504|  19.5k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 19.5k]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  39.0k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|  19.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  19.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  19.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  19.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 19.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  19.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  19.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  39.0k|                parse_integer_digits_without_thsep(
 3511|  39.0k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  39.0k|                    prefix_result.parsed_base));
 3513|       |
 3514|  39.0k|        auto buf = make_contiguous_buffer(
 3515|  39.0k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  39.0k|        SCN_TRY(result_it,
  ------------------
  |  | 3672|  19.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  19.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  19.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  19.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 19.5k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  19.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  19.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  19.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  19.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  19.5k|    }                                                  \
  |  |  |  | 3671|  19.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|      0|                                    prefix_result.parsed_base));
 3519|       |
 3520|      0|        return ranges::next(prefix_result.iterator,
 3521|      0|                            ranges::distance(buf.view().begin(), result_it));
 3522|  39.0k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
 5870|  19.5k|    {
 5871|  19.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  19.5k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  19.5k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  19.5k|            auto rd = make_reader<T, char_type>();
 5876|  19.5k|            return impl(rd, range, value);
 5877|  19.5k|        }
 5878|  19.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  19.5k|            auto rd = make_reader<T, char_type>();
 5880|  19.5k|            if (!is_segment_contiguous(range)) {
 5881|  19.5k|                return impl(rd, range, value);
 5882|  19.5k|            }
 5883|  19.5k|            auto crange = get_as_contiguous(range);
 5884|  19.5k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  19.5k|            return ranges::next(range.begin(),
 5886|  19.5k|                                ranges::distance(crange.begin(), it));
 5887|  19.5k|        }
 5888|  19.5k|        else {
 5889|  19.5k|            SCN_EXPECT(false);
 5890|  19.5k|            SCN_UNREACHABLE;
 5891|  19.5k|        }
 5892|  19.5k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  19.5k|    {
 5863|  19.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  19.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  19.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  19.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  19.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 19.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  19.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  19.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  19.5k|                        .transform_error(make_eof_scan_error));
 5865|  19.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  19.5k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|  19.5k|    {
 3528|  19.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  19.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|  19.5k|        return read_default_with_base(range, value, 10);
 3530|  19.5k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|  19.5k|    {
 3492|  19.5k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3672|  19.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  19.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  19.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  19.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 19.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  19.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  19.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|  19.5k|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|  19.5k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|  19.5k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3496:17): [True: 0, False: 19.5k]
  ------------------
 3497|      0|                return unexpected_scan_error(
 3498|      0|                    scan_error::invalid_scanned_value,
 3499|      0|                    "Unexpected '-' sign when parsing an "
 3500|      0|                    "unsigned value");
 3501|      0|            }
 3502|  19.5k|        }
 3503|       |
 3504|  19.5k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 19.5k]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  39.0k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|  19.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  19.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  19.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  19.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 19.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  19.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  19.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  39.0k|                parse_integer_digits_without_thsep(
 3511|  39.0k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  39.0k|                    prefix_result.parsed_base));
 3513|       |
 3514|  39.0k|        auto buf = make_contiguous_buffer(
 3515|  39.0k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  39.0k|        SCN_TRY(result_it,
  ------------------
  |  | 3672|  19.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  19.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  19.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  19.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 19.5k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  19.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  19.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  19.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  19.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  19.5k|    }                                                  \
  |  |  |  | 3671|  19.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|      0|                                    prefix_result.parsed_base));
 3519|       |
 3520|      0|        return ranges::next(prefix_result.iterator,
 3521|      0|                            ranges::distance(buf.view().begin(), result_it));
 3522|  39.0k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIPvEENS0_13scan_expectedIPKwEERT_:
 5870|  19.5k|    {
 5871|  19.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  19.5k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  19.5k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  19.5k|            auto rd = make_reader<T, char_type>();
 5876|  19.5k|            return impl(rd, range, value);
 5877|  19.5k|        }
 5878|  19.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  19.5k|            auto rd = make_reader<T, char_type>();
 5880|  19.5k|            if (!is_segment_contiguous(range)) {
 5881|  19.5k|                return impl(rd, range, value);
 5882|  19.5k|            }
 5883|  19.5k|            auto crange = get_as_contiguous(range);
 5884|  19.5k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  19.5k|            return ranges::next(range.begin(),
 5886|  19.5k|                                ranges::distance(crange.begin(), it));
 5887|  19.5k|        }
 5888|  19.5k|        else {
 5889|  19.5k|            SCN_EXPECT(false);
 5890|  19.5k|            SCN_UNREACHABLE;
 5891|  19.5k|        }
 5892|  19.5k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_23reader_impl_for_voidptrIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 5862|  19.5k|    {
 5863|  19.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  19.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  19.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  19.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  19.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 19.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  19.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  19.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  19.5k|                        .transform_error(make_eof_scan_error));
 5865|  19.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  19.5k|    }
_ZNK3scn2v34impl23reader_impl_for_voidptrIwE19skip_ws_before_readEv:
 5747|  20.0k|    {
 5748|  20.0k|        return true;
 5749|  20.0k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RPvNS0_6detail10locale_refE:
 5764|  19.9k|    {
 5765|  19.9k|        detail::format_specs specs{};
 5766|  19.9k|        specs.type = detail::presentation_type::int_hex;
 5767|       |
 5768|  19.9k|        std::uintptr_t intvalue{};
 5769|  19.9k|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3672|  19.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  19.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  19.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  19.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 19.9k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  19.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  19.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  19.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  19.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  19.9k|    }                                                  \
  |  |  |  | 3671|  19.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5770|      0|                                                                intvalue, loc));
 5771|      0|        value = reinterpret_cast<void*>(intvalue);
 5772|      0|        return result;
 5773|  19.9k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIbEENS0_13scan_expectedIPKwEERT_:
 5870|  19.5k|    {
 5871|  19.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  19.5k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  19.5k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  19.5k|            auto rd = make_reader<T, char_type>();
 5876|  19.5k|            return impl(rd, range, value);
 5877|  19.5k|        }
 5878|  19.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  19.5k|            auto rd = make_reader<T, char_type>();
 5880|  19.5k|            if (!is_segment_contiguous(range)) {
 5881|  19.5k|                return impl(rd, range, value);
 5882|  19.5k|            }
 5883|  19.5k|            auto crange = get_as_contiguous(range);
 5884|  19.5k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  19.5k|            return ranges::next(range.begin(),
 5886|  19.5k|                                ranges::distance(crange.begin(), it));
 5887|  19.5k|        }
 5888|  19.5k|        else {
 5889|  19.5k|            SCN_EXPECT(false);
 5890|  19.5k|            SCN_UNREACHABLE;
 5891|  19.5k|        }
 5892|  19.5k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_20reader_impl_for_boolIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  19.5k|    {
 5863|  19.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  19.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  19.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  19.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  19.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 19.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  19.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  19.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  19.5k|                        .transform_error(make_eof_scan_error));
 5865|  19.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  19.5k|    }
_ZNK3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIwEEwE19skip_ws_before_readEv:
 3034|  20.2k|    {
 3035|  20.2k|        return true;
 3036|  20.2k|    }
_ZNK3scn2v34impl20reader_impl_for_boolIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNS0_6detail10locale_refE:
 5503|  19.5k|    {
 5504|  19.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  19.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5505|       |
 5506|  19.5k|        return bool_reader<CharT>{}.read_classic(range, value);
 5507|  19.5k|    }
_ZNK3scn2v34impl16bool_reader_base12read_classicINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5354|  19.9k|    {
 5355|  19.9k|        scan_error err{scan_error::invalid_scanned_value,
 5356|  19.9k|                       "Failed to read boolean"};
 5357|       |
 5358|  19.9k|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5358:13): [True: 19.9k, False: 44]
  ------------------
 5359|  19.9k|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5359:22): [True: 0, False: 19.9k]
  ------------------
 5360|      0|                return *r;
 5361|      0|            }
 5362|  19.9k|            else {
 5363|  19.9k|                err = r.error();
 5364|  19.9k|            }
 5365|  19.9k|        }
 5366|       |
 5367|  19.9k|        if (m_options & allow_text) {
  ------------------
  |  Branch (5367:13): [True: 19.9k, False: 14]
  ------------------
 5368|  19.9k|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5368:22): [True: 0, False: 19.9k]
  ------------------
 5369|      0|                return *r;
 5370|      0|            }
 5371|  19.9k|            else {
 5372|  19.9k|                err = r.error();
 5373|  19.9k|            }
 5374|  19.9k|        }
 5375|       |
 5376|  19.9k|        return unexpected(err);
 5377|  19.9k|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5383|  19.9k|    {
 5384|  19.9k|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5384:18): [True: 0, False: 19.9k]
  ------------------
 5385|      0|            value = false;
 5386|      0|            return *r;
 5387|      0|        }
 5388|  19.9k|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5388:18): [True: 0, False: 19.9k]
  ------------------
 5389|      0|            value = true;
 5390|      0|            return *r;
 5391|      0|        }
 5392|       |
 5393|  19.9k|        return unexpected_scan_error(
 5394|  19.9k|            scan_error::invalid_scanned_value,
 5395|  19.9k|            "Failed to read numeric boolean value: No match");
 5396|  19.9k|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5401|  19.9k|    {
 5402|  19.9k|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5402:18): [True: 0, False: 19.9k]
  ------------------
 5403|      0|            value = true;
 5404|      0|            return *r;
 5405|      0|        }
 5406|  19.9k|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5406:18): [True: 0, False: 19.9k]
  ------------------
 5407|      0|            value = false;
 5408|      0|            return *r;
 5409|      0|        }
 5410|       |
 5411|  19.9k|        return unexpected_scan_error(
 5412|  19.9k|            scan_error::invalid_scanned_value,
 5413|  19.9k|            "Failed to read textual boolean value: No match");
 5414|  19.9k|    }
_ZN3scn2v34impl28read_matching_string_classicINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2193|  39.8k|{
 2194|  39.8k|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  39.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  39.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  39.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  39.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 136, False: 39.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    136|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    136|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    136|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    136|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    136|    }                                                  \
  |  |  |  | 3671|  39.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  39.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2195|  39.7k|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2196|  39.7k|                    .transform_error(make_eof_parse_error));
 2197|       |
 2198|  39.7k|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2198:19): [Folded - Ignored]
  ------------------
 2199|  39.7k|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2200|  39.7k|        if (SCN_UNLIKELY(sv.view() != str)) {
 2201|  39.7k|            return unexpected(parse_error::error);
 2202|  39.7k|        }
 2203|  39.7k|        return it;
 2204|  39.7k|    }
 2205|  39.7k|    else {
 2206|  39.7k|        auto range_it = range.begin();
 2207|  39.7k|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
  ------------------
  |  Branch (2207:28): [True: 39.7k, False: 0]
  ------------------
 2208|  39.7k|            if (SCN_UNLIKELY(*range_it !=
  ------------------
  |  |  859|  39.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 39.7k, False: 0]
  |  |  ------------------
  ------------------
 2209|  39.7k|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2210|  39.7k|                return unexpected(parse_error::error);
 2211|  39.7k|            }
 2212|  39.7k|        }
 2213|      0|        return it;
 2214|  39.7k|    }
 2215|  39.7k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIwEENS0_13scan_expectedIPKwEERT_:
 5870|  19.5k|    {
 5871|  19.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  19.5k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  19.5k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  19.5k|            auto rd = make_reader<T, char_type>();
 5876|  19.5k|            return impl(rd, range, value);
 5877|  19.5k|        }
 5878|  19.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  19.5k|            auto rd = make_reader<T, char_type>();
 5880|  19.5k|            if (!is_segment_contiguous(range)) {
 5881|  19.5k|                return impl(rd, range, value);
 5882|  19.5k|            }
 5883|  19.5k|            auto crange = get_as_contiguous(range);
 5884|  19.5k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  19.5k|            return ranges::next(range.begin(),
 5886|  19.5k|                                ranges::distance(crange.begin(), it));
 5887|  19.5k|        }
 5888|  19.5k|        else {
 5889|  19.5k|            SCN_EXPECT(false);
 5890|  19.5k|            SCN_UNREACHABLE;
 5891|  19.5k|        }
 5892|  19.5k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_wcharIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  19.5k|    {
 5863|  19.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  19.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  19.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  19.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  19.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 19.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  19.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  19.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  19.5k|                        .transform_error(make_eof_scan_error));
 5865|  19.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  19.5k|    }
_ZN3scn2v34impl12float_readerIwEC2Ev:
 3657|  19.5k|    constexpr float_reader() = default;
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 5870|  19.5k|    {
 5871|  19.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  19.5k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  19.5k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  19.5k|            auto rd = make_reader<T, char_type>();
 5876|  19.5k|            return impl(rd, range, value);
 5877|  19.5k|        }
 5878|  19.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  19.5k|            auto rd = make_reader<T, char_type>();
 5880|  19.5k|            if (!is_segment_contiguous(range)) {
 5881|  19.5k|                return impl(rd, range, value);
 5882|  19.5k|            }
 5883|  19.5k|            auto crange = get_as_contiguous(range);
 5884|  19.5k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  19.5k|            return ranges::next(range.begin(),
 5886|  19.5k|                                ranges::distance(crange.begin(), it));
 5887|  19.5k|        }
 5888|  19.5k|        else {
 5889|  19.5k|            SCN_EXPECT(false);
 5890|  19.5k|            SCN_UNREACHABLE;
 5891|  19.5k|        }
 5892|  19.5k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  19.5k|    {
 5863|  19.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  19.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  19.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  19.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  19.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 19.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  19.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  19.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  19.5k|                        .transform_error(make_eof_scan_error));
 5865|  19.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  19.5k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|  19.5k|    {
 4152|  19.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  19.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  19.5k|        float_reader<CharT> rd{};
 4155|  19.5k|        return read_impl<Range>(
 4156|  19.5k|            range, rd,
 4157|  19.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  19.5k|                return r.read_source(SCN_FWD(args)...);
 4159|  19.5k|            },
 4160|  19.5k|            value);
 4161|  19.5k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|  19.5k|    {
  754|  19.5k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|  19.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  19.5k|              cvref<T> obj = *get<T>(fn);
  745|  19.5k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  19.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  19.5k|              }
  748|  19.5k|              else {
  749|  19.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  19.5k|              }
  751|  19.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  19.5k|    {
  684|  19.5k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  19.5k|            return static_cast<T*>(s.m_cp);
  686|  19.5k|        }
  687|  19.5k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  19.5k|            return static_cast<T*>(s.m_p);
  689|  19.5k|        }
  690|  19.5k|        else {
  691|  19.5k|            return reinterpret_cast<T*>(s.m_fp);
  692|  19.5k|        }
  693|  19.5k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|  19.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  19.5k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  19.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  19.5k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  19.5k|        {
  662|  19.5k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKwEERT_:
 5870|  19.5k|    {
 5871|  19.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  19.5k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  19.5k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  19.5k|            auto rd = make_reader<T, char_type>();
 5876|  19.5k|            return impl(rd, range, value);
 5877|  19.5k|        }
 5878|  19.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  19.5k|            auto rd = make_reader<T, char_type>();
 5880|  19.5k|            if (!is_segment_contiguous(range)) {
 5881|  19.5k|                return impl(rd, range, value);
 5882|  19.5k|            }
 5883|  19.5k|            auto crange = get_as_contiguous(range);
 5884|  19.5k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  19.5k|            return ranges::next(range.begin(),
 5886|  19.5k|                                ranges::distance(crange.begin(), it));
 5887|  19.5k|        }
 5888|  19.5k|        else {
 5889|  19.5k|            SCN_EXPECT(false);
 5890|  19.5k|            SCN_UNREACHABLE;
 5891|  19.5k|        }
 5892|  19.5k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|  19.5k|    {
 5863|  19.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  19.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  19.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  19.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  19.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 19.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  19.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  19.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  19.5k|                        .transform_error(make_eof_scan_error));
 5865|  19.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  19.5k|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|  19.5k|    {
 5266|  19.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  19.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  19.5k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|  19.5k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5870|  19.5k|    {
 5871|  19.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  19.5k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  19.5k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  19.5k|            auto rd = make_reader<T, char_type>();
 5876|  19.5k|            return impl(rd, range, value);
 5877|  19.5k|        }
 5878|  19.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  19.5k|            auto rd = make_reader<T, char_type>();
 5880|  19.5k|            if (!is_segment_contiguous(range)) {
 5881|  19.5k|                return impl(rd, range, value);
 5882|  19.5k|            }
 5883|  19.5k|            auto crange = get_as_contiguous(range);
 5884|  19.5k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  19.5k|            return ranges::next(range.begin(),
 5886|  19.5k|                                ranges::distance(crange.begin(), it));
 5887|  19.5k|        }
 5888|  19.5k|        else {
 5889|  19.5k|            SCN_EXPECT(false);
 5890|  19.5k|            SCN_UNREACHABLE;
 5891|  19.5k|        }
 5892|  19.5k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5862|  19.5k|    {
 5863|  19.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  19.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  19.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  19.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  19.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 19.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  19.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  19.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  19.5k|                        .transform_error(make_eof_scan_error));
 5865|  19.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  19.5k|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5265|  19.5k|    {
 5266|  19.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  19.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  19.5k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|  19.5k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5870|  19.5k|    {
 5871|  19.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  19.5k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  19.5k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  19.5k|            auto rd = make_reader<T, char_type>();
 5876|  19.5k|            return impl(rd, range, value);
 5877|  19.5k|        }
 5878|  19.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  19.5k|            auto rd = make_reader<T, char_type>();
 5880|  19.5k|            if (!is_segment_contiguous(range)) {
 5881|  19.5k|                return impl(rd, range, value);
 5882|  19.5k|            }
 5883|  19.5k|            auto crange = get_as_contiguous(range);
 5884|  19.5k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  19.5k|            return ranges::next(range.begin(),
 5886|  19.5k|                                ranges::distance(crange.begin(), it));
 5887|  19.5k|        }
 5888|  19.5k|        else {
 5889|  19.5k|            SCN_EXPECT(false);
 5890|  19.5k|            SCN_UNREACHABLE;
 5891|  19.5k|        }
 5892|  19.5k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|  19.5k|    {
 5863|  19.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  19.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  19.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  19.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  19.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 19.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  19.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  19.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  19.5k|                        .transform_error(make_eof_scan_error));
 5865|  19.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  19.5k|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|  19.5k|    {
 5266|  19.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  19.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  19.5k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|  19.5k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2878|   341k|    {
 2879|   341k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2882|   702M|    {
 2883|   702M|        return m_current;
 2884|   702M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2887|  1.40G|    {
 2888|  1.40G|        return m_range.end();
 2889|  1.40G|    }
_ZN3scn2v34impl19is_first_char_spaceIwEENS1_26is_first_char_space_resultIT_EENSt3__117basic_string_viewIS4_NS6_11char_traitsIS4_EEEE:
 1220|   701M|{
 1221|       |    // TODO: optimize
 1222|   701M|    SCN_EXPECT(!str.empty());
  ------------------
  |  |  924|   701M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   701M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1223|   701M|    auto res = get_next_code_point(str);
 1224|   701M|    return {res.iterator, res.value, is_cp_space(res.value)};
 1225|   701M|}
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2902|   701M|    {
 2903|   701M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   701M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   701M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|   701M|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|   701M|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 701M]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|   701M|        }
 2909|   701M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   701M|    static_cast<    \
  |  |  929|   701M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|   701M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2892|   669k|    {
 2893|   669k|        return ranges::subrange{begin(), end()};
 2894|   669k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_b:
 6036|  1.92k|    {
 6037|  1.92k|        const bool need_skipped_width =
 6038|  1.92k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 124, False: 1.80k]
  |  Branch (6038:33): [True: 1.80k, False: 0]
  ------------------
 6039|  1.92k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  1.92k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 72, False: 1.85k]
  ------------------
 6043|  1.92k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 304, False: 1.54k]
  ------------------
 6044|    376|            return skip_fill(rng, specs.precision, specs.fill,
 6045|    376|                             need_skipped_width);
 6046|    376|        }
 6047|  1.54k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 1.45k, False: 92]
  |  Branch (6047:56): [True: 1.22k, False: 236]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  1.22k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 1.22k, False: 0]
  ------------------
 6051|  1.22k|                auto max_width_view = take_width(rng, specs.precision);
 6052|  1.22k|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|  1.22k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.22k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.22k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.22k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.22k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.22k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|  1.22k|                                  .transform_error(make_eof_scan_error));
 6054|  1.22k|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|  1.22k|            }
 6056|      0|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|      0|                            make_eof_scan_error));
 6058|       |
 6059|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 0]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|      0|            return result_type{it, 0};
 6067|      0|        }
 6068|       |
 6069|    328|        return result_type{rng.begin(), 0};
 6070|  1.54k|    }
_ZN3scn2v34impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEb:
 5950|    376|{
 5951|    376|    using char_type = detail::char_t<Range>;
 5952|    376|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5953|       |
 5954|    376|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5954:9): [True: 376, False: 0]
  ------------------
 5955|    376|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5956|    376|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5957|       |
 5958|    376|        if (max_width == 0) {
  ------------------
  |  Branch (5958:13): [True: 0, False: 376]
  ------------------
 5959|      0|            auto it = read_while_code_unit(range, pred);
 5960|       |
 5961|      0|            if (want_skipped_width) {
  ------------------
  |  Branch (5961:17): [True: 0, False: 0]
  ------------------
 5962|      0|                auto prefix_width =
 5963|      0|                    static_cast<std::ptrdiff_t>(
 5964|      0|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5965|      0|                    ranges::distance(range.begin(), it);
 5966|      0|                return result_type{it, prefix_width};
 5967|      0|            }
 5968|      0|            return result_type{it, 0};
 5969|      0|        }
 5970|       |
 5971|    376|        auto max_width_view = take_width(range, max_width);
 5972|    376|        auto w_it = read_while_code_unit(max_width_view, pred);
 5973|       |
 5974|    376|        if (want_skipped_width) {
  ------------------
  |  Branch (5974:13): [True: 376, False: 0]
  ------------------
 5975|    376|            return result_type{w_it.base(), max_width - w_it.count()};
 5976|    376|        }
 5977|      0|        return result_type{w_it.base(), 0};
 5978|    376|    }
 5979|       |
 5980|      0|    const auto fill_chars = fill.template get_code_units<char_type>();
 5981|      0|    if (max_width == 0) {
  ------------------
  |  Branch (5981:9): [True: 0, False: 0]
  ------------------
 5982|      0|        auto it = read_while_code_units(range, fill_chars);
 5983|       |
 5984|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (5984:13): [True: 0, False: 0]
  ------------------
 5985|      0|            auto prefix_width =
 5986|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5987|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5988|      0|            return result_type{it, prefix_width};
 5989|      0|        }
 5990|      0|        return result_type{it, 0};
 5991|      0|    }
 5992|       |
 5993|      0|    auto max_width_view = take_width(range, max_width);
 5994|      0|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5995|       |
 5996|      0|    if (want_skipped_width) {
  ------------------
  |  Branch (5996:9): [True: 0, False: 0]
  ------------------
 5997|      0|        return result_type{w_it.base(), max_width - w_it.count()};
 5998|      0|    }
 5999|      0|    return result_type{w_it.base(), 0};
 6000|      0|}
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_ST_LPv0EEEOSJ_:
  753|    376|    {
  754|    376|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_ST_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clESZ_w:
  743|    450|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    450|              cvref<T> obj = *get<T>(fn);
  745|    450|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    450|                  obj(static_cast<decltype(args)>(args)...);
  747|    450|              }
  748|    450|              else {
  749|    450|                  return obj(static_cast<decltype(args)>(args)...);
  750|    450|              }
  751|    450|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESI_lRKNS0_6detail9fill_typeEbEUlwE_EEDaNS3_7storageE:
  683|    450|    {
  684|    450|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    450|            return static_cast<T*>(s.m_cp);
  686|    450|        }
  687|    450|        else if constexpr (std::is_object_v<T>) {
  688|    450|            return static_cast<T*>(s.m_p);
  689|    450|        }
  690|    450|        else {
  691|    450|            return reinterpret_cast<T*>(s.m_fp);
  692|    450|        }
  693|    450|    }
_ZZN3scn2v34impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEbENKUlwE_clEw:
 5956|    450|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_LPv0EEEPKSJ_:
  666|    376|        {
  667|    376|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|    376|{
 1976|    376|    return read_until_code_unit(range, std::not_fn(pred));
 1977|    376|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|    376|{
 1957|    376|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|    376|        return std::find_if(range.begin(), range.end(), pred);
 1959|    376|    }
 1960|    376|    else {
 1961|    376|        auto first = range.begin();
 1962|    502|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 450, False: 52]
  ------------------
 1963|    450|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 324, False: 126]
  ------------------
 1964|    324|                return first;
 1965|    324|            }
 1966|    450|        }
 1967|     52|        return first;
 1968|    376|    }
 1969|    376|}
_ZNK3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE5beginEv:
 2809|  2.81k|    {
 2810|  2.81k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2811|  2.81k|                                      m_count};
 2812|  2.81k|    }
_ZNK3scn2v34impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEvE3getEv:
 2716|  9.79k|    {
 2717|  9.79k|        return view;
 2718|  9.79k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEC2ES6_SF_l:
 2381|  2.81k|    {
 2382|  2.81k|    }
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2780|  1.72k|        {
 2781|  1.72k|            return !(y == x);
 2782|  1.72k|        }
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2769|  4.16k|        {
 2770|  4.16k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2770:21): [True: 52, False: 4.11k]
  |  Branch (2770:39): [True: 52, False: 0]
  ------------------
 2771|  4.16k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2771:20): [True: 0, False: 4.11k]
  ------------------
 2772|  4.16k|        }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE14multibyte_leftEv:
 2420|     52|    {
 2421|     52|        return m_multibyte_left;
 2422|     52|    }
_ZNK3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE3endEv:
 2815|  4.16k|    {
 2816|  4.16k|        return sentinel<true>{m_base.get().end()};
 2817|  4.16k|    }
_ZN3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE8sentinelILb1EEC2ENSA_8sentinelILb1EEE:
 2750|  4.16k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEdeEv:
 2425|  2.89k|    {
 2426|  2.89k|        return *m_current;
 2427|  2.89k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEppEv:
 2434|  1.34k|    {
 2435|  1.34k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  1.34k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.34k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2436|  1.34k|        _increment_current();
 2437|  1.34k|        return *this;
 2438|  1.34k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE18_increment_currentEv:
 2667|  1.34k|    {
 2668|  1.34k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2668:13): [True: 1.34k, False: 0]
  ------------------
 2669|  1.34k|            auto cplen = _get_cp_length_at_current();
 2670|  1.34k|            m_multibyte_left = cplen - 1;
 2671|  1.34k|            m_count -= _get_width_at_current_cp_start(cplen);
 2672|  1.34k|        }
 2673|      0|        else {
 2674|      0|            --m_multibyte_left;
 2675|      0|        }
 2676|       |
 2677|  1.34k|        ++m_current;
 2678|  1.34k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE25_get_cp_length_at_currentEv:
 2638|  1.34k|    {
 2639|  1.34k|        return static_cast<difference_type>(
 2640|  1.34k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2641|  1.34k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE30_get_width_at_current_cp_startEl:
 2644|  1.34k|    {
 2645|  1.34k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|  1.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.34k]
  |  |  ------------------
  ------------------
 2646|      0|            return 0;
 2647|      0|        }
 2648|       |
 2649|  1.34k|        if (cplen == 1) {
  ------------------
  |  Branch (2649:13): [True: 1.34k, False: 0]
  ------------------
 2650|  1.34k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  1.34k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.34k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2651|  1.34k|            auto cp = static_cast<char32_t>(*m_current);
 2652|  1.34k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2653|  1.34k|        }
 2654|       |
 2655|      0|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2656|      0|                                           cplen);
 2657|      0|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2658|      0|            return 0;
 2659|      0|        }
 2660|       |
 2661|      0|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2662|      0|        return static_cast<difference_type>(
 2663|      0|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2664|      0|    }
_ZNK3scn2v34impl14_take_width_fnclINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEEDTtlS4_fp_fp0_EERKT_l:
 2831|  1.59k|    {
 2832|  1.59k|        return take_width_view{r, n};
 2833|  1.59k|    }
_ZN3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEEC2ERKSA_l:
 2800|  1.59k|    {
 2801|  1.59k|    }
_ZN3scn2v34impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEvEC2ERKSB_:
 2713|  1.59k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impl23skip_classic_whitespaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|  1.22k|{
 2951|  1.22k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 1.22k, False: 0]
  ------------------
 2952|  1.22k|        auto it = read_while_classic_space(range);
 2953|  1.22k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  1.22k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.22k]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|  1.22k|        return it;
 2959|  1.22k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  1.22k|}
_ZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|  1.22k|{
 2117|  1.22k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  1.22k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  1.22k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  1.22k|        auto buf = make_contiguous_buffer(range);
 2121|  1.22k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  1.22k|        return ranges::next(range.begin(),
 2123|  1.22k|                            ranges::distance(buf.view().begin(), it));
 2124|  1.22k|    }
 2125|  1.22k|    else {
 2126|  1.22k|        auto it = range.begin();
 2127|       |
 2128|  1.22k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  1.22k|            auto seg = get_contiguous_beginning(range);
 2130|  1.22k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  1.22k|                seg_it != seg.end()) {
 2132|  1.22k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  1.22k|            }
 2134|  1.22k|            ranges::advance(it, seg.size());
 2135|  1.22k|        }
 2136|       |
 2137|  1.22k|        return read_while_code_point(
 2138|  1.22k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  1.22k|    }
 2140|  1.22k|}
_ZN3scn2v34impl21read_while_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|  1.22k|{
 2082|  1.22k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  1.22k|}
_ZN3scn2v34impl21read_until_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|  1.22k|{
 2061|  1.22k|    auto it = range.begin();
 2062|  1.22k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 1.22k, False: 0]
  ------------------
 2063|  1.22k|        const auto val =
 2064|  1.22k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  1.22k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  1.22k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.22k, False: 0]
  |  |  ------------------
  ------------------
 2066|  1.22k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  1.22k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  1.22k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 1.22k, False: 0]
  ------------------
 2069|  1.22k|                return it;
 2070|  1.22k|            }
 2071|  1.22k|        }
 2072|      0|        it = val.iterator;
 2073|      0|    }
 2074|       |
 2075|      0|    return it;
 2076|  1.22k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISP_EEE4typeEEESP_:
 1898|  1.22k|{
 1899|  1.22k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  1.22k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.22k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  1.22k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  1.22k|    auto it = range.begin();
 1903|  1.22k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  1.22k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  1.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.22k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|  1.22k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 1.22k, False: 0]
  ------------------
 1912|  1.22k|        ++it;
 1913|  1.22k|        return {it, string_type(1, *range.begin())};
 1914|  1.22k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|  1.22k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEbT_:
  943|  2.44k|{
  944|  2.44k|    return is_range_eof(r.begin(), r.end());
  945|  2.44k|}
_ZN3scn2v34impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS8_ISE_E8sentinelILb1EEEEEbT_T0_:
  927|  2.44k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  2.44k|    {
  937|  2.44k|        return begin == end;
  938|  2.44k|    }
  939|  2.44k|}
_ZNK3scn2v34impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEwE8is_validEv:
 1889|  1.22k|    {
 1890|  1.22k|        return !codepoint.empty();
 1891|  1.22k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|  1.22k|    {
  754|  1.22k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|  1.22k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.22k|              cvref<T> obj = *get<T>(fn);
  745|  1.22k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.22k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.22k|              }
  748|  1.22k|              else {
  749|  1.22k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.22k|              }
  751|  1.22k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS6_INS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  1.22k|    {
  684|  1.22k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.22k|            return static_cast<T*>(s.m_cp);
  686|  1.22k|        }
  687|  1.22k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.22k|            return static_cast<T*>(s.m_p);
  689|  1.22k|        }
  690|  1.22k|        else {
  691|  1.22k|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.22k|        }
  693|  1.22k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|  1.22k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|  1.22k|        {
  662|  1.22k|        }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_9eof_errorET_:
  949|  1.22k|{
  950|  1.22k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.22k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  1.22k|    return eof_error::good;
  954|  1.22k|}
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE4baseEv:
 2412|  5.70k|    {
 2413|  5.70k|        return m_current;
 2414|  5.70k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE5countEv:
 2416|  5.75k|    {
 2417|  5.75k|        return m_count;
 2418|  5.75k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|  19.9k|    {
 6037|  19.9k|        const bool need_skipped_width =
 6038|  19.9k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 16.2k, False: 3.69k]
  |  Branch (6038:33): [True: 0, False: 3.69k]
  ------------------
 6039|  19.9k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  19.9k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 72, False: 19.9k]
  ------------------
 6043|  19.9k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 188, False: 19.7k]
  ------------------
 6044|    260|            return skip_fill(rng, specs.precision, specs.fill,
 6045|    260|                             need_skipped_width);
 6046|    260|        }
 6047|  19.7k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 19.3k, False: 336]
  |  Branch (6047:56): [True: 2.78k, False: 16.5k]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  2.78k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 2.78k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  5.57k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|  2.78k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.78k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.78k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.78k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  2.78k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.78k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  5.57k|                            make_eof_scan_error));
 6058|       |
 6059|  5.57k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 2.21k, False: 570]
  ------------------
 6060|  2.21k|                return result_type{
 6061|  2.21k|                    it,
 6062|  2.21k|                    calculate_text_width(make_contiguous_buffer(
 6063|  2.21k|                                             ranges::subrange{rng.begin(), it})
 6064|  2.21k|                                             .view())};
 6065|  2.21k|            }
 6066|    570|            return result_type{it, 0};
 6067|  5.57k|        }
 6068|       |
 6069|  16.9k|        return result_type{rng.begin(), 0};
 6070|  19.7k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|  2.52k|    {
 6079|  2.52k|        const bool need_skipped_width =
 6080|  2.52k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 1.16k, False: 1.36k]
  |  Branch (6080:33): [True: 284, False: 1.07k]
  ------------------
 6081|  2.52k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  2.52k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 70, False: 2.45k]
  ------------------
 6084|  2.52k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 106, False: 2.34k]
  ------------------
 6085|    176|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 88, False: 88]
  ------------------
 6086|    176|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 56, False: 32]
  ------------------
 6087|     56|                return result_type{rng.begin(), 0};
 6088|     56|            }
 6089|    120|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|    120|                             specs.fill, need_skipped_width);
 6091|    176|        }
 6092|  2.34k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 2.32k, False: 22]
  ------------------
 6093|  2.34k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 1.98k, False: 342]
  ------------------
 6094|  2.34k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 892, False: 1.09k]
  |  Branch (6094:35): [True: 872, False: 20]
  ------------------
 6095|  1.98k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 168, False: 942]
  ------------------
 6096|  1.11k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 136, False: 32]
  ------------------
 6097|  1.00k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 136, False: 872]
  ------------------
 6098|    136|                const auto initial_width =
 6099|    136|                    specs.precision - prefix_width - value_width;
 6100|    136|                auto max_width_view = take_width(rng, initial_width);
 6101|    136|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|    136|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    136|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    136|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    136|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 136]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    136|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    136|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|    136|                                  .transform_error(make_eof_scan_error));
 6103|    136|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|    136|            }
 6105|  1.74k|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|    872|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    872|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    872|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    872|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 872]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    872|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    872|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|  1.74k|                            make_eof_scan_error));
 6107|       |
 6108|  1.74k|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 872, False: 0]
  ------------------
 6109|    872|                return result_type{
 6110|    872|                    it,
 6111|    872|                    calculate_text_width(make_contiguous_buffer(
 6112|    872|                                             ranges::subrange{rng.begin(), it})
 6113|    872|                                             .view())};
 6114|    872|            }
 6115|      0|            return result_type{it, 0};
 6116|  1.74k|        }
 6117|  1.33k|        return result_type{rng.begin(), 0};
 6118|  2.34k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
 6192|  6.26k|    {
 6193|  6.26k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  6.26k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  6.26k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  6.26k|            auto rd = make_reader<T, char_type>();
 6198|  6.26k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.65k, False: 602]
  |  |  ------------------
  ------------------
 6199|  5.65k|                return unexpected(e);
 6200|  5.65k|            }
 6201|       |
 6202|    602|            return impl(rd, range, value);
 6203|  6.26k|        }
 6204|  6.26k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  6.26k|            auto rd = make_reader<T, char_type>();
 6206|  6.26k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  6.26k|                return unexpected(e);
 6208|  6.26k|            }
 6209|       |
 6210|  6.26k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  6.26k|                specs.width != 0) {
 6212|  6.26k|                return impl(rd, range, value);
 6213|  6.26k|            }
 6214|       |
 6215|  6.26k|            auto crange = get_as_contiguous(range);
 6216|  6.26k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  6.26k|            return ranges::next(range.begin(),
 6218|  6.26k|                                ranges::distance(crange.begin(), it));
 6219|  6.26k|        }
 6220|  6.26k|        else {
 6221|  6.26k|            SCN_EXPECT(false);
 6222|  6.26k|            SCN_UNREACHABLE;
 6223|  6.26k|        }
 6224|  6.26k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    602|    {
 6124|    602|        const bool need_skipped_width =
 6125|    602|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 294, False: 308]
  |  Branch (6125:33): [True: 190, False: 118]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    602|        auto it = rng.begin();
 6129|    602|        std::ptrdiff_t prefix_width = 0;
 6130|    602|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 202, False: 400]
  ------------------
 6131|    202|            auto max_width_view = take_width(rng, specs.precision);
 6132|    202|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    202|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    202|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    202|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    202|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 202]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    202|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    202|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    202|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    202|            it = prefix_result.first.base();
 6135|    202|            prefix_width = prefix_result.second;
 6136|    202|        }
 6137|    400|        else {
 6138|    400|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    400|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    400|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    400|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    400|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 400]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    400|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    400|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    400|            std::tie(it, prefix_width) = prefix_result;
 6140|    400|        }
 6141|    602|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    602|        std::ptrdiff_t value_width = 0;
 6145|    602|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 202, False: 400]
  ------------------
 6146|    202|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 2, False: 200]
  ------------------
 6147|      2|                return unexpected_scan_error(
 6148|      2|                    scan_error::invalid_scanned_value,
 6149|      2|                    "Too many fill characters before value, "
 6150|      2|                    "precision exceeded before reading value");
 6151|      2|            }
 6152|       |
 6153|    200|            const auto initial_width = specs.precision - prefix_width;
 6154|    200|            auto max_width_view =
 6155|    200|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    200|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    200|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    200|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    200|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    200|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 200, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    200|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    200|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    200|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    200|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    200|    }                                                  \
  |  |  |  | 3671|    200|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    400|        else {
 6161|    400|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    400|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    400|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    400|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 400, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    400|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    400|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    400|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    400|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    400|    }                                                  \
  |  | 3671|    400|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    400|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
 6192|  6.26k|    {
 6193|  6.26k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  6.26k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  6.26k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  6.26k|            auto rd = make_reader<T, char_type>();
 6198|  6.26k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.65k, False: 602]
  |  |  ------------------
  ------------------
 6199|  5.65k|                return unexpected(e);
 6200|  5.65k|            }
 6201|       |
 6202|    602|            return impl(rd, range, value);
 6203|  6.26k|        }
 6204|  6.26k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  6.26k|            auto rd = make_reader<T, char_type>();
 6206|  6.26k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  6.26k|                return unexpected(e);
 6208|  6.26k|            }
 6209|       |
 6210|  6.26k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  6.26k|                specs.width != 0) {
 6212|  6.26k|                return impl(rd, range, value);
 6213|  6.26k|            }
 6214|       |
 6215|  6.26k|            auto crange = get_as_contiguous(range);
 6216|  6.26k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  6.26k|            return ranges::next(range.begin(),
 6218|  6.26k|                                ranges::distance(crange.begin(), it));
 6219|  6.26k|        }
 6220|  6.26k|        else {
 6221|  6.26k|            SCN_EXPECT(false);
 6222|  6.26k|            SCN_UNREACHABLE;
 6223|  6.26k|        }
 6224|  6.26k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    602|    {
 6124|    602|        const bool need_skipped_width =
 6125|    602|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 294, False: 308]
  |  Branch (6125:33): [True: 190, False: 118]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    602|        auto it = rng.begin();
 6129|    602|        std::ptrdiff_t prefix_width = 0;
 6130|    602|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 202, False: 400]
  ------------------
 6131|    202|            auto max_width_view = take_width(rng, specs.precision);
 6132|    202|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    202|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    202|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    202|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    202|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 202]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    202|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    202|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    202|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    202|            it = prefix_result.first.base();
 6135|    202|            prefix_width = prefix_result.second;
 6136|    202|        }
 6137|    400|        else {
 6138|    400|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    400|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    400|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    400|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    400|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 400]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    400|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    400|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    400|            std::tie(it, prefix_width) = prefix_result;
 6140|    400|        }
 6141|    602|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    602|        std::ptrdiff_t value_width = 0;
 6145|    602|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 202, False: 400]
  ------------------
 6146|    202|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 2, False: 200]
  ------------------
 6147|      2|                return unexpected_scan_error(
 6148|      2|                    scan_error::invalid_scanned_value,
 6149|      2|                    "Too many fill characters before value, "
 6150|      2|                    "precision exceeded before reading value");
 6151|      2|            }
 6152|       |
 6153|    200|            const auto initial_width = specs.precision - prefix_width;
 6154|    200|            auto max_width_view =
 6155|    200|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    200|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    200|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    200|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    200|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    200|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 200, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    200|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    200|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    200|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    200|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    200|    }                                                  \
  |  |  |  | 3671|    200|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    400|        else {
 6161|    400|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    400|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    400|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    400|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 400, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    400|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    400|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    400|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    400|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    400|    }                                                  \
  |  | 3671|    400|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    400|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIPvEENS0_13scan_expectedIPKwEERT_:
 6192|  6.20k|    {
 6193|  6.20k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  6.20k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  6.20k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  6.20k|            auto rd = make_reader<T, char_type>();
 6198|  6.20k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.67k, False: 526]
  |  |  ------------------
  ------------------
 6199|  5.67k|                return unexpected(e);
 6200|  5.67k|            }
 6201|       |
 6202|    526|            return impl(rd, range, value);
 6203|  6.20k|        }
 6204|  6.20k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  6.20k|            auto rd = make_reader<T, char_type>();
 6206|  6.20k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  6.20k|                return unexpected(e);
 6208|  6.20k|            }
 6209|       |
 6210|  6.20k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  6.20k|                specs.width != 0) {
 6212|  6.20k|                return impl(rd, range, value);
 6213|  6.20k|            }
 6214|       |
 6215|  6.20k|            auto crange = get_as_contiguous(range);
 6216|  6.20k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  6.20k|            return ranges::next(range.begin(),
 6218|  6.20k|                                ranges::distance(crange.begin(), it));
 6219|  6.20k|        }
 6220|  6.20k|        else {
 6221|  6.20k|            SCN_EXPECT(false);
 6222|  6.20k|            SCN_UNREACHABLE;
 6223|  6.20k|        }
 6224|  6.20k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE11check_specsERKNS0_6detail12format_specsE:
 5752|  6.20k|    {
 5753|  6.20k|        reader_error_handler eh{};
 5754|  6.20k|        detail::check_pointer_type_specs(specs, eh);
 5755|  6.20k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  6.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.67k, False: 526]
  |  |  ------------------
  ------------------
 5756|  5.67k|            return {scan_error::invalid_format_string, eh.m_msg};
 5757|  5.67k|        }
 5758|    526|        return {};
 5759|  6.20k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_23reader_impl_for_voidptrIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 6123|    526|    {
 6124|    526|        const bool need_skipped_width =
 6125|    526|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 292, False: 234]
  |  Branch (6125:33): [True: 152, False: 82]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    526|        auto it = rng.begin();
 6129|    526|        std::ptrdiff_t prefix_width = 0;
 6130|    526|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 164, False: 362]
  ------------------
 6131|    164|            auto max_width_view = take_width(rng, specs.precision);
 6132|    164|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    164|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    164|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    164|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    164|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 164]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    164|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    164|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    164|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    164|            it = prefix_result.first.base();
 6135|    164|            prefix_width = prefix_result.second;
 6136|    164|        }
 6137|    362|        else {
 6138|    362|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    362|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    362|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    362|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    362|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 362]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    362|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    362|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    362|            std::tie(it, prefix_width) = prefix_result;
 6140|    362|        }
 6141|    526|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    526|        std::ptrdiff_t value_width = 0;
 6145|    526|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 164, False: 362]
  ------------------
 6146|    164|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 2, False: 162]
  ------------------
 6147|      2|                return unexpected_scan_error(
 6148|      2|                    scan_error::invalid_scanned_value,
 6149|      2|                    "Too many fill characters before value, "
 6150|      2|                    "precision exceeded before reading value");
 6151|      2|            }
 6152|       |
 6153|    162|            const auto initial_width = specs.precision - prefix_width;
 6154|    162|            auto max_width_view =
 6155|    162|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    162|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    162|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    162|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    162|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    162|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 162, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    162|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    162|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    162|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    162|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    162|    }                                                  \
  |  |  |  | 3671|    162|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    362|        else {
 6161|    362|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    362|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    362|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    362|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 362, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    362|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    362|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    362|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    362|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    362|    }                                                  \
  |  | 3671|    362|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    362|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERPvNSN_10locale_refE:
 5781|    162|    {
 5782|    162|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    162|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5783|    162|        return read_default(range, value, loc);
 5784|    162|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RPvNS0_6detail10locale_refE:
 5764|    162|    {
 5765|    162|        detail::format_specs specs{};
 5766|    162|        specs.type = detail::presentation_type::int_hex;
 5767|       |
 5768|    162|        std::uintptr_t intvalue{};
 5769|    162|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3672|    162|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    162|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    162|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    162|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 162, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    162|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    162|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    162|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    162|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    162|    }                                                  \
  |  |  |  | 3671|    162|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5770|      0|                                                                intvalue, loc));
 5771|      0|        value = reinterpret_cast<void*>(intvalue);
 5772|      0|        return result;
 5773|    162|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERPvNSL_10locale_refE:
 5781|    362|    {
 5782|    362|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    362|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5783|    362|        return read_default(range, value, loc);
 5784|    362|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIbEENS0_13scan_expectedIPKwEERT_:
 6192|  6.26k|    {
 6193|  6.26k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  6.26k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  6.26k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  6.26k|            auto rd = make_reader<T, char_type>();
 6198|  6.26k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.56k, False: 694]
  |  |  ------------------
  ------------------
 6199|  5.56k|                return unexpected(e);
 6200|  5.56k|            }
 6201|       |
 6202|    694|            return impl(rd, range, value);
 6203|  6.26k|        }
 6204|  6.26k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  6.26k|            auto rd = make_reader<T, char_type>();
 6206|  6.26k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  6.26k|                return unexpected(e);
 6208|  6.26k|            }
 6209|       |
 6210|  6.26k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  6.26k|                specs.width != 0) {
 6212|  6.26k|                return impl(rd, range, value);
 6213|  6.26k|            }
 6214|       |
 6215|  6.26k|            auto crange = get_as_contiguous(range);
 6216|  6.26k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  6.26k|            return ranges::next(range.begin(),
 6218|  6.26k|                                ranges::distance(crange.begin(), it));
 6219|  6.26k|        }
 6220|  6.26k|        else {
 6221|  6.26k|            SCN_EXPECT(false);
 6222|  6.26k|            SCN_UNREACHABLE;
 6223|  6.26k|        }
 6224|  6.26k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|  6.26k|    {
 3040|  6.26k|        reader_error_handler eh{};
 3041|  6.26k|        get_derived().check_specs_impl(specs, eh);
 3042|  6.26k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  6.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.56k, False: 694]
  |  |  ------------------
  ------------------
 3043|  5.56k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  5.56k|        }
 3045|    694|        return {};
 3046|  6.26k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIwEEwE11get_derivedEv:
 3050|  6.26k|    {
 3051|  6.26k|        return static_cast<Derived&>(*this);
 3052|  6.26k|    }
_ZN3scn2v34impl20reader_impl_for_boolIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5496|  6.26k|    {
 5497|  6.26k|        detail::check_bool_type_specs(specs, eh);
 5498|  6.26k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_20reader_impl_for_boolIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    694|    {
 6124|    694|        const bool need_skipped_width =
 6125|    694|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 304, False: 390]
  |  Branch (6125:33): [True: 224, False: 166]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    694|        auto it = rng.begin();
 6129|    694|        std::ptrdiff_t prefix_width = 0;
 6130|    694|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 238, False: 456]
  ------------------
 6131|    238|            auto max_width_view = take_width(rng, specs.precision);
 6132|    238|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    238|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    238|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    238|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    238|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 238]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    238|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    238|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    238|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    238|            it = prefix_result.first.base();
 6135|    238|            prefix_width = prefix_result.second;
 6136|    238|        }
 6137|    456|        else {
 6138|    456|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    456|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    456|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    456|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    456|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 456]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    456|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    456|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    456|            std::tie(it, prefix_width) = prefix_result;
 6140|    456|        }
 6141|    694|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    694|        std::ptrdiff_t value_width = 0;
 6145|    694|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 238, False: 456]
  ------------------
 6146|    238|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 4, False: 234]
  ------------------
 6147|      4|                return unexpected_scan_error(
 6148|      4|                    scan_error::invalid_scanned_value,
 6149|      4|                    "Too many fill characters before value, "
 6150|      4|                    "precision exceeded before reading value");
 6151|      4|            }
 6152|       |
 6153|    234|            const auto initial_width = specs.precision - prefix_width;
 6154|    234|            auto max_width_view =
 6155|    234|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    234|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    234|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    234|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    234|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    234|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 234, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    234|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    234|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    234|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    234|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    234|    }                                                  \
  |  |  |  | 3671|    234|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    456|        else {
 6161|    456|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    456|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    456|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    456|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 456, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    456|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    456|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    456|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    456|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    456|    }                                                  \
  |  | 3671|    456|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    456|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZNK3scn2v34impl20reader_impl_for_boolIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERbNSN_10locale_refE:
 5515|    234|    {
 5516|    234|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5517|       |
 5518|    234|#if !SCN_DISABLE_LOCALE
 5519|    234|        if (specs.localized) {
  ------------------
  |  Branch (5519:13): [True: 14, False: 220]
  ------------------
 5520|     14|            return rd.read_localized(range, loc, value);
 5521|     14|        }
 5522|    220|#endif
 5523|       |
 5524|    220|        return rd.read_classic(range, value);
 5525|    234|    }
_ZN3scn2v34impl20reader_impl_for_boolIwE11get_optionsERKNS0_6detail12format_specsE:
 5528|    690|    {
 5529|    690|        SCN_GCC_COMPAT_PUSH
 5530|    690|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 5531|       |
 5532|    690|        switch (specs.type) {
 5533|     88|            case detail::presentation_type::string:
  ------------------
  |  Branch (5533:13): [True: 88, False: 602]
  ------------------
 5534|     88|                return bool_reader_base::allow_text;
 5535|       |
 5536|      8|            case detail::presentation_type::int_generic:
  ------------------
  |  Branch (5536:13): [True: 8, False: 682]
  ------------------
 5537|     14|            case detail::presentation_type::int_binary:
  ------------------
  |  Branch (5537:13): [True: 6, False: 684]
  ------------------
 5538|     20|            case detail::presentation_type::int_decimal:
  ------------------
  |  Branch (5538:13): [True: 6, False: 684]
  ------------------
 5539|     36|            case detail::presentation_type::int_hex:
  ------------------
  |  Branch (5539:13): [True: 16, False: 674]
  ------------------
 5540|     48|            case detail::presentation_type::int_octal:
  ------------------
  |  Branch (5540:13): [True: 12, False: 678]
  ------------------
 5541|     64|            case detail::presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (5541:13): [True: 16, False: 674]
  ------------------
 5542|     64|                return bool_reader_base::allow_numeric;
 5543|       |
 5544|    538|            default:
  ------------------
  |  Branch (5544:13): [True: 538, False: 152]
  ------------------
 5545|    538|                return bool_reader_base::allow_text |
 5546|    538|                       bool_reader_base::allow_numeric;
 5547|    690|        }
 5548|       |
 5549|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 5550|    690|    }
_ZNK3scn2v34impl11bool_readerIwE14read_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refERb:
 5427|     14|    {
 5428|     14|        scan_error err{scan_error::invalid_scanned_value,
 5429|     14|                       "Failed to read boolean"};
 5430|       |
 5431|     14|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5431:13): [True: 14, False: 0]
  ------------------
 5432|     14|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5432:22): [True: 0, False: 14]
  ------------------
 5433|      0|                return *r;
 5434|      0|            }
 5435|     14|            else {
 5436|     14|                err = r.error();
 5437|     14|            }
 5438|     14|        }
 5439|       |
 5440|     14|        if (m_options & allow_text) {
  ------------------
  |  Branch (5440:13): [True: 14, False: 0]
  ------------------
 5441|     14|            auto stdloc = loc.get<std::locale>();
 5442|     14|            const auto& numpunct =
 5443|     14|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5444|     14|            const auto truename = numpunct.truename();
 5445|     14|            const auto falsename = numpunct.falsename();
 5446|       |
 5447|     14|            if (auto r =
  ------------------
  |  Branch (5447:22): [True: 0, False: 14]
  ------------------
 5448|     14|                    read_textual_custom(range, value, truename, falsename)) {
 5449|      0|                return *r;
 5450|      0|            }
 5451|     14|            else {
 5452|     14|                err = r.error();
 5453|     14|            }
 5454|     14|        }
 5455|       |
 5456|     14|        return unexpected(err);
 5457|     14|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5383|    200|    {
 5384|    200|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5384:18): [True: 0, False: 200]
  ------------------
 5385|      0|            value = false;
 5386|      0|            return *r;
 5387|      0|        }
 5388|    200|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5388:18): [True: 0, False: 200]
  ------------------
 5389|      0|            value = true;
 5390|      0|            return *r;
 5391|      0|        }
 5392|       |
 5393|    200|        return unexpected_scan_error(
 5394|    200|            scan_error::invalid_scanned_value,
 5395|    200|            "Failed to read numeric boolean value: No match");
 5396|    200|    }
_ZN3scn2v34impl23read_matching_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NDTcl4implISF_EEE4typeE:
 2145|    400|{
 2146|    400|    auto it = read_code_unit(range);
 2147|    400|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    400|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 400]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|    400|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|    400|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 400, False: 0]
  |  |  ------------------
  ------------------
 2152|    400|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|    400|        return unexpected(parse_error::error);
 2154|    400|    }
 2155|       |
 2156|      0|    return *it;
 2157|    400|}
_ZNK3scn2v34impl11bool_readerIwE19read_textual_customINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RbNSF_17basic_string_viewIwNSF_11char_traitsIwEEEESR_:
 5467|     14|    {
 5468|     14|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5469|     14|        const auto shorter = std::pair{
 5470|     14|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5470:13): [True: 14, False: 0]
  ------------------
 5471|     14|        const auto longer = std::pair{
 5472|     14|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5472:13): [True: 0, False: 14]
  ------------------
 5473|       |
 5474|     14|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5474:18): [True: 0, False: 14]
  ------------------
 5475|      0|            value = shorter.second;
 5476|      0|            return *r;
 5477|      0|        }
 5478|     14|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5478:18): [True: 0, False: 14]
  ------------------
 5479|      0|            value = longer.second;
 5480|      0|            return *r;
 5481|      0|        }
 5482|       |
 5483|     14|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5484|     14|                                     "read_textual: No match");
 5485|     14|    }
_ZN3scn2v34impl20read_matching_stringINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewINDTcl4implISF_EEE4typeENSD_11char_traitsISN_EEEE:
 2178|     28|{
 2179|     28|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|     28|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     28|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     28|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     28|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14, False: 14]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     14|    }                                                  \
  |  |  |  | 3671|     28|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     14|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2180|     14|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2181|     14|                    .transform_error(make_eof_parse_error));
 2182|       |
 2183|     14|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2184|     14|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14, False: 0]
  |  |  ------------------
  ------------------
 2185|     14|        return unexpected(parse_error::error);
 2186|     14|    }
 2187|      0|    return it;
 2188|     14|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_l:
 1856|    412|{
 1857|    412|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|    412|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    412|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|    412|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|    412|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|    412|        if (sz < count) {
 1862|    412|            return unexpected(eof_error::eof);
 1863|    412|        }
 1864|       |
 1865|    412|        return ranges::next(range.begin(), count);
 1866|    412|    }
 1867|    412|    else {
 1868|    412|        auto it = range.begin();
 1869|    412|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 412]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|  2.11k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 1.77k, False: 342]
  ------------------
 1874|  1.77k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 70, False: 1.70k]
  ------------------
 1875|     70|                return unexpected(eof_error::eof);
 1876|     70|            }
 1877|  1.77k|        }
 1878|       |
 1879|    342|        return it;
 1880|    412|    }
 1881|    412|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEmT_:
 1094|    412|{
 1095|    412|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|    412|        return r.size();
 1097|    412|    }
 1098|    412|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|    412|                           ranges::const_iterator_t<Range>,
 1100|    412|                           typename detail::basic_scan_buffer<
 1101|    412|                               detail::char_t<Range>>::forward_iterator>) {
 1102|    412|        if constexpr (ranges::common_range<Range>) {
 1103|    412|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|    412|        }
 1105|    412|        else {
 1106|    412|            if (r.begin().stores_parent()) {
 1107|    412|                return static_cast<size_t>(
 1108|    412|                    r.begin().parent()->chars_available() -
 1109|    412|                    r.begin().position());
 1110|    412|            }
 1111|    412|            return r.begin().contiguous_segment().size();
 1112|    412|        }
 1113|    412|    }
 1114|    412|    else {
 1115|    412|        return 0;
 1116|    412|    }
 1117|    412|}
_ZNK3scn2v34impl16bool_reader_base12read_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5354|    220|    {
 5355|    220|        scan_error err{scan_error::invalid_scanned_value,
 5356|    220|                       "Failed to read boolean"};
 5357|       |
 5358|    220|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5358:13): [True: 186, False: 34]
  ------------------
 5359|    186|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5359:22): [True: 0, False: 186]
  ------------------
 5360|      0|                return *r;
 5361|      0|            }
 5362|    186|            else {
 5363|    186|                err = r.error();
 5364|    186|            }
 5365|    186|        }
 5366|       |
 5367|    220|        if (m_options & allow_text) {
  ------------------
  |  Branch (5367:13): [True: 192, False: 28]
  ------------------
 5368|    192|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5368:22): [True: 0, False: 192]
  ------------------
 5369|      0|                return *r;
 5370|      0|            }
 5371|    192|            else {
 5372|    192|                err = r.error();
 5373|    192|            }
 5374|    192|        }
 5375|       |
 5376|    220|        return unexpected(err);
 5377|    220|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5401|    192|    {
 5402|    192|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5402:18): [True: 0, False: 192]
  ------------------
 5403|      0|            value = true;
 5404|      0|            return *r;
 5405|      0|        }
 5406|    192|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5406:18): [True: 0, False: 192]
  ------------------
 5407|      0|            value = false;
 5408|      0|            return *r;
 5409|      0|        }
 5410|       |
 5411|    192|        return unexpected_scan_error(
 5412|    192|            scan_error::invalid_scanned_value,
 5413|    192|            "Failed to read textual boolean value: No match");
 5414|    192|    }
_ZN3scn2v34impl28read_matching_string_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2193|    384|{
 2194|    384|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|    384|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    384|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    384|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    384|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 56, False: 328]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     56|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     56|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     56|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     56|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     56|    }                                                  \
  |  |  |  | 3671|    384|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    328|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2195|    328|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2196|    328|                    .transform_error(make_eof_parse_error));
 2197|       |
 2198|    328|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2198:19): [Folded - Ignored]
  ------------------
 2199|    328|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2200|    328|        if (SCN_UNLIKELY(sv.view() != str)) {
 2201|    328|            return unexpected(parse_error::error);
 2202|    328|        }
 2203|    328|        return it;
 2204|    328|    }
 2205|    328|    else {
 2206|    328|        auto range_it = range.begin();
 2207|    328|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
  ------------------
  |  Branch (2207:28): [True: 328, False: 0]
  ------------------
 2208|    328|            if (SCN_UNLIKELY(*range_it !=
  ------------------
  |  |  859|    328|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 328, False: 0]
  |  |  ------------------
  ------------------
 2209|    328|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2210|    328|                return unexpected(parse_error::error);
 2211|    328|            }
 2212|    328|        }
 2213|      0|        return it;
 2214|    328|    }
 2215|    328|}
_ZNK3scn2v34impl20reader_impl_for_boolIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERbNSL_10locale_refE:
 5515|    456|    {
 5516|    456|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5517|       |
 5518|    456|#if !SCN_DISABLE_LOCALE
 5519|    456|        if (specs.localized) {
  ------------------
  |  Branch (5519:13): [True: 38, False: 418]
  ------------------
 5520|     38|            return rd.read_localized(range, loc, value);
 5521|     38|        }
 5522|    418|#endif
 5523|       |
 5524|    418|        return rd.read_classic(range, value);
 5525|    456|    }
_ZNK3scn2v34impl11bool_readerIwE14read_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refERb:
 5427|     38|    {
 5428|     38|        scan_error err{scan_error::invalid_scanned_value,
 5429|     38|                       "Failed to read boolean"};
 5430|       |
 5431|     38|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5431:13): [True: 28, False: 10]
  ------------------
 5432|     28|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5432:22): [True: 0, False: 28]
  ------------------
 5433|      0|                return *r;
 5434|      0|            }
 5435|     28|            else {
 5436|     28|                err = r.error();
 5437|     28|            }
 5438|     28|        }
 5439|       |
 5440|     38|        if (m_options & allow_text) {
  ------------------
  |  Branch (5440:13): [True: 16, False: 22]
  ------------------
 5441|     16|            auto stdloc = loc.get<std::locale>();
 5442|     16|            const auto& numpunct =
 5443|     16|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5444|     16|            const auto truename = numpunct.truename();
 5445|     16|            const auto falsename = numpunct.falsename();
 5446|       |
 5447|     16|            if (auto r =
  ------------------
  |  Branch (5447:22): [True: 0, False: 16]
  ------------------
 5448|     16|                    read_textual_custom(range, value, truename, falsename)) {
 5449|      0|                return *r;
 5450|      0|            }
 5451|     16|            else {
 5452|     16|                err = r.error();
 5453|     16|            }
 5454|     16|        }
 5455|       |
 5456|     38|        return unexpected(err);
 5457|     38|    }
_ZNK3scn2v34impl11bool_readerIwE19read_textual_customINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNSD_17basic_string_viewIwNSD_11char_traitsIwEEEESP_:
 5467|     16|    {
 5468|     16|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5469|     16|        const auto shorter = std::pair{
 5470|     16|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5470:13): [True: 16, False: 0]
  ------------------
 5471|     16|        const auto longer = std::pair{
 5472|     16|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5472:13): [True: 0, False: 16]
  ------------------
 5473|       |
 5474|     16|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5474:18): [True: 0, False: 16]
  ------------------
 5475|      0|            value = shorter.second;
 5476|      0|            return *r;
 5477|      0|        }
 5478|     16|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5478:18): [True: 0, False: 16]
  ------------------
 5479|      0|            value = longer.second;
 5480|      0|            return *r;
 5481|      0|        }
 5482|       |
 5483|     16|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5484|     16|                                     "read_textual: No match");
 5485|     16|    }
_ZN3scn2v34impl20read_matching_stringINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewINDTcl4implISD_EEE4typeENSB_11char_traitsISL_EEEE:
 2178|     32|{
 2179|     32|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|     32|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     32|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     32|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2, False: 30]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      2|    }                                                  \
  |  |  |  | 3671|     32|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     30|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2180|     30|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2181|     30|                    .transform_error(make_eof_parse_error));
 2182|       |
 2183|     30|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2184|     30|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|     30|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 30, False: 0]
  |  |  ------------------
  ------------------
 2185|     30|        return unexpected(parse_error::error);
 2186|     30|    }
 2187|      0|    return it;
 2188|     30|}
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIwEENS0_13scan_expectedIPKwEERT_:
 6192|  6.20k|    {
 6193|  6.20k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  6.20k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  6.20k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  6.20k|            auto rd = make_reader<T, char_type>();
 6198|  6.20k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.64k, False: 562]
  |  |  ------------------
  ------------------
 6199|  5.64k|                return unexpected(e);
 6200|  5.64k|            }
 6201|       |
 6202|    562|            return impl(rd, range, value);
 6203|  6.20k|        }
 6204|  6.20k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  6.20k|            auto rd = make_reader<T, char_type>();
 6206|  6.20k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  6.20k|                return unexpected(e);
 6208|  6.20k|            }
 6209|       |
 6210|  6.20k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  6.20k|                specs.width != 0) {
 6212|  6.20k|                return impl(rd, range, value);
 6213|  6.20k|            }
 6214|       |
 6215|  6.20k|            auto crange = get_as_contiguous(range);
 6216|  6.20k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  6.20k|            return ranges::next(range.begin(),
 6218|  6.20k|                                ranges::distance(crange.begin(), it));
 6219|  6.20k|        }
 6220|  6.20k|        else {
 6221|  6.20k|            SCN_EXPECT(false);
 6222|  6.20k|            SCN_UNREACHABLE;
 6223|  6.20k|        }
 6224|  6.20k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_wcharIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    562|    {
 6124|    562|        const bool need_skipped_width =
 6125|    562|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 294, False: 268]
  |  Branch (6125:33): [True: 176, False: 92]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    562|        auto it = rng.begin();
 6129|    562|        std::ptrdiff_t prefix_width = 0;
 6130|    562|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 188, False: 374]
  ------------------
 6131|    188|            auto max_width_view = take_width(rng, specs.precision);
 6132|    188|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    188|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    188|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    188|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    188|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 188]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    188|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    188|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    188|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    188|            it = prefix_result.first.base();
 6135|    188|            prefix_width = prefix_result.second;
 6136|    188|        }
 6137|    374|        else {
 6138|    374|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    374|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    374|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    374|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    374|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 374]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    374|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    374|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    374|            std::tie(it, prefix_width) = prefix_result;
 6140|    374|        }
 6141|    562|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    562|        std::ptrdiff_t value_width = 0;
 6145|    562|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 188, False: 374]
  ------------------
 6146|    188|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 2, False: 186]
  ------------------
 6147|      2|                return unexpected_scan_error(
 6148|      2|                    scan_error::invalid_scanned_value,
 6149|      2|                    "Too many fill characters before value, "
 6150|      2|                    "precision exceeded before reading value");
 6151|      2|            }
 6152|       |
 6153|    186|            const auto initial_width = specs.precision - prefix_width;
 6154|    186|            auto max_width_view =
 6155|    186|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    186|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    186|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    186|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    186|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    186|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 28, False: 158]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     28|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     28|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     28|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     28|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     28|    }                                                  \
  |  |  |  | 3671|    186|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    158|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    158|            it = w_it.base();
 6158|    158|            value_width = initial_width - w_it.count();
 6159|    158|        }
 6160|    374|        else {
 6161|    374|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    374|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    374|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    374|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 14, False: 360]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|     14|    }                                                  \
  |  | 3671|    374|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    374|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|    360|                                             specs, value, loc));
 6163|       |
 6164|    360|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 280, False: 80]
  ------------------
 6165|    280|                value_width = calculate_text_width(
 6166|    280|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    280|                        .view());
 6168|    280|            }
 6169|    360|        }
 6170|       |
 6171|       |        // Read postfix
 6172|    518|        std::ptrdiff_t postfix_width = 0;
 6173|    518|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 518, False: 0]
  ------------------
 6174|    518|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|    518|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    518|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    518|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    518|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 518]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    518|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    518|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|    518|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|    518|                                 rd.skip_ws_before_read(), prefix_width,
 6177|    518|                                 value_width));
 6178|    518|            std::tie(it, postfix_width) = postfix_result;
 6179|    518|        }
 6180|       |
 6181|    518|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|    518|                                                 value_width, postfix_width);
 6183|    518|            !e) {
  ------------------
  |  Branch (6183:13): [True: 278, False: 240]
  ------------------
 6184|    278|            return unexpected(e);
 6185|    278|        }
 6186|       |
 6187|    240|        return it;
 6188|    518|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 6192|  6.26k|    {
 6193|  6.26k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  6.26k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  6.26k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  6.26k|            auto rd = make_reader<T, char_type>();
 6198|  6.26k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.66k, False: 592]
  |  |  ------------------
  ------------------
 6199|  5.66k|                return unexpected(e);
 6200|  5.66k|            }
 6201|       |
 6202|    592|            return impl(rd, range, value);
 6203|  6.26k|        }
 6204|  6.26k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  6.26k|            auto rd = make_reader<T, char_type>();
 6206|  6.26k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  6.26k|                return unexpected(e);
 6208|  6.26k|            }
 6209|       |
 6210|  6.26k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  6.26k|                specs.width != 0) {
 6212|  6.26k|                return impl(rd, range, value);
 6213|  6.26k|            }
 6214|       |
 6215|  6.26k|            auto crange = get_as_contiguous(range);
 6216|  6.26k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  6.26k|            return ranges::next(range.begin(),
 6218|  6.26k|                                ranges::distance(crange.begin(), it));
 6219|  6.26k|        }
 6220|  6.26k|        else {
 6221|  6.26k|            SCN_EXPECT(false);
 6222|  6.26k|            SCN_UNREACHABLE;
 6223|  6.26k|        }
 6224|  6.26k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    592|    {
 6124|    592|        const bool need_skipped_width =
 6125|    592|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 298, False: 294]
  |  Branch (6125:33): [True: 190, False: 104]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    592|        auto it = rng.begin();
 6129|    592|        std::ptrdiff_t prefix_width = 0;
 6130|    592|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 204, False: 388]
  ------------------
 6131|    204|            auto max_width_view = take_width(rng, specs.precision);
 6132|    204|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    204|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    204|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    204|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    204|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 204]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    204|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    204|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    204|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    204|            it = prefix_result.first.base();
 6135|    204|            prefix_width = prefix_result.second;
 6136|    204|        }
 6137|    388|        else {
 6138|    388|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    388|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    388|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    388|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    388|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 388]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    388|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    388|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    388|            std::tie(it, prefix_width) = prefix_result;
 6140|    388|        }
 6141|    592|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    592|        std::ptrdiff_t value_width = 0;
 6145|    592|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 204, False: 388]
  ------------------
 6146|    204|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 4, False: 200]
  ------------------
 6147|      4|                return unexpected_scan_error(
 6148|      4|                    scan_error::invalid_scanned_value,
 6149|      4|                    "Too many fill characters before value, "
 6150|      4|                    "precision exceeded before reading value");
 6151|      4|            }
 6152|       |
 6153|    200|            const auto initial_width = specs.precision - prefix_width;
 6154|    200|            auto max_width_view =
 6155|    200|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    200|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    200|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    200|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    200|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    200|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 200, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    200|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    200|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    200|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    200|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    200|    }                                                  \
  |  |  |  | 3671|    200|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    388|        else {
 6161|    388|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    388|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    388|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    388|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 388, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    388|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    388|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    388|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    388|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    388|    }                                                  \
  |  | 3671|    388|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    388|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKwEERT_:
 6192|  6.20k|    {
 6193|  6.20k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  6.20k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  6.20k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  6.20k|            auto rd = make_reader<T, char_type>();
 6198|  6.20k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 98, False: 6.10k]
  |  |  ------------------
  ------------------
 6199|     98|                return unexpected(e);
 6200|     98|            }
 6201|       |
 6202|  6.10k|            return impl(rd, range, value);
 6203|  6.20k|        }
 6204|  6.20k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  6.20k|            auto rd = make_reader<T, char_type>();
 6206|  6.20k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  6.20k|                return unexpected(e);
 6208|  6.20k|            }
 6209|       |
 6210|  6.20k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  6.20k|                specs.width != 0) {
 6212|  6.20k|                return impl(rd, range, value);
 6213|  6.20k|            }
 6214|       |
 6215|  6.20k|            auto crange = get_as_contiguous(range);
 6216|  6.20k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  6.20k|            return ranges::next(range.begin(),
 6218|  6.20k|                                ranges::distance(crange.begin(), it));
 6219|  6.20k|        }
 6220|  6.20k|        else {
 6221|  6.20k|            SCN_EXPECT(false);
 6222|  6.20k|            SCN_UNREACHABLE;
 6223|  6.20k|        }
 6224|  6.20k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6123|  6.10k|    {
 6124|  6.10k|        const bool need_skipped_width =
 6125|  6.10k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 4.87k, False: 1.23k]
  |  Branch (6125:33): [True: 226, False: 1.00k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  6.10k|        auto it = rng.begin();
 6129|  6.10k|        std::ptrdiff_t prefix_width = 0;
 6130|  6.10k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 242, False: 5.86k]
  ------------------
 6131|    242|            auto max_width_view = take_width(rng, specs.precision);
 6132|    242|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    242|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    242|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    242|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    242|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 242]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    242|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    242|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    242|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    242|            it = prefix_result.first.base();
 6135|    242|            prefix_width = prefix_result.second;
 6136|    242|        }
 6137|  5.86k|        else {
 6138|  5.86k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  5.86k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  5.86k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  5.86k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  5.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 5.86k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  5.86k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  5.86k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  5.86k|            std::tie(it, prefix_width) = prefix_result;
 6140|  5.86k|        }
 6141|  6.10k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  6.10k|        std::ptrdiff_t value_width = 0;
 6145|  6.10k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 242, False: 5.86k]
  ------------------
 6146|    242|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 12, False: 230]
  ------------------
 6147|     12|                return unexpected_scan_error(
 6148|     12|                    scan_error::invalid_scanned_value,
 6149|     12|                    "Too many fill characters before value, "
 6150|     12|                    "precision exceeded before reading value");
 6151|     12|            }
 6152|       |
 6153|    230|            const auto initial_width = specs.precision - prefix_width;
 6154|    230|            auto max_width_view =
 6155|    230|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    230|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    230|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    230|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    230|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    230|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 134, False: 96]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    134|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    134|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    134|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    134|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    134|    }                                                  \
  |  |  |  | 3671|    230|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     96|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|     96|            it = w_it.base();
 6158|     96|            value_width = initial_width - w_it.count();
 6159|     96|        }
 6160|  5.86k|        else {
 6161|  5.86k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  5.86k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  5.86k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  5.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 5.01k, False: 848]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  5.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  5.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  5.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  5.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  5.01k|    }                                                  \
  |  | 3671|  5.86k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  5.86k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|    848|                                             specs, value, loc));
 6163|       |
 6164|    848|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 470, False: 378]
  ------------------
 6165|    470|                value_width = calculate_text_width(
 6166|    470|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    470|                        .view());
 6168|    470|            }
 6169|    848|        }
 6170|       |
 6171|       |        // Read postfix
 6172|    944|        std::ptrdiff_t postfix_width = 0;
 6173|    944|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 668, False: 276]
  ------------------
 6174|    668|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|    668|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    668|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    668|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    668|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 668]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    668|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    668|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|    668|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|    668|                                 rd.skip_ws_before_read(), prefix_width,
 6177|    668|                                 value_width));
 6178|    668|            std::tie(it, postfix_width) = postfix_result;
 6179|    668|        }
 6180|       |
 6181|    944|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|    944|                                                 value_width, postfix_width);
 6183|    944|            !e) {
  ------------------
  |  Branch (6183:13): [True: 234, False: 710]
  ------------------
 6184|    234|            return unexpected(e);
 6185|    234|        }
 6186|       |
 6187|    710|        return it;
 6188|    944|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6192|  6.20k|    {
 6193|  6.20k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  6.20k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  6.20k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  6.20k|            auto rd = make_reader<T, char_type>();
 6198|  6.20k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 98, False: 6.10k]
  |  |  ------------------
  ------------------
 6199|     98|                return unexpected(e);
 6200|     98|            }
 6201|       |
 6202|  6.10k|            return impl(rd, range, value);
 6203|  6.20k|        }
 6204|  6.20k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  6.20k|            auto rd = make_reader<T, char_type>();
 6206|  6.20k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  6.20k|                return unexpected(e);
 6208|  6.20k|            }
 6209|       |
 6210|  6.20k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  6.20k|                specs.width != 0) {
 6212|  6.20k|                return impl(rd, range, value);
 6213|  6.20k|            }
 6214|       |
 6215|  6.20k|            auto crange = get_as_contiguous(range);
 6216|  6.20k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  6.20k|            return ranges::next(range.begin(),
 6218|  6.20k|                                ranges::distance(crange.begin(), it));
 6219|  6.20k|        }
 6220|  6.20k|        else {
 6221|  6.20k|            SCN_EXPECT(false);
 6222|  6.20k|            SCN_UNREACHABLE;
 6223|  6.20k|        }
 6224|  6.20k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6123|  6.10k|    {
 6124|  6.10k|        const bool need_skipped_width =
 6125|  6.10k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 4.87k, False: 1.23k]
  |  Branch (6125:33): [True: 226, False: 1.00k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  6.10k|        auto it = rng.begin();
 6129|  6.10k|        std::ptrdiff_t prefix_width = 0;
 6130|  6.10k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 242, False: 5.86k]
  ------------------
 6131|    242|            auto max_width_view = take_width(rng, specs.precision);
 6132|    242|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    242|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    242|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    242|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    242|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 242]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    242|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    242|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    242|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    242|            it = prefix_result.first.base();
 6135|    242|            prefix_width = prefix_result.second;
 6136|    242|        }
 6137|  5.86k|        else {
 6138|  5.86k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  5.86k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  5.86k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  5.86k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  5.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 5.86k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  5.86k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  5.86k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  5.86k|            std::tie(it, prefix_width) = prefix_result;
 6140|  5.86k|        }
 6141|  6.10k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  6.10k|        std::ptrdiff_t value_width = 0;
 6145|  6.10k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 242, False: 5.86k]
  ------------------
 6146|    242|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 12, False: 230]
  ------------------
 6147|     12|                return unexpected_scan_error(
 6148|     12|                    scan_error::invalid_scanned_value,
 6149|     12|                    "Too many fill characters before value, "
 6150|     12|                    "precision exceeded before reading value");
 6151|     12|            }
 6152|       |
 6153|    230|            const auto initial_width = specs.precision - prefix_width;
 6154|    230|            auto max_width_view =
 6155|    230|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    230|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    230|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    230|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    230|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    230|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 134, False: 96]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    134|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    134|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    134|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    134|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    134|    }                                                  \
  |  |  |  | 3671|    230|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     96|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|     96|            it = w_it.base();
 6158|     96|            value_width = initial_width - w_it.count();
 6159|     96|        }
 6160|  5.86k|        else {
 6161|  5.86k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  5.86k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  5.86k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  5.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 5.01k, False: 848]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  5.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  5.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  5.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  5.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  5.01k|    }                                                  \
  |  | 3671|  5.86k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  5.86k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|    848|                                             specs, value, loc));
 6163|       |
 6164|    848|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 470, False: 378]
  ------------------
 6165|    470|                value_width = calculate_text_width(
 6166|    470|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    470|                        .view());
 6168|    470|            }
 6169|    848|        }
 6170|       |
 6171|       |        // Read postfix
 6172|    944|        std::ptrdiff_t postfix_width = 0;
 6173|    944|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 668, False: 276]
  ------------------
 6174|    668|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|    668|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    668|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    668|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    668|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 668]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    668|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    668|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|    668|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|    668|                                 rd.skip_ws_before_read(), prefix_width,
 6177|    668|                                 value_width));
 6178|    668|            std::tie(it, postfix_width) = postfix_result;
 6179|    668|        }
 6180|       |
 6181|    944|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|    944|                                                 value_width, postfix_width);
 6183|    944|            !e) {
  ------------------
  |  Branch (6183:13): [True: 234, False: 710]
  ------------------
 6184|    234|            return unexpected(e);
 6185|    234|        }
 6186|       |
 6187|    710|        return it;
 6188|    944|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6192|  6.20k|    {
 6193|  6.20k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  6.20k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  6.20k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  6.20k|            auto rd = make_reader<T, char_type>();
 6198|  6.20k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 98, False: 6.10k]
  |  |  ------------------
  ------------------
 6199|     98|                return unexpected(e);
 6200|     98|            }
 6201|       |
 6202|  6.10k|            return impl(rd, range, value);
 6203|  6.20k|        }
 6204|  6.20k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  6.20k|            auto rd = make_reader<T, char_type>();
 6206|  6.20k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  6.20k|                return unexpected(e);
 6208|  6.20k|            }
 6209|       |
 6210|  6.20k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  6.20k|                specs.width != 0) {
 6212|  6.20k|                return impl(rd, range, value);
 6213|  6.20k|            }
 6214|       |
 6215|  6.20k|            auto crange = get_as_contiguous(range);
 6216|  6.20k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  6.20k|            return ranges::next(range.begin(),
 6218|  6.20k|                                ranges::distance(crange.begin(), it));
 6219|  6.20k|        }
 6220|  6.20k|        else {
 6221|  6.20k|            SCN_EXPECT(false);
 6222|  6.20k|            SCN_UNREACHABLE;
 6223|  6.20k|        }
 6224|  6.20k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6123|  6.10k|    {
 6124|  6.10k|        const bool need_skipped_width =
 6125|  6.10k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 4.87k, False: 1.23k]
  |  Branch (6125:33): [True: 226, False: 1.00k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  6.10k|        auto it = rng.begin();
 6129|  6.10k|        std::ptrdiff_t prefix_width = 0;
 6130|  6.10k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 242, False: 5.86k]
  ------------------
 6131|    242|            auto max_width_view = take_width(rng, specs.precision);
 6132|    242|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    242|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    242|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    242|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    242|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 242]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    242|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    242|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    242|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    242|            it = prefix_result.first.base();
 6135|    242|            prefix_width = prefix_result.second;
 6136|    242|        }
 6137|  5.86k|        else {
 6138|  5.86k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  5.86k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  5.86k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  5.86k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  5.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 5.86k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  5.86k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  5.86k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  5.86k|            std::tie(it, prefix_width) = prefix_result;
 6140|  5.86k|        }
 6141|  6.10k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  6.10k|        std::ptrdiff_t value_width = 0;
 6145|  6.10k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 242, False: 5.86k]
  ------------------
 6146|    242|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 12, False: 230]
  ------------------
 6147|     12|                return unexpected_scan_error(
 6148|     12|                    scan_error::invalid_scanned_value,
 6149|     12|                    "Too many fill characters before value, "
 6150|     12|                    "precision exceeded before reading value");
 6151|     12|            }
 6152|       |
 6153|    230|            const auto initial_width = specs.precision - prefix_width;
 6154|    230|            auto max_width_view =
 6155|    230|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    230|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    230|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    230|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    230|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    230|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 134, False: 96]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    134|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    134|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    134|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    134|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    134|    }                                                  \
  |  |  |  | 3671|    230|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     96|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|     96|            it = w_it.base();
 6158|     96|            value_width = initial_width - w_it.count();
 6159|     96|        }
 6160|  5.86k|        else {
 6161|  5.86k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  5.86k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  5.86k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  5.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 5.01k, False: 848]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  5.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  5.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  5.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  5.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  5.01k|    }                                                  \
  |  | 3671|  5.86k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  5.86k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|    848|                                             specs, value, loc));
 6163|       |
 6164|    848|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 470, False: 378]
  ------------------
 6165|    470|                value_width = calculate_text_width(
 6166|    470|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    470|                        .view());
 6168|    470|            }
 6169|    848|        }
 6170|       |
 6171|       |        // Read postfix
 6172|    944|        std::ptrdiff_t postfix_width = 0;
 6173|    944|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 668, False: 276]
  ------------------
 6174|    668|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|    668|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    668|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    668|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    668|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 668]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    668|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    668|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|    668|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|    668|                                 rd.skip_ws_before_read(), prefix_width,
 6177|    668|                                 value_width));
 6178|    668|            std::tie(it, postfix_width) = postfix_result;
 6179|    668|        }
 6180|       |
 6181|    944|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|    944|                                                 value_width, postfix_width);
 6183|    944|            !e) {
  ------------------
  |  Branch (6183:13): [True: 234, False: 710]
  ------------------
 6184|    234|            return unexpected(e);
 6185|    234|        }
 6186|       |
 6187|    710|        return it;
 6188|    944|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|    706|    {
 3492|    706|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3672|    706|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    706|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    706|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    706|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 706]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    706|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    706|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|    706|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|    706|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|    706|            if (prefix_result.sign == sign_type::minus_sign) {
 3497|    706|                return unexpected_scan_error(
 3498|    706|                    scan_error::invalid_scanned_value,
 3499|    706|                    "Unexpected '-' sign when parsing an "
 3500|    706|                    "unsigned value");
 3501|    706|            }
 3502|    706|        }
 3503|       |
 3504|    706|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 706]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  1.41k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    706|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    706|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    706|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    706|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 706]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    706|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    706|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  1.41k|                parse_integer_digits_without_thsep(
 3511|  1.41k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  1.41k|                    prefix_result.parsed_base));
 3513|       |
 3514|  1.41k|        auto buf = make_contiguous_buffer(
 3515|  1.41k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  1.41k|        SCN_TRY(result_it,
  ------------------
  |  | 3672|    706|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    706|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    706|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    706|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 706, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    706|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    706|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    706|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    706|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    706|    }                                                  \
  |  |  |  | 3671|    706|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|      0|                                    prefix_result.parsed_base));
 3519|       |
 3520|      0|        return ranges::next(prefix_result.iterator,
 3521|      0|                            ranges::distance(buf.view().begin(), result_it));
 3522|  1.41k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|    706|    {
 3492|    706|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3672|    706|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    706|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    706|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    706|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 706]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    706|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    706|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|    706|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|    706|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|    706|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3496:17): [True: 0, False: 706]
  ------------------
 3497|      0|                return unexpected_scan_error(
 3498|      0|                    scan_error::invalid_scanned_value,
 3499|      0|                    "Unexpected '-' sign when parsing an "
 3500|      0|                    "unsigned value");
 3501|      0|            }
 3502|    706|        }
 3503|       |
 3504|    706|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 706]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  1.41k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    706|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    706|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    706|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    706|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 706]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    706|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    706|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  1.41k|                parse_integer_digits_without_thsep(
 3511|  1.41k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  1.41k|                    prefix_result.parsed_base));
 3513|       |
 3514|  1.41k|        auto buf = make_contiguous_buffer(
 3515|  1.41k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  1.41k|        SCN_TRY(result_it,
  ------------------
  |  | 3672|    706|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    706|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    706|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    706|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 706, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    706|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    706|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    706|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    706|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    706|    }                                                  \
  |  |  |  | 3671|    706|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|      0|                                    prefix_result.parsed_base));
 3519|       |
 3520|      0|        return ranges::next(prefix_result.iterator,
 3521|      0|                            ranges::distance(buf.view().begin(), result_it));
 3522|  1.41k|    }

LLVMFuzzerTestOneInput:
   68|  9.49k|{
   69|  9.49k|    scn::fuzz::run(data, size);
   70|  9.49k|    return 0;
   71|  9.49k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   51|  9.49k|{
   52|  9.49k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (52:9): [True: 0, False: 9.49k]
  |  Branch (52:35): [True: 0, False: 9.49k]
  ------------------
   53|      0|        return;
   54|      0|    }
   55|       |
   56|  9.49k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   57|       |
   58|  9.49k|    run_for_source(sv);
   59|  9.49k|    run_for_source(wsv_reinterpret);
   60|  9.49k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (60:9): [True: 9.49k, False: 0]
  ------------------
   61|  9.49k|        run_for_source(wsv_transcode);
   62|  9.49k|    }
   63|  9.49k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_114run_for_sourceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT_:
   36|  9.49k|{
   37|  9.49k|    using char_type = ranges::range_value_t<Source>;
   38|       |
   39|  9.49k|    run_for_type<char_type>(source);
   40|  9.49k|    run_for_type<int>(source);
   41|  9.49k|    run_for_type<unsigned>(source);
   42|  9.49k|    run_for_type<double>(source);
   43|  9.49k|    run_for_type<bool>(source);
   44|  9.49k|    run_for_type<void*>(source);
   45|  9.49k|    run_for_type<std::string>(source);
   46|  9.49k|    run_for_type<std::wstring>(source);
   47|  9.49k|    run_for_type<std::basic_string_view<char_type>>(source);
   48|  9.49k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIcNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  9.49k|{
   25|  9.49k|    {
   26|  9.49k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  9.49k|    }
   28|  9.49k|    {
   29|  9.49k|        auto _ =
   30|  9.49k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  9.49k|    }
   32|  9.49k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIiNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  9.49k|{
   25|  9.49k|    {
   26|  9.49k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  9.49k|    }
   28|  9.49k|    {
   29|  9.49k|        auto _ =
   30|  9.49k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  9.49k|    }
   32|  9.49k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIjNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  9.49k|{
   25|  9.49k|    {
   26|  9.49k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  9.49k|    }
   28|  9.49k|    {
   29|  9.49k|        auto _ =
   30|  9.49k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  9.49k|    }
   32|  9.49k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIdNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  9.49k|{
   25|  9.49k|    {
   26|  9.49k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  9.49k|    }
   28|  9.49k|    {
   29|  9.49k|        auto _ =
   30|  9.49k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  9.49k|    }
   32|  9.49k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIbNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  9.49k|{
   25|  9.49k|    {
   26|  9.49k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  9.49k|    }
   28|  9.49k|    {
   29|  9.49k|        auto _ =
   30|  9.49k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  9.49k|    }
   32|  9.49k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIPvNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEvRT0_:
   24|  9.49k|{
   25|  9.49k|    {
   26|  9.49k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  9.49k|    }
   28|  9.49k|    {
   29|  9.49k|        auto _ =
   30|  9.49k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  9.49k|    }
   32|  9.49k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_17basic_string_viewIcS6_EEEEvRT0_:
   24|  9.49k|{
   25|  9.49k|    {
   26|  9.49k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  9.49k|    }
   28|  9.49k|    {
   29|  9.49k|        auto _ =
   30|  9.49k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  9.49k|    }
   32|  9.49k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS3_17basic_string_viewIcNS5_IcEEEEEEvRT0_:
   24|  9.49k|{
   25|  9.49k|    {
   26|  9.49k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  9.49k|    }
   28|  9.49k|    {
   29|  9.49k|        auto _ =
   30|  9.49k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  9.49k|    }
   32|  9.49k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEES7_EEvRT0_:
   24|  9.49k|{
   25|  9.49k|    {
   26|  9.49k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  9.49k|    }
   28|  9.49k|    {
   29|  9.49k|        auto _ =
   30|  9.49k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  9.49k|    }
   32|  9.49k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_114run_for_sourceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT_:
   36|  18.9k|{
   37|  18.9k|    using char_type = ranges::range_value_t<Source>;
   38|       |
   39|  18.9k|    run_for_type<char_type>(source);
   40|  18.9k|    run_for_type<int>(source);
   41|  18.9k|    run_for_type<unsigned>(source);
   42|  18.9k|    run_for_type<double>(source);
   43|  18.9k|    run_for_type<bool>(source);
   44|  18.9k|    run_for_type<void*>(source);
   45|  18.9k|    run_for_type<std::string>(source);
   46|  18.9k|    run_for_type<std::wstring>(source);
   47|  18.9k|    run_for_type<std::basic_string_view<char_type>>(source);
   48|  18.9k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIwNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  18.9k|{
   25|  18.9k|    {
   26|  18.9k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  18.9k|    }
   28|  18.9k|    {
   29|  18.9k|        auto _ =
   30|  18.9k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  18.9k|    }
   32|  18.9k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIiNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  18.9k|{
   25|  18.9k|    {
   26|  18.9k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  18.9k|    }
   28|  18.9k|    {
   29|  18.9k|        auto _ =
   30|  18.9k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  18.9k|    }
   32|  18.9k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIjNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  18.9k|{
   25|  18.9k|    {
   26|  18.9k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  18.9k|    }
   28|  18.9k|    {
   29|  18.9k|        auto _ =
   30|  18.9k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  18.9k|    }
   32|  18.9k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIdNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  18.9k|{
   25|  18.9k|    {
   26|  18.9k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  18.9k|    }
   28|  18.9k|    {
   29|  18.9k|        auto _ =
   30|  18.9k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  18.9k|    }
   32|  18.9k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIbNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  18.9k|{
   25|  18.9k|    {
   26|  18.9k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  18.9k|    }
   28|  18.9k|    {
   29|  18.9k|        auto _ =
   30|  18.9k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  18.9k|    }
   32|  18.9k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIPvNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEvRT0_:
   24|  18.9k|{
   25|  18.9k|    {
   26|  18.9k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  18.9k|    }
   28|  18.9k|    {
   29|  18.9k|        auto _ =
   30|  18.9k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  18.9k|    }
   32|  18.9k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_17basic_string_viewIwNS5_IwEEEEEEvRT0_:
   24|  18.9k|{
   25|  18.9k|    {
   26|  18.9k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  18.9k|    }
   28|  18.9k|    {
   29|  18.9k|        auto _ =
   30|  18.9k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  18.9k|    }
   32|  18.9k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS3_17basic_string_viewIwS6_EEEEvRT0_:
   24|  18.9k|{
   25|  18.9k|    {
   26|  18.9k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  18.9k|    }
   28|  18.9k|    {
   29|  18.9k|        auto _ =
   30|  18.9k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  18.9k|    }
   32|  18.9k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEES7_EEvRT0_:
   24|  18.9k|{
   25|  18.9k|    {
   26|  18.9k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  18.9k|    }
   28|  18.9k|    {
   29|  18.9k|        auto _ =
   30|  18.9k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  18.9k|    }
   32|  18.9k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|  9.49k|{
   52|  9.49k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|  9.49k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.49k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  9.49k|    string_buffer.resize(size);
   56|  9.49k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|  9.49k|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|  9.49k|    const auto wsv_reinterpret_size =
   61|  9.49k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 92, False: 9.40k]
  ------------------
   62|  9.49k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|  9.49k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|  9.49k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|  9.49k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|  9.49k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|  9.49k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|  9.49k|}

