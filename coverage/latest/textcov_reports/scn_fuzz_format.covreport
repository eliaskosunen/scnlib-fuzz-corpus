_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSL_T0_E_clIccEEDaSL_SV_:
  865|  1.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSL_T0_E_clIwcEEDaSL_SV_:
  865|    462|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  865|  3.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v46detail39code_point_length_by_starting_code_unitIcEEmT_:
 4067|  2.99M|{
 4068|  2.99M|    if constexpr (sizeof(U) == 1) {
 4069|  2.99M|        return utf8_code_point_length_by_starting_code_unit(ch);
 4070|       |    }
 4071|       |    else if constexpr (sizeof(U) == 2) {
 4072|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4073|       |    }
 4074|       |    else {
 4075|       |        // utf-32
 4076|       |        static_assert(sizeof(U) == 4);
 4077|       |        SCN_UNUSED(ch);
 4078|       |        return 1;
 4079|       |    }
 4080|  2.99M|}
_ZN3scn2v46detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 4031|  2.99M|{
 4032|  2.99M|    static_assert(sizeof(U8) == 1);
 4033|       |
 4034|  2.99M|    SCN_GCC_COMPAT_PUSH
 4035|  2.99M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 4036|  2.99M|    constexpr char lengths[] =
 4037|  2.99M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 4038|  2.99M|        "\1\1\1\1\1\1\1\1"
 4039|  2.99M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 4040|       |                            // byte
 4041|  2.99M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 4042|  2.99M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 4043|  2.99M|        "\4";               // highest bits 11110 -> 4-byte cp
 4044|  2.99M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 4045|  2.99M|    SCN_GCC_COMPAT_POP
 4046|  2.99M|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4273|  2.73M|{
 4274|  2.73M|    if constexpr (sizeof(CharT) == 1) {
 4275|  2.73M|        return decode_utf8_code_point_exhaustive(input);
 4276|       |    }
 4277|       |    else if constexpr (sizeof(CharT) == 2) {
 4278|       |        return decode_utf16_code_point_exhaustive(input);
 4279|       |    }
 4280|       |    else {
 4281|       |        SCN_EXPECT(input.size() == 1);
 4282|       |        auto cp = static_cast<char32_t>(input.front());
 4283|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4284|       |            return invalid_code_point;
 4285|       |        }
 4286|       |        return cp;
 4287|       |    }
 4288|  2.73M|}
_ZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4086|  2.73M|{
 4087|  2.73M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  930|  2.73M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.73M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4088|       |
 4089|  2.73M|    const auto is_trailing_code_unit = [](char ch) {
 4090|  2.73M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4091|  2.73M|    };
 4092|       |
 4093|  2.73M|    if (input.size() == 1) {
  ------------------
  |  Branch (4093:9): [True: 2.31M, False: 422k]
  ------------------
 4094|  2.31M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (4094:13): [True: 114, False: 2.31M]
  ------------------
 4095|    114|            SCN_UNLIKELY_ATTR
 4096|    114|            return invalid_code_point;
 4097|    114|        }
 4098|  2.31M|        return static_cast<char32_t>(input[0]);
 4099|  2.31M|    }
 4100|       |
 4101|   422k|    if (input.size() == 2) {
  ------------------
  |  Branch (4101:9): [True: 378k, False: 43.4k]
  ------------------
 4102|   378k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (4102:13): [True: 18, False: 378k]
  ------------------
 4103|     18|            SCN_UNLIKELY_ATTR
 4104|     18|            return invalid_code_point;
 4105|     18|        }
 4106|   378k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (4106:13): [True: 3.42k, False: 375k]
  ------------------
 4107|  3.42k|            SCN_UNLIKELY_ATTR
 4108|  3.42k|            return invalid_code_point;
 4109|  3.42k|        }
 4110|       |
 4111|   375k|        char32_t cp{};
 4112|   375k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 4113|   375k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 4114|   375k|        return cp;
 4115|   378k|    }
 4116|       |
 4117|  43.4k|    if (input.size() == 3) {
  ------------------
  |  Branch (4117:9): [True: 37.2k, False: 6.20k]
  ------------------
 4118|  37.2k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (4118:13): [True: 18, False: 37.2k]
  ------------------
 4119|     18|            SCN_UNLIKELY_ATTR
 4120|     18|            return invalid_code_point;
 4121|     18|        }
 4122|  37.2k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4122:13): [True: 4.83k, False: 32.3k]
  ------------------
 4123|  37.2k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (4123:13): [True: 604, False: 31.7k]
  ------------------
 4124|  5.43k|            SCN_UNLIKELY_ATTR
 4125|  5.43k|            return invalid_code_point;
 4126|  5.43k|        }
 4127|       |
 4128|  31.7k|        char32_t cp{};
 4129|  31.7k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 4130|  31.7k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 4131|  31.7k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 4132|  31.7k|        return cp;
 4133|  37.2k|    }
 4134|       |
 4135|  6.20k|    if (input.size() == 4) {
  ------------------
  |  Branch (4135:9): [True: 6.20k, False: 0]
  ------------------
 4136|  6.20k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (4136:13): [True: 0, False: 6.20k]
  ------------------
 4137|      0|            SCN_UNLIKELY_ATTR
 4138|      0|            return invalid_code_point;
 4139|      0|        }
 4140|  6.20k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (4140:13): [True: 274, False: 5.92k]
  ------------------
 4141|    274|            SCN_UNLIKELY_ATTR
 4142|    274|            return invalid_code_point;
 4143|    274|        }
 4144|  5.92k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4144:13): [True: 897, False: 5.03k]
  ------------------
 4145|  5.92k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (4145:13): [True: 525, False: 4.50k]
  ------------------
 4146|  5.92k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (4146:13): [True: 581, False: 3.92k]
  ------------------
 4147|  2.00k|            SCN_UNLIKELY_ATTR
 4148|  2.00k|            return invalid_code_point;
 4149|  2.00k|        }
 4150|       |
 4151|  3.92k|        char32_t cp{};
 4152|  3.92k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 4153|  3.92k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 4154|  3.92k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 4155|  3.92k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 4156|  3.92k|        return cp;
 4157|  5.92k|    }
 4158|       |
 4159|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 4160|       |    // gcc 7 thinks we'll get here, even when we won't
 4161|      0|    SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4162|      0|#endif
 4163|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4164|      0|}
_ZZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 4089|   463k|    const auto is_trailing_code_unit = [](char ch) {
 4090|   463k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4091|   463k|    };
_ZN3scn2v46detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3959|   847k|{
 3960|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3961|       |                                          decltype(first), decltype(last)> &&
 3962|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3963|       |        return {first, last};
 3964|       |    }
 3965|   847k|    else {
 3966|   847k|        return {to_address(first), static_cast<size_t>(std::distance(
 3967|   847k|                                       to_address(first), to_address(last)))};
 3968|   847k|    }
 3969|   847k|}
_ZN3scn2v46detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  2.59M|{
  316|  2.59M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|  2.59M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  2.59M|}
_ZN3scn2v46detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  293|  2.73M|{
  294|  2.73M|    return p;
  295|  2.73M|}
_ZN3scn2v46detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3990|   367k|{
 3991|       |    if constexpr (std::is_constructible_v<
 3992|       |                      typename std::basic_string_view<CharT>::iterator,
 3993|       |                      decltype(it)> &&
 3994|   367k|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3995|   367k|        SCN_UNUSED(sv);
  ------------------
  |  |  915|   367k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3996|   367k|        return it;
 3997|       |    }
 3998|       |    else {
 3999|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 4000|       |    }
 4001|   367k|}
_ZN3scn2v44scanIJcERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 9680|  2.59k|{
 9681|  2.59k|    auto result = make_scan_result<Source, Args...>();
 9682|  2.59k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  2.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  2.59k|                                   make_scan_args(result->values())));
 9684|  2.59k|    return result;
 9685|  2.59k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEEDav:
 9636|  5.18k|{
 9637|  5.18k|    return scan_result_type<Source, Args...>();
 9638|  5.18k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEC2Ev:
 1551|  5.18k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2Ev:
  426|  5.18k|        : m_value(T{}), m_has_value(true)
  427|  5.18k|    {
  428|  5.18k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJcEEC2Ev:
 6570|  5.18k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2Ev:
 6413|  46.6k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2Ev:
 3459|  46.6k|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJcEEC2Ev:
 6344|  5.18k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  5.18k|{
 9622|  5.18k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  5.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.95k, False: 234]
  |  |  ------------------
  ------------------
 9623|  4.95k|        out = unexpected(in.error());
 9624|  4.95k|    }
 9625|    234|    else {
 9626|    234|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    234|    static_cast<    \
  |  |  935|    234|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|    234|    }
 9628|  5.18k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1739|  46.6k|    {
 1740|  46.6k|        return has_value();
 1741|  46.6k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|  93.3k|    {
  490|  93.3k|        return m_has_value;
  491|  93.3k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1745|  44.7k|    {
 1746|  44.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  44.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  44.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  44.7k|        return this->get_unexpected().error();
 1748|  44.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  44.7k|    {
  473|  44.7k|        return m_unexpected;
  474|  44.7k|    }
_ZNR3scn2v410unexpectedINS0_10scan_errorEE5errorEv:
  364|  1.24M|    {
  365|  1.24M|        return m_unexpected;
  366|  1.24M|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  349|   626k|        : m_unexpected(std::forward<Err>(e))
  350|   626k|    {
  351|   626k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|   626k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|   626k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  4.95k|        : base(unexpect, std::move(e.error())),
 1616|  4.95k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  4.95k|    {
 1618|  4.95k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  4.95k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  4.95k|          m_has_value(false)
  451|  4.95k|    {
  452|  4.95k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  358|   759k|        : m_unexpected(std::forward<Args>(args)...)
  359|   759k|    {
  360|   759k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|   759k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|   759k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  4.95k|    {
 1316|  4.95k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEaSEOSC_:
 1556|  4.95k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorEvEaSEOSD_:
  902|  4.95k|    {
  903|  4.95k|        assign_common(std::move(other));
  904|  4.95k|        return *this;
  905|  4.95k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  4.95k|    {
  950|  4.95k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 4.95k, False: 0]
  ------------------
  951|  4.95k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 4.95k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  4.95k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  4.95k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  15.3k|    {
  490|  15.3k|        return m_has_value;
  491|  15.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  5.42k|    {
  456|  5.42k|        return m_value;
  457|  5.42k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  4.95k|    {
 1046|  4.95k|        this->destroy_value();
 1047|  4.95k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  4.95k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  4.95k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  4.95k|    {
  504|  4.95k|        scn::detail::construct_at(&get_unexpected(),
  505|  4.95k|                                  std::forward<Args>(args)...);
  506|  4.95k|        m_has_value = false;
  507|  4.95k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJS5_EEEPT_S7_DpOT0_:
  395|   137k|{
  396|   137k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   137k|        T(std::forward<Args>(args)...);
  398|   137k|}
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  4.95k|    {
  473|  4.95k|        return m_unexpected;
  474|  4.95k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  4.95k|    {
  481|  4.95k|        return std::move(m_unexpected);
  482|  4.95k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE9set_rangeIS9_EEvOT_:
 6444|  1.92k|    {
 6445|  1.92k|        m_range = std::forward<Other>(r);
 6446|  1.92k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1794|  1.92k|    {
 1795|  1.92k|        return value();
 1796|  1.92k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|  1.92k|    {
 1769|  1.92k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.92k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.92k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.92k|        return this->get_value();
 1771|  1.92k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.92k|    {
  456|  1.92k|        return m_value;
  457|  1.92k|    }
_ZN3scn2v45vscanIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESE_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEEEOSA_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextINSF_16buffer_range_tagEcEEEE:
 9460|  23.3k|{
 9461|  23.3k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  936|  23.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9462|  23.3k|}
_ZN3scn2v46detail13vscan_genericIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS1_22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEEOSB_NS4_IT0_NS5_ISN_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESN_EEEE:
 9397|  23.3k|{
 9398|  23.3k|    auto buffer = make_scan_buffer(range);
 9399|       |
 9400|  23.3k|    auto result = vscan_impl(buffer, format, args);
 9401|  23.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  23.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 22.3k, False: 960]
  |  |  ------------------
  ------------------
 9402|  22.3k|        return unexpected(result.error());
 9403|  22.3k|    }
 9404|    960|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|    960|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9405|  23.3k|}
_ZN3scn2v46detail16make_scan_bufferINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaRKT_:
 5380|  46.6k|{
 5381|  46.6k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|  46.6k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|  46.6k|                  "\n"
 5385|  46.6k|                  "Unsupported range type given as input to a scanning "
 5386|  46.6k|                  "function.\n"
 5387|  46.6k|                  "A range needs to have a character type (value type) "
 5388|  46.6k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|  46.6k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|  46.6k|                  "to be included.\n"
 5391|  46.6k|                  "See the scnlib documentation for more details.");
 5392|  46.6k|    static_assert(
 5393|  46.6k|        !std::is_same_v<T, custom_char_traits>,
 5394|  46.6k|        "\n"
 5395|  46.6k|        "Unsupported range type given as input to a scanning "
 5396|  46.6k|        "function.\n"
 5397|  46.6k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|  46.6k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|  46.6k|        "not supported.");
 5400|  46.6k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|  46.6k|                  "\n"
 5402|  46.6k|                  "Unsupported range type given as input to a scanning "
 5403|  46.6k|                  "function.\n"
 5404|  46.6k|                  "file_marker_found cannot be used as an "
 5405|  46.6k|                  "source range type to scn::scan.\n"
 5406|  46.6k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|  46.6k|                  "and do not provide an explicit source range, "
 5408|  46.6k|                  "or use scn::scan with a FILE* directly.");
 5409|  46.6k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|  46.6k|                  "\n"
 5411|  46.6k|                  "Unsupported range type given as input to a scanning "
 5412|  46.6k|                  "function.\n"
 5413|  46.6k|                  "In order to be scannable, a range needs to satisfy "
 5414|  46.6k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|  46.6k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|  46.6k|                  "\n"
 5417|  46.6k|                  "Unsupported range type given as input to a scanning "
 5418|  46.6k|                  "function.\n"
 5419|  46.6k|                  "A range needs to model forward_range and have a valid "
 5420|  46.6k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|  46.6k|                  "Examples of scannable ranges are std::string, "
 5422|  46.6k|                  "std::string_view, "
 5423|  46.6k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|  46.6k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|  46.6k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|  46.6k|}
_ZN3scn2v46detail17_make_scan_buffer4implIcEEDaNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEENS1_12priority_tagILm3EEE:
 5272|  46.6k|{
 5273|  46.6k|    if constexpr (is_valid_char_type<CharT>) {
 5274|  46.6k|        return r;
 5275|       |        // return make_string_scan_buffer(r);
 5276|       |    }
 5277|       |    else {
 5278|       |        return invalid_char_type{};
 5279|       |    }
 5280|  46.6k|}
_ZNK3scn2v48expectedIlNS0_10scan_errorEEcvbEv:
 1739|   145k|    {
 1740|   145k|        return has_value();
 1741|   145k|    }
_ZNK3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  489|   291k|    {
  490|   291k|        return m_has_value;
  491|   291k|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5errorEv:
 1745|   143k|    {
 1746|   143k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   143k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   143k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   143k|        return this->get_unexpected().error();
 1748|   143k|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   143k|    {
  473|   143k|        return m_unexpected;
  474|   143k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|  44.7k|        : base(unexpect, std::move(e.error())),
 1616|  44.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  44.7k|    {
 1618|  44.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|  44.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  44.7k|          m_has_value(false)
  451|  44.7k|    {
  452|  44.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  46.6k|    {
 1316|  46.6k|    }
_ZN3scn2v46detail23make_vscan_result_rangeIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_l:
 6674|  1.92k|{
 6675|       |    if constexpr (ranges::random_access_iterator<
 6676|  1.92k|                      ranges::iterator_t<SourceRange>>) {
 6677|  1.92k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6678|       |    }
 6679|       |    else {
 6680|       |        auto it = ranges::begin(source);
 6681|       |        while (n > 0) {
 6682|       |            --n;
 6683|       |            ++it;
 6684|       |        }
 6685|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6686|       |    }
 6687|  1.92k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  1.92k|    {
 2869|  1.92k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  1.92k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  1.92k|    {
 2850|  1.92k|        return decay_copy(t.begin());
 2851|  1.92k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 2093|   130k|{
 2094|   130k|    return SCN_FWD(t);
  ------------------
  |  |  936|   130k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|   130k|}
_ZN3scn2v46detail27make_vscan_result_range_endINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaRT_:
 6661|  1.92k|{
 6662|  1.92k|    return ranges::end(source);
 6663|  1.92k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  1.92k|    {
 2926|  1.92k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  1.92k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  1.92k|    {
 2908|  1.92k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  1.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  1.92k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3464|   513k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   513k|    static_cast<    \
  |  |  935|   513k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   513k|    static_cast<    \
  |  |  935|   513k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   513k|    {
 3466|   513k|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1794|  2.93k|    {
 1795|  2.93k|        return value();
 1796|  2.93k|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1768|  2.93k|    {
 1769|  2.93k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.93k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.93k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.93k|        return this->get_value();
 1771|  2.93k|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  455|  2.93k|    {
  456|  2.93k|        return m_value;
  457|  2.93k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|  1.92k|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.92k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.92k|    {
 1572|  1.92k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|  1.92k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.92k|    {
  442|  1.92k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEcvS6_Ev:
 8767|  5.18k|    {
 8768|  5.18k|        return m_str;
 8769|  5.18k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJcEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  5.18k|{
 6110|  5.18k|    detail::check_scan_arg_types<Args...>();
 6111|  5.18k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  5.18k|}
_ZN3scn2v46detail20check_scan_arg_typesIJcEEEbv:
 5824|  5.18k|{
 5825|  5.18k|    constexpr bool default_constructible_constraint =
 5826|  5.18k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|  5.18k|    static_assert(default_constructible_constraint,
 5828|  5.18k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|  5.18k|    constexpr bool destructible_constraint =
 5831|  5.18k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|  5.18k|    static_assert(destructible_constraint,
 5833|  5.18k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|  5.18k|    constexpr bool non_reference_constraint =
 5836|  5.18k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|  5.18k|    static_assert(non_reference_constraint,
 5838|  5.18k|                  "Scan argument types must not be references");
 5839|       |
 5840|  5.18k|    constexpr bool movable_constraint =
 5841|  5.18k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|  5.18k|    static_assert(movable_constraint,
 5843|  5.18k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|  5.18k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|  5.18k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|  5.18k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJcEEC2ERNSt3__15tupleIJcEEE:
 6085|  5.18k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  5.18k|    {
 6087|  5.18k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJcEE12make_argptrsIJcEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|  5.18k|    {
 6095|  5.18k|        return {detail::make_arg<
 6096|  5.18k|            kind, Context,
 6097|  5.18k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  5.18k|                                 typename Context::char_type>::value>(args)...};
 6099|  5.18k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE12EcvEEPvRT2_:
 5874|  5.18k|{
 5875|  5.18k|    return make_value<Context>(value).ref_value;
 5876|  5.18k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEcEEDaRT0_:
 5809|  5.18k|{
 5810|  5.18k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  5.18k|                                  needs_context_tag>) {
 5814|  5.18k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  5.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  5.18k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERc:
 5678|  5.18k|    {
 5679|       |        if constexpr (std::is_same_v<char_type, char> &&
 5680|  5.18k|                      !is_type_disabled<char_type>) {
 5681|  5.18k|            return val;
 5682|       |        }
 5683|       |        else if constexpr (is_type_disabled<char_type>) {
 5684|       |            return unscannable_disabled{val};
 5685|       |        }
 5686|       |        else {
 5687|       |            SCN_UNUSED(val);
 5688|       |            return unscannable_char{};
 5689|       |        }
 5690|  5.18k|    }
_ZN3scn2v46detail15make_value_implIcRcEEDaOT0_:
 5778|  5.18k|{
 5779|  5.18k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  5.18k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  5.18k|    constexpr bool scannable_char =
 5783|  5.18k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  5.18k|    static_assert(scannable_char,
 5785|  5.18k|                  "Cannot scan an argument of an unsupported character "
 5786|  5.18k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  5.18k|    constexpr bool scannable_const =
 5789|  5.18k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  5.18k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  5.18k|    constexpr bool scannable_disabled =
 5793|  5.18k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  5.18k|    static_assert(scannable_disabled,
 5795|  5.18k|                  "Cannot scan an argument that has been disabled by "
 5796|  5.18k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  5.18k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  5.18k|    static_assert(
 5800|  5.18k|        scannable,
 5801|  5.18k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  5.18k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  5.18k|    return arg_value{arg};
 5805|  5.18k|}
_ZN3scn2v46detail9arg_valueC2IcEERT_:
 5562|  5.18k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|  5.18k|    {
 5564|  5.18k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEptEv:
 1814|  5.42k|    {
 1815|  5.42k|        return &value();
 1816|  5.42k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  5.42k|    {
 1769|  5.42k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  5.42k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.42k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  5.42k|        return this->get_value();
 1771|  5.42k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJcEE6valuesEv:
 6353|  5.18k|    {
 6354|  5.18k|        return m_values;
 6355|  5.18k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJcEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  5.18k|        : basic_scan_args(store.desc, store.args.data())
 6136|  5.18k|    {
 6137|  5.18k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2EmPKPv:
 6187|  46.6k|        : m_desc(desc), m_builtin_values(data)
 6188|  46.6k|    {
 6189|  46.6k|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 8440|  46.6k|{
 8441|  46.6k|    return s;
 8442|  46.6k|}
_ZN3scn2v46detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 8417|  46.6k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  5.18k|        : m_str(r.str)
 8763|  5.18k|    {
 8764|  5.18k|    }
_ZN3scn2v44scanIJcENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 9749|  2.59k|{
 9750|  2.59k|    auto result = make_scan_result<Source, Args...>();
 9751|  2.59k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  2.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  2.59k|                                   make_scan_args(result->values())));
 9753|  2.59k|    return result;
 9754|  2.59k|}
_ZN3scn2v45vscanIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS2_6localeEvEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEERKT0_OSB_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextINSG_16buffer_range_tagEcEEEE:
 9478|  23.3k|{
 9479|  23.3k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  936|  23.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9480|  23.3k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS1_22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT_OSC_NS5_IT1_NS6_ISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESR_EEEE:
 9413|  23.3k|{
 9414|  23.3k|#if !SCN_DISABLE_LOCALE
 9415|  23.3k|    auto buffer = detail::make_scan_buffer(range);
 9416|       |
 9417|  23.3k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9418|  23.3k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9419|  23.3k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9420|       |
 9421|  23.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  23.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 22.3k, False: 960]
  |  |  ------------------
  ------------------
 9422|  22.3k|        return unexpected(result.error());
 9423|  22.3k|    }
 9424|    960|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|    960|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9425|       |#else
 9426|       |    static_assert(dependent_false<Locale>::value,
 9427|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9428|       |
 9429|       |    return {};
 9430|       |#endif
 9431|  23.3k|}
_ZN3scn2v44scanIJiERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 9680|  2.59k|{
 9681|  2.59k|    auto result = make_scan_result<Source, Args...>();
 9682|  2.59k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  2.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  2.59k|                                   make_scan_args(result->values())));
 9684|  2.59k|    return result;
 9685|  2.59k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEEDav:
 9636|  5.18k|{
 9637|  5.18k|    return scan_result_type<Source, Args...>();
 9638|  5.18k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2Ev:
 1551|  5.18k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2Ev:
  426|  5.18k|        : m_value(T{}), m_has_value(true)
  427|  5.18k|    {
  428|  5.18k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEC2Ev:
 6570|  5.18k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJiEEC2Ev:
 6344|  15.5k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  5.18k|{
 9622|  5.18k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  5.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.18k, False: 0]
  |  |  ------------------
  ------------------
 9623|  5.18k|        out = unexpected(in.error());
 9624|  5.18k|    }
 9625|      0|    else {
 9626|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|      0|    }
 9628|  5.18k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  5.18k|        : base(unexpect, std::move(e.error())),
 1616|  5.18k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  5.18k|    {
 1618|  5.18k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  5.18k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  5.18k|          m_has_value(false)
  451|  5.18k|    {
  452|  5.18k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  5.18k|    {
 1316|  5.18k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEaSEOSC_:
 1556|  5.18k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorEvEaSEOSD_:
  902|  5.18k|    {
  903|  5.18k|        assign_common(std::move(other));
  904|  5.18k|        return *this;
  905|  5.18k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  5.18k|    {
  950|  5.18k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 5.18k, False: 0]
  ------------------
  951|  5.18k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 5.18k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  5.18k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  5.18k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  15.5k|    {
  490|  15.5k|        return m_has_value;
  491|  15.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  5.18k|    {
  456|  5.18k|        return m_value;
  457|  5.18k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  5.18k|    {
 1046|  5.18k|        this->destroy_value();
 1047|  5.18k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  5.18k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  5.18k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  5.18k|    {
  504|  5.18k|        scn::detail::construct_at(&get_unexpected(),
  505|  5.18k|                                  std::forward<Args>(args)...);
  506|  5.18k|        m_has_value = false;
  507|  5.18k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  5.18k|    {
  473|  5.18k|        return m_unexpected;
  474|  5.18k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  5.18k|    {
  481|  5.18k|        return std::move(m_unexpected);
  482|  5.18k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEcvS6_Ev:
 8767|  5.18k|    {
 8768|  5.18k|        return m_str;
 8769|  5.18k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJiEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  5.18k|{
 6110|  5.18k|    detail::check_scan_arg_types<Args...>();
 6111|  5.18k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  5.18k|}
_ZN3scn2v46detail20check_scan_arg_typesIJiEEEbv:
 5824|  15.5k|{
 5825|  15.5k|    constexpr bool default_constructible_constraint =
 5826|  15.5k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|  15.5k|    static_assert(default_constructible_constraint,
 5828|  15.5k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|  15.5k|    constexpr bool destructible_constraint =
 5831|  15.5k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|  15.5k|    static_assert(destructible_constraint,
 5833|  15.5k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|  15.5k|    constexpr bool non_reference_constraint =
 5836|  15.5k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|  15.5k|    static_assert(non_reference_constraint,
 5838|  15.5k|                  "Scan argument types must not be references");
 5839|       |
 5840|  15.5k|    constexpr bool movable_constraint =
 5841|  15.5k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|  15.5k|    static_assert(movable_constraint,
 5843|  15.5k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|  15.5k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|  15.5k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|  15.5k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJiEEC2ERNSt3__15tupleIJiEEE:
 6085|  5.18k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  5.18k|    {
 6087|  5.18k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|  5.18k|    {
 6095|  5.18k|        return {detail::make_arg<
 6096|  5.18k|            kind, Context,
 6097|  5.18k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  5.18k|                                 typename Context::char_type>::value>(args)...};
 6099|  5.18k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE3EivEEPvRT2_:
 5874|  5.18k|{
 5875|  5.18k|    return make_value<Context>(value).ref_value;
 5876|  5.18k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEiEEDaRT0_:
 5809|  5.18k|{
 5810|  5.18k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  5.18k|                                  needs_context_tag>) {
 5814|  5.18k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  5.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  5.18k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERi:
 5648|  5.18k|    {                                                                        \
 5649|  5.18k|        return val;                                                          \
 5650|  5.18k|    }
_ZN3scn2v46detail15make_value_implIiRiEEDaOT0_:
 5778|  15.5k|{
 5779|  15.5k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  15.5k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  15.5k|    constexpr bool scannable_char =
 5783|  15.5k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  15.5k|    static_assert(scannable_char,
 5785|  15.5k|                  "Cannot scan an argument of an unsupported character "
 5786|  15.5k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  15.5k|    constexpr bool scannable_const =
 5789|  15.5k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  15.5k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  15.5k|    constexpr bool scannable_disabled =
 5793|  15.5k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  15.5k|    static_assert(scannable_disabled,
 5795|  15.5k|                  "Cannot scan an argument that has been disabled by "
 5796|  15.5k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  15.5k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  15.5k|    static_assert(
 5800|  15.5k|        scannable,
 5801|  15.5k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  15.5k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  15.5k|    return arg_value{arg};
 5805|  15.5k|}
_ZN3scn2v46detail9arg_valueC2IiEERT_:
 5562|  15.5k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|  15.5k|    {
 5564|  15.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEptEv:
 1814|  5.18k|    {
 1815|  5.18k|        return &value();
 1816|  5.18k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  5.18k|    {
 1769|  5.18k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  5.18k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.18k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  5.18k|        return this->get_value();
 1771|  5.18k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJiEE6valuesEv:
 6353|  15.5k|    {
 6354|  15.5k|        return m_values;
 6355|  15.5k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJiEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  5.18k|        : basic_scan_args(store.desc, store.args.data())
 6136|  5.18k|    {
 6137|  5.18k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  5.18k|        : m_str(r.str)
 8763|  5.18k|    {
 8764|  5.18k|    }
_ZN3scn2v44scanIJiENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 9749|  2.59k|{
 9750|  2.59k|    auto result = make_scan_result<Source, Args...>();
 9751|  2.59k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  2.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  2.59k|                                   make_scan_args(result->values())));
 9753|  2.59k|    return result;
 9754|  2.59k|}
_ZN3scn2v44scanIJjERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 9680|  2.59k|{
 9681|  2.59k|    auto result = make_scan_result<Source, Args...>();
 9682|  2.59k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  2.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  2.59k|                                   make_scan_args(result->values())));
 9684|  2.59k|    return result;
 9685|  2.59k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEEDav:
 9636|  5.18k|{
 9637|  5.18k|    return scan_result_type<Source, Args...>();
 9638|  5.18k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2Ev:
 1551|  5.18k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2Ev:
  426|  5.18k|        : m_value(T{}), m_has_value(true)
  427|  5.18k|    {
  428|  5.18k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEC2Ev:
 6570|  5.18k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJjEEC2Ev:
 6344|  15.5k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  5.18k|{
 9622|  5.18k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  5.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.18k, False: 0]
  |  |  ------------------
  ------------------
 9623|  5.18k|        out = unexpected(in.error());
 9624|  5.18k|    }
 9625|      0|    else {
 9626|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|      0|    }
 9628|  5.18k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  5.18k|        : base(unexpect, std::move(e.error())),
 1616|  5.18k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  5.18k|    {
 1618|  5.18k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  5.18k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  5.18k|          m_has_value(false)
  451|  5.18k|    {
  452|  5.18k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  5.18k|    {
 1316|  5.18k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEaSEOSC_:
 1556|  5.18k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorEvEaSEOSD_:
  902|  5.18k|    {
  903|  5.18k|        assign_common(std::move(other));
  904|  5.18k|        return *this;
  905|  5.18k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  5.18k|    {
  950|  5.18k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 5.18k, False: 0]
  ------------------
  951|  5.18k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 5.18k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  5.18k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  5.18k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  15.5k|    {
  490|  15.5k|        return m_has_value;
  491|  15.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  5.18k|    {
  456|  5.18k|        return m_value;
  457|  5.18k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  5.18k|    {
 1046|  5.18k|        this->destroy_value();
 1047|  5.18k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  5.18k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  5.18k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  5.18k|    {
  504|  5.18k|        scn::detail::construct_at(&get_unexpected(),
  505|  5.18k|                                  std::forward<Args>(args)...);
  506|  5.18k|        m_has_value = false;
  507|  5.18k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  5.18k|    {
  473|  5.18k|        return m_unexpected;
  474|  5.18k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  5.18k|    {
  481|  5.18k|        return std::move(m_unexpected);
  482|  5.18k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEcvS6_Ev:
 8767|  5.18k|    {
 8768|  5.18k|        return m_str;
 8769|  5.18k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJjEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  5.18k|{
 6110|  5.18k|    detail::check_scan_arg_types<Args...>();
 6111|  5.18k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  5.18k|}
_ZN3scn2v46detail20check_scan_arg_typesIJjEEEbv:
 5824|  15.5k|{
 5825|  15.5k|    constexpr bool default_constructible_constraint =
 5826|  15.5k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|  15.5k|    static_assert(default_constructible_constraint,
 5828|  15.5k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|  15.5k|    constexpr bool destructible_constraint =
 5831|  15.5k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|  15.5k|    static_assert(destructible_constraint,
 5833|  15.5k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|  15.5k|    constexpr bool non_reference_constraint =
 5836|  15.5k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|  15.5k|    static_assert(non_reference_constraint,
 5838|  15.5k|                  "Scan argument types must not be references");
 5839|       |
 5840|  15.5k|    constexpr bool movable_constraint =
 5841|  15.5k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|  15.5k|    static_assert(movable_constraint,
 5843|  15.5k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|  15.5k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|  15.5k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|  15.5k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJjEEC2ERNSt3__15tupleIJjEEE:
 6085|  5.18k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  5.18k|    {
 6087|  5.18k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|  5.18k|    {
 6095|  5.18k|        return {detail::make_arg<
 6096|  5.18k|            kind, Context,
 6097|  5.18k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  5.18k|                                 typename Context::char_type>::value>(args)...};
 6099|  5.18k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE8EjvEEPvRT2_:
 5874|  5.18k|{
 5875|  5.18k|    return make_value<Context>(value).ref_value;
 5876|  5.18k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEjEEDaRT0_:
 5809|  5.18k|{
 5810|  5.18k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  5.18k|                                  needs_context_tag>) {
 5814|  5.18k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  5.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  5.18k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERj:
 5648|  5.18k|    {                                                                        \
 5649|  5.18k|        return val;                                                          \
 5650|  5.18k|    }
_ZN3scn2v46detail15make_value_implIjRjEEDaOT0_:
 5778|  15.5k|{
 5779|  15.5k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  15.5k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  15.5k|    constexpr bool scannable_char =
 5783|  15.5k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  15.5k|    static_assert(scannable_char,
 5785|  15.5k|                  "Cannot scan an argument of an unsupported character "
 5786|  15.5k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  15.5k|    constexpr bool scannable_const =
 5789|  15.5k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  15.5k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  15.5k|    constexpr bool scannable_disabled =
 5793|  15.5k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  15.5k|    static_assert(scannable_disabled,
 5795|  15.5k|                  "Cannot scan an argument that has been disabled by "
 5796|  15.5k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  15.5k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  15.5k|    static_assert(
 5800|  15.5k|        scannable,
 5801|  15.5k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  15.5k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  15.5k|    return arg_value{arg};
 5805|  15.5k|}
_ZN3scn2v46detail9arg_valueC2IjEERT_:
 5562|  15.5k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|  15.5k|    {
 5564|  15.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEptEv:
 1814|  5.18k|    {
 1815|  5.18k|        return &value();
 1816|  5.18k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  5.18k|    {
 1769|  5.18k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  5.18k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.18k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  5.18k|        return this->get_value();
 1771|  5.18k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJjEE6valuesEv:
 6353|  15.5k|    {
 6354|  15.5k|        return m_values;
 6355|  15.5k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJjEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  5.18k|        : basic_scan_args(store.desc, store.args.data())
 6136|  5.18k|    {
 6137|  5.18k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  5.18k|        : m_str(r.str)
 8763|  5.18k|    {
 8764|  5.18k|    }
_ZN3scn2v44scanIJjENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 9749|  2.59k|{
 9750|  2.59k|    auto result = make_scan_result<Source, Args...>();
 9751|  2.59k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  2.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  2.59k|                                   make_scan_args(result->values())));
 9753|  2.59k|    return result;
 9754|  2.59k|}
_ZN3scn2v44scanIJdERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 9680|  2.59k|{
 9681|  2.59k|    auto result = make_scan_result<Source, Args...>();
 9682|  2.59k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  2.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  2.59k|                                   make_scan_args(result->values())));
 9684|  2.59k|    return result;
 9685|  2.59k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEEDav:
 9636|  5.18k|{
 9637|  5.18k|    return scan_result_type<Source, Args...>();
 9638|  5.18k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2Ev:
 1551|  5.18k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  426|  5.18k|        : m_value(T{}), m_has_value(true)
  427|  5.18k|    {
  428|  5.18k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2Ev:
 6570|  5.18k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJdEEC2Ev:
 6344|  15.5k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  5.18k|{
 9622|  5.18k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  5.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.18k, False: 0]
  |  |  ------------------
  ------------------
 9623|  5.18k|        out = unexpected(in.error());
 9624|  5.18k|    }
 9625|      0|    else {
 9626|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|      0|    }
 9628|  5.18k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  5.18k|        : base(unexpect, std::move(e.error())),
 1616|  5.18k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  5.18k|    {
 1618|  5.18k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  5.18k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  5.18k|          m_has_value(false)
  451|  5.18k|    {
  452|  5.18k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  5.18k|    {
 1316|  5.18k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEaSEOSC_:
 1556|  5.18k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorEvEaSEOSD_:
  902|  5.18k|    {
  903|  5.18k|        assign_common(std::move(other));
  904|  5.18k|        return *this;
  905|  5.18k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  5.18k|    {
  950|  5.18k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 5.18k, False: 0]
  ------------------
  951|  5.18k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 5.18k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  5.18k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  5.18k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  15.5k|    {
  490|  15.5k|        return m_has_value;
  491|  15.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  5.18k|    {
  456|  5.18k|        return m_value;
  457|  5.18k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  5.18k|    {
 1046|  5.18k|        this->destroy_value();
 1047|  5.18k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  5.18k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  5.18k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  5.18k|    {
  504|  5.18k|        scn::detail::construct_at(&get_unexpected(),
  505|  5.18k|                                  std::forward<Args>(args)...);
  506|  5.18k|        m_has_value = false;
  507|  5.18k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  5.18k|    {
  473|  5.18k|        return m_unexpected;
  474|  5.18k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  5.18k|    {
  481|  5.18k|        return std::move(m_unexpected);
  482|  5.18k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEcvS6_Ev:
 8767|  5.18k|    {
 8768|  5.18k|        return m_str;
 8769|  5.18k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJdEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  5.18k|{
 6110|  5.18k|    detail::check_scan_arg_types<Args...>();
 6111|  5.18k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  5.18k|}
_ZN3scn2v46detail20check_scan_arg_typesIJdEEEbv:
 5824|  15.5k|{
 5825|  15.5k|    constexpr bool default_constructible_constraint =
 5826|  15.5k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|  15.5k|    static_assert(default_constructible_constraint,
 5828|  15.5k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|  15.5k|    constexpr bool destructible_constraint =
 5831|  15.5k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|  15.5k|    static_assert(destructible_constraint,
 5833|  15.5k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|  15.5k|    constexpr bool non_reference_constraint =
 5836|  15.5k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|  15.5k|    static_assert(non_reference_constraint,
 5838|  15.5k|                  "Scan argument types must not be references");
 5839|       |
 5840|  15.5k|    constexpr bool movable_constraint =
 5841|  15.5k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|  15.5k|    static_assert(movable_constraint,
 5843|  15.5k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|  15.5k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|  15.5k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|  15.5k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJdEEC2ERNSt3__15tupleIJdEEE:
 6085|  5.18k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  5.18k|    {
 6087|  5.18k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|  5.18k|    {
 6095|  5.18k|        return {detail::make_arg<
 6096|  5.18k|            kind, Context,
 6097|  5.18k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  5.18k|                                 typename Context::char_type>::value>(args)...};
 6099|  5.18k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE17EdvEEPvRT2_:
 5874|  5.18k|{
 5875|  5.18k|    return make_value<Context>(value).ref_value;
 5876|  5.18k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEdEEDaRT0_:
 5809|  5.18k|{
 5810|  5.18k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  5.18k|                                  needs_context_tag>) {
 5814|  5.18k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  5.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  5.18k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERd:
 5648|  5.18k|    {                                                                        \
 5649|  5.18k|        return val;                                                          \
 5650|  5.18k|    }
_ZN3scn2v46detail15make_value_implIdRdEEDaOT0_:
 5778|  15.5k|{
 5779|  15.5k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  15.5k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  15.5k|    constexpr bool scannable_char =
 5783|  15.5k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  15.5k|    static_assert(scannable_char,
 5785|  15.5k|                  "Cannot scan an argument of an unsupported character "
 5786|  15.5k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  15.5k|    constexpr bool scannable_const =
 5789|  15.5k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  15.5k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  15.5k|    constexpr bool scannable_disabled =
 5793|  15.5k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  15.5k|    static_assert(scannable_disabled,
 5795|  15.5k|                  "Cannot scan an argument that has been disabled by "
 5796|  15.5k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  15.5k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  15.5k|    static_assert(
 5800|  15.5k|        scannable,
 5801|  15.5k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  15.5k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  15.5k|    return arg_value{arg};
 5805|  15.5k|}
_ZN3scn2v46detail9arg_valueC2IdEERT_:
 5562|  15.5k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|  15.5k|    {
 5564|  15.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEptEv:
 1814|  5.18k|    {
 1815|  5.18k|        return &value();
 1816|  5.18k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  5.18k|    {
 1769|  5.18k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  5.18k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.18k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  5.18k|        return this->get_value();
 1771|  5.18k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJdEE6valuesEv:
 6353|  15.5k|    {
 6354|  15.5k|        return m_values;
 6355|  15.5k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJdEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  5.18k|        : basic_scan_args(store.desc, store.args.data())
 6136|  5.18k|    {
 6137|  5.18k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  5.18k|        : m_str(r.str)
 8763|  5.18k|    {
 8764|  5.18k|    }
_ZN3scn2v44scanIJdENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 9749|  2.59k|{
 9750|  2.59k|    auto result = make_scan_result<Source, Args...>();
 9751|  2.59k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  2.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  2.59k|                                   make_scan_args(result->values())));
 9753|  2.59k|    return result;
 9754|  2.59k|}
_ZN3scn2v44scanIJbERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 9680|  2.59k|{
 9681|  2.59k|    auto result = make_scan_result<Source, Args...>();
 9682|  2.59k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  2.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  2.59k|                                   make_scan_args(result->values())));
 9684|  2.59k|    return result;
 9685|  2.59k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEEDav:
 9636|  5.18k|{
 9637|  5.18k|    return scan_result_type<Source, Args...>();
 9638|  5.18k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEEC2Ev:
 1551|  5.18k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2Ev:
  426|  5.18k|        : m_value(T{}), m_has_value(true)
  427|  5.18k|    {
  428|  5.18k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJbEEC2Ev:
 6570|  5.18k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJbEEC2Ev:
 6344|  15.5k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  5.18k|{
 9622|  5.18k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  5.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.18k, False: 0]
  |  |  ------------------
  ------------------
 9623|  5.18k|        out = unexpected(in.error());
 9624|  5.18k|    }
 9625|      0|    else {
 9626|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|      0|    }
 9628|  5.18k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  5.18k|        : base(unexpect, std::move(e.error())),
 1616|  5.18k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  5.18k|    {
 1618|  5.18k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  5.18k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  5.18k|          m_has_value(false)
  451|  5.18k|    {
  452|  5.18k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  5.18k|    {
 1316|  5.18k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEEaSEOSC_:
 1556|  5.18k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorEvEaSEOSD_:
  902|  5.18k|    {
  903|  5.18k|        assign_common(std::move(other));
  904|  5.18k|        return *this;
  905|  5.18k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  5.18k|    {
  950|  5.18k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 5.18k, False: 0]
  ------------------
  951|  5.18k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 5.18k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  5.18k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  5.18k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  15.5k|    {
  490|  15.5k|        return m_has_value;
  491|  15.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  5.18k|    {
  456|  5.18k|        return m_value;
  457|  5.18k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  5.18k|    {
 1046|  5.18k|        this->destroy_value();
 1047|  5.18k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  5.18k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  5.18k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  5.18k|    {
  504|  5.18k|        scn::detail::construct_at(&get_unexpected(),
  505|  5.18k|                                  std::forward<Args>(args)...);
  506|  5.18k|        m_has_value = false;
  507|  5.18k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  5.18k|    {
  473|  5.18k|        return m_unexpected;
  474|  5.18k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  5.18k|    {
  481|  5.18k|        return std::move(m_unexpected);
  482|  5.18k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEcvS6_Ev:
 8767|  5.18k|    {
 8768|  5.18k|        return m_str;
 8769|  5.18k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJbEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  5.18k|{
 6110|  5.18k|    detail::check_scan_arg_types<Args...>();
 6111|  5.18k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  5.18k|}
_ZN3scn2v46detail20check_scan_arg_typesIJbEEEbv:
 5824|  15.5k|{
 5825|  15.5k|    constexpr bool default_constructible_constraint =
 5826|  15.5k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|  15.5k|    static_assert(default_constructible_constraint,
 5828|  15.5k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|  15.5k|    constexpr bool destructible_constraint =
 5831|  15.5k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|  15.5k|    static_assert(destructible_constraint,
 5833|  15.5k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|  15.5k|    constexpr bool non_reference_constraint =
 5836|  15.5k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|  15.5k|    static_assert(non_reference_constraint,
 5838|  15.5k|                  "Scan argument types must not be references");
 5839|       |
 5840|  15.5k|    constexpr bool movable_constraint =
 5841|  15.5k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|  15.5k|    static_assert(movable_constraint,
 5843|  15.5k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|  15.5k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|  15.5k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|  15.5k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJbEEC2ERNSt3__15tupleIJbEEE:
 6085|  5.18k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  5.18k|    {
 6087|  5.18k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJbEE12make_argptrsIJbEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|  5.18k|    {
 6095|  5.18k|        return {detail::make_arg<
 6096|  5.18k|            kind, Context,
 6097|  5.18k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  5.18k|                                 typename Context::char_type>::value>(args)...};
 6099|  5.18k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE11EbvEEPvRT2_:
 5874|  5.18k|{
 5875|  5.18k|    return make_value<Context>(value).ref_value;
 5876|  5.18k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEbEEDaRT0_:
 5809|  5.18k|{
 5810|  5.18k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  5.18k|                                  needs_context_tag>) {
 5814|  5.18k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  5.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  5.18k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERb:
 5648|  5.18k|    {                                                                        \
 5649|  5.18k|        return val;                                                          \
 5650|  5.18k|    }
_ZN3scn2v46detail15make_value_implIbRbEEDaOT0_:
 5778|  15.5k|{
 5779|  15.5k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  15.5k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  15.5k|    constexpr bool scannable_char =
 5783|  15.5k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  15.5k|    static_assert(scannable_char,
 5785|  15.5k|                  "Cannot scan an argument of an unsupported character "
 5786|  15.5k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  15.5k|    constexpr bool scannable_const =
 5789|  15.5k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  15.5k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  15.5k|    constexpr bool scannable_disabled =
 5793|  15.5k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  15.5k|    static_assert(scannable_disabled,
 5795|  15.5k|                  "Cannot scan an argument that has been disabled by "
 5796|  15.5k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  15.5k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  15.5k|    static_assert(
 5800|  15.5k|        scannable,
 5801|  15.5k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  15.5k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  15.5k|    return arg_value{arg};
 5805|  15.5k|}
_ZN3scn2v46detail9arg_valueC2IbEERT_:
 5562|  15.5k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|  15.5k|    {
 5564|  15.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEEptEv:
 1814|  5.18k|    {
 1815|  5.18k|        return &value();
 1816|  5.18k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  5.18k|    {
 1769|  5.18k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  5.18k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.18k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  5.18k|        return this->get_value();
 1771|  5.18k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJbEE6valuesEv:
 6353|  15.5k|    {
 6354|  15.5k|        return m_values;
 6355|  15.5k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJbEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  5.18k|        : basic_scan_args(store.desc, store.args.data())
 6136|  5.18k|    {
 6137|  5.18k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  5.18k|        : m_str(r.str)
 8763|  5.18k|    {
 8764|  5.18k|    }
_ZN3scn2v44scanIJbENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 9749|  2.59k|{
 9750|  2.59k|    auto result = make_scan_result<Source, Args...>();
 9751|  2.59k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  2.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  2.59k|                                   make_scan_args(result->values())));
 9753|  2.59k|    return result;
 9754|  2.59k|}
_ZN3scn2v44scanIJPvERNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
 9680|  2.59k|{
 9681|  2.59k|    auto result = make_scan_result<Source, Args...>();
 9682|  2.59k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  2.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  2.59k|                                   make_scan_args(result->values())));
 9684|  2.59k|    return result;
 9685|  2.59k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEEDav:
 9636|  5.18k|{
 9637|  5.18k|    return scan_result_type<Source, Args...>();
 9638|  5.18k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEEC2Ev:
 1551|  5.18k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2Ev:
  426|  5.18k|        : m_value(T{}), m_has_value(true)
  427|  5.18k|    {
  428|  5.18k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJPvEEC2Ev:
 6570|  5.18k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJPvEEC2Ev:
 6344|  15.5k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELSA_0EEEvRNS0_13scan_expectedISG_EEONSR_ISM_EE:
 9621|  5.18k|{
 9622|  5.18k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  5.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.18k, False: 0]
  |  |  ------------------
  ------------------
 9623|  5.18k|        out = unexpected(in.error());
 9624|  5.18k|    }
 9625|      0|    else {
 9626|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|      0|    }
 9628|  5.18k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELSA_0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSA_0EEEONS0_10unexpectedISH_EE:
 1615|  5.18k|        : base(unexpect, std::move(e.error())),
 1616|  5.18k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  5.18k|    {
 1618|  5.18k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  449|  5.18k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  5.18k|          m_has_value(false)
  451|  5.18k|    {
  452|  5.18k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  5.18k|    {
 1316|  5.18k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEEaSEOSD_:
 1556|  5.18k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorEvEaSEOSE_:
  902|  5.18k|    {
  903|  5.18k|        assign_common(std::move(other));
  904|  5.18k|        return *this;
  905|  5.18k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  949|  5.18k|    {
  950|  5.18k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 5.18k, False: 0]
  ------------------
  951|  5.18k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 5.18k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  5.18k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  5.18k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  15.5k|    {
  490|  15.5k|        return m_has_value;
  491|  15.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  5.18k|    {
  456|  5.18k|        return m_value;
  457|  5.18k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1045|  5.18k|    {
 1046|  5.18k|        this->destroy_value();
 1047|  5.18k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  5.18k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  5.18k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  503|  5.18k|    {
  504|  5.18k|        scn::detail::construct_at(&get_unexpected(),
  505|  5.18k|                                  std::forward<Args>(args)...);
  506|  5.18k|        m_has_value = false;
  507|  5.18k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  5.18k|    {
  473|  5.18k|        return m_unexpected;
  474|  5.18k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  5.18k|    {
  481|  5.18k|        return std::move(m_unexpected);
  482|  5.18k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEcvS6_Ev:
 8767|  5.18k|    {
 8768|  5.18k|        return m_str;
 8769|  5.18k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJPvEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  5.18k|{
 6110|  5.18k|    detail::check_scan_arg_types<Args...>();
 6111|  5.18k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  5.18k|}
_ZN3scn2v46detail20check_scan_arg_typesIJPvEEEbv:
 5824|  15.5k|{
 5825|  15.5k|    constexpr bool default_constructible_constraint =
 5826|  15.5k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|  15.5k|    static_assert(default_constructible_constraint,
 5828|  15.5k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|  15.5k|    constexpr bool destructible_constraint =
 5831|  15.5k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|  15.5k|    static_assert(destructible_constraint,
 5833|  15.5k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|  15.5k|    constexpr bool non_reference_constraint =
 5836|  15.5k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|  15.5k|    static_assert(non_reference_constraint,
 5838|  15.5k|                  "Scan argument types must not be references");
 5839|       |
 5840|  15.5k|    constexpr bool movable_constraint =
 5841|  15.5k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|  15.5k|    static_assert(movable_constraint,
 5843|  15.5k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|  15.5k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|  15.5k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|  15.5k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJPvEEC2ERNSt3__15tupleIJS6_EEE:
 6085|  5.18k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  5.18k|    {
 6087|  5.18k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJPvEE12make_argptrsIJS6_EEENSt3__15arrayIS6_Lm1EEEDpRT_:
 6094|  5.18k|    {
 6095|  5.18k|        return {detail::make_arg<
 6096|  5.18k|            kind, Context,
 6097|  5.18k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  5.18k|                                 typename Context::char_type>::value>(args)...};
 6099|  5.18k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE15EPvvEES8_RT2_:
 5874|  5.18k|{
 5875|  5.18k|    return make_value<Context>(value).ref_value;
 5876|  5.18k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEPvEEDaRT0_:
 5809|  5.18k|{
 5810|  5.18k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  5.18k|                                  needs_context_tag>) {
 5814|  5.18k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  5.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  5.18k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERPv:
 5648|  5.18k|    {                                                                        \
 5649|  5.18k|        return val;                                                          \
 5650|  5.18k|    }
_ZN3scn2v46detail15make_value_implIPvRS3_EEDaOT0_:
 5778|  15.5k|{
 5779|  15.5k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  15.5k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  15.5k|    constexpr bool scannable_char =
 5783|  15.5k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  15.5k|    static_assert(scannable_char,
 5785|  15.5k|                  "Cannot scan an argument of an unsupported character "
 5786|  15.5k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  15.5k|    constexpr bool scannable_const =
 5789|  15.5k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  15.5k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  15.5k|    constexpr bool scannable_disabled =
 5793|  15.5k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  15.5k|    static_assert(scannable_disabled,
 5795|  15.5k|                  "Cannot scan an argument that has been disabled by "
 5796|  15.5k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  15.5k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  15.5k|    static_assert(
 5800|  15.5k|        scannable,
 5801|  15.5k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  15.5k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  15.5k|    return arg_value{arg};
 5805|  15.5k|}
_ZN3scn2v46detail9arg_valueC2IPvEERT_:
 5562|  15.5k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|  15.5k|    {
 5564|  15.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEEptEv:
 1814|  5.18k|    {
 1815|  5.18k|        return &value();
 1816|  5.18k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELSA_0EEERSH_v:
 1768|  5.18k|    {
 1769|  5.18k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  5.18k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.18k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  5.18k|        return this->get_value();
 1771|  5.18k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJPvEE6valuesEv:
 6353|  15.5k|    {
 6354|  15.5k|        return m_values;
 6355|  15.5k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJPvEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  5.18k|        : basic_scan_args(store.desc, store.args.data())
 6136|  5.18k|    {
 6137|  5.18k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  5.18k|        : m_str(r.str)
 8763|  5.18k|    {
 8764|  5.18k|    }
_ZN3scn2v44scanIJPvENSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
 9749|  2.59k|{
 9750|  2.59k|    auto result = make_scan_result<Source, Args...>();
 9751|  2.59k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  2.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  2.59k|                                   make_scan_args(result->values())));
 9753|  2.59k|    return result;
 9754|  2.59k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEERNS2_17basic_string_viewIcS5_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEEOSF_NS0_24basic_scan_format_stringIcNSK_13type_identityISF_E4typeEJDpNSW_ISQ_E4typeEEEE:
 9680|  2.59k|{
 9681|  2.59k|    auto result = make_scan_result<Source, Args...>();
 9682|  2.59k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  2.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  2.59k|                                   make_scan_args(result->values())));
 9684|  2.59k|    return result;
 9685|  2.59k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEEDav:
 9636|  5.18k|{
 9637|  5.18k|    return scan_result_type<Source, Args...>();
 9638|  5.18k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2Ev:
 1551|  5.18k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2Ev:
  611|  5.18k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  5.18k|    {
  613|  5.18k|        construct();
  614|  5.18k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  5.18k|    {
  694|  5.18k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  5.18k|        m_has_value = true;
  696|  5.18k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJEEEPT_SK_DpOT0_:
  395|  5.18k|{
  396|  5.18k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  5.18k|        T(std::forward<Args>(args)...);
  398|  5.18k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2Ev:
 6570|  5.18k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEC2Ev:
 6344|  15.5k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|  16.1k|    {
  718|  16.1k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|  16.1k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|  16.1k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9621|  5.18k|{
 9622|  5.18k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  5.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.62k, False: 562]
  |  |  ------------------
  ------------------
 9623|  4.62k|        out = unexpected(in.error());
 9624|  4.62k|    }
 9625|    562|    else {
 9626|    562|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    562|    static_cast<    \
  |  |  935|    562|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|    562|    }
 9628|  5.18k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  4.62k|        : base(unexpect, std::move(e.error())),
 1616|  4.62k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  4.62k|    {
 1618|  4.62k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  4.62k|        : m_has_value(false)
  637|  4.62k|    {
  638|  4.62k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  4.62k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  700|  4.62k|    {
  701|  4.62k|        scn::detail::construct_at(unexpected_ptr(),
  702|  4.62k|                                  std::forward<Args>(args)...);
  703|  4.62k|        m_has_value = false;
  704|  4.62k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  395|  29.5k|{
  396|  29.5k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  29.5k|        T(std::forward<Args>(args)...);
  398|  29.5k|}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  23.1k|    {
  730|  23.1k|        return reinterpret_cast<unexpected<E>*>(
  731|  23.1k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  23.1k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  23.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  4.62k|    {
 1316|  4.62k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEaSEOSJ_:
 1556|  4.62k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvEaSEOSK_:
  902|  4.62k|    {
  903|  4.62k|        assign_common(std::move(other));
  904|  4.62k|        return *this;
  905|  4.62k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  4.62k|    {
  950|  4.62k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 4.62k, False: 0]
  ------------------
  951|  4.62k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 4.62k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  4.62k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  4.62k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|  24.8k|    {
  687|  24.8k|        return m_has_value;
  688|  24.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  5.75k|    {
  653|  5.75k|        return *value_ptr();
  654|  5.75k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  4.62k|    {
 1046|  4.62k|        this->destroy_value();
 1047|  4.62k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  4.62k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  5.18k|    {
  708|  5.18k|        scn::detail::destroy_at(value_ptr());
  709|  5.18k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  401|  5.18k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  5.18k|    else {
  408|  5.18k|        p->~T();
  409|  5.18k|    }
  410|  5.18k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 6577|  5.18k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  4.62k|    {
  701|  4.62k|        scn::detail::construct_at(unexpected_ptr(),
  702|  4.62k|                                  std::forward<Args>(args)...);
  703|  4.62k|        m_has_value = false;
  704|  4.62k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  4.62k|    {
  678|  4.62k|        return std::move(*unexpected_ptr());
  679|  4.62k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  9.25k|    {
  712|  9.25k|        scn::detail::destroy_at(unexpected_ptr());
  713|  9.25k|    }
_ZN3scn2v46detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  401|  58.8k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  58.8k|    else {
  408|  58.8k|        p->~T();
  409|  58.8k|    }
  410|  58.8k|}
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEcvS6_Ev:
 8767|  5.18k|    {
 8768|  5.18k|        return m_str;
 8769|  5.18k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6109|  5.18k|{
 6110|  5.18k|    detail::check_scan_arg_types<Args...>();
 6111|  5.18k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  5.18k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEbv:
 5824|  15.5k|{
 5825|  15.5k|    constexpr bool default_constructible_constraint =
 5826|  15.5k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|  15.5k|    static_assert(default_constructible_constraint,
 5828|  15.5k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|  15.5k|    constexpr bool destructible_constraint =
 5831|  15.5k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|  15.5k|    static_assert(destructible_constraint,
 5833|  15.5k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|  15.5k|    constexpr bool non_reference_constraint =
 5836|  15.5k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|  15.5k|    static_assert(non_reference_constraint,
 5838|  15.5k|                  "Scan argument types must not be references");
 5839|       |
 5840|  15.5k|    constexpr bool movable_constraint =
 5841|  15.5k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|  15.5k|    static_assert(movable_constraint,
 5843|  15.5k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|  15.5k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|  15.5k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|  15.5k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ERNS6_5tupleIJSC_EEE:
 6085|  5.18k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  5.18k|    {
 6087|  5.18k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEE12make_argptrsIJSC_EEENS6_5arrayIPvLm1EEEDpRT_:
 6094|  5.18k|    {
 6095|  5.18k|        return {detail::make_arg<
 6096|  5.18k|            kind, Context,
 6097|  5.18k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  5.18k|                                 typename Context::char_type>::value>(args)...};
 6099|  5.18k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEvEEPvRT2_:
 5874|  5.18k|{
 5875|  5.18k|    return make_value<Context>(value).ref_value;
 5876|  5.18k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDaRT0_:
 5809|  5.18k|{
 5810|  5.18k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  5.18k|                                  needs_context_tag>) {
 5814|  5.18k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  5.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  5.18k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 5648|  5.18k|    {                                                                        \
 5649|  5.18k|        return val;                                                          \
 5650|  5.18k|    }
_ZN3scn2v46detail15make_value_implINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERS9_EEDaOT0_:
 5778|  15.5k|{
 5779|  15.5k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  15.5k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  15.5k|    constexpr bool scannable_char =
 5783|  15.5k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  15.5k|    static_assert(scannable_char,
 5785|  15.5k|                  "Cannot scan an argument of an unsupported character "
 5786|  15.5k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  15.5k|    constexpr bool scannable_const =
 5789|  15.5k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  15.5k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  15.5k|    constexpr bool scannable_disabled =
 5793|  15.5k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  15.5k|    static_assert(scannable_disabled,
 5795|  15.5k|                  "Cannot scan an argument that has been disabled by "
 5796|  15.5k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  15.5k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  15.5k|    static_assert(
 5800|  15.5k|        scannable,
 5801|  15.5k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  15.5k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  15.5k|    return arg_value{arg};
 5805|  15.5k|}
_ZN3scn2v46detail9arg_valueC2INSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERT_:
 5562|  15.5k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|  15.5k|    {
 5564|  15.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1814|  5.75k|    {
 1815|  5.75k|        return &value();
 1816|  5.75k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|  5.75k|    {
 1769|  5.75k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  5.75k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.75k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  5.75k|        return this->get_value();
 1771|  5.75k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE6valuesEv:
 6353|  15.5k|    {
 6354|  15.5k|        return m_values;
 6355|  15.5k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  5.18k|        : basic_scan_args(store.desc, store.args.data())
 6136|  5.18k|    {
 6137|  5.18k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  5.18k|        : m_str(r.str)
 8763|  5.18k|    {
 8764|  5.18k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|  9.81k|    {
  643|  9.81k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 562, False: 9.25k]
  ------------------
  644|    562|            destroy_value();
  645|    562|        }
  646|  9.25k|        else {
  647|  9.25k|            destroy_unexpected();
  648|  9.25k|        }
  649|  9.81k|    }
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeERNS2_17basic_string_viewIcS5_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEERKT0_OSG_NS0_24basic_scan_format_stringIcNSL_13type_identityISG_E4typeEJDpNS10_ISR_E4typeEEEE:
 9749|  2.59k|{
 9750|  2.59k|    auto result = make_scan_result<Source, Args...>();
 9751|  2.59k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  2.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  2.59k|                                   make_scan_args(result->values())));
 9753|  2.59k|    return result;
 9754|  2.59k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEERNS2_17basic_string_viewIcNS4_IcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNSL_13type_identityISG_E4typeEJDpNSX_ISR_E4typeEEEE:
 9680|  2.59k|{
 9681|  2.59k|    auto result = make_scan_result<Source, Args...>();
 9682|  2.59k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  2.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  2.59k|                                   make_scan_args(result->values())));
 9684|  2.59k|    return result;
 9685|  2.59k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEEDav:
 9636|  5.18k|{
 9637|  5.18k|    return scan_result_type<Source, Args...>();
 9638|  5.18k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2Ev:
 1551|  5.18k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2Ev:
  611|  5.18k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  5.18k|    {
  613|  5.18k|        construct();
  614|  5.18k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  5.18k|    {
  694|  5.18k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  5.18k|        m_has_value = true;
  696|  5.18k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJEEEPT_SK_DpOT0_:
  395|  5.18k|{
  396|  5.18k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  5.18k|        T(std::forward<Args>(args)...);
  398|  5.18k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2Ev:
 6570|  5.18k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEC2Ev:
 6344|  15.5k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|  16.1k|    {
  718|  16.1k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|  16.1k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|  16.1k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9621|  5.18k|{
 9622|  5.18k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  5.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.62k, False: 562]
  |  |  ------------------
  ------------------
 9623|  4.62k|        out = unexpected(in.error());
 9624|  4.62k|    }
 9625|    562|    else {
 9626|    562|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    562|    static_cast<    \
  |  |  935|    562|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|    562|    }
 9628|  5.18k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  4.62k|        : base(unexpect, std::move(e.error())),
 1616|  4.62k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  4.62k|    {
 1618|  4.62k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  4.62k|        : m_has_value(false)
  637|  4.62k|    {
  638|  4.62k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  4.62k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  700|  4.62k|    {
  701|  4.62k|        scn::detail::construct_at(unexpected_ptr(),
  702|  4.62k|                                  std::forward<Args>(args)...);
  703|  4.62k|        m_has_value = false;
  704|  4.62k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  23.1k|    {
  730|  23.1k|        return reinterpret_cast<unexpected<E>*>(
  731|  23.1k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  23.1k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  23.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  4.62k|    {
 1316|  4.62k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEaSEOSJ_:
 1556|  4.62k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvEaSEOSK_:
  902|  4.62k|    {
  903|  4.62k|        assign_common(std::move(other));
  904|  4.62k|        return *this;
  905|  4.62k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  4.62k|    {
  950|  4.62k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 4.62k, False: 0]
  ------------------
  951|  4.62k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 4.62k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  4.62k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  4.62k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|  24.8k|    {
  687|  24.8k|        return m_has_value;
  688|  24.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  5.75k|    {
  653|  5.75k|        return *value_ptr();
  654|  5.75k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  4.62k|    {
 1046|  4.62k|        this->destroy_value();
 1047|  4.62k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  4.62k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  5.18k|    {
  708|  5.18k|        scn::detail::destroy_at(value_ptr());
  709|  5.18k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  401|  5.18k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  5.18k|    else {
  408|  5.18k|        p->~T();
  409|  5.18k|    }
  410|  5.18k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 6577|  5.18k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  4.62k|    {
  701|  4.62k|        scn::detail::construct_at(unexpected_ptr(),
  702|  4.62k|                                  std::forward<Args>(args)...);
  703|  4.62k|        m_has_value = false;
  704|  4.62k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  4.62k|    {
  678|  4.62k|        return std::move(*unexpected_ptr());
  679|  4.62k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  9.25k|    {
  712|  9.25k|        scn::detail::destroy_at(unexpected_ptr());
  713|  9.25k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEcvS6_Ev:
 8767|  5.18k|    {
 8768|  5.18k|        return m_str;
 8769|  5.18k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6109|  5.18k|{
 6110|  5.18k|    detail::check_scan_arg_types<Args...>();
 6111|  5.18k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  5.18k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEEbv:
 5824|  15.5k|{
 5825|  15.5k|    constexpr bool default_constructible_constraint =
 5826|  15.5k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|  15.5k|    static_assert(default_constructible_constraint,
 5828|  15.5k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|  15.5k|    constexpr bool destructible_constraint =
 5831|  15.5k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|  15.5k|    static_assert(destructible_constraint,
 5833|  15.5k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|  15.5k|    constexpr bool non_reference_constraint =
 5836|  15.5k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|  15.5k|    static_assert(non_reference_constraint,
 5838|  15.5k|                  "Scan argument types must not be references");
 5839|       |
 5840|  15.5k|    constexpr bool movable_constraint =
 5841|  15.5k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|  15.5k|    static_assert(movable_constraint,
 5843|  15.5k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|  15.5k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|  15.5k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|  15.5k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ERNS6_5tupleIJSC_EEE:
 6085|  5.18k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  5.18k|    {
 6087|  5.18k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEE12make_argptrsIJSC_EEENS6_5arrayIPvLm1EEEDpRT_:
 6094|  5.18k|    {
 6095|  5.18k|        return {detail::make_arg<
 6096|  5.18k|            kind, Context,
 6097|  5.18k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  5.18k|                                 typename Context::char_type>::value>(args)...};
 6099|  5.18k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEvEEPvRT2_:
 5874|  5.18k|{
 5875|  5.18k|    return make_value<Context>(value).ref_value;
 5876|  5.18k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEDaRT0_:
 5809|  5.18k|{
 5810|  5.18k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  5.18k|                                  needs_context_tag>) {
 5814|  5.18k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  5.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  5.18k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 5648|  5.18k|    {                                                                        \
 5649|  5.18k|        return val;                                                          \
 5650|  5.18k|    }
_ZN3scn2v46detail15make_value_implINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEERS9_EEDaOT0_:
 5778|  15.5k|{
 5779|  15.5k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  15.5k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  15.5k|    constexpr bool scannable_char =
 5783|  15.5k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  15.5k|    static_assert(scannable_char,
 5785|  15.5k|                  "Cannot scan an argument of an unsupported character "
 5786|  15.5k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  15.5k|    constexpr bool scannable_const =
 5789|  15.5k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  15.5k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  15.5k|    constexpr bool scannable_disabled =
 5793|  15.5k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  15.5k|    static_assert(scannable_disabled,
 5795|  15.5k|                  "Cannot scan an argument that has been disabled by "
 5796|  15.5k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  15.5k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  15.5k|    static_assert(
 5800|  15.5k|        scannable,
 5801|  15.5k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  15.5k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  15.5k|    return arg_value{arg};
 5805|  15.5k|}
_ZN3scn2v46detail9arg_valueC2INSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEERT_:
 5562|  15.5k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|  15.5k|    {
 5564|  15.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1814|  5.75k|    {
 1815|  5.75k|        return &value();
 1816|  5.75k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|  5.75k|    {
 1769|  5.75k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  5.75k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.75k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  5.75k|        return this->get_value();
 1771|  5.75k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEE6valuesEv:
 6353|  15.5k|    {
 6354|  15.5k|        return m_values;
 6355|  15.5k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNSt3__112basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  5.18k|        : basic_scan_args(store.desc, store.args.data())
 6136|  5.18k|    {
 6137|  5.18k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  5.18k|        : m_str(r.str)
 8763|  5.18k|    {
 8764|  5.18k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|  9.81k|    {
  643|  9.81k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 562, False: 9.25k]
  ------------------
  644|    562|            destroy_value();
  645|    562|        }
  646|  9.25k|        else {
  647|  9.25k|            destroy_unexpected();
  648|  9.25k|        }
  649|  9.81k|    }
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeERNS2_17basic_string_viewIcNS4_IcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNSM_13type_identityISH_E4typeEJDpNS11_ISS_E4typeEEEE:
 9749|  2.59k|{
 9750|  2.59k|    auto result = make_scan_result<Source, Args...>();
 9751|  2.59k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  2.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  2.59k|                                   make_scan_args(result->values())));
 9753|  2.59k|    return result;
 9754|  2.59k|}
_ZN3scn2v44scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEERS6_vEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 9680|  2.59k|{
 9681|  2.59k|    auto result = make_scan_result<Source, Args...>();
 9682|  2.59k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  2.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  2.59k|                                   make_scan_args(result->values())));
 9684|  2.59k|    return result;
 9685|  2.59k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEEDav:
 9636|  5.18k|{
 9637|  5.18k|    return scan_result_type<Source, Args...>();
 9638|  5.18k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2Ev:
 1551|  5.18k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2Ev:
  426|  5.18k|        : m_value(T{}), m_has_value(true)
  427|  5.18k|    {
  428|  5.18k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2Ev:
 6570|  5.18k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEC2Ev:
 6344|  5.18k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSJ_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISJ_EEONSV_ISP_EE:
 9621|  5.18k|{
 9622|  5.18k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  5.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.62k, False: 562]
  |  |  ------------------
  ------------------
 9623|  4.62k|        out = unexpected(in.error());
 9624|  4.62k|    }
 9625|    562|    else {
 9626|    562|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    562|    static_cast<    \
  |  |  935|    562|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|    562|    }
 9628|  5.18k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISG_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1615|  4.62k|        : base(unexpect, std::move(e.error())),
 1616|  4.62k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  4.62k|    {
 1618|  4.62k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  449|  4.62k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  4.62k|          m_has_value(false)
  451|  4.62k|    {
  452|  4.62k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  4.62k|    {
 1316|  4.62k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEaSEOSH_:
 1556|  4.62k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEvEaSEOSI_:
  902|  4.62k|    {
  903|  4.62k|        assign_common(std::move(other));
  904|  4.62k|        return *this;
  905|  4.62k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEvE13assign_commonISI_EEvOT_:
  949|  4.62k|    {
  950|  4.62k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 4.62k, False: 0]
  ------------------
  951|  4.62k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 4.62k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  4.62k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  4.62k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  15.0k|    {
  490|  15.0k|        return m_has_value;
  491|  15.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  5.75k|    {
  456|  5.75k|        return m_value;
  457|  5.75k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISI_EEvOT_:
 1045|  4.62k|    {
 1046|  4.62k|        this->destroy_value();
 1047|  4.62k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  4.62k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  4.62k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISH_EEEEEvDpOT_:
  503|  4.62k|    {
  504|  4.62k|        scn::detail::construct_at(&get_unexpected(),
  505|  4.62k|                                  std::forward<Args>(args)...);
  506|  4.62k|        m_has_value = false;
  507|  4.62k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  4.62k|    {
  473|  4.62k|        return m_unexpected;
  474|  4.62k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  4.62k|    {
  481|  4.62k|        return std::move(m_unexpected);
  482|  4.62k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEcvS6_Ev:
 8767|  5.18k|    {
 8768|  5.18k|        return m_str;
 8769|  5.18k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6109|  5.18k|{
 6110|  5.18k|    detail::check_scan_arg_types<Args...>();
 6111|  5.18k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  5.18k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEEbv:
 5824|  5.18k|{
 5825|  5.18k|    constexpr bool default_constructible_constraint =
 5826|  5.18k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|  5.18k|    static_assert(default_constructible_constraint,
 5828|  5.18k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|  5.18k|    constexpr bool destructible_constraint =
 5831|  5.18k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|  5.18k|    static_assert(destructible_constraint,
 5833|  5.18k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|  5.18k|    constexpr bool non_reference_constraint =
 5836|  5.18k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|  5.18k|    static_assert(non_reference_constraint,
 5838|  5.18k|                  "Scan argument types must not be references");
 5839|       |
 5840|  5.18k|    constexpr bool movable_constraint =
 5841|  5.18k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|  5.18k|    static_assert(movable_constraint,
 5843|  5.18k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|  5.18k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|  5.18k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|  5.18k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEC2ERNS6_5tupleIJSA_EEE:
 6085|  5.18k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  5.18k|    {
 6087|  5.18k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEE12make_argptrsIJSA_EEENS6_5arrayIPvLm1EEEDpRT_:
 6094|  5.18k|    {
 6095|  5.18k|        return {detail::make_arg<
 6096|  5.18k|            kind, Context,
 6097|  5.18k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  5.18k|                                 typename Context::char_type>::value>(args)...};
 6099|  5.18k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE19ENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEvEEPvRT2_:
 5874|  5.18k|{
 5875|  5.18k|    return make_value<Context>(value).ref_value;
 5876|  5.18k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDaRT0_:
 5809|  5.18k|{
 5810|  5.18k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  5.18k|                                  needs_context_tag>) {
 5814|  5.18k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  5.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  5.18k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 5648|  5.18k|    {                                                                        \
 5649|  5.18k|        return val;                                                          \
 5650|  5.18k|    }
_ZN3scn2v46detail15make_value_implINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEERS7_EEDaOT0_:
 5778|  5.18k|{
 5779|  5.18k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  5.18k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  5.18k|    constexpr bool scannable_char =
 5783|  5.18k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  5.18k|    static_assert(scannable_char,
 5785|  5.18k|                  "Cannot scan an argument of an unsupported character "
 5786|  5.18k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  5.18k|    constexpr bool scannable_const =
 5789|  5.18k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  5.18k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  5.18k|    constexpr bool scannable_disabled =
 5793|  5.18k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  5.18k|    static_assert(scannable_disabled,
 5795|  5.18k|                  "Cannot scan an argument that has been disabled by "
 5796|  5.18k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  5.18k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  5.18k|    static_assert(
 5800|  5.18k|        scannable,
 5801|  5.18k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  5.18k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  5.18k|    return arg_value{arg};
 5805|  5.18k|}
_ZN3scn2v46detail9arg_valueC2INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEERT_:
 5562|  5.18k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|  5.18k|    {
 5564|  5.18k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEptEv:
 1814|  5.75k|    {
 1815|  5.75k|        return &value();
 1816|  5.75k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEE5valueISF_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1768|  5.75k|    {
 1769|  5.75k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  5.75k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.75k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  5.75k|        return this->get_value();
 1771|  5.75k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEE6valuesEv:
 6353|  5.18k|    {
 6354|  5.18k|        return m_values;
 6355|  5.18k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  5.18k|        : basic_scan_args(store.desc, store.args.data())
 6136|  5.18k|    {
 6137|  5.18k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  5.18k|        : m_str(r.str)
 8763|  5.18k|    {
 8764|  5.18k|    }
_ZN3scn2v44scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS2_6localeERS6_vvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 9749|  2.59k|{
 9750|  2.59k|    auto result = make_scan_result<Source, Args...>();
 9751|  2.59k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  2.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  2.59k|                                   make_scan_args(result->values())));
 9753|  2.59k|    return result;
 9754|  2.59k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEEDav:
 9636|  10.3k|{
 9637|  10.3k|    return scan_result_type<Source, Args...>();
 9638|  10.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEC2Ev:
 1551|  10.3k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2Ev:
  426|  10.3k|        : m_value(T{}), m_has_value(true)
  427|  10.3k|    {
  428|  10.3k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJwEEC2Ev:
 6570|  10.3k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2Ev:
 6413|  93.3k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2Ev:
 3459|  93.3k|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJwEEC2Ev:
 6344|  10.3k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  10.3k|{
 9622|  10.3k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  10.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.2k, False: 100]
  |  |  ------------------
  ------------------
 9623|  10.2k|        out = unexpected(in.error());
 9624|  10.2k|    }
 9625|    100|    else {
 9626|    100|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    100|    static_cast<    \
  |  |  935|    100|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|    100|    }
 9628|  10.3k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1739|  93.3k|    {
 1740|  93.3k|        return has_value();
 1741|  93.3k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   186k|    {
  490|   186k|        return m_has_value;
  491|   186k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1745|  92.3k|    {
 1746|  92.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  92.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  92.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  92.3k|        return this->get_unexpected().error();
 1748|  92.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  92.3k|    {
  473|  92.3k|        return m_unexpected;
  474|  92.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  10.2k|        : base(unexpect, std::move(e.error())),
 1616|  10.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  10.2k|    {
 1618|  10.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  10.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  10.2k|          m_has_value(false)
  451|  10.2k|    {
  452|  10.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  10.2k|    {
 1316|  10.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEaSEOSC_:
 1556|  10.2k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorEvEaSEOSD_:
  902|  10.2k|    {
  903|  10.2k|        assign_common(std::move(other));
  904|  10.2k|        return *this;
  905|  10.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  10.2k|    {
  950|  10.2k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 10.2k, False: 0]
  ------------------
  951|  10.2k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 10.2k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  10.2k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  10.2k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  31.0k|    {
  490|  31.0k|        return m_has_value;
  491|  31.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  10.4k|    {
  456|  10.4k|        return m_value;
  457|  10.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  10.2k|    {
 1046|  10.2k|        this->destroy_value();
 1047|  10.2k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  10.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  10.2k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  10.2k|    {
  504|  10.2k|        scn::detail::construct_at(&get_unexpected(),
  505|  10.2k|                                  std::forward<Args>(args)...);
  506|  10.2k|        m_has_value = false;
  507|  10.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  10.2k|    {
  473|  10.2k|        return m_unexpected;
  474|  10.2k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  10.2k|    {
  481|  10.2k|        return std::move(m_unexpected);
  482|  10.2k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE9set_rangeIS9_EEvOT_:
 6444|  1.01k|    {
 6445|  1.01k|        m_range = std::forward<Other>(r);
 6446|  1.01k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1794|  1.01k|    {
 1795|  1.01k|        return value();
 1796|  1.01k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|  1.01k|    {
 1769|  1.01k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.01k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.01k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.01k|        return this->get_value();
 1771|  1.01k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.01k|    {
  456|  1.01k|        return m_value;
  457|  1.01k|    }
_ZN3scn2v46detail13vscan_genericIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS1_22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEEOSB_NS4_IT0_NS5_ISN_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESN_EEEE:
 9397|  46.6k|{
 9398|  46.6k|    auto buffer = make_scan_buffer(range);
 9399|       |
 9400|  46.6k|    auto result = vscan_impl(buffer, format, args);
 9401|  46.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  46.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 46.1k, False: 509]
  |  |  ------------------
  ------------------
 9402|  46.1k|        return unexpected(result.error());
 9403|  46.1k|    }
 9404|    509|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|    509|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9405|  46.6k|}
_ZN3scn2v46detail16make_scan_bufferINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaRKT_:
 5380|  93.3k|{
 5381|  93.3k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|  93.3k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|  93.3k|                  "\n"
 5385|  93.3k|                  "Unsupported range type given as input to a scanning "
 5386|  93.3k|                  "function.\n"
 5387|  93.3k|                  "A range needs to have a character type (value type) "
 5388|  93.3k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|  93.3k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|  93.3k|                  "to be included.\n"
 5391|  93.3k|                  "See the scnlib documentation for more details.");
 5392|  93.3k|    static_assert(
 5393|  93.3k|        !std::is_same_v<T, custom_char_traits>,
 5394|  93.3k|        "\n"
 5395|  93.3k|        "Unsupported range type given as input to a scanning "
 5396|  93.3k|        "function.\n"
 5397|  93.3k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|  93.3k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|  93.3k|        "not supported.");
 5400|  93.3k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|  93.3k|                  "\n"
 5402|  93.3k|                  "Unsupported range type given as input to a scanning "
 5403|  93.3k|                  "function.\n"
 5404|  93.3k|                  "file_marker_found cannot be used as an "
 5405|  93.3k|                  "source range type to scn::scan.\n"
 5406|  93.3k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|  93.3k|                  "and do not provide an explicit source range, "
 5408|  93.3k|                  "or use scn::scan with a FILE* directly.");
 5409|  93.3k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|  93.3k|                  "\n"
 5411|  93.3k|                  "Unsupported range type given as input to a scanning "
 5412|  93.3k|                  "function.\n"
 5413|  93.3k|                  "In order to be scannable, a range needs to satisfy "
 5414|  93.3k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|  93.3k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|  93.3k|                  "\n"
 5417|  93.3k|                  "Unsupported range type given as input to a scanning "
 5418|  93.3k|                  "function.\n"
 5419|  93.3k|                  "A range needs to model forward_range and have a valid "
 5420|  93.3k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|  93.3k|                  "Examples of scannable ranges are std::string, "
 5422|  93.3k|                  "std::string_view, "
 5423|  93.3k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|  93.3k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|  93.3k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|  93.3k|}
_ZN3scn2v46detail17_make_scan_buffer4implIwEEDaNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEENS1_12priority_tagILm3EEE:
 5272|  93.3k|{
 5273|  93.3k|    if constexpr (is_valid_char_type<CharT>) {
 5274|  93.3k|        return r;
 5275|       |        // return make_string_scan_buffer(r);
 5276|       |    }
 5277|       |    else {
 5278|       |        return invalid_char_type{};
 5279|       |    }
 5280|  93.3k|}
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|  92.3k|        : base(unexpect, std::move(e.error())),
 1616|  92.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  92.3k|    {
 1618|  92.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|  92.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  92.3k|          m_has_value(false)
  451|  92.3k|    {
  452|  92.3k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  93.3k|    {
 1316|  93.3k|    }
_ZN3scn2v46detail23make_vscan_result_rangeIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_l:
 6674|  1.01k|{
 6675|       |    if constexpr (ranges::random_access_iterator<
 6676|  1.01k|                      ranges::iterator_t<SourceRange>>) {
 6677|  1.01k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6678|       |    }
 6679|       |    else {
 6680|       |        auto it = ranges::begin(source);
 6681|       |        while (n > 0) {
 6682|       |            --n;
 6683|       |            ++it;
 6684|       |        }
 6685|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6686|       |    }
 6687|  1.01k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  1.01k|    {
 2869|  1.01k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.01k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  1.01k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  1.01k|    {
 2850|  1.01k|        return decay_copy(t.begin());
 2851|  1.01k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 2093|   197k|{
 2094|   197k|    return SCN_FWD(t);
  ------------------
  |  |  936|   197k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|   197k|}
_ZN3scn2v46detail27make_vscan_result_range_endINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaRT_:
 6661|  1.01k|{
 6662|  1.01k|    return ranges::end(source);
 6663|  1.01k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  1.01k|    {
 2926|  1.01k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.01k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  1.01k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  1.01k|    {
 2908|  1.01k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  1.01k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  1.01k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3464|   274k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   274k|    static_cast<    \
  |  |  935|   274k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   274k|    static_cast<    \
  |  |  935|   274k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   274k|    {
 3466|   274k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|  1.01k|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.01k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.01k|    {
 1572|  1.01k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|  1.01k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.01k|    {
  442|  1.01k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEcvS6_Ev:
 8767|  10.3k|    {
 8768|  10.3k|        return m_str;
 8769|  10.3k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJwEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  10.3k|{
 6110|  10.3k|    detail::check_scan_arg_types<Args...>();
 6111|  10.3k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  10.3k|}
_ZN3scn2v46detail20check_scan_arg_typesIJwEEEbv:
 5824|  10.3k|{
 5825|  10.3k|    constexpr bool default_constructible_constraint =
 5826|  10.3k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|  10.3k|    static_assert(default_constructible_constraint,
 5828|  10.3k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|  10.3k|    constexpr bool destructible_constraint =
 5831|  10.3k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|  10.3k|    static_assert(destructible_constraint,
 5833|  10.3k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|  10.3k|    constexpr bool non_reference_constraint =
 5836|  10.3k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|  10.3k|    static_assert(non_reference_constraint,
 5838|  10.3k|                  "Scan argument types must not be references");
 5839|       |
 5840|  10.3k|    constexpr bool movable_constraint =
 5841|  10.3k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|  10.3k|    static_assert(movable_constraint,
 5843|  10.3k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|  10.3k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|  10.3k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|  10.3k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJwEEC2ERNSt3__15tupleIJwEEE:
 6085|  10.3k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  10.3k|    {
 6087|  10.3k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJwEE12make_argptrsIJwEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|  10.3k|    {
 6095|  10.3k|        return {detail::make_arg<
 6096|  10.3k|            kind, Context,
 6097|  10.3k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  10.3k|                                 typename Context::char_type>::value>(args)...};
 6099|  10.3k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE13EwvEEPvRT2_:
 5874|  10.3k|{
 5875|  10.3k|    return make_value<Context>(value).ref_value;
 5876|  10.3k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEwEEDaRT0_:
 5809|  10.3k|{
 5810|  10.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  10.3k|                                  needs_context_tag>) {
 5814|  10.3k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  10.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  10.3k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERw:
 5648|  10.3k|    {                                                                        \
 5649|  10.3k|        return val;                                                          \
 5650|  10.3k|    }
_ZN3scn2v46detail15make_value_implIwRwEEDaOT0_:
 5778|  10.3k|{
 5779|  10.3k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  10.3k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  10.3k|    constexpr bool scannable_char =
 5783|  10.3k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  10.3k|    static_assert(scannable_char,
 5785|  10.3k|                  "Cannot scan an argument of an unsupported character "
 5786|  10.3k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  10.3k|    constexpr bool scannable_const =
 5789|  10.3k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  10.3k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  10.3k|    constexpr bool scannable_disabled =
 5793|  10.3k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  10.3k|    static_assert(scannable_disabled,
 5795|  10.3k|                  "Cannot scan an argument that has been disabled by "
 5796|  10.3k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  10.3k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  10.3k|    static_assert(
 5800|  10.3k|        scannable,
 5801|  10.3k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  10.3k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  10.3k|    return arg_value{arg};
 5805|  10.3k|}
_ZN3scn2v46detail9arg_valueC2IwEERT_:
 5562|  10.3k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|  10.3k|    {
 5564|  10.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEptEv:
 1814|  10.4k|    {
 1815|  10.4k|        return &value();
 1816|  10.4k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  10.4k|    {
 1769|  10.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  10.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  10.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  10.4k|        return this->get_value();
 1771|  10.4k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJwEE6valuesEv:
 6353|  10.3k|    {
 6354|  10.3k|        return m_values;
 6355|  10.3k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJwEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  10.3k|        : basic_scan_args(store.desc, store.args.data())
 6136|  10.3k|    {
 6137|  10.3k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2EmPKPv:
 6187|  93.3k|        : m_desc(desc), m_builtin_values(data)
 6188|  93.3k|    {
 6189|  93.3k|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 8445|  93.3k|{
 8446|  93.3k|    return s;
 8447|  93.3k|}
_ZN3scn2v46detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 8417|  93.3k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  10.3k|        : m_str(r.str)
 8763|  10.3k|    {
 8764|  10.3k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS1_22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT_OSC_NS5_IT1_NS6_ISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESR_EEEE:
 9413|  46.6k|{
 9414|  46.6k|#if !SCN_DISABLE_LOCALE
 9415|  46.6k|    auto buffer = detail::make_scan_buffer(range);
 9416|       |
 9417|  46.6k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9418|  46.6k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9419|  46.6k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9420|       |
 9421|  46.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  46.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 46.1k, False: 509]
  |  |  ------------------
  ------------------
 9422|  46.1k|        return unexpected(result.error());
 9423|  46.1k|    }
 9424|    509|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|    509|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9425|       |#else
 9426|       |    static_assert(dependent_false<Locale>::value,
 9427|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9428|       |
 9429|       |    return {};
 9430|       |#endif
 9431|  46.6k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEEDav:
 9636|  10.3k|{
 9637|  10.3k|    return scan_result_type<Source, Args...>();
 9638|  10.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2Ev:
 1551|  10.3k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2Ev:
  426|  10.3k|        : m_value(T{}), m_has_value(true)
  427|  10.3k|    {
  428|  10.3k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEC2Ev:
 6570|  10.3k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  10.3k|{
 9622|  10.3k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  10.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.3k, False: 0]
  |  |  ------------------
  ------------------
 9623|  10.3k|        out = unexpected(in.error());
 9624|  10.3k|    }
 9625|      0|    else {
 9626|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|      0|    }
 9628|  10.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  10.3k|        : base(unexpect, std::move(e.error())),
 1616|  10.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  10.3k|    {
 1618|  10.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  10.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  10.3k|          m_has_value(false)
  451|  10.3k|    {
  452|  10.3k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  10.3k|    {
 1316|  10.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEaSEOSC_:
 1556|  10.3k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorEvEaSEOSD_:
  902|  10.3k|    {
  903|  10.3k|        assign_common(std::move(other));
  904|  10.3k|        return *this;
  905|  10.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  10.3k|    {
  950|  10.3k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 10.3k, False: 0]
  ------------------
  951|  10.3k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 10.3k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  10.3k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  10.3k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  31.1k|    {
  490|  31.1k|        return m_has_value;
  491|  31.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  10.3k|    {
  456|  10.3k|        return m_value;
  457|  10.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  10.3k|    {
 1046|  10.3k|        this->destroy_value();
 1047|  10.3k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  10.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  10.3k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  10.3k|    {
  504|  10.3k|        scn::detail::construct_at(&get_unexpected(),
  505|  10.3k|                                  std::forward<Args>(args)...);
  506|  10.3k|        m_has_value = false;
  507|  10.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  10.3k|    {
  473|  10.3k|        return m_unexpected;
  474|  10.3k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  10.3k|    {
  481|  10.3k|        return std::move(m_unexpected);
  482|  10.3k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEcvS6_Ev:
 8767|  10.3k|    {
 8768|  10.3k|        return m_str;
 8769|  10.3k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJiEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  10.3k|{
 6110|  10.3k|    detail::check_scan_arg_types<Args...>();
 6111|  10.3k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  10.3k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJiEEC2ERNSt3__15tupleIJiEEE:
 6085|  10.3k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  10.3k|    {
 6087|  10.3k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|  10.3k|    {
 6095|  10.3k|        return {detail::make_arg<
 6096|  10.3k|            kind, Context,
 6097|  10.3k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  10.3k|                                 typename Context::char_type>::value>(args)...};
 6099|  10.3k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE3EivEEPvRT2_:
 5874|  10.3k|{
 5875|  10.3k|    return make_value<Context>(value).ref_value;
 5876|  10.3k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEiEEDaRT0_:
 5809|  10.3k|{
 5810|  10.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  10.3k|                                  needs_context_tag>) {
 5814|  10.3k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  10.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  10.3k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERi:
 5648|  10.3k|    {                                                                        \
 5649|  10.3k|        return val;                                                          \
 5650|  10.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEptEv:
 1814|  10.3k|    {
 1815|  10.3k|        return &value();
 1816|  10.3k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  10.3k|    {
 1769|  10.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  10.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  10.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  10.3k|        return this->get_value();
 1771|  10.3k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJiEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  10.3k|        : basic_scan_args(store.desc, store.args.data())
 6136|  10.3k|    {
 6137|  10.3k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  10.3k|        : m_str(r.str)
 8763|  10.3k|    {
 8764|  10.3k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEEDav:
 9636|  10.3k|{
 9637|  10.3k|    return scan_result_type<Source, Args...>();
 9638|  10.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2Ev:
 1551|  10.3k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2Ev:
  426|  10.3k|        : m_value(T{}), m_has_value(true)
  427|  10.3k|    {
  428|  10.3k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEC2Ev:
 6570|  10.3k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  10.3k|{
 9622|  10.3k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  10.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.3k, False: 0]
  |  |  ------------------
  ------------------
 9623|  10.3k|        out = unexpected(in.error());
 9624|  10.3k|    }
 9625|      0|    else {
 9626|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|      0|    }
 9628|  10.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  10.3k|        : base(unexpect, std::move(e.error())),
 1616|  10.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  10.3k|    {
 1618|  10.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  10.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  10.3k|          m_has_value(false)
  451|  10.3k|    {
  452|  10.3k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  10.3k|    {
 1316|  10.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEaSEOSC_:
 1556|  10.3k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorEvEaSEOSD_:
  902|  10.3k|    {
  903|  10.3k|        assign_common(std::move(other));
  904|  10.3k|        return *this;
  905|  10.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  10.3k|    {
  950|  10.3k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 10.3k, False: 0]
  ------------------
  951|  10.3k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 10.3k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  10.3k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  10.3k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  31.1k|    {
  490|  31.1k|        return m_has_value;
  491|  31.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  10.3k|    {
  456|  10.3k|        return m_value;
  457|  10.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  10.3k|    {
 1046|  10.3k|        this->destroy_value();
 1047|  10.3k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  10.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  10.3k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  10.3k|    {
  504|  10.3k|        scn::detail::construct_at(&get_unexpected(),
  505|  10.3k|                                  std::forward<Args>(args)...);
  506|  10.3k|        m_has_value = false;
  507|  10.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  10.3k|    {
  473|  10.3k|        return m_unexpected;
  474|  10.3k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  10.3k|    {
  481|  10.3k|        return std::move(m_unexpected);
  482|  10.3k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEcvS6_Ev:
 8767|  10.3k|    {
 8768|  10.3k|        return m_str;
 8769|  10.3k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJjEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  10.3k|{
 6110|  10.3k|    detail::check_scan_arg_types<Args...>();
 6111|  10.3k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  10.3k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJjEEC2ERNSt3__15tupleIJjEEE:
 6085|  10.3k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  10.3k|    {
 6087|  10.3k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|  10.3k|    {
 6095|  10.3k|        return {detail::make_arg<
 6096|  10.3k|            kind, Context,
 6097|  10.3k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  10.3k|                                 typename Context::char_type>::value>(args)...};
 6099|  10.3k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE8EjvEEPvRT2_:
 5874|  10.3k|{
 5875|  10.3k|    return make_value<Context>(value).ref_value;
 5876|  10.3k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEjEEDaRT0_:
 5809|  10.3k|{
 5810|  10.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  10.3k|                                  needs_context_tag>) {
 5814|  10.3k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  10.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  10.3k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERj:
 5648|  10.3k|    {                                                                        \
 5649|  10.3k|        return val;                                                          \
 5650|  10.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEptEv:
 1814|  10.3k|    {
 1815|  10.3k|        return &value();
 1816|  10.3k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  10.3k|    {
 1769|  10.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  10.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  10.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  10.3k|        return this->get_value();
 1771|  10.3k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJjEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  10.3k|        : basic_scan_args(store.desc, store.args.data())
 6136|  10.3k|    {
 6137|  10.3k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  10.3k|        : m_str(r.str)
 8763|  10.3k|    {
 8764|  10.3k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEEDav:
 9636|  10.3k|{
 9637|  10.3k|    return scan_result_type<Source, Args...>();
 9638|  10.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2Ev:
 1551|  10.3k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  426|  10.3k|        : m_value(T{}), m_has_value(true)
  427|  10.3k|    {
  428|  10.3k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2Ev:
 6570|  10.3k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  10.3k|{
 9622|  10.3k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  10.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.3k, False: 0]
  |  |  ------------------
  ------------------
 9623|  10.3k|        out = unexpected(in.error());
 9624|  10.3k|    }
 9625|      0|    else {
 9626|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|      0|    }
 9628|  10.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  10.3k|        : base(unexpect, std::move(e.error())),
 1616|  10.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  10.3k|    {
 1618|  10.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  10.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  10.3k|          m_has_value(false)
  451|  10.3k|    {
  452|  10.3k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  10.3k|    {
 1316|  10.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEaSEOSC_:
 1556|  10.3k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorEvEaSEOSD_:
  902|  10.3k|    {
  903|  10.3k|        assign_common(std::move(other));
  904|  10.3k|        return *this;
  905|  10.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  10.3k|    {
  950|  10.3k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 10.3k, False: 0]
  ------------------
  951|  10.3k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 10.3k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  10.3k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  10.3k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  31.1k|    {
  490|  31.1k|        return m_has_value;
  491|  31.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  10.3k|    {
  456|  10.3k|        return m_value;
  457|  10.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  10.3k|    {
 1046|  10.3k|        this->destroy_value();
 1047|  10.3k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  10.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  10.3k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  10.3k|    {
  504|  10.3k|        scn::detail::construct_at(&get_unexpected(),
  505|  10.3k|                                  std::forward<Args>(args)...);
  506|  10.3k|        m_has_value = false;
  507|  10.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  10.3k|    {
  473|  10.3k|        return m_unexpected;
  474|  10.3k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  10.3k|    {
  481|  10.3k|        return std::move(m_unexpected);
  482|  10.3k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEcvS6_Ev:
 8767|  10.3k|    {
 8768|  10.3k|        return m_str;
 8769|  10.3k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJdEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  10.3k|{
 6110|  10.3k|    detail::check_scan_arg_types<Args...>();
 6111|  10.3k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  10.3k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJdEEC2ERNSt3__15tupleIJdEEE:
 6085|  10.3k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  10.3k|    {
 6087|  10.3k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|  10.3k|    {
 6095|  10.3k|        return {detail::make_arg<
 6096|  10.3k|            kind, Context,
 6097|  10.3k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  10.3k|                                 typename Context::char_type>::value>(args)...};
 6099|  10.3k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE17EdvEEPvRT2_:
 5874|  10.3k|{
 5875|  10.3k|    return make_value<Context>(value).ref_value;
 5876|  10.3k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEdEEDaRT0_:
 5809|  10.3k|{
 5810|  10.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  10.3k|                                  needs_context_tag>) {
 5814|  10.3k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  10.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  10.3k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERd:
 5648|  10.3k|    {                                                                        \
 5649|  10.3k|        return val;                                                          \
 5650|  10.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEptEv:
 1814|  10.3k|    {
 1815|  10.3k|        return &value();
 1816|  10.3k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  10.3k|    {
 1769|  10.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  10.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  10.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  10.3k|        return this->get_value();
 1771|  10.3k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJdEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  10.3k|        : basic_scan_args(store.desc, store.args.data())
 6136|  10.3k|    {
 6137|  10.3k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  10.3k|        : m_str(r.str)
 8763|  10.3k|    {
 8764|  10.3k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEEDav:
 9636|  10.3k|{
 9637|  10.3k|    return scan_result_type<Source, Args...>();
 9638|  10.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEEC2Ev:
 1551|  10.3k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2Ev:
  426|  10.3k|        : m_value(T{}), m_has_value(true)
  427|  10.3k|    {
  428|  10.3k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJbEEC2Ev:
 6570|  10.3k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  10.3k|{
 9622|  10.3k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  10.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.3k, False: 0]
  |  |  ------------------
  ------------------
 9623|  10.3k|        out = unexpected(in.error());
 9624|  10.3k|    }
 9625|      0|    else {
 9626|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|      0|    }
 9628|  10.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  10.3k|        : base(unexpect, std::move(e.error())),
 1616|  10.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  10.3k|    {
 1618|  10.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  10.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  10.3k|          m_has_value(false)
  451|  10.3k|    {
  452|  10.3k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  10.3k|    {
 1316|  10.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEEaSEOSC_:
 1556|  10.3k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorEvEaSEOSD_:
  902|  10.3k|    {
  903|  10.3k|        assign_common(std::move(other));
  904|  10.3k|        return *this;
  905|  10.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  10.3k|    {
  950|  10.3k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 10.3k, False: 0]
  ------------------
  951|  10.3k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 10.3k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  10.3k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  10.3k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  31.1k|    {
  490|  31.1k|        return m_has_value;
  491|  31.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  10.3k|    {
  456|  10.3k|        return m_value;
  457|  10.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  10.3k|    {
 1046|  10.3k|        this->destroy_value();
 1047|  10.3k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  10.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  10.3k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  10.3k|    {
  504|  10.3k|        scn::detail::construct_at(&get_unexpected(),
  505|  10.3k|                                  std::forward<Args>(args)...);
  506|  10.3k|        m_has_value = false;
  507|  10.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  10.3k|    {
  473|  10.3k|        return m_unexpected;
  474|  10.3k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  10.3k|    {
  481|  10.3k|        return std::move(m_unexpected);
  482|  10.3k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEcvS6_Ev:
 8767|  10.3k|    {
 8768|  10.3k|        return m_str;
 8769|  10.3k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJbEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  10.3k|{
 6110|  10.3k|    detail::check_scan_arg_types<Args...>();
 6111|  10.3k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  10.3k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJbEEC2ERNSt3__15tupleIJbEEE:
 6085|  10.3k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  10.3k|    {
 6087|  10.3k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJbEE12make_argptrsIJbEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|  10.3k|    {
 6095|  10.3k|        return {detail::make_arg<
 6096|  10.3k|            kind, Context,
 6097|  10.3k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  10.3k|                                 typename Context::char_type>::value>(args)...};
 6099|  10.3k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE11EbvEEPvRT2_:
 5874|  10.3k|{
 5875|  10.3k|    return make_value<Context>(value).ref_value;
 5876|  10.3k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEbEEDaRT0_:
 5809|  10.3k|{
 5810|  10.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  10.3k|                                  needs_context_tag>) {
 5814|  10.3k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  10.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  10.3k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERb:
 5648|  10.3k|    {                                                                        \
 5649|  10.3k|        return val;                                                          \
 5650|  10.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEEptEv:
 1814|  10.3k|    {
 1815|  10.3k|        return &value();
 1816|  10.3k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  10.3k|    {
 1769|  10.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  10.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  10.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  10.3k|        return this->get_value();
 1771|  10.3k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJbEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  10.3k|        : basic_scan_args(store.desc, store.args.data())
 6136|  10.3k|    {
 6137|  10.3k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  10.3k|        : m_str(r.str)
 8763|  10.3k|    {
 8764|  10.3k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEEDav:
 9636|  10.3k|{
 9637|  10.3k|    return scan_result_type<Source, Args...>();
 9638|  10.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEEC2Ev:
 1551|  10.3k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2Ev:
  426|  10.3k|        : m_value(T{}), m_has_value(true)
  427|  10.3k|    {
  428|  10.3k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJPvEEC2Ev:
 6570|  10.3k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELSA_0EEEvRNS0_13scan_expectedISG_EEONSR_ISM_EE:
 9621|  10.3k|{
 9622|  10.3k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  10.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.3k, False: 0]
  |  |  ------------------
  ------------------
 9623|  10.3k|        out = unexpected(in.error());
 9624|  10.3k|    }
 9625|      0|    else {
 9626|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|      0|    }
 9628|  10.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELSA_0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSA_0EEEONS0_10unexpectedISH_EE:
 1615|  10.3k|        : base(unexpect, std::move(e.error())),
 1616|  10.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  10.3k|    {
 1618|  10.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  449|  10.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  10.3k|          m_has_value(false)
  451|  10.3k|    {
  452|  10.3k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  10.3k|    {
 1316|  10.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEEaSEOSD_:
 1556|  10.3k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorEvEaSEOSE_:
  902|  10.3k|    {
  903|  10.3k|        assign_common(std::move(other));
  904|  10.3k|        return *this;
  905|  10.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  949|  10.3k|    {
  950|  10.3k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 10.3k, False: 0]
  ------------------
  951|  10.3k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 10.3k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  10.3k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  10.3k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  31.1k|    {
  490|  31.1k|        return m_has_value;
  491|  31.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  10.3k|    {
  456|  10.3k|        return m_value;
  457|  10.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1045|  10.3k|    {
 1046|  10.3k|        this->destroy_value();
 1047|  10.3k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  10.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  10.3k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  503|  10.3k|    {
  504|  10.3k|        scn::detail::construct_at(&get_unexpected(),
  505|  10.3k|                                  std::forward<Args>(args)...);
  506|  10.3k|        m_has_value = false;
  507|  10.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  10.3k|    {
  473|  10.3k|        return m_unexpected;
  474|  10.3k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  10.3k|    {
  481|  10.3k|        return std::move(m_unexpected);
  482|  10.3k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEcvS6_Ev:
 8767|  10.3k|    {
 8768|  10.3k|        return m_str;
 8769|  10.3k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJPvEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  10.3k|{
 6110|  10.3k|    detail::check_scan_arg_types<Args...>();
 6111|  10.3k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  10.3k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJPvEEC2ERNSt3__15tupleIJS6_EEE:
 6085|  10.3k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  10.3k|    {
 6087|  10.3k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJPvEE12make_argptrsIJS6_EEENSt3__15arrayIS6_Lm1EEEDpRT_:
 6094|  10.3k|    {
 6095|  10.3k|        return {detail::make_arg<
 6096|  10.3k|            kind, Context,
 6097|  10.3k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  10.3k|                                 typename Context::char_type>::value>(args)...};
 6099|  10.3k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE15EPvvEES8_RT2_:
 5874|  10.3k|{
 5875|  10.3k|    return make_value<Context>(value).ref_value;
 5876|  10.3k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEPvEEDaRT0_:
 5809|  10.3k|{
 5810|  10.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  10.3k|                                  needs_context_tag>) {
 5814|  10.3k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  10.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  10.3k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERPv:
 5648|  10.3k|    {                                                                        \
 5649|  10.3k|        return val;                                                          \
 5650|  10.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEEptEv:
 1814|  10.3k|    {
 1815|  10.3k|        return &value();
 1816|  10.3k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELSA_0EEERSH_v:
 1768|  10.3k|    {
 1769|  10.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  10.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  10.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  10.3k|        return this->get_value();
 1771|  10.3k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJPvEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  10.3k|        : basic_scan_args(store.desc, store.args.data())
 6136|  10.3k|    {
 6137|  10.3k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  10.3k|        : m_str(r.str)
 8763|  10.3k|    {
 8764|  10.3k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEEDav:
 9636|  10.3k|{
 9637|  10.3k|    return scan_result_type<Source, Args...>();
 9638|  10.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2Ev:
 1551|  10.3k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2Ev:
  611|  10.3k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  10.3k|    {
  613|  10.3k|        construct();
  614|  10.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  10.3k|    {
  694|  10.3k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  10.3k|        m_has_value = true;
  696|  10.3k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJEEEPT_SK_DpOT0_:
  395|  10.3k|{
  396|  10.3k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  10.3k|        T(std::forward<Args>(args)...);
  398|  10.3k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2Ev:
 6570|  10.3k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|  31.4k|    {
  718|  31.4k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|  31.4k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|  31.4k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9621|  10.3k|{
 9622|  10.3k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  10.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.0k, False: 306]
  |  |  ------------------
  ------------------
 9623|  10.0k|        out = unexpected(in.error());
 9624|  10.0k|    }
 9625|    306|    else {
 9626|    306|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    306|    static_cast<    \
  |  |  935|    306|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|    306|    }
 9628|  10.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  10.0k|        : base(unexpect, std::move(e.error())),
 1616|  10.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  10.0k|    {
 1618|  10.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  10.0k|        : m_has_value(false)
  637|  10.0k|    {
  638|  10.0k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  10.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  700|  10.0k|    {
  701|  10.0k|        scn::detail::construct_at(unexpected_ptr(),
  702|  10.0k|                                  std::forward<Args>(args)...);
  703|  10.0k|        m_has_value = false;
  704|  10.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  50.3k|    {
  730|  50.3k|        return reinterpret_cast<unexpected<E>*>(
  731|  50.3k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  50.3k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  50.3k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  10.0k|    {
 1316|  10.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEaSEOSJ_:
 1556|  10.0k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvEaSEOSK_:
  902|  10.0k|    {
  903|  10.0k|        assign_common(std::move(other));
  904|  10.0k|        return *this;
  905|  10.0k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  10.0k|    {
  950|  10.0k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 10.0k, False: 0]
  ------------------
  951|  10.0k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 10.0k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  10.0k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  10.0k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|  51.2k|    {
  687|  51.2k|        return m_has_value;
  688|  51.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  10.6k|    {
  653|  10.6k|        return *value_ptr();
  654|  10.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  10.0k|    {
 1046|  10.0k|        this->destroy_value();
 1047|  10.0k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  10.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  10.3k|    {
  708|  10.3k|        scn::detail::destroy_at(value_ptr());
  709|  10.3k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  401|  10.3k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  10.3k|    else {
  408|  10.3k|        p->~T();
  409|  10.3k|    }
  410|  10.3k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 6577|  10.3k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  10.0k|    {
  701|  10.0k|        scn::detail::construct_at(unexpected_ptr(),
  702|  10.0k|                                  std::forward<Args>(args)...);
  703|  10.0k|        m_has_value = false;
  704|  10.0k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  10.0k|    {
  678|  10.0k|        return std::move(*unexpected_ptr());
  679|  10.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  20.1k|    {
  712|  20.1k|        scn::detail::destroy_at(unexpected_ptr());
  713|  20.1k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEcvS6_Ev:
 8767|  10.3k|    {
 8768|  10.3k|        return m_str;
 8769|  10.3k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6109|  10.3k|{
 6110|  10.3k|    detail::check_scan_arg_types<Args...>();
 6111|  10.3k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  10.3k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ERNS6_5tupleIJSC_EEE:
 6085|  10.3k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  10.3k|    {
 6087|  10.3k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEE12make_argptrsIJSC_EEENS6_5arrayIPvLm1EEEDpRT_:
 6094|  10.3k|    {
 6095|  10.3k|        return {detail::make_arg<
 6096|  10.3k|            kind, Context,
 6097|  10.3k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  10.3k|                                 typename Context::char_type>::value>(args)...};
 6099|  10.3k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEvEEPvRT2_:
 5874|  10.3k|{
 5875|  10.3k|    return make_value<Context>(value).ref_value;
 5876|  10.3k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDaRT0_:
 5809|  10.3k|{
 5810|  10.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  10.3k|                                  needs_context_tag>) {
 5814|  10.3k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  10.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  10.3k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 5648|  10.3k|    {                                                                        \
 5649|  10.3k|        return val;                                                          \
 5650|  10.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1814|  10.6k|    {
 1815|  10.6k|        return &value();
 1816|  10.6k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|  10.6k|    {
 1769|  10.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  10.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  10.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  10.6k|        return this->get_value();
 1771|  10.6k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  10.3k|        : basic_scan_args(store.desc, store.args.data())
 6136|  10.3k|    {
 6137|  10.3k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  10.3k|        : m_str(r.str)
 8763|  10.3k|    {
 8764|  10.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|  20.4k|    {
  643|  20.4k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 306, False: 20.1k]
  ------------------
  644|    306|            destroy_value();
  645|    306|        }
  646|  20.1k|        else {
  647|  20.1k|            destroy_unexpected();
  648|  20.1k|        }
  649|  20.4k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEEDav:
 9636|  10.3k|{
 9637|  10.3k|    return scan_result_type<Source, Args...>();
 9638|  10.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2Ev:
 1551|  10.3k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2Ev:
  611|  10.3k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  10.3k|    {
  613|  10.3k|        construct();
  614|  10.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  10.3k|    {
  694|  10.3k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  10.3k|        m_has_value = true;
  696|  10.3k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJEEEPT_SK_DpOT0_:
  395|  10.3k|{
  396|  10.3k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  10.3k|        T(std::forward<Args>(args)...);
  398|  10.3k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2Ev:
 6570|  10.3k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|  31.4k|    {
  718|  31.4k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|  31.4k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|  31.4k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9621|  10.3k|{
 9622|  10.3k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  10.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.0k, False: 306]
  |  |  ------------------
  ------------------
 9623|  10.0k|        out = unexpected(in.error());
 9624|  10.0k|    }
 9625|    306|    else {
 9626|    306|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    306|    static_cast<    \
  |  |  935|    306|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|    306|    }
 9628|  10.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  10.0k|        : base(unexpect, std::move(e.error())),
 1616|  10.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  10.0k|    {
 1618|  10.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  10.0k|        : m_has_value(false)
  637|  10.0k|    {
  638|  10.0k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  10.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  700|  10.0k|    {
  701|  10.0k|        scn::detail::construct_at(unexpected_ptr(),
  702|  10.0k|                                  std::forward<Args>(args)...);
  703|  10.0k|        m_has_value = false;
  704|  10.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  50.3k|    {
  730|  50.3k|        return reinterpret_cast<unexpected<E>*>(
  731|  50.3k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  50.3k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  50.3k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  10.0k|    {
 1316|  10.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEaSEOSJ_:
 1556|  10.0k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvEaSEOSK_:
  902|  10.0k|    {
  903|  10.0k|        assign_common(std::move(other));
  904|  10.0k|        return *this;
  905|  10.0k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  10.0k|    {
  950|  10.0k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 10.0k, False: 0]
  ------------------
  951|  10.0k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 10.0k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  10.0k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  10.0k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|  51.2k|    {
  687|  51.2k|        return m_has_value;
  688|  51.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  10.6k|    {
  653|  10.6k|        return *value_ptr();
  654|  10.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  10.0k|    {
 1046|  10.0k|        this->destroy_value();
 1047|  10.0k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  10.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  10.3k|    {
  708|  10.3k|        scn::detail::destroy_at(value_ptr());
  709|  10.3k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  401|  10.3k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  10.3k|    else {
  408|  10.3k|        p->~T();
  409|  10.3k|    }
  410|  10.3k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 6577|  10.3k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  10.0k|    {
  701|  10.0k|        scn::detail::construct_at(unexpected_ptr(),
  702|  10.0k|                                  std::forward<Args>(args)...);
  703|  10.0k|        m_has_value = false;
  704|  10.0k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  10.0k|    {
  678|  10.0k|        return std::move(*unexpected_ptr());
  679|  10.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  20.1k|    {
  712|  20.1k|        scn::detail::destroy_at(unexpected_ptr());
  713|  20.1k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEcvS6_Ev:
 8767|  10.3k|    {
 8768|  10.3k|        return m_str;
 8769|  10.3k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6109|  10.3k|{
 6110|  10.3k|    detail::check_scan_arg_types<Args...>();
 6111|  10.3k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  10.3k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ERNS6_5tupleIJSC_EEE:
 6085|  10.3k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  10.3k|    {
 6087|  10.3k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEE12make_argptrsIJSC_EEENS6_5arrayIPvLm1EEEDpRT_:
 6094|  10.3k|    {
 6095|  10.3k|        return {detail::make_arg<
 6096|  10.3k|            kind, Context,
 6097|  10.3k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  10.3k|                                 typename Context::char_type>::value>(args)...};
 6099|  10.3k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEvEEPvRT2_:
 5874|  10.3k|{
 5875|  10.3k|    return make_value<Context>(value).ref_value;
 5876|  10.3k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEDaRT0_:
 5809|  10.3k|{
 5810|  10.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  10.3k|                                  needs_context_tag>) {
 5814|  10.3k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  10.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  10.3k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 5648|  10.3k|    {                                                                        \
 5649|  10.3k|        return val;                                                          \
 5650|  10.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1814|  10.6k|    {
 1815|  10.6k|        return &value();
 1816|  10.6k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|  10.6k|    {
 1769|  10.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  10.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  10.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  10.6k|        return this->get_value();
 1771|  10.6k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNSt3__112basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  10.3k|        : basic_scan_args(store.desc, store.args.data())
 6136|  10.3k|    {
 6137|  10.3k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  10.3k|        : m_str(r.str)
 8763|  10.3k|    {
 8764|  10.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|  20.4k|    {
  643|  20.4k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 306, False: 20.1k]
  ------------------
  644|    306|            destroy_value();
  645|    306|        }
  646|  20.1k|        else {
  647|  20.1k|            destroy_unexpected();
  648|  20.1k|        }
  649|  20.4k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEEDav:
 9636|  10.3k|{
 9637|  10.3k|    return scan_result_type<Source, Args...>();
 9638|  10.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2Ev:
 1551|  10.3k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2Ev:
  426|  10.3k|        : m_value(T{}), m_has_value(true)
  427|  10.3k|    {
  428|  10.3k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2Ev:
 6570|  10.3k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEC2Ev:
 6344|  10.3k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSJ_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISJ_EEONSV_ISP_EE:
 9621|  10.3k|{
 9622|  10.3k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  10.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.0k, False: 306]
  |  |  ------------------
  ------------------
 9623|  10.0k|        out = unexpected(in.error());
 9624|  10.0k|    }
 9625|    306|    else {
 9626|    306|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    306|    static_cast<    \
  |  |  935|    306|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|    306|    }
 9628|  10.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISG_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1615|  10.0k|        : base(unexpect, std::move(e.error())),
 1616|  10.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  10.0k|    {
 1618|  10.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  449|  10.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  10.0k|          m_has_value(false)
  451|  10.0k|    {
  452|  10.0k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  10.0k|    {
 1316|  10.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEaSEOSH_:
 1556|  10.0k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEvEaSEOSI_:
  902|  10.0k|    {
  903|  10.0k|        assign_common(std::move(other));
  904|  10.0k|        return *this;
  905|  10.0k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEvE13assign_commonISI_EEvOT_:
  949|  10.0k|    {
  950|  10.0k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 10.0k, False: 0]
  ------------------
  951|  10.0k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 10.0k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  10.0k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  10.0k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  30.8k|    {
  490|  30.8k|        return m_has_value;
  491|  30.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  10.6k|    {
  456|  10.6k|        return m_value;
  457|  10.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISI_EEvOT_:
 1045|  10.0k|    {
 1046|  10.0k|        this->destroy_value();
 1047|  10.0k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  10.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  10.0k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISH_EEEEEvDpOT_:
  503|  10.0k|    {
  504|  10.0k|        scn::detail::construct_at(&get_unexpected(),
  505|  10.0k|                                  std::forward<Args>(args)...);
  506|  10.0k|        m_has_value = false;
  507|  10.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  10.0k|    {
  473|  10.0k|        return m_unexpected;
  474|  10.0k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  10.0k|    {
  481|  10.0k|        return std::move(m_unexpected);
  482|  10.0k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEcvS6_Ev:
 8767|  10.3k|    {
 8768|  10.3k|        return m_str;
 8769|  10.3k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6109|  10.3k|{
 6110|  10.3k|    detail::check_scan_arg_types<Args...>();
 6111|  10.3k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  10.3k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEEbv:
 5824|  10.3k|{
 5825|  10.3k|    constexpr bool default_constructible_constraint =
 5826|  10.3k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|  10.3k|    static_assert(default_constructible_constraint,
 5828|  10.3k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|  10.3k|    constexpr bool destructible_constraint =
 5831|  10.3k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|  10.3k|    static_assert(destructible_constraint,
 5833|  10.3k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|  10.3k|    constexpr bool non_reference_constraint =
 5836|  10.3k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|  10.3k|    static_assert(non_reference_constraint,
 5838|  10.3k|                  "Scan argument types must not be references");
 5839|       |
 5840|  10.3k|    constexpr bool movable_constraint =
 5841|  10.3k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|  10.3k|    static_assert(movable_constraint,
 5843|  10.3k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|  10.3k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|  10.3k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|  10.3k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEC2ERNS6_5tupleIJSA_EEE:
 6085|  10.3k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  10.3k|    {
 6087|  10.3k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEE12make_argptrsIJSA_EEENS6_5arrayIPvLm1EEEDpRT_:
 6094|  10.3k|    {
 6095|  10.3k|        return {detail::make_arg<
 6096|  10.3k|            kind, Context,
 6097|  10.3k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  10.3k|                                 typename Context::char_type>::value>(args)...};
 6099|  10.3k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE20ENSt3__117basic_string_viewIwNS8_11char_traitsIwEEEEvEEPvRT2_:
 5874|  10.3k|{
 5875|  10.3k|    return make_value<Context>(value).ref_value;
 5876|  10.3k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDaRT0_:
 5809|  10.3k|{
 5810|  10.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  10.3k|                                  needs_context_tag>) {
 5814|  10.3k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  10.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  10.3k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 5648|  10.3k|    {                                                                        \
 5649|  10.3k|        return val;                                                          \
 5650|  10.3k|    }
_ZN3scn2v46detail15make_value_implINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEERS7_EEDaOT0_:
 5778|  10.3k|{
 5779|  10.3k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  10.3k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  10.3k|    constexpr bool scannable_char =
 5783|  10.3k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  10.3k|    static_assert(scannable_char,
 5785|  10.3k|                  "Cannot scan an argument of an unsupported character "
 5786|  10.3k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  10.3k|    constexpr bool scannable_const =
 5789|  10.3k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  10.3k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  10.3k|    constexpr bool scannable_disabled =
 5793|  10.3k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  10.3k|    static_assert(scannable_disabled,
 5795|  10.3k|                  "Cannot scan an argument that has been disabled by "
 5796|  10.3k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  10.3k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  10.3k|    static_assert(
 5800|  10.3k|        scannable,
 5801|  10.3k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  10.3k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  10.3k|    return arg_value{arg};
 5805|  10.3k|}
_ZN3scn2v46detail9arg_valueC2INSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEERT_:
 5562|  10.3k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|  10.3k|    {
 5564|  10.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEptEv:
 1814|  10.6k|    {
 1815|  10.6k|        return &value();
 1816|  10.6k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEE5valueISF_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1768|  10.6k|    {
 1769|  10.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  10.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  10.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  10.6k|        return this->get_value();
 1771|  10.6k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEE6valuesEv:
 6353|  10.3k|    {
 6354|  10.3k|        return m_values;
 6355|  10.3k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNSt3__117basic_string_viewIwNS8_11char_traitsIwEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  10.3k|        : basic_scan_args(store.desc, store.args.data())
 6136|  10.3k|    {
 6137|  10.3k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  10.3k|        : m_str(r.str)
 8763|  10.3k|    {
 8764|  10.3k|    }
_ZN3scn2v410scan_errorC2ENS1_4codeEPKc:
 3740|   274k|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3741|   274k|    {
 3742|   274k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  915|   274k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3743|   274k|    }
_ZNK3scn2v410scan_error4codeEv:
 3752|  3.29k|    {
 3753|  3.29k|        return m_code;
 3754|  3.29k|    }
_ZN3scn2v46detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3975|  50.7k|{
 3976|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3977|       |                                          const CharT*, const CharT*>) {
 3978|       |        return {first, last};
 3979|       |    }
 3980|  50.7k|    else {
 3981|  50.7k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3982|  50.7k|    }
 3983|  50.7k|}
_ZNK3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE9has_valueEv:
  571|  2.19M|    {
  572|  2.19M|        return m_has_value;
  573|  2.19M|    }
_ZNR3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE14get_unexpectedEv:
  554|   155k|    {
  555|   155k|        return m_unexpected;
  556|   155k|    }
_ZNR3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1745|   151k|    {
 1746|   151k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   151k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   151k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   151k|        return this->get_unexpected().error();
 1748|   151k|    }
_ZNK3scn2v46detail9fill_type4sizeEv:
 6932|  3.30k|    {
 6933|  3.30k|        return m_size;
 6934|  3.30k|    }
_ZNK3scn2v46detail12format_specs8get_baseEv:
 6973|  4.29k|    {
 6974|  4.29k|        SCN_GCC_COMPAT_PUSH
 6975|  4.29k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 6976|  4.29k|        switch (type) {
 6977|  1.93k|            case presentation_type::none:
  ------------------
  |  Branch (6977:13): [True: 1.93k, False: 2.36k]
  ------------------
 6978|  1.93k|                return 10;
 6979|     80|            case presentation_type::int_generic:
  ------------------
  |  Branch (6979:13): [True: 80, False: 4.21k]
  ------------------
 6980|     80|                return 0;
 6981|      0|            case presentation_type::int_arbitrary_base:
  ------------------
  |  Branch (6981:13): [True: 0, False: 4.29k]
  ------------------
 6982|      0|                return arbitrary_base;
 6983|       |
 6984|     38|            case presentation_type::int_binary:
  ------------------
  |  Branch (6984:13): [True: 38, False: 4.25k]
  ------------------
 6985|     38|                return 2;
 6986|     72|            case presentation_type::int_octal:
  ------------------
  |  Branch (6986:13): [True: 72, False: 4.22k]
  ------------------
 6987|     72|                return 8;
 6988|     40|            case presentation_type::int_decimal:
  ------------------
  |  Branch (6988:13): [True: 40, False: 4.25k]
  ------------------
 6989|     84|            case presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (6989:13): [True: 44, False: 4.25k]
  ------------------
 6990|     84|                return 10;
 6991|  2.09k|            case presentation_type::int_hex:
  ------------------
  |  Branch (6991:13): [True: 2.09k, False: 2.20k]
  ------------------
 6992|  2.09k|                return 16;
 6993|       |
 6994|      0|            default:
  ------------------
  |  Branch (6994:13): [True: 0, False: 4.29k]
  ------------------
 6995|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6996|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6997|  4.29k|        }
 6998|  4.29k|        SCN_GCC_COMPAT_POP
 6999|  4.29k|    }
_ZN3scn2v46detail12specs_setterC2ERNS1_12format_specsE:
 7011|  35.2k|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v46detail12specs_setter8on_alignENS1_10align_typeE:
 7014|  5.71k|    {
 7015|  5.71k|        m_specs.align = align;
 7016|  5.71k|    }
_ZN3scn2v46detail12specs_setter8on_widthEi:
 7034|  7.18k|    {
 7035|  7.18k|        if (m_specs.precision != 0 && width > m_specs.precision) {
  ------------------
  |  Branch (7035:13): [True: 0, False: 7.18k]
  |  Branch (7035:39): [True: 0, False: 0]
  ------------------
 7036|       |            // clang-format off
 7037|      0|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 7038|       |            // clang-format on
 7039|      0|        }
 7040|       |
 7041|  7.18k|        m_specs.width = width;
 7042|  7.18k|    }
_ZN3scn2v46detail12specs_setter12on_precisionEi:
 7044|  12.0k|    {
 7045|  12.0k|        if (m_specs.width > prec) {
  ------------------
  |  Branch (7045:13): [True: 68, False: 12.0k]
  ------------------
 7046|       |            // clang-format off
 7047|     68|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 7048|       |            // clang-format on
 7049|     68|        }
 7050|       |
 7051|  12.0k|        m_specs.precision = prec;
 7052|  12.0k|    }
_ZN3scn2v46detail12specs_setter7on_typeENS1_17presentation_typeE:
 7055|  34.0k|    {
 7056|  34.0k|        m_specs.type = type;
 7057|  34.0k|    }
_ZN3scn2v46detail12specs_setter17on_charset_singleEDi:
 7060|  1.26M|    {
 7061|  1.26M|        const auto cp_value = static_cast<unsigned>(cp);
 7062|  1.26M|        if (SCN_LIKELY(cp_value <= 127)) {
  ------------------
  |  |  864|  1.26M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.07M, False: 191k]
  |  |  ------------------
  ------------------
 7063|  1.07M|            m_specs.charset_literals[cp_value / 8] |=
 7064|  1.07M|                static_cast<unsigned char>(1ul << (cp_value % 8));
 7065|  1.07M|        }
 7066|   191k|        else {
 7067|   191k|            m_specs.charset_has_nonascii = true;
 7068|   191k|        }
 7069|  1.26M|    }
_ZN3scn2v46detail12specs_setter16on_charset_rangeEDiDi:
 7072|  10.7k|    {
 7073|  10.7k|        const auto begin_value = static_cast<unsigned>(begin);
 7074|  10.7k|        const auto end_value = static_cast<unsigned>(end);
 7075|  10.7k|        SCN_EXPECT(begin_value < end_value);
  ------------------
  |  |  930|  10.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  10.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7076|       |
 7077|  10.7k|        if (SCN_LIKELY(end_value <= 127)) {
  ------------------
  |  |  864|  10.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 5.72k, False: 5.05k]
  |  |  ------------------
  ------------------
 7078|       |            // No need to bit-twiddle with a mask, because with the
 7079|       |            // SCN_ASSUME, -O3 will optimize this to a single operation
 7080|  5.72k|            SCN_ASSUME(begin_value < end_value);
  ------------------
  |  |  884|  5.72k|#define SCN_ASSUME(x) __builtin_assume(x)
  ------------------
 7081|   395k|            for (auto v = begin_value; v != end_value; ++v) {
  ------------------
  |  Branch (7081:40): [True: 390k, False: 5.72k]
  ------------------
 7082|   390k|                m_specs.charset_literals[v / 8] |=
 7083|   390k|                    static_cast<unsigned char>(1ul << (v % 8));
 7084|   390k|            }
 7085|  5.72k|        }
 7086|  5.05k|        else {
 7087|  5.05k|            m_specs.charset_has_nonascii = true;
 7088|  5.05k|        }
 7089|  10.7k|    }
_ZN3scn2v46detail12specs_setter19on_charset_invertedEv:
 7092|  3.54k|    {
 7093|  3.54k|        m_specs.charset_is_inverted = true;
 7094|  3.54k|    }
_ZN3scn2v46detail12specs_setter14on_regex_flagsENS1_11regex_flagsE:
 7111|  2.04k|    {
 7112|  2.04k|        m_specs.regexp_flags = flags;
 7113|  2.04k|    }
_ZN3scn2v46detail12specs_setter8on_errorEPKc:
 7117|  9.83k|    {
 7118|  9.83k|        SCN_UNLIKELY_ATTR
 7119|  9.83k|        m_error = unexpected_scan_error(scan_error::invalid_format_string, msg);
 7120|  9.83k|    }
_ZNK3scn2v46detail12specs_setter9get_errorEv:
 7128|  1.31M|    {
 7129|  1.31M|        return m_error;
 7130|  1.31M|    }
_ZN3scn2v46detail21unexpected_scan_errorENS0_10scan_error4codeEPKc:
 3917|   128k|{
 3918|   128k|    return unexpected(scan_error{c, m});
 3919|   128k|}
_ZN3scn2v46detail39decode_utf8_code_point_exhaustive_validENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4168|   113k|{
 4169|   113k|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  930|   113k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   113k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4170|       |
 4171|   113k|    const auto is_trailing_code_unit = [](char ch) {
 4172|   113k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4173|   113k|    };
 4174|       |
 4175|   113k|    if (input.size() == 1) {
  ------------------
  |  Branch (4175:9): [True: 97.9k, False: 15.9k]
  ------------------
 4176|  97.9k|        SCN_EXPECT(static_cast<unsigned char>(input[0]) < 0x80);
  ------------------
  |  |  930|  97.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  97.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4177|  97.9k|        return static_cast<char32_t>(input[0]);
 4178|  97.9k|    }
 4179|       |
 4180|  15.9k|    if (input.size() == 2) {
  ------------------
  |  Branch (4180:9): [True: 15.0k, False: 908]
  ------------------
 4181|  15.0k|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xe0) == 0xc0);
  ------------------
  |  |  930|  15.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4182|  15.0k|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  930|  15.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4183|       |
 4184|  15.0k|        char32_t cp{};
 4185|  15.0k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 4186|  15.0k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 4187|  15.0k|        return cp;
 4188|  15.0k|    }
 4189|       |
 4190|    908|    if (input.size() == 3) {
  ------------------
  |  Branch (4190:9): [True: 752, False: 156]
  ------------------
 4191|    752|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xf0) == 0xe0);
  ------------------
  |  |  930|    752|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    752|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4192|    752|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  930|    752|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    752|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4193|    752|        SCN_EXPECT(is_trailing_code_unit(input[2]));
  ------------------
  |  |  930|    752|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    752|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4194|       |
 4195|    752|        char32_t cp{};
 4196|    752|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 4197|    752|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 4198|    752|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 4199|    752|        return cp;
 4200|    752|    }
 4201|       |
 4202|    156|    if (input.size() == 4) {
  ------------------
  |  Branch (4202:9): [True: 156, False: 0]
  ------------------
 4203|    156|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xf8) == 0xf0);
  ------------------
  |  |  930|    156|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    156|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4204|    156|        SCN_EXPECT(static_cast<unsigned char>(input[0]) <= 0xf4);
  ------------------
  |  |  930|    156|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    156|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4205|    156|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  930|    156|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    156|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4206|    156|        SCN_EXPECT(is_trailing_code_unit(input[2]));
  ------------------
  |  |  930|    156|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    156|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4207|    156|        SCN_EXPECT(is_trailing_code_unit(input[3]));
  ------------------
  |  |  930|    156|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    156|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4208|       |
 4209|    156|        char32_t cp{};
 4210|    156|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 4211|    156|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 4212|    156|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 4213|    156|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 4214|    156|        return cp;
 4215|    156|    }
 4216|       |
 4217|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 4218|       |    // gcc 7 thinks we'll get here, even when we won't
 4219|      0|    SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4220|      0|#endif
 4221|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4222|      0|}
_ZN3scn2v46detail11is_cp_spaceEDi:
 4307|   189k|{
 4308|       |    // Pattern_White_Space property
 4309|   189k|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4309:13): [True: 140k, False: 48.3k]
  |  Branch (4309:27): [True: 8.41k, False: 132k]
  ------------------
 4310|   189k|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4310:12): [True: 4.43k, False: 176k]
  ------------------
 4311|   189k|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4311:12): [True: 6.80k, False: 169k]
  ------------------
 4312|   189k|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4312:12): [True: 2.05k, False: 167k]
  ------------------
 4313|   189k|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4313:12): [True: 3.72k, False: 163k]
  ------------------
 4314|   189k|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4314:12): [True: 1.25k, False: 162k]
  ------------------
 4315|   189k|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4315:12): [True: 102, False: 162k]
  ------------------
 4316|   189k|}
_ZN3scn2v46detailanENS1_11regex_flagsES2_:
 6862|  1.79k|{
 6863|  1.79k|    return static_cast<regex_flags>(static_cast<unsigned>(a) &
 6864|  1.79k|                                    static_cast<unsigned>(b));
 6865|  1.79k|}
_ZN3scn2v46detailorENS1_11regex_flagsES2_:
 6867|    248|{
 6868|    248|    return static_cast<regex_flags>(static_cast<unsigned>(a) |
 6869|    248|                                    static_cast<unsigned>(b));
 6870|    248|}
_ZN3scn2v46detailoRERNS1_11regex_flagsES2_:
 6882|    248|{
 6883|    248|    return a = a | b;
 6884|    248|}
_ZN3scn2v46detail25get_category_for_arg_typeENS1_8arg_typeE:
 7811|    964|{
 7812|    964|    switch (type) {
 7813|    100|        case arg_type::none_type:
  ------------------
  |  Branch (7813:9): [True: 100, False: 864]
  ------------------
 7814|    100|            return arg_type_category::none;
 7815|       |
 7816|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7816:9): [True: 0, False: 964]
  ------------------
 7817|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7817:9): [True: 0, False: 964]
  ------------------
 7818|     96|        case arg_type::int_type:
  ------------------
  |  Branch (7818:9): [True: 96, False: 868]
  ------------------
 7819|     96|        case arg_type::long_type:
  ------------------
  |  Branch (7819:9): [True: 0, False: 964]
  ------------------
 7820|     96|        case arg_type::llong_type:
  ------------------
  |  Branch (7820:9): [True: 0, False: 964]
  ------------------
 7821|     96|            return arg_type_category::integer;
 7822|       |
 7823|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7823:9): [True: 0, False: 964]
  ------------------
 7824|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7824:9): [True: 0, False: 964]
  ------------------
 7825|     96|        case arg_type::uint_type:
  ------------------
  |  Branch (7825:9): [True: 96, False: 868]
  ------------------
 7826|     96|        case arg_type::ulong_type:
  ------------------
  |  Branch (7826:9): [True: 0, False: 964]
  ------------------
 7827|     96|        case arg_type::ullong_type:
  ------------------
  |  Branch (7827:9): [True: 0, False: 964]
  ------------------
 7828|     96|            return arg_type_category::unsigned_integer;
 7829|       |
 7830|     96|        case arg_type::pointer_type:
  ------------------
  |  Branch (7830:9): [True: 96, False: 868]
  ------------------
 7831|     96|            return arg_type_category::pointer;
 7832|     96|        case arg_type::bool_type:
  ------------------
  |  Branch (7832:9): [True: 96, False: 868]
  ------------------
 7833|     96|            return arg_type_category::boolean;
 7834|     54|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7834:9): [True: 54, False: 910]
  ------------------
 7835|     96|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7835:9): [True: 42, False: 922]
  ------------------
 7836|     96|        case arg_type::code_point_type:
  ------------------
  |  Branch (7836:9): [True: 0, False: 964]
  ------------------
 7837|     96|            return arg_type_category::character;
 7838|       |
 7839|      0|        case arg_type::float_type:
  ------------------
  |  Branch (7839:9): [True: 0, False: 964]
  ------------------
 7840|     96|        case arg_type::double_type:
  ------------------
  |  Branch (7840:9): [True: 96, False: 868]
  ------------------
 7841|     96|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7841:9): [True: 0, False: 964]
  ------------------
 7842|     96|            return arg_type_category::floating;
 7843|       |
 7844|     54|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7844:9): [True: 54, False: 910]
  ------------------
 7845|    150|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7845:9): [True: 96, False: 868]
  ------------------
 7846|    192|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7846:9): [True: 42, False: 922]
  ------------------
 7847|    288|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7847:9): [True: 96, False: 868]
  ------------------
 7848|    288|            return arg_type_category::string;
 7849|       |
 7850|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7850:9): [True: 0, False: 964]
  ------------------
 7851|      0|            return arg_type_category::custom;
 7852|       |
 7853|      0|            SCN_CLANG_PUSH
 7854|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7855|      0|        default:
  ------------------
  |  Branch (7855:9): [True: 0, False: 964]
  ------------------
 7856|      0|            SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7857|    964|            SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7858|    964|            SCN_CLANG_POP
 7859|    964|    }
 7860|       |
 7861|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7862|    964|}
_ZNO3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1755|  3.97k|    {
 1756|  3.97k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  3.97k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.97k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  3.97k|        return std::move(this->get_unexpected().error());
 1758|  3.97k|    }
_ZN3scn2v46detail20check_int_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7897|  6.64k|{
 7898|  6.64k|    if (SCN_UNLIKELY(specs.type > presentation_type::int_hex)) {
  ------------------
  |  |  865|  6.64k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.37k, False: 2.26k]
  |  |  ------------------
  ------------------
 7899|  4.37k|        return handler.on_error("Invalid type specifier for integer type");
 7900|  4.37k|    }
 7901|  2.26k|    if (specs.localized) {
  ------------------
  |  Branch (7901:9): [True: 132, False: 2.13k]
  ------------------
 7902|    132|        if (SCN_UNLIKELY(specs.type == presentation_type::int_binary)) {
  ------------------
  |  |  865|    132|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 20, False: 112]
  |  |  ------------------
  ------------------
 7903|       |            // clang-format off
 7904|     20|            handler.on_error("'b'/'B' specifier not supported for localized integers");
 7905|       |            // clang-format on
 7906|     20|            return;
 7907|     20|        }
 7908|    112|        if (SCN_UNLIKELY(specs.type == presentation_type::int_arbitrary_base)) {
  ------------------
  |  |  865|    112|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 112]
  |  |  ------------------
  ------------------
 7909|       |            // clang-format off
 7910|      0|            return handler.on_error("Arbitrary bases not supported for localized integers");
 7911|       |            // clang-format on
 7912|      0|        }
 7913|    112|    }
 7914|  2.26k|}
_ZN3scn2v46ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 2093|   140k|{
 2094|   140k|    return SCN_FWD(t);
  ------------------
  |  |  936|   140k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|   140k|}
_ZN3scn2v46detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7941|  3.32k|{
 7942|  3.32k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7942:9): [True: 2.32k, False: 994]
  ------------------
 7943|  3.32k|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (7943:10): [True: 138, False: 2.18k]
  ------------------
 7944|  2.32k|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (7944:10): [True: 2.08k, False: 104]
  ------------------
 7945|  2.22k|        SCN_UNLIKELY_ATTR
 7946|  2.22k|        return handler.on_error("Invalid type specifier for float type");
 7947|  2.22k|    }
 7948|  3.32k|}
_ZNK3scn2v48expectedIvNS0_10scan_errorEEcvbEv:
 1739|  2.03M|    {
 1740|  2.03M|        return has_value();
 1741|  2.03M|    }
_ZN3scn2v46detail23check_string_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7953|  9.71k|{
 7954|  9.71k|    if (specs.type == presentation_type::none ||
  ------------------
  |  Branch (7954:9): [True: 2.89k, False: 6.81k]
  ------------------
 7955|  9.71k|        specs.type == presentation_type::string ||
  ------------------
  |  Branch (7955:9): [True: 864, False: 5.95k]
  ------------------
 7956|  9.71k|        specs.type == presentation_type::string_set ||
  ------------------
  |  Branch (7956:9): [True: 4.44k, False: 1.50k]
  ------------------
 7957|  9.71k|        specs.type == presentation_type::regex ||
  ------------------
  |  Branch (7957:9): [True: 120, False: 1.38k]
  ------------------
 7958|  9.71k|        specs.type == presentation_type::regex_escaped) {
  ------------------
  |  Branch (7958:9): [True: 534, False: 852]
  ------------------
 7959|  8.86k|        return;
 7960|  8.86k|    }
 7961|    852|    if (specs.type == presentation_type::character) {
  ------------------
  |  Branch (7961:9): [True: 216, False: 636]
  ------------------
 7962|    216|        if (SCN_UNLIKELY(specs.precision == 0)) {
  ------------------
  |  |  865|    216|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12, False: 204]
  |  |  ------------------
  ------------------
 7963|       |            // clang-format off
 7964|     12|            return handler.on_error("'c' type specifier for strings requires the field precision to be specified");
 7965|       |            // clang-format on
 7966|     12|        }
 7967|    204|        return;
 7968|    216|    }
 7969|    636|    SCN_UNLIKELY_ATTR
 7970|    636|    handler.on_error("Invalid type specifier for string");
 7971|    636|}
_ZN3scn2v46detail21check_bool_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7987|  3.32k|{
 7988|  3.32k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7988:9): [True: 2.32k, False: 994]
  ------------------
 7989|  3.32k|        specs.type != presentation_type::string &&
  ------------------
  |  Branch (7989:9): [True: 2.02k, False: 300]
  ------------------
 7990|  3.32k|        specs.type != presentation_type::int_generic &&
  ------------------
  |  Branch (7990:9): [True: 1.99k, False: 32]
  ------------------
 7991|  3.32k|        specs.type != presentation_type::int_hex &&
  ------------------
  |  Branch (7991:9): [True: 1.97k, False: 22]
  ------------------
 7992|  3.32k|        specs.type != presentation_type::int_binary &&
  ------------------
  |  Branch (7992:9): [True: 1.94k, False: 24]
  ------------------
 7993|  3.32k|        specs.type != presentation_type::int_unsigned_decimal &&
  ------------------
  |  Branch (7993:9): [True: 1.93k, False: 16]
  ------------------
 7994|  3.32k|        specs.type != presentation_type::int_octal &&
  ------------------
  |  Branch (7994:9): [True: 1.90k, False: 28]
  ------------------
 7995|  3.32k|        specs.type != presentation_type::int_decimal) {
  ------------------
  |  Branch (7995:9): [True: 1.88k, False: 16]
  ------------------
 7996|  1.88k|        SCN_UNLIKELY_ATTR
 7997|  1.88k|        return handler.on_error("Invalid type specifier for boolean");
 7998|  1.88k|    }
 7999|  3.32k|}
_ZN3scn2v46detail21check_char_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7919|  3.23k|{
 7920|  3.23k|    if (specs.type > presentation_type::int_hex ||
  ------------------
  |  Branch (7920:9): [True: 2.17k, False: 1.06k]
  ------------------
 7921|  3.23k|        specs.type == presentation_type::int_arbitrary_base) {
  ------------------
  |  Branch (7921:9): [True: 0, False: 1.06k]
  ------------------
 7922|  2.17k|        SCN_UNLIKELY_ATTR
 7923|  2.17k|        return handler.on_error("Invalid type specifier for character type");
 7924|  2.17k|    }
 7925|  3.23k|}
_ZN3scn2v46detail24check_pointer_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7976|  3.23k|{
 7977|  3.23k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7977:9): [True: 2.27k, False: 966]
  ------------------
 7978|  3.23k|        specs.type != presentation_type::pointer) {
  ------------------
  |  Branch (7978:9): [True: 2.26k, False: 12]
  ------------------
 7979|  2.26k|        SCN_UNLIKELY_ATTR
 7980|  2.26k|        return handler.on_error("Invalid type specifier for pointer");
 7981|  2.26k|    }
 7982|  3.23k|}
_ZN3scn2v46detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3975|  52.9k|{
 3976|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3977|       |                                          const CharT*, const CharT*>) {
 3978|       |        return {first, last};
 3979|       |    }
 3980|  52.9k|    else {
 3981|  52.9k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3982|  52.9k|    }
 3983|  52.9k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3479|  1.24M|    {
 3480|  1.24M|        return m_iterator;
 3481|  1.24M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3483|  1.25M|    {
 3484|  1.25M|        return m_sentinel;
 3485|  1.25M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3479|   500k|    {
 3480|   500k|        return m_iterator;
 3481|   500k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3483|   287k|    {
 3484|   287k|        return m_sentinel;
 3485|   287k|    }
_ZN3scn2v46detail10locale_refC2Ev:
 8783|  76.6k|    constexpr locale_ref() = default;
_ZN3scn2v46detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1349|    238|{
 1350|    238|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1351|    238|}
_ZNR3scn2v410unexpectedINS0_4impl9eof_errorEE5errorEv:
  364|  2.72k|    {
  365|  2.72k|        return m_unexpected;
  366|  2.72k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  349|   129k|        : m_unexpected(std::forward<Err>(e))
  350|   129k|    {
  351|   129k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|   129k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|   129k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1615|   140k|        : base(unexpect, std::move(e.error())),
 1616|   140k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   140k|    {
 1618|   140k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  449|   140k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   140k|          m_has_value(false)
  451|   140k|    {
  452|   140k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   143k|    {
 1316|   143k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1615|  32.1k|        : base(unexpect, std::move(e.error())),
 1616|  32.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  32.1k|    {
 1618|  32.1k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|  33.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  33.0k|          m_has_value(false)
  451|  33.0k|    {
  452|  33.0k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  56.2k|    {
 1316|  56.2k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1569|  21.5k|        : base(std::in_place, std::forward<U>(val)),
 1570|  21.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  21.5k|    {
 1572|  21.5k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  21.5k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  21.5k|    {
  442|  21.5k|    }
_ZNK3scn2v48expectedIPKcNS0_10scan_errorEEcvbEv:
 1739|  57.1k|    {
 1740|  57.1k|        return has_value();
 1741|  57.1k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  489|   111k|    {
  490|   111k|        return m_has_value;
  491|   111k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5errorEv:
 1745|  32.1k|    {
 1746|  32.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  32.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  32.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  32.1k|        return this->get_unexpected().error();
 1748|  32.1k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  32.1k|    {
  473|  32.1k|        return m_unexpected;
  474|  32.1k|    }
_ZNO3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1804|  15.0k|    {
 1805|  15.0k|        return std::move(value());
 1806|  15.0k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1768|  22.3k|    {
 1769|  22.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  22.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  22.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  22.3k|        return this->get_value();
 1771|  22.3k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  455|  22.3k|    {
  456|  22.3k|        return m_value;
  457|  22.3k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1615|  15.2k|        : base(unexpect, std::move(e.error())),
 1616|  15.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  15.2k|    {
 1618|  15.2k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|  15.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  15.9k|          m_has_value(false)
  451|  15.9k|    {
  452|  15.9k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  32.0k|    {
 1316|  32.0k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1569|  15.7k|        : base(std::in_place, std::forward<U>(val)),
 1570|  15.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  15.7k|    {
 1572|  15.7k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  15.7k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  15.7k|    {
  442|  15.7k|    }
_ZNK3scn2v48expectedIPKwNS0_10scan_errorEEcvbEv:
 1739|  32.8k|    {
 1740|  32.8k|        return has_value();
 1741|  32.8k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  489|  63.4k|    {
  490|  63.4k|        return m_has_value;
  491|  63.4k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5errorEv:
 1745|  15.2k|    {
 1746|  15.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  15.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  15.2k|        return this->get_unexpected().error();
 1748|  15.2k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  15.2k|    {
  473|  15.2k|        return m_unexpected;
  474|  15.2k|    }
_ZNO3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1804|  11.9k|    {
 1805|  11.9k|        return std::move(value());
 1806|  11.9k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1768|  15.3k|    {
 1769|  15.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  15.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  15.3k|        return this->get_value();
 1771|  15.3k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  455|  15.3k|    {
  456|  15.3k|        return m_value;
  457|  15.3k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|  8.43k|    {
 1979|  8.43k|        return detail::transform_error_impl(std::move(*this),
 1980|  8.43k|                                            std::forward<F>(f));
 1981|  8.43k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|  8.43k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  8.43k|    else {
 1472|  8.43k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  8.43k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  8.43k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 8.43k, False: 0]
  |  |  ------------------
  ------------------
 1474|  8.43k|                   ? result(*std::forward<Exp>(exp))
 1475|  8.43k|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|  8.43k|    }
 1479|  8.43k|}
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  90.0k|    {
  490|  90.0k|        return m_has_value;
  491|  90.0k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|  10.3k|    {
 1805|  10.3k|        return std::move(value());
 1806|  10.3k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|  42.0k|    {
 1769|  42.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  42.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  42.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  42.0k|        return this->get_value();
 1771|  42.0k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  42.0k|    {
  456|  42.0k|        return m_value;
  457|  42.0k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1755|    102|    {
 1756|    102|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    102|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    102|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|    102|        return std::move(this->get_unexpected().error());
 1758|    102|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|    102|    {
  473|    102|        return m_unexpected;
  474|    102|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1625|    932|        : base(unexpect, std::forward<Args>(args)...),
 1626|    932|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|    932|    {
 1628|    932|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE4argsEv:
 8836|  5.79k|    {
 8837|  5.79k|        return m_args;
 8838|  5.79k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE6localeEv:
 8841|  27.6k|    {
 8842|  27.6k|        return m_locale;
 8843|  27.6k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2ES7_NS1_10locale_refE:
 8847|  46.6k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|  46.6k|    static_cast<    \
  |  |  935|  46.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|  46.6k|    static_cast<    \
  |  |  935|  46.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8848|  46.6k|    {
 8849|  46.6k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|  7.10k|    {
 3000|  7.10k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|  7.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|  7.10k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|  7.10k|    {
 2981|  7.10k|        return t.data();
 2982|  7.10k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE4argsEv:
 8836|  4.13k|    {
 8837|  4.13k|        return m_args;
 8838|  4.13k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE6localeEv:
 8841|  11.9k|    {
 8842|  11.9k|        return m_locale;
 8843|  11.9k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2ES7_NS1_10locale_refE:
 8847|  93.3k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|  93.3k|    static_cast<    \
  |  |  935|  93.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|  93.3k|    static_cast<    \
  |  |  935|  93.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8848|  93.3k|    {
 8849|  93.3k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1615|   286k|        : base(unexpect, std::move(e.error())),
 1616|   286k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   286k|    {
 1618|   286k|    }
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  548|   286k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  549|   286k|          m_has_value(false)
  550|   286k|    {
  551|   286k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIvNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   286k|    {
 1316|   286k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2Ev:
 1551|   350k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2Ev:
  528|   350k|        : m_deferred_init(), m_has_value(true)
  529|   350k|    {
  530|   350k|    }
_ZNK3scn2v46detail9fill_type13get_code_unitIcEET_v:
 6938|  1.25k|    {
 6939|  1.25k|        SCN_EXPECT(m_size <= sizeof(CharT));
  ------------------
  |  |  930|  1.25k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.25k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6940|  1.25k|        CharT r{};
 6941|  1.25k|        std::memcpy(&r, m_data, m_size);
 6942|  1.25k|        return r;
 6943|  1.25k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  349|  1.43k|        : m_unexpected(std::forward<Err>(e))
  350|  1.43k|    {
  351|  1.43k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  1.43k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  1.43k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  358|  1.67k|        : m_unexpected(std::forward<Args>(args)...)
  359|  1.67k|    {
  360|  1.67k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  1.67k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  1.67k|    }
_ZNK3scn2v46detail9fill_type14get_code_unitsIcEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 6947|  1.15k|    {
 6948|  1.15k|        return {reinterpret_cast<const CharT*>(m_data), m_size};
 6949|  1.15k|    }
_ZNK3scn2v46ranges6detail6ssize_2fnclIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSD_:
 3106|     52|    {
 3107|     52|        return fn::impl(std::forward<T>(t));
 3108|     52|    }
_ZN3scn2v46ranges6detail6ssize_2fn4implIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISD_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSD_EEEEE15difference_typeEE4typeELm8EElSM_E4typeE_EEOSD_:
 3097|     52|    {
 3098|     52|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 3099|     52|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3074|     52|    {
 3075|     52|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|     52|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3040|     52|    {
 3041|     52|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|     52|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|     52|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  349|    238|        : m_unexpected(std::forward<Err>(e))
  350|    238|    {
  351|    238|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|    238|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|    238|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  349|      8|        : m_unexpected(std::forward<Err>(e))
  350|      8|    {
  351|      8|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|      8|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|      8|    }
_ZNR3scn2v410unexpectedINS0_4impl11parse_errorEE5errorEv:
  364|  18.4k|    {
  365|  18.4k|        return m_unexpected;
  366|  18.4k|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  358|  3.77k|        : m_unexpected(std::forward<Args>(args)...)
  359|  3.77k|    {
  360|  3.77k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  3.77k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  3.77k|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  349|  27.7k|        : m_unexpected(std::forward<Err>(e))
  350|  27.7k|    {
  351|  27.7k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  27.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  27.7k|    }
_ZNR3scn2v410unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  364|  27.7k|    {
  365|  27.7k|        return m_unexpected;
  366|  27.7k|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  358|  27.7k|        : m_unexpected(std::forward<Args>(args)...)
  359|  27.7k|    {
  360|  27.7k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  27.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  27.7k|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1349|    812|{
 1350|    812|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1351|    812|}
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  349|  2.95k|        : m_unexpected(std::forward<Err>(e))
  350|  2.95k|    {
  351|  2.95k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  2.95k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  2.95k|    }
_ZN3scn2v46detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JS8_EvEEDcOT_DpOT0_:
 1349|  1.34k|{
 1350|  1.34k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1351|  1.34k|}
_ZN3scn2v46detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|   136k|{
  316|   136k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|   136k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|   136k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3495|   114k|    {
 3496|   114k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3497|   114k|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|    564|        : base(unexpect, std::move(e.error())),
 1616|    564|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    564|    {
 1618|    564|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|    564|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    564|          m_has_value(false)
  451|    564|    {
  452|    564|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  47.9k|    {
 1316|  47.9k|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1569|  47.3k|        : base(std::in_place, std::forward<U>(val)),
 1570|  47.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  47.3k|    {
 1572|  47.3k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  47.3k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  47.3k|    {
  442|  47.3k|    }
_ZNK3scn2v48expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1739|  37.4k|    {
 1740|  37.4k|        return has_value();
 1741|  37.4k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1794|  31.6k|    {
 1795|  31.6k|        return value();
 1796|  31.6k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEC2IS7_vEEOT_:
 1569|  8.77k|        : base(std::in_place, std::forward<U>(val)),
 1570|  8.77k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  8.77k|    {
 1572|  8.77k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  440|  8.77k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  8.77k|    {
  442|  8.77k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  9.26k|    {
 1316|  9.26k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|    490|        : base(unexpect, std::move(e.error())),
 1616|    490|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    490|    {
 1618|    490|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|    490|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    490|          m_has_value(false)
  451|    490|    {
  452|    490|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEcvbEv:
 1739|  6.15k|    {
 1740|  6.15k|        return has_value();
 1741|  6.15k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE9has_valueEv:
  489|  16.5k|    {
  490|  16.5k|        return m_has_value;
  491|  16.5k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1794|  4.17k|    {
 1795|  4.17k|        return value();
 1796|  4.17k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|  6.87k|    {
 1769|  6.87k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  6.87k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  6.87k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  6.87k|        return this->get_value();
 1771|  6.87k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE9get_valueEv:
  455|  6.87k|    {
  456|  6.87k|        return m_value;
  457|  6.87k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEC2ISB_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSE_IXsr3stdE16is_convertible_vISG_SB_EEvE4typeELSK_0EEEONS0_10unexpectedISF_EE:
 1615|    238|        : base(unexpect, std::move(e.error())),
 1616|    238|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    238|    {
 1618|    238|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|    238|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    238|          m_has_value(false)
  451|    238|    {
  452|    238|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  4.89k|    {
 1316|  4.89k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEC2ISA_vEEOT_:
 1569|  4.65k|        : base(std::in_place, std::forward<U>(val)),
 1570|  4.65k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  4.65k|    {
 1572|  4.65k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2IJSB_EvEENS3_10in_place_tEDpOT_:
  440|  4.65k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  4.65k|    {
  442|  4.65k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1978|    872|    {
 1979|    872|        return detail::transform_error_impl(std::move(*this),
 1980|    872|                                            std::forward<F>(f));
 1981|    872|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9eof_errorEEERFNS0_10scan_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1461|    872|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    872|    else {
 1472|    872|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    872|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    872|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 872, False: 0]
  |  |  ------------------
  ------------------
 1474|    872|                   ? result(*std::forward<Exp>(exp))
 1475|    872|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|    872|    }
 1479|    872|}
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|  2.70k|    {
 1805|  2.70k|        return std::move(value());
 1806|  2.70k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IS7_vEEOT_:
 1569|  2.44k|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.44k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.44k|    {
 1572|  2.44k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  440|  2.44k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.44k|    {
  442|  2.44k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  9.74k|    {
 1316|  9.74k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE5errorEv:
 1755|    410|    {
 1756|    410|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    410|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    410|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|    410|        return std::move(this->get_unexpected().error());
 1758|    410|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE14get_unexpectedEv:
  472|    410|    {
  473|    410|        return m_unexpected;
  474|    410|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1625|  1.66k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  1.66k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  1.66k|    {
 1628|  1.66k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|  6.41k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  6.41k|          m_has_value(false)
  451|  6.41k|    {
  452|  6.41k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  2.10k|    {
 2869|  2.10k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  2.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  2.10k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESJ_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  2.10k|    {
 2850|  2.10k|        return decay_copy(t.begin());
 2851|  2.10k|    }
_ZN3scn2v46ranges6detail10decay_copyINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEEu7__decayIT_EOSA_:
 2093|  4.54k|{
 2094|  4.54k|    return SCN_FWD(t);
  ------------------
  |  |  936|  4.54k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  4.54k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_E5beginEv:
 3479|  2.10k|    {
 3480|  2.10k|        return m_iterator;
 3481|  2.10k|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  2.10k|    {
 2926|  2.10k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  2.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  2.10k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EESD_SD_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  2.10k|    {
 2908|  2.10k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  2.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  2.10k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_E3endEv:
 3483|  2.10k|    {
 3484|  2.10k|        return m_sentinel;
 3485|  2.10k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_EC2ISA_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SA_EEvE4typeELPv0EEESF_SA_:
 3464|  2.10k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  2.10k|    static_cast<    \
  |  |  935|  2.10k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  2.10k|    static_cast<    \
  |  |  935|  2.10k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  2.10k|    {
 3466|  2.10k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEcvbEv:
 1739|  4.89k|    {
 1740|  4.89k|        return has_value();
 1741|  4.89k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE9has_valueEv:
  489|  9.78k|    {
  490|  9.78k|        return m_has_value;
  491|  9.78k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEE5errorEv:
 1745|    238|    {
 1746|    238|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    238|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    238|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|    238|        return this->get_unexpected().error();
 1748|    238|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|    238|    {
  473|    238|        return m_unexpected;
  474|    238|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|  4.65k|    {
 1805|  4.65k|        return std::move(value());
 1806|  4.65k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|  4.65k|    {
 1769|  4.65k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  4.65k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.65k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  4.65k|        return this->get_value();
 1771|  4.65k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE9get_valueEv:
  455|  4.65k|    {
  456|  4.65k|        return m_value;
  457|  4.65k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  9.35k|    {
 1316|  9.35k|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|  9.35k|        : base(std::in_place, std::forward<U>(val)),
 1570|  9.35k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  9.35k|    {
 1572|  9.35k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  440|  9.35k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  9.35k|    {
  442|  9.35k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1739|  9.35k|    {
 1740|  9.35k|        return has_value();
 1741|  9.35k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  489|  18.7k|    {
  490|  18.7k|        return m_has_value;
  491|  18.7k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|  9.35k|    {
 1805|  9.35k|        return std::move(value());
 1806|  9.35k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|  9.35k|    {
 1769|  9.35k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  9.35k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.35k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  9.35k|        return this->get_value();
 1771|  9.35k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  455|  9.35k|    {
  456|  9.35k|        return m_value;
  457|  9.35k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|  4.74k|        : base(unexpect, std::move(e.error())),
 1616|  4.74k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  4.74k|    {
 1618|  4.74k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|    752|        : base(unexpect, std::move(e.error())),
 1616|    752|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    752|    {
 1618|    752|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|  1.16k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.16k|          m_has_value(false)
  451|  1.16k|    {
  452|  1.16k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  8.26k|    {
 1316|  8.26k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2INS8_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S8_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|  5.27k|        : base(unexpect, std::move(e.error())),
 1616|  5.27k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  5.27k|    {
 1618|  5.27k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJNS9_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|  5.27k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  5.27k|          m_has_value(false)
  451|  5.27k|    {
  452|  5.27k|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEcvbEv:
 1739|  7.62k|    {
 1740|  7.62k|        return has_value();
 1741|  7.62k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE9has_valueEv:
  489|  14.8k|    {
  490|  14.8k|        return m_has_value;
  491|  14.8k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5errorEv:
 1745|  2.78k|    {
 1746|  2.78k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  2.78k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.78k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  2.78k|        return this->get_unexpected().error();
 1748|  2.78k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE14get_unexpectedEv:
  472|  3.77k|    {
  473|  3.77k|        return m_unexpected;
  474|  3.77k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEC2ISB_vEEOT_:
 1569|  1.35k|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.35k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.35k|    {
 1572|  1.35k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  440|  1.35k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.35k|    {
  442|  1.35k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.35k|    {
 1316|  1.35k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|  1.82k|    {
 1769|  1.82k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.82k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.82k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.82k|        return this->get_value();
 1771|  1.82k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE9get_valueEv:
  455|  1.82k|    {
  456|  1.82k|        return m_value;
  457|  1.82k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEcvbEv:
 1739|  1.01k|    {
 1740|  1.01k|        return has_value();
 1741|  1.01k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9has_valueEv:
  489|  2.70k|    {
  490|  2.70k|        return m_has_value;
  491|  2.70k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.01k|    {
 1316|  1.01k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEdeISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSG_v:
 1804|  1.35k|    {
 1805|  1.35k|        return std::move(value());
 1806|  1.35k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEE5valueISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  1.35k|    {
 1769|  1.35k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.35k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.35k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.35k|        return this->get_value();
 1771|  1.35k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9get_valueEv:
  455|  1.35k|    {
  456|  1.35k|        return m_value;
  457|  1.35k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE3endEv:
 3483|  89.3k|    {
 3484|  89.3k|        return m_sentinel;
 3485|  89.3k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE15transform_errorIRFNS2_11parse_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1978|  2.23k|    {
 1979|  2.23k|        return detail::transform_error_impl(std::move(*this),
 1980|  2.23k|                                            std::forward<F>(f));
 1981|  2.23k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9eof_errorEEERFNS4_11parse_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1461|  2.23k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  2.23k|    else {
 1472|  2.23k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  2.23k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  2.23k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.82k, False: 410]
  |  |  ------------------
  ------------------
 1474|  2.23k|                   ? result(*std::forward<Exp>(exp))
 1475|  2.23k|                   : result(unexpect,
 1476|    410|                            trivial_invoke(std::forward<F>(f),
 1477|    410|                                           std::forward<Exp>(exp).error()));
 1478|  2.23k|    }
 1479|  2.23k|}
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IS7_vEEOT_:
 1569|  1.82k|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.82k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.82k|    {
 1572|  1.82k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  440|  1.82k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.82k|    {
  442|  1.82k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1625|    410|        : base(unexpect, std::forward<Args>(args)...),
 1626|    410|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|    410|    {
 1628|    410|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|  1.82k|    {
 1805|  1.82k|        return std::move(value());
 1806|  1.82k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE5beginEv:
 3479|   113k|    {
 3480|   113k|        return m_iterator;
 3481|   113k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEEC2IS9_vEEOT_:
 1569|  1.01k|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.01k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.01k|    {
 1572|  1.01k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  440|  1.01k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.01k|    {
  442|  1.01k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESA_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1978|  1.01k|    {
 1979|  1.01k|        return detail::transform_error_impl(std::move(*this),
 1980|  1.01k|                                            std::forward<F>(f));
 1981|  1.01k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS4_27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEENS4_9eof_errorEEERFNS0_10scan_errorESC_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSJ_OT0_:
 1461|  1.01k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  1.01k|    else {
 1472|  1.01k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  1.01k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  1.01k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.01k, False: 0]
  |  |  ------------------
  ------------------
 1474|  1.01k|                   ? result(*std::forward<Exp>(exp))
 1475|  1.01k|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|  1.01k|    }
 1479|  1.01k|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EE9has_valueEv:
  489|  2.02k|    {
  490|  2.02k|        return m_has_value;
  491|  2.02k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEEdeIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|  1.01k|    {
 1805|  1.01k|        return std::move(value());
 1806|  1.01k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEE5valueIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|  1.01k|    {
 1769|  1.01k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.01k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.01k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.01k|        return this->get_value();
 1771|  1.01k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EE9get_valueEv:
  455|  1.01k|    {
  456|  1.01k|        return m_value;
  457|  1.01k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEC2IS9_vEEOT_:
 1569|  1.01k|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.01k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.01k|    {
 1572|  1.01k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  440|  1.01k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.01k|    {
  442|  1.01k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.01k|    {
 1316|  1.01k|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEcvbEv:
 1739|  1.01k|    {
 1740|  1.01k|        return has_value();
 1741|  1.01k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  2.02k|    {
  490|  2.02k|        return m_has_value;
  491|  2.02k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEdeIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|  1.01k|    {
 1805|  1.01k|        return std::move(value());
 1806|  1.01k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEE5valueIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|  1.01k|    {
 1769|  1.01k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.01k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.01k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.01k|        return this->get_value();
 1771|  1.01k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.01k|    {
  456|  1.01k|        return m_value;
  457|  1.01k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeES6_EUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1978|    982|    {
 1979|    982|        return detail::transform_error_impl(std::move(*this),
 1980|    982|                                            std::forward<F>(f));
 1981|    982|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES8_EUlSA_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1461|    982|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    982|    else {
 1472|    982|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    982|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    982|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 982]
  |  |  ------------------
  ------------------
 1474|    982|                   ? result(*std::forward<Exp>(exp))
 1475|    982|                   : result(unexpect,
 1476|    982|                            trivial_invoke(std::forward<F>(f),
 1477|    982|                                           std::forward<Exp>(exp).error()));
 1478|    982|    }
 1479|    982|}
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5errorEv:
 1755|    982|    {
 1756|    982|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    982|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    982|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|    982|        return std::move(this->get_unexpected().error());
 1758|    982|    }
_ZN3scn2v413scan_expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EEEC2EONS0_8expectedIS7_NS0_10scan_errorEEE:
 3910|  1.66k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|  1.66k|    static_cast<    \
  |  |  935|  1.66k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|  1.66k|    {
 3912|  1.66k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEC2ISA_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SA_EEvE4typeELPv0EEESK_SF_:
 3464|  44.4k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  44.4k|    static_cast<    \
  |  |  935|  44.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  44.4k|    static_cast<    \
  |  |  935|  44.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  44.4k|    {
 3466|  44.4k|    }
_ZN3scn2v48expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEEC2ISH_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|     28|        : base(unexpect, std::move(e.error())),
 1616|     28|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|     28|    {
 1618|     28|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  636|     28|        : m_has_value(false)
  637|     28|    {
  638|     28|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|     28|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESI_EEEvDpOT_:
  700|     28|    {
  701|     28|        scn::detail::construct_at(unexpected_ptr(),
  702|     28|                                  std::forward<Args>(args)...);
  703|     28|        m_has_value = false;
  704|     28|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|     84|    {
  730|     84|        return reinterpret_cast<unexpected<E>*>(
  731|     84|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|     84|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|     84|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|     28|    {
 1316|     28|    }
_ZNK3scn2v48expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEEcvbEv:
 1739|     28|    {
 1740|     28|        return has_value();
 1741|     28|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE9has_valueEv:
  686|     84|    {
  687|     84|        return m_has_value;
  688|     84|    }
_ZNR3scn2v48expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEE5errorEv:
 1745|     28|    {
 1746|     28|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|     28|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     28|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|     28|        return this->get_unexpected().error();
 1748|     28|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  669|     28|    {
  670|     28|        return *unexpected_ptr();
  671|     28|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EED2Ev:
  642|     28|    {
  643|     28|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 0, False: 28]
  ------------------
  644|      0|            destroy_value();
  645|      0|        }
  646|     28|        else {
  647|     28|            destroy_unexpected();
  648|     28|        }
  649|     28|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|     28|    {
  712|     28|        scn::detail::destroy_at(unexpected_ptr());
  713|     28|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEcvbEv:
 1739|  10.0k|    {
 1740|  10.0k|        return has_value();
 1741|  10.0k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE9has_valueEv:
  489|  19.4k|    {
  490|  19.4k|        return m_has_value;
  491|  19.4k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEE5errorEv:
 1745|  6.07k|    {
 1746|  6.07k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  6.07k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  6.07k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  6.07k|        return this->get_unexpected().error();
 1748|  6.07k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  6.07k|    {
  473|  6.07k|        return m_unexpected;
  474|  6.07k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|  2.44k|    {
 1805|  2.44k|        return std::move(value());
 1806|  2.44k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|  3.33k|    {
 1769|  3.33k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  3.33k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.33k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  3.33k|        return this->get_value();
 1771|  3.33k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  3.33k|    {
  456|  3.33k|        return m_value;
  457|  3.33k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|  1.02k|        : base(unexpect, std::move(e.error())),
 1616|  1.02k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  1.02k|    {
 1618|  1.02k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  1.12k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.12k|          m_has_value(false)
  451|  1.12k|    {
  452|  1.12k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  14.2k|    {
 1316|  14.2k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  11.1k|        : base(unexpect, std::move(e.error())),
 1616|  11.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  11.1k|    {
 1618|  11.1k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|  11.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  11.1k|          m_has_value(false)
  451|  11.1k|    {
  452|  11.1k|    }
_ZNK3scn2v48expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1739|  15.1k|    {
 1740|  15.1k|        return has_value();
 1741|  15.1k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  489|  23.5k|    {
  490|  23.5k|        return m_has_value;
  491|  23.5k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1745|  5.57k|    {
 1746|  5.57k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  5.57k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.57k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  5.57k|        return this->get_unexpected().error();
 1748|  5.57k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  472|  5.57k|    {
  473|  5.57k|        return m_unexpected;
  474|  5.57k|    }
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1569|  3.63k|        : base(std::in_place, std::forward<U>(val)),
 1570|  3.63k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  3.63k|    {
 1572|  3.63k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  440|  3.63k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  3.63k|    {
  442|  3.63k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  3.63k|    {
 1316|  3.63k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|  1.92k|    {
 1769|  1.92k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.92k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.92k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.92k|        return this->get_value();
 1771|  1.92k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  455|  1.92k|    {
  456|  1.92k|        return m_value;
  457|  1.92k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1739|  2.72k|    {
 1740|  2.72k|        return has_value();
 1741|  2.72k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  489|  7.26k|    {
  490|  7.26k|        return m_has_value;
  491|  7.26k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  2.72k|    {
 1316|  2.72k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|  3.63k|    {
 1805|  3.63k|        return std::move(value());
 1806|  3.63k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|  3.63k|    {
 1769|  3.63k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  3.63k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.63k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  3.63k|        return this->get_value();
 1771|  3.63k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  455|  3.63k|    {
  456|  3.63k|        return m_value;
  457|  3.63k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3374|   127k|    {
 3375|   127k|        return detail::to_address(ranges::begin(derived()));
 3376|   127k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   127k|    {
 2869|   127k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   127k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   127k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   127k|    {
 2850|   127k|        return decay_copy(t.begin());
 2851|   127k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3333|   127k|    {
 3334|   127k|        return static_cast<D&>(*this);
 3335|   127k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1569|  1.92k|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.92k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.92k|    {
 1572|  1.92k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  1.92k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.92k|    {
  442|  1.92k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1569|  2.72k|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.72k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.72k|    {
 1572|  2.72k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  440|  2.72k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.72k|    {
  442|  2.72k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|  2.72k|    {
 1979|  2.72k|        return detail::transform_error_impl(std::move(*this),
 1980|  2.72k|                                            std::forward<F>(f));
 1981|  2.72k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSG_OT0_:
 1461|  2.72k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  2.72k|    else {
 1472|  2.72k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  2.72k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  2.72k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 2.72k, False: 0]
  |  |  ------------------
  ------------------
 1474|  2.72k|                   ? result(*std::forward<Exp>(exp))
 1475|  2.72k|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|  2.72k|    }
 1479|  2.72k|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  489|  5.44k|    {
  490|  5.44k|        return m_has_value;
  491|  5.44k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|  2.72k|    {
 1805|  2.72k|        return std::move(value());
 1806|  2.72k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|  2.72k|    {
 1769|  2.72k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.72k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.72k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.72k|        return this->get_value();
 1771|  2.72k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  455|  2.72k|    {
  456|  2.72k|        return m_value;
  457|  2.72k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|  2.72k|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.72k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.72k|    {
 1572|  2.72k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  440|  2.72k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.72k|    {
  442|  2.72k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  2.72k|    {
 1316|  2.72k|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1739|  2.72k|    {
 1740|  2.72k|        return has_value();
 1741|  2.72k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  489|  5.44k|    {
  490|  5.44k|        return m_has_value;
  491|  5.44k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|  2.72k|    {
 1805|  2.72k|        return std::move(value());
 1806|  2.72k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|  2.72k|    {
 1769|  2.72k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.72k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.72k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.72k|        return this->get_value();
 1771|  2.72k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  455|  2.72k|    {
  456|  2.72k|        return m_value;
  457|  2.72k|    }
_ZN3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISD_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISD_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SD_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1615|     20|        : base(unexpect, std::move(e.error())),
 1616|     20|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|     20|    {
 1618|     20|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS0_10unexpect_tEDpOT_:
  636|     20|        : m_has_value(false)
  637|     20|    {
  638|     20|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|     20|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESE_EEEvDpOT_:
  700|     20|    {
  701|     20|        scn::detail::construct_at(unexpected_ptr(),
  702|     20|                                  std::forward<Args>(args)...);
  703|     20|        m_has_value = false;
  704|     20|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|     60|    {
  730|     60|        return reinterpret_cast<unexpected<E>*>(
  731|     60|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|     60|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|     60|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|     20|    {
 1316|     20|    }
_ZNK3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEcvbEv:
 1739|     20|    {
 1740|     20|        return has_value();
 1741|     20|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9has_valueEv:
  686|     60|    {
  687|     60|        return m_has_value;
  688|     60|    }
_ZNR3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5errorEv:
 1745|     20|    {
 1746|     20|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|     20|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     20|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|     20|        return this->get_unexpected().error();
 1748|     20|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  669|     20|    {
  670|     20|        return *unexpected_ptr();
  671|     20|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EED2Ev:
  642|     20|    {
  643|     20|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 0, False: 20]
  ------------------
  644|      0|            destroy_value();
  645|      0|        }
  646|     20|        else {
  647|     20|            destroy_unexpected();
  648|     20|        }
  649|     20|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|     20|    {
  712|     20|        scn::detail::destroy_at(unexpected_ptr());
  713|     20|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   123k|    {
 3000|   123k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   123k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   123k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   123k|    {
 2981|   123k|        return t.data();
 2982|   123k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1569|  2.93k|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.93k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.93k|    {
 1572|  2.93k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  440|  2.93k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.93k|    {
  442|  2.93k|    }
_ZN3scn2v46detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1349|  2.63k|{
 1350|  2.63k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1351|  2.63k|}
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEE15transform_errorIRFNS0_10scan_errorESC_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSI_:
 1978|    342|    {
 1979|    342|        return detail::transform_error_impl(std::move(*this),
 1980|    342|                                            std::forward<F>(f));
 1981|    342|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_9sign_typeEEENS6_9eof_errorEEERFNS0_10scan_errorESE_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESG_EEDaOSK_OT0_:
 1461|    342|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    342|    else {
 1472|    342|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    342|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    342|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 342, False: 0]
  |  |  ------------------
  ------------------
 1474|    342|                   ? result(*std::forward<Exp>(exp))
 1475|    342|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|    342|    }
 1479|    342|}
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1569|    342|        : base(std::in_place, std::forward<U>(val)),
 1570|    342|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    342|    {
 1572|    342|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  440|    342|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    342|    {
  442|    342|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|    342|    {
 1316|    342|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEcvbEv:
 1739|    342|    {
 1740|    342|        return has_value();
 1741|    342|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|    684|    {
  490|    684|        return m_has_value;
  491|    684|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEdeISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSG_v:
 1804|    342|    {
 1805|    342|        return std::move(value());
 1806|    342|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEE5valueISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|    342|    {
 1769|    342|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    342|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    342|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    342|        return this->get_value();
 1771|    342|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|    342|    {
  456|    342|        return m_value;
  457|    342|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeES6_EUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1964|    684|    {
 1965|    684|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1966|    684|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES8_EUlSA_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSI_OT0_:
 1461|    684|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    684|    else {
 1472|    684|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    684|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    684|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 684]
  |  |  ------------------
  ------------------
 1474|    684|                   ? result(*std::forward<Exp>(exp))
 1475|    684|                   : result(unexpect,
 1476|    684|                            trivial_invoke(std::forward<F>(f),
 1477|    684|                                           std::forward<Exp>(exp).error()));
 1478|    684|    }
 1479|    684|}
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1794|    882|    {
 1795|    882|        return value();
 1796|    882|    }
_ZZN3scn2v44impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E0_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3935|      8|    auto&& SCN_TRY_TMP = (x);                          \
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|    334|    {
 2869|    334|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|    334|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|    334|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESO_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|    334|    {
 2850|    334|        return decay_copy(t.begin());
 2851|    334|    }
_ZZN3scn2v44impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3935|    310|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1978|    910|    {
 1979|    910|        return detail::transform_error_impl(std::move(*this),
 1980|    910|                                            std::forward<F>(f));
 1981|    910|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1461|    910|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    910|    else {
 1472|    910|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    910|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    910|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 910, False: 0]
  |  |  ------------------
  ------------------
 1474|    910|                   ? result(*std::forward<Exp>(exp))
 1475|    910|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|    910|    }
 1479|    910|}
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|    910|        : base(std::in_place, std::forward<U>(val)),
 1570|    910|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    910|    {
 1572|    910|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  440|    910|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    910|    {
  442|    910|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|    910|    {
 1316|    910|    }
_ZNK3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1739|    910|    {
 1740|    910|        return has_value();
 1741|    910|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.82k|    {
  490|  1.82k|        return m_has_value;
  491|  1.82k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|    910|    {
 1805|    910|        return std::move(value());
 1806|    910|    }
_ZNR3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|    910|    {
 1769|    910|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    910|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    910|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    910|        return this->get_value();
 1771|    910|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|    910|    {
  456|    910|        return m_value;
  457|    910|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1964|    932|    {
 1965|    932|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1966|    932|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|    932|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    932|    else {
 1472|    932|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    932|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    932|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 932]
  |  |  ------------------
  ------------------
 1474|    932|                   ? result(*std::forward<Exp>(exp))
 1475|    932|                   : result(unexpect,
 1476|    932|                            trivial_invoke(std::forward<F>(f),
 1477|    932|                                           std::forward<Exp>(exp).error()));
 1478|    932|    }
 1479|    932|}
_ZN3scn2v413scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3910|    932|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|    932|    static_cast<    \
  |  |  935|    932|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|    932|    {
 3912|    932|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1794|  7.32k|    {
 1795|  7.32k|        return value();
 1796|  7.32k|    }
_ZN3scn2v46detail22parse_presentation_setIcRNS0_4impl22nonascii_specs_handlerEEENSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEERPKS8_SD_OT0_:
 7444|  3.02k|{
 7445|  3.02k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  3.02k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7446|  3.02k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  930|  3.02k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7447|       |
 7448|  3.02k|    auto start = begin;
 7449|  3.02k|    ++begin;
 7450|       |
 7451|  3.02k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  3.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 3.02k]
  |  |  ------------------
  ------------------
 7452|       |        // clang-format off
 7453|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7454|       |        // clang-format on
 7455|      0|        return {};
 7456|      0|    }
 7457|  3.02k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7457:9): [True: 480, False: 2.54k]
  ------------------
 7458|    480|        handler.on_charset_inverted();
 7459|    480|        ++begin;
 7460|    480|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|    480|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 480]
  |  |  ------------------
  ------------------
 7461|       |            // clang-format off
 7462|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7463|       |            // clang-format on
 7464|      0|            return {};
 7465|      0|        }
 7466|    480|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7466:13): [True: 6, False: 474]
  ------------------
 7467|      6|            handler.on_charset_single(char32_t{']'});
 7468|      6|            ++begin;
 7469|      6|        }
 7470|    480|    }
 7471|  2.54k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7471:14): [True: 0, False: 2.54k]
  ------------------
 7472|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7473|      0|    }
 7474|       |
 7475|   414k|    while (begin != end) {
  ------------------
  |  Branch (7475:12): [True: 414k, False: 0]
  ------------------
 7476|   414k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|   414k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 414k]
  |  |  ------------------
  ------------------
 7477|      0|            break;
 7478|      0|        }
 7479|       |
 7480|   414k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7480:13): [True: 3.02k, False: 411k]
  ------------------
 7481|  3.02k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7482|  3.02k|        }
 7483|       |
 7484|   411k|        parse_presentation_set_literal(begin, end, handler);
 7485|   411k|    }
 7486|       |
 7487|      0|    SCN_UNLIKELY_ATTR
 7488|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7489|      0|    return {};
 7490|  3.02k|}
_ZN3scn2v46detail30parse_presentation_set_literalIcRNS0_4impl22nonascii_specs_handlerEEEvRPKT_S8_OT0_:
 7408|   411k|{
 7409|   411k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   411k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   411k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7410|       |
 7411|   411k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7412|   411k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  865|   411k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 411k]
  |  |  ------------------
  ------------------
 7413|      0|        return;
 7414|      0|    }
 7415|       |
 7416|   411k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7416:9): [True: 411k, False: 0]
  |  Branch (7416:25): [True: 2.93k, False: 408k]
  |  Branch (7416:49): [True: 2.93k, False: 0]
  ------------------
 7417|   411k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7417:9): [True: 2.86k, False: 72]
  ------------------
 7418|  2.86k|        ++begin;
 7419|       |
 7420|  2.86k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7421|  2.86k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  865|  2.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.86k]
  |  |  ------------------
  ------------------
 7422|      0|            return;
 7423|      0|        }
 7424|       |
 7425|  2.86k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  865|  2.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.86k]
  |  |  ------------------
  ------------------
 7426|       |            // clang-format off
 7427|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7428|       |            // clang-format on
 7429|      0|            return;
 7430|      0|        }
 7431|       |
 7432|  2.86k|        handler.on_charset_range(cp_first, cp_second + 1);
 7433|  2.86k|        return;
 7434|  2.86k|    }
 7435|       |
 7436|   408k|    handler.on_charset_single(cp_first);
 7437|   408k|}
_ZN3scn2v46detail33parse_presentation_set_code_pointIcRNS0_4impl22nonascii_specs_handlerEEEDiRPKT_S8_OT0_:
 7384|   414k|{
 7385|   414k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   414k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   414k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7386|       |
 7387|   414k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7388|   414k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  865|   829k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 414k]
  |  |  |  Branch (865:45): [True: 0, False: 414k]
  |  |  |  Branch (865:45): [True: 0, False: 414k]
  |  |  ------------------
  ------------------
 7389|      0|        handler.on_error("Invalid encoding in format string");
 7390|      0|        return invalid_code_point;
 7391|      0|    }
 7392|       |
 7393|   414k|    const auto cp =
 7394|   414k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7395|   414k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|   414k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 414k]
  |  |  ------------------
  ------------------
 7396|      0|        handler.on_error("Invalid encoding in format string");
 7397|      0|        return invalid_code_point;
 7398|      0|    }
 7399|       |
 7400|   414k|    begin += len;
 7401|   414k|    return cp;
 7402|   414k|}
_ZNK3scn2v46detail12format_specs14charset_stringIcEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 7003|  3.67k|    {
 7004|  3.67k|        return {reinterpret_cast<const CharT*>(charset_string_data),
 7005|  3.67k|                charset_string_size};
 7006|  3.67k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IRKS7_vEEOT_:
 1569|    882|        : base(std::in_place, std::forward<U>(val)),
 1570|    882|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    882|    {
 1572|    882|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJRKS8_EvEENSt3__110in_place_tEDpOT_:
  440|    882|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    882|    {
  442|    882|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1569|  1.69k|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.69k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.69k|    {
 1572|  1.69k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  440|  1.69k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.69k|    {
  442|  1.69k|    }
_ZN3scn2v46detail34decode_code_point_exhaustive_validIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4293|   113k|{
 4294|   113k|    if constexpr (sizeof(CharT) == 1) {
 4295|   113k|        return decode_utf8_code_point_exhaustive_valid(input);
 4296|       |    }
 4297|       |    else if constexpr (sizeof(CharT) == 2) {
 4298|       |        return decode_utf16_code_point_exhaustive_valid(input);
 4299|       |    }
 4300|       |    else {
 4301|       |        SCN_EXPECT(input.size() == 1);
 4302|       |        return static_cast<char32_t>(input.front());
 4303|       |    }
 4304|   113k|}
_ZZN3scn2v46detail39decode_utf8_code_point_exhaustive_validENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 4171|  17.0k|    const auto is_trailing_code_unit = [](char ch) {
 4172|  17.0k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4173|  17.0k|    };
_ZNK3scn2v46detail9fill_type13get_code_unitIwEET_v:
 6938|    900|    {
 6939|    900|        SCN_EXPECT(m_size <= sizeof(CharT));
  ------------------
  |  |  930|    900|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    900|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6940|    900|        CharT r{};
 6941|    900|        std::memcpy(&r, m_data, m_size);
 6942|    900|        return r;
 6943|    900|    }
_ZN3scn2v46detail39code_point_length_by_starting_code_unitIwEEmT_:
 4067|   230k|{
 4068|       |    if constexpr (sizeof(U) == 1) {
 4069|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 4070|       |    }
 4071|       |    else if constexpr (sizeof(U) == 2) {
 4072|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4073|       |    }
 4074|   230k|    else {
 4075|       |        // utf-32
 4076|   230k|        static_assert(sizeof(U) == 4);
 4077|   230k|        SCN_UNUSED(ch);
  ------------------
  |  |  915|   230k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4078|   230k|        return 1;
 4079|   230k|    }
 4080|   230k|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4273|   199k|{
 4274|       |    if constexpr (sizeof(CharT) == 1) {
 4275|       |        return decode_utf8_code_point_exhaustive(input);
 4276|       |    }
 4277|       |    else if constexpr (sizeof(CharT) == 2) {
 4278|       |        return decode_utf16_code_point_exhaustive(input);
 4279|       |    }
 4280|   199k|    else {
 4281|   199k|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  930|   199k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   199k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4282|   199k|        auto cp = static_cast<char32_t>(input.front());
 4283|   199k|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|   199k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 41.4k, False: 158k]
  |  |  ------------------
  ------------------
 4284|  41.4k|            return invalid_code_point;
 4285|  41.4k|        }
 4286|   158k|        return cp;
 4287|   199k|    }
 4288|   199k|}
_ZN3scn2v46detail31make_string_view_from_iteratorsIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3959|  50.7k|{
 3960|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3961|       |                                          decltype(first), decltype(last)> &&
 3962|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3963|       |        return {first, last};
 3964|       |    }
 3965|  50.7k|    else {
 3966|  50.7k|        return {to_address(first), static_cast<size_t>(std::distance(
 3967|  50.7k|                                       to_address(first), to_address(last)))};
 3968|  50.7k|    }
 3969|  50.7k|}
_ZN3scn2v46detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|   157k|{
  316|   157k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|   157k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|   157k|}
_ZN3scn2v46detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  293|   355k|{
  294|   355k|    return p;
  295|   355k|}
_ZN3scn2v46detail25make_string_view_iteratorIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3990|  6.84k|{
 3991|       |    if constexpr (std::is_constructible_v<
 3992|       |                      typename std::basic_string_view<CharT>::iterator,
 3993|       |                      decltype(it)> &&
 3994|  6.84k|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3995|  6.84k|        SCN_UNUSED(sv);
  ------------------
  |  |  915|  6.84k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3996|  6.84k|        return it;
 3997|       |    }
 3998|       |    else {
 3999|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 4000|       |    }
 4001|  6.84k|}
_ZN3scn2v46detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|   197k|{
  316|   197k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|   197k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|   197k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3495|   107k|    {
 3496|   107k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3497|   107k|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|    126|        : base(unexpect, std::move(e.error())),
 1616|    126|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    126|    {
 1618|    126|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|    126|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    126|          m_has_value(false)
  451|    126|    {
  452|    126|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  16.6k|    {
 1316|  16.6k|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1569|  16.5k|        : base(std::in_place, std::forward<U>(val)),
 1570|  16.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  16.5k|    {
 1572|  16.5k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  16.5k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  16.5k|    {
  442|  16.5k|    }
_ZNK3scn2v48expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1739|  4.67k|    {
 1740|  4.67k|        return has_value();
 1741|  4.67k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  28.6k|    {
  490|  28.6k|        return m_has_value;
  491|  28.6k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|  11.8k|    {
 1769|  11.8k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  11.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  11.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  11.8k|        return this->get_value();
 1771|  11.8k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  11.8k|    {
  456|  11.8k|        return m_value;
  457|  11.8k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEC2IS7_vEEOT_:
 1569|  1.88k|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.88k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.88k|    {
 1572|  1.88k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  440|  1.88k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.88k|    {
  442|  1.88k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  2.05k|    {
 1316|  2.05k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|    174|        : base(unexpect, std::move(e.error())),
 1616|    174|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    174|    {
 1618|    174|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|    174|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    174|          m_has_value(false)
  451|    174|    {
  452|    174|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEcvbEv:
 1739|    842|    {
 1740|    842|        return has_value();
 1741|    842|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE9has_valueEv:
  489|  3.27k|    {
  490|  3.27k|        return m_has_value;
  491|  3.27k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|  1.04k|    {
 1769|  1.04k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.04k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.04k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.04k|        return this->get_value();
 1771|  1.04k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE9get_valueEv:
  455|  1.04k|    {
  456|  1.04k|        return m_value;
  457|  1.04k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.60k|    {
 1316|  1.60k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEC2ISA_vEEOT_:
 1569|  1.60k|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.60k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.60k|    {
 1572|  1.60k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EEC2IJSB_EvEENS3_10in_place_tEDpOT_:
  440|  1.60k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.60k|    {
  442|  1.60k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1978|    392|    {
 1979|    392|        return detail::transform_error_impl(std::move(*this),
 1980|    392|                                            std::forward<F>(f));
 1981|    392|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9eof_errorEEERFNS0_10scan_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1461|    392|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    392|    else {
 1472|    392|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    392|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    392|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 392, False: 0]
  |  |  ------------------
  ------------------
 1474|    392|                   ? result(*std::forward<Exp>(exp))
 1475|    392|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|    392|    }
 1479|    392|}
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|  1.04k|    {
 1805|  1.04k|        return std::move(value());
 1806|  1.04k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IS7_vEEOT_:
 1569|  1.08k|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.08k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.08k|    {
 1572|  1.08k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  440|  1.08k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.08k|    {
  442|  1.08k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  3.43k|    {
 1316|  3.43k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE5errorEv:
 1755|    174|    {
 1756|    174|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    174|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    174|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|    174|        return std::move(this->get_unexpected().error());
 1758|    174|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE14get_unexpectedEv:
  472|    174|    {
  473|    174|        return m_unexpected;
  474|    174|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1625|    608|        : base(unexpect, std::forward<Args>(args)...),
 1626|    608|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|    608|    {
 1628|    608|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|  2.00k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  2.00k|          m_has_value(false)
  451|  2.00k|    {
  452|  2.00k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|    514|    {
 2869|    514|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|    514|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|    514|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESJ_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|    514|    {
 2850|    514|        return decay_copy(t.begin());
 2851|    514|    }
_ZN3scn2v46ranges6detail10decay_copyINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEEu7__decayIT_EOSA_:
 2093|  1.14k|{
 2094|  1.14k|    return SCN_FWD(t);
  ------------------
  |  |  936|  1.14k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  1.14k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_E5beginEv:
 3479|    514|    {
 3480|    514|        return m_iterator;
 3481|    514|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|    514|    {
 2926|    514|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|    514|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|    514|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EESD_SD_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|    514|    {
 2908|    514|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|    514|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|    514|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_E3endEv:
 3483|    514|    {
 3484|    514|        return m_sentinel;
 3485|    514|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_EC2ISA_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SA_EEvE4typeELPv0EEESF_SA_:
 3464|    514|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|    514|    static_cast<    \
  |  |  935|    514|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|    514|    static_cast<    \
  |  |  935|    514|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|    514|    {
 3466|    514|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEcvbEv:
 1739|  1.60k|    {
 1740|  1.60k|        return has_value();
 1741|  1.60k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EE9has_valueEv:
  489|  3.20k|    {
  490|  3.20k|        return m_has_value;
  491|  3.20k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|  1.60k|    {
 1805|  1.60k|        return std::move(value());
 1806|  1.60k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|  1.60k|    {
 1769|  1.60k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.60k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.60k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.60k|        return this->get_value();
 1771|  1.60k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.60k|    {
  456|  1.60k|        return m_value;
  457|  1.60k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  4.92k|    {
 1316|  4.92k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|  4.92k|        : base(std::in_place, std::forward<U>(val)),
 1570|  4.92k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  4.92k|    {
 1572|  4.92k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  440|  4.92k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  4.92k|    {
  442|  4.92k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|  7.30k|    {
 1979|  7.30k|        return detail::transform_error_impl(std::move(*this),
 1980|  7.30k|                                            std::forward<F>(f));
 1981|  7.30k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|  7.30k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  7.30k|    else {
 1472|  7.30k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  7.30k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  7.30k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 7.30k, False: 0]
  |  |  ------------------
  ------------------
 1474|  7.30k|                   ? result(*std::forward<Exp>(exp))
 1475|  7.30k|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|  7.30k|    }
 1479|  7.30k|}
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|  11.8k|    {
 1805|  11.8k|        return std::move(value());
 1806|  11.8k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1755|    126|    {
 1756|    126|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    126|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    126|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|    126|        return std::move(this->get_unexpected().error());
 1758|    126|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|    126|    {
  473|    126|        return m_unexpected;
  474|    126|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1625|    770|        : base(unexpect, std::forward<Args>(args)...),
 1626|    770|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|    770|    {
 1628|    770|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1739|  4.92k|    {
 1740|  4.92k|        return has_value();
 1741|  4.92k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  489|  9.84k|    {
  490|  9.84k|        return m_has_value;
  491|  9.84k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|  4.92k|    {
 1805|  4.92k|        return std::move(value());
 1806|  4.92k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|  4.92k|    {
 1769|  4.92k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  4.92k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.92k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  4.92k|        return this->get_value();
 1771|  4.92k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  455|  4.92k|    {
  456|  4.92k|        return m_value;
  457|  4.92k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|  1.39k|        : base(unexpect, std::move(e.error())),
 1616|  1.39k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  1.39k|    {
 1618|  1.39k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|    296|        : base(unexpect, std::move(e.error())),
 1616|    296|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    296|    {
 1618|    296|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|    470|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    470|          m_has_value(false)
  451|    470|    {
  452|    470|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  3.13k|    {
 1316|  3.13k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2INS8_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S8_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|  2.02k|        : base(unexpect, std::move(e.error())),
 1616|  2.02k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  2.02k|    {
 1618|  2.02k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJNS9_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|  2.02k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  2.02k|          m_has_value(false)
  451|  2.02k|    {
  452|  2.02k|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEcvbEv:
 1739|  2.89k|    {
 1740|  2.89k|        return has_value();
 1741|  2.89k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE9has_valueEv:
  489|  5.57k|    {
  490|  5.57k|        return m_has_value;
  491|  5.57k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5errorEv:
 1745|  1.06k|    {
 1746|  1.06k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  1.06k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.06k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  1.06k|        return this->get_unexpected().error();
 1748|  1.06k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE14get_unexpectedEv:
  472|  1.42k|    {
  473|  1.42k|        return m_unexpected;
  474|  1.42k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEC2ISB_vEEOT_:
 1569|    522|        : base(std::in_place, std::forward<U>(val)),
 1570|    522|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    522|    {
 1572|    522|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  440|    522|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    522|    {
  442|    522|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|    522|    {
 1316|    522|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|    648|    {
 1769|    648|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    648|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    648|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    648|        return this->get_value();
 1771|    648|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE9get_valueEv:
  455|    648|    {
  456|    648|        return m_value;
  457|    648|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEcvbEv:
 1739|    400|    {
 1740|    400|        return has_value();
 1741|    400|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9has_valueEv:
  489|  1.04k|    {
  490|  1.04k|        return m_has_value;
  491|  1.04k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|    400|    {
 1316|    400|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEdeISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSG_v:
 1804|    522|    {
 1805|    522|        return std::move(value());
 1806|    522|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEE5valueISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|    522|    {
 1769|    522|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    522|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    522|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    522|        return this->get_value();
 1771|    522|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9get_valueEv:
  455|    522|    {
  456|    522|        return m_value;
  457|    522|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE3endEv:
 3483|  26.8k|    {
 3484|  26.8k|        return m_sentinel;
 3485|  26.8k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE15transform_errorIRFNS2_11parse_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1978|    822|    {
 1979|    822|        return detail::transform_error_impl(std::move(*this),
 1980|    822|                                            std::forward<F>(f));
 1981|    822|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9eof_errorEEERFNS4_11parse_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1461|    822|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    822|    else {
 1472|    822|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    822|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    822|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 648, False: 174]
  |  |  ------------------
  ------------------
 1474|    822|                   ? result(*std::forward<Exp>(exp))
 1475|    822|                   : result(unexpect,
 1476|    174|                            trivial_invoke(std::forward<F>(f),
 1477|    174|                                           std::forward<Exp>(exp).error()));
 1478|    822|    }
 1479|    822|}
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IS7_vEEOT_:
 1569|    648|        : base(std::in_place, std::forward<U>(val)),
 1570|    648|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    648|    {
 1572|    648|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  440|    648|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    648|    {
  442|    648|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1625|    174|        : base(unexpect, std::forward<Args>(args)...),
 1626|    174|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|    174|    {
 1628|    174|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|    648|    {
 1805|    648|        return std::move(value());
 1806|    648|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE5beginEv:
 3479|  43.4k|    {
 3480|  43.4k|        return m_iterator;
 3481|  43.4k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEEC2IS9_vEEOT_:
 1569|    400|        : base(std::in_place, std::forward<U>(val)),
 1570|    400|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    400|    {
 1572|    400|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  440|    400|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    400|    {
  442|    400|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESA_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1978|    400|    {
 1979|    400|        return detail::transform_error_impl(std::move(*this),
 1980|    400|                                            std::forward<F>(f));
 1981|    400|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS4_27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EEEENS4_9eof_errorEEERFNS0_10scan_errorESC_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSJ_OT0_:
 1461|    400|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    400|    else {
 1472|    400|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    400|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    400|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 400, False: 0]
  |  |  ------------------
  ------------------
 1474|    400|                   ? result(*std::forward<Exp>(exp))
 1475|    400|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|    400|    }
 1479|    400|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EE9has_valueEv:
  489|    800|    {
  490|    800|        return m_has_value;
  491|    800|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEEdeIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|    400|    {
 1805|    400|        return std::move(value());
 1806|    400|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEE5valueIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|    400|    {
 1769|    400|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    400|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    400|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    400|        return this->get_value();
 1771|    400|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EE9get_valueEv:
  455|    400|    {
  456|    400|        return m_value;
  457|    400|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEC2IS9_vEEOT_:
 1569|    400|        : base(std::in_place, std::forward<U>(val)),
 1570|    400|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    400|    {
 1572|    400|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  440|    400|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    400|    {
  442|    400|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|    400|    {
 1316|    400|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEcvbEv:
 1739|    400|    {
 1740|    400|        return has_value();
 1741|    400|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EE9has_valueEv:
  489|    800|    {
  490|    800|        return m_has_value;
  491|    800|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEdeIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|    400|    {
 1805|    400|        return std::move(value());
 1806|    400|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEE5valueIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|    400|    {
 1769|    400|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    400|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    400|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    400|        return this->get_value();
 1771|    400|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EE9get_valueEv:
  455|    400|    {
  456|    400|        return m_value;
  457|    400|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1978|    364|    {
 1979|    364|        return detail::transform_error_impl(std::move(*this),
 1980|    364|                                            std::forward<F>(f));
 1981|    364|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlSA_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSJ_OT0_:
 1461|    364|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    364|    else {
 1472|    364|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    364|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    364|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 364]
  |  |  ------------------
  ------------------
 1474|    364|                   ? result(*std::forward<Exp>(exp))
 1475|    364|                   : result(unexpect,
 1476|    364|                            trivial_invoke(std::forward<F>(f),
 1477|    364|                                           std::forward<Exp>(exp).error()));
 1478|    364|    }
 1479|    364|}
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5errorEv:
 1755|    364|    {
 1756|    364|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    364|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    364|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|    364|        return std::move(this->get_unexpected().error());
 1758|    364|    }
_ZN3scn2v413scan_expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EEEC2EONS0_8expectedIS7_NS0_10scan_errorEEE:
 3910|    608|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|    608|    static_cast<    \
  |  |  935|    608|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|    608|    {
 3912|    608|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEC2ISA_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SA_EEvE4typeELPv0EEESK_SF_:
 3464|  14.7k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  14.7k|    static_cast<    \
  |  |  935|  14.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  14.7k|    static_cast<    \
  |  |  935|  14.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  14.7k|    {
 3466|  14.7k|    }
_ZN3scn2v48expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEEC2ISK_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISK_OT_EEvE4typeELPv0ETnPNSN_IXsr3stdE16is_convertible_vISP_SK_EEvE4typeELST_0EEEONS0_10unexpectedISO_EE:
 1615|     36|        : base(unexpect, std::move(e.error())),
 1616|     36|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|     36|    {
 1618|     36|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EEC2IJSL_EvEENS0_10unexpect_tEDpOT_:
  636|     36|        : m_has_value(false)
  637|     36|    {
  638|     36|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|     36|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESL_EEEvDpOT_:
  700|     36|    {
  701|     36|        scn::detail::construct_at(unexpected_ptr(),
  702|     36|                                  std::forward<Args>(args)...);
  703|     36|        m_has_value = false;
  704|     36|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|    108|    {
  730|    108|        return reinterpret_cast<unexpected<E>*>(
  731|    108|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|    108|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|    108|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|     36|    {
 1316|     36|    }
_ZNK3scn2v48expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1739|     36|    {
 1740|     36|        return has_value();
 1741|     36|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|    108|    {
  687|    108|        return m_has_value;
  688|    108|    }
_ZNR3scn2v48expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1745|     36|    {
 1746|     36|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|     36|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     36|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|     36|        return this->get_unexpected().error();
 1748|     36|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  669|     36|    {
  670|     36|        return *unexpected_ptr();
  671|     36|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|     36|    {
  643|     36|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 0, False: 36]
  ------------------
  644|      0|            destroy_value();
  645|      0|        }
  646|     36|        else {
  647|     36|            destroy_unexpected();
  648|     36|        }
  649|     36|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|     36|    {
  712|     36|        scn::detail::destroy_at(unexpected_ptr());
  713|     36|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEcvbEv:
 1739|  3.55k|    {
 1740|  3.55k|        return has_value();
 1741|  3.55k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE9has_valueEv:
  489|  6.87k|    {
  490|  6.87k|        return m_has_value;
  491|  6.87k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEE5errorEv:
 1745|  1.88k|    {
 1746|  1.88k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  1.88k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.88k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  1.88k|        return this->get_unexpected().error();
 1748|  1.88k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  1.88k|    {
  473|  1.88k|        return m_unexpected;
  474|  1.88k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|  1.08k|    {
 1805|  1.08k|        return std::move(value());
 1806|  1.08k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|  1.43k|    {
 1769|  1.43k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.43k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.43k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.43k|        return this->get_value();
 1771|  1.43k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.43k|    {
  456|  1.43k|        return m_value;
  457|  1.43k|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|    890|        : base(unexpect, std::move(e.error())),
 1616|    890|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    890|    {
 1618|    890|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  1.01k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.01k|          m_has_value(false)
  451|  1.01k|    {
  452|  1.01k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  14.8k|    {
 1316|  14.8k|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  9.28k|        : base(unexpect, std::move(e.error())),
 1616|  9.28k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  9.28k|    {
 1618|  9.28k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|  9.28k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  9.28k|          m_has_value(false)
  451|  9.28k|    {
  452|  9.28k|    }
_ZNK3scn2v48expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1739|  15.6k|    {
 1740|  15.6k|        return has_value();
 1741|  15.6k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  489|  25.7k|    {
  490|  25.7k|        return m_has_value;
  491|  25.7k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1745|  4.74k|    {
 1746|  4.74k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  4.74k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.74k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  4.74k|        return this->get_unexpected().error();
 1748|  4.74k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  472|  4.74k|    {
  473|  4.74k|        return m_unexpected;
  474|  4.74k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1569|  3.08k|        : base(std::in_place, std::forward<U>(val)),
 1570|  3.08k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  3.08k|    {
 1572|  3.08k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  440|  3.08k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  3.08k|    {
  442|  3.08k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  3.08k|    {
 1316|  3.08k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|  4.58k|    {
 1769|  4.58k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  4.58k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.58k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  4.58k|        return this->get_value();
 1771|  4.58k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  455|  4.58k|    {
  456|  4.58k|        return m_value;
  457|  4.58k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1739|  2.32k|    {
 1740|  2.32k|        return has_value();
 1741|  2.32k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  489|  6.17k|    {
  490|  6.17k|        return m_has_value;
  491|  6.17k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  2.32k|    {
 1316|  2.32k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|  3.08k|    {
 1805|  3.08k|        return std::move(value());
 1806|  3.08k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|  3.08k|    {
 1769|  3.08k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  3.08k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.08k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  3.08k|        return this->get_value();
 1771|  3.08k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  455|  3.08k|    {
  456|  3.08k|        return m_value;
  457|  3.08k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|  4.70k|    {
 1979|  4.70k|        return detail::transform_error_impl(std::move(*this),
 1980|  4.70k|                                            std::forward<F>(f));
 1981|  4.70k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|  4.70k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  4.70k|    else {
 1472|  4.70k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  4.70k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  4.70k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 4.58k, False: 126]
  |  |  ------------------
  ------------------
 1474|  4.70k|                   ? result(*std::forward<Exp>(exp))
 1475|  4.70k|                   : result(unexpect,
 1476|    126|                            trivial_invoke(std::forward<F>(f),
 1477|    126|                                           std::forward<Exp>(exp).error()));
 1478|  4.70k|    }
 1479|  4.70k|}
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1569|  4.58k|        : base(std::in_place, std::forward<U>(val)),
 1570|  4.58k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  4.58k|    {
 1572|  4.58k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  4.58k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  4.58k|    {
  442|  4.58k|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1625|    126|        : base(unexpect, std::forward<Args>(args)...),
 1626|    126|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|    126|    {
 1628|    126|    }
_ZNO3scn2v48expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|  4.58k|    {
 1805|  4.58k|        return std::move(value());
 1806|  4.58k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEC2IS6_vEEOT_:
 1569|  2.32k|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.32k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.32k|    {
 1572|  2.32k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  440|  2.32k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.32k|    {
  442|  2.32k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|  2.32k|    {
 1979|  2.32k|        return detail::transform_error_impl(std::move(*this),
 1980|  2.32k|                                            std::forward<F>(f));
 1981|  2.32k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS4_9eof_errorEEERFNS0_10scan_errorES9_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSG_OT0_:
 1461|  2.32k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  2.32k|    else {
 1472|  2.32k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  2.32k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  2.32k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 2.32k, False: 0]
  |  |  ------------------
  ------------------
 1474|  2.32k|                   ? result(*std::forward<Exp>(exp))
 1475|  2.32k|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|  2.32k|    }
 1479|  2.32k|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9has_valueEv:
  489|  4.64k|    {
  490|  4.64k|        return m_has_value;
  491|  4.64k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|  2.32k|    {
 1805|  2.32k|        return std::move(value());
 1806|  2.32k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|  2.32k|    {
 1769|  2.32k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.32k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.32k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.32k|        return this->get_value();
 1771|  2.32k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9get_valueEv:
  455|  2.32k|    {
  456|  2.32k|        return m_value;
  457|  2.32k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|  2.32k|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.32k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.32k|    {
 1572|  2.32k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  440|  2.32k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.32k|    {
  442|  2.32k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  2.32k|    {
 1316|  2.32k|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEcvbEv:
 1739|  2.32k|    {
 1740|  2.32k|        return has_value();
 1741|  2.32k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9has_valueEv:
  489|  4.64k|    {
  490|  4.64k|        return m_has_value;
  491|  4.64k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|  2.32k|    {
 1805|  2.32k|        return std::move(value());
 1806|  2.32k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|  2.32k|    {
 1769|  2.32k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.32k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.32k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.32k|        return this->get_value();
 1771|  2.32k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9get_valueEv:
  455|  2.32k|    {
  456|  2.32k|        return m_value;
  457|  2.32k|    }
_ZN3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISG_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1615|     28|        : base(unexpect, std::move(e.error())),
 1616|     28|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|     28|    {
 1618|     28|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  636|     28|        : m_has_value(false)
  637|     28|    {
  638|     28|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|     28|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESH_EEEvDpOT_:
  700|     28|    {
  701|     28|        scn::detail::construct_at(unexpected_ptr(),
  702|     28|                                  std::forward<Args>(args)...);
  703|     28|        m_has_value = false;
  704|     28|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|     84|    {
  730|     84|        return reinterpret_cast<unexpected<E>*>(
  731|     84|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|     84|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|     84|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|     28|    {
 1316|     28|    }
_ZNK3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1739|     28|    {
 1740|     28|        return has_value();
 1741|     28|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|     84|    {
  687|     84|        return m_has_value;
  688|     84|    }
_ZNR3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1745|     28|    {
 1746|     28|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|     28|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     28|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|     28|        return this->get_unexpected().error();
 1748|     28|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  669|     28|    {
  670|     28|        return *unexpected_ptr();
  671|     28|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|     28|    {
  643|     28|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 0, False: 28]
  ------------------
  644|      0|            destroy_value();
  645|      0|        }
  646|     28|        else {
  647|     28|            destroy_unexpected();
  648|     28|        }
  649|     28|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|     28|    {
  712|     28|        scn::detail::destroy_at(unexpected_ptr());
  713|     28|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   195k|    {
 3000|   195k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   195k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   195k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   195k|    {
 2981|   195k|        return t.data();
 2982|   195k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3374|   195k|    {
 3375|   195k|        return detail::to_address(ranges::begin(derived()));
 3376|   195k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   195k|    {
 2869|   195k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   195k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   195k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   195k|    {
 2850|   195k|        return decay_copy(t.begin());
 2851|   195k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3333|   195k|    {
 3334|   195k|        return static_cast<D&>(*this);
 3335|   195k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEE15transform_errorIRFNS0_10scan_errorESC_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSI_:
 1978|    122|    {
 1979|    122|        return detail::transform_error_impl(std::move(*this),
 1980|    122|                                            std::forward<F>(f));
 1981|    122|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_9sign_typeEEENS6_9eof_errorEEERFNS0_10scan_errorESE_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESG_EEDaOSK_OT0_:
 1461|    122|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    122|    else {
 1472|    122|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    122|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    122|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 122, False: 0]
  |  |  ------------------
  ------------------
 1474|    122|                   ? result(*std::forward<Exp>(exp))
 1475|    122|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|    122|    }
 1479|    122|}
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1569|    122|        : base(std::in_place, std::forward<U>(val)),
 1570|    122|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    122|    {
 1572|    122|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  440|    122|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    122|    {
  442|    122|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|    122|    {
 1316|    122|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEcvbEv:
 1739|    122|    {
 1740|    122|        return has_value();
 1741|    122|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|    244|    {
  490|    244|        return m_has_value;
  491|    244|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEdeISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSG_v:
 1804|    122|    {
 1805|    122|        return std::move(value());
 1806|    122|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEE5valueISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|    122|    {
 1769|    122|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    122|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    122|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    122|        return this->get_value();
 1771|    122|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|    122|    {
  456|    122|        return m_value;
  457|    122|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1964|    244|    {
 1965|    244|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1966|    244|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlSA_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSK_OT0_:
 1461|    244|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    244|    else {
 1472|    244|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    244|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    244|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 244]
  |  |  ------------------
  ------------------
 1474|    244|                   ? result(*std::forward<Exp>(exp))
 1475|    244|                   : result(unexpect,
 1476|    244|                            trivial_invoke(std::forward<F>(f),
 1477|    244|                                           std::forward<Exp>(exp).error()));
 1478|    244|    }
 1479|    244|}
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1794|    354|    {
 1795|    354|        return value();
 1796|    354|    }
_ZZN3scn2v44impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E0_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3935|      6|    auto&& SCN_TRY_TMP = (x);                          \
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|    116|    {
 2869|    116|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|    116|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|    116|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESO_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|    116|    {
 2850|    116|        return decay_copy(t.begin());
 2851|    116|    }
_ZZN3scn2v44impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3935|    108|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1978|    764|    {
 1979|    764|        return detail::transform_error_impl(std::move(*this),
 1980|    764|                                            std::forward<F>(f));
 1981|    764|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1461|    764|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    764|    else {
 1472|    764|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    764|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    764|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 764, False: 0]
  |  |  ------------------
  ------------------
 1474|    764|                   ? result(*std::forward<Exp>(exp))
 1475|    764|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|    764|    }
 1479|    764|}
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|    764|        : base(std::in_place, std::forward<U>(val)),
 1570|    764|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    764|    {
 1572|    764|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  440|    764|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    764|    {
  442|    764|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|    764|    {
 1316|    764|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1739|    764|    {
 1740|    764|        return has_value();
 1741|    764|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.52k|    {
  490|  1.52k|        return m_has_value;
  491|  1.52k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|    764|    {
 1805|    764|        return std::move(value());
 1806|    764|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|    764|    {
 1769|    764|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    764|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    764|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    764|        return this->get_value();
 1771|    764|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|    764|    {
  456|    764|        return m_value;
  457|    764|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1964|    770|    {
 1965|    770|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1966|    770|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSH_OT0_:
 1461|    770|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    770|    else {
 1472|    770|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    770|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    770|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 770]
  |  |  ------------------
  ------------------
 1474|    770|                   ? result(*std::forward<Exp>(exp))
 1475|    770|                   : result(unexpect,
 1476|    770|                            trivial_invoke(std::forward<F>(f),
 1477|    770|                                           std::forward<Exp>(exp).error()));
 1478|    770|    }
 1479|    770|}
_ZN3scn2v413scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3910|    770|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|    770|    static_cast<    \
  |  |  935|    770|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|    770|    {
 3912|    770|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1794|  3.42k|    {
 1795|  3.42k|        return value();
 1796|  3.42k|    }
_ZN3scn2v46detail22parse_presentation_setIwRNS0_4impl22nonascii_specs_handlerEEENSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEERPKS8_SD_OT0_:
 7444|    606|{
 7445|    606|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|    606|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    606|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7446|    606|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  930|    606|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    606|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7447|       |
 7448|    606|    auto start = begin;
 7449|    606|    ++begin;
 7450|       |
 7451|    606|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|    606|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 606]
  |  |  ------------------
  ------------------
 7452|       |        // clang-format off
 7453|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7454|       |        // clang-format on
 7455|      0|        return {};
 7456|      0|    }
 7457|    606|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7457:9): [True: 252, False: 354]
  ------------------
 7458|    252|        handler.on_charset_inverted();
 7459|    252|        ++begin;
 7460|    252|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|    252|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 252]
  |  |  ------------------
  ------------------
 7461|       |            // clang-format off
 7462|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7463|       |            // clang-format on
 7464|      0|            return {};
 7465|      0|        }
 7466|    252|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7466:13): [True: 6, False: 246]
  ------------------
 7467|      6|            handler.on_charset_single(char32_t{']'});
 7468|      6|            ++begin;
 7469|      6|        }
 7470|    252|    }
 7471|    354|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7471:14): [True: 0, False: 354]
  ------------------
 7472|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7473|      0|    }
 7474|       |
 7475|  9.84k|    while (begin != end) {
  ------------------
  |  Branch (7475:12): [True: 9.84k, False: 0]
  ------------------
 7476|  9.84k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|  9.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 9.84k]
  |  |  ------------------
  ------------------
 7477|      0|            break;
 7478|      0|        }
 7479|       |
 7480|  9.84k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7480:13): [True: 606, False: 9.24k]
  ------------------
 7481|    606|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7482|    606|        }
 7483|       |
 7484|  9.24k|        parse_presentation_set_literal(begin, end, handler);
 7485|  9.24k|    }
 7486|       |
 7487|      0|    SCN_UNLIKELY_ATTR
 7488|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7489|      0|    return {};
 7490|    606|}
_ZN3scn2v46detail30parse_presentation_set_literalIwRNS0_4impl22nonascii_specs_handlerEEEvRPKT_S8_OT0_:
 7408|  9.24k|{
 7409|  9.24k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  9.24k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.24k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7410|       |
 7411|  9.24k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7412|  9.24k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  865|  9.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 9.24k]
  |  |  ------------------
  ------------------
 7413|      0|        return;
 7414|      0|    }
 7415|       |
 7416|  9.24k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7416:9): [True: 9.24k, False: 0]
  |  Branch (7416:25): [True: 258, False: 8.98k]
  |  Branch (7416:49): [True: 258, False: 0]
  ------------------
 7417|  9.24k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7417:9): [True: 252, False: 6]
  ------------------
 7418|    252|        ++begin;
 7419|       |
 7420|    252|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7421|    252|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  865|    252|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 252]
  |  |  ------------------
  ------------------
 7422|      0|            return;
 7423|      0|        }
 7424|       |
 7425|    252|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  865|    252|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 252]
  |  |  ------------------
  ------------------
 7426|       |            // clang-format off
 7427|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7428|       |            // clang-format on
 7429|      0|            return;
 7430|      0|        }
 7431|       |
 7432|    252|        handler.on_charset_range(cp_first, cp_second + 1);
 7433|    252|        return;
 7434|    252|    }
 7435|       |
 7436|  8.98k|    handler.on_charset_single(cp_first);
 7437|  8.98k|}
_ZN3scn2v46detail33parse_presentation_set_code_pointIwRNS0_4impl22nonascii_specs_handlerEEEDiRPKT_S8_OT0_:
 7384|  9.49k|{
 7385|  9.49k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  9.49k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.49k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7386|       |
 7387|  9.49k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7388|  9.49k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  865|  18.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 9.49k]
  |  |  |  Branch (865:45): [True: 0, False: 9.49k]
  |  |  |  Branch (865:45): [True: 0, False: 9.49k]
  |  |  ------------------
  ------------------
 7389|      0|        handler.on_error("Invalid encoding in format string");
 7390|      0|        return invalid_code_point;
 7391|      0|    }
 7392|       |
 7393|  9.49k|    const auto cp =
 7394|  9.49k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7395|  9.49k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|  9.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 9.49k]
  |  |  ------------------
  ------------------
 7396|      0|        handler.on_error("Invalid encoding in format string");
 7397|      0|        return invalid_code_point;
 7398|      0|    }
 7399|       |
 7400|  9.49k|    begin += len;
 7401|  9.49k|    return cp;
 7402|  9.49k|}
_ZNK3scn2v46detail12format_specs14charset_stringIwEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 7003|    606|    {
 7004|    606|        return {reinterpret_cast<const CharT*>(charset_string_data),
 7005|    606|                charset_string_size};
 7006|    606|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IRKS7_vEEOT_:
 1569|    354|        : base(std::in_place, std::forward<U>(val)),
 1570|    354|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    354|    {
 1572|    354|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJRKS8_EvEENSt3__110in_place_tEDpOT_:
  440|    354|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    354|    {
  442|    354|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1569|    378|        : base(std::in_place, std::forward<U>(val)),
 1570|    378|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    378|    {
 1572|    378|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  440|    378|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    378|    {
  442|    378|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4sizeEv:
 6176|  46.6k|    {
 6177|  46.6k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|  46.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 46.6k]
  |  |  ------------------
  ------------------
 6178|      0|            return max_size();
 6179|      0|        }
 6180|       |
 6181|  46.6k|        return static_cast<std::size_t>(m_desc &
 6182|  46.6k|                                        ((1 << detail::packed_arg_bits) - 1));
 6183|  46.6k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE9is_packedEv:
 6202|  77.6k|    {
 6203|  77.6k|        return (m_desc & detail::is_unpacked_bit) == 0;
 6204|  77.6k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE3getEm:
 6144|  30.9k|    {
 6145|  30.9k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|  30.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 30.9k]
  |  |  ------------------
  ------------------
 6146|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6147|      0|                return m_args[id];
 6148|      0|            }
 6149|      0|            return {};
 6150|      0|        }
 6151|       |
 6152|  30.9k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  865|  30.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 68, False: 30.9k]
  |  |  ------------------
  ------------------
 6153|     68|            return {};
 6154|     68|        }
 6155|       |
 6156|  30.9k|        const auto t = type(id);
 6157|  30.9k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  865|  30.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.29k, False: 29.6k]
  |  |  ------------------
  ------------------
 6158|  1.29k|            return {};
 6159|  1.29k|        }
 6160|       |
 6161|  29.6k|        basic_scan_arg<Context> arg;
 6162|  29.6k|        arg.m_type = t;
 6163|  29.6k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6163:13): [True: 29.6k, False: 0]
  ------------------
 6164|  29.6k|            arg.m_value.ref_value = m_builtin_values[id];
 6165|  29.6k|        }
 6166|      0|        else {
 6167|      0|            arg.m_value = m_values[id];
 6168|      0|        }
 6169|  29.6k|        return arg;
 6170|  30.9k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 5954|  30.9k|    constexpr basic_scan_arg() = default;
_ZN3scn2v46detail9arg_valueC2Ev:
 5559|  45.2k|    arg_value() = default;
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4typeEm:
 6211|  30.9k|    {
 6212|       |        // First (0th) index is size, types start after that
 6213|  30.9k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6214|  30.9k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6215|  30.9k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6216|  30.9k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE15is_only_builtinEv:
 6206|  29.6k|    {
 6207|  29.6k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6208|  29.6k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEcvbEv:
 5960|  58.4k|    {
 5961|  58.4k|        return m_type != detail::arg_type::none_type;
 5962|  58.4k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9299|  5.68k|{
 9300|  5.68k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  5.68k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|  5.68k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|  5.68k|{
 9201|  5.68k|#define SCN_VISIT(Type)                                                \
 9202|  5.68k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|  5.68k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|  5.68k|    }                                                                  \
 9205|  5.68k|    else {                                                             \
 9206|  5.68k|        return vis(monostate_val);                                     \
 9207|  5.68k|    }
 9208|       |
 9209|  5.68k|    monostate monostate_val{};
 9210|       |
 9211|  5.68k|    switch (get_arg_type(arg)) {
 9212|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 0, False: 5.68k]
  ------------------
 9213|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9214|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 5.68k]
  ------------------
 9215|      0|            SCN_VISIT(short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9216|    632|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 632, False: 5.05k]
  ------------------
 9217|    632|            SCN_VISIT(int);
  ------------------
  |  | 9202|    632|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|    632|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|    632|    }                                                                  \
  |  | 9205|    632|    else {                                                             \
  |  | 9206|    632|        return vis(monostate_val);                                     \
  |  | 9207|    632|    }
  ------------------
 9218|    632|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 5.68k]
  ------------------
 9219|    632|            SCN_VISIT(long);
  ------------------
  |  | 9202|    632|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|    632|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|    632|    }                                                                  \
  |  | 9205|    632|    else {                                                             \
  |  | 9206|    632|        return vis(monostate_val);                                     \
  |  | 9207|    632|    }
  ------------------
 9220|    632|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 0, False: 5.68k]
  ------------------
 9221|    632|            SCN_VISIT(long long);
  ------------------
  |  | 9202|    632|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|    632|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|    632|    }                                                                  \
  |  | 9205|    632|    else {                                                             \
  |  | 9206|    632|        return vis(monostate_val);                                     \
  |  | 9207|    632|    }
  ------------------
 9222|    632|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 0, False: 5.68k]
  ------------------
 9223|    632|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|    632|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|    632|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|    632|    }                                                                  \
  |  | 9205|    632|    else {                                                             \
  |  | 9206|    632|        return vis(monostate_val);                                     \
  |  | 9207|    632|    }
  ------------------
 9224|    632|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 5.68k]
  ------------------
 9225|    632|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|    632|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|    632|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|    632|    }                                                                  \
  |  | 9205|    632|    else {                                                             \
  |  | 9206|    632|        return vis(monostate_val);                                     \
  |  | 9207|    632|    }
  ------------------
 9226|  1.26k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 632, False: 5.05k]
  ------------------
 9227|  1.26k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|  1.26k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  1.26k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  1.26k|    }                                                                  \
  |  | 9205|  1.26k|    else {                                                             \
  |  | 9206|  1.26k|        return vis(monostate_val);                                     \
  |  | 9207|  1.26k|    }
  ------------------
 9228|  1.26k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 5.68k]
  ------------------
 9229|  1.26k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|  1.26k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  1.26k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  1.26k|    }                                                                  \
  |  | 9205|  1.26k|    else {                                                             \
  |  | 9206|  1.26k|        return vis(monostate_val);                                     \
  |  | 9207|  1.26k|    }
  ------------------
 9230|  1.26k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 0, False: 5.68k]
  ------------------
 9231|  1.26k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|  1.26k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  1.26k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  1.26k|    }                                                                  \
  |  | 9205|  1.26k|    else {                                                             \
  |  | 9206|  1.26k|        return vis(monostate_val);                                     \
  |  | 9207|  1.26k|    }
  ------------------
 9232|  1.89k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 632, False: 5.05k]
  ------------------
 9233|  1.89k|            SCN_VISIT(void*);
  ------------------
  |  | 9202|  1.89k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  1.89k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  1.89k|    }                                                                  \
  |  | 9205|  1.89k|    else {                                                             \
  |  | 9206|  1.89k|        return vis(monostate_val);                                     \
  |  | 9207|  1.89k|    }
  ------------------
 9234|  2.52k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 632, False: 5.05k]
  ------------------
 9235|  2.52k|            SCN_VISIT(bool);
  ------------------
  |  | 9202|  2.52k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  2.52k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  2.52k|    }                                                                  \
  |  | 9205|  2.52k|    else {                                                             \
  |  | 9206|  2.52k|        return vis(monostate_val);                                     \
  |  | 9207|  2.52k|    }
  ------------------
 9236|  3.16k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 632, False: 5.05k]
  ------------------
 9237|  3.16k|            SCN_VISIT(char);
  ------------------
  |  | 9202|  3.16k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  3.16k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  3.16k|    }                                                                  \
  |  | 9205|  3.16k|    else {                                                             \
  |  | 9206|  3.16k|        return vis(monostate_val);                                     \
  |  | 9207|  3.16k|    }
  ------------------
 9238|  3.16k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 5.68k]
  ------------------
 9239|  3.16k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|  3.16k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  3.16k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  3.16k|    }                                                                  \
  |  | 9205|  3.16k|    else {                                                             \
  |  | 9206|  3.16k|        return vis(monostate_val);                                     \
  |  | 9207|  3.16k|    }
  ------------------
 9240|  3.16k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 5.68k]
  ------------------
 9241|  3.16k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|  3.16k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  3.16k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  3.16k|    }                                                                  \
  |  | 9205|  3.16k|    else {                                                             \
  |  | 9206|  3.16k|        return vis(monostate_val);                                     \
  |  | 9207|  3.16k|    }
  ------------------
 9242|  3.16k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 5.68k]
  ------------------
 9243|  3.16k|            SCN_VISIT(float);
  ------------------
  |  | 9202|  3.16k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  3.16k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  3.16k|    }                                                                  \
  |  | 9205|  3.16k|    else {                                                             \
  |  | 9206|  3.16k|        return vis(monostate_val);                                     \
  |  | 9207|  3.16k|    }
  ------------------
 9244|  3.79k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 632, False: 5.05k]
  ------------------
 9245|  3.79k|            SCN_VISIT(double);
  ------------------
  |  | 9202|  3.79k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  3.79k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  3.79k|    }                                                                  \
  |  | 9205|  3.79k|    else {                                                             \
  |  | 9206|  3.79k|        return vis(monostate_val);                                     \
  |  | 9207|  3.79k|    }
  ------------------
 9246|  3.79k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 5.68k]
  ------------------
 9247|  3.79k|            SCN_VISIT(long double);
  ------------------
  |  | 9202|  3.79k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  3.79k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  3.79k|    }                                                                  \
  |  | 9205|  3.79k|    else {                                                             \
  |  | 9206|  3.79k|        return vis(monostate_val);                                     \
  |  | 9207|  3.79k|    }
  ------------------
 9248|  4.42k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 632, False: 5.05k]
  ------------------
 9249|  4.42k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|  4.42k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  4.42k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  4.42k|    }                                                                  \
  |  | 9205|  4.42k|    else {                                                             \
  |  | 9206|  4.42k|        return vis(monostate_val);                                     \
  |  | 9207|  4.42k|    }
  ------------------
 9250|  5.05k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 632, False: 5.05k]
  ------------------
 9251|  5.05k|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|  5.05k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  5.05k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  5.05k|    }                                                                  \
  |  | 9205|  5.05k|    else {                                                             \
  |  | 9206|  5.05k|        return vis(monostate_val);                                     \
  |  | 9207|  5.05k|    }
  ------------------
 9252|  5.05k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 5.68k]
  ------------------
 9253|  5.05k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|  5.05k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  5.05k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  5.05k|    }                                                                  \
  |  | 9205|  5.05k|    else {                                                             \
  |  | 9206|  5.05k|        return vis(monostate_val);                                     \
  |  | 9207|  5.05k|    }
  ------------------
 9254|  5.68k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 632, False: 5.05k]
  ------------------
 9255|  5.68k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|  5.68k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  5.68k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  5.68k|    }                                                                  \
  |  | 9205|  5.68k|    else {                                                             \
  |  | 9206|  5.68k|        return vis(monostate_val);                                     \
  |  | 9207|  5.68k|    }
  ------------------
 9256|  5.68k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 5.68k]
  ------------------
 9257|  5.68k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|  5.68k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  5.68k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  5.68k|    }                                                                  \
  |  | 9205|  5.68k|    else {                                                             \
  |  | 9206|  5.68k|        return vis(monostate_val);                                     \
  |  | 9207|  5.68k|    }
  ------------------
 9258|  5.68k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 5.68k]
  ------------------
 9259|  5.68k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|  5.68k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  5.68k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  5.68k|    }                                                                  \
  |  | 9205|  5.68k|    else {                                                             \
  |  | 9206|  5.68k|        return vis(monostate_val);                                     \
  |  | 9207|  5.68k|    }
  ------------------
 9260|       |
 9261|  5.68k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 5.68k]
  ------------------
 9262|  5.68k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|  5.68k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|  5.68k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 5.68k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 5.68k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|  5.68k|            SCN_CLANG_POP
 9279|  5.68k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6005|  77.7k|{
 6006|  77.7k|    return arg.m_type;
 6007|  77.7k|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6017|  27.4k|{
 6018|  27.4k|    return arg.m_value;
 6019|  27.4k|}
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|  2.02k|    {
 1979|  2.02k|        return detail::transform_error_impl(std::move(*this),
 1980|  2.02k|                                            std::forward<F>(f));
 1981|  2.02k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|  2.02k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  2.02k|    else {
 1472|  2.02k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  2.02k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  2.02k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.92k, False: 102]
  |  |  ------------------
  ------------------
 1474|  2.02k|                   ? result(*std::forward<Exp>(exp))
 1475|  2.02k|                   : result(unexpect,
 1476|    102|                            trivial_invoke(std::forward<F>(f),
 1477|    102|                                           std::forward<Exp>(exp).error()));
 1478|  2.02k|    }
 1479|  2.02k|}
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1625|    102|        : base(unexpect, std::forward<Args>(args)...),
 1626|    102|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|    102|    {
 1628|    102|    }
_ZNO3scn2v48expectedIPKcNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|  1.92k|    {
 1805|  1.92k|        return std::move(value());
 1806|  1.92k|    }
_ZN3scn2v424basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 6256|  46.6k|        : m_format{format}, m_next_arg_id{next_arg_id}
 6257|  46.6k|    {
 6258|  46.6k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|  46.6k|    {
 3075|  46.6k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  46.6k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3040|  46.6k|    {
 3041|  46.6k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  46.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  46.6k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7792|  46.6k|{
 7793|  46.6k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7794|  46.6k|    handler.check_args_exhausted();
 7795|  46.6k|    return handler.get_error();
 7796|  46.6k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7757|  46.6k|{
 7758|       |    // TODO: memchr fast path with a larger (> 32) format string
 7759|       |
 7760|  46.6k|    auto begin = format.data();
 7761|  46.6k|    auto it = begin;
 7762|  46.6k|    const auto end = format.data() + format.size();
 7763|       |
 7764|   164k|    while (it != end) {
  ------------------
  |  Branch (7764:12): [True: 158k, False: 5.99k]
  ------------------
 7765|   158k|        const auto ch = *it++;
 7766|   158k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7766:13): [True: 50.9k, False: 108k]
  ------------------
 7767|  50.9k|            handler.on_literal_text(begin, it - 1);
 7768|       |
 7769|  50.9k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7770|  50.9k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7770:17): [True: 39.7k, False: 11.2k]
  ------------------
 7771|  39.7k|                return;
 7772|  39.7k|            }
 7773|  50.9k|        }
 7774|   108k|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7774:18): [True: 2.17k, False: 105k]
  ------------------
 7775|  2.17k|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|  4.06k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 954, False: 1.21k]
  |  |  |  Branch (865:45): [True: 280, False: 1.89k]
  |  |  |  Branch (865:45): [True: 674, False: 1.21k]
  |  |  ------------------
  ------------------
 7776|    954|                handler.on_error("Unmatched '}' in format string");
 7777|    954|                return;
 7778|    954|            }
 7779|       |
 7780|  1.21k|            handler.on_literal_text(begin, it);
 7781|  1.21k|            begin = ++it;
 7782|  1.21k|        }
 7783|   158k|    }
 7784|       |
 7785|  5.99k|    handler.on_literal_text(begin, end);
 7786|  5.99k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 7689|  50.9k|{
 7690|  50.9k|    struct id_adapter {
 7691|  50.9k|        constexpr void operator()()
 7692|  50.9k|        {
 7693|  50.9k|            arg_id = handler.on_arg_id();
 7694|  50.9k|        }
 7695|  50.9k|        constexpr void operator()(std::size_t id)
 7696|  50.9k|        {
 7697|  50.9k|            arg_id = handler.on_arg_id(id);
 7698|  50.9k|        }
 7699|       |
 7700|  50.9k|        constexpr void on_error(const char* msg)
 7701|  50.9k|        {
 7702|  50.9k|            SCN_UNLIKELY_ATTR
 7703|  50.9k|            handler.on_error(msg);
 7704|  50.9k|        }
 7705|       |
 7706|  50.9k|        Handler& handler;
 7707|  50.9k|        std::size_t arg_id;
 7708|  50.9k|    };
 7709|       |
 7710|  50.9k|    ++begin;
 7711|  50.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  50.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 104, False: 50.8k]
  |  |  ------------------
  ------------------
 7712|    104|        handler.on_error("Unexpected end of replacement field");
 7713|    104|        return begin;
 7714|    104|    }
 7715|       |
 7716|  50.8k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7716:9): [True: 5.65k, False: 45.2k]
  ------------------
 7717|  5.65k|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7718|  5.65k|    }
 7719|  45.2k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7719:14): [True: 5.75k, False: 39.4k]
  ------------------
 7720|  5.75k|        handler.on_literal_text(begin, begin + 1);
 7721|  5.75k|    }
 7722|  39.4k|    else {
 7723|  39.4k|        auto adapter = id_adapter{handler, 0};
 7724|  39.4k|        begin = parse_arg_id(begin, end, adapter);
 7725|       |
 7726|  39.4k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  39.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 110, False: 39.3k]
  |  |  ------------------
  ------------------
 7727|    110|            handler.on_error("Missing '}' in format string");
 7728|    110|            return begin;
 7729|    110|        }
 7730|       |
 7731|  39.3k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7731:13): [True: 140, False: 39.2k]
  ------------------
 7732|    140|            handler.on_replacement_field(adapter.arg_id, begin);
 7733|    140|        }
 7734|  39.2k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7734:18): [True: 25.2k, False: 13.9k]
  ------------------
 7735|  25.2k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|  25.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 74, False: 25.1k]
  |  |  ------------------
  ------------------
 7736|     74|                handler.on_error("Unexpected end of replacement field");
 7737|     74|                return begin;
 7738|     74|            }
 7739|  25.1k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7740|  25.1k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|  50.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.00k, False: 22.1k]
  |  |  |  Branch (865:45): [True: 0, False: 25.1k]
  |  |  |  Branch (865:45): [True: 3.00k, False: 22.1k]
  |  |  ------------------
  ------------------
 7741|  3.00k|                handler.on_error("Unknown format specifier");
 7742|  3.00k|                return begin;
 7743|  3.00k|            }
 7744|  25.1k|        }
 7745|  13.9k|        else {
 7746|  13.9k|            SCN_UNLIKELY_ATTR
 7747|  13.9k|            handler.on_error("Missing '}' in format string");
 7748|  13.9k|            return begin;
 7749|  13.9k|        }
 7750|  39.3k|    }
 7751|  33.6k|    return begin + 1;
 7752|  50.8k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE3argEm:
 8831|  30.9k|    {
 8832|  30.9k|        return m_args.get(id);
 8833|  30.9k|    }
_ZN3scn2v424basic_scan_parse_contextIcE11next_arg_idEv:
 6285|  30.4k|    {
 6286|  30.4k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  865|  30.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 42, False: 30.4k]
  |  |  ------------------
  ------------------
 6287|     42|            on_error(
 6288|     42|                "Cannot switch from manual to automatic argument indexing");
 6289|     42|            return 0;
 6290|     42|        }
 6291|       |
 6292|  30.4k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6293|  30.4k|        do_check_arg_id(id);
 6294|  30.4k|        return id;
 6295|  30.4k|    }
_ZN3scn2v424basic_scan_parse_contextIcE8on_errorEPKc:
 6315|    112|    {
 6316|    112|        m_error = unexpected(detail::handle_error(
 6317|    112|            scan_error{scan_error::invalid_format_string, msg}));
 6318|    112|        return m_error.error();
 6319|    112|    }
_ZN3scn2v424basic_scan_parse_contextIcE15do_check_arg_idEm:
 6805|  30.9k|{
 6806|  30.9k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6806:9): [Folded - Ignored]
  ------------------
 6807|  30.9k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6807:10): [Folded - Ignored]
  |  Branch (6807:22): [Folded - Ignored]
  ------------------
 6808|       |        // The cast below will cause an error on gcc pre-12
 6809|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6810|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6810:13): [True: 0, False: 0]
  ------------------
 6811|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6812|      0|            SCN_UNLIKELY_ATTR
 6813|      0|            on_error("Argument not found");
 6814|      0|        }
 6815|      0|    }
 6816|  30.9k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7190|  39.4k|{
 7191|  39.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  39.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  39.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7192|  39.4k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7192:9): [True: 39.4k, False: 0]
  |  Branch (7192:26): [True: 14.6k, False: 24.8k]
  ------------------
 7193|  14.6k|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7194|  14.6k|    }
 7195|       |
 7196|  24.8k|    handler();
 7197|  24.8k|    return begin;
 7198|  39.4k|}
impl.cpp:_ZN3scn2v46detail15do_parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7160|  14.6k|{
 7161|  14.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  14.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7162|       |
 7163|  14.6k|    CharT c = *begin;
 7164|  14.6k|    if (c < CharT{'0'} || c > CharT{'9'}) {
  ------------------
  |  Branch (7164:9): [True: 13.7k, False: 868]
  |  Branch (7164:27): [True: 130, False: 738]
  ------------------
 7165|  13.9k|        handler.on_error("Invalid argument ID");
 7166|  13.9k|        return begin;
 7167|  13.9k|    }
 7168|       |
 7169|    738|    int idx = 0;
 7170|    738|    if (c != CharT{'0'}) {
  ------------------
  |  Branch (7170:9): [True: 306, False: 432]
  ------------------
 7171|    306|        idx = parse_simple_int(begin, end);
 7172|    306|    }
 7173|    432|    else {
 7174|    432|        ++begin;
 7175|    432|    }
 7176|       |
 7177|    738|    if (begin == end || (*begin != CharT{'}'} && *begin != CharT{':'})) {
  ------------------
  |  Branch (7177:9): [True: 110, False: 628]
  |  Branch (7177:26): [True: 488, False: 140]
  |  Branch (7177:50): [True: 72, False: 416]
  ------------------
 7178|    182|        handler.on_error("Invalid argument ID");
 7179|    182|        return begin;
 7180|    182|    }
 7181|    556|    handler(idx);
 7182|       |
 7183|    556|    return begin;
 7184|    738|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapter8on_errorEPKc:
 7701|  14.0k|        {
 7702|  14.0k|            SCN_UNLIKELY_ATTR
 7703|  14.0k|            handler.on_error(msg);
 7704|  14.0k|        }
_ZN3scn2v46detail16parse_simple_intIcEEiRPKT_S5_:
 7139|  13.4k|{
 7140|  13.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  13.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  13.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7141|  13.4k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  930|  13.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  13.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7142|       |
 7143|  13.4k|    unsigned long long value = 0;
 7144|  29.7k|    do {
 7145|  29.7k|        value *= 10;
 7146|  29.7k|        value += static_cast<unsigned long long>(*begin - '0');
 7147|  29.7k|        if (value >
  ------------------
  |  Branch (7147:13): [True: 116, False: 29.6k]
  ------------------
 7148|  29.7k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 7149|    116|            return -1;
 7150|    116|        }
 7151|  29.6k|        ++begin;
 7152|  29.6k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (7152:14): [True: 29.3k, False: 294]
  |  Branch (7152:30): [True: 26.7k, False: 2.54k]
  |  Branch (7152:47): [True: 16.2k, False: 10.5k]
  ------------------
 7153|  13.3k|    return static_cast<int>(value);
 7154|  13.4k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEm:
 7696|    556|        {
 7697|    556|            arg_id = handler.on_arg_id(id);
 7698|    556|        }
_ZN3scn2v424basic_scan_parse_contextIcE12check_arg_idEm:
 6298|    556|    {
 6299|    556|        if (SCN_UNLIKELY(m_next_arg_id > 0)) {
  ------------------
  |  |  865|    556|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 70, False: 486]
  |  |  ------------------
  ------------------
 6300|     70|            on_error(
 6301|     70|                "Cannot switch from manual to automatic argument indexing");
 6302|     70|            return;
 6303|     70|        }
 6304|    486|        m_next_arg_id = -1;
 6305|    486|        do_check_arg_id(id);
 6306|    486|    }
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7692|  24.8k|        {
 7693|  24.8k|            arg_id = handler.on_arg_id();
 7694|  24.8k|        }
_ZN3scn2v424basic_scan_parse_contextIcE10advance_toEPKc:
 6280|  21.8k|    {
 6281|  21.8k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6282|  21.8k|    }
_ZNK3scn2v424basic_scan_parse_contextIcE5beginEv:
 6269|  47.0k|    {
 6270|  47.0k|        return m_format.data();
 6271|  47.0k|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7869|  25.1k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|  25.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7870|  25.1k|    {
 7871|  25.1k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|  25.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  25.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7872|  25.1k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7605|  25.1k|{
 7606|  25.1k|    auto do_presentation = [&]() -> const CharT* {
 7607|  25.1k|        if (*begin == CharT{'['}) {
 7608|  25.1k|            auto set = parse_presentation_set(begin, end, handler);
 7609|  25.1k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7610|       |                // clang-format off
 7611|  25.1k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|  25.1k|                return begin;
 7614|  25.1k|            }
 7615|  25.1k|            handler.on_character_set_string(set);
 7616|  25.1k|            return begin;
 7617|  25.1k|        }
 7618|  25.1k|        if (*begin == CharT{'/'}) {
 7619|  25.1k|            return parse_presentation_regex(begin, end, handler);
 7620|  25.1k|        }
 7621|  25.1k|        presentation_type type = parse_presentation_type(*begin++);
 7622|  25.1k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7623|  25.1k|            handler.on_error("Invalid type specifier in format string");
 7624|  25.1k|            return begin;
 7625|  25.1k|        }
 7626|  25.1k|        handler.on_type(type);
 7627|  25.1k|        return begin;
 7628|  25.1k|    };
 7629|       |
 7630|  25.1k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7630:9): [True: 24.0k, False: 1.07k]
  |  Branch (7630:28): [True: 2.31k, False: 21.7k]
  ------------------
 7631|  25.1k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7631:9): [True: 896, False: 1.41k]
  |  Branch (7631:36): [True: 862, False: 34]
  ------------------
 7632|    862|        return do_presentation();
 7633|    862|    }
 7634|       |
 7635|  24.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  24.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 24.2k]
  |  |  ------------------
  ------------------
 7636|      0|        handler.on_error("Unexpected end of format string");
 7637|      0|        return begin;
 7638|      0|    }
 7639|       |
 7640|  24.2k|    begin = parse_align(begin, end, handler);
 7641|  24.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  24.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 126, False: 24.1k]
  |  |  ------------------
  ------------------
 7642|    126|        handler.on_error("Unexpected end of format string");
 7643|    126|        return begin;
 7644|    126|    }
 7645|       |
 7646|  24.1k|    begin = parse_width(begin, end, handler);
 7647|  24.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  24.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 102, False: 24.0k]
  |  |  ------------------
  ------------------
 7648|    102|        handler.on_error("Unexpected end of format string");
 7649|    102|        return begin;
 7650|    102|    }
 7651|       |
 7652|  24.0k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7652:9): [True: 9.15k, False: 14.9k]
  ------------------
 7653|  9.15k|        ++begin;
 7654|  9.15k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  9.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34, False: 9.11k]
  |  |  ------------------
  ------------------
 7655|     34|            handler.on_error("Unexpected end of format string");
 7656|     34|            return begin;
 7657|     34|        }
 7658|  9.11k|        begin = parse_precision(begin, end, handler);
 7659|  9.11k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  9.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 114, False: 9.00k]
  |  |  ------------------
  ------------------
 7660|    114|            handler.on_error("Unexpected end of format string");
 7661|    114|            return begin;
 7662|    114|        }
 7663|  9.11k|    }
 7664|       |
 7665|  23.9k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7665:9): [True: 536, False: 23.3k]
  ------------------
 7666|    536|        handler.on_localized();
 7667|    536|        ++begin;
 7668|    536|    }
 7669|  23.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  23.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 52, False: 23.8k]
  |  |  ------------------
  ------------------
 7670|     52|        handler.on_error("Unexpected end of format string");
 7671|     52|        return begin;
 7672|     52|    }
 7673|       |
 7674|  23.8k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7674:9): [True: 23.8k, False: 0]
  |  Branch (7674:25): [True: 18.5k, False: 5.34k]
  ------------------
 7675|  18.5k|        do_presentation();
 7676|  18.5k|    }
 7677|  23.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  23.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.01k, False: 21.8k]
  |  |  ------------------
  ------------------
 7678|  2.01k|        handler.on_error("Unexpected end of format string");
 7679|  2.01k|        return begin;
 7680|  2.01k|    }
 7681|       |
 7682|  21.8k|    return begin;
 7683|  23.8k|}
_ZN3scn2v46detail15is_ascii_letterIcEEbT_:
 7254|  2.31k|{
 7255|  2.31k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7255:13): [True: 860, False: 1.45k]
  |  Branch (7255:33): [True: 808, False: 52]
  ------------------
 7256|  2.31k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7256:13): [True: 286, False: 1.22k]
  |  Branch (7256:33): [True: 88, False: 198]
  ------------------
 7257|  2.31k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7606|  19.3k|    auto do_presentation = [&]() -> const CharT* {
 7607|  19.3k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7607:13): [True: 11.8k, False: 7.57k]
  ------------------
 7608|  11.8k|            auto set = parse_presentation_set(begin, end, handler);
 7609|  11.8k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|  11.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 864, False: 10.9k]
  |  |  ------------------
  ------------------
 7610|       |                // clang-format off
 7611|    864|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|    864|                return begin;
 7614|    864|            }
 7615|  10.9k|            handler.on_character_set_string(set);
 7616|  10.9k|            return begin;
 7617|  11.8k|        }
 7618|  7.57k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7618:13): [True: 2.46k, False: 5.11k]
  ------------------
 7619|  2.46k|            return parse_presentation_regex(begin, end, handler);
 7620|  2.46k|        }
 7621|  5.11k|        presentation_type type = parse_presentation_type(*begin++);
 7622|  5.11k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|  5.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 512, False: 4.59k]
  |  |  ------------------
  ------------------
 7623|    512|            handler.on_error("Invalid type specifier in format string");
 7624|    512|            return begin;
 7625|    512|        }
 7626|  4.59k|        handler.on_type(type);
 7627|  4.59k|        return begin;
 7628|  5.11k|    };
impl.cpp:_ZN3scn2v46detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEENSt3__117basic_string_viewIT_NSI_11char_traitsISK_EEEERPKSK_SP_OT0_:
 7444|  11.8k|{
 7445|  11.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  11.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  11.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7446|  11.8k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  930|  11.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  11.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7447|       |
 7448|  11.8k|    auto start = begin;
 7449|  11.8k|    ++begin;
 7450|       |
 7451|  11.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  11.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 42, False: 11.7k]
  |  |  ------------------
  ------------------
 7452|       |        // clang-format off
 7453|     42|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7454|       |        // clang-format on
 7455|     42|        return {};
 7456|     42|    }
 7457|  11.7k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7457:9): [True: 2.40k, False: 9.36k]
  ------------------
 7458|  2.40k|        handler.on_charset_inverted();
 7459|  2.40k|        ++begin;
 7460|  2.40k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  2.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34, False: 2.37k]
  |  |  ------------------
  ------------------
 7461|       |            // clang-format off
 7462|     34|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7463|       |            // clang-format on
 7464|     34|            return {};
 7465|     34|        }
 7466|  2.37k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7466:13): [True: 52, False: 2.32k]
  ------------------
 7467|     52|            handler.on_charset_single(char32_t{']'});
 7468|     52|            ++begin;
 7469|     52|        }
 7470|  2.37k|    }
 7471|  9.36k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7471:14): [True: 34, False: 9.33k]
  ------------------
 7472|     34|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7473|     34|    }
 7474|       |
 7475|  1.25M|    while (begin != end) {
  ------------------
  |  Branch (7475:12): [True: 1.25M, False: 484]
  ------------------
 7476|  1.25M|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|  1.25M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 270, False: 1.25M]
  |  |  ------------------
  ------------------
 7477|    270|            break;
 7478|    270|        }
 7479|       |
 7480|  1.25M|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7480:13): [True: 10.9k, False: 1.24M]
  ------------------
 7481|  10.9k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7482|  10.9k|        }
 7483|       |
 7484|  1.24M|        parse_presentation_set_literal(begin, end, handler);
 7485|  1.24M|    }
 7486|       |
 7487|    754|    SCN_UNLIKELY_ATTR
 7488|    754|    handler.on_error("Invalid [character set] specifier in format string");
 7489|    754|    return {};
 7490|  11.7k|}
impl.cpp:_ZN3scn2v46detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEvRPKT_SK_OT0_:
 7408|  1.24M|{
 7409|  1.24M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  1.24M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.24M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7410|       |
 7411|  1.24M|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7412|  1.24M|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  865|  1.24M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 148, False: 1.24M]
  |  |  ------------------
  ------------------
 7413|    148|        return;
 7414|    148|    }
 7415|       |
 7416|  1.24M|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7416:9): [True: 1.24M, False: 188]
  |  Branch (7416:25): [True: 10.0k, False: 1.23M]
  |  Branch (7416:49): [True: 10.0k, False: 34]
  ------------------
 7417|  1.24M|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7417:9): [True: 9.75k, False: 250]
  ------------------
 7418|  9.75k|        ++begin;
 7419|       |
 7420|  9.75k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7421|  9.75k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  865|  9.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 70, False: 9.68k]
  |  |  ------------------
  ------------------
 7422|     70|            return;
 7423|     70|        }
 7424|       |
 7425|  9.68k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  865|  9.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34, False: 9.65k]
  |  |  ------------------
  ------------------
 7426|       |            // clang-format off
 7427|     34|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7428|       |            // clang-format on
 7429|     34|            return;
 7430|     34|        }
 7431|       |
 7432|  9.65k|        handler.on_charset_range(cp_first, cp_second + 1);
 7433|  9.65k|        return;
 7434|  9.68k|    }
 7435|       |
 7436|  1.23M|    handler.on_charset_single(cp_first);
 7437|  1.23M|}
impl.cpp:_ZN3scn2v46detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEDiRPKT_SK_OT0_:
 7384|  1.25M|{
 7385|  1.25M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  1.25M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.25M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7386|       |
 7387|  1.25M|    auto len = code_point_length_by_starting_code_unit(*begin);
 7388|  1.25M|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  865|  2.50M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 114, False: 1.25M]
  |  |  |  Branch (865:45): [True: 88, False: 1.25M]
  |  |  |  Branch (865:45): [True: 26, False: 1.25M]
  |  |  ------------------
  ------------------
 7389|    114|        handler.on_error("Invalid encoding in format string");
 7390|    114|        return invalid_code_point;
 7391|    114|    }
 7392|       |
 7393|  1.25M|    const auto cp =
 7394|  1.25M|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7395|  1.25M|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|  1.25M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 104, False: 1.25M]
  |  |  ------------------
  ------------------
 7396|    104|        handler.on_error("Invalid encoding in format string");
 7397|    104|        return invalid_code_point;
 7398|    104|    }
 7399|       |
 7400|  1.25M|    begin += len;
 7401|  1.25M|    return cp;
 7402|  1.25M|}
_ZN3scn2v46detail12specs_setter23on_character_set_stringIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7098|  10.9k|    {
 7099|  10.9k|        m_specs.charset_string_data = fmt.data();
 7100|  10.9k|        m_specs.charset_string_size = fmt.size();
 7101|  10.9k|        on_type(presentation_type::string_set);
 7102|  10.9k|    }
impl.cpp:_ZN3scn2v46detail24parse_presentation_regexIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_RSK_SK_OT0_:
 7496|  2.46k|{
 7497|  2.46k|#if !SCN_DISABLE_REGEX
 7498|  2.46k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  2.46k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.46k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7499|  2.46k|    SCN_EXPECT(*begin == CharT{'/'});
  ------------------
  |  |  930|  2.46k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.46k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7500|       |
 7501|       |    if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 7502|       |                  std::is_same_v<CharT, wchar_t>) {
 7503|       |        handler.on_error("Regex backend doesn't support wide strings as input");
 7504|       |        return begin;
 7505|       |    }
 7506|       |
 7507|  2.46k|    auto start = begin;
 7508|  2.46k|    ++begin;
 7509|       |
 7510|  2.46k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  2.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34, False: 2.42k]
  |  |  ------------------
  ------------------
 7511|     34|        handler.on_error("Unexpected end of regex in format string");
 7512|     34|        return begin;
 7513|     34|    }
 7514|       |
 7515|  2.42k|    handler.on_type(presentation_type::regex);
 7516|   206k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (7516:12): [True: 206k, False: 212]
  ------------------
 7517|   206k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7517:13): [True: 13.3k, False: 193k]
  ------------------
 7518|  13.3k|            if (*(begin - 1) != CharT{'\\'}) {
  ------------------
  |  Branch (7518:17): [True: 2.21k, False: 11.1k]
  ------------------
 7519|  2.21k|                break;
 7520|  2.21k|            }
 7521|  11.1k|            else {
 7522|  11.1k|                handler.on_type(presentation_type::regex_escaped);
 7523|  11.1k|            }
 7524|  13.3k|        }
 7525|   206k|    }
 7526|  2.42k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  2.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 212, False: 2.21k]
  |  |  ------------------
  ------------------
 7527|    212|        handler.on_error("Unexpected end of regex in format string");
 7528|    212|        return begin;
 7529|    212|    }
 7530|       |
 7531|  2.21k|    auto regex_end = begin;
 7532|  2.21k|    auto regex_pattern = make_string_view_from_pointers(start + 1, regex_end);
 7533|  2.21k|    if (SCN_UNLIKELY(regex_pattern.empty())) {
  ------------------
  |  |  865|  2.21k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34, False: 2.18k]
  |  |  ------------------
  ------------------
 7534|     34|        handler.on_error("Invalid (empty) regex in format string");
 7535|     34|        return begin;
 7536|     34|    }
 7537|  2.18k|    handler.on_regex_pattern(regex_pattern);
 7538|  2.18k|    ++begin;
 7539|       |
 7540|  2.18k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  2.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34, False: 2.14k]
  |  |  ------------------
  ------------------
 7541|     34|        handler.on_error("Unexpected end of regex in format string");
 7542|     34|        return begin;
 7543|     34|    }
 7544|       |
 7545|  2.14k|    regex_flags flags{regex_flags::none};
 7546|  2.14k|    constexpr std::array<std::pair<char, regex_flags>, 4> flag_map{
 7547|  2.14k|        {{'m', regex_flags::multiline},
 7548|  2.14k|         {'s', regex_flags::singleline},
 7549|  2.14k|         {'i', regex_flags::nocase},
 7550|  2.14k|         {'n', regex_flags::nocapture}}};
 7551|  2.39k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (7551:12): [True: 2.34k, False: 50]
  ------------------
 7552|  2.34k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7552:13): [True: 1.99k, False: 352]
  ------------------
 7553|  1.99k|            break;
 7554|  1.99k|        }
 7555|    352|        bool found_flag = false;
 7556|    964|        for (auto flag : flag_map) {
  ------------------
  |  Branch (7556:24): [True: 964, False: 70]
  ------------------
 7557|    964|            if (static_cast<CharT>(flag.first) != *begin) {
  ------------------
  |  Branch (7557:17): [True: 682, False: 282]
  ------------------
 7558|    682|                continue;
 7559|    682|            }
 7560|    282|            if ((flags & flag.second) != regex_flags::none) {
  ------------------
  |  Branch (7560:17): [True: 34, False: 248]
  ------------------
 7561|     34|                handler.on_error("Flag set multiple times in regex");
 7562|     34|                return begin;
 7563|     34|            }
 7564|       |#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 7565|       |            if (*begin == CharT{'s'}) {
 7566|       |                // clang-format off
 7567|       |                handler.on_error("/s flag for regex isn't supported by regex backend");
 7568|       |                // clang-format on
 7569|       |            }
 7570|       |#if !SCN_HAS_STD_REGEX_MULTILINE
 7571|       |            if (*begin == CharT{'m'}) {
 7572|       |                // clang-format off
 7573|       |                handler.on_error("/m flag for regex isn't supported by regex backend");
 7574|       |                // clang-format on
 7575|       |            }
 7576|       |#endif
 7577|       |#endif
 7578|    248|            flags |= flag.second;
 7579|    248|            found_flag = true;
 7580|    248|            break;
 7581|    282|        }
 7582|    318|        if (!found_flag) {
  ------------------
  |  Branch (7582:13): [True: 70, False: 248]
  ------------------
 7583|     70|            handler.on_error("Invalid flag in regex");
 7584|     70|            return begin;
 7585|     70|        }
 7586|    318|    }
 7587|  2.04k|    handler.on_regex_flags(flags);
 7588|       |
 7589|  2.04k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  2.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 50, False: 1.99k]
  |  |  ------------------
  ------------------
 7590|     50|        handler.on_error("Unexpected end of regex in format string");
 7591|     50|        return begin;
 7592|     50|    }
 7593|       |
 7594|  1.99k|    return begin;
 7595|       |#else
 7596|       |    handler.on_error("Regular expression support is disabled");
 7597|       |    return {};
 7598|       |#endif
 7599|  2.04k|}
_ZN3scn2v46detail12specs_setter16on_regex_patternIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7106|  2.18k|    {
 7107|  2.18k|        m_specs.charset_string_data = pattern.data();
 7108|  2.18k|        m_specs.charset_string_size = pattern.size();
 7109|  2.18k|    }
_ZN3scn2v46detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 7202|  5.11k|{
 7203|  5.11k|    switch (type) {
 7204|    160|        case 'b':
  ------------------
  |  Branch (7204:9): [True: 160, False: 4.95k]
  ------------------
 7205|    212|        case 'B':
  ------------------
  |  Branch (7205:9): [True: 52, False: 5.05k]
  ------------------
 7206|    212|            return presentation_type::int_binary;
 7207|    108|        case 'd':
  ------------------
  |  Branch (7207:9): [True: 108, False: 5.00k]
  ------------------
 7208|    108|            return presentation_type::int_decimal;
 7209|    196|        case 'i':
  ------------------
  |  Branch (7209:9): [True: 196, False: 4.91k]
  ------------------
 7210|    196|            return presentation_type::int_generic;
 7211|     70|        case 'u':
  ------------------
  |  Branch (7211:9): [True: 70, False: 5.04k]
  ------------------
 7212|     70|            return presentation_type::int_unsigned_decimal;
 7213|    178|        case 'o':
  ------------------
  |  Branch (7213:9): [True: 178, False: 4.93k]
  ------------------
 7214|    178|            return presentation_type::int_octal;
 7215|    116|        case 'x':
  ------------------
  |  Branch (7215:9): [True: 116, False: 4.99k]
  ------------------
 7216|    168|        case 'X':
  ------------------
  |  Branch (7216:9): [True: 52, False: 5.05k]
  ------------------
 7217|    168|            return presentation_type::int_hex;
 7218|     34|        case 'r':
  ------------------
  |  Branch (7218:9): [True: 34, False: 5.07k]
  ------------------
 7219|     68|        case 'R':
  ------------------
  |  Branch (7219:9): [True: 34, False: 5.07k]
  ------------------
 7220|     68|            return presentation_type::int_arbitrary_base;
 7221|    124|        case 'a':
  ------------------
  |  Branch (7221:9): [True: 124, False: 4.98k]
  ------------------
 7222|    212|        case 'A':
  ------------------
  |  Branch (7222:9): [True: 88, False: 5.02k]
  ------------------
 7223|    212|            return presentation_type::float_hex;
 7224|     88|        case 'e':
  ------------------
  |  Branch (7224:9): [True: 88, False: 5.02k]
  ------------------
 7225|    158|        case 'E':
  ------------------
  |  Branch (7225:9): [True: 70, False: 5.04k]
  ------------------
 7226|    158|            return presentation_type::float_scientific;
 7227|    214|        case 'f':
  ------------------
  |  Branch (7227:9): [True: 214, False: 4.89k]
  ------------------
 7228|    320|        case 'F':
  ------------------
  |  Branch (7228:9): [True: 106, False: 5.00k]
  ------------------
 7229|    320|            return presentation_type::float_fixed;
 7230|    150|        case 'g':
  ------------------
  |  Branch (7230:9): [True: 150, False: 4.96k]
  ------------------
 7231|    226|        case 'G':
  ------------------
  |  Branch (7231:9): [True: 76, False: 5.03k]
  ------------------
 7232|    226|            return presentation_type::float_general;
 7233|  2.08k|        case 's':
  ------------------
  |  Branch (7233:9): [True: 2.08k, False: 3.02k]
  ------------------
 7234|  2.08k|            return presentation_type::string;
 7235|    484|        case 'c':
  ------------------
  |  Branch (7235:9): [True: 484, False: 4.62k]
  ------------------
 7236|    484|            return presentation_type::character;
 7237|     34|        case '?':
  ------------------
  |  Branch (7237:9): [True: 34, False: 5.07k]
  ------------------
 7238|     34|            return presentation_type::escaped_character;
 7239|     78|        case 'p':
  ------------------
  |  Branch (7239:9): [True: 78, False: 5.03k]
  ------------------
 7240|     78|            return presentation_type::pointer;
 7241|      0|        case '[':
  ------------------
  |  Branch (7241:9): [True: 0, False: 5.11k]
  ------------------
 7242|      0|        case '/':
  ------------------
  |  Branch (7242:9): [True: 0, False: 5.11k]
  ------------------
 7243|       |            // Should be handled by parse_presentation_set and
 7244|       |            // parse_presentation_regex
 7245|      0|            SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7246|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7247|    512|        default:
  ------------------
  |  Branch (7247:9): [True: 512, False: 4.59k]
  ------------------
 7248|    512|            return presentation_type::none;
 7249|  5.11k|    }
 7250|  5.11k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7279|  24.2k|{
 7280|  24.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  24.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  24.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7281|       |
 7282|  24.2k|    auto check_align = [](wchar_t ch) {
 7283|  24.2k|        switch (ch) {
 7284|  24.2k|            case L'<':
 7285|  24.2k|                return align_type::left;
 7286|  24.2k|            case L'>':
 7287|  24.2k|                return align_type::right;
 7288|  24.2k|            case L'^':
 7289|  24.2k|                return align_type::center;
 7290|  24.2k|            default:
 7291|  24.2k|                return align_type::none;
 7292|  24.2k|        }
 7293|  24.2k|    };
 7294|       |
 7295|  24.2k|    auto potential_fill_len = code_point_length(begin, end);
 7296|  24.2k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|  48.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 42, False: 24.2k]
  |  |  |  Branch (865:45): [True: 38, False: 24.2k]
  |  |  |  Branch (865:45): [True: 4, False: 24.2k]
  |  |  ------------------
  ------------------
 7297|  24.2k|                     std::distance(begin, end) < potential_fill_len)) {
 7298|     42|        handler.on_error("Invalid encoding in fill character");
 7299|     42|        return begin;
 7300|     42|    }
 7301|       |
 7302|  24.2k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7303|       |
 7304|  24.2k|    auto potential_fill = std::basic_string_view<CharT>{
 7305|  24.2k|        begin, static_cast<size_t>(potential_fill_len)};
 7306|  24.2k|    const auto begin_before_fill = begin;
 7307|  24.2k|    begin += potential_fill_len;
 7308|       |
 7309|  24.2k|    if (begin == end) {
  ------------------
  |  Branch (7309:9): [True: 1.03k, False: 23.2k]
  ------------------
 7310|  1.03k|        return begin_before_fill;
 7311|  1.03k|    }
 7312|       |
 7313|  23.2k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7314|  23.2k|    const auto begin_after_fill = begin;
 7315|  23.2k|    ++begin;
 7316|       |
 7317|  23.2k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7317:9): [True: 21.4k, False: 1.75k]
  ------------------
 7318|  21.4k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|  21.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 60, False: 21.3k]
  |  |  ------------------
  ------------------
 7319|     60|            handler.on_error("Invalid fill character '{' in format string");
 7320|     60|            return begin;
 7321|     60|        }
 7322|  21.3k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7322:13): [True: 8.22k, False: 13.1k]
  ------------------
 7323|  8.22k|            return begin_before_fill;
 7324|  8.22k|        }
 7325|  21.3k|    }
 7326|       |
 7327|  14.9k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7327:9): [True: 13.0k, False: 1.91k]
  ------------------
 7328|  13.0k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7328:13): [True: 2.21k, False: 10.7k]
  ------------------
 7329|  2.21k|            handler.on_align(potential_align_on_fill);
 7330|  2.21k|            return begin_after_fill;
 7331|  2.21k|        }
 7332|  10.7k|        return begin_before_fill;
 7333|  13.0k|    }
 7334|       |
 7335|  1.91k|    handler.on_fill(potential_fill);
 7336|  1.91k|    handler.on_align(potential_align_after_fill);
 7337|  1.91k|    return begin;
 7338|  14.9k|}
_ZN3scn2v46detail17code_point_lengthIcEEiPKT_S5_:
 7261|  24.2k|{
 7262|  24.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  24.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  24.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7263|       |    if constexpr (sizeof(CharT) != 1) {
 7264|       |        return 1;
 7265|       |    }
 7266|  24.2k|    else {
 7267|  24.2k|        const auto lengths =
 7268|  24.2k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7269|  24.2k|            "\3\4";
 7270|  24.2k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7271|  24.2k|        return len;
 7272|  24.2k|    }
 7273|  24.2k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7282|  47.4k|    auto check_align = [](wchar_t ch) {
 7283|  47.4k|        switch (ch) {
 7284|  1.47k|            case L'<':
  ------------------
  |  Branch (7284:13): [True: 1.47k, False: 45.9k]
  ------------------
 7285|  1.47k|                return align_type::left;
 7286|    886|            case L'>':
  ------------------
  |  Branch (7286:13): [True: 886, False: 46.5k]
  ------------------
 7287|    886|                return align_type::right;
 7288|  2.76k|            case L'^':
  ------------------
  |  Branch (7288:13): [True: 2.76k, False: 44.7k]
  ------------------
 7289|  2.76k|                return align_type::center;
 7290|  42.3k|            default:
  ------------------
  |  Branch (7290:13): [True: 42.3k, False: 5.12k]
  ------------------
 7291|  42.3k|                return align_type::none;
 7292|  47.4k|        }
 7293|  47.4k|    };
_ZN3scn2v46detail12specs_setter7on_fillIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7019|  1.91k|    {
 7020|  1.91k|        m_specs.fill = fill;
 7021|  1.91k|    }
_ZN3scn2v46detail9fill_typeaSIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6900|  1.91k|    {
 6901|  1.91k|        SCN_EXPECT(!s.empty());
  ------------------
  |  |  930|  1.91k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.91k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6902|  1.91k|        SCN_EXPECT(s.size() * sizeof(CharT) <= max_size);
  ------------------
  |  |  930|  1.91k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.91k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6903|  1.91k|        if constexpr (sizeof(CharT) == 1) {
 6904|  6.89k|            for (size_t i = 0; i < s.size(); ++i) {
  ------------------
  |  Branch (6904:32): [True: 4.97k, False: 1.91k]
  ------------------
 6905|  4.97k|                SCN_GCC_PUSH
 6906|  4.97k|                SCN_GCC_IGNORE("-Wstringop-overflow")  // false positive
 6907|  4.97k|                m_data[i] = s[i];
 6908|  4.97k|                SCN_GCC_POP
 6909|  4.97k|            }
 6910|  1.91k|            m_size = static_cast<unsigned char>(s.size());
 6911|       |        }
 6912|       |        else if constexpr (sizeof(CharT) == 2) {
 6913|       |            m_data[0] = static_cast<char>(static_cast<unsigned>(s.front()));
 6914|       |            m_data[1] =
 6915|       |                static_cast<char>(static_cast<unsigned>(s.front()) >> 8);
 6916|       |            if (s.size() == 1) {
 6917|       |                return;
 6918|       |            }
 6919|       |            m_data[2] = static_cast<char>(static_cast<unsigned>(s[1]));
 6920|       |            m_data[3] = static_cast<char>(static_cast<unsigned>(s[1]) >> 8);
 6921|       |        }
 6922|       |        else {
 6923|       |            const auto front = static_cast<unsigned>(s.front());
 6924|       |            m_data[0] = static_cast<char>(front);
 6925|       |            m_data[1] = static_cast<char>(front >> 8);
 6926|       |            m_data[2] = static_cast<char>(front >> 16);
 6927|       |            m_data[3] = static_cast<char>(front >> 24);
 6928|       |        }
 6929|  1.91k|    }
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7344|  24.1k|{
 7345|  24.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  24.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  24.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7346|       |
 7347|  24.1k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7347:9): [True: 14.8k, False: 9.33k]
  |  Branch (7347:33): [True: 4.18k, False: 10.6k]
  ------------------
 7348|  4.18k|        int width = parse_simple_int(begin, end);
 7349|  4.18k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|  4.18k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 4.14k, False: 34]
  |  |  ------------------
  ------------------
 7350|  4.14k|            handler.on_width(width);
 7351|  4.14k|        }
 7352|     34|        else {
 7353|     34|            handler.on_error("Invalid field width");
 7354|     34|            return begin;
 7355|     34|        }
 7356|  4.18k|    }
 7357|  24.1k|    return begin;
 7358|  24.1k|}
impl.cpp:_ZN3scn2v46detail15parse_precisionIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7364|  9.11k|{
 7365|  9.11k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  9.11k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.11k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7366|       |
 7367|  9.11k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7367:9): [True: 9.04k, False: 70]
  |  Branch (7367:33): [True: 8.99k, False: 52]
  ------------------
 7368|  8.99k|        int prec = parse_simple_int(begin, end);
 7369|  8.99k|        if (SCN_LIKELY(prec != -1)) {
  ------------------
  |  |  864|  8.99k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 8.94k, False: 48]
  |  |  ------------------
  ------------------
 7370|  8.94k|            handler.on_precision(prec);
 7371|  8.94k|        }
 7372|     48|        else {
 7373|     48|            handler.on_error("Invalid field precision");
 7374|     48|            return begin;
 7375|     48|        }
 7376|  8.99k|    }
 7377|  9.06k|    return begin;
 7378|  9.11k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEE12on_localizedEv:
 7875|    536|    {
 7876|    536|        const auto cat = get_category_for_arg_type(m_arg_type);
 7877|    536|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7877:13): [True: 482, False: 54]
  ------------------
 7878|    536|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7878:13): [True: 428, False: 54]
  ------------------
 7879|    536|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7879:13): [True: 374, False: 54]
  ------------------
 7880|    536|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7880:13): [True: 320, False: 54]
  ------------------
 7881|    320|            SCN_UNLIKELY_ATTR
 7882|       |            // clang-format off
 7883|    320|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7884|       |            // clang-format on
 7885|    320|        }
 7886|       |
 7887|    216|        Handler::on_localized();
 7888|    216|    }
_ZN3scn2v46detail12specs_setter12on_localizedILb1EEEvv:
 7024|    384|    {
 7025|    384|        if constexpr (!SCN_DISABLE_LOCALE) {
 7026|    384|            m_specs.localized = true;
 7027|       |        }
 7028|       |        else {
 7029|       |            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 7030|       |        }
 7031|    384|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9299|  21.7k|{
 9300|  21.7k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  21.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|  21.7k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|  21.7k|{
 9201|  21.7k|#define SCN_VISIT(Type)                                                \
 9202|  21.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|  21.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|  21.7k|    }                                                                  \
 9205|  21.7k|    else {                                                             \
 9206|  21.7k|        return vis(monostate_val);                                     \
 9207|  21.7k|    }
 9208|       |
 9209|  21.7k|    monostate monostate_val{};
 9210|       |
 9211|  21.7k|    switch (get_arg_type(arg)) {
 9212|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 0, False: 21.7k]
  ------------------
 9213|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9214|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 21.7k]
  ------------------
 9215|      0|            SCN_VISIT(short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9216|  2.44k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 2.44k, False: 19.3k]
  ------------------
 9217|  2.44k|            SCN_VISIT(int);
  ------------------
  |  | 9202|  2.44k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  2.44k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  2.44k|    }                                                                  \
  |  | 9205|  2.44k|    else {                                                             \
  |  | 9206|  2.44k|        return vis(monostate_val);                                     \
  |  | 9207|  2.44k|    }
  ------------------
 9218|  2.44k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 21.7k]
  ------------------
 9219|  2.44k|            SCN_VISIT(long);
  ------------------
  |  | 9202|  2.44k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  2.44k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  2.44k|    }                                                                  \
  |  | 9205|  2.44k|    else {                                                             \
  |  | 9206|  2.44k|        return vis(monostate_val);                                     \
  |  | 9207|  2.44k|    }
  ------------------
 9220|  2.44k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 0, False: 21.7k]
  ------------------
 9221|  2.44k|            SCN_VISIT(long long);
  ------------------
  |  | 9202|  2.44k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  2.44k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  2.44k|    }                                                                  \
  |  | 9205|  2.44k|    else {                                                             \
  |  | 9206|  2.44k|        return vis(monostate_val);                                     \
  |  | 9207|  2.44k|    }
  ------------------
 9222|  2.44k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 0, False: 21.7k]
  ------------------
 9223|  2.44k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|  2.44k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  2.44k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  2.44k|    }                                                                  \
  |  | 9205|  2.44k|    else {                                                             \
  |  | 9206|  2.44k|        return vis(monostate_val);                                     \
  |  | 9207|  2.44k|    }
  ------------------
 9224|  2.44k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 21.7k]
  ------------------
 9225|  2.44k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|  2.44k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  2.44k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  2.44k|    }                                                                  \
  |  | 9205|  2.44k|    else {                                                             \
  |  | 9206|  2.44k|        return vis(monostate_val);                                     \
  |  | 9207|  2.44k|    }
  ------------------
 9226|  4.88k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 2.44k, False: 19.3k]
  ------------------
 9227|  4.88k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|  4.88k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  4.88k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  4.88k|    }                                                                  \
  |  | 9205|  4.88k|    else {                                                             \
  |  | 9206|  4.88k|        return vis(monostate_val);                                     \
  |  | 9207|  4.88k|    }
  ------------------
 9228|  4.88k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 21.7k]
  ------------------
 9229|  4.88k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|  4.88k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  4.88k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  4.88k|    }                                                                  \
  |  | 9205|  4.88k|    else {                                                             \
  |  | 9206|  4.88k|        return vis(monostate_val);                                     \
  |  | 9207|  4.88k|    }
  ------------------
 9230|  4.88k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 0, False: 21.7k]
  ------------------
 9231|  4.88k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|  4.88k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  4.88k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  4.88k|    }                                                                  \
  |  | 9205|  4.88k|    else {                                                             \
  |  | 9206|  4.88k|        return vis(monostate_val);                                     \
  |  | 9207|  4.88k|    }
  ------------------
 9232|  7.29k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 2.40k, False: 19.3k]
  ------------------
 9233|  7.29k|            SCN_VISIT(void*);
  ------------------
  |  | 9202|  7.29k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  7.29k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  7.29k|    }                                                                  \
  |  | 9205|  7.29k|    else {                                                             \
  |  | 9206|  7.29k|        return vis(monostate_val);                                     \
  |  | 9207|  7.29k|    }
  ------------------
 9234|  9.73k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 2.44k, False: 19.3k]
  ------------------
 9235|  9.73k|            SCN_VISIT(bool);
  ------------------
  |  | 9202|  9.73k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  9.73k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  9.73k|    }                                                                  \
  |  | 9205|  9.73k|    else {                                                             \
  |  | 9206|  9.73k|        return vis(monostate_val);                                     \
  |  | 9207|  9.73k|    }
  ------------------
 9236|  12.1k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 2.40k, False: 19.3k]
  ------------------
 9237|  12.1k|            SCN_VISIT(char);
  ------------------
  |  | 9202|  12.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  12.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  12.1k|    }                                                                  \
  |  | 9205|  12.1k|    else {                                                             \
  |  | 9206|  12.1k|        return vis(monostate_val);                                     \
  |  | 9207|  12.1k|    }
  ------------------
 9238|  12.1k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 21.7k]
  ------------------
 9239|  12.1k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|  12.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  12.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  12.1k|    }                                                                  \
  |  | 9205|  12.1k|    else {                                                             \
  |  | 9206|  12.1k|        return vis(monostate_val);                                     \
  |  | 9207|  12.1k|    }
  ------------------
 9240|  12.1k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 21.7k]
  ------------------
 9241|  12.1k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|  12.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  12.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  12.1k|    }                                                                  \
  |  | 9205|  12.1k|    else {                                                             \
  |  | 9206|  12.1k|        return vis(monostate_val);                                     \
  |  | 9207|  12.1k|    }
  ------------------
 9242|  12.1k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 21.7k]
  ------------------
 9243|  12.1k|            SCN_VISIT(float);
  ------------------
  |  | 9202|  12.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  12.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  12.1k|    }                                                                  \
  |  | 9205|  12.1k|    else {                                                             \
  |  | 9206|  12.1k|        return vis(monostate_val);                                     \
  |  | 9207|  12.1k|    }
  ------------------
 9244|  14.5k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 2.44k, False: 19.3k]
  ------------------
 9245|  14.5k|            SCN_VISIT(double);
  ------------------
  |  | 9202|  14.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  14.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  14.5k|    }                                                                  \
  |  | 9205|  14.5k|    else {                                                             \
  |  | 9206|  14.5k|        return vis(monostate_val);                                     \
  |  | 9207|  14.5k|    }
  ------------------
 9246|  14.5k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 21.7k]
  ------------------
 9247|  14.5k|            SCN_VISIT(long double);
  ------------------
  |  | 9202|  14.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  14.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  14.5k|    }                                                                  \
  |  | 9205|  14.5k|    else {                                                             \
  |  | 9206|  14.5k|        return vis(monostate_val);                                     \
  |  | 9207|  14.5k|    }
  ------------------
 9248|  16.9k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 2.40k, False: 19.3k]
  ------------------
 9249|  16.9k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|  16.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  16.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  16.9k|    }                                                                  \
  |  | 9205|  16.9k|    else {                                                             \
  |  | 9206|  16.9k|        return vis(monostate_val);                                     \
  |  | 9207|  16.9k|    }
  ------------------
 9250|  19.3k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 2.40k, False: 19.3k]
  ------------------
 9251|  19.3k|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|  19.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  19.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  19.3k|    }                                                                  \
  |  | 9205|  19.3k|    else {                                                             \
  |  | 9206|  19.3k|        return vis(monostate_val);                                     \
  |  | 9207|  19.3k|    }
  ------------------
 9252|  19.3k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 21.7k]
  ------------------
 9253|  19.3k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|  19.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  19.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  19.3k|    }                                                                  \
  |  | 9205|  19.3k|    else {                                                             \
  |  | 9206|  19.3k|        return vis(monostate_val);                                     \
  |  | 9207|  19.3k|    }
  ------------------
 9254|  21.7k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 2.40k, False: 19.3k]
  ------------------
 9255|  21.7k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|  21.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  21.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  21.7k|    }                                                                  \
  |  | 9205|  21.7k|    else {                                                             \
  |  | 9206|  21.7k|        return vis(monostate_val);                                     \
  |  | 9207|  21.7k|    }
  ------------------
 9256|  21.7k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 21.7k]
  ------------------
 9257|  21.7k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|  21.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  21.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  21.7k|    }                                                                  \
  |  | 9205|  21.7k|    else {                                                             \
  |  | 9206|  21.7k|        return vis(monostate_val);                                     \
  |  | 9207|  21.7k|    }
  ------------------
 9258|  21.7k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 21.7k]
  ------------------
 9259|  21.7k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|  21.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  21.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  21.7k|    }                                                                  \
  |  | 9205|  21.7k|    else {                                                             \
  |  | 9206|  21.7k|        return vis(monostate_val);                                     \
  |  | 9207|  21.7k|    }
  ------------------
 9260|       |
 9261|  21.7k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 21.7k]
  ------------------
 9262|  21.7k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|  21.7k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|  21.7k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 21.7k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 21.7k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|  21.7k|            SCN_CLANG_POP
 9279|  21.7k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE5beginEv:
 3479|  13.0k|    {
 3480|  13.0k|        return m_iterator;
 3481|  13.0k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISH_vEEOT_:
 1569|  2.42k|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.42k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.42k|    {
 1572|  2.42k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  440|  2.42k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.42k|    {
  442|  2.42k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  2.74k|    {
 1316|  2.74k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE3endEv:
 3483|  8.17k|    {
 3484|  8.17k|        return m_sentinel;
 3485|  8.17k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISI_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSM_IXsr3stdE16is_convertible_vISO_SI_EEvE4typeELSS_0EEEONS0_10unexpectedISN_EE:
 1615|    320|        : base(unexpect, std::move(e.error())),
 1616|    320|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    320|    {
 1618|    320|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  449|    320|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    320|          m_has_value(false)
  451|    320|    {
  452|    320|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEEC2ISG_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SG_EEvE4typeELPv0EEESO_SJ_:
 3464|  6.19k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  6.19k|    static_cast<    \
  |  |  935|  6.19k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  6.19k|    static_cast<    \
  |  |  935|  6.19k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  6.19k|    {
 3466|  6.19k|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEcvbEv:
 1739|    472|    {
 1740|    472|        return has_value();
 1741|    472|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9has_valueEv:
  489|  5.40k|    {
  490|  5.40k|        return m_has_value;
  491|  5.40k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1794|    390|    {
 1795|    390|        return value();
 1796|    390|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5valueISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1768|  2.42k|    {
 1769|  2.42k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.42k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.42k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.42k|        return this->get_value();
 1771|  2.42k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9get_valueEv:
  455|  2.42k|    {
  456|  2.42k|        return m_value;
  457|  2.42k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESI_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSO_:
 1978|  2.27k|    {
 1979|  2.27k|        return detail::transform_error_impl(std::move(*this),
 1980|  2.27k|                                            std::forward<F>(f));
 1981|  2.27k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS6_IPKcS8_EENS4_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEE8sentinelILb1EEEEENS4_9eof_errorEEERFNS0_10scan_errorESK_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESM_EEDaOSR_OT0_:
 1461|  2.27k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  2.27k|    else {
 1472|  2.27k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  2.27k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  2.27k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 2.03k, False: 238]
  |  |  ------------------
  ------------------
 1474|  2.27k|                   ? result(*std::forward<Exp>(exp))
 1475|  2.27k|                   : result(unexpect,
 1476|    238|                            trivial_invoke(std::forward<F>(f),
 1477|    238|                                           std::forward<Exp>(exp).error()));
 1478|  2.27k|    }
 1479|  2.27k|}
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSN_v:
 1804|  2.03k|    {
 1805|  2.03k|        return std::move(value());
 1806|  2.03k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1569|  2.03k|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.03k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.03k|    {
 1572|  2.03k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  440|  2.03k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.03k|    {
  442|  2.03k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  2.27k|    {
 1316|  2.27k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5errorEv:
 1755|    238|    {
 1756|    238|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    238|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    238|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|    238|        return std::move(this->get_unexpected().error());
 1758|    238|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE14get_unexpectedEv:
  472|    238|    {
  473|    238|        return m_unexpected;
  474|    238|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
 1625|    238|        : base(unexpect, std::forward<Args>(args)...),
 1626|    238|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|    238|    {
 1628|    238|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  449|    238|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    238|          m_has_value(false)
  451|    238|    {
  452|    238|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEcvbEv:
 1739|  2.27k|    {
 1740|  2.27k|        return has_value();
 1741|  2.27k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  4.54k|    {
  490|  4.54k|        return m_has_value;
  491|  4.54k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5errorEv:
 1745|    238|    {
 1746|    238|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    238|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    238|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|    238|        return this->get_unexpected().error();
 1748|    238|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|    238|    {
  473|    238|        return m_unexpected;
  474|    238|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSN_v:
 1804|  2.03k|    {
 1805|  2.03k|        return std::move(value());
 1806|  2.03k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5valueISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1768|  2.03k|    {
 1769|  2.03k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.03k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.03k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.03k|        return this->get_value();
 1771|  2.03k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  2.03k|    {
  456|  2.03k|        return m_value;
  457|  2.03k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4sizeEv:
 6176|  93.3k|    {
 6177|  93.3k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|  93.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 93.3k]
  |  |  ------------------
  ------------------
 6178|      0|            return max_size();
 6179|      0|        }
 6180|       |
 6181|  93.3k|        return static_cast<std::size_t>(m_desc &
 6182|  93.3k|                                        ((1 << detail::packed_arg_bits) - 1));
 6183|  93.3k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE9is_packedEv:
 6202|   107k|    {
 6203|   107k|        return (m_desc & detail::is_unpacked_bit) == 0;
 6204|   107k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE3getEm:
 6144|  14.2k|    {
 6145|  14.2k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|  14.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 14.2k]
  |  |  ------------------
  ------------------
 6146|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6147|      0|                return m_args[id];
 6148|      0|            }
 6149|      0|            return {};
 6150|      0|        }
 6151|       |
 6152|  14.2k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  865|  14.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 68, False: 14.1k]
  |  |  ------------------
  ------------------
 6153|     68|            return {};
 6154|     68|        }
 6155|       |
 6156|  14.1k|        const auto t = type(id);
 6157|  14.1k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  865|  14.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.00k, False: 13.1k]
  |  |  ------------------
  ------------------
 6158|  1.00k|            return {};
 6159|  1.00k|        }
 6160|       |
 6161|  13.1k|        basic_scan_arg<Context> arg;
 6162|  13.1k|        arg.m_type = t;
 6163|  13.1k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6163:13): [True: 13.1k, False: 0]
  ------------------
 6164|  13.1k|            arg.m_value.ref_value = m_builtin_values[id];
 6165|  13.1k|        }
 6166|      0|        else {
 6167|      0|            arg.m_value = m_values[id];
 6168|      0|        }
 6169|  13.1k|        return arg;
 6170|  14.1k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 5954|  14.2k|    constexpr basic_scan_arg() = default;
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4typeEm:
 6211|  14.1k|    {
 6212|       |        // First (0th) index is size, types start after that
 6213|  14.1k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6214|  14.1k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6215|  14.1k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6216|  14.1k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE15is_only_builtinEv:
 6206|  13.1k|    {
 6207|  13.1k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6208|  13.1k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEcvbEv:
 5960|  25.9k|    {
 5961|  25.9k|        return m_type != detail::arg_type::none_type;
 5962|  25.9k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9299|  4.03k|{
 9300|  4.03k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  4.03k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|  4.03k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|  4.03k|{
 9201|  4.03k|#define SCN_VISIT(Type)                                                \
 9202|  4.03k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|  4.03k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|  4.03k|    }                                                                  \
 9205|  4.03k|    else {                                                             \
 9206|  4.03k|        return vis(monostate_val);                                     \
 9207|  4.03k|    }
 9208|       |
 9209|  4.03k|    monostate monostate_val{};
 9210|       |
 9211|  4.03k|    switch (get_arg_type(arg)) {
 9212|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 0, False: 4.03k]
  ------------------
 9213|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9214|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 4.03k]
  ------------------
 9215|      0|            SCN_VISIT(short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9216|    448|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 448, False: 3.58k]
  ------------------
 9217|    448|            SCN_VISIT(int);
  ------------------
  |  | 9202|    448|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|    448|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|    448|    }                                                                  \
  |  | 9205|    448|    else {                                                             \
  |  | 9206|    448|        return vis(monostate_val);                                     \
  |  | 9207|    448|    }
  ------------------
 9218|    448|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 4.03k]
  ------------------
 9219|    448|            SCN_VISIT(long);
  ------------------
  |  | 9202|    448|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|    448|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|    448|    }                                                                  \
  |  | 9205|    448|    else {                                                             \
  |  | 9206|    448|        return vis(monostate_val);                                     \
  |  | 9207|    448|    }
  ------------------
 9220|    448|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 0, False: 4.03k]
  ------------------
 9221|    448|            SCN_VISIT(long long);
  ------------------
  |  | 9202|    448|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|    448|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|    448|    }                                                                  \
  |  | 9205|    448|    else {                                                             \
  |  | 9206|    448|        return vis(monostate_val);                                     \
  |  | 9207|    448|    }
  ------------------
 9222|    448|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 0, False: 4.03k]
  ------------------
 9223|    448|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|    448|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|    448|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|    448|    }                                                                  \
  |  | 9205|    448|    else {                                                             \
  |  | 9206|    448|        return vis(monostate_val);                                     \
  |  | 9207|    448|    }
  ------------------
 9224|    448|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 4.03k]
  ------------------
 9225|    448|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|    448|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|    448|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|    448|    }                                                                  \
  |  | 9205|    448|    else {                                                             \
  |  | 9206|    448|        return vis(monostate_val);                                     \
  |  | 9207|    448|    }
  ------------------
 9226|    896|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 448, False: 3.58k]
  ------------------
 9227|    896|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|    896|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|    896|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|    896|    }                                                                  \
  |  | 9205|    896|    else {                                                             \
  |  | 9206|    896|        return vis(monostate_val);                                     \
  |  | 9207|    896|    }
  ------------------
 9228|    896|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 4.03k]
  ------------------
 9229|    896|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|    896|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|    896|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|    896|    }                                                                  \
  |  | 9205|    896|    else {                                                             \
  |  | 9206|    896|        return vis(monostate_val);                                     \
  |  | 9207|    896|    }
  ------------------
 9230|    896|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 0, False: 4.03k]
  ------------------
 9231|    896|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|    896|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|    896|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|    896|    }                                                                  \
  |  | 9205|    896|    else {                                                             \
  |  | 9206|    896|        return vis(monostate_val);                                     \
  |  | 9207|    896|    }
  ------------------
 9232|  1.34k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 448, False: 3.58k]
  ------------------
 9233|  1.34k|            SCN_VISIT(void*);
  ------------------
  |  | 9202|  1.34k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  1.34k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  1.34k|    }                                                                  \
  |  | 9205|  1.34k|    else {                                                             \
  |  | 9206|  1.34k|        return vis(monostate_val);                                     \
  |  | 9207|  1.34k|    }
  ------------------
 9234|  1.79k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 448, False: 3.58k]
  ------------------
 9235|  1.79k|            SCN_VISIT(bool);
  ------------------
  |  | 9202|  1.79k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  1.79k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  1.79k|    }                                                                  \
  |  | 9205|  1.79k|    else {                                                             \
  |  | 9206|  1.79k|        return vis(monostate_val);                                     \
  |  | 9207|  1.79k|    }
  ------------------
 9236|  1.79k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 4.03k]
  ------------------
 9237|  1.79k|            SCN_VISIT(char);
  ------------------
  |  | 9202|  1.79k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  1.79k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  1.79k|    }                                                                  \
  |  | 9205|  1.79k|    else {                                                             \
  |  | 9206|  1.79k|        return vis(monostate_val);                                     \
  |  | 9207|  1.79k|    }
  ------------------
 9238|  2.24k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 448, False: 3.58k]
  ------------------
 9239|  2.24k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|  2.24k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  2.24k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  2.24k|    }                                                                  \
  |  | 9205|  2.24k|    else {                                                             \
  |  | 9206|  2.24k|        return vis(monostate_val);                                     \
  |  | 9207|  2.24k|    }
  ------------------
 9240|  2.24k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 4.03k]
  ------------------
 9241|  2.24k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|  2.24k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  2.24k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  2.24k|    }                                                                  \
  |  | 9205|  2.24k|    else {                                                             \
  |  | 9206|  2.24k|        return vis(monostate_val);                                     \
  |  | 9207|  2.24k|    }
  ------------------
 9242|  2.24k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 4.03k]
  ------------------
 9243|  2.24k|            SCN_VISIT(float);
  ------------------
  |  | 9202|  2.24k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  2.24k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  2.24k|    }                                                                  \
  |  | 9205|  2.24k|    else {                                                             \
  |  | 9206|  2.24k|        return vis(monostate_val);                                     \
  |  | 9207|  2.24k|    }
  ------------------
 9244|  2.68k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 448, False: 3.58k]
  ------------------
 9245|  2.68k|            SCN_VISIT(double);
  ------------------
  |  | 9202|  2.68k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  2.68k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  2.68k|    }                                                                  \
  |  | 9205|  2.68k|    else {                                                             \
  |  | 9206|  2.68k|        return vis(monostate_val);                                     \
  |  | 9207|  2.68k|    }
  ------------------
 9246|  2.68k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 4.03k]
  ------------------
 9247|  2.68k|            SCN_VISIT(long double);
  ------------------
  |  | 9202|  2.68k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  2.68k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  2.68k|    }                                                                  \
  |  | 9205|  2.68k|    else {                                                             \
  |  | 9206|  2.68k|        return vis(monostate_val);                                     \
  |  | 9207|  2.68k|    }
  ------------------
 9248|  2.68k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 4.03k]
  ------------------
 9249|  2.68k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|  2.68k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  2.68k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  2.68k|    }                                                                  \
  |  | 9205|  2.68k|    else {                                                             \
  |  | 9206|  2.68k|        return vis(monostate_val);                                     \
  |  | 9207|  2.68k|    }
  ------------------
 9250|  3.13k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 448, False: 3.58k]
  ------------------
 9251|  3.13k|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|  3.13k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  3.13k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  3.13k|    }                                                                  \
  |  | 9205|  3.13k|    else {                                                             \
  |  | 9206|  3.13k|        return vis(monostate_val);                                     \
  |  | 9207|  3.13k|    }
  ------------------
 9252|  3.58k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 448, False: 3.58k]
  ------------------
 9253|  3.58k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|  3.58k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  3.58k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  3.58k|    }                                                                  \
  |  | 9205|  3.58k|    else {                                                             \
  |  | 9206|  3.58k|        return vis(monostate_val);                                     \
  |  | 9207|  3.58k|    }
  ------------------
 9254|  4.03k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 448, False: 3.58k]
  ------------------
 9255|  4.03k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|  4.03k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  4.03k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  4.03k|    }                                                                  \
  |  | 9205|  4.03k|    else {                                                             \
  |  | 9206|  4.03k|        return vis(monostate_val);                                     \
  |  | 9207|  4.03k|    }
  ------------------
 9256|  4.03k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 4.03k]
  ------------------
 9257|  4.03k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|  4.03k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  4.03k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  4.03k|    }                                                                  \
  |  | 9205|  4.03k|    else {                                                             \
  |  | 9206|  4.03k|        return vis(monostate_val);                                     \
  |  | 9207|  4.03k|    }
  ------------------
 9258|  4.03k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 4.03k]
  ------------------
 9259|  4.03k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|  4.03k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  4.03k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  4.03k|    }                                                                  \
  |  | 9205|  4.03k|    else {                                                             \
  |  | 9206|  4.03k|        return vis(monostate_val);                                     \
  |  | 9207|  4.03k|    }
  ------------------
 9260|       |
 9261|  4.03k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 4.03k]
  ------------------
 9262|  4.03k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|  4.03k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|  4.03k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 4.03k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 4.03k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|  4.03k|            SCN_CLANG_POP
 9279|  4.03k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6005|  31.9k|{
 6006|  31.9k|    return arg.m_type;
 6007|  31.9k|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6017|  11.7k|{
 6018|  11.7k|    return arg.m_value;
 6019|  11.7k|}
_ZN3scn2v424basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 6256|  93.3k|        : m_format{format}, m_next_arg_id{next_arg_id}
 6257|  93.3k|    {
 6258|  93.3k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|  93.3k|    {
 3075|  93.3k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  93.3k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3040|  93.3k|    {
 3041|  93.3k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  93.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  93.3k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7792|  93.3k|{
 7793|  93.3k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7794|  93.3k|    handler.check_args_exhausted();
 7795|  93.3k|    return handler.get_error();
 7796|  93.3k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7757|  93.3k|{
 7758|       |    // TODO: memchr fast path with a larger (> 32) format string
 7759|       |
 7760|  93.3k|    auto begin = format.data();
 7761|  93.3k|    auto it = begin;
 7762|  93.3k|    const auto end = format.data() + format.size();
 7763|       |
 7764|   191M|    while (it != end) {
  ------------------
  |  Branch (7764:12): [True: 191M, False: 34.7k]
  ------------------
 7765|   191M|        const auto ch = *it++;
 7766|   191M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7766:13): [True: 14.9k, False: 191M]
  ------------------
 7767|  14.9k|            handler.on_literal_text(begin, it - 1);
 7768|       |
 7769|  14.9k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7770|  14.9k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7770:17): [True: 11.7k, False: 3.18k]
  ------------------
 7771|  11.7k|                return;
 7772|  11.7k|            }
 7773|  14.9k|        }
 7774|   191M|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7774:18): [True: 48.1k, False: 191M]
  ------------------
 7775|  48.1k|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|  96.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 46.8k, False: 1.32k]
  |  |  |  Branch (865:45): [True: 88, False: 48.0k]
  |  |  |  Branch (865:45): [True: 46.7k, False: 1.32k]
  |  |  ------------------
  ------------------
 7776|  46.8k|                handler.on_error("Unmatched '}' in format string");
 7777|  46.8k|                return;
 7778|  46.8k|            }
 7779|       |
 7780|  1.32k|            handler.on_literal_text(begin, it);
 7781|  1.32k|            begin = ++it;
 7782|  1.32k|        }
 7783|   191M|    }
 7784|       |
 7785|  34.7k|    handler.on_literal_text(begin, end);
 7786|  34.7k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 7689|  14.9k|{
 7690|  14.9k|    struct id_adapter {
 7691|  14.9k|        constexpr void operator()()
 7692|  14.9k|        {
 7693|  14.9k|            arg_id = handler.on_arg_id();
 7694|  14.9k|        }
 7695|  14.9k|        constexpr void operator()(std::size_t id)
 7696|  14.9k|        {
 7697|  14.9k|            arg_id = handler.on_arg_id(id);
 7698|  14.9k|        }
 7699|       |
 7700|  14.9k|        constexpr void on_error(const char* msg)
 7701|  14.9k|        {
 7702|  14.9k|            SCN_UNLIKELY_ATTR
 7703|  14.9k|            handler.on_error(msg);
 7704|  14.9k|        }
 7705|       |
 7706|  14.9k|        Handler& handler;
 7707|  14.9k|        std::size_t arg_id;
 7708|  14.9k|    };
 7709|       |
 7710|  14.9k|    ++begin;
 7711|  14.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  14.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 52, False: 14.9k]
  |  |  ------------------
  ------------------
 7712|     52|        handler.on_error("Unexpected end of replacement field");
 7713|     52|        return begin;
 7714|     52|    }
 7715|       |
 7716|  14.9k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7716:9): [True: 4.00k, False: 10.9k]
  ------------------
 7717|  4.00k|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7718|  4.00k|    }
 7719|  10.9k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7719:14): [True: 196, False: 10.7k]
  ------------------
 7720|    196|        handler.on_literal_text(begin, begin + 1);
 7721|    196|    }
 7722|  10.7k|    else {
 7723|  10.7k|        auto adapter = id_adapter{handler, 0};
 7724|  10.7k|        begin = parse_arg_id(begin, end, adapter);
 7725|       |
 7726|  10.7k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  10.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 120, False: 10.6k]
  |  |  ------------------
  ------------------
 7727|    120|            handler.on_error("Missing '}' in format string");
 7728|    120|            return begin;
 7729|    120|        }
 7730|       |
 7731|  10.6k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7731:13): [True: 134, False: 10.4k]
  ------------------
 7732|    134|            handler.on_replacement_field(adapter.arg_id, begin);
 7733|    134|        }
 7734|  10.4k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7734:18): [True: 10.1k, False: 314]
  ------------------
 7735|  10.1k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|  10.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 50, False: 10.1k]
  |  |  ------------------
  ------------------
 7736|     50|                handler.on_error("Unexpected end of replacement field");
 7737|     50|                return begin;
 7738|     50|            }
 7739|  10.1k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7740|  10.1k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|  20.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.01k, False: 8.10k]
  |  |  |  Branch (865:45): [True: 0, False: 10.1k]
  |  |  |  Branch (865:45): [True: 2.01k, False: 8.10k]
  |  |  ------------------
  ------------------
 7741|  2.01k|                handler.on_error("Unknown format specifier");
 7742|  2.01k|                return begin;
 7743|  2.01k|            }
 7744|  10.1k|        }
 7745|    314|        else {
 7746|    314|            SCN_UNLIKELY_ATTR
 7747|    314|            handler.on_error("Missing '}' in format string");
 7748|    314|            return begin;
 7749|    314|        }
 7750|  10.6k|    }
 7751|  12.4k|    return begin + 1;
 7752|  14.9k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE3argEm:
 8831|  14.2k|    {
 8832|  14.2k|        return m_args.get(id);
 8833|  14.2k|    }
_ZN3scn2v424basic_scan_parse_contextIwE11next_arg_idEv:
 6285|  14.0k|    {
 6286|  14.0k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  865|  14.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 40, False: 13.9k]
  |  |  ------------------
  ------------------
 6287|     40|            on_error(
 6288|     40|                "Cannot switch from manual to automatic argument indexing");
 6289|     40|            return 0;
 6290|     40|        }
 6291|       |
 6292|  13.9k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6293|  13.9k|        do_check_arg_id(id);
 6294|  13.9k|        return id;
 6295|  14.0k|    }
_ZN3scn2v424basic_scan_parse_contextIwE8on_errorEPKc:
 6315|    112|    {
 6316|    112|        m_error = unexpected(detail::handle_error(
 6317|    112|            scan_error{scan_error::invalid_format_string, msg}));
 6318|    112|        return m_error.error();
 6319|    112|    }
_ZN3scn2v424basic_scan_parse_contextIwE15do_check_arg_idEm:
 6805|  14.1k|{
 6806|  14.1k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6806:9): [Folded - Ignored]
  ------------------
 6807|  14.1k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6807:10): [Folded - Ignored]
  |  Branch (6807:22): [Folded - Ignored]
  ------------------
 6808|       |        // The cast below will cause an error on gcc pre-12
 6809|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6810|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6810:13): [True: 0, False: 0]
  ------------------
 6811|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6812|      0|            SCN_UNLIKELY_ATTR
 6813|      0|            on_error("Argument not found");
 6814|      0|        }
 6815|      0|    }
 6816|  14.1k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7190|  10.7k|{
 7191|  10.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  10.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  10.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7192|  10.7k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7192:9): [True: 10.7k, False: 0]
  |  Branch (7192:26): [True: 722, False: 10.0k]
  ------------------
 7193|    722|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|    722|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7194|    722|    }
 7195|       |
 7196|  10.0k|    handler();
 7197|  10.0k|    return begin;
 7198|  10.7k|}
impl.cpp:_ZN3scn2v46detail15do_parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7160|    722|{
 7161|    722|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|    722|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    722|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7162|       |
 7163|    722|    CharT c = *begin;
 7164|    722|    if (c < CharT{'0'} || c > CharT{'9'}) {
  ------------------
  |  Branch (7164:9): [True: 62, False: 660]
  |  Branch (7164:27): [True: 186, False: 474]
  ------------------
 7165|    248|        handler.on_error("Invalid argument ID");
 7166|    248|        return begin;
 7167|    248|    }
 7168|       |
 7169|    474|    int idx = 0;
 7170|    474|    if (c != CharT{'0'}) {
  ------------------
  |  Branch (7170:9): [True: 278, False: 196]
  ------------------
 7171|    278|        idx = parse_simple_int(begin, end);
 7172|    278|    }
 7173|    196|    else {
 7174|    196|        ++begin;
 7175|    196|    }
 7176|       |
 7177|    474|    if (begin == end || (*begin != CharT{'}'} && *begin != CharT{':'})) {
  ------------------
  |  Branch (7177:9): [True: 120, False: 354]
  |  Branch (7177:26): [True: 220, False: 134]
  |  Branch (7177:50): [True: 66, False: 154]
  ------------------
 7178|    186|        handler.on_error("Invalid argument ID");
 7179|    186|        return begin;
 7180|    186|    }
 7181|    288|    handler(idx);
 7182|       |
 7183|    288|    return begin;
 7184|    474|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapter8on_errorEPKc:
 7701|    434|        {
 7702|    434|            SCN_UNLIKELY_ATTR
 7703|    434|            handler.on_error(msg);
 7704|    434|        }
_ZN3scn2v46detail16parse_simple_intIwEEiRPKT_S5_:
 7139|  6.48k|{
 7140|  6.48k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  6.48k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  6.48k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7141|  6.48k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  930|  6.48k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  6.48k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7142|       |
 7143|  6.48k|    unsigned long long value = 0;
 7144|  9.54k|    do {
 7145|  9.54k|        value *= 10;
 7146|  9.54k|        value += static_cast<unsigned long long>(*begin - '0');
 7147|  9.54k|        if (value >
  ------------------
  |  Branch (7147:13): [True: 56, False: 9.48k]
  ------------------
 7148|  9.54k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 7149|     56|            return -1;
 7150|     56|        }
 7151|  9.48k|        ++begin;
 7152|  9.48k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (7152:14): [True: 9.19k, False: 290]
  |  Branch (7152:30): [True: 8.65k, False: 544]
  |  Branch (7152:47): [True: 3.05k, False: 5.59k]
  ------------------
 7153|  6.43k|    return static_cast<int>(value);
 7154|  6.48k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEm:
 7696|    288|        {
 7697|    288|            arg_id = handler.on_arg_id(id);
 7698|    288|        }
_ZN3scn2v424basic_scan_parse_contextIwE12check_arg_idEm:
 6298|    288|    {
 6299|    288|        if (SCN_UNLIKELY(m_next_arg_id > 0)) {
  ------------------
  |  |  865|    288|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 72, False: 216]
  |  |  ------------------
  ------------------
 6300|     72|            on_error(
 6301|     72|                "Cannot switch from manual to automatic argument indexing");
 6302|     72|            return;
 6303|     72|        }
 6304|    216|        m_next_arg_id = -1;
 6305|    216|        do_check_arg_id(id);
 6306|    216|    }
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7692|  10.0k|        {
 7693|  10.0k|            arg_id = handler.on_arg_id();
 7694|  10.0k|        }
_ZN3scn2v424basic_scan_parse_contextIwE10advance_toEPKw:
 6280|  7.77k|    {
 6281|  7.77k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6282|  7.77k|    }
_ZNK3scn2v424basic_scan_parse_contextIwE5beginEv:
 6269|  17.8k|    {
 6270|  17.8k|        return m_format.data();
 6271|  17.8k|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7869|  10.1k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|  10.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7870|  10.1k|    {
 7871|  10.1k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|  10.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  10.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7872|  10.1k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7605|  10.1k|{
 7606|  10.1k|    auto do_presentation = [&]() -> const CharT* {
 7607|  10.1k|        if (*begin == CharT{'['}) {
 7608|  10.1k|            auto set = parse_presentation_set(begin, end, handler);
 7609|  10.1k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7610|       |                // clang-format off
 7611|  10.1k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|  10.1k|                return begin;
 7614|  10.1k|            }
 7615|  10.1k|            handler.on_character_set_string(set);
 7616|  10.1k|            return begin;
 7617|  10.1k|        }
 7618|  10.1k|        if (*begin == CharT{'/'}) {
 7619|  10.1k|            return parse_presentation_regex(begin, end, handler);
 7620|  10.1k|        }
 7621|  10.1k|        presentation_type type = parse_presentation_type(*begin++);
 7622|  10.1k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7623|  10.1k|            handler.on_error("Invalid type specifier in format string");
 7624|  10.1k|            return begin;
 7625|  10.1k|        }
 7626|  10.1k|        handler.on_type(type);
 7627|  10.1k|        return begin;
 7628|  10.1k|    };
 7629|       |
 7630|  10.1k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7630:9): [True: 9.17k, False: 936]
  |  Branch (7630:28): [True: 2.35k, False: 6.82k]
  ------------------
 7631|  10.1k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7631:9): [True: 266, False: 2.09k]
  |  Branch (7631:36): [True: 232, False: 34]
  ------------------
 7632|    232|        return do_presentation();
 7633|    232|    }
 7634|       |
 7635|  9.88k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  9.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 9.88k]
  |  |  ------------------
  ------------------
 7636|      0|        handler.on_error("Unexpected end of format string");
 7637|      0|        return begin;
 7638|      0|    }
 7639|       |
 7640|  9.88k|    begin = parse_align(begin, end, handler);
 7641|  9.88k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  9.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 102, False: 9.77k]
  |  |  ------------------
  ------------------
 7642|    102|        handler.on_error("Unexpected end of format string");
 7643|    102|        return begin;
 7644|    102|    }
 7645|       |
 7646|  9.77k|    begin = parse_width(begin, end, handler);
 7647|  9.77k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  9.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 98, False: 9.68k]
  |  |  ------------------
  ------------------
 7648|     98|        handler.on_error("Unexpected end of format string");
 7649|     98|        return begin;
 7650|     98|    }
 7651|       |
 7652|  9.68k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7652:9): [True: 3.28k, False: 6.39k]
  ------------------
 7653|  3.28k|        ++begin;
 7654|  3.28k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  3.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34, False: 3.24k]
  |  |  ------------------
  ------------------
 7655|     34|            handler.on_error("Unexpected end of format string");
 7656|     34|            return begin;
 7657|     34|        }
 7658|  3.24k|        begin = parse_precision(begin, end, handler);
 7659|  3.24k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  3.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 98, False: 3.15k]
  |  |  ------------------
  ------------------
 7660|     98|            handler.on_error("Unexpected end of format string");
 7661|     98|            return begin;
 7662|     98|        }
 7663|  3.24k|    }
 7664|       |
 7665|  9.54k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7665:9): [True: 428, False: 9.12k]
  ------------------
 7666|    428|        handler.on_localized();
 7667|    428|        ++begin;
 7668|    428|    }
 7669|  9.54k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  9.54k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 52, False: 9.49k]
  |  |  ------------------
  ------------------
 7670|     52|        handler.on_error("Unexpected end of format string");
 7671|     52|        return begin;
 7672|     52|    }
 7673|       |
 7674|  9.49k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7674:9): [True: 9.49k, False: 0]
  |  Branch (7674:25): [True: 5.74k, False: 3.75k]
  ------------------
 7675|  5.74k|        do_presentation();
 7676|  5.74k|    }
 7677|  9.49k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  9.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.40k, False: 8.09k]
  |  |  ------------------
  ------------------
 7678|  1.40k|        handler.on_error("Unexpected end of format string");
 7679|  1.40k|        return begin;
 7680|  1.40k|    }
 7681|       |
 7682|  8.09k|    return begin;
 7683|  9.49k|}
_ZN3scn2v46detail15is_ascii_letterIwEEbT_:
 7254|  2.35k|{
 7255|  2.35k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7255:13): [True: 230, False: 2.12k]
  |  Branch (7255:33): [True: 196, False: 34]
  ------------------
 7256|  2.35k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7256:13): [True: 140, False: 2.02k]
  |  Branch (7256:33): [True: 70, False: 70]
  ------------------
 7257|  2.35k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7606|  5.97k|    auto do_presentation = [&]() -> const CharT* {
 7607|  5.97k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7607:13): [True: 3.10k, False: 2.87k]
  ------------------
 7608|  3.10k|            auto set = parse_presentation_set(begin, end, handler);
 7609|  3.10k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|  3.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 602, False: 2.50k]
  |  |  ------------------
  ------------------
 7610|       |                // clang-format off
 7611|    602|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|    602|                return begin;
 7614|    602|            }
 7615|  2.50k|            handler.on_character_set_string(set);
 7616|  2.50k|            return begin;
 7617|  3.10k|        }
 7618|  2.87k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7618:13): [True: 42, False: 2.83k]
  ------------------
 7619|     42|            return parse_presentation_regex(begin, end, handler);
 7620|     42|        }
 7621|  2.83k|        presentation_type type = parse_presentation_type(*begin++);
 7622|  2.83k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|  2.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 382, False: 2.44k]
  |  |  ------------------
  ------------------
 7623|    382|            handler.on_error("Invalid type specifier in format string");
 7624|    382|            return begin;
 7625|    382|        }
 7626|  2.44k|        handler.on_type(type);
 7627|  2.44k|        return begin;
 7628|  2.83k|    };
impl.cpp:_ZN3scn2v46detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEENSt3__117basic_string_viewIT_NSI_11char_traitsISK_EEEERPKSK_SP_OT0_:
 7444|  3.10k|{
 7445|  3.10k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  3.10k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.10k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7446|  3.10k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  930|  3.10k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.10k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7447|       |
 7448|  3.10k|    auto start = begin;
 7449|  3.10k|    ++begin;
 7450|       |
 7451|  3.10k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  3.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 36, False: 3.06k]
  |  |  ------------------
  ------------------
 7452|       |        // clang-format off
 7453|     36|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7454|       |        // clang-format on
 7455|     36|        return {};
 7456|     36|    }
 7457|  3.06k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7457:9): [True: 1.13k, False: 1.93k]
  ------------------
 7458|  1.13k|        handler.on_charset_inverted();
 7459|  1.13k|        ++begin;
 7460|  1.13k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  1.13k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34, False: 1.10k]
  |  |  ------------------
  ------------------
 7461|       |            // clang-format off
 7462|     34|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7463|       |            // clang-format on
 7464|     34|            return {};
 7465|     34|        }
 7466|  1.10k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7466:13): [True: 52, False: 1.04k]
  ------------------
 7467|     52|            handler.on_charset_single(char32_t{']'});
 7468|     52|            ++begin;
 7469|     52|        }
 7470|  1.10k|    }
 7471|  1.93k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7471:14): [True: 34, False: 1.90k]
  ------------------
 7472|     34|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7473|     34|    }
 7474|       |
 7475|  36.1k|    while (begin != end) {
  ------------------
  |  Branch (7475:12): [True: 35.7k, False: 356]
  ------------------
 7476|  35.7k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|  35.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 142, False: 35.6k]
  |  |  ------------------
  ------------------
 7477|    142|            break;
 7478|    142|        }
 7479|       |
 7480|  35.6k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7480:13): [True: 2.50k, False: 33.1k]
  ------------------
 7481|  2.50k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7482|  2.50k|        }
 7483|       |
 7484|  33.1k|        parse_presentation_set_literal(begin, end, handler);
 7485|  33.1k|    }
 7486|       |
 7487|    498|    SCN_UNLIKELY_ATTR
 7488|    498|    handler.on_error("Invalid [character set] specifier in format string");
 7489|    498|    return {};
 7490|  3.00k|}
impl.cpp:_ZN3scn2v46detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEvRPKT_SK_OT0_:
 7408|  33.1k|{
 7409|  33.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  33.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  33.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7410|       |
 7411|  33.1k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7412|  33.1k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  865|  33.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 106, False: 33.0k]
  |  |  ------------------
  ------------------
 7413|    106|        return;
 7414|    106|    }
 7415|       |
 7416|  33.0k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7416:9): [True: 32.8k, False: 124]
  |  Branch (7416:25): [True: 1.28k, False: 31.5k]
  |  Branch (7416:49): [True: 1.25k, False: 34]
  ------------------
 7417|  33.0k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7417:9): [True: 1.20k, False: 52]
  ------------------
 7418|  1.20k|        ++begin;
 7419|       |
 7420|  1.20k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7421|  1.20k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  865|  1.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34, False: 1.16k]
  |  |  ------------------
  ------------------
 7422|     34|            return;
 7423|     34|        }
 7424|       |
 7425|  1.16k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  865|  1.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34, False: 1.13k]
  |  |  ------------------
  ------------------
 7426|       |            // clang-format off
 7427|     34|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7428|       |            // clang-format on
 7429|     34|            return;
 7430|     34|        }
 7431|       |
 7432|  1.13k|        handler.on_charset_range(cp_first, cp_second + 1);
 7433|  1.13k|        return;
 7434|  1.16k|    }
 7435|       |
 7436|  31.8k|    handler.on_charset_single(cp_first);
 7437|  31.8k|}
impl.cpp:_ZN3scn2v46detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEDiRPKT_SK_OT0_:
 7384|  34.3k|{
 7385|  34.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  34.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7386|       |
 7387|  34.3k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7388|  34.3k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  865|  68.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 34.3k]
  |  |  |  Branch (865:45): [True: 0, False: 34.3k]
  |  |  |  Branch (865:45): [True: 0, False: 34.3k]
  |  |  ------------------
  ------------------
 7389|      0|        handler.on_error("Invalid encoding in format string");
 7390|      0|        return invalid_code_point;
 7391|      0|    }
 7392|       |
 7393|  34.3k|    const auto cp =
 7394|  34.3k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7395|  34.3k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|  34.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 140, False: 34.1k]
  |  |  ------------------
  ------------------
 7396|    140|        handler.on_error("Invalid encoding in format string");
 7397|    140|        return invalid_code_point;
 7398|    140|    }
 7399|       |
 7400|  34.1k|    begin += len;
 7401|  34.1k|    return cp;
 7402|  34.3k|}
_ZN3scn2v46detail12specs_setter23on_character_set_stringIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7098|  2.50k|    {
 7099|  2.50k|        m_specs.charset_string_data = fmt.data();
 7100|  2.50k|        m_specs.charset_string_size = fmt.size();
 7101|  2.50k|        on_type(presentation_type::string_set);
 7102|  2.50k|    }
impl.cpp:_ZN3scn2v46detail24parse_presentation_regexIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_RSK_SK_OT0_:
 7496|     42|{
 7497|     42|#if !SCN_DISABLE_REGEX
 7498|     42|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|     42|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     42|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7499|     42|    SCN_EXPECT(*begin == CharT{'/'});
  ------------------
  |  |  930|     42|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     42|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7500|       |
 7501|       |    if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 7502|     42|                  std::is_same_v<CharT, wchar_t>) {
 7503|     42|        handler.on_error("Regex backend doesn't support wide strings as input");
 7504|     42|        return begin;
 7505|     42|    }
 7506|       |
 7507|      0|    auto start = begin;
 7508|     42|    ++begin;
 7509|       |
 7510|     42|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|     42|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 42]
  |  |  ------------------
  ------------------
 7511|      0|        handler.on_error("Unexpected end of regex in format string");
 7512|      0|        return begin;
 7513|      0|    }
 7514|       |
 7515|     42|    handler.on_type(presentation_type::regex);
 7516|     42|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (7516:12): [True: 0, False: 42]
  ------------------
 7517|      0|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7517:13): [True: 0, False: 0]
  ------------------
 7518|      0|            if (*(begin - 1) != CharT{'\\'}) {
  ------------------
  |  Branch (7518:17): [True: 0, False: 0]
  ------------------
 7519|      0|                break;
 7520|      0|            }
 7521|      0|            else {
 7522|      0|                handler.on_type(presentation_type::regex_escaped);
 7523|      0|            }
 7524|      0|        }
 7525|      0|    }
 7526|     42|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|     42|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 42]
  |  |  ------------------
  ------------------
 7527|      0|        handler.on_error("Unexpected end of regex in format string");
 7528|      0|        return begin;
 7529|      0|    }
 7530|       |
 7531|     42|    auto regex_end = begin;
 7532|     42|    auto regex_pattern = make_string_view_from_pointers(start + 1, regex_end);
 7533|     42|    if (SCN_UNLIKELY(regex_pattern.empty())) {
  ------------------
  |  |  865|     42|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 42]
  |  |  ------------------
  ------------------
 7534|      0|        handler.on_error("Invalid (empty) regex in format string");
 7535|      0|        return begin;
 7536|      0|    }
 7537|     42|    handler.on_regex_pattern(regex_pattern);
 7538|     42|    ++begin;
 7539|       |
 7540|     42|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|     42|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 42]
  |  |  ------------------
  ------------------
 7541|      0|        handler.on_error("Unexpected end of regex in format string");
 7542|      0|        return begin;
 7543|      0|    }
 7544|       |
 7545|     42|    regex_flags flags{regex_flags::none};
 7546|     42|    constexpr std::array<std::pair<char, regex_flags>, 4> flag_map{
 7547|     42|        {{'m', regex_flags::multiline},
 7548|     42|         {'s', regex_flags::singleline},
 7549|     42|         {'i', regex_flags::nocase},
 7550|     42|         {'n', regex_flags::nocapture}}};
 7551|     42|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (7551:12): [True: 0, False: 42]
  ------------------
 7552|      0|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7552:13): [True: 0, False: 0]
  ------------------
 7553|      0|            break;
 7554|      0|        }
 7555|      0|        bool found_flag = false;
 7556|      0|        for (auto flag : flag_map) {
  ------------------
  |  Branch (7556:24): [True: 0, False: 0]
  ------------------
 7557|      0|            if (static_cast<CharT>(flag.first) != *begin) {
  ------------------
  |  Branch (7557:17): [True: 0, False: 0]
  ------------------
 7558|      0|                continue;
 7559|      0|            }
 7560|      0|            if ((flags & flag.second) != regex_flags::none) {
  ------------------
  |  Branch (7560:17): [True: 0, False: 0]
  ------------------
 7561|      0|                handler.on_error("Flag set multiple times in regex");
 7562|      0|                return begin;
 7563|      0|            }
 7564|       |#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 7565|       |            if (*begin == CharT{'s'}) {
 7566|       |                // clang-format off
 7567|       |                handler.on_error("/s flag for regex isn't supported by regex backend");
 7568|       |                // clang-format on
 7569|       |            }
 7570|       |#if !SCN_HAS_STD_REGEX_MULTILINE
 7571|       |            if (*begin == CharT{'m'}) {
 7572|       |                // clang-format off
 7573|       |                handler.on_error("/m flag for regex isn't supported by regex backend");
 7574|       |                // clang-format on
 7575|       |            }
 7576|       |#endif
 7577|       |#endif
 7578|      0|            flags |= flag.second;
 7579|      0|            found_flag = true;
 7580|      0|            break;
 7581|      0|        }
 7582|      0|        if (!found_flag) {
  ------------------
  |  Branch (7582:13): [True: 0, False: 0]
  ------------------
 7583|      0|            handler.on_error("Invalid flag in regex");
 7584|      0|            return begin;
 7585|      0|        }
 7586|      0|    }
 7587|     42|    handler.on_regex_flags(flags);
 7588|       |
 7589|     42|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|     42|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 42]
  |  |  ------------------
  ------------------
 7590|      0|        handler.on_error("Unexpected end of regex in format string");
 7591|      0|        return begin;
 7592|      0|    }
 7593|       |
 7594|     42|    return begin;
 7595|       |#else
 7596|       |    handler.on_error("Regular expression support is disabled");
 7597|       |    return {};
 7598|       |#endif
 7599|     42|}
_ZN3scn2v46detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 7202|  2.83k|{
 7203|  2.83k|    switch (type) {
 7204|     88|        case 'b':
  ------------------
  |  Branch (7204:9): [True: 88, False: 2.74k]
  ------------------
 7205|    122|        case 'B':
  ------------------
  |  Branch (7205:9): [True: 34, False: 2.79k]
  ------------------
 7206|    122|            return presentation_type::int_binary;
 7207|    106|        case 'd':
  ------------------
  |  Branch (7207:9): [True: 106, False: 2.72k]
  ------------------
 7208|    106|            return presentation_type::int_decimal;
 7209|    160|        case 'i':
  ------------------
  |  Branch (7209:9): [True: 160, False: 2.67k]
  ------------------
 7210|    160|            return presentation_type::int_generic;
 7211|    124|        case 'u':
  ------------------
  |  Branch (7211:9): [True: 124, False: 2.70k]
  ------------------
 7212|    124|            return presentation_type::int_unsigned_decimal;
 7213|    142|        case 'o':
  ------------------
  |  Branch (7213:9): [True: 142, False: 2.68k]
  ------------------
 7214|    142|            return presentation_type::int_octal;
 7215|     88|        case 'x':
  ------------------
  |  Branch (7215:9): [True: 88, False: 2.74k]
  ------------------
 7216|    140|        case 'X':
  ------------------
  |  Branch (7216:9): [True: 52, False: 2.77k]
  ------------------
 7217|    140|            return presentation_type::int_hex;
 7218|     34|        case 'r':
  ------------------
  |  Branch (7218:9): [True: 34, False: 2.79k]
  ------------------
 7219|     68|        case 'R':
  ------------------
  |  Branch (7219:9): [True: 34, False: 2.79k]
  ------------------
 7220|     68|            return presentation_type::int_arbitrary_base;
 7221|    150|        case 'a':
  ------------------
  |  Branch (7221:9): [True: 150, False: 2.68k]
  ------------------
 7222|    238|        case 'A':
  ------------------
  |  Branch (7222:9): [True: 88, False: 2.74k]
  ------------------
 7223|    238|            return presentation_type::float_hex;
 7224|     70|        case 'e':
  ------------------
  |  Branch (7224:9): [True: 70, False: 2.76k]
  ------------------
 7225|    104|        case 'E':
  ------------------
  |  Branch (7225:9): [True: 34, False: 2.79k]
  ------------------
 7226|    104|            return presentation_type::float_scientific;
 7227|     52|        case 'f':
  ------------------
  |  Branch (7227:9): [True: 52, False: 2.77k]
  ------------------
 7228|    140|        case 'F':
  ------------------
  |  Branch (7228:9): [True: 88, False: 2.74k]
  ------------------
 7229|    140|            return presentation_type::float_fixed;
 7230|     34|        case 'g':
  ------------------
  |  Branch (7230:9): [True: 34, False: 2.79k]
  ------------------
 7231|     86|        case 'G':
  ------------------
  |  Branch (7231:9): [True: 52, False: 2.77k]
  ------------------
 7232|     86|            return presentation_type::float_general;
 7233|    664|        case 's':
  ------------------
  |  Branch (7233:9): [True: 664, False: 2.16k]
  ------------------
 7234|    664|            return presentation_type::string;
 7235|    232|        case 'c':
  ------------------
  |  Branch (7235:9): [True: 232, False: 2.59k]
  ------------------
 7236|    232|            return presentation_type::character;
 7237|     34|        case '?':
  ------------------
  |  Branch (7237:9): [True: 34, False: 2.79k]
  ------------------
 7238|     34|            return presentation_type::escaped_character;
 7239|     88|        case 'p':
  ------------------
  |  Branch (7239:9): [True: 88, False: 2.74k]
  ------------------
 7240|     88|            return presentation_type::pointer;
 7241|      0|        case '[':
  ------------------
  |  Branch (7241:9): [True: 0, False: 2.83k]
  ------------------
 7242|      0|        case '/':
  ------------------
  |  Branch (7242:9): [True: 0, False: 2.83k]
  ------------------
 7243|       |            // Should be handled by parse_presentation_set and
 7244|       |            // parse_presentation_regex
 7245|      0|            SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7246|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7247|    382|        default:
  ------------------
  |  Branch (7247:9): [True: 382, False: 2.44k]
  ------------------
 7248|    382|            return presentation_type::none;
 7249|  2.83k|    }
 7250|  2.83k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7279|  9.88k|{
 7280|  9.88k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  9.88k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.88k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7281|       |
 7282|  9.88k|    auto check_align = [](wchar_t ch) {
 7283|  9.88k|        switch (ch) {
 7284|  9.88k|            case L'<':
 7285|  9.88k|                return align_type::left;
 7286|  9.88k|            case L'>':
 7287|  9.88k|                return align_type::right;
 7288|  9.88k|            case L'^':
 7289|  9.88k|                return align_type::center;
 7290|  9.88k|            default:
 7291|  9.88k|                return align_type::none;
 7292|  9.88k|        }
 7293|  9.88k|    };
 7294|       |
 7295|  9.88k|    auto potential_fill_len = code_point_length(begin, end);
 7296|  9.88k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|  19.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 9.88k]
  |  |  |  Branch (865:45): [True: 0, False: 9.88k]
  |  |  |  Branch (865:45): [True: 0, False: 9.88k]
  |  |  ------------------
  ------------------
 7297|  9.88k|                     std::distance(begin, end) < potential_fill_len)) {
 7298|      0|        handler.on_error("Invalid encoding in fill character");
 7299|      0|        return begin;
 7300|      0|    }
 7301|       |
 7302|  9.88k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7303|       |
 7304|  9.88k|    auto potential_fill = std::basic_string_view<CharT>{
 7305|  9.88k|        begin, static_cast<size_t>(potential_fill_len)};
 7306|  9.88k|    const auto begin_before_fill = begin;
 7307|  9.88k|    begin += potential_fill_len;
 7308|       |
 7309|  9.88k|    if (begin == end) {
  ------------------
  |  Branch (7309:9): [True: 936, False: 8.94k]
  ------------------
 7310|    936|        return begin_before_fill;
 7311|    936|    }
 7312|       |
 7313|  8.94k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7314|  8.94k|    const auto begin_after_fill = begin;
 7315|  8.94k|    ++begin;
 7316|       |
 7317|  8.94k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7317:9): [True: 8.94k, False: 0]
  ------------------
 7318|  8.94k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|  8.94k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 42, False: 8.90k]
  |  |  ------------------
  ------------------
 7319|     42|            handler.on_error("Invalid fill character '{' in format string");
 7320|     42|            return begin;
 7321|     42|        }
 7322|  8.90k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7322:13): [True: 1.53k, False: 7.36k]
  ------------------
 7323|  1.53k|            return begin_before_fill;
 7324|  1.53k|        }
 7325|  8.90k|    }
 7326|       |
 7327|  7.36k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7327:9): [True: 6.56k, False: 798]
  ------------------
 7328|  6.56k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7328:13): [True: 780, False: 5.78k]
  ------------------
 7329|    780|            handler.on_align(potential_align_on_fill);
 7330|    780|            return begin_after_fill;
 7331|    780|        }
 7332|  5.78k|        return begin_before_fill;
 7333|  6.56k|    }
 7334|       |
 7335|    798|    handler.on_fill(potential_fill);
 7336|    798|    handler.on_align(potential_align_after_fill);
 7337|    798|    return begin;
 7338|  7.36k|}
_ZN3scn2v46detail17code_point_lengthIwEEiPKT_S5_:
 7261|  9.88k|{
 7262|  9.88k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  9.88k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.88k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7263|  9.88k|    if constexpr (sizeof(CharT) != 1) {
 7264|  9.88k|        return 1;
 7265|       |    }
 7266|       |    else {
 7267|       |        const auto lengths =
 7268|       |            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7269|       |            "\3\4";
 7270|       |        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7271|       |        return len;
 7272|       |    }
 7273|  9.88k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7282|  18.8k|    auto check_align = [](wchar_t ch) {
 7283|  18.8k|        switch (ch) {
 7284|    466|            case L'<':
  ------------------
  |  Branch (7284:13): [True: 466, False: 18.3k]
  ------------------
 7285|    466|                return align_type::left;
 7286|    230|            case L'>':
  ------------------
  |  Branch (7286:13): [True: 230, False: 18.5k]
  ------------------
 7287|    230|                return align_type::right;
 7288|  1.31k|            case L'^':
  ------------------
  |  Branch (7288:13): [True: 1.31k, False: 17.5k]
  ------------------
 7289|  1.31k|                return align_type::center;
 7290|  16.8k|            default:
  ------------------
  |  Branch (7290:13): [True: 16.8k, False: 2.01k]
  ------------------
 7291|  16.8k|                return align_type::none;
 7292|  18.8k|        }
 7293|  18.8k|    };
_ZN3scn2v46detail12specs_setter7on_fillIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7019|    798|    {
 7020|    798|        m_specs.fill = fill;
 7021|    798|    }
_ZN3scn2v46detail9fill_typeaSIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6900|    798|    {
 6901|    798|        SCN_EXPECT(!s.empty());
  ------------------
  |  |  930|    798|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    798|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6902|    798|        SCN_EXPECT(s.size() * sizeof(CharT) <= max_size);
  ------------------
  |  |  930|    798|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    798|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6903|       |        if constexpr (sizeof(CharT) == 1) {
 6904|       |            for (size_t i = 0; i < s.size(); ++i) {
 6905|       |                SCN_GCC_PUSH
 6906|       |                SCN_GCC_IGNORE("-Wstringop-overflow")  // false positive
 6907|       |                m_data[i] = s[i];
 6908|       |                SCN_GCC_POP
 6909|       |            }
 6910|       |            m_size = static_cast<unsigned char>(s.size());
 6911|       |        }
 6912|       |        else if constexpr (sizeof(CharT) == 2) {
 6913|       |            m_data[0] = static_cast<char>(static_cast<unsigned>(s.front()));
 6914|       |            m_data[1] =
 6915|       |                static_cast<char>(static_cast<unsigned>(s.front()) >> 8);
 6916|       |            if (s.size() == 1) {
 6917|       |                return;
 6918|       |            }
 6919|       |            m_data[2] = static_cast<char>(static_cast<unsigned>(s[1]));
 6920|       |            m_data[3] = static_cast<char>(static_cast<unsigned>(s[1]) >> 8);
 6921|       |        }
 6922|    798|        else {
 6923|    798|            const auto front = static_cast<unsigned>(s.front());
 6924|    798|            m_data[0] = static_cast<char>(front);
 6925|    798|            m_data[1] = static_cast<char>(front >> 8);
 6926|    798|            m_data[2] = static_cast<char>(front >> 16);
 6927|    798|            m_data[3] = static_cast<char>(front >> 24);
 6928|    798|        }
 6929|    798|    }
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7344|  9.77k|{
 7345|  9.77k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  9.77k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.77k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7346|       |
 7347|  9.77k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7347:9): [True: 6.84k, False: 2.93k]
  |  Branch (7347:33): [True: 3.06k, False: 3.77k]
  ------------------
 7348|  3.06k|        int width = parse_simple_int(begin, end);
 7349|  3.06k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|  3.06k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 3.03k, False: 28]
  |  |  ------------------
  ------------------
 7350|  3.03k|            handler.on_width(width);
 7351|  3.03k|        }
 7352|     28|        else {
 7353|     28|            handler.on_error("Invalid field width");
 7354|     28|            return begin;
 7355|     28|        }
 7356|  3.06k|    }
 7357|  9.75k|    return begin;
 7358|  9.77k|}
impl.cpp:_ZN3scn2v46detail15parse_precisionIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7364|  3.24k|{
 7365|  3.24k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  3.24k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.24k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7366|       |
 7367|  3.24k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7367:9): [True: 3.21k, False: 34]
  |  Branch (7367:33): [True: 3.14k, False: 70]
  ------------------
 7368|  3.14k|        int prec = parse_simple_int(begin, end);
 7369|  3.14k|        if (SCN_LIKELY(prec != -1)) {
  ------------------
  |  |  864|  3.14k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 3.14k, False: 0]
  |  |  ------------------
  ------------------
 7370|  3.14k|            handler.on_precision(prec);
 7371|  3.14k|        }
 7372|      0|        else {
 7373|      0|            handler.on_error("Invalid field precision");
 7374|      0|            return begin;
 7375|      0|        }
 7376|  3.14k|    }
 7377|  3.24k|    return begin;
 7378|  3.24k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEE12on_localizedEv:
 7875|    428|    {
 7876|    428|        const auto cat = get_category_for_arg_type(m_arg_type);
 7877|    428|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7877:13): [True: 386, False: 42]
  ------------------
 7878|    428|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7878:13): [True: 344, False: 42]
  ------------------
 7879|    428|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7879:13): [True: 302, False: 42]
  ------------------
 7880|    428|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7880:13): [True: 260, False: 42]
  ------------------
 7881|    260|            SCN_UNLIKELY_ATTR
 7882|       |            // clang-format off
 7883|    260|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7884|       |            // clang-format on
 7885|    260|        }
 7886|       |
 7887|    168|        Handler::on_localized();
 7888|    168|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9299|  7.68k|{
 9300|  7.68k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  7.68k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|  7.68k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|  7.68k|{
 9201|  7.68k|#define SCN_VISIT(Type)                                                \
 9202|  7.68k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|  7.68k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|  7.68k|    }                                                                  \
 9205|  7.68k|    else {                                                             \
 9206|  7.68k|        return vis(monostate_val);                                     \
 9207|  7.68k|    }
 9208|       |
 9209|  7.68k|    monostate monostate_val{};
 9210|       |
 9211|  7.68k|    switch (get_arg_type(arg)) {
 9212|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 0, False: 7.68k]
  ------------------
 9213|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9214|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 7.68k]
  ------------------
 9215|      0|            SCN_VISIT(short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9216|    876|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 876, False: 6.80k]
  ------------------
 9217|    876|            SCN_VISIT(int);
  ------------------
  |  | 9202|    876|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|    876|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|    876|    }                                                                  \
  |  | 9205|    876|    else {                                                             \
  |  | 9206|    876|        return vis(monostate_val);                                     \
  |  | 9207|    876|    }
  ------------------
 9218|    876|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 7.68k]
  ------------------
 9219|    876|            SCN_VISIT(long);
  ------------------
  |  | 9202|    876|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|    876|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|    876|    }                                                                  \
  |  | 9205|    876|    else {                                                             \
  |  | 9206|    876|        return vis(monostate_val);                                     \
  |  | 9207|    876|    }
  ------------------
 9220|    876|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 0, False: 7.68k]
  ------------------
 9221|    876|            SCN_VISIT(long long);
  ------------------
  |  | 9202|    876|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|    876|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|    876|    }                                                                  \
  |  | 9205|    876|    else {                                                             \
  |  | 9206|    876|        return vis(monostate_val);                                     \
  |  | 9207|    876|    }
  ------------------
 9222|    876|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 0, False: 7.68k]
  ------------------
 9223|    876|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|    876|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|    876|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|    876|    }                                                                  \
  |  | 9205|    876|    else {                                                             \
  |  | 9206|    876|        return vis(monostate_val);                                     \
  |  | 9207|    876|    }
  ------------------
 9224|    876|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 7.68k]
  ------------------
 9225|    876|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|    876|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|    876|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|    876|    }                                                                  \
  |  | 9205|    876|    else {                                                             \
  |  | 9206|    876|        return vis(monostate_val);                                     \
  |  | 9207|    876|    }
  ------------------
 9226|  1.75k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 876, False: 6.80k]
  ------------------
 9227|  1.75k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|  1.75k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  1.75k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  1.75k|    }                                                                  \
  |  | 9205|  1.75k|    else {                                                             \
  |  | 9206|  1.75k|        return vis(monostate_val);                                     \
  |  | 9207|  1.75k|    }
  ------------------
 9228|  1.75k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 7.68k]
  ------------------
 9229|  1.75k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|  1.75k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  1.75k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  1.75k|    }                                                                  \
  |  | 9205|  1.75k|    else {                                                             \
  |  | 9206|  1.75k|        return vis(monostate_val);                                     \
  |  | 9207|  1.75k|    }
  ------------------
 9230|  1.75k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 0, False: 7.68k]
  ------------------
 9231|  1.75k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|  1.75k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  1.75k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  1.75k|    }                                                                  \
  |  | 9205|  1.75k|    else {                                                             \
  |  | 9206|  1.75k|        return vis(monostate_val);                                     \
  |  | 9207|  1.75k|    }
  ------------------
 9232|  2.58k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 836, False: 6.84k]
  ------------------
 9233|  2.58k|            SCN_VISIT(void*);
  ------------------
  |  | 9202|  2.58k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  2.58k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  2.58k|    }                                                                  \
  |  | 9205|  2.58k|    else {                                                             \
  |  | 9206|  2.58k|        return vis(monostate_val);                                     \
  |  | 9207|  2.58k|    }
  ------------------
 9234|  3.46k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 876, False: 6.80k]
  ------------------
 9235|  3.46k|            SCN_VISIT(bool);
  ------------------
  |  | 9202|  3.46k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  3.46k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  3.46k|    }                                                                  \
  |  | 9205|  3.46k|    else {                                                             \
  |  | 9206|  3.46k|        return vis(monostate_val);                                     \
  |  | 9207|  3.46k|    }
  ------------------
 9236|  3.46k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 7.68k]
  ------------------
 9237|  3.46k|            SCN_VISIT(char);
  ------------------
  |  | 9202|  3.46k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  3.46k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  3.46k|    }                                                                  \
  |  | 9205|  3.46k|    else {                                                             \
  |  | 9206|  3.46k|        return vis(monostate_val);                                     \
  |  | 9207|  3.46k|    }
  ------------------
 9238|  4.30k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 836, False: 6.84k]
  ------------------
 9239|  4.30k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|  4.30k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  4.30k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  4.30k|    }                                                                  \
  |  | 9205|  4.30k|    else {                                                             \
  |  | 9206|  4.30k|        return vis(monostate_val);                                     \
  |  | 9207|  4.30k|    }
  ------------------
 9240|  4.30k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 7.68k]
  ------------------
 9241|  4.30k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|  4.30k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  4.30k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  4.30k|    }                                                                  \
  |  | 9205|  4.30k|    else {                                                             \
  |  | 9206|  4.30k|        return vis(monostate_val);                                     \
  |  | 9207|  4.30k|    }
  ------------------
 9242|  4.30k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 7.68k]
  ------------------
 9243|  4.30k|            SCN_VISIT(float);
  ------------------
  |  | 9202|  4.30k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  4.30k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  4.30k|    }                                                                  \
  |  | 9205|  4.30k|    else {                                                             \
  |  | 9206|  4.30k|        return vis(monostate_val);                                     \
  |  | 9207|  4.30k|    }
  ------------------
 9244|  5.17k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 876, False: 6.80k]
  ------------------
 9245|  5.17k|            SCN_VISIT(double);
  ------------------
  |  | 9202|  5.17k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  5.17k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  5.17k|    }                                                                  \
  |  | 9205|  5.17k|    else {                                                             \
  |  | 9206|  5.17k|        return vis(monostate_val);                                     \
  |  | 9207|  5.17k|    }
  ------------------
 9246|  5.17k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 7.68k]
  ------------------
 9247|  5.17k|            SCN_VISIT(long double);
  ------------------
  |  | 9202|  5.17k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  5.17k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  5.17k|    }                                                                  \
  |  | 9205|  5.17k|    else {                                                             \
  |  | 9206|  5.17k|        return vis(monostate_val);                                     \
  |  | 9207|  5.17k|    }
  ------------------
 9248|  5.17k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 7.68k]
  ------------------
 9249|  5.17k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|  5.17k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  5.17k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  5.17k|    }                                                                  \
  |  | 9205|  5.17k|    else {                                                             \
  |  | 9206|  5.17k|        return vis(monostate_val);                                     \
  |  | 9207|  5.17k|    }
  ------------------
 9250|  6.01k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 836, False: 6.84k]
  ------------------
 9251|  6.01k|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|  6.01k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  6.01k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  6.01k|    }                                                                  \
  |  | 9205|  6.01k|    else {                                                             \
  |  | 9206|  6.01k|        return vis(monostate_val);                                     \
  |  | 9207|  6.01k|    }
  ------------------
 9252|  6.84k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 836, False: 6.84k]
  ------------------
 9253|  6.84k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|  6.84k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  6.84k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  6.84k|    }                                                                  \
  |  | 9205|  6.84k|    else {                                                             \
  |  | 9206|  6.84k|        return vis(monostate_val);                                     \
  |  | 9207|  6.84k|    }
  ------------------
 9254|  7.68k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 836, False: 6.84k]
  ------------------
 9255|  7.68k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|  7.68k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  7.68k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  7.68k|    }                                                                  \
  |  | 9205|  7.68k|    else {                                                             \
  |  | 9206|  7.68k|        return vis(monostate_val);                                     \
  |  | 9207|  7.68k|    }
  ------------------
 9256|  7.68k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 7.68k]
  ------------------
 9257|  7.68k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|  7.68k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  7.68k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  7.68k|    }                                                                  \
  |  | 9205|  7.68k|    else {                                                             \
  |  | 9206|  7.68k|        return vis(monostate_val);                                     \
  |  | 9207|  7.68k|    }
  ------------------
 9258|  7.68k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 7.68k]
  ------------------
 9259|  7.68k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|  7.68k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  7.68k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  7.68k|    }                                                                  \
  |  | 9205|  7.68k|    else {                                                             \
  |  | 9206|  7.68k|        return vis(monostate_val);                                     \
  |  | 9207|  7.68k|    }
  ------------------
 9260|       |
 9261|  7.68k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 7.68k]
  ------------------
 9262|  7.68k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|  7.68k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|  7.68k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 7.68k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 7.68k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|  7.68k|            SCN_CLANG_POP
 9279|  7.68k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE5beginEv:
 3479|  3.18k|    {
 3480|  3.18k|        return m_iterator;
 3481|  3.18k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISH_vEEOT_:
 1569|    796|        : base(std::in_place, std::forward<U>(val)),
 1570|    796|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    796|    {
 1572|    796|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  440|    796|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    796|    {
  442|    796|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|    796|    {
 1316|    796|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE3endEv:
 3483|  1.59k|    {
 3484|  1.59k|        return m_sentinel;
 3485|  1.59k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEEC2ISG_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SG_EEvE4typeELPv0EEESO_SJ_:
 3464|  1.59k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  1.59k|    static_cast<    \
  |  |  935|  1.59k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  1.59k|    static_cast<    \
  |  |  935|  1.59k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  1.59k|    {
 3466|  1.59k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9has_valueEv:
  489|  1.59k|    {
  490|  1.59k|        return m_has_value;
  491|  1.59k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5valueISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1768|    796|    {
 1769|    796|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    796|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    796|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    796|        return this->get_value();
 1771|    796|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9get_valueEv:
  455|    796|    {
  456|    796|        return m_value;
  457|    796|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESI_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSO_:
 1978|    796|    {
 1979|    796|        return detail::transform_error_impl(std::move(*this),
 1980|    796|                                            std::forward<F>(f));
 1981|    796|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS6_IPKwS8_EENS4_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEE8sentinelILb1EEEEENS4_9eof_errorEEERFNS0_10scan_errorESK_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESM_EEDaOSR_OT0_:
 1461|    796|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|    796|    else {
 1472|    796|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|    796|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|    796|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 796, False: 0]
  |  |  ------------------
  ------------------
 1474|    796|                   ? result(*std::forward<Exp>(exp))
 1475|    796|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|    796|    }
 1479|    796|}
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSN_v:
 1804|    796|    {
 1805|    796|        return std::move(value());
 1806|    796|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1569|    796|        : base(std::in_place, std::forward<U>(val)),
 1570|    796|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    796|    {
 1572|    796|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  440|    796|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    796|    {
  442|    796|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|    796|    {
 1316|    796|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEcvbEv:
 1739|    796|    {
 1740|    796|        return has_value();
 1741|    796|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.59k|    {
  490|  1.59k|        return m_has_value;
  491|  1.59k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSN_v:
 1804|    796|    {
 1805|    796|        return std::move(value());
 1806|    796|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5valueISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1768|    796|    {
 1769|    796|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    796|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    796|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    796|        return this->get_value();
 1771|    796|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9get_valueEv:
  455|    796|    {
  456|    796|        return m_value;
  457|    796|    }

_ZN3scn2v44scanIJwERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  5.18k|{
   89|  5.18k|    auto result = make_scan_result<Source, Args...>();
   90|  5.18k|    fill_scan_result(result,
   91|  5.18k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  5.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  5.18k|                           make_scan_args<wscan_context>(result->values())));
   93|  5.18k|    return result;
   94|  5.18k|}
_ZN3scn2v45vscanIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESE_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEEEOSA_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextINSF_16buffer_range_tagEwEEEE:
   43|  46.6k|{
   44|  46.6k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  936|  46.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  46.6k|}
_ZN3scn2v44scanIJwENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  5.18k|{
  131|  5.18k|    auto result = make_scan_result<Source, Args...>();
  132|  5.18k|    fill_scan_result(result,
  133|  5.18k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  5.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  5.18k|                           make_scan_args<wscan_context>(result->values())));
  135|  5.18k|    return result;
  136|  5.18k|}
_ZN3scn2v45vscanIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS2_6localeETnPvLPv0EEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextINSI_16buffer_range_tagEwEEEE:
   59|  46.6k|{
   60|  46.6k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  936|  46.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  46.6k|}
_ZN3scn2v44scanIJiERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  5.18k|{
   89|  5.18k|    auto result = make_scan_result<Source, Args...>();
   90|  5.18k|    fill_scan_result(result,
   91|  5.18k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  5.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  5.18k|                           make_scan_args<wscan_context>(result->values())));
   93|  5.18k|    return result;
   94|  5.18k|}
_ZN3scn2v44scanIJiENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  5.18k|{
  131|  5.18k|    auto result = make_scan_result<Source, Args...>();
  132|  5.18k|    fill_scan_result(result,
  133|  5.18k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  5.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  5.18k|                           make_scan_args<wscan_context>(result->values())));
  135|  5.18k|    return result;
  136|  5.18k|}
_ZN3scn2v44scanIJjERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  5.18k|{
   89|  5.18k|    auto result = make_scan_result<Source, Args...>();
   90|  5.18k|    fill_scan_result(result,
   91|  5.18k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  5.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  5.18k|                           make_scan_args<wscan_context>(result->values())));
   93|  5.18k|    return result;
   94|  5.18k|}
_ZN3scn2v44scanIJjENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  5.18k|{
  131|  5.18k|    auto result = make_scan_result<Source, Args...>();
  132|  5.18k|    fill_scan_result(result,
  133|  5.18k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  5.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  5.18k|                           make_scan_args<wscan_context>(result->values())));
  135|  5.18k|    return result;
  136|  5.18k|}
_ZN3scn2v44scanIJdERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  5.18k|{
   89|  5.18k|    auto result = make_scan_result<Source, Args...>();
   90|  5.18k|    fill_scan_result(result,
   91|  5.18k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  5.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  5.18k|                           make_scan_args<wscan_context>(result->values())));
   93|  5.18k|    return result;
   94|  5.18k|}
_ZN3scn2v44scanIJdENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  5.18k|{
  131|  5.18k|    auto result = make_scan_result<Source, Args...>();
  132|  5.18k|    fill_scan_result(result,
  133|  5.18k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  5.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  5.18k|                           make_scan_args<wscan_context>(result->values())));
  135|  5.18k|    return result;
  136|  5.18k|}
_ZN3scn2v44scanIJbERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  5.18k|{
   89|  5.18k|    auto result = make_scan_result<Source, Args...>();
   90|  5.18k|    fill_scan_result(result,
   91|  5.18k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  5.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  5.18k|                           make_scan_args<wscan_context>(result->values())));
   93|  5.18k|    return result;
   94|  5.18k|}
_ZN3scn2v44scanIJbENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  5.18k|{
  131|  5.18k|    auto result = make_scan_result<Source, Args...>();
  132|  5.18k|    fill_scan_result(result,
  133|  5.18k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  5.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  5.18k|                           make_scan_args<wscan_context>(result->values())));
  135|  5.18k|    return result;
  136|  5.18k|}
_ZN3scn2v44scanIJPvERNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELS2_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEEOSA_NS0_24basic_scan_format_stringIwNSL_13type_identityISA_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  5.18k|{
   89|  5.18k|    auto result = make_scan_result<Source, Args...>();
   90|  5.18k|    fill_scan_result(result,
   91|  5.18k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  5.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  5.18k|                           make_scan_args<wscan_context>(result->values())));
   93|  5.18k|    return result;
   94|  5.18k|}
_ZN3scn2v44scanIJPvENSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELS2_0ETnPvLS2_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEERKT0_OSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  5.18k|{
  131|  5.18k|    auto result = make_scan_result<Source, Args...>();
  132|  5.18k|    fill_scan_result(result,
  133|  5.18k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  5.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  5.18k|                           make_scan_args<wscan_context>(result->values())));
  135|  5.18k|    return result;
  136|  5.18k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEERNS2_17basic_string_viewIwNS4_IwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISE_EEP8_IO_FILEEESP_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSQ_13type_identityISE_E4typeEJDpNS12_ISW_E4typeEEEE:
   88|  5.18k|{
   89|  5.18k|    auto result = make_scan_result<Source, Args...>();
   90|  5.18k|    fill_scan_result(result,
   91|  5.18k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  5.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  5.18k|                           make_scan_args<wscan_context>(result->values())));
   93|  5.18k|    return result;
   94|  5.18k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeERNS2_17basic_string_viewIwNS4_IwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSJ_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISF_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSS_13type_identityISF_E4typeEJDpNS17_ISY_E4typeEEEE:
  130|  5.18k|{
  131|  5.18k|    auto result = make_scan_result<Source, Args...>();
  132|  5.18k|    fill_scan_result(result,
  133|  5.18k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  5.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  5.18k|                           make_scan_args<wscan_context>(result->values())));
  135|  5.18k|    return result;
  136|  5.18k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEERNS2_17basic_string_viewIwS5_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISD_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIwNSP_13type_identityISD_E4typeEJDpNS11_ISV_E4typeEEEE:
   88|  5.18k|{
   89|  5.18k|    auto result = make_scan_result<Source, Args...>();
   90|  5.18k|    fill_scan_result(result,
   91|  5.18k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  5.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  5.18k|                           make_scan_args<wscan_context>(result->values())));
   93|  5.18k|    return result;
   94|  5.18k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeERNS2_17basic_string_viewIwS5_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSI_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISE_EEP8_IO_FILEEESQ_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIwNSR_13type_identityISE_E4typeEJDpNS16_ISX_E4typeEEEE:
  130|  5.18k|{
  131|  5.18k|    auto result = make_scan_result<Source, Args...>();
  132|  5.18k|    fill_scan_result(result,
  133|  5.18k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  5.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  5.18k|                           make_scan_args<wscan_context>(result->values())));
  135|  5.18k|    return result;
  136|  5.18k|}
_ZN3scn2v44scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEERS6_TnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  5.18k|{
   89|  5.18k|    auto result = make_scan_result<Source, Args...>();
   90|  5.18k|    fill_scan_result(result,
   91|  5.18k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  5.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  5.18k|                           make_scan_args<wscan_context>(result->values())));
   93|  5.18k|    return result;
   94|  5.18k|}
_ZN3scn2v44scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS2_6localeERS6_TnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  5.18k|{
  131|  5.18k|    auto result = make_scan_result<Source, Args...>();
  132|  5.18k|    fill_scan_result(result,
  133|  5.18k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  5.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  5.18k|                           make_scan_args<wscan_context>(result->values())));
  135|  5.18k|    return result;
  136|  5.18k|}

_ZN3scn2v46detail10locale_refC2INSt3__16localeEEERKT_:
  307|  70.0k|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  308|  70.0k|{
  309|  70.0k|    static_assert(std::is_same_v<Locale, std::locale>);
  310|  70.0k|}
_ZNK3scn2v46detail10locale_ref3getINSt3__16localeEEET_v:
  314|    184|{
  315|    184|    static_assert(std::is_same_v<Locale, std::locale>);
  316|    184|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (316:12): [True: 92, False: 92]
  ------------------
  317|    184|                    : std::locale{};
  318|    184|}
_ZN3scn2v44impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
  894|    888|{
  895|    888|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  896|    888|                                  m_nan_payload_buffer, value);
  897|    888|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  864|    888|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 888]
  |  |  ------------------
  ------------------
  898|      0|        value = this->setsign(value);
  899|      0|        return n;
  900|      0|    }
  901|       |
  902|    888|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (902:9): [True: 0, False: 888]
  ------------------
  903|    888|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (903:9): [True: 0, False: 0]
  ------------------
  904|      0|        return detail::unexpected_scan_error(
  905|      0|            scan_error::value_negative_overflow, n.error().msg());
  906|      0|    }
  907|    888|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (907:9): [True: 0, False: 888]
  ------------------
  908|    888|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (908:9): [True: 0, False: 0]
  ------------------
  909|      0|        return detail::unexpected_scan_error(
  910|      0|            scan_error::value_negative_underflow, n.error().msg());
  911|      0|    }
  912|    888|    return n;
  913|    888|}
_ZN3scn2v44impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
  894|    758|{
  895|    758|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  896|    758|                                  m_nan_payload_buffer, value);
  897|    758|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  864|    758|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 758]
  |  |  ------------------
  ------------------
  898|      0|        value = this->setsign(value);
  899|      0|        return n;
  900|      0|    }
  901|       |
  902|    758|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (902:9): [True: 0, False: 758]
  ------------------
  903|    758|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (903:9): [True: 0, False: 0]
  ------------------
  904|      0|        return detail::unexpected_scan_error(
  905|      0|            scan_error::value_negative_overflow, n.error().msg());
  906|      0|    }
  907|    758|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (907:9): [True: 0, False: 758]
  ------------------
  908|    758|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (908:9): [True: 0, False: 0]
  ------------------
  909|      0|        return detail::unexpected_scan_error(
  910|      0|            scan_error::value_negative_underflow, n.error().msg());
  911|      0|    }
  912|    758|    return n;
  913|    758|}
_ZN3scn2v44impl19parse_integer_valueIcaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|     22|{
 1153|     22|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|     22|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|     22|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|     22|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|     22|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 22, False: 0]
  ------------------
 1159|     22|        SCN_UNLIKELY_ATTR
 1160|     22|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|     22|                                             "Invalid integer value");
 1162|     22|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|      0|    auto start = source.data();
 1166|      0|    const auto end = source.data() + source.size();
 1167|      0|    {
 1168|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 0, False: 0]
  ------------------
 1169|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 0, False: 0]
  ------------------
 1170|      0|                break;
 1171|      0|            }
 1172|      0|        }
 1173|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1174|      0|            value = 0;
 1175|      0|            return ranges::next(source.begin(),
 1176|      0|                                ranges::distance(source.data(), start));
 1177|      0|        }
 1178|      0|    }
 1179|       |
 1180|      0|    if constexpr (std::is_same_v<CharT, char>) {
 1181|      0|        if (base == 10) {
  ------------------
  |  Branch (1181:13): [True: 0, False: 0]
  ------------------
 1182|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1183|      0|                             detail::make_string_view_from_pointers(start, end),
 1184|      0|                             value, sign == sign_type::minus_sign));
 1185|      0|            return ranges::next(source.begin(),
 1186|      0|                                ranges::distance(source.data(), ptr));
 1187|      0|        }
 1188|      0|    }
 1189|       |
 1190|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1192|      0|                     base, sign == sign_type::minus_sign));
 1193|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|      0|}
_ZN3scn2v44impl19parse_integer_valueIciEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|    900|{
 1153|    900|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|    900|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    900|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|    900|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|    900|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    900|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|    900|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|    900|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    900|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|    900|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|    900|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    900|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|    900|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 900, False: 0]
  ------------------
 1159|    900|        SCN_UNLIKELY_ATTR
 1160|    900|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|    900|                                             "Invalid integer value");
 1162|    900|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|      0|    auto start = source.data();
 1166|      0|    const auto end = source.data() + source.size();
 1167|      0|    {
 1168|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 0, False: 0]
  ------------------
 1169|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 0, False: 0]
  ------------------
 1170|      0|                break;
 1171|      0|            }
 1172|      0|        }
 1173|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1174|      0|            value = 0;
 1175|      0|            return ranges::next(source.begin(),
 1176|      0|                                ranges::distance(source.data(), start));
 1177|      0|        }
 1178|      0|    }
 1179|       |
 1180|      0|    if constexpr (std::is_same_v<CharT, char>) {
 1181|      0|        if (base == 10) {
  ------------------
  |  Branch (1181:13): [True: 0, False: 0]
  ------------------
 1182|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1183|      0|                             detail::make_string_view_from_pointers(start, end),
 1184|      0|                             value, sign == sign_type::minus_sign));
 1185|      0|            return ranges::next(source.begin(),
 1186|      0|                                ranges::distance(source.data(), ptr));
 1187|      0|        }
 1188|      0|    }
 1189|       |
 1190|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1192|      0|                     base, sign == sign_type::minus_sign));
 1193|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|      0|}
_ZN3scn2v44impl19parse_integer_valueIwiEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|    786|{
 1153|    786|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|    786|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    786|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|    786|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|    786|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    786|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|    786|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|    786|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    786|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|    786|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|    786|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    786|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|    786|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 786, False: 0]
  ------------------
 1159|    786|        SCN_UNLIKELY_ATTR
 1160|    786|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|    786|                                             "Invalid integer value");
 1162|    786|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|      0|    auto start = source.data();
 1166|      0|    const auto end = source.data() + source.size();
 1167|      0|    {
 1168|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 0, False: 0]
  ------------------
 1169|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 0, False: 0]
  ------------------
 1170|      0|                break;
 1171|      0|            }
 1172|      0|        }
 1173|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1174|      0|            value = 0;
 1175|      0|            return ranges::next(source.begin(),
 1176|      0|                                ranges::distance(source.data(), start));
 1177|      0|        }
 1178|      0|    }
 1179|       |
 1180|       |    if constexpr (std::is_same_v<CharT, char>) {
 1181|       |        if (base == 10) {
 1182|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1183|       |                             detail::make_string_view_from_pointers(start, end),
 1184|       |                             value, sign == sign_type::minus_sign));
 1185|       |            return ranges::next(source.begin(),
 1186|       |                                ranges::distance(source.data(), ptr));
 1187|       |        }
 1188|       |    }
 1189|       |
 1190|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1192|      0|                     base, sign == sign_type::minus_sign));
 1193|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|      0|}
_ZN3scn2v44impl19parse_integer_valueIcjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|    900|{
 1153|    900|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|    900|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    900|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|    900|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|    900|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    900|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|    900|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|    900|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    900|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|    900|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|    900|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    900|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|    900|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 900, False: 0]
  ------------------
 1159|    900|        SCN_UNLIKELY_ATTR
 1160|    900|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|    900|                                             "Invalid integer value");
 1162|    900|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|      0|    auto start = source.data();
 1166|      0|    const auto end = source.data() + source.size();
 1167|      0|    {
 1168|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 0, False: 0]
  ------------------
 1169|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 0, False: 0]
  ------------------
 1170|      0|                break;
 1171|      0|            }
 1172|      0|        }
 1173|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1174|      0|            value = 0;
 1175|      0|            return ranges::next(source.begin(),
 1176|      0|                                ranges::distance(source.data(), start));
 1177|      0|        }
 1178|      0|    }
 1179|       |
 1180|      0|    if constexpr (std::is_same_v<CharT, char>) {
 1181|      0|        if (base == 10) {
  ------------------
  |  Branch (1181:13): [True: 0, False: 0]
  ------------------
 1182|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1183|      0|                             detail::make_string_view_from_pointers(start, end),
 1184|      0|                             value, sign == sign_type::minus_sign));
 1185|      0|            return ranges::next(source.begin(),
 1186|      0|                                ranges::distance(source.data(), ptr));
 1187|      0|        }
 1188|      0|    }
 1189|       |
 1190|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1192|      0|                     base, sign == sign_type::minus_sign));
 1193|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|      0|}
_ZN3scn2v44impl19parse_integer_valueIwjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|    764|{
 1153|    764|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|    764|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    764|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|    764|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|    764|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    764|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|    764|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|    764|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    764|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|    764|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|    764|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    764|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|    764|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 764, False: 0]
  ------------------
 1159|    764|        SCN_UNLIKELY_ATTR
 1160|    764|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|    764|                                             "Invalid integer value");
 1162|    764|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|      0|    auto start = source.data();
 1166|      0|    const auto end = source.data() + source.size();
 1167|      0|    {
 1168|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 0, False: 0]
  ------------------
 1169|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 0, False: 0]
  ------------------
 1170|      0|                break;
 1171|      0|            }
 1172|      0|        }
 1173|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1174|      0|            value = 0;
 1175|      0|            return ranges::next(source.begin(),
 1176|      0|                                ranges::distance(source.data(), start));
 1177|      0|        }
 1178|      0|    }
 1179|       |
 1180|       |    if constexpr (std::is_same_v<CharT, char>) {
 1181|       |        if (base == 10) {
 1182|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1183|       |                             detail::make_string_view_from_pointers(start, end),
 1184|       |                             value, sign == sign_type::minus_sign));
 1185|       |            return ranges::next(source.begin(),
 1186|       |                                ranges::distance(source.data(), ptr));
 1187|       |        }
 1188|       |    }
 1189|       |
 1190|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1192|      0|                     base, sign == sign_type::minus_sign));
 1193|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|      0|}
_ZN3scn2v44impl19parse_integer_valueIcmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|    882|{
 1153|    882|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|    882|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    882|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|    882|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|    882|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    882|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|    882|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|    882|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    882|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|    882|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|    882|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    882|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|    882|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 882, False: 0]
  ------------------
 1159|    882|        SCN_UNLIKELY_ATTR
 1160|    882|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|    882|                                             "Invalid integer value");
 1162|    882|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|      0|    auto start = source.data();
 1166|      0|    const auto end = source.data() + source.size();
 1167|      0|    {
 1168|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 0, False: 0]
  ------------------
 1169|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 0, False: 0]
  ------------------
 1170|      0|                break;
 1171|      0|            }
 1172|      0|        }
 1173|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1174|      0|            value = 0;
 1175|      0|            return ranges::next(source.begin(),
 1176|      0|                                ranges::distance(source.data(), start));
 1177|      0|        }
 1178|      0|    }
 1179|       |
 1180|      0|    if constexpr (std::is_same_v<CharT, char>) {
 1181|      0|        if (base == 10) {
  ------------------
  |  Branch (1181:13): [True: 0, False: 0]
  ------------------
 1182|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1183|      0|                             detail::make_string_view_from_pointers(start, end),
 1184|      0|                             value, sign == sign_type::minus_sign));
 1185|      0|            return ranges::next(source.begin(),
 1186|      0|                                ranges::distance(source.data(), ptr));
 1187|      0|        }
 1188|      0|    }
 1189|       |
 1190|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1192|      0|                     base, sign == sign_type::minus_sign));
 1193|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|      0|}
_ZN3scn2v44impl19parse_integer_valueIwmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|    744|{
 1153|    744|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|    744|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    744|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|    744|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|    744|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    744|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|    744|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|    744|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    744|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|    744|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|    744|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    744|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|    744|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 744, False: 0]
  ------------------
 1159|    744|        SCN_UNLIKELY_ATTR
 1160|    744|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|    744|                                             "Invalid integer value");
 1162|    744|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|      0|    auto start = source.data();
 1166|      0|    const auto end = source.data() + source.size();
 1167|      0|    {
 1168|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 0, False: 0]
  ------------------
 1169|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 0, False: 0]
  ------------------
 1170|      0|                break;
 1171|      0|            }
 1172|      0|        }
 1173|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1174|      0|            value = 0;
 1175|      0|            return ranges::next(source.begin(),
 1176|      0|                                ranges::distance(source.data(), start));
 1177|      0|        }
 1178|      0|    }
 1179|       |
 1180|       |    if constexpr (std::is_same_v<CharT, char>) {
 1181|       |        if (base == 10) {
 1182|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1183|       |                             detail::make_string_view_from_pointers(start, end),
 1184|       |                             value, sign == sign_type::minus_sign));
 1185|       |            return ranges::next(source.begin(),
 1186|       |                                ranges::distance(source.data(), ptr));
 1187|       |        }
 1188|       |    }
 1189|       |
 1190|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1192|      0|                     base, sign == sign_type::minus_sign));
 1193|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|      0|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1902|  23.3k|{
 1903|  23.3k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 1904|  23.3k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1920|  46.6k|{
 1921|  46.6k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 1922|  46.6k|}
_ZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  206|  3.75k|{
  207|  3.75k|    return find_classic_impl(
  208|  3.75k|        source, [](char ch) { return is_ascii_space(ch); },
  209|  3.75k|        [](char32_t cp) { return detail::is_cp_space(cp); });
  210|  3.75k|}
_ZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  214|  23.9k|{
  215|  23.9k|    return find_classic_impl(
  216|  23.9k|        source, [](char ch) { return !is_ascii_space(ch); },
  217|  23.9k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  218|  23.9k|}
_ZN3scn2v46detail12handle_errorENS0_10scan_errorE:
  328|    224|{
  329|    224|    SCN_UNLIKELY_ATTR
  330|    224|    return e;
  331|    224|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1871|  23.3k|{
 1872|  23.3k|    return vscan_internal(source, format, args);
 1873|  23.3k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1885|  46.6k|{
 1886|  46.6k|    return vscan_internal(source, format, args);
 1887|  46.6k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|  3.75k|{
  131|  3.75k|    auto it = source.begin();
  132|       |
  133|  12.2k|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 9.26k, False: 3.00k]
  ------------------
  134|  9.26k|        auto sv =
  135|  9.26k|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|  9.26k|                .substr(0, 8);
  137|       |
  138|  9.26k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 2.91k, False: 6.34k]
  ------------------
  139|  2.91k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|  2.91k|            it = detail::make_string_view_iterator(source, tmp_it);
  141|  2.91k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 450, False: 2.46k]
  ------------------
  142|    450|                break;
  143|    450|            }
  144|  2.46k|            continue;
  145|  2.91k|        }
  146|       |
  147|  25.0k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 18.9k, False: 6.04k]
  ------------------
  148|  18.9k|            auto tmp =
  149|  18.9k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|  18.9k|            auto res = get_next_code_point(tmp);
  151|  18.9k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 300, False: 18.6k]
  ------------------
  152|    300|                return it;
  153|    300|            }
  154|  18.6k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|  18.6k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|  18.6k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  931|  18.6k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|  18.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  18.6k|        }
  158|  6.34k|    }
  159|       |
  160|  3.45k|    return detail::make_string_view_iterator(source, it);
  161|  3.75k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  117|  31.5k|{
  118|  31.5k|    static_assert(sizeof(*source.data()) == 1);
  119|  31.5k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  930|  31.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  31.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  120|  31.5k|    uint64_t word{};
  121|  31.5k|    std::memcpy(&word, source.data(), source.size());
  122|       |
  123|  31.5k|    return has_byte_greater(word, 127) != 0;
  124|  31.5k|}
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  208|  17.1k|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  209|  18.9k|        [](char32_t cp) { return detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|  23.9k|{
  131|  23.9k|    auto it = source.begin();
  132|       |
  133|  29.8k|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 22.3k, False: 7.49k]
  ------------------
  134|  22.3k|        auto sv =
  135|  22.3k|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|  22.3k|                .substr(0, 8);
  137|       |
  138|  22.3k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 10.2k, False: 12.1k]
  ------------------
  139|  10.2k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|  10.2k|            it = detail::make_string_view_iterator(source, tmp_it);
  141|  10.2k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 8.40k, False: 1.80k]
  ------------------
  142|  8.40k|                break;
  143|  8.40k|            }
  144|  1.80k|            continue;
  145|  10.2k|        }
  146|       |
  147|  22.9k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 18.8k, False: 4.07k]
  ------------------
  148|  18.8k|            auto tmp =
  149|  18.8k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|  18.8k|            auto res = get_next_code_point(tmp);
  151|  18.8k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 8.05k, False: 10.8k]
  ------------------
  152|  8.05k|                return it;
  153|  8.05k|            }
  154|  10.8k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|  10.8k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|  10.8k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  931|  10.8k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|  10.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  10.8k|        }
  158|  12.1k|    }
  159|       |
  160|  15.9k|    return detail::make_string_view_iterator(source, it);
  161|  23.9k|}
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  216|  19.8k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  217|  18.8k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  803|    888|{
  804|    888|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (804:9): [True: 0, False: 888]
  ------------------
  805|      0|        value = std::numeric_limits<T>::infinity();
  806|      0|        return 3;
  807|      0|    }
  808|    888|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (808:9): [True: 0, False: 888]
  ------------------
  809|      0|        value = std::numeric_limits<T>::infinity();
  810|      0|        return 8;
  811|      0|    }
  812|    888|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (812:9): [True: 0, False: 888]
  ------------------
  813|      0|        value = std::numeric_limits<T>::quiet_NaN();
  814|      0|        return 3;
  815|      0|    }
  816|    888|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (816:9): [True: 0, False: 888]
  ------------------
  817|      0|        value = std::numeric_limits<T>::quiet_NaN();
  818|       |
  819|       |        // TODO: use payload
  820|       |#if 0
  821|       |                    {
  822|       |                        auto reader = integer_reader<CharT>{
  823|       |                            integer_reader_base::only_unsigned, 0};
  824|       |                        if (auto r = reader.read_source(
  825|       |                                detail::tag_type<unsigned long long>{},
  826|       |                                nan_payload.view());
  827|       |                            SCN_UNLIKELY(!r)) {
  828|       |                            return unexpected(r.error());
  829|       |                        }
  830|       |
  831|       |                        unsigned long long payload;
  832|       |                        if (auto r = reader.parse_value(payload);
  833|       |                            SCN_UNLIKELY(!r)) {
  834|       |                            return unexpected(r.error());
  835|       |                        }
  836|       |
  837|       |                        constexpr auto mantissa_payload_len =
  838|       |                            std::numeric_limits<T>::digits - 2;
  839|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  840|       |
  841|       |
  842|       |                    }
  843|       |#endif
  844|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  915|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  845|       |
  846|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  847|      0|    }
  848|       |
  849|    888|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  930|    888|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    888|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  850|    888|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (850:9): [True: 6, False: 882]
  ------------------
  851|      6|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  865|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6, False: 0]
  |  |  ------------------
  ------------------
  852|      6|            return detail::unexpected_scan_error(
  853|      6|                scan_error::invalid_scanned_value,
  854|      6|                "Invalid floating-point digit");
  855|      6|        }
  856|      6|    }
  857|    882|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  865|    882|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 882, False: 0]
  |  |  ------------------
  ------------------
  858|    882|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
  859|    882|                                             "Invalid floating-point digit");
  860|    882|    }
  861|       |
  862|      0|#if !SCN_DISABLE_FAST_FLOAT
  863|       |    if constexpr (std::is_same_v<T, long double>) {
  864|       |        if constexpr (sizeof(double) == sizeof(long double)) {
  865|       |            // If double == long double (true on Windows),
  866|       |            // use fast_float with double
  867|       |            double tmp{};
  868|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  869|       |            value = tmp;
  870|       |            return ret;
  871|       |        }
  872|       |        else {
  873|       |            // long doubles aren't supported by fast_float ->
  874|       |            // fall back to from_chars or strtod
  875|       |            return fast_float_fallback(data, value);
  876|       |        }
  877|       |    }
  878|      0|    else {
  879|       |        // Default to fast_float
  880|      0|        return fast_float_impl<CharT, T>{data}(value);
  881|      0|    }
  882|       |#else
  883|       |    static_assert(SCN_HAS_FLOAT_CHARCONV,
  884|       |                  "SCN_DISABLE_FAST_FLOAT needs std::from_chars for floats");
  885|       |
  886|       |    return fast_float_fallback(data, value);
  887|       |#endif
  888|      0|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  803|    758|{
  804|    758|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (804:9): [True: 0, False: 758]
  ------------------
  805|      0|        value = std::numeric_limits<T>::infinity();
  806|      0|        return 3;
  807|      0|    }
  808|    758|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (808:9): [True: 0, False: 758]
  ------------------
  809|      0|        value = std::numeric_limits<T>::infinity();
  810|      0|        return 8;
  811|      0|    }
  812|    758|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (812:9): [True: 0, False: 758]
  ------------------
  813|      0|        value = std::numeric_limits<T>::quiet_NaN();
  814|      0|        return 3;
  815|      0|    }
  816|    758|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (816:9): [True: 0, False: 758]
  ------------------
  817|      0|        value = std::numeric_limits<T>::quiet_NaN();
  818|       |
  819|       |        // TODO: use payload
  820|       |#if 0
  821|       |                    {
  822|       |                        auto reader = integer_reader<CharT>{
  823|       |                            integer_reader_base::only_unsigned, 0};
  824|       |                        if (auto r = reader.read_source(
  825|       |                                detail::tag_type<unsigned long long>{},
  826|       |                                nan_payload.view());
  827|       |                            SCN_UNLIKELY(!r)) {
  828|       |                            return unexpected(r.error());
  829|       |                        }
  830|       |
  831|       |                        unsigned long long payload;
  832|       |                        if (auto r = reader.parse_value(payload);
  833|       |                            SCN_UNLIKELY(!r)) {
  834|       |                            return unexpected(r.error());
  835|       |                        }
  836|       |
  837|       |                        constexpr auto mantissa_payload_len =
  838|       |                            std::numeric_limits<T>::digits - 2;
  839|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  840|       |
  841|       |
  842|       |                    }
  843|       |#endif
  844|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  915|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  845|       |
  846|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  847|      0|    }
  848|       |
  849|    758|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  930|    758|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    758|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  850|    758|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (850:9): [True: 12, False: 746]
  ------------------
  851|     12|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  865|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12, False: 0]
  |  |  ------------------
  ------------------
  852|     12|            return detail::unexpected_scan_error(
  853|     12|                scan_error::invalid_scanned_value,
  854|     12|                "Invalid floating-point digit");
  855|     12|        }
  856|     12|    }
  857|    746|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  865|    746|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 746, False: 0]
  |  |  ------------------
  ------------------
  858|    746|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
  859|    746|                                             "Invalid floating-point digit");
  860|    746|    }
  861|       |
  862|      0|#if !SCN_DISABLE_FAST_FLOAT
  863|       |    if constexpr (std::is_same_v<T, long double>) {
  864|       |        if constexpr (sizeof(double) == sizeof(long double)) {
  865|       |            // If double == long double (true on Windows),
  866|       |            // use fast_float with double
  867|       |            double tmp{};
  868|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  869|       |            value = tmp;
  870|       |            return ret;
  871|       |        }
  872|       |        else {
  873|       |            // long doubles aren't supported by fast_float ->
  874|       |            // fall back to from_chars or strtod
  875|       |            return fast_float_fallback(data, value);
  876|       |        }
  877|       |    }
  878|      0|    else {
  879|       |        // Default to fast_float
  880|      0|        return fast_float_impl<CharT, T>{data}(value);
  881|      0|    }
  882|       |#else
  883|       |    static_assert(SCN_HAS_FLOAT_CHARCONV,
  884|       |                  "SCN_DISABLE_FAST_FLOAT needs std::from_chars for floats");
  885|       |
  886|       |    return fast_float_fallback(data, value);
  887|       |#endif
  888|      0|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1316|  46.6k|{
 1317|  46.6k|    if (format.size() != 2) {
  ------------------
  |  Branch (1317:9): [True: 46.3k, False: 378]
  ------------------
 1318|  46.3k|        return false;
 1319|  46.3k|    }
 1320|    378|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1320:12): [True: 126, False: 252]
  |  Branch (1320:39): [True: 18, False: 108]
  ------------------
 1321|  46.6k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSL_10locale_refEm:
 1592|  46.6k|        : format_handler_base{argcount},
 1593|  46.6k|          parse_ctx{format},
 1594|  46.6k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|  46.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  46.6k|    static_cast<    \
  |  |  935|  46.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  46.6k|    static_cast<    \
  |  |  935|  46.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|  46.6k|    {
 1596|  46.6k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_baseC2Em:
 1410|   140k|    format_handler_base(size_t argcount) : args_count(argcount)
 1411|   140k|    {
 1412|   140k|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  865|   140k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 140k]
  |  |  ------------------
  ------------------
 1413|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1414|      0|        }
 1415|   140k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSD_10locale_refE:
 1543|  46.6k|        : contiguous_ctx(source, args, loc)
 1544|  46.6k|    {
 1545|  46.6k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|  46.6k|{
 1734|  46.6k|    const auto beg = handler.get_ctx().begin();
 1735|  46.6k|    detail::parse_format_string<false>(format, handler);
 1736|  46.6k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|  46.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 44.7k, False: 1.91k]
  |  |  ------------------
  ------------------
 1737|  44.7k|        return unexpected(err.error());
 1738|  44.7k|    }
 1739|  1.91k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|  46.6k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 1717|   301k|    {
 1718|   301k|        return ctx.get();
 1719|   301k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1548|   301k|    {
 1549|   301k|        return contiguous_ctx;
 1550|   301k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1599|  63.9k|    {
 1600|   102k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 42.2k, False: 59.8k]
  ------------------
 1601|  42.2k|            auto it = get_ctx().begin();
 1602|  42.2k|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 1.05k, False: 41.1k]
  ------------------
 1603|  1.05k|                SCN_UNLIKELY_ATTR
 1604|  1.05k|                return on_error(
 1605|  1.05k|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|  1.05k|            }
 1607|       |
 1608|  41.1k|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|  41.1k|                    detail::make_string_view_from_pointers(begin, end));
 1610|  41.1k|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 2.01k, False: 39.1k]
  ------------------
 1611|  2.01k|                SCN_UNLIKELY_ATTR
 1612|  2.01k|                return on_error({scan_error::invalid_format_string,
 1613|  2.01k|                                 "Invalid encoding in format string"});
 1614|  2.01k|            }
 1615|  39.1k|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 7.10k, False: 32.0k]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|  7.10k|                get_ctx().advance_to(
 1618|  7.10k|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|  7.10k|                auto begin_it = impl::read_while_classic_space(
 1621|  7.10k|                    detail::make_string_view_from_pointers(
 1622|  7.10k|                        detail::to_address(after_space_it),
 1623|  7.10k|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|  7.10k|                begin = detail::to_address(begin_it) - 1;
 1626|  7.10k|                continue;
 1627|  7.10k|            }
 1628|       |
 1629|  32.0k|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 976, False: 31.1k]
  ------------------
 1630|    976|                SCN_UNLIKELY_ATTR
 1631|    976|                return on_error({scan_error::invalid_literal,
 1632|    976|                                 "Unexpected literal character in source"});
 1633|    976|            }
 1634|  31.1k|            get_ctx().advance_to(ranges::next(it));
 1635|  31.1k|        }
 1636|  63.9k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1459|   173k|    {
 1460|   173k|        error = unexpected(err);
 1461|   173k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE20on_replacement_fieldEmPKc:
 1666|  5.79k|    {
 1667|  5.79k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1668|  5.79k|        set_arg_as_visited(arg_id);
 1669|       |
 1670|  5.79k|        on_visit_scan_arg(
 1671|  5.79k|            impl::default_arg_reader<context_type>{
 1672|  5.79k|                get_ctx().range(), get_ctx().args(), get_ctx().locale()},
 1673|  5.79k|            arg);
 1674|  5.79k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEmNS1_14format_handlerILb1EcEEEEDaRT_T0_RT1_:
 1371|  30.9k|{
 1372|  30.9k|    auto arg = ctx.arg(id);
 1373|  30.9k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  30.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.36k, False: 29.5k]
  |  |  ------------------
  ------------------
 1374|  1.36k|        handler.on_error("Failed to find argument with ID");
 1375|  1.36k|    }
 1376|  30.9k|    return arg;
 1377|  30.9k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1485|  45.1k|    {
 1486|  45.1k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  865|  45.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.44k, False: 42.7k]
  |  |  ------------------
  ------------------
 1487|  2.44k|            on_error({scan_error::invalid_format_string,
 1488|  2.44k|                      "Argument ID out-of-range"});
 1489|  2.44k|            return;
 1490|  2.44k|        }
 1491|       |
 1492|  42.7k|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  865|  42.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 98, False: 42.6k]
  |  |  ------------------
  ------------------
 1493|     98|            on_error({scan_error::invalid_format_string,
 1494|     98|                      "Argument with this ID has already been scanned"});
 1495|     98|        }
 1496|       |
 1497|  42.7k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  864|  42.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 42.7k, False: 0]
  |  |  ------------------
  ------------------
 1498|  42.7k|            visited_args_lower64 |= (1ull << id);
 1499|  42.7k|            return;
 1500|  42.7k|        }
 1501|       |
 1502|      0|        id -= 64;
 1503|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1504|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1469|  42.7k|    {
 1470|  42.7k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  865|  42.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 42.7k]
  |  |  ------------------
  ------------------
 1471|      0|            on_error({scan_error::invalid_format_string,
 1472|      0|                      "Argument ID out-of-range"});
 1473|      0|            return false;
 1474|      0|        }
 1475|       |
 1476|  42.7k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  864|  42.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 42.7k, False: 0]
  |  |  ------------------
  ------------------
 1477|  42.7k|            return (visited_args_lower64 >> id) & 1ull;
 1478|  42.7k|        }
 1479|       |
 1480|      0|        id -= 64;
 1481|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1482|  42.7k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEcEEEE:
 1650|  5.79k|    {
 1651|  5.79k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 126, False: 5.67k]
  |  Branch (1651:13): [True: 126, False: 5.67k]
  |  Branch (1651:29): [True: 0, False: 5.67k]
  ------------------
 1652|    126|            SCN_UNLIKELY_ATTR
 1653|    126|            return;
 1654|    126|        }
 1655|       |
 1656|  5.67k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|  5.67k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|  5.67k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  5.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.92k, False: 1.74k]
  |  |  ------------------
  ------------------
 1658|  3.92k|            on_error(r.error());
 1659|  3.92k|        }
 1660|  1.74k|        else {
 1661|  1.74k|            get_ctx().advance_to(*r);
 1662|  1.74k|        }
 1663|  5.67k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1639|  30.4k|    {
 1640|  30.4k|        return parse_ctx.next_arg_id();
 1641|  30.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEm:
 1643|    556|    {
 1644|    556|        parse_ctx.check_arg_id(id);
 1645|    556|        return id;
 1646|    556|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1679|  25.1k|    {
 1680|  25.1k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|  25.1k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|  25.1k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 0, False: 25.1k]
  ------------------
 1684|      0|            parse_ctx.advance_to(begin);
 1685|      0|            on_visit_scan_arg(
 1686|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1687|      0|                    parse_ctx, get_custom_ctx()},
 1688|      0|                arg);
 1689|      0|            return parse_ctx.begin();
 1690|      0|        }
 1691|       |
 1692|  25.1k|        auto specs = detail::format_specs{};
 1693|  25.1k|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|  25.1k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|  25.1k|            detail::get_arg_type(arg)};
 1696|       |
 1697|  25.1k|        begin = detail::parse_format_specs(begin, end, handler);
 1698|  25.1k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 2.44k, False: 22.7k]
  |  Branch (1698:29): [True: 558, False: 22.1k]
  ------------------
 1699|  3.00k|            SCN_UNLIKELY_ATTR
 1700|  3.00k|            on_error({scan_error::invalid_format_string,
 1701|  3.00k|                      "Missing '}' in format string"});
 1702|  3.00k|            return parse_ctx.begin();
 1703|  3.00k|        }
 1704|  22.1k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|  22.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 264, False: 21.8k]
  |  |  ------------------
  ------------------
 1705|    264|            return parse_ctx.begin();
 1706|    264|        }
 1707|  21.8k|        parse_ctx.advance_to(begin);
 1708|       |
 1709|  21.8k|        on_visit_scan_arg(
 1710|  21.8k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|  21.8k|                                           get_ctx().locale()},
 1712|  21.8k|            arg);
 1713|  21.8k|        return parse_ctx.begin();
 1714|  22.1k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERSB_:
 1389|  25.1k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1390|  25.1k|    {
 1391|  25.1k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEcEEEE:
 1650|  21.8k|    {
 1651|  21.8k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 102, False: 21.7k]
  |  Branch (1651:13): [True: 102, False: 21.7k]
  |  Branch (1651:29): [True: 0, False: 21.7k]
  ------------------
 1652|    102|            SCN_UNLIKELY_ATTR
 1653|    102|            return;
 1654|    102|        }
 1655|       |
 1656|  21.7k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|  21.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|  21.7k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  21.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 17.9k, False: 3.88k]
  |  |  ------------------
  ------------------
 1658|  17.9k|            on_error(r.error());
 1659|  17.9k|        }
 1660|  3.88k|        else {
 1661|  3.88k|            get_ctx().advance_to(*r);
 1662|  3.88k|        }
 1663|  21.7k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorEPKc:
 1453|  84.5k|    {
 1454|  84.5k|        SCN_UNLIKELY_ATTR
 1455|  84.5k|        error = detail::unexpected_scan_error(scan_error::invalid_format_string,
 1456|  84.5k|                                              msg);
 1457|  84.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1418|   140k|    {
 1419|   140k|        {
 1420|   140k|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1420:45): [True: 0, False: 140k]
  ------------------
 1421|   140k|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1421:35): [True: 0, False: 140k]
  ------------------
 1422|   140k|                                      ? std::numeric_limits<uint64_t>::max()
 1423|   140k|                                      : (1ull << args_count_lower64) - 1;
 1424|       |
 1425|   140k|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1425:17): [True: 97.3k, False: 42.6k]
  ------------------
 1426|  97.3k|                return on_error({scan_error::invalid_format_string,
 1427|  97.3k|                                 "Argument list not exhausted"});
 1428|  97.3k|            }
 1429|   140k|        }
 1430|       |
 1431|  42.6k|        if (args_count < 64) {
  ------------------
  |  Branch (1431:13): [True: 42.6k, False: 0]
  ------------------
 1432|  42.6k|            return;
 1433|  42.6k|        }
 1434|       |
 1435|      0|        auto last_args_count = args_count - 64;
 1436|      0|        for (auto it = visited_args_upper.begin();
 1437|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1437:14): [True: 0, False: 0]
  ------------------
 1438|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1438:17): [True: 0, False: 0]
  ------------------
 1439|      0|                return on_error({scan_error::invalid_format_string,
 1440|      0|                                 "Argument list not exhausted"});
 1441|      0|            }
 1442|      0|            last_args_count -= 8;
 1443|      0|        }
 1444|       |
 1445|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1446|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1446:13): [True: 0, False: 0]
  ------------------
 1447|      0|            return on_error({scan_error::invalid_format_string,
 1448|      0|                             "Argument list not exhausted"});
 1449|      0|        }
 1450|      0|    }
impl.cpp:_ZNK3scn2v412_GLOBAL__N_119format_handler_base9get_errorEv:
 1464|   385k|    {
 1465|   385k|        return error;
 1466|   385k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 1748|  46.6k|{
 1749|  46.6k|    const auto argcount = args.size();
 1750|  46.6k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1750:9): [True: 18, False: 46.6k]
  |  Branch (1750:60): [True: 18, False: 0]
  ------------------
 1751|     18|        auto arg = args.get(0);
 1752|     18|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  934|     18|    static_cast<    \
  |  |  935|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1753|     18|    }
 1754|       |
 1755|  46.6k|    auto handler = format_handler<true, CharT>{
 1756|  46.6k|        ranges::subrange<const CharT*>{source.data(),
 1757|  46.6k|                                       source.data() + source.size()},
 1758|  46.6k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  46.6k|    static_cast<    \
  |  |  935|  46.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  46.6k|    static_cast<    \
  |  |  935|  46.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1759|  46.6k|    return vscan_parse_format_string(format, handler);
 1760|  46.6k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 1329|     18|{
 1330|     18|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 1331|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1332|      0|                                             "Argument #0 not found");
 1333|      0|    }
 1334|       |
 1335|     18|    auto reader =
 1336|     18|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1337|     18|            ranges::subrange<const CharT*>{source.data(),
 1338|     18|                                           source.data() + source.size()},
 1339|     18|            SCN_MOVE(args), loc};
  ------------------
  |  |  934|     18|    static_cast<    \
  |  |  935|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1340|     18|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 10, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     10|    }                                                  \
  |  |  |  | 3939|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1341|      8|    return ranges::distance(source.data(), it);
 1342|     18|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 1748|  93.3k|{
 1749|  93.3k|    const auto argcount = args.size();
 1750|  93.3k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1750:9): [True: 18, False: 93.3k]
  |  Branch (1750:60): [True: 18, False: 0]
  ------------------
 1751|     18|        auto arg = args.get(0);
 1752|     18|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  934|     18|    static_cast<    \
  |  |  935|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1753|     18|    }
 1754|       |
 1755|  93.3k|    auto handler = format_handler<true, CharT>{
 1756|  93.3k|        ranges::subrange<const CharT*>{source.data(),
 1757|  93.3k|                                       source.data() + source.size()},
 1758|  93.3k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  93.3k|    static_cast<    \
  |  |  935|  93.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  93.3k|    static_cast<    \
  |  |  935|  93.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1759|  93.3k|    return vscan_parse_format_string(format, handler);
 1760|  93.3k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1316|  93.3k|{
 1317|  93.3k|    if (format.size() != 2) {
  ------------------
  |  Branch (1317:9): [True: 87.0k, False: 6.35k]
  ------------------
 1318|  87.0k|        return false;
 1319|  87.0k|    }
 1320|  6.35k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1320:12): [True: 126, False: 6.22k]
  |  Branch (1320:39): [True: 18, False: 108]
  ------------------
 1321|  93.3k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 1329|     18|{
 1330|     18|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 1331|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1332|      0|                                             "Argument #0 not found");
 1333|      0|    }
 1334|       |
 1335|     18|    auto reader =
 1336|     18|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1337|     18|            ranges::subrange<const CharT*>{source.data(),
 1338|     18|                                           source.data() + source.size()},
 1339|     18|            SCN_MOVE(args), loc};
  ------------------
  |  |  934|     18|    static_cast<    \
  |  |  935|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1340|     18|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 10, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     10|    }                                                  \
  |  |  |  | 3939|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1341|      8|    return ranges::distance(source.data(), it);
 1342|     18|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSL_10locale_refEm:
 1592|  93.3k|        : format_handler_base{argcount},
 1593|  93.3k|          parse_ctx{format},
 1594|  93.3k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|  93.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  93.3k|    static_cast<    \
  |  |  935|  93.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  93.3k|    static_cast<    \
  |  |  935|  93.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|  93.3k|    {
 1596|  93.3k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSD_10locale_refE:
 1543|  93.3k|        : contiguous_ctx(source, args, loc)
 1544|  93.3k|    {
 1545|  93.3k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|  93.3k|{
 1734|  93.3k|    const auto beg = handler.get_ctx().begin();
 1735|  93.3k|    detail::parse_format_string<false>(format, handler);
 1736|  93.3k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|  93.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 92.3k, False: 1.01k]
  |  |  ------------------
  ------------------
 1737|  92.3k|        return unexpected(err.error());
 1738|  92.3k|    }
 1739|  1.01k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|  93.3k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 1717|   271k|    {
 1718|   271k|        return ctx.get();
 1719|   271k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1548|   271k|    {
 1549|   271k|        return contiguous_ctx;
 1550|   271k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1599|  51.2k|    {
 1600|  68.6k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 51.5k, False: 17.1k]
  ------------------
 1601|  51.5k|            auto it = get_ctx().begin();
 1602|  51.5k|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 378, False: 51.1k]
  ------------------
 1603|    378|                SCN_UNLIKELY_ATTR
 1604|    378|                return on_error(
 1605|    378|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|    378|            }
 1607|       |
 1608|  51.1k|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|  51.1k|                    detail::make_string_view_from_pointers(begin, end));
 1610|  51.1k|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 32.9k, False: 18.1k]
  ------------------
 1611|  32.9k|                SCN_UNLIKELY_ATTR
 1612|  32.9k|                return on_error({scan_error::invalid_format_string,
 1613|  32.9k|                                 "Invalid encoding in format string"});
 1614|  32.9k|            }
 1615|  18.1k|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 1.78k, False: 16.4k]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|  1.78k|                get_ctx().advance_to(
 1618|  1.78k|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|  1.78k|                auto begin_it = impl::read_while_classic_space(
 1621|  1.78k|                    detail::make_string_view_from_pointers(
 1622|  1.78k|                        detail::to_address(after_space_it),
 1623|  1.78k|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|  1.78k|                begin = detail::to_address(begin_it) - 1;
 1626|  1.78k|                continue;
 1627|  1.78k|            }
 1628|       |
 1629|  16.4k|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 794, False: 15.6k]
  ------------------
 1630|    794|                SCN_UNLIKELY_ATTR
 1631|    794|                return on_error({scan_error::invalid_literal,
 1632|    794|                                 "Unexpected literal character in source"});
 1633|    794|            }
 1634|  15.6k|            get_ctx().advance_to(ranges::next(it));
 1635|  15.6k|        }
 1636|  51.2k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE20on_replacement_fieldEmPKw:
 1666|  4.13k|    {
 1667|  4.13k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1668|  4.13k|        set_arg_as_visited(arg_id);
 1669|       |
 1670|  4.13k|        on_visit_scan_arg(
 1671|  4.13k|            impl::default_arg_reader<context_type>{
 1672|  4.13k|                get_ctx().range(), get_ctx().args(), get_ctx().locale()},
 1673|  4.13k|            arg);
 1674|  4.13k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEmNS1_14format_handlerILb1EwEEEEDaRT_T0_RT1_:
 1371|  14.2k|{
 1372|  14.2k|    auto arg = ctx.arg(id);
 1373|  14.2k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  14.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.07k, False: 13.1k]
  |  |  ------------------
  ------------------
 1374|  1.07k|        handler.on_error("Failed to find argument with ID");
 1375|  1.07k|    }
 1376|  14.2k|    return arg;
 1377|  14.2k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEwEEEE:
 1650|  4.13k|    {
 1651|  4.13k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 120, False: 4.01k]
  |  Branch (1651:13): [True: 120, False: 4.01k]
  |  Branch (1651:29): [True: 0, False: 4.01k]
  ------------------
 1652|    120|            SCN_UNLIKELY_ATTR
 1653|    120|            return;
 1654|    120|        }
 1655|       |
 1656|  4.01k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|  4.01k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|  4.01k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  4.01k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.86k, False: 1.14k]
  |  |  ------------------
  ------------------
 1658|  2.86k|            on_error(r.error());
 1659|  2.86k|        }
 1660|  1.14k|        else {
 1661|  1.14k|            get_ctx().advance_to(*r);
 1662|  1.14k|        }
 1663|  4.01k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1639|  14.0k|    {
 1640|  14.0k|        return parse_ctx.next_arg_id();
 1641|  14.0k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEm:
 1643|    288|    {
 1644|    288|        parse_ctx.check_arg_id(id);
 1645|    288|        return id;
 1646|    288|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1679|  10.1k|    {
 1680|  10.1k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|  10.1k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|  10.1k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 0, False: 10.1k]
  ------------------
 1684|      0|            parse_ctx.advance_to(begin);
 1685|      0|            on_visit_scan_arg(
 1686|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1687|      0|                    parse_ctx, get_custom_ctx()},
 1688|      0|                arg);
 1689|      0|            return parse_ctx.begin();
 1690|      0|        }
 1691|       |
 1692|  10.1k|        auto specs = detail::format_specs{};
 1693|  10.1k|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|  10.1k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|  10.1k|            detail::get_arg_type(arg)};
 1696|       |
 1697|  10.1k|        begin = detail::parse_format_specs(begin, end, handler);
 1698|  10.1k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 1.78k, False: 8.32k]
  |  Branch (1698:29): [True: 304, False: 8.02k]
  ------------------
 1699|  2.09k|            SCN_UNLIKELY_ATTR
 1700|  2.09k|            on_error({scan_error::invalid_format_string,
 1701|  2.09k|                      "Missing '}' in format string"});
 1702|  2.09k|            return parse_ctx.begin();
 1703|  2.09k|        }
 1704|  8.02k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|  8.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 244, False: 7.77k]
  |  |  ------------------
  ------------------
 1705|    244|            return parse_ctx.begin();
 1706|    244|        }
 1707|  7.77k|        parse_ctx.advance_to(begin);
 1708|       |
 1709|  7.77k|        on_visit_scan_arg(
 1710|  7.77k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|  7.77k|                                           get_ctx().locale()},
 1712|  7.77k|            arg);
 1713|  7.77k|        return parse_ctx.begin();
 1714|  8.02k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERSB_:
 1389|  10.1k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1390|  10.1k|    {
 1391|  10.1k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEwEEEE:
 1650|  7.77k|    {
 1651|  7.77k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 92, False: 7.68k]
  |  Branch (1651:13): [True: 92, False: 7.68k]
  |  Branch (1651:29): [True: 0, False: 7.68k]
  ------------------
 1652|     92|            SCN_UNLIKELY_ATTR
 1653|     92|            return;
 1654|     92|        }
 1655|       |
 1656|  7.68k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|  7.68k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|  7.68k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  7.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.79k, False: 1.89k]
  |  |  ------------------
  ------------------
 1658|  5.79k|            on_error(r.error());
 1659|  5.79k|        }
 1660|  1.89k|        else {
 1661|  1.89k|            get_ctx().advance_to(*r);
 1662|  1.89k|        }
 1663|  7.68k|    }

_ZN3scn2v44impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1461|  2.59k|{
 1462|  2.59k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1463|       |
 1464|  2.59k|    if constexpr (sizeof(SourceCharT) == 1) {
 1465|       |        if constexpr (sizeof(DestCharT) == 2) {
 1466|       |            std::u32string tmp;
 1467|       |            transcode_to_string_impl_to32(src, tmp);
 1468|       |            return transcode_to_string_impl_32to16<false>(
 1469|       |                std::u32string_view{tmp}, dest);
 1470|       |        }
 1471|  2.59k|        else if constexpr (sizeof(DestCharT) == 4) {
 1472|  2.59k|            return transcode_to_string_impl_to32(src, dest);
 1473|  2.59k|        }
 1474|       |    }
 1475|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1476|       |        if constexpr (sizeof(DestCharT) == 1) {
 1477|       |            std::u32string tmp;
 1478|       |            transcode_to_string_impl_to32(src, tmp);
 1479|       |            return transcode_to_string_impl_32to8<false>(
 1480|       |                std::u32string_view{tmp}, dest);
 1481|       |        }
 1482|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1483|       |            return trasncode_to_string_impl_to32(src, dest);
 1484|       |        }
 1485|       |    }
 1486|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1487|       |        if constexpr (sizeof(DestCharT) == 1) {
 1488|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1489|       |        }
 1490|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1491|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1492|       |        }
 1493|       |    }
 1494|       |
 1495|  2.59k|    SCN_EXPECT(false);
  ------------------
  |  |  930|  2.59k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.59k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1497|  2.59k|}
_ZN3scn2v44impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1354|  2.59k|{
 1355|  2.59k|    static_assert(sizeof(DestCharT) == 4);
 1356|       |
 1357|  2.59k|    auto it = src.begin();
 1358|   143k|    while (it != src.end()) {
  ------------------
  |  Branch (1358:12): [True: 141k, False: 2.59k]
  ------------------
 1359|   141k|        auto res = get_next_code_point(
 1360|   141k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1361|   141k|                                                                 src.end()));
 1362|   141k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  865|   141k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.41k, False: 137k]
  |  |  ------------------
  ------------------
 1363|  3.41k|            dest.push_back(DestCharT{0xfffd});
 1364|  3.41k|        }
 1365|   137k|        else {
 1366|   137k|            dest.push_back(res.value);
 1367|   137k|        }
 1368|   141k|        it = detail::make_string_view_iterator(src, res.iterator);
 1369|   141k|    }
 1370|  2.59k|}
_ZN3scn2v44impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1278|   270k|{
 1279|   270k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  930|   270k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   270k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1280|       |
 1281|   270k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1282|   270k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|   270k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.23k, False: 264k]
  |  |  ------------------
  ------------------
 1283|  6.23k|        return {get_start_for_next_code_point(input),
 1284|  6.23k|                detail::invalid_code_point};
 1285|  6.23k|    }
 1286|   264k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  865|   264k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 933, False: 263k]
  |  |  ------------------
  ------------------
 1287|    933|        return {input.end(), detail::invalid_code_point};
 1288|    933|    }
 1289|       |
 1290|   263k|    return {input.begin() + len,
 1291|   263k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1292|   264k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1264|  6.23k|{
 1265|  6.23k|    auto it = input.begin();
 1266|  18.8k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 17.5k, False: 1.35k]
  ------------------
 1267|  17.5k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 4.87k, False: 12.6k]
  ------------------
 1268|  4.87k|            break;
 1269|  4.87k|        }
 1270|  17.5k|    }
 1271|  6.23k|    return it;
 1272|  6.23k|}
_ZN3scn2v44impl11parse_errorC2ENS2_4codeE:
  807|  49.0k|    constexpr parse_error(code c) : m_code(c)
  808|  49.0k|    {
  809|  49.0k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  915|  49.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  49.0k|    }
_ZN3scn2v44impleqENS1_11parse_errorES2_:
  822|  20.5k|    {
  823|  20.5k|        return a.m_code == b.m_code;
  824|  20.5k|    }
_ZN3scn2v44implneENS1_11parse_errorES2_:
  826|  3.97k|    {
  827|  3.97k|        return !(a == b);
  828|  3.97k|    }
_ZN3scn2v44impl20reader_error_handler8on_errorEPKc:
 3045|  13.5k|    {
 3046|  13.5k|        SCN_UNLIKELY_ATTR
 3047|  13.5k|        m_msg = msg;
 3048|  13.5k|    }
_ZNK3scn2v44impl20reader_error_handlercvbEv:
 3050|  29.4k|    {
 3051|  29.4k|        return m_msg == nullptr;
 3052|  29.4k|    }
_ZN3scn2v44impl17float_reader_baseC2Ej:
 3686|  1.05k|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v44impl22nonascii_specs_handler17on_charset_singleEDi:
 5030|   417k|    {
 5031|   417k|        on_charset_range(cp, cp + 1);
 5032|   417k|    }
_ZN3scn2v44impl22nonascii_specs_handler16on_charset_rangeEDiDi:
 5035|   421k|    {
 5036|   421k|        if (end <= 127) {
  ------------------
  |  Branch (5036:13): [True: 224k, False: 197k]
  ------------------
 5037|   224k|            return;
 5038|   224k|        }
 5039|       |
 5040|  33.5M|        for (auto& elem : extra_ranges) {
  ------------------
  |  Branch (5040:25): [True: 33.5M, False: 194k]
  ------------------
 5041|       |            // TODO: check for overlap
 5042|  33.5M|            if (elem.first == end) {
  ------------------
  |  Branch (5042:17): [True: 918, False: 33.5M]
  ------------------
 5043|    918|                elem.first = begin;
 5044|    918|                return;
 5045|    918|            }
 5046|       |
 5047|  33.5M|            if (elem.second == begin) {
  ------------------
  |  Branch (5047:17): [True: 1.63k, False: 33.5M]
  ------------------
 5048|  1.63k|                elem.second = end;
 5049|  1.63k|                return;
 5050|  1.63k|            }
 5051|  33.5M|        }
 5052|       |
 5053|   194k|        extra_ranges.push_back(std::make_pair(begin, end));
 5054|   194k|    }
_ZNK3scn2v44impl22nonascii_specs_handler19on_charset_invertedEv:
 5057|    732|    {
 5058|       |        // no-op
 5059|    732|    }
_ZNK3scn2v44impl22nonascii_specs_handler9get_errorEv:
 5072|   428k|    {
 5073|   428k|        return err;
 5074|   428k|    }
_ZN3scn2v44impl16bool_reader_baseC2Ej:
 5386|  1.38k|    constexpr bool_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v44impl14is_ascii_spaceEc:
  457|  36.9k|{
  458|  36.9k|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  36.9k|        static_cast<unsigned char>(ch))];
  460|  36.9k|}
_ZN3scn2v44impl13is_ascii_charEc:
  468|   304k|{
  469|   304k|    return static_cast<unsigned char>(ch) <= 127;
  470|   304k|}
_ZN3scn2v44impl13is_ascii_charEw:
  473|  2.00k|{
  474|  2.00k|#if WCHAR_MIN < 0
  475|  2.00k|    return ch >= 0 && ch <= 127;
  ------------------
  |  Branch (475:12): [True: 1.99k, False: 12]
  |  Branch (475:23): [True: 1.99k, False: 0]
  ------------------
  476|       |#else
  477|       |    return ch <= 127;
  478|       |#endif
  479|  2.00k|}
_ZN3scn2v44impl13is_ascii_charEDi:
  482|   331k|{
  483|   331k|    return cp <= 127;
  484|   331k|}
_ZN3scn2v44impl16has_byte_greaterEmh:
  538|  31.5k|{
  539|  31.5k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  31.5k|}
_ZN3scn2v44implntENS1_9eof_errorE:
  783|  45.4k|{
  784|  45.4k|    return e != eof_error::good;
  785|  45.4k|}
_ZN3scn2v44impl19make_eof_scan_errorENS1_9eof_errorE:
  797|    238|{
  798|    238|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  930|    238|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    238|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|    238|    return scan_error{scan_error::end_of_input, "EOF"};
  800|    238|}
_ZN3scn2v44impl20make_eof_parse_errorENS1_9eof_errorE:
  844|    820|{
  845|    820|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  930|    820|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    820|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|    820|    return parse_error::eof;
  847|    820|}
_ZN3scn2v44impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|  3.97k|{
  854|  3.97k|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 3.97k]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|  3.97k|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 100, False: 3.87k]
  ------------------
  859|    100|        return detail::unexpected_scan_error(scan_error::end_of_input, "EOF");
  860|    100|    }
  861|       |
  862|  3.87k|    return detail::unexpected_scan_error(code, msg);
  863|  3.97k|}
_ZN3scn2v44impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  3.97k|{
  868|  3.97k|    return [code, msg](parse_error err) {
  869|  3.97k|        assert(err != parse_error::good);
  870|  3.97k|        return make_scan_error_from_parse_error(err, code, msg).error();
  871|  3.97k|    };
  872|  3.97k|}
_ZN3scn2v44impl17fast_streq_nocaseEPKcS3_m:
 2319|  3.67k|{
 2320|  3.67k|    unsigned char running_diff{0};
 2321|  12.8k|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2321:24): [True: 9.16k, False: 3.67k]
  ------------------
 2322|  9.16k|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2323|  9.16k|    }
 2324|  3.67k|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2324:12): [True: 0, False: 3.67k]
  |  Branch (2324:33): [True: 0, False: 3.67k]
  ------------------
 2325|  3.67k|}
_ZN3scn2v44impl32calculate_text_width_for_fmt_v10EDi:
 2402|   151k|{
 2403|   151k|    if (cp >= 0x1100 &&
  ------------------
  |  Branch (2403:9): [True: 31.6k, False: 120k]
  ------------------
 2404|   151k|        (cp <= 0x115f ||  // Hangul Jamo init. consonants
  ------------------
  |  Branch (2404:10): [True: 92, False: 31.5k]
  ------------------
 2405|  31.6k|         cp == 0x2329 ||  // LEFT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (2405:10): [True: 108, False: 31.4k]
  ------------------
 2406|  31.6k|         cp == 0x232a ||  // RIGHT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (2406:10): [True: 72, False: 31.4k]
  ------------------
 2407|       |         // CJK ... Yi except IDEOGRAPHIC HALF FILL SPACE:
 2408|  31.6k|         (cp >= 0x2e80 && cp <= 0xa4cf && cp != 0x303f) ||
  ------------------
  |  Branch (2408:11): [True: 15.2k, False: 16.1k]
  |  Branch (2408:27): [True: 2.08k, False: 13.2k]
  |  Branch (2408:43): [True: 1.24k, False: 834]
  ------------------
 2409|  31.6k|         (cp >= 0xac00 && cp <= 0xd7a3) ||    // Hangul Syllables
  ------------------
  |  Branch (2409:11): [True: 13.2k, False: 16.9k]
  |  Branch (2409:27): [True: 146, False: 13.0k]
  ------------------
 2410|  31.6k|         (cp >= 0xf900 && cp <= 0xfaff) ||    // CJK Compatibility Ideographs
  ------------------
  |  Branch (2410:11): [True: 13.0k, False: 17.0k]
  |  Branch (2410:27): [True: 130, False: 12.8k]
  ------------------
 2411|  31.6k|         (cp >= 0xfe10 && cp <= 0xfe19) ||    // Vertical Forms
  ------------------
  |  Branch (2411:11): [True: 12.8k, False: 17.0k]
  |  Branch (2411:27): [True: 462, False: 12.4k]
  ------------------
 2412|  31.6k|         (cp >= 0xfe30 && cp <= 0xfe6f) ||    // CJK Compatibility Forms
  ------------------
  |  Branch (2412:11): [True: 12.4k, False: 17.0k]
  |  Branch (2412:27): [True: 82, False: 12.3k]
  ------------------
 2413|  31.6k|         (cp >= 0xff00 && cp <= 0xff60) ||    // Fullwidth Forms
  ------------------
  |  Branch (2413:11): [True: 12.3k, False: 17.0k]
  |  Branch (2413:27): [True: 206, False: 12.1k]
  ------------------
 2414|  31.6k|         (cp >= 0xffe0 && cp <= 0xffe6) ||    // Fullwidth Forms
  ------------------
  |  Branch (2414:11): [True: 12.1k, False: 17.0k]
  |  Branch (2414:27): [True: 166, False: 11.9k]
  ------------------
 2415|  31.6k|         (cp >= 0x20000 && cp <= 0x2fffd) ||  // CJK
  ------------------
  |  Branch (2415:11): [True: 11.7k, False: 17.1k]
  |  Branch (2415:28): [True: 244, False: 11.5k]
  ------------------
 2416|  31.6k|         (cp >= 0x30000 && cp <= 0x3fffd) ||
  ------------------
  |  Branch (2416:11): [True: 11.5k, False: 17.1k]
  |  Branch (2416:28): [True: 556, False: 10.9k]
  ------------------
 2417|       |         // Miscellaneous Symbols and Pictographs + Emoticons:
 2418|  31.6k|         (cp >= 0x1f300 && cp <= 0x1f64f) ||
  ------------------
  |  Branch (2418:11): [True: 11.1k, False: 17.0k]
  |  Branch (2418:28): [True: 78, False: 11.0k]
  ------------------
 2419|       |         // Supplemental Symbols and Pictographs:
 2420|  31.6k|         (cp >= 0x1f900 && cp <= 0x1f9ff))) {
  ------------------
  |  Branch (2420:11): [True: 11.0k, False: 17.0k]
  |  Branch (2420:28): [True: 72, False: 10.9k]
  ------------------
 2421|  3.66k|        return 2;
 2422|  3.66k|    }
 2423|   148k|    return 1;
 2424|   151k|}
_ZN3scn2v44impl26calculate_valid_text_widthEDi:
 2427|  94.7k|{
 2428|  94.7k|    return calculate_text_width_for_fmt_v10(cp);
 2429|  94.7k|}
_ZN3scn2v44impl20calculate_text_widthEDi:
 2442|    190|{
 2443|    190|    return calculate_text_width_for_fmt_v10(cp);
 2444|    190|}
_ZN3scn2v44impl11char_to_intEc:
 3239|  15.0k|{
 3240|  15.0k|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3241|  15.0k|}
_ZN3scn2v44impl11char_to_intEw:
 3243|  6.33k|{
 3244|  6.33k|#if WCHAR_MIN < 0
 3245|  6.33k|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3245:9): [True: 6.33k, False: 0]
  |  Branch (3245:20): [True: 6.33k, False: 0]
  ------------------
 3246|       |#else
 3247|       |    if (ch <= 255) {
 3248|       |#endif
 3249|  6.33k|        return char_to_int(static_cast<char>(ch));
 3250|  6.33k|    }
 3251|      0|    return 255;
 3252|  6.33k|}
_ZN3scn2v44impl16make_regex_flagsENS0_6detail11regex_flagsE:
 4351|    378|{
 4352|    378|    RE2::Options opt{RE2::Quiet};
 4353|    378|    std::string_view stringflags{};
 4354|       |
 4355|    378|    if ((flags & detail::regex_flags::multiline) == detail::regex_flags::none) {
  ------------------
  |  Branch (4355:9): [True: 360, False: 18]
  ------------------
 4356|    360|        stringflags = "(?m)";
 4357|    360|    }
 4358|    378|    if ((flags & detail::regex_flags::singleline) !=
  ------------------
  |  Branch (4358:9): [True: 6, False: 372]
  ------------------
 4359|    378|        detail::regex_flags::none) {
 4360|      6|        opt.set_dot_nl(true);
 4361|      6|    }
 4362|    378|    if ((flags & detail::regex_flags::nocase) != detail::regex_flags::none) {
  ------------------
  |  Branch (4362:9): [True: 6, False: 372]
  ------------------
 4363|      6|        opt.set_case_sensitive(false);
 4364|      6|    }
 4365|    378|    if ((flags & detail::regex_flags::nocapture) != detail::regex_flags::none) {
  ------------------
  |  Branch (4365:9): [True: 6, False: 372]
  ------------------
 4366|      6|        opt.set_never_capture(true);
 4367|      6|    }
 4368|       |
 4369|    378|    return {opt, stringflags};
 4370|    378|}
_ZN3scn2v44impl27get_unescaped_regex_patternENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4680|    534|{
 4681|    534|    std::string result{pattern};
 4682|  4.18k|    for (size_t n = 0; (n = result.find("\\/", n)) != std::string::npos;) {
  ------------------
  |  Branch (4682:24): [True: 3.64k, False: 534]
  ------------------
 4683|  3.64k|        result.replace(n, 2, "/");
 4684|  3.64k|        ++n;
 4685|  3.64k|    }
 4686|    534|    return result;
 4687|    534|}
_ZN3scn2v44impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6045|  6.61k|{
 6046|  6.61k|    if (specs.width != 0) {
  ------------------
  |  Branch (6046:9): [True: 1.87k, False: 4.73k]
  ------------------
 6047|  1.87k|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6047:13): [True: 836, False: 1.04k]
  ------------------
 6048|    836|            return detail::unexpected_scan_error(
 6049|    836|                scan_error::length_too_short,
 6050|    836|                "Scanned value too narrow, width did not exceed what "
 6051|    836|                "was specified in the format string");
 6052|    836|        }
 6053|  1.87k|    }
 6054|  5.77k|    if (specs.precision != 0) {
  ------------------
  |  Branch (6054:9): [True: 2.26k, False: 3.51k]
  ------------------
 6055|       |        // Ensured by take_width_view
 6056|  2.26k|        SCN_ENSURE(prefix_width + value_width + postfix_width <=
  ------------------
  |  |  931|  2.26k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.26k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6057|  2.26k|                   specs.precision);
 6058|  2.26k|    }
 6059|  5.77k|    return {};
 6060|  5.77k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  57.5k|    {
  304|  57.5k|        ranges::advance(x, n);
  305|  57.5k|        return x;
  306|  57.5k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  57.5k|    {
  268|  57.5k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  57.5k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|   101k|    {
  151|   101k|        i += n;
  152|   101k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  55.7k|    {
  108|  55.7k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  55.7k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  55.7k|    {
   87|  55.7k|        return s - i;
   88|  55.7k|    }
_ZNK3scn2v46ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  4.58k|    {
  304|  4.58k|        ranges::advance(x, n);
  305|  4.58k|        return x;
  306|  4.58k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  4.58k|    {
  268|  4.58k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  4.58k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  4.58k|    {
  151|  4.58k|        i += n;
  152|  4.58k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  1.09k|    {
  108|  1.09k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  1.09k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  1.09k|    {
   87|  1.09k|        return s - i;
   88|  1.09k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5beginEv:
 2992|   125k|    {
 2993|   125k|        return m_current;
 2994|   125k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5beginEv:
 2992|   159k|    {
 2993|   159k|        return m_current;
 2994|   159k|    }
_ZN3scn2v44impl16char_reader_baseIcE11check_specsERKNS0_6detail12format_specsE:
 5661|  2.40k|    {
 5662|  2.40k|        reader_error_handler eh{};
 5663|       |        if constexpr (std::is_same_v<ValueCharT, char32_t>) {
 5664|       |            detail::check_code_point_type_specs(specs, eh);
 5665|       |        }
 5666|  2.40k|        else {
 5667|  2.40k|            detail::check_char_type_specs(specs, eh);
 5668|  2.40k|        }
 5669|  2.40k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  2.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.77k, False: 628]
  |  |  ------------------
  ------------------
 5670|  1.77k|            return detail::unexpected_scan_error(
 5671|  1.77k|                scan_error::invalid_format_string, eh.m_msg);
 5672|  1.77k|        }
 5673|    628|        return {};
 5674|  2.40k|    }
_ZNK3scn2v44impl12function_refIFbcES3_EclEc:
  762|  25.4k|    {
  763|  25.4k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  25.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  25.4k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  2.69k|        : m_fptr([](storage fn,
  743|  2.69k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.69k|              cvref<T> obj = *get<T>(fn);
  745|  2.69k|              if constexpr (std::is_void_v<R>) {
  746|  2.69k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.69k|              }
  748|  2.69k|              else {
  749|  2.69k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.69k|              }
  751|  2.69k|          }),
  752|  2.69k|          m_storage(std::addressof(f))
  753|  2.69k|    {
  754|  2.69k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEcE_clESK_c:
  743|  6.76k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.76k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  6.76k|              else {
  749|  6.76k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.76k|              }
  751|  6.76k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  6.76k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  6.76k|        else if constexpr (std::is_object_v<T>) {
  688|  6.76k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  6.76k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  2.69k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.69k|        {
  662|  2.69k|        }
_ZNK3scn2v44impl12function_refIFbDiES3_EclEDi:
  762|   727k|    {
  763|   727k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|   727k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   727k|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  16.4k|        : m_fptr([](storage fn,
  743|  16.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  16.4k|              cvref<T> obj = *get<T>(fn);
  745|  16.4k|              if constexpr (std::is_void_v<R>) {
  746|  16.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  16.4k|              }
  748|  16.4k|              else {
  749|  16.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  16.4k|              }
  751|  16.4k|          }),
  752|  16.4k|          m_storage(std::addressof(f))
  753|  16.4k|    {
  754|  16.4k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|   336k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   336k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   336k|              else {
  749|   336k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   336k|              }
  751|   336k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|   336k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   336k|        else if constexpr (std::is_object_v<T>) {
  688|   336k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   336k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  16.4k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  16.4k|        {
  662|  16.4k|        }
_ZNK3scn2v44impl16char_reader_baseIcE19skip_ws_before_readEv:
 5656|  1.82k|    {
 5657|  1.82k|        return false;
 5658|  1.82k|    }
_ZZN3scn2v44impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|  3.97k|    return [code, msg](parse_error err) {
  869|  3.97k|        assert(err != parse_error::good);
  870|  3.97k|        return make_scan_error_from_parse_error(err, code, msg).error();
  871|  3.97k|    };
_ZN3scn2v44impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1878|     66|    {
 1879|     66|        auto stdloc = loc.get<std::locale>();
 1880|     66|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1881|     66|        grouping = numpunct.grouping();
 1882|     66|        thousands_sep =
 1883|     66|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1883:13): [True: 0, False: 66]
  ------------------
 1884|     66|        decimal_point = numpunct.decimal_point();
 1885|     66|    }
_ZN3scn2v44impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1815|     90|{
 1816|     90|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1816:9): [True: 90, False: 0]
  ------------------
 1817|     90|        return std::use_facet<Facet>(stdloc);
 1818|     90|    }
 1819|      0|    stdloc = std::locale(stdloc, new Facet{});
 1820|      0|    return std::use_facet<Facet>(stdloc);
 1821|     90|}
_ZN3scn2v44impl20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2448|  37.0k|{
 2449|  37.0k|    size_t count{0};
 2450|  37.0k|    for_each_code_point(input, [&count](char32_t cp) {
 2451|  37.0k|        count += calculate_text_width_for_fmt_v10(cp);
 2452|  37.0k|    });
 2453|  37.0k|    return count;
 2454|  37.0k|}
_ZN3scn2v44impl19for_each_code_pointIcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_12function_refIFvDiESA_EE:
 1544|  37.0k|{
 1545|       |    // TODO: Could be optimized by being eager
 1546|  37.0k|    auto it = input.begin();
 1547|  86.9k|    while (it != input.end()) {
  ------------------
  |  Branch (1547:12): [True: 49.9k, False: 37.0k]
  ------------------
 1548|  49.9k|        auto res = get_next_code_point(
 1549|  49.9k|            detail::make_string_view_from_iterators<CharT>(it, input.end()));
 1550|  49.9k|        cb(res.value);
 1551|  49.9k|        it = detail::make_string_view_iterator(input, res.iterator);
 1552|  49.9k|    }
 1553|  37.0k|}
_ZNK3scn2v44impl12function_refIFvDiES3_EclEDi:
  762|  56.8k|    {
  763|  56.8k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  56.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  56.8k|    }
_ZN3scn2v44impl12function_refIFvDiES3_EC2IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfIS9_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSF_EEvE4typeELPv0EEEOS9_:
  742|  37.0k|        : m_fptr([](storage fn,
  743|  37.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  37.0k|              cvref<T> obj = *get<T>(fn);
  745|  37.0k|              if constexpr (std::is_void_v<R>) {
  746|  37.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  37.0k|              }
  748|  37.0k|              else {
  749|  37.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  37.0k|              }
  751|  37.0k|          }),
  752|  37.0k|          m_storage(std::addressof(f))
  753|  37.0k|    {
  754|  37.0k|    }
_ZZN3scn2v44impl12function_refIFvDiES3_EC1IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfIS9_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSF_EEvE4typeELPv0EEEOS9_ENKUlNS1_12fnref_detail4base7storageEDiE_clESO_Di:
  743|  49.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  49.9k|              cvref<T> obj = *get<T>(fn);
  745|  49.9k|              if constexpr (std::is_void_v<R>) {
  746|  49.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|       |              else {
  749|       |                  return obj(static_cast<decltype(args)>(args)...);
  750|       |              }
  751|  49.9k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEUlDiE_EEDaNS3_7storageE:
  683|  49.9k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  49.9k|        else if constexpr (std::is_object_v<T>) {
  688|  49.9k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  49.9k|    }
_ZZN3scn2v44impl20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEENKUlDiE_clEDi:
 2450|  49.9k|    for_each_code_point(input, [&count](char32_t cp) {
 2451|  49.9k|        count += calculate_text_width_for_fmt_v10(cp);
 2452|  49.9k|    });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vIS9_EEvE4typeELPv0EEEPS9_:
  660|  37.0k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  37.0k|        {
  662|  37.0k|        }
_ZNK3scn2v44impl24contiguous_range_factoryIcE4viewEv:
 1680|  4.29k|    {
 1681|  4.29k|        return m_view;
 1682|  4.29k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcED2Ev:
 1670|  4.60k|    ~contiguous_range_factory() = default;
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E14multibyte_leftEv:
 2520|  34.2k|    {
 2521|  34.2k|        return m_multibyte_left;
 2522|  34.2k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E22is_current_double_wideEv:
 2525|  8.20k|    {
 2526|  8.20k|        assert(count() != 0 || multibyte_left() != 0);
 2527|  8.20k|        return _get_width_at_current_cp_start(
 2528|  8.20k|                   _get_cp_length_at_current()) == 2;
 2529|  8.20k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E30_get_width_at_current_cp_startEl:
 2753|  92.9k|    {
 2754|  92.9k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  865|  92.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.85k, False: 91.0k]
  |  |  ------------------
  ------------------
 2755|  1.85k|            return 0;
 2756|  1.85k|        }
 2757|       |
 2758|  91.0k|        if (cplen == 1) {
  ------------------
  |  Branch (2758:13): [True: 59.4k, False: 31.6k]
  ------------------
 2759|  59.4k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  930|  59.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  59.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2760|  59.4k|            auto cp = static_cast<char32_t>(*m_current);
 2761|  59.4k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2762|  59.4k|        }
 2763|       |
 2764|  31.6k|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2765|  31.6k|                                           cplen);
 2766|  31.6k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  31.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 456, False: 31.1k]
  |  |  ------------------
  ------------------
 2767|    456|            return 0;
 2768|    456|        }
 2769|       |
 2770|  31.1k|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2771|  31.1k|        return static_cast<difference_type>(
 2772|  31.1k|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2773|  31.6k|    }
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1955|  34.0k|{
 1956|  34.0k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|  34.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|  34.0k|    if constexpr (ranges::sized_range<Range>) {
 1959|  34.0k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|  34.0k|        if (sz < count) {
  ------------------
  |  Branch (1960:13): [True: 564, False: 33.4k]
  ------------------
 1961|    564|            return unexpected(eof_error::eof);
 1962|    564|        }
 1963|       |
 1964|  33.4k|        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|       |    else {
 1967|       |        auto it = range.begin();
 1968|       |        if (guaranteed_minimum_size(range) >= count) {
 1969|       |            return ranges::next(it, count);
 1970|       |        }
 1971|       |
 1972|       |        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1973|       |            if (it == range.end()) {
 1974|       |                return unexpected(eof_error::eof);
 1975|       |            }
 1976|       |        }
 1977|       |
 1978|       |        return it;
 1979|       |    }
 1980|  34.0k|}
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E25_get_cp_length_at_currentEv:
 2747|  92.9k|    {
 2748|  92.9k|        return static_cast<difference_type>(
 2749|  92.9k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2750|  92.9k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EdeEv:
 2532|   151k|    {
 2533|   151k|        return *m_current;
 2534|   151k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EppEv:
 2541|   167k|    {
 2542|   167k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  930|   167k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   167k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2543|   167k|        _increment_current();
 2544|   167k|        return *this;
 2545|   167k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E18_increment_currentEv:
 2776|   167k|    {
 2777|   167k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2777:13): [True: 84.7k, False: 82.7k]
  ------------------
 2778|  84.7k|            auto cplen = _get_cp_length_at_current();
 2779|  84.7k|            m_multibyte_left = cplen - 1;
 2780|  84.7k|            m_count -= _get_width_at_current_cp_start(cplen);
 2781|  84.7k|        }
 2782|  82.7k|        else {
 2783|  82.7k|            --m_multibyte_left;
 2784|  82.7k|        }
 2785|       |
 2786|   167k|        ++m_current;
 2787|   167k|    }
_ZN3scn2v44impl27counted_width_iterator_implneIPKcS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2637|   100k|    {
 2638|   100k|        return !(a == b);
 2639|   100k|    }
_ZN3scn2v44impl27counted_width_iterator_impleqIPKcS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2629|   109k|    {
 2630|   109k|        return a.m_current == b.m_current;
 2631|   109k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EdeEv:
 2536|  12.3k|    {
 2537|  12.3k|        return *m_current;
 2538|  12.3k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeE:
  267|  1.46k|    {
  268|  1.46k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.46k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent22random_access_iteratorISE_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  160|  1.46k|    {
  161|  1.46k|        constexpr auto zero = iter_difference_t<I>{0};
  162|       |
  163|  1.46k|        if (n > zero) {
  ------------------
  |  Branch (163:13): [True: 0, False: 1.46k]
  ------------------
  164|      0|            while (n-- > zero) {
  ------------------
  |  Branch (164:20): [True: 0, False: 0]
  ------------------
  165|      0|                ++i;
  166|      0|            }
  167|      0|        }
  168|  1.46k|        else {
  169|  1.46k|            while (n++ < zero) {
  ------------------
  |  Branch (169:20): [True: 0, False: 1.46k]
  ------------------
  170|      0|                --i;
  171|      0|            }
  172|  1.46k|        }
  173|  1.46k|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EEcE8is_validEv:
 1988|  33.5k|    {
 1989|  33.5k|        return !codepoint.empty();
 1990|  33.5k|    }
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EESB_EEEEDaOT_:
 1781|  2.10k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|       |                  ranges::sized_range<Range>) {
 1785|       |        return string_view_wrapper{SCN_FWD(range)};
 1786|       |    }
 1787|  2.10k|    else {
 1788|  2.10k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  936|  2.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1789|  2.10k|    }
 1790|  2.10k|}
_ZN3scn2v44impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSH_:
 1635|  2.10k|    {
 1636|  2.10k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|  2.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1637|  2.10k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEvOT_:
 1719|  2.10k|    {
 1720|  2.10k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|  2.10k|        else {
 1753|  2.10k|            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|  2.10k|            if constexpr (ranges::common_range<Range>) {
 1758|  2.10k|                std::copy(ranges::begin(range), ranges::end(range),
 1759|  2.10k|                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|  2.10k|            m_view = string_view_type{str};
 1768|  2.10k|        }
 1769|  2.10k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EC2ES5_S5_l:
 2480|  25.2k|        : m_current(x), m_end(s), m_count(n)
 2481|  25.2k|    {
 2482|  25.2k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E4baseEv:
 2512|   159k|    {
 2513|   159k|        return m_current;
 2514|   159k|    }
_ZNK3scn2v44impl14_take_width_fnclINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEDTtlNS1_15take_width_viewEfp_fp0_EERKT_l:
 2942|  10.4k|    {
 2943|  10.4k|        return take_width_view{r, n};
 2944|  10.4k|    }
_ZN3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2ERKS9_l:
 2910|  10.4k|        : m_base(base), m_count(count)
 2911|  10.4k|    {
 2912|  10.4k|    }
_ZN3scn2v44impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEC2ERKS9_:
 2822|  10.4k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v44impl20reader_impl_for_charIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERcNSN_10locale_refE:
 5701|    356|    {
 5702|    356|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5702:13): [True: 322, False: 34]
  ------------------
 5703|    356|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5703:13): [True: 0, False: 34]
  ------------------
 5704|    322|            return read_default(range, value, loc);
 5705|    322|        }
 5706|       |
 5707|     34|        reader_impl_for_int<CharT> reader{};
 5708|     34|        signed char tmp_value{};
 5709|     34|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5710|     34|        value = static_cast<signed char>(value);
 5711|     34|        return ret;
 5712|    356|    }
_ZN3scn2v44impl20reader_impl_for_charIcE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RcNS0_6detail10locale_refE:
 5683|    322|    {
 5684|    322|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    322|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5685|    322|        if constexpr (std::is_same_v<CharT, char>) {
 5686|    322|            return code_unit_reader<char>{}.read(range, value);
 5687|       |        }
 5688|       |        else {
 5689|       |            SCN_UNUSED(range);
 5690|       |            SCN_EXPECT(false);
 5691|       |            SCN_UNREACHABLE;
 5692|       |        }
 5693|    322|    }
_ZN3scn2v44impl16code_unit_readerIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSH_Rc:
 5601|    322|    {
 5602|    322|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3940|    322|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    322|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    322|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    322|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 322]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    322|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    322|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5603|    322|        ch = *range.begin();
 5604|    322|        return it;
 5605|    322|    }
_ZN3scn2v44impl14read_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 1944|  2.36k|{
 1945|  2.36k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  2.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.36k]
  |  |  ------------------
  ------------------
 1946|      0|        return unexpected(e);
 1947|      0|    }
 1948|       |
 1949|  2.36k|    return ranges::next(range.begin());
 1950|  2.36k|}
_ZN3scn2v44impl9eof_checkINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_9eof_errorET_:
  950|  2.36k|{
  951|  2.36k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  2.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.36k]
  |  |  ------------------
  ------------------
  952|      0|        return eof_error::eof;
  953|      0|    }
  954|  2.36k|    return eof_error::good;
  955|  2.36k|}
_ZN3scn2v44impl12is_range_eofINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEbT_:
  944|  2.36k|{
  945|  2.36k|    return is_range_eof(r.begin(), r.end());
  946|  2.36k|}
_ZN3scn2v44impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEbT_T0_:
  928|  35.9k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  35.9k|    {
  938|  35.9k|        return begin == end;
  939|  35.9k|    }
  940|  35.9k|}
_ZN3scn2v44impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2878|   152k|        {
 2879|   152k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2879:21): [True: 6.08k, False: 146k]
  |  Branch (2879:39): [True: 1.02k, False: 5.05k]
  ------------------
 2880|   152k|                   y.base() == x.m_end ||
  ------------------
  |  Branch (2880:20): [True: 1.47k, False: 149k]
  ------------------
 2881|   152k|                   (y.count() == 1 && y.multibyte_left() == 0 &&
  ------------------
  |  Branch (2881:21): [True: 28.1k, False: 121k]
  |  Branch (2881:39): [True: 8.20k, False: 19.9k]
  ------------------
 2882|   149k|                    y.is_current_double_wide());
  ------------------
  |  Branch (2882:21): [True: 110, False: 8.09k]
  ------------------
 2883|   152k|        }
_ZNK3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE3endEv:
 2926|  81.1k|    {
 2927|  81.1k|        return sentinel<true>{m_base.get().end()};
 2928|  81.1k|    }
_ZNK3scn2v44impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvE3getEv:
 2825|   131k|    {
 2826|   131k|        return view;
 2827|   131k|    }
_ZN3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE8sentinelILb1EEC2ES8_:
 2859|  81.1k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
  ------------------
  |  |  934|  81.1k|    static_cast<    \
  |  |  935|  81.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
_ZNK3scn2v46ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
  295|  2.40k|    {
  296|  2.40k|        ++x;
  297|  2.40k|        return x;
  298|  2.40k|    }
_ZNK3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 2920|  25.2k|    {
 2921|  25.2k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2922|  25.2k|                                      m_count};
 2923|  25.2k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEaEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3589|     34|    {
 3590|     34|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|     34|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     34|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     34|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 34]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     34|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     34|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|     34|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|     34|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 0, False: 34]
  ------------------
 3594|       |            if constexpr (!std::is_signed_v<T>) {
 3595|       |                return detail::unexpected_scan_error(
 3596|       |                    scan_error::invalid_scanned_value,
 3597|       |                    "Unexpected '-' sign when parsing an "
 3598|       |                    "unsigned value");
 3599|       |            }
 3600|      0|            else {
 3601|      0|                if (specs.type ==
  ------------------
  |  Branch (3601:21): [True: 0, False: 0]
  ------------------
 3602|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3603|      0|                    return detail::unexpected_scan_error(
 3604|      0|                        scan_error::invalid_scanned_value,
 3605|      0|                        "'u'-option disallows negative values");
 3606|      0|                }
 3607|      0|            }
 3608|      0|        }
 3609|       |
 3610|     34|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 0, False: 34]
  ------------------
 3611|      0|            value = T{0};
 3612|      0|            return std::next(prefix_result.iterator);
 3613|      0|        }
 3614|       |
 3615|     34|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|     34|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 34, False: 0]
  |  |  ------------------
  ------------------
 3616|     34|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|     34|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     34|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     34|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 34, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     34|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     34|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     34|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     34|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     34|    }                                                  \
  |  |  |  | 3939|     34|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|      0|                    parse_integer_digits_without_thsep(
 3618|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|      0|                        prefix_result.parsed_base));
 3620|       |
 3621|      0|            auto buf = make_contiguous_buffer(
 3622|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|      0|                                        prefix_result.parsed_base));
 3626|       |
 3627|      0|            return ranges::next(
 3628|      0|                prefix_result.iterator,
 3629|      0|                ranges::distance(buf.view().begin(), result_it));
 3630|      0|        }
 3631|       |
 3632|      0|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|      0|            localized_number_formatting_options<CharT>{loc};
 3637|      0|#endif
 3638|       |
 3639|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|      0|                parse_integer_digits_with_thsep(
 3641|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|      0|                    prefix_result.parsed_base, locale_options));
 3643|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|      0|            parse_digits_result;
 3645|       |
 3646|      0|        auto nothsep_source_view =
 3647|      0|            std::basic_string_view<CharT>{nothsep_source};
 3648|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|      0|            nothsep_source_it,
 3650|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|      0|                                prefix_result.parsed_base));
 3652|       |
 3653|      0|        return ranges::next(
 3654|      0|            prefix_result.iterator,
 3655|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|      0|                ranges::ssize(thsep_indices));
 3657|      0|    }
_ZN3scn2v44impl20parse_integer_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESG_i:
 3376|  1.01k|{
 3377|  1.01k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3940|  1.01k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.01k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.01k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.01k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.01k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  1.01k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.01k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3378|  1.01k|    auto [base_prefix_begin_it, sign] = sign_result;
 3379|       |
 3380|  1.01k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3381|  1.01k|        parse_integer_base_prefix(
 3382|  1.01k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3383|       |
 3384|  1.01k|    if (parsed_zero) {
  ------------------
  |  Branch (3384:9): [True: 0, False: 1.01k]
  ------------------
 3385|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3385:13): [True: 0, False: 0]
  |  Branch (3385:13): [True: 0, False: 0]
  ------------------
 3386|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3386:13): [True: 0, False: 0]
  ------------------
 3387|      0|            digits_begin_it = base_prefix_begin_it;
 3388|      0|        }
 3389|      0|        else {
 3390|      0|            parsed_zero = false;
 3391|      0|        }
 3392|      0|    }
 3393|  1.01k|    else {
 3394|  1.01k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3394:13): [True: 0, False: 1.01k]
  |  Branch (3394:13): [True: 1.01k, False: 0]
  ------------------
 3395|  1.01k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3395:13): [True: 1.01k, False: 0]
  ------------------
 3396|  1.01k|            digits_begin_it = base_prefix_begin_it;
 3397|  1.01k|        }
 3398|  1.01k|    }
 3399|       |
 3400|  1.01k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3400:9): [True: 1.01k, False: 0]
  ------------------
 3401|  1.01k|        sign = sign_type::plus_sign;
 3402|  1.01k|    }
 3403|  1.01k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3404|  1.01k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3405|  1.01k|}
_ZN3scn2v44impl18parse_numeric_signINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESG_:
 3257|  1.35k|{
 3258|  1.35k|    auto r = read_one_of_code_unit(range, "+-");
 3259|  1.35k|    if (!r) {
  ------------------
  |  Branch (3259:9): [True: 1.35k, False: 0]
  ------------------
 3260|  1.35k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3260:13): [True: 1.35k, False: 0]
  ------------------
 3261|  1.35k|            return std::pair{range.begin(), sign_type::default_sign};
 3262|  1.35k|        }
 3263|      0|        return unexpected(eof_error::eof);
 3264|  1.35k|    }
 3265|       |
 3266|      0|    auto& it = *r;
 3267|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3267:9): [True: 0, False: 0]
  ------------------
 3268|      0|        return std::pair{it, sign_type::minus_sign};
 3269|      0|    }
 3270|      0|    return std::pair{it, sign_type::plus_sign};
 3271|      0|}
_ZN3scn2v44impl21read_one_of_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2371|  1.35k|{
 2372|  1.35k|    auto it = read_code_unit(range);
 2373|  1.35k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  1.35k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.35k]
  |  |  ------------------
  ------------------
 2374|      0|        return unexpected(make_eof_parse_error(it.error()));
 2375|      0|    }
 2376|       |
 2377|  2.70k|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 2.70k, False: 1.35k]
  ------------------
 2378|  2.70k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 0, False: 2.70k]
  ------------------
 2379|      0|            return *it;
 2380|      0|        }
 2381|  2.70k|    }
 2382|       |
 2383|  1.35k|    return unexpected(parse_error::error);
 2384|  1.35k|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_i:
 3343|  1.01k|{
 3344|  1.01k|    switch (base) {
 3345|     14|        case 2:
  ------------------
  |  Branch (3345:9): [True: 14, False: 996]
  ------------------
 3346|       |            // allow 0b/0B
 3347|     14|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3348|     14|                    false};
 3349|       |
 3350|     14|        case 8: {
  ------------------
  |  Branch (3350:9): [True: 14, False: 996]
  ------------------
 3351|       |            // allow 0o/0O/0
 3352|     14|            bool zero_parsed = false;
 3353|     14|            auto it = apply_opt(
 3354|     14|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3355|     14|            return {it, 8, zero_parsed};
 3356|      0|        }
 3357|       |
 3358|    322|        case 16:
  ------------------
  |  Branch (3358:9): [True: 322, False: 688]
  ------------------
 3359|       |            // allow 0x/0X
 3360|    322|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3361|    322|                    false};
 3362|       |
 3363|     26|        case 0:
  ------------------
  |  Branch (3363:9): [True: 26, False: 984]
  ------------------
 3364|       |            // detect base
 3365|     26|            return parse_integer_base_prefix_for_detection(range);
 3366|       |
 3367|    634|        default:
  ------------------
  |  Branch (3367:9): [True: 634, False: 376]
  ------------------
 3368|       |            // no base prefix allowed
 3369|    634|            return {range.begin(), base, false};
 3370|  1.01k|    }
 3371|  1.01k|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENS1_14parse_expectedESB_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEEE4typeEOSN_SP_:
 2390|    350|{
 2391|    350|    if (!result) {
  ------------------
  |  Branch (2391:9): [True: 350, False: 0]
  ------------------
 2392|    350|        return range.begin();
 2393|    350|    }
 2394|      0|    return *result;
 2395|    350|}
_ZN3scn2v44impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3294|     40|{
 3295|     40|    return read_matching_string_classic_nocase(range, "0b");
 3296|     40|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEE:
 2330|  1.43k|{
 2331|  1.43k|    using char_type = detail::char_t<Range>;
 2332|       |
 2333|       |    if constexpr (ranges::contiguous_range<Range> &&
 2334|       |                  std::is_same_v<char_type, char>) {
 2335|       |        if (range.size() < str.size()) {
 2336|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2337|       |        }
 2338|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2339|       |            return unexpected(parse_error::error);
 2340|       |        }
 2341|       |        return ranges::next(range.begin(), str.size());
 2342|       |    }
 2343|  1.43k|    else {
 2344|  1.43k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|  1.43k|            if (ch < 'A' || ch > 'Z') {
 2346|  1.43k|                return ch;
 2347|  1.43k|            }
 2348|  1.43k|            return static_cast<char_type>(ch +
 2349|  1.43k|                                          static_cast<char_type>('a' - 'A'));
 2350|  1.43k|        };
 2351|       |
 2352|  1.43k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|  1.43k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.43k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.43k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.43k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 242, False: 1.18k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    242|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    242|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    242|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    242|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    242|    }                                                  \
  |  |  |  | 3939|  1.43k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2353|  1.18k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2354|  1.18k|                        .transform_error(make_eof_parse_error));
 2355|       |
 2356|  1.18k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  865|  1.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.18k, False: 0]
  |  |  ------------------
  ------------------
 2357|  1.18k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2358|  1.18k|                    return ascii_tolower(a) ==
 2359|  1.18k|                           static_cast<detail::char_t<Range>>(b);
 2360|  1.18k|                }))) {
 2361|  1.18k|            return unexpected(parse_error::error);
 2362|  1.18k|        }
 2363|       |
 2364|      0|        return it;
 2365|  1.18k|    }
 2366|  1.43k|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_l:
 1955|  5.50k|{
 1956|  5.50k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|  5.50k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.50k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|  5.50k|    else {
 1967|  5.50k|        auto it = range.begin();
 1968|  5.50k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 0, False: 5.50k]
  ------------------
 1969|      0|            return ranges::next(it, count);
 1970|      0|        }
 1971|       |
 1972|  19.9k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 14.7k, False: 5.18k]
  ------------------
 1973|  14.7k|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 322, False: 14.4k]
  ------------------
 1974|    322|                return unexpected(eof_error::eof);
 1975|    322|            }
 1976|  14.7k|        }
 1977|       |
 1978|  5.18k|        return it;
 1979|  5.50k|    }
 1980|  5.50k|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEmT_:
 1095|  5.50k|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|       |                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|       |        else {
 1107|       |            if (r.begin().stores_parent()) {
 1108|       |                return static_cast<size_t>(
 1109|       |                    r.begin().parent()->chars_available() -
 1110|       |                    r.begin().position());
 1111|       |            }
 1112|       |            return r.begin().contiguous_segment().size();
 1113|       |        }
 1114|       |    }
 1115|  5.50k|    else {
 1116|  5.50k|        return 0;
 1117|  5.50k|    }
 1118|  5.50k|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlcE_clEc:
 2344|  1.18k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|  1.18k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2345:17): [True: 42, False: 1.14k]
  |  Branch (2345:29): [True: 1.14k, False: 0]
  ------------------
 2346|  1.18k|                return ch;
 2347|  1.18k|            }
 2348|      0|            return static_cast<char_type>(ch +
 2349|      0|                                          static_cast<char_type>('a' - 'A'));
 2350|  1.18k|        };
_ZN3scn2v44impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_Rb:
 3308|     40|{
 3309|     40|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3309:14): [True: 0, False: 40]
  ------------------
 3310|      0|        return *r;
 3311|      0|    }
 3312|       |
 3313|     40|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3313:14): [True: 0, False: 40]
  ------------------
 3314|      0|        zero_parsed = true;
 3315|      0|        return *r;
 3316|      0|    }
 3317|       |
 3318|     40|    return unexpected(parse_error::error);
 3319|     40|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NDTcl4implISL_EEE4typeE:
 2245|     40|{
 2246|     40|    auto it = read_code_unit(range);
 2247|     40|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|     40|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 40]
  |  |  ------------------
  ------------------
 2248|      0|        return unexpected(make_eof_parse_error(it.error()));
 2249|      0|    }
 2250|       |
 2251|     40|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|     40|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 40, False: 0]
  |  |  ------------------
  ------------------
 2252|     40|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|     40|        return unexpected(parse_error::error);
 2254|     40|    }
 2255|       |
 2256|      0|    return *it;
 2257|     40|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 1944|     40|{
 1945|     40|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|     40|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 40]
  |  |  ------------------
  ------------------
 1946|      0|        return unexpected(e);
 1947|      0|    }
 1948|       |
 1949|     40|    return ranges::next(range.begin());
 1950|     40|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_9eof_errorET_:
  950|     40|{
  951|     40|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|     40|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 40]
  |  |  ------------------
  ------------------
  952|      0|        return eof_error::eof;
  953|      0|    }
  954|     40|    return eof_error::good;
  955|     40|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEbT_:
  944|  33.5k|{
  945|  33.5k|    return is_range_eof(r.begin(), r.end());
  946|  33.5k|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3301|    348|{
 3302|    348|    return read_matching_string_classic_nocase(range, "0x");
 3303|    348|}
_ZN3scn2v44impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_:
 3324|     26|{
 3325|     26|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3325:14): [True: 0, False: 26]
  ------------------
 3326|      0|        return {*r, 16, false};
 3327|      0|    }
 3328|     26|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3328:14): [True: 0, False: 26]
  ------------------
 3329|      0|        return {*r, 2, false};
 3330|      0|    }
 3331|     26|    {
 3332|     26|        bool zero_parsed{false};
 3333|     26|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3333:18): [True: 0, False: 26]
  ------------------
 3334|      0|            return {*r, 8, zero_parsed};
 3335|      0|        }
 3336|     26|    }
 3337|     26|    return {range.begin(), 10, false};
 3338|     26|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_i:
 3410|    982|{
 3411|    982|    using char_type = detail::char_t<Range>;
 3412|       |
 3413|       |    if constexpr (ranges::contiguous_range<Range>) {
 3414|       |        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3415|       |            return detail::unexpected_scan_error(
 3416|       |                scan_error::invalid_scanned_value,
 3417|       |                "Failed to parse integer: No digits found");
 3418|       |        }
 3419|       |        return range.end();
 3420|       |    }
 3421|    982|    else {
 3422|    982|        return read_while1_code_unit(range,
 3423|    982|                                     [&](char_type ch) noexcept {
 3424|    982|                                         return char_to_int(ch) < base;
 3425|    982|                                     })
 3426|    982|            .transform_error(map_parse_error_to_scan_error(
 3427|    982|                scan_error::invalid_scanned_value,
 3428|    982|                "Failed to parse integer: No digits found"));
 3429|    982|    }
 3430|    982|}
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigISU_E8functionEEE:
 2094|  1.32k|{
 2095|  1.32k|    auto it = read_while_code_unit(range, pred);
 2096|  1.32k|    if (it == range.begin()) {
  ------------------
  |  Branch (2096:9): [True: 1.32k, False: 0]
  ------------------
 2097|  1.32k|        return unexpected(parse_error::error);
 2098|  1.32k|    }
 2099|      0|    return it;
 2100|  1.32k|}
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 2074|  1.32k|{
 2075|  1.32k|    return read_until_code_unit(range, std::not_fn(pred));
 2076|  1.32k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 2055|  1.32k|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|  1.32k|    else {
 2060|  1.32k|        auto first = range.begin();
 2061|  1.32k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 1.32k, False: 0]
  ------------------
 2062|  1.32k|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 1.32k, False: 0]
  ------------------
 2063|  1.32k|                return first;
 2064|  1.32k|            }
 2065|  1.32k|        }
 2066|      0|        return first;
 2067|  1.32k|    }
 2068|  1.32k|}
_ZN3scn2v44implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2891|  81.6k|        {
 2892|  81.6k|            return !(y == x);
 2893|  81.6k|        }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_SV_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSP_:
  742|    982|        : m_fptr([](storage fn,
  743|    982|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    982|              cvref<T> obj = *get<T>(fn);
  745|    982|              if constexpr (std::is_void_v<R>) {
  746|    982|                  obj(static_cast<decltype(args)>(args)...);
  747|    982|              }
  748|    982|              else {
  749|    982|                  return obj(static_cast<decltype(args)>(args)...);
  750|    982|              }
  751|    982|          }),
  752|    982|          m_storage(std::addressof(f))
  753|    982|    {
  754|    982|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_SV_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|    982|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    982|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    982|              else {
  749|    982|                  return obj(static_cast<decltype(args)>(args)...);
  750|    982|              }
  751|    982|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSD_EENS1_15take_width_viewINS9_ISD_SD_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_iEUlcE_EEDaNS3_7storageE:
  683|    982|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    982|        else if constexpr (std::is_object_v<T>) {
  688|    982|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    982|    }
_ZZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_iENKUlcE_clEc:
 3423|    982|                                     [&](char_type ch) noexcept {
 3424|    982|                                         return char_to_int(ch) < base;
 3425|    982|                                     })
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_TnPNSN_9enable_ifIXsr3stdE11is_object_vISP_EEvE4typeELPv0EEEPSP_:
  660|    982|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    982|        {
  662|    982|        }
_ZN3scn2v44impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEENSJ_12basic_stringIT0_NSJ_11char_traitsISS_EENSJ_9allocatorISS_EEEENSR_IcNST_IcEENSV_IcEEEEEEEEESM_iRKNS1_35localized_number_formatting_optionsISS_EE:
 3440|     28|{
 3441|     28|    std::basic_string<CharT> output;
 3442|     28|    std::string thsep_indices;
 3443|     28|    auto it = range.begin();
 3444|     28|    bool digit_matched = false;
 3445|     28|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3445:12): [True: 28, False: 0]
  ------------------
 3446|     28|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3446:13): [True: 0, False: 28]
  ------------------
 3447|      0|            thsep_indices.push_back(
 3448|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3449|      0|        }
 3450|     28|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3450:18): [True: 28, False: 0]
  ------------------
 3451|     28|            break;
 3452|     28|        }
 3453|      0|        else {
 3454|      0|            output.push_back(*it);
 3455|      0|            digit_matched = true;
 3456|      0|        }
 3457|     28|    }
 3458|     28|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  865|     28|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 28, False: 0]
  |  |  ------------------
  ------------------
 3459|     28|        return detail::unexpected_scan_error(
 3460|     28|            scan_error::invalid_scanned_value,
 3461|     28|            "Failed to parse integer: No digits found");
 3462|     28|    }
 3463|      0|    return std::tuple{it, output, thsep_indices};
 3464|     28|}
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E5countEv:
 2516|   312k|    {
 2517|   312k|        return m_count;
 2518|   312k|    }
_ZN3scn2v44impl20reader_impl_for_charIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERcNSL_10locale_refE:
 5701|    268|    {
 5702|    268|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5702:13): [True: 246, False: 22]
  ------------------
 5703|    268|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5703:13): [True: 0, False: 22]
  ------------------
 5704|    246|            return read_default(range, value, loc);
 5705|    246|        }
 5706|       |
 5707|     22|        reader_impl_for_int<CharT> reader{};
 5708|     22|        signed char tmp_value{};
 5709|     22|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5710|     22|        value = static_cast<signed char>(value);
 5711|     22|        return ret;
 5712|    268|    }
_ZN3scn2v44impl20reader_impl_for_charIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RcNS0_6detail10locale_refE:
 5683|    878|    {
 5684|    878|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    878|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5685|    878|        if constexpr (std::is_same_v<CharT, char>) {
 5686|    878|            return code_unit_reader<char>{}.read(range, value);
 5687|       |        }
 5688|       |        else {
 5689|       |            SCN_UNUSED(range);
 5690|       |            SCN_EXPECT(false);
 5691|       |            SCN_UNREACHABLE;
 5692|       |        }
 5693|    878|    }
_ZN3scn2v44impl16code_unit_readerIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_Rc:
 5601|    878|    {
 5602|    878|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3940|    878|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    878|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    878|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    878|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 878]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    878|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    878|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5603|    878|        ch = *range.begin();
 5604|    878|        return it;
 5605|    878|    }
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1944|  6.37k|{
 1945|  6.37k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  6.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 6.37k]
  |  |  ------------------
  ------------------
 1946|      0|        return unexpected(e);
 1947|      0|    }
 1948|       |
 1949|  6.37k|    return ranges::next(range.begin());
 1950|  6.37k|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  950|  21.4k|{
  951|  21.4k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  21.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 21.4k]
  |  |  ------------------
  ------------------
  952|      0|        return eof_error::eof;
  953|      0|    }
  954|  21.4k|    return eof_error::good;
  955|  21.4k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  944|   325k|{
  945|   325k|    return is_range_eof(r.begin(), r.end());
  946|   325k|}
_ZN3scn2v44impl12is_range_eofIPKcS4_EEbT_T0_:
  928|   368k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   368k|    {
  938|   368k|        return begin == end;
  939|   368k|    }
  940|   368k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  37.4k|    {
  296|  37.4k|        ++x;
  297|  37.4k|        return x;
  298|  37.4k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3589|     22|    {
 3590|     22|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|     22|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|     22|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 0, False: 22]
  ------------------
 3594|       |            if constexpr (!std::is_signed_v<T>) {
 3595|       |                return detail::unexpected_scan_error(
 3596|       |                    scan_error::invalid_scanned_value,
 3597|       |                    "Unexpected '-' sign when parsing an "
 3598|       |                    "unsigned value");
 3599|       |            }
 3600|      0|            else {
 3601|      0|                if (specs.type ==
  ------------------
  |  Branch (3601:21): [True: 0, False: 0]
  ------------------
 3602|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3603|      0|                    return detail::unexpected_scan_error(
 3604|      0|                        scan_error::invalid_scanned_value,
 3605|      0|                        "'u'-option disallows negative values");
 3606|      0|                }
 3607|      0|            }
 3608|      0|        }
 3609|       |
 3610|     22|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 0, False: 22]
  ------------------
 3611|      0|            value = T{0};
 3612|      0|            return std::next(prefix_result.iterator);
 3613|      0|        }
 3614|       |
 3615|     22|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|     22|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 22, False: 0]
  |  |  ------------------
  ------------------
 3616|     22|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|     22|                    parse_integer_digits_without_thsep(
 3618|     22|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|     22|                        prefix_result.parsed_base));
 3620|       |
 3621|     22|            auto buf = make_contiguous_buffer(
 3622|     22|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|     22|            SCN_TRY(result_it,
  ------------------
  |  | 3940|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 22, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     22|    }                                                  \
  |  |  |  | 3939|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|      0|                                        prefix_result.parsed_base));
 3626|       |
 3627|      0|            return ranges::next(
 3628|      0|                prefix_result.iterator,
 3629|      0|                ranges::distance(buf.view().begin(), result_it));
 3630|     22|        }
 3631|       |
 3632|      0|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|      0|            localized_number_formatting_options<CharT>{loc};
 3637|      0|#endif
 3638|       |
 3639|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|      0|                parse_integer_digits_with_thsep(
 3641|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|      0|                    prefix_result.parsed_base, locale_options));
 3643|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|      0|            parse_digits_result;
 3645|       |
 3646|      0|        auto nothsep_source_view =
 3647|      0|            std::basic_string_view<CharT>{nothsep_source};
 3648|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|      0|            nothsep_source_it,
 3650|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|      0|                                prefix_result.parsed_base));
 3652|       |
 3653|      0|        return ranges::next(
 3654|      0|            prefix_result.iterator,
 3655|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|      0|                ranges::ssize(thsep_indices));
 3657|      0|    }
_ZN3scn2v44impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3376|  2.72k|{
 3377|  2.72k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3940|  2.72k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.72k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.72k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.72k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 2.72k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  2.72k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  2.72k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3378|  2.72k|    auto [base_prefix_begin_it, sign] = sign_result;
 3379|       |
 3380|  2.72k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3381|  2.72k|        parse_integer_base_prefix(
 3382|  2.72k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3383|       |
 3384|  2.72k|    if (parsed_zero) {
  ------------------
  |  Branch (3384:9): [True: 0, False: 2.72k]
  ------------------
 3385|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3385:13): [True: 0, False: 0]
  ------------------
 3386|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3386:13): [True: 0, False: 0]
  ------------------
 3387|      0|            digits_begin_it = base_prefix_begin_it;
 3388|      0|        }
 3389|      0|        else {
 3390|      0|            parsed_zero = false;
 3391|      0|        }
 3392|      0|    }
 3393|  2.72k|    else {
 3394|  2.72k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3394:13): [True: 0, False: 2.72k]
  ------------------
 3395|  2.72k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3395:13): [True: 2.72k, False: 0]
  ------------------
 3396|  2.72k|            digits_begin_it = base_prefix_begin_it;
 3397|  2.72k|        }
 3398|  2.72k|    }
 3399|       |
 3400|  2.72k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3400:9): [True: 2.72k, False: 0]
  ------------------
 3401|  2.72k|        sign = sign_type::plus_sign;
 3402|  2.72k|    }
 3403|  2.72k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3404|  2.72k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3405|  2.72k|}
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3257|  3.63k|{
 3258|  3.63k|    auto r = read_one_of_code_unit(range, "+-");
 3259|  3.63k|    if (!r) {
  ------------------
  |  Branch (3259:9): [True: 3.63k, False: 0]
  ------------------
 3260|  3.63k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3260:13): [True: 3.63k, False: 0]
  ------------------
 3261|  3.63k|            return std::pair{range.begin(), sign_type::default_sign};
 3262|  3.63k|        }
 3263|      0|        return unexpected(eof_error::eof);
 3264|  3.63k|    }
 3265|       |
 3266|      0|    auto& it = *r;
 3267|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3267:9): [True: 0, False: 0]
  ------------------
 3268|      0|        return std::pair{it, sign_type::minus_sign};
 3269|      0|    }
 3270|      0|    return std::pair{it, sign_type::plus_sign};
 3271|      0|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2371|  3.63k|{
 2372|  3.63k|    auto it = read_code_unit(range);
 2373|  3.63k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  3.63k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 3.63k]
  |  |  ------------------
  ------------------
 2374|      0|        return unexpected(make_eof_parse_error(it.error()));
 2375|      0|    }
 2376|       |
 2377|  7.26k|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 7.26k, False: 3.63k]
  ------------------
 2378|  7.26k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 0, False: 7.26k]
  ------------------
 2379|      0|            return *it;
 2380|      0|        }
 2381|  7.26k|    }
 2382|       |
 2383|  3.63k|    return unexpected(parse_error::error);
 2384|  3.63k|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3343|  2.72k|{
 3344|  2.72k|    switch (base) {
 3345|      6|        case 2:
  ------------------
  |  Branch (3345:9): [True: 6, False: 2.71k]
  ------------------
 3346|       |            // allow 0b/0B
 3347|      6|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3348|      6|                    false};
 3349|       |
 3350|     26|        case 8: {
  ------------------
  |  Branch (3350:9): [True: 26, False: 2.69k]
  ------------------
 3351|       |            // allow 0o/0O/0
 3352|     26|            bool zero_parsed = false;
 3353|     26|            auto it = apply_opt(
 3354|     26|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3355|     26|            return {it, 8, zero_parsed};
 3356|      0|        }
 3357|       |
 3358|    894|        case 16:
  ------------------
  |  Branch (3358:9): [True: 894, False: 1.83k]
  ------------------
 3359|       |            // allow 0x/0X
 3360|    894|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3361|    894|                    false};
 3362|       |
 3363|     16|        case 0:
  ------------------
  |  Branch (3363:9): [True: 16, False: 2.70k]
  ------------------
 3364|       |            // detect base
 3365|     16|            return parse_integer_base_prefix_for_detection(range);
 3366|       |
 3367|  1.78k|        default:
  ------------------
  |  Branch (3367:9): [True: 1.78k, False: 942]
  ------------------
 3368|       |            // no base prefix allowed
 3369|  1.78k|            return {range.begin(), base, false};
 3370|  2.72k|    }
 3371|  2.72k|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2390|    926|{
 2391|    926|    if (!result) {
  ------------------
  |  Branch (2391:9): [True: 926, False: 0]
  ------------------
 2392|    926|        return range.begin();
 2393|    926|    }
 2394|      0|    return *result;
 2395|    926|}
_ZN3scn2v44impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3294|     22|{
 3295|     22|    return read_matching_string_classic_nocase(range, "0b");
 3296|     22|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2330|  3.68k|{
 2331|  3.68k|    using char_type = detail::char_t<Range>;
 2332|       |
 2333|       |    if constexpr (ranges::contiguous_range<Range> &&
 2334|  3.68k|                  std::is_same_v<char_type, char>) {
 2335|  3.68k|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2335:13): [True: 8, False: 3.67k]
  ------------------
 2336|      8|            return unexpected(make_eof_parse_error(eof_error::eof));
 2337|      8|        }
 2338|  3.67k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2338:13): [True: 3.67k, False: 0]
  ------------------
 2339|  3.67k|            return unexpected(parse_error::error);
 2340|  3.67k|        }
 2341|      0|        return ranges::next(range.begin(), str.size());
 2342|       |    }
 2343|       |    else {
 2344|       |        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|       |            if (ch < 'A' || ch > 'Z') {
 2346|       |                return ch;
 2347|       |            }
 2348|       |            return static_cast<char_type>(ch +
 2349|       |                                          static_cast<char_type>('a' - 'A'));
 2350|       |        };
 2351|       |
 2352|       |        SCN_TRY(it, read_exactly_n_code_units(
 2353|       |                        range, static_cast<std::ptrdiff_t>(str.size()))
 2354|       |                        .transform_error(make_eof_parse_error));
 2355|       |
 2356|       |        if (SCN_UNLIKELY(!std::equal(
 2357|       |                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2358|       |                    return ascii_tolower(a) ==
 2359|       |                           static_cast<detail::char_t<Range>>(b);
 2360|       |                }))) {
 2361|       |            return unexpected(parse_error::error);
 2362|       |        }
 2363|       |
 2364|       |        return it;
 2365|       |    }
 2366|  3.68k|}
_ZN3scn2v44impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3308|     42|{
 3309|     42|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3309:14): [True: 0, False: 42]
  ------------------
 3310|      0|        return *r;
 3311|      0|    }
 3312|       |
 3313|     42|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3313:14): [True: 0, False: 42]
  ------------------
 3314|      0|        zero_parsed = true;
 3315|      0|        return *r;
 3316|      0|    }
 3317|       |
 3318|     42|    return unexpected(parse_error::error);
 3319|     42|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2245|  1.86k|{
 2246|  1.86k|    auto it = read_code_unit(range);
 2247|  1.86k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  1.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.86k]
  |  |  ------------------
  ------------------
 2248|      0|        return unexpected(make_eof_parse_error(it.error()));
 2249|      0|    }
 2250|       |
 2251|  1.86k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|  1.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.86k, False: 0]
  |  |  ------------------
  ------------------
 2252|  1.86k|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|  1.86k|        return unexpected(parse_error::error);
 2254|  1.86k|    }
 2255|       |
 2256|      0|    return *it;
 2257|  1.86k|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3301|    910|{
 3302|    910|    return read_matching_string_classic_nocase(range, "0x");
 3303|    910|}
_ZN3scn2v44impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3324|     16|{
 3325|     16|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3325:14): [True: 0, False: 16]
  ------------------
 3326|      0|        return {*r, 16, false};
 3327|      0|    }
 3328|     16|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3328:14): [True: 0, False: 16]
  ------------------
 3329|      0|        return {*r, 2, false};
 3330|      0|    }
 3331|     16|    {
 3332|     16|        bool zero_parsed{false};
 3333|     16|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3333:18): [True: 0, False: 16]
  ------------------
 3334|      0|            return {*r, 8, zero_parsed};
 3335|      0|        }
 3336|     16|    }
 3337|     16|    return {range.begin(), 10, false};
 3338|     16|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3410|  2.70k|{
 3411|  2.70k|    using char_type = detail::char_t<Range>;
 3412|       |
 3413|  2.70k|    if constexpr (ranges::contiguous_range<Range>) {
 3414|  2.70k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  2.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.70k]
  |  |  ------------------
  ------------------
 3415|      0|            return detail::unexpected_scan_error(
 3416|      0|                scan_error::invalid_scanned_value,
 3417|      0|                "Failed to parse integer: No digits found");
 3418|      0|        }
 3419|  2.70k|        return range.end();
 3420|       |    }
 3421|       |    else {
 3422|       |        return read_while1_code_unit(range,
 3423|       |                                     [&](char_type ch) noexcept {
 3424|       |                                         return char_to_int(ch) < base;
 3425|       |                                     })
 3426|       |            .transform_error(map_parse_error_to_scan_error(
 3427|       |                scan_error::invalid_scanned_value,
 3428|       |                "Failed to parse integer: No digits found"));
 3429|       |    }
 3430|  2.70k|}
_ZN3scn2v44impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3440|     20|{
 3441|     20|    std::basic_string<CharT> output;
 3442|     20|    std::string thsep_indices;
 3443|     20|    auto it = range.begin();
 3444|     20|    bool digit_matched = false;
 3445|     20|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3445:12): [True: 20, False: 0]
  ------------------
 3446|     20|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3446:13): [True: 0, False: 20]
  ------------------
 3447|      0|            thsep_indices.push_back(
 3448|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3449|      0|        }
 3450|     20|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3450:18): [True: 20, False: 0]
  ------------------
 3451|     20|            break;
 3452|     20|        }
 3453|      0|        else {
 3454|      0|            output.push_back(*it);
 3455|      0|            digit_matched = true;
 3456|      0|        }
 3457|     20|    }
 3458|     20|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  865|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 20, False: 0]
  |  |  ------------------
  ------------------
 3459|     20|        return detail::unexpected_scan_error(
 3460|     20|            scan_error::invalid_scanned_value,
 3461|     20|            "Failed to parse integer: No digits found");
 3462|     20|    }
 3463|      0|    return std::tuple{it, output, thsep_indices};
 3464|     20|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|  12.2k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|  12.2k|                  ranges::sized_range<Range>) {
 1785|  12.2k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|  12.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|  12.2k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1587|  12.2k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|  12.2k|    {
 1589|  12.2k|    }
_ZNK3scn2v44impl19string_view_wrapperIcE4viewEv:
 1601|  62.6k|    {
 1602|  62.6k|        return sv;
 1603|  62.6k|    }
_ZN3scn2v44impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEb:
 5988|    990|{
 5989|    990|    using char_type = detail::char_t<Range>;
 5990|    990|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5991|       |
 5992|    990|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5992:9): [True: 516, False: 474]
  ------------------
 5993|    516|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5994|    516|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5995|       |
 5996|    516|        if (max_width == 0) {
  ------------------
  |  Branch (5996:13): [True: 410, False: 106]
  ------------------
 5997|    410|            auto it = read_while_code_unit(range, pred);
 5998|       |
 5999|    410|            if (want_skipped_width) {
  ------------------
  |  Branch (5999:17): [True: 118, False: 292]
  ------------------
 6000|    118|                auto prefix_width =
 6001|    118|                    static_cast<std::ptrdiff_t>(
 6002|    118|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 6003|    118|                    ranges::distance(range.begin(), it);
 6004|    118|                return result_type{it, prefix_width};
 6005|    118|            }
 6006|    292|            return result_type{it, 0};
 6007|    410|        }
 6008|       |
 6009|    106|        auto max_width_view = take_width(range, max_width);
 6010|    106|        auto w_it = read_while_code_unit(max_width_view, pred);
 6011|       |
 6012|    106|        if (want_skipped_width) {
  ------------------
  |  Branch (6012:13): [True: 106, False: 0]
  ------------------
 6013|    106|            return result_type{w_it.base(), max_width - w_it.count()};
 6014|    106|        }
 6015|      0|        return result_type{w_it.base(), 0};
 6016|    106|    }
 6017|       |
 6018|    474|    const auto fill_chars = fill.template get_code_units<char_type>();
 6019|    474|    if (max_width == 0) {
  ------------------
  |  Branch (6019:9): [True: 200, False: 274]
  ------------------
 6020|    200|        auto it = read_while_code_units(range, fill_chars);
 6021|       |
 6022|    200|        if (want_skipped_width) {
  ------------------
  |  Branch (6022:13): [True: 52, False: 148]
  ------------------
 6023|     52|            auto prefix_width =
 6024|     52|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 6025|     52|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 6026|     52|            return result_type{it, prefix_width};
 6027|     52|        }
 6028|    148|        return result_type{it, 0};
 6029|    200|    }
 6030|       |
 6031|    274|    auto max_width_view = take_width(range, max_width);
 6032|    274|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 6033|       |
 6034|    274|    if (want_skipped_width) {
  ------------------
  |  Branch (6034:9): [True: 274, False: 0]
  ------------------
 6035|    274|        return result_type{w_it.base(), max_width - w_it.count()};
 6036|    274|    }
 6037|      0|    return result_type{w_it.base(), 0};
 6038|    274|}
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2074|    570|{
 2075|    570|    return read_until_code_unit(range, std::not_fn(pred));
 2076|    570|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2055|    774|{
 2056|    774|    if constexpr (ranges::common_range<Range>) {
 2057|    774|        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|       |    else {
 2060|       |        auto first = range.begin();
 2061|       |        for (; first != range.end(); ++first) {
 2062|       |            if (pred(*first)) {
 2063|       |                return first;
 2064|       |            }
 2065|       |        }
 2066|       |        return first;
 2067|       |    }
 2068|    774|}
_ZN3scn2v44impl12function_refIFbcES3_EC2IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_SR_TnPNSF_9enable_ifIXaaaasr6detailE11is_not_selfISH_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSH_:
  742|    516|        : m_fptr([](storage fn,
  743|    516|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    516|              cvref<T> obj = *get<T>(fn);
  745|    516|              if constexpr (std::is_void_v<R>) {
  746|    516|                  obj(static_cast<decltype(args)>(args)...);
  747|    516|              }
  748|    516|              else {
  749|    516|                  return obj(static_cast<decltype(args)>(args)...);
  750|    516|              }
  751|    516|          }),
  752|    516|          m_storage(std::addressof(f))
  753|    516|    {
  754|    516|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_SR_TnPNSF_9enable_ifIXaaaasr6detailE11is_not_selfISH_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSH_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|    934|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    934|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    934|              else {
  749|    934|                  return obj(static_cast<decltype(args)>(args)...);
  750|    934|              }
  751|    934|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRT_EEEElEEEESG_lRKNS0_6detail9fill_typeEbEUlcE_EEDaNS3_7storageE:
  683|    934|    {
  684|    934|        if constexpr (std::is_const_v<T>) {
  685|    934|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    934|    }
_ZZN3scn2v44impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEbENKUlcE_clEc:
 5994|    934|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_TnPNSF_9enable_ifIXsr3stdE11is_object_vISH_EEvE4typeELPv0EEEPKSH_:
  665|    516|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    516|        {
  667|    516|        }
_ZN3scn2v44impl20read_while_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2074|    280|{
 2075|    280|    return read_until_code_unit(range, std::not_fn(pred));
 2076|    280|}
_ZN3scn2v44impl20read_until_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2055|    592|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|    592|    else {
 2060|    592|        auto first = range.begin();
 2061|  10.8k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 10.5k, False: 340]
  ------------------
 2062|  10.5k|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 252, False: 10.2k]
  ------------------
 2063|    252|                return first;
 2064|    252|            }
 2065|  10.5k|        }
 2066|    340|        return first;
 2067|    592|    }
 2068|    592|}
_ZN3scn2v44impl21read_while_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEESG_RKT0_:
 2135|    200|{
 2136|    200|    static_assert(ranges::common_range<CodeUnits>);
 2137|       |
 2138|    200|    auto it = range.begin();
 2139|    352|    while (it != range.end()) {
  ------------------
  |  Branch (2139:12): [True: 352, False: 0]
  ------------------
 2140|    352|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2141|    352|                                           needle.size());
 2142|    352|        if (!r) {
  ------------------
  |  Branch (2142:13): [True: 6, False: 346]
  ------------------
 2143|      6|            return it;
 2144|      6|        }
 2145|    346|        static_assert(
 2146|    346|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2147|    346|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2147:13): [True: 194, False: 152]
  ------------------
 2148|    194|            return it;
 2149|    194|        }
 2150|    152|        it = *r;
 2151|    152|    }
 2152|      0|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2153|      0|    return it;
 2154|      0|}
_ZN3scn2v44impl21read_while_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEESI_RKT0_:
 2135|    274|{
 2136|    274|    static_assert(ranges::common_range<CodeUnits>);
 2137|       |
 2138|    274|    auto it = range.begin();
 2139|    456|    while (it != range.end()) {
  ------------------
  |  Branch (2139:12): [True: 408, False: 48]
  ------------------
 2140|    408|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2141|    408|                                           needle.size());
 2142|    408|        if (!r) {
  ------------------
  |  Branch (2142:13): [True: 80, False: 328]
  ------------------
 2143|     80|            return it;
 2144|     80|        }
 2145|    328|        static_assert(
 2146|    328|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2147|    328|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2147:13): [True: 146, False: 182]
  ------------------
 2148|    146|            return it;
 2149|    146|        }
 2150|    182|        it = *r;
 2151|    182|    }
 2152|     48|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  931|     48|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|     48|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2153|     48|    return it;
 2154|     48|}
_ZN3scn2v44impl23skip_classic_whitespaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_b:
 3065|    550|{
 3066|    550|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 0, False: 550]
  ------------------
 3067|      0|        auto it = read_while_classic_space(range);
 3068|      0|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|      0|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3070|      0|            return unexpected(e);
 3071|      0|        }
 3072|       |
 3073|      0|        return it;
 3074|      0|    }
 3075|       |
 3076|    550|    return read_while_classic_space(range);
 3077|    550|}
_ZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2215|    550|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|    550|    else {
 2225|    550|        auto it = range.begin();
 2226|       |
 2227|    550|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|    550|            auto seg = get_contiguous_beginning(range);
 2229|    550|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|    550|                seg_it != seg.end()) {
  ------------------
  |  Branch (2230:17): [True: 0, False: 550]
  ------------------
 2231|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|      0|            }
 2233|    550|            ranges::advance(it, seg.size());
 2234|    550|        }
 2235|       |
 2236|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|    550|            return detail::is_cp_space(cp);
 2238|    550|        });
 2239|    550|    }
 2240|    550|}
_ZN3scn2v44impl24get_contiguous_beginningINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDaT_:
 1039|  1.46k|{
 1040|       |    if constexpr (ranges::contiguous_range<Range> &&
 1041|       |                  ranges::sized_range<Range>) {
 1042|       |        return r;
 1043|       |    }
 1044|       |    else if constexpr (std::is_same_v<
 1045|       |                           ranges::const_iterator_t<Range>,
 1046|       |                           typename detail::basic_scan_buffer<
 1047|       |                               detail::char_t<Range>>::forward_iterator>) {
 1048|       |        if constexpr (ranges::common_range<Range>) {
 1049|       |            auto seg = r.begin().contiguous_segment();
 1050|       |            auto dist =
 1051|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1052|       |            return seg.substr(0, std::min(seg.size(), dist));
 1053|       |        }
 1054|       |        else {
 1055|       |            return r.begin().contiguous_segment();
 1056|       |        }
 1057|       |    }
 1058|  1.46k|    else {
 1059|  1.46k|        return std::basic_string_view<detail::char_t<Range>>{};
 1060|  1.46k|    }
 1061|  1.46k|}
_ZN3scn2v44impl21read_while_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2180|    838|{
 2181|    838|    return read_until_code_point(range, std::not_fn(pred));
 2182|    838|}
_ZN3scn2v44impl21read_until_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2159|  1.11k|{
 2160|  1.11k|    auto it = range.begin();
 2161|  20.7k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 20.3k, False: 418]
  ------------------
 2162|  20.3k|        const auto val =
 2163|  20.3k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  20.3k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|  20.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 18.6k, False: 1.67k]
  |  |  ------------------
  ------------------
 2165|  18.6k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  18.6k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  18.6k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 696, False: 18.0k]
  ------------------
 2168|    696|                return it;
 2169|    696|            }
 2170|  18.6k|        }
 2171|  19.6k|        it = val.iterator;
 2172|  19.6k|    }
 2173|       |
 2174|    418|    return it;
 2175|  1.11k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISL_EEE4typeEEESL_:
 1997|  33.5k|{
 1998|  33.5k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|  33.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  33.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  33.5k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  33.5k|    auto it = range.begin();
 2002|  33.5k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  33.5k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|  33.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.24k, False: 30.2k]
  |  |  ------------------
  ------------------
 2005|  3.24k|        ++it;
 2006|  3.24k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|  3.24k|        return {it, {}};
 2008|  3.24k|    }
 2009|       |
 2010|  30.2k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 25.7k, False: 4.47k]
  ------------------
 2011|  25.7k|        ++it;
 2012|  25.7k|        return {it, string_type(1, *range.begin())};
 2013|  25.7k|    }
 2014|       |
 2015|  4.47k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|  4.47k|    return {it, string_type{range.begin(), it}};
 2017|  30.2k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_:
 1264|  3.24k|{
 1265|  3.24k|    auto it = input.begin();
 1266|  4.56k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 4.34k, False: 222]
  ------------------
 1267|  4.34k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 3.02k, False: 1.31k]
  ------------------
 1268|  3.02k|            break;
 1269|  3.02k|        }
 1270|  4.34k|    }
 1271|  3.24k|    return it;
 1272|  3.24k|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EENS1_20incrementable_traitsISL_E15difference_typeEE4typeERSL_SP_SM_:
  282|  4.47k|    {
  283|  4.47k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  4.47k|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SL_EENS1_20incrementable_traitsISL_E15difference_typeEE4typeERSL_SP_SM_:
  226|  4.47k|    {
  227|  4.47k|        constexpr iter_difference_t<I> zero{0};
  228|  4.47k|        iter_difference_t<I> counter{0};
  229|       |
  230|  4.47k|        if (n < zero) {
  ------------------
  |  Branch (230:13): [True: 0, False: 4.47k]
  ------------------
  231|      0|            do {
  232|      0|                --i;
  233|      0|                --counter;  // Yes, really
  234|      0|            } while (++n < zero && i != bound);
  ------------------
  |  Branch (234:22): [True: 0, False: 0]
  |  Branch (234:36): [True: 0, False: 0]
  ------------------
  235|      0|        }
  236|  4.47k|        else {
  237|  15.5k|            while (n-- > zero && i != bound) {
  ------------------
  |  Branch (237:20): [True: 11.1k, False: 4.36k]
  |  Branch (237:34): [True: 11.0k, False: 114]
  ------------------
  238|  11.0k|                ++i;
  239|  11.0k|                ++counter;
  240|  11.0k|            }
  241|  4.47k|        }
  242|       |
  243|  4.47k|        return counter;
  244|  4.47k|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_:
  742|    550|        : m_fptr([](storage fn,
  743|    550|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    550|              cvref<T> obj = *get<T>(fn);
  745|    550|              if constexpr (std::is_void_v<R>) {
  746|    550|                  obj(static_cast<decltype(args)>(args)...);
  747|    550|              }
  748|    550|              else {
  749|    550|                  return obj(static_cast<decltype(args)>(args)...);
  750|    550|              }
  751|    550|          }),
  752|    550|          m_storage(std::addressof(f))
  753|    550|    {
  754|    550|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESY_Di:
  743|  1.39k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.39k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.39k|              else {
  749|  1.39k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.39k|              }
  751|  1.39k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  1.39k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.39k|        else if constexpr (std::is_object_v<T>) {
  688|  1.39k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.39k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2236|  1.39k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  1.39k|            return detail::is_cp_space(cp);
 2238|  1.39k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|    550|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    550|        {
  662|    550|        }
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3065|  6.92k|{
 3066|  6.92k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 6.70k, False: 212]
  ------------------
 3067|  6.70k|        auto it = read_while_classic_space(range);
 3068|  6.70k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|  6.70k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  6.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 6.70k]
  |  |  ------------------
  ------------------
 3070|      0|            return unexpected(e);
 3071|      0|        }
 3072|       |
 3073|  6.70k|        return it;
 3074|  6.70k|    }
 3075|       |
 3076|    212|    return read_while_classic_space(range);
 3077|  6.92k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2215|  14.0k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|  14.0k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|  14.0k|        auto buf = make_contiguous_buffer(range);
 2220|  14.0k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|  14.0k|        return ranges::next(range.begin(),
 2222|  14.0k|                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|       |    else {
 2225|       |        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|       |            return detail::is_cp_space(cp);
 2238|       |        });
 2239|       |    }
 2240|  14.0k|}
_ZN3scn2v44impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|  16.8k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|  16.8k|                  ranges::sized_range<Range>) {
 1785|  16.8k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|  16.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|  16.8k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1587|  16.8k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|  16.8k|    {
 1589|  16.8k|    }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3155|  4.88k|    {
 3156|  4.88k|        reader_error_handler eh{};
 3157|  4.88k|        get_derived().check_specs_impl(specs, eh);
 3158|  4.88k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  4.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.58k, False: 1.30k]
  |  |  ------------------
  ------------------
 3159|  3.58k|            return detail::unexpected_scan_error(
 3160|  3.58k|                scan_error::invalid_format_string, eh.m_msg);
 3161|  3.58k|        }
 3162|  1.30k|        return {};
 3163|  4.88k|    }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIcEEcE11get_derivedEv:
 3167|  4.88k|    {
 3168|  4.88k|        return static_cast<Derived&>(*this);
 3169|  4.88k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3535|  4.88k|    {
 3536|  4.88k|        detail::check_int_type_specs(specs, eh);
 3537|  4.88k|    }
_ZNK3scn2v44impl11reader_baseINS1_19reader_impl_for_intIcEEcE19skip_ws_before_readEv:
 3150|  2.56k|    {
 3151|  2.56k|        return true;
 3152|  2.56k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEiEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3589|    338|    {
 3590|    338|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|    338|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    338|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    338|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    338|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 338]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    338|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    338|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|    338|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|    338|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 0, False: 338]
  ------------------
 3594|       |            if constexpr (!std::is_signed_v<T>) {
 3595|       |                return detail::unexpected_scan_error(
 3596|       |                    scan_error::invalid_scanned_value,
 3597|       |                    "Unexpected '-' sign when parsing an "
 3598|       |                    "unsigned value");
 3599|       |            }
 3600|      0|            else {
 3601|      0|                if (specs.type ==
  ------------------
  |  Branch (3601:21): [True: 0, False: 0]
  ------------------
 3602|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3603|      0|                    return detail::unexpected_scan_error(
 3604|      0|                        scan_error::invalid_scanned_value,
 3605|      0|                        "'u'-option disallows negative values");
 3606|      0|                }
 3607|      0|            }
 3608|      0|        }
 3609|       |
 3610|    338|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 0, False: 338]
  ------------------
 3611|      0|            value = T{0};
 3612|      0|            return std::next(prefix_result.iterator);
 3613|      0|        }
 3614|       |
 3615|    338|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|    338|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 324, False: 14]
  |  |  ------------------
  ------------------
 3616|    324|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|    324|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    324|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    324|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    324|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 324, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    324|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    324|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    324|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    324|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    324|    }                                                  \
  |  |  |  | 3939|    324|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|      0|                    parse_integer_digits_without_thsep(
 3618|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|      0|                        prefix_result.parsed_base));
 3620|       |
 3621|      0|            auto buf = make_contiguous_buffer(
 3622|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|      0|                                        prefix_result.parsed_base));
 3626|       |
 3627|      0|            return ranges::next(
 3628|      0|                prefix_result.iterator,
 3629|      0|                ranges::distance(buf.view().begin(), result_it));
 3630|      0|        }
 3631|       |
 3632|     14|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|     14|            localized_number_formatting_options<CharT>{loc};
 3637|     14|#endif
 3638|       |
 3639|     14|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|     14|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     14|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     14|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 14, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     14|    }                                                  \
  |  |  |  | 3939|     14|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|      0|                parse_integer_digits_with_thsep(
 3641|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|      0|                    prefix_result.parsed_base, locale_options));
 3643|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|      0|            parse_digits_result;
 3645|       |
 3646|      0|        auto nothsep_source_view =
 3647|      0|            std::basic_string_view<CharT>{nothsep_source};
 3648|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|      0|            nothsep_source_it,
 3650|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|      0|                                prefix_result.parsed_base));
 3652|       |
 3653|      0|        return ranges::next(
 3654|      0|            prefix_result.iterator,
 3655|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|      0|                ranges::ssize(thsep_indices));
 3657|      0|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3589|    278|    {
 3590|    278|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|    278|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    278|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    278|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    278|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 278]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    278|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    278|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|    278|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|    278|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 0, False: 278]
  ------------------
 3594|       |            if constexpr (!std::is_signed_v<T>) {
 3595|       |                return detail::unexpected_scan_error(
 3596|       |                    scan_error::invalid_scanned_value,
 3597|       |                    "Unexpected '-' sign when parsing an "
 3598|       |                    "unsigned value");
 3599|       |            }
 3600|      0|            else {
 3601|      0|                if (specs.type ==
  ------------------
  |  Branch (3601:21): [True: 0, False: 0]
  ------------------
 3602|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3603|      0|                    return detail::unexpected_scan_error(
 3604|      0|                        scan_error::invalid_scanned_value,
 3605|      0|                        "'u'-option disallows negative values");
 3606|      0|                }
 3607|      0|            }
 3608|      0|        }
 3609|       |
 3610|    278|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 0, False: 278]
  ------------------
 3611|      0|            value = T{0};
 3612|      0|            return std::next(prefix_result.iterator);
 3613|      0|        }
 3614|       |
 3615|    278|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|    278|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 268, False: 10]
  |  |  ------------------
  ------------------
 3616|    268|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|    268|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    268|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    268|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    268|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 268]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    268|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    268|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|    268|                    parse_integer_digits_without_thsep(
 3618|    268|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|    268|                        prefix_result.parsed_base));
 3620|       |
 3621|    268|            auto buf = make_contiguous_buffer(
 3622|    268|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|    268|            SCN_TRY(result_it,
  ------------------
  |  | 3940|    268|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    268|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    268|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    268|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 268, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    268|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    268|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    268|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    268|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    268|    }                                                  \
  |  |  |  | 3939|    268|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|      0|                                        prefix_result.parsed_base));
 3626|       |
 3627|      0|            return ranges::next(
 3628|      0|                prefix_result.iterator,
 3629|      0|                ranges::distance(buf.view().begin(), result_it));
 3630|    268|        }
 3631|       |
 3632|     10|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|     10|            localized_number_formatting_options<CharT>{loc};
 3637|     10|#endif
 3638|       |
 3639|     10|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|     10|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     10|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     10|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 10, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     10|    }                                                  \
  |  |  |  | 3939|     10|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|      0|                parse_integer_digits_with_thsep(
 3641|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|      0|                    prefix_result.parsed_base, locale_options));
 3643|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|      0|            parse_digits_result;
 3645|       |
 3646|      0|        auto nothsep_source_view =
 3647|      0|            std::basic_string_view<CharT>{nothsep_source};
 3648|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|      0|            nothsep_source_it,
 3650|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|      0|                                prefix_result.parsed_base));
 3652|       |
 3653|      0|        return ranges::next(
 3654|      0|            prefix_result.iterator,
 3655|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|      0|                ranges::ssize(thsep_indices));
 3657|      0|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEjEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3589|    338|    {
 3590|    338|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|    338|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    338|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    338|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    338|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 338]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    338|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    338|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|    338|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|    338|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 0, False: 338]
  ------------------
 3594|      0|            if constexpr (!std::is_signed_v<T>) {
 3595|      0|                return detail::unexpected_scan_error(
 3596|      0|                    scan_error::invalid_scanned_value,
 3597|      0|                    "Unexpected '-' sign when parsing an "
 3598|      0|                    "unsigned value");
 3599|       |            }
 3600|       |            else {
 3601|       |                if (specs.type ==
 3602|       |                    detail::presentation_type::int_unsigned_decimal) {
 3603|       |                    return detail::unexpected_scan_error(
 3604|       |                        scan_error::invalid_scanned_value,
 3605|       |                        "'u'-option disallows negative values");
 3606|       |                }
 3607|       |            }
 3608|      0|        }
 3609|       |
 3610|    338|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 0, False: 338]
  ------------------
 3611|      0|            value = T{0};
 3612|      0|            return std::next(prefix_result.iterator);
 3613|      0|        }
 3614|       |
 3615|    338|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|    338|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 324, False: 14]
  |  |  ------------------
  ------------------
 3616|    324|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|    324|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    324|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    324|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    324|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 324, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    324|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    324|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    324|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    324|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    324|    }                                                  \
  |  |  |  | 3939|    324|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|      0|                    parse_integer_digits_without_thsep(
 3618|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|      0|                        prefix_result.parsed_base));
 3620|       |
 3621|      0|            auto buf = make_contiguous_buffer(
 3622|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|      0|                                        prefix_result.parsed_base));
 3626|       |
 3627|      0|            return ranges::next(
 3628|      0|                prefix_result.iterator,
 3629|      0|                ranges::distance(buf.view().begin(), result_it));
 3630|      0|        }
 3631|       |
 3632|     14|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|     14|            localized_number_formatting_options<CharT>{loc};
 3637|     14|#endif
 3638|       |
 3639|     14|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|     14|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     14|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     14|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 14, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     14|    }                                                  \
  |  |  |  | 3939|     14|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|      0|                parse_integer_digits_with_thsep(
 3641|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|      0|                    prefix_result.parsed_base, locale_options));
 3643|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|      0|            parse_digits_result;
 3645|       |
 3646|      0|        auto nothsep_source_view =
 3647|      0|            std::basic_string_view<CharT>{nothsep_source};
 3648|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|      0|            nothsep_source_it,
 3650|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|      0|                                prefix_result.parsed_base));
 3652|       |
 3653|      0|        return ranges::next(
 3654|      0|            prefix_result.iterator,
 3655|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|      0|                ranges::ssize(thsep_indices));
 3657|      0|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3589|    278|    {
 3590|    278|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|    278|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    278|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    278|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    278|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 278]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    278|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    278|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|    278|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|    278|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 0, False: 278]
  ------------------
 3594|      0|            if constexpr (!std::is_signed_v<T>) {
 3595|      0|                return detail::unexpected_scan_error(
 3596|      0|                    scan_error::invalid_scanned_value,
 3597|      0|                    "Unexpected '-' sign when parsing an "
 3598|      0|                    "unsigned value");
 3599|       |            }
 3600|       |            else {
 3601|       |                if (specs.type ==
 3602|       |                    detail::presentation_type::int_unsigned_decimal) {
 3603|       |                    return detail::unexpected_scan_error(
 3604|       |                        scan_error::invalid_scanned_value,
 3605|       |                        "'u'-option disallows negative values");
 3606|       |                }
 3607|       |            }
 3608|      0|        }
 3609|       |
 3610|    278|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 0, False: 278]
  ------------------
 3611|      0|            value = T{0};
 3612|      0|            return std::next(prefix_result.iterator);
 3613|      0|        }
 3614|       |
 3615|    278|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|    278|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 268, False: 10]
  |  |  ------------------
  ------------------
 3616|    268|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|    268|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    268|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    268|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    268|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 268]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    268|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    268|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|    268|                    parse_integer_digits_without_thsep(
 3618|    268|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|    268|                        prefix_result.parsed_base));
 3620|       |
 3621|    268|            auto buf = make_contiguous_buffer(
 3622|    268|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|    268|            SCN_TRY(result_it,
  ------------------
  |  | 3940|    268|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    268|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    268|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    268|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 268, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    268|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    268|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    268|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    268|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    268|    }                                                  \
  |  |  |  | 3939|    268|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|      0|                                        prefix_result.parsed_base));
 3626|       |
 3627|      0|            return ranges::next(
 3628|      0|                prefix_result.iterator,
 3629|      0|                ranges::distance(buf.view().begin(), result_it));
 3630|    268|        }
 3631|       |
 3632|     10|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|     10|            localized_number_formatting_options<CharT>{loc};
 3637|     10|#endif
 3638|       |
 3639|     10|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|     10|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     10|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     10|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 10, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     10|    }                                                  \
  |  |  |  | 3939|     10|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|      0|                parse_integer_digits_with_thsep(
 3641|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|      0|                    prefix_result.parsed_base, locale_options));
 3643|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|      0|            parse_digits_result;
 3645|       |
 3646|      0|        auto nothsep_source_view =
 3647|      0|            std::basic_string_view<CharT>{nothsep_source};
 3648|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|      0|            nothsep_source_it,
 3650|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|      0|                                prefix_result.parsed_base));
 3652|       |
 3653|      0|        return ranges::next(
 3654|      0|            prefix_result.iterator,
 3655|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|      0|                ranges::ssize(thsep_indices));
 3657|      0|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEmEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3589|    300|    {
 3590|    300|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|    300|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    300|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    300|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    300|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 300]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    300|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    300|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|    300|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|    300|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 0, False: 300]
  ------------------
 3594|      0|            if constexpr (!std::is_signed_v<T>) {
 3595|      0|                return detail::unexpected_scan_error(
 3596|      0|                    scan_error::invalid_scanned_value,
 3597|      0|                    "Unexpected '-' sign when parsing an "
 3598|      0|                    "unsigned value");
 3599|       |            }
 3600|       |            else {
 3601|       |                if (specs.type ==
 3602|       |                    detail::presentation_type::int_unsigned_decimal) {
 3603|       |                    return detail::unexpected_scan_error(
 3604|       |                        scan_error::invalid_scanned_value,
 3605|       |                        "'u'-option disallows negative values");
 3606|       |                }
 3607|       |            }
 3608|      0|        }
 3609|       |
 3610|    300|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 0, False: 300]
  ------------------
 3611|      0|            value = T{0};
 3612|      0|            return std::next(prefix_result.iterator);
 3613|      0|        }
 3614|       |
 3615|    300|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|    300|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 300, False: 0]
  |  |  ------------------
  ------------------
 3616|    300|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|    300|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    300|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    300|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    300|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 300, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    300|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    300|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    300|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    300|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    300|    }                                                  \
  |  |  |  | 3939|    300|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|      0|                    parse_integer_digits_without_thsep(
 3618|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|      0|                        prefix_result.parsed_base));
 3620|       |
 3621|      0|            auto buf = make_contiguous_buffer(
 3622|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|      0|                                        prefix_result.parsed_base));
 3626|       |
 3627|      0|            return ranges::next(
 3628|      0|                prefix_result.iterator,
 3629|      0|                ranges::distance(buf.view().begin(), result_it));
 3630|      0|        }
 3631|       |
 3632|      0|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|      0|            localized_number_formatting_options<CharT>{loc};
 3637|      0|#endif
 3638|       |
 3639|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|      0|                parse_integer_digits_with_thsep(
 3641|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|      0|                    prefix_result.parsed_base, locale_options));
 3643|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|      0|            parse_digits_result;
 3645|       |
 3646|      0|        auto nothsep_source_view =
 3647|      0|            std::basic_string_view<CharT>{nothsep_source};
 3648|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|      0|            nothsep_source_it,
 3650|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|      0|                                prefix_result.parsed_base));
 3652|       |
 3653|      0|        return ranges::next(
 3654|      0|            prefix_result.iterator,
 3655|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|      0|                ranges::ssize(thsep_indices));
 3657|      0|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEmEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3589|    882|    {
 3590|    882|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|    882|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    882|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    882|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    882|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 882]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    882|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    882|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|    882|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|    882|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 0, False: 882]
  ------------------
 3594|      0|            if constexpr (!std::is_signed_v<T>) {
 3595|      0|                return detail::unexpected_scan_error(
 3596|      0|                    scan_error::invalid_scanned_value,
 3597|      0|                    "Unexpected '-' sign when parsing an "
 3598|      0|                    "unsigned value");
 3599|       |            }
 3600|       |            else {
 3601|       |                if (specs.type ==
 3602|       |                    detail::presentation_type::int_unsigned_decimal) {
 3603|       |                    return detail::unexpected_scan_error(
 3604|       |                        scan_error::invalid_scanned_value,
 3605|       |                        "'u'-option disallows negative values");
 3606|       |                }
 3607|       |            }
 3608|      0|        }
 3609|       |
 3610|    882|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 0, False: 882]
  ------------------
 3611|      0|            value = T{0};
 3612|      0|            return std::next(prefix_result.iterator);
 3613|      0|        }
 3614|       |
 3615|    882|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|    882|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 882, False: 0]
  |  |  ------------------
  ------------------
 3616|    882|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|    882|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    882|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    882|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    882|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 882]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    882|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    882|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|    882|                    parse_integer_digits_without_thsep(
 3618|    882|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|    882|                        prefix_result.parsed_base));
 3620|       |
 3621|    882|            auto buf = make_contiguous_buffer(
 3622|    882|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|    882|            SCN_TRY(result_it,
  ------------------
  |  | 3940|    882|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    882|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    882|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    882|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 882, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    882|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    882|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    882|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    882|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    882|    }                                                  \
  |  |  |  | 3939|    882|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|      0|                                        prefix_result.parsed_base));
 3626|       |
 3627|      0|            return ranges::next(
 3628|      0|                prefix_result.iterator,
 3629|      0|                ranges::distance(buf.view().begin(), result_it));
 3630|    882|        }
 3631|       |
 3632|      0|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|      0|            localized_number_formatting_options<CharT>{loc};
 3637|      0|#endif
 3638|       |
 3639|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|      0|                parse_integer_digits_with_thsep(
 3641|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|      0|                    prefix_result.parsed_base, locale_options));
 3643|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|      0|            parse_digits_result;
 3645|       |
 3646|      0|        auto nothsep_source_view =
 3647|      0|            std::basic_string_view<CharT>{nothsep_source};
 3648|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|      0|            nothsep_source_it,
 3650|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|      0|                                prefix_result.parsed_base));
 3652|       |
 3653|      0|        return ranges::next(
 3654|      0|            prefix_result.iterator,
 3655|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|      0|                ranges::ssize(thsep_indices));
 3657|      0|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3155|  2.44k|    {
 3156|  2.44k|        reader_error_handler eh{};
 3157|  2.44k|        get_derived().check_specs_impl(specs, eh);
 3158|  2.44k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  2.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.78k, False: 656]
  |  |  ------------------
  ------------------
 3159|  1.78k|            return detail::unexpected_scan_error(
 3160|  1.78k|                scan_error::invalid_format_string, eh.m_msg);
 3161|  1.78k|        }
 3162|    656|        return {};
 3163|  2.44k|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3167|  2.44k|    {
 3168|  2.44k|        return static_cast<Derived&>(*this);
 3169|  2.44k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4177|  2.44k|    {
 4178|  2.44k|        detail::check_float_type_specs(specs, eh);
 4179|  2.44k|    }
_ZNK3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3150|  1.28k|    {
 3151|  1.28k|        return true;
 3152|  1.28k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4249|    620|    {
 4250|    620|        unsigned options{};
 4251|    620|        if (specs.localized) {
  ------------------
  |  Branch (4251:13): [True: 18, False: 602]
  ------------------
 4252|     18|            options |= float_reader_base::allow_thsep;
 4253|     18|        }
 4254|       |
 4255|    620|        SCN_GCC_COMPAT_PUSH
 4256|    620|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4257|       |
 4258|    620|        switch (specs.type) {
 4259|     28|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4259:13): [True: 28, False: 592]
  ------------------
 4260|     28|                return options | float_reader_base::allow_fixed;
 4261|       |
 4262|      6|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4262:13): [True: 6, False: 614]
  ------------------
 4263|      6|                return options | float_reader_base::allow_scientific;
 4264|       |
 4265|     14|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4265:13): [True: 14, False: 606]
  ------------------
 4266|     14|                return options | float_reader_base::allow_hex;
 4267|       |
 4268|     12|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4268:13): [True: 12, False: 608]
  ------------------
 4269|     12|                return options | float_reader_base::allow_scientific |
 4270|     12|                       float_reader_base::allow_fixed;
 4271|       |
 4272|    560|            case detail::presentation_type::none:
  ------------------
  |  Branch (4272:13): [True: 560, False: 60]
  ------------------
 4273|    560|                return options | float_reader_base::allow_scientific |
 4274|    560|                       float_reader_base::allow_fixed |
 4275|    560|                       float_reader_base::allow_hex;
 4276|       |
 4277|      0|            default:
  ------------------
  |  Branch (4277:13): [True: 0, False: 620]
  ------------------
 4278|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4279|    620|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4280|    620|        }
 4281|       |
 4282|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4283|    620|    }
_ZN3scn2v44impl12float_readerIcEC2Ej:
 3701|    620|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v44impl35localized_number_formatting_optionsIcEC2Ev:
 1869|  1.25k|    localized_number_formatting_options() = default;
_ZN3scn2v44impl24contiguous_range_factoryIcEC2Ev:
 1630|  2.50k|    contiguous_range_factory() = default;
_ZN3scn2v44impl12float_readerIcE17handle_separatorsEv:
 4089|    888|    {
 4090|    888|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4090:13): [True: 888, False: 0]
  ------------------
 4091|    888|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4091:13): [True: 888, False: 0]
  ------------------
 4092|    888|            return;
 4093|    888|        }
 4094|       |
 4095|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4096|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4096:13): [True: 0, False: 0]
  ------------------
 4097|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4097:27): [True: 0, False: 0]
  ------------------
 4098|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4098:21): [True: 0, False: 0]
  ------------------
 4099|      0|                    ch = CharT{'.'};
 4100|      0|                }
 4101|      0|            }
 4102|      0|        }
 4103|       |
 4104|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4104:13): [True: 0, False: 0]
  ------------------
 4105|      0|            return;
 4106|      0|        }
 4107|       |
 4108|      0|        auto first =
 4109|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4110|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4110:13): [True: 0, False: 0]
  ------------------
 4111|      0|            return;
 4112|      0|        }
 4113|       |
 4114|      0|        m_thsep_indices.push_back(
 4115|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4116|       |
 4117|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4117:31): [True: 0, False: 0]
  ------------------
 4118|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4118:17): [True: 0, False: 0]
  ------------------
 4119|      0|                *first++ = std::move(*it);
 4120|      0|            }
 4121|      0|            else {
 4122|      0|                m_thsep_indices.push_back(
 4123|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4124|      0|            }
 4125|      0|        }
 4126|       |
 4127|      0|        str.erase(first, str.end());
 4128|      0|    }
_ZNK3scn2v44impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1685|    836|    {
 1686|    836|        return m_storage.has_value();
 1687|    836|    }
_ZNR3scn2v44impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1690|    418|    {
 1691|    418|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  930|    418|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    418|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1692|    418|        return *m_storage;
 1693|    418|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EclESC_SJ_SL_:
  762|    342|    {
  763|    342|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|    342|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    342|    }
_ZN3scn2v44impl12float_readerIcE21read_source_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3720|     12|    {
 3721|     12|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3722|     12|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  864|     12|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 12]
  |  |  ------------------
  ------------------
 3723|      0|            m_locale_options.thousands_sep = CharT{0};
 3724|      0|        }
 3725|       |
 3726|     12|        return read_source_impl(range);
 3727|     12|    }
_ZN3scn2v44impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_:
 3746|    342|    {
 3747|    342|        SCN_TRY(sign_result,
  ------------------
  |  | 3940|    342|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    342|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    342|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    342|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 342]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    342|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    342|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3748|    342|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3749|    342|        auto it = sign_result.first;
 3750|    342|        m_sign = sign_result.second;
 3751|       |
 3752|    342|        auto digits_begin = it;
 3753|    342|        auto r = ranges::subrange{it, range.end()};
 3754|       |        if constexpr (ranges::contiguous_range<Range> &&
 3755|       |                      ranges::sized_range<Range>) {
 3756|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3757|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3758|       |                SCN_TRY_ASSIGN(
 3759|       |                    it,
 3760|       |                    do_read_source_impl(
 3761|       |                        r,
 3762|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3763|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3764|       |            }
 3765|       |            else {
 3766|       |                auto cb = [&](const auto& rr)
 3767|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3768|       |                    auto res = read_all(rr);
 3769|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3770|       |                        return detail::unexpected_scan_error(
 3771|       |                            scan_error::invalid_scanned_value,
 3772|       |                            "Invalid float value");
 3773|       |                    }
 3774|       |                    return res;
 3775|       |                };
 3776|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3777|       |            }
 3778|       |        }
 3779|    342|        else {
 3780|    342|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3935|    342|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    342|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    342|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 342, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    342|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|    342|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    342|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    342|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|    342|    }                                                  \
  |  | 3939|    342|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    342|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3781|      0|                it,
 3782|      0|                do_read_source_impl(
 3783|      0|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3784|      0|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3785|      0|        }
 3786|       |
 3787|    342|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|    342|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    342|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3788|       |
 3789|      0|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3789:13): [True: 0, False: 0]
  |  Branch (3789:48): [True: 0, False: 0]
  ------------------
 3790|      0|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3790:13): [True: 0, False: 0]
  ------------------
 3791|      0|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3791:13): [True: 0, False: 0]
  ------------------
 3792|      0|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3793|      0|        }
 3794|       |
 3795|      0|        handle_separators();
 3796|       |
 3797|      0|        return it;
 3798|    342|    }
_ZN3scn2v44impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEZNS3_16read_source_implISG_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_EUlRKSO_E_ZNSK_ISG_EEST_SO_EUlSV_E0_EEST_SO_OT0_OT1_:
 4032|    342|    {
 4033|    342|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4034|    342|        const bool allowed_nonhex =
 4035|    342|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4036|    342|             ~static_cast<unsigned>(allow_hex)) != 0;
 4037|       |
 4038|    342|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4038:39): [True: 342, False: 0]
  |  Branch (4038:45): [True: 0, False: 342]
  ------------------
 4039|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4040|      0|                scan_error::invalid_scanned_value,
 4041|      0|                "Invalid infinite floating-point value"));
 4042|      0|        }
 4043|    342|        else if (r) {
  ------------------
  |  Branch (4043:18): [True: 0, False: 342]
  ------------------
 4044|      0|            return *r;
 4045|      0|        }
 4046|       |
 4047|    342|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4047:39): [True: 342, False: 0]
  |  Branch (4047:45): [True: 0, False: 342]
  ------------------
 4048|      0|            return unexpected(r.error());
 4049|      0|        }
 4050|    342|        else if (r) {
  ------------------
  |  Branch (4050:18): [True: 0, False: 342]
  ------------------
 4051|      0|            return *r;
 4052|      0|        }
 4053|       |
 4054|    342|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4054:13): [True: 318, False: 24]
  |  Branch (4054:28): [True: 8, False: 310]
  ------------------
 4055|       |            // only hex allowed:
 4056|       |            // prefix "0x" allowed, not required
 4057|      8|            auto it = range.begin();
 4058|       |
 4059|      8|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4059:22): [True: 0, False: 8]
  ------------------
 4060|      0|                m_kind = float_kind::hex_with_prefix;
 4061|      0|                it = *r;
 4062|      0|            }
 4063|      8|            else {
 4064|      8|                m_kind = float_kind::hex_without_prefix;
 4065|      8|            }
 4066|       |
 4067|      8|            return read_hex(ranges::subrange{it, range.end()});
 4068|      8|        }
 4069|    334|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4069:13): [True: 24, False: 310]
  |  Branch (4069:29): [True: 24, False: 0]
  ------------------
 4070|       |            // only nonhex allowed:
 4071|       |            // no prefix allowed
 4072|     24|            m_kind = float_kind::generic;
 4073|     24|            return read_regular_float(range);
 4074|     24|        }
 4075|       |        // both hex and nonhex allowed:
 4076|       |        // check for "0x" prefix -> hex,
 4077|       |        // regular otherwise
 4078|       |
 4079|    310|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  865|    310|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 310]
  |  |  ------------------
  ------------------
 4080|      0|            m_kind = float_kind::hex_with_prefix;
 4081|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4082|      0|        }
 4083|       |
 4084|    310|        m_kind = float_kind::generic;
 4085|    310|        return read_regular(range);
 4086|    310|    }
_ZN3scn2v44impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3840|    342|    {
 3841|    342|        auto it = range.begin();
 3842|    342|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3842:73): [True: 342, False: 0]
  ------------------
 3843|    342|            return unexpected(r.error());
 3844|    342|        }
 3845|      0|        else {
 3846|      0|            it = *r;
 3847|      0|        }
 3848|       |
 3849|      0|        if (auto r = read_matching_string_classic_nocase(
 3850|      0|                ranges::subrange{it, range.end()}, "inity");
 3851|      0|            !r) {
  ------------------
  |  Branch (3851:13): [True: 0, False: 0]
  ------------------
 3852|      0|            m_kind = float_kind::inf_short;
 3853|      0|            return it;
 3854|      0|        }
 3855|      0|        else {
 3856|      0|            m_kind = float_kind::inf_long;
 3857|      0|            return *r;
 3858|      0|        }
 3859|      0|    }
_ZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3863|    342|    {
 3864|    342|        auto it = range.begin();
 3865|    342|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3865:73): [True: 342, False: 0]
  ------------------
 3866|    342|            return r.transform_error(map_parse_error_to_scan_error(
 3867|    342|                scan_error::invalid_scanned_value,
 3868|    342|                "Invalid floating-point NaN value"));
 3869|    342|        }
 3870|      0|        else {
 3871|      0|            it = *r;
 3872|      0|        }
 3873|       |
 3874|      0|        if (auto r =
 3875|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3876|      0|            !r) {
  ------------------
  |  Branch (3876:13): [True: 0, False: 0]
  ------------------
 3877|      0|            m_kind = float_kind::nan_simple;
 3878|      0|            return it;
 3879|      0|        }
 3880|      0|        else {
 3881|      0|            it = *r;
 3882|      0|        }
 3883|       |
 3884|      0|        auto payload_beg_it = it;
 3885|      0|        it = read_while_code_unit(
 3886|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3887|      0|                return is_ascii_char(ch) &&
 3888|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3889|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3890|      0|            });
 3891|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3892|       |
 3893|      0|        m_kind = float_kind::nan_with_payload;
 3894|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3894:18): [True: 0, False: 0]
  ------------------
 3895|      0|                                             ')')) {
 3896|      0|            return *r;
 3897|      0|        }
 3898|      0|        return detail::unexpected_scan_error(
 3899|      0|            scan_error::invalid_scanned_value,
 3900|      0|            "Invalid floating-point NaN payload");
 3901|      0|    }
_ZN3scn2v44impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3833|    318|    {
 3834|    318|        return read_matching_string_classic_nocase(range, "0x");
 3835|    318|    }
_ZN3scn2v44impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3934|      8|    {
 3935|      8|        auto it = range.begin();
 3936|       |
 3937|      8|        std::ptrdiff_t digits_count = 0;
 3938|      8|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3939|      8|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8, False: 0]
  |  |  ------------------
  ------------------
 3940|      8|            return r.transform_error(map_parse_error_to_scan_error(
 3941|      8|                scan_error::invalid_scanned_value,
 3942|      8|                "Invalid hexadecimal floating-point value"));
 3943|      8|        }
 3944|      0|        else {
 3945|      0|            digits_count += ranges::distance(it, *r);
 3946|      0|            it = *r;
 3947|      0|        }
 3948|       |
 3949|      0|        m_integral_part_length = digits_count;
 3950|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3950:18): [True: 0, False: 0]
  ------------------
 3951|      0|                                             m_locale_options.decimal_point)) {
 3952|      0|            it = *r;
 3953|      0|        }
 3954|       |
 3955|      0|        if (auto r =
  ------------------
  |  Branch (3955:18): [True: 0, False: 0]
  ------------------
 3956|      0|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3957|      0|            digits_count += ranges::distance(it, *r);
 3958|      0|            it = *r;
 3959|      0|        }
 3960|       |
 3961|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3962|      0|            return detail::unexpected_scan_error(
 3963|      0|                scan_error::invalid_scanned_value,
 3964|      0|                "No significand digits in hexfloat");
 3965|      0|        }
 3966|       |
 3967|      0|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3968|       |
 3969|      0|        return it;
 3970|      0|    }
_ZN3scn2v44impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3818|      8|    {
 3819|      8|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  865|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 8]
  |  |  |  Branch (865:45): [True: 0, False: 8]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3820|      8|                         thsep_allowed)) {
 3821|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3822|      0|                return char_to_int(ch) < 16 ||
 3823|      0|                       ch == m_locale_options.thousands_sep;
 3824|      0|            });
 3825|      0|        }
 3826|       |
 3827|      8|        return read_while1_code_unit(
 3828|      8|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3829|      8|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_:
  742|      8|        : m_fptr([](storage fn,
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|      8|              if constexpr (std::is_void_v<R>) {
  746|      8|                  obj(static_cast<decltype(args)>(args)...);
  747|      8|              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
  752|      8|          m_storage(std::addressof(f))
  753|      8|    {
  754|      8|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEcE_clES18_c:
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlcE0_EEDaNS3_7storageE:
  683|      8|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|      8|        else if constexpr (std::is_object_v<T>) {
  688|      8|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|      8|    }
_ZZN3scn2v44impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlcE0_clEc:
 3828|      8|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_TnPNSP_9enable_ifIXsr3stdE11is_object_vISR_EEvE4typeELPv0EEEPSR_:
  660|      8|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      8|        {
  662|      8|        }
_ZN3scn2v44impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3975|    334|    {
 3976|    334|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3977|    334|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3977:35): [True: 320, False: 14]
  |  Branch (3977:50): [True: 2, False: 318]
  ------------------
 3978|       |
 3979|    334|        auto it = ranges::begin(range);
 3980|    334|        std::ptrdiff_t digits_count = 0;
 3981|       |
 3982|    334|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3983|    334|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|    334|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 334, False: 0]
  |  |  ------------------
  ------------------
 3984|    334|            return r.transform_error(
 3985|    334|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3986|    334|                                              "Invalid floating-point value"));
 3987|    334|        }
 3988|      0|        else {
 3989|      0|            digits_count += ranges::distance(it, *r);
 3990|      0|            it = *r;
 3991|      0|        }
 3992|       |
 3993|      0|        m_integral_part_length = digits_count;
 3994|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3994:18): [True: 0, False: 0]
  ------------------
 3995|      0|                                             m_locale_options.decimal_point)) {
 3996|      0|            it = *r;
 3997|      0|        }
 3998|       |
 3999|      0|        if (auto r =
  ------------------
  |  Branch (3999:18): [True: 0, False: 0]
  ------------------
 4000|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4001|      0|            digits_count += ranges::distance(it, *r);
 4002|      0|            it = *r;
 4003|      0|        }
 4004|       |
 4005|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 4006|      0|            return detail::unexpected_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "No significand digits in float");
 4009|      0|        }
 4010|       |
 4011|      0|        auto beg_exp_it = it;
 4012|      0|        if (allowed_exp) {
  ------------------
  |  Branch (4012:13): [True: 0, False: 0]
  ------------------
 4013|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4014|      0|        }
 4015|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4015:13): [True: 0, False: 0]
  |  Branch (4015:29): [True: 0, False: 0]
  ------------------
 4016|      0|            return detail::unexpected_scan_error(
 4017|      0|                scan_error::invalid_scanned_value,
 4018|      0|                "No exponent given to scientific float");
 4019|      0|        }
 4020|       |
 4021|      0|        m_kind =
 4022|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4022:13): [True: 0, False: 0]
  ------------------
 4023|       |
 4024|      0|        return it;
 4025|      0|    }
_ZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3803|    334|    {
 3804|    334|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  865|    334|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 334]
  |  |  |  Branch (865:45): [True: 0, False: 334]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3805|    334|                         thsep_allowed)) {
 3806|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3807|      0|                return char_to_int(ch) < 10 ||
 3808|      0|                       ch == m_locale_options.thousands_sep;
 3809|      0|            });
 3810|      0|        }
 3811|       |
 3812|    334|        return read_while1_code_unit(
 3813|    334|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3814|    334|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_:
  742|    334|        : m_fptr([](storage fn,
  743|    334|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    334|              cvref<T> obj = *get<T>(fn);
  745|    334|              if constexpr (std::is_void_v<R>) {
  746|    334|                  obj(static_cast<decltype(args)>(args)...);
  747|    334|              }
  748|    334|              else {
  749|    334|                  return obj(static_cast<decltype(args)>(args)...);
  750|    334|              }
  751|    334|          }),
  752|    334|          m_storage(std::addressof(f))
  753|    334|    {
  754|    334|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEcE_clES18_c:
  743|    334|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    334|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    334|              else {
  749|    334|                  return obj(static_cast<decltype(args)>(args)...);
  750|    334|              }
  751|    334|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlcE0_EEDaNS3_7storageE:
  683|    334|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    334|        else if constexpr (std::is_object_v<T>) {
  688|    334|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    334|    }
_ZZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlcE0_clEc:
 3813|    334|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_TnPNSP_9enable_ifIXsr3stdE11is_object_vISR_EEvE4typeELPv0EEEPSR_:
  660|    334|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    334|        {
  662|    334|        }
_ZN3scn2v44impl12float_readerIcE11read_sourceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3706|    330|    {
 3707|    330|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  865|    330|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 330]
  |  |  ------------------
  ------------------
 3708|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3709|      0|                classic_with_thsep_tag{}};
 3710|      0|        }
 3711|       |
 3712|    330|        return read_source_impl(range);
 3713|    330|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|    910|    {
  763|    910|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|    910|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    910|    }
_ZN3scn2v44impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3720|      6|    {
 3721|      6|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3722|      6|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  864|      6|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 6]
  |  |  ------------------
  ------------------
 3723|      0|            m_locale_options.thousands_sep = CharT{0};
 3724|      0|        }
 3725|       |
 3726|      6|        return read_source_impl(range);
 3727|      6|    }
_ZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3746|    910|    {
 3747|    910|        SCN_TRY(sign_result,
  ------------------
  |  | 3940|    910|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    910|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    910|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    910|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 910]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    910|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    910|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3748|    910|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3749|    910|        auto it = sign_result.first;
 3750|    910|        m_sign = sign_result.second;
 3751|       |
 3752|    910|        auto digits_begin = it;
 3753|    910|        auto r = ranges::subrange{it, range.end()};
 3754|       |        if constexpr (ranges::contiguous_range<Range> &&
 3755|    910|                      ranges::sized_range<Range>) {
 3756|    910|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  865|  1.82k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 910]
  |  |  |  Branch (865:45): [True: 0, False: 910]
  |  |  |  Branch (865:45): [True: 0, False: 910]
  |  |  ------------------
  ------------------
 3757|    910|                             m_locale_options.decimal_point != CharT{'.'})) {
 3758|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|      0|    }                                                  \
  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3759|      0|                    it,
 3760|      0|                    do_read_source_impl(
 3761|      0|                        r,
 3762|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3763|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3764|      0|            }
 3765|    910|            else {
 3766|    910|                auto cb = [&](const auto& rr)
 3767|    910|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3768|    910|                    auto res = read_all(rr);
 3769|    910|                    if (SCN_UNLIKELY(res == r.begin())) {
 3770|    910|                        return detail::unexpected_scan_error(
 3771|    910|                            scan_error::invalid_scanned_value,
 3772|    910|                            "Invalid float value");
 3773|    910|                    }
 3774|    910|                    return res;
 3775|    910|                };
 3776|    910|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3935|    910|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    910|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    910|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 22, False: 888]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|     22|    }                                                  \
  |  | 3939|    910|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    910|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3777|    888|            }
 3778|       |        }
 3779|       |        else {
 3780|       |            SCN_TRY_ASSIGN(
 3781|       |                it,
 3782|       |                do_read_source_impl(
 3783|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3784|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3785|       |        }
 3786|       |
 3787|    910|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|    910|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    910|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3788|       |
 3789|    888|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3789:13): [True: 888, False: 0]
  |  Branch (3789:48): [True: 888, False: 0]
  ------------------
 3790|    888|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3790:13): [True: 888, False: 0]
  ------------------
 3791|    888|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3791:13): [True: 888, False: 0]
  ------------------
 3792|    888|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3793|    888|        }
 3794|       |
 3795|    888|        handle_separators();
 3796|       |
 3797|    888|        return it;
 3798|    910|    }
_ZN3scn2v44impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3840|    910|    {
 3841|    910|        auto it = range.begin();
 3842|    910|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3842:73): [True: 910, False: 0]
  ------------------
 3843|    910|            return unexpected(r.error());
 3844|    910|        }
 3845|      0|        else {
 3846|      0|            it = *r;
 3847|      0|        }
 3848|       |
 3849|      0|        if (auto r = read_matching_string_classic_nocase(
 3850|      0|                ranges::subrange{it, range.end()}, "inity");
 3851|      0|            !r) {
  ------------------
  |  Branch (3851:13): [True: 0, False: 0]
  ------------------
 3852|      0|            m_kind = float_kind::inf_short;
 3853|      0|            return it;
 3854|      0|        }
 3855|      0|        else {
 3856|      0|            m_kind = float_kind::inf_long;
 3857|      0|            return *r;
 3858|      0|        }
 3859|      0|    }
_ZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3863|    910|    {
 3864|    910|        auto it = range.begin();
 3865|    910|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3865:73): [True: 910, False: 0]
  ------------------
 3866|    910|            return r.transform_error(map_parse_error_to_scan_error(
 3867|    910|                scan_error::invalid_scanned_value,
 3868|    910|                "Invalid floating-point NaN value"));
 3869|    910|        }
 3870|      0|        else {
 3871|      0|            it = *r;
 3872|      0|        }
 3873|       |
 3874|      0|        if (auto r =
 3875|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3876|      0|            !r) {
  ------------------
  |  Branch (3876:13): [True: 0, False: 0]
  ------------------
 3877|      0|            m_kind = float_kind::nan_simple;
 3878|      0|            return it;
 3879|      0|        }
 3880|      0|        else {
 3881|      0|            it = *r;
 3882|      0|        }
 3883|       |
 3884|      0|        auto payload_beg_it = it;
 3885|      0|        it = read_while_code_unit(
 3886|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3887|      0|                return is_ascii_char(ch) &&
 3888|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3889|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3890|      0|            });
 3891|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3892|       |
 3893|      0|        m_kind = float_kind::nan_with_payload;
 3894|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3894:18): [True: 0, False: 0]
  ------------------
 3895|      0|                                             ')')) {
 3896|      0|            return *r;
 3897|      0|        }
 3898|      0|        return detail::unexpected_scan_error(
 3899|      0|            scan_error::invalid_scanned_value,
 3900|      0|            "Invalid floating-point NaN payload");
 3901|      0|    }
_ZN3scn2v44impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|    888|    {
 3834|    888|        return read_matching_string_classic_nocase(range, "0x");
 3835|    888|    }
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2094|     22|{
 2095|     22|    auto it = read_while_code_unit(range, pred);
 2096|     22|    if (it == range.begin()) {
  ------------------
  |  Branch (2096:9): [True: 22, False: 0]
  ------------------
 2097|     22|        return unexpected(parse_error::error);
 2098|     22|    }
 2099|      0|    return it;
 2100|     22|}
_ZN3scn2v44impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3975|     22|    {
 3976|     22|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3977|     22|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3977:35): [True: 8, False: 14]
  |  Branch (3977:50): [True: 4, False: 4]
  ------------------
 3978|       |
 3979|     22|        auto it = ranges::begin(range);
 3980|     22|        std::ptrdiff_t digits_count = 0;
 3981|       |
 3982|     22|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3983|     22|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 22, False: 0]
  |  |  ------------------
  ------------------
 3984|     22|            return r.transform_error(
 3985|     22|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3986|     22|                                              "Invalid floating-point value"));
 3987|     22|        }
 3988|      0|        else {
 3989|      0|            digits_count += ranges::distance(it, *r);
 3990|      0|            it = *r;
 3991|      0|        }
 3992|       |
 3993|      0|        m_integral_part_length = digits_count;
 3994|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3994:18): [True: 0, False: 0]
  ------------------
 3995|      0|                                             m_locale_options.decimal_point)) {
 3996|      0|            it = *r;
 3997|      0|        }
 3998|       |
 3999|      0|        if (auto r =
  ------------------
  |  Branch (3999:18): [True: 0, False: 0]
  ------------------
 4000|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4001|      0|            digits_count += ranges::distance(it, *r);
 4002|      0|            it = *r;
 4003|      0|        }
 4004|       |
 4005|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 4006|      0|            return detail::unexpected_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "No significand digits in float");
 4009|      0|        }
 4010|       |
 4011|      0|        auto beg_exp_it = it;
 4012|      0|        if (allowed_exp) {
  ------------------
  |  Branch (4012:13): [True: 0, False: 0]
  ------------------
 4013|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4014|      0|        }
 4015|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4015:13): [True: 0, False: 0]
  |  Branch (4015:29): [True: 0, False: 0]
  ------------------
 4016|      0|            return detail::unexpected_scan_error(
 4017|      0|                scan_error::invalid_scanned_value,
 4018|      0|                "No exponent given to scientific float");
 4019|      0|        }
 4020|       |
 4021|      0|        m_kind =
 4022|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4022:13): [True: 0, False: 0]
  ------------------
 4023|       |
 4024|      0|        return it;
 4025|      0|    }
_ZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3803|     22|    {
 3804|     22|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  865|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 22]
  |  |  |  Branch (865:45): [True: 0, False: 22]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3805|     22|                         thsep_allowed)) {
 3806|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3807|      0|                return char_to_int(ch) < 10 ||
 3808|      0|                       ch == m_locale_options.thousands_sep;
 3809|      0|            });
 3810|      0|        }
 3811|       |
 3812|     22|        return read_while1_code_unit(
 3813|     22|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3814|     22|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|     22|        : m_fptr([](storage fn,
  743|     22|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     22|              cvref<T> obj = *get<T>(fn);
  745|     22|              if constexpr (std::is_void_v<R>) {
  746|     22|                  obj(static_cast<decltype(args)>(args)...);
  747|     22|              }
  748|     22|              else {
  749|     22|                  return obj(static_cast<decltype(args)>(args)...);
  750|     22|              }
  751|     22|          }),
  752|     22|          m_storage(std::addressof(f))
  753|     22|    {
  754|     22|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|     22|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     22|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     22|              else {
  749|     22|                  return obj(static_cast<decltype(args)>(args)...);
  750|     22|              }
  751|     22|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  683|     22|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     22|        else if constexpr (std::is_object_v<T>) {
  688|     22|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     22|    }
_ZZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3813|     22|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     22|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     22|        {
  662|     22|        }
_ZN3scn2v44impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 4032|    910|    {
 4033|    910|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4034|    910|        const bool allowed_nonhex =
 4035|    910|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4036|    910|             ~static_cast<unsigned>(allow_hex)) != 0;
 4037|       |
 4038|    910|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4038:39): [True: 910, False: 0]
  |  Branch (4038:45): [True: 0, False: 910]
  ------------------
 4039|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4040|      0|                scan_error::invalid_scanned_value,
 4041|      0|                "Invalid infinite floating-point value"));
 4042|      0|        }
 4043|    910|        else if (r) {
  ------------------
  |  Branch (4043:18): [True: 0, False: 910]
  ------------------
 4044|      0|            return *r;
 4045|      0|        }
 4046|       |
 4047|    910|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4047:39): [True: 910, False: 0]
  |  Branch (4047:45): [True: 0, False: 910]
  ------------------
 4048|      0|            return unexpected(r.error());
 4049|      0|        }
 4050|    910|        else if (r) {
  ------------------
  |  Branch (4050:18): [True: 0, False: 910]
  ------------------
 4051|      0|            return *r;
 4052|      0|        }
 4053|       |
 4054|    910|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4054:13): [True: 888, False: 22]
  |  Branch (4054:28): [True: 6, False: 882]
  ------------------
 4055|       |            // only hex allowed:
 4056|       |            // prefix "0x" allowed, not required
 4057|      6|            auto it = range.begin();
 4058|       |
 4059|      6|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4059:22): [True: 0, False: 6]
  ------------------
 4060|      0|                m_kind = float_kind::hex_with_prefix;
 4061|      0|                it = *r;
 4062|      0|            }
 4063|      6|            else {
 4064|      6|                m_kind = float_kind::hex_without_prefix;
 4065|      6|            }
 4066|       |
 4067|      6|            return read_hex(ranges::subrange{it, range.end()});
 4068|      6|        }
 4069|    904|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4069:13): [True: 22, False: 882]
  |  Branch (4069:29): [True: 22, False: 0]
  ------------------
 4070|       |            // only nonhex allowed:
 4071|       |            // no prefix allowed
 4072|     22|            m_kind = float_kind::generic;
 4073|     22|            return read_regular_float(range);
 4074|     22|        }
 4075|       |        // both hex and nonhex allowed:
 4076|       |        // check for "0x" prefix -> hex,
 4077|       |        // regular otherwise
 4078|       |
 4079|    882|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  865|    882|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 882]
  |  |  ------------------
  ------------------
 4080|      0|            m_kind = float_kind::hex_with_prefix;
 4081|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4082|      0|        }
 4083|       |
 4084|    882|        m_kind = float_kind::generic;
 4085|    882|        return read_regular(range);
 4086|    882|    }
_ZZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3767|    888|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3768|    888|                    auto res = read_all(rr);
 3769|    888|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  865|    888|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 888]
  |  |  ------------------
  ------------------
 3770|      0|                        return detail::unexpected_scan_error(
 3771|      0|                            scan_error::invalid_scanned_value,
 3772|      0|                            "Invalid float value");
 3773|      0|                    }
 3774|    888|                    return res;
 3775|    888|                };
_ZN3scn2v44impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1937|    888|{
 1938|    888|    return ranges::next(range.begin(), range.end());
 1939|    888|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|    888|    {
  313|    888|        ranges::advance(x, bound);
  314|    888|        return x;
  315|    888|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|    888|    {
  275|    888|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|    888|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|    954|    {
  190|    954|        i = std::move(bound);
  191|    954|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1675|    888|    {
 1676|    888|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|    888|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|    888|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1719|    888|    {
 1720|    888|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|    888|                      ranges::sized_range<Range>) {
 1725|    888|            m_storage.reset();
 1726|    888|            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|    888|    }
_ZN3scn2v44impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3706|    904|    {
 3707|    904|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  865|    904|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 904]
  |  |  ------------------
  ------------------
 3708|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3709|      0|                classic_with_thsep_tag{}};
 3710|      0|        }
 3711|       |
 3712|    904|        return read_source_impl(range);
 3713|    904|    }
_ZN3scn2v44impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3732|    888|    {
 3733|    888|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|    888|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    888|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3734|       |
 3735|    888|        const std::ptrdiff_t sign_len =
 3736|    888|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3736:13): [True: 0, False: 888]
  ------------------
 3737|       |
 3738|    888|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3940|    888|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    888|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    888|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    888|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 888, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    888|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    888|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    888|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    888|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    888|    }                                                  \
  |  |  |  | 3939|    888|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3739|      0|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3740|    888|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 4202|    342|    {
 4203|    342|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|    342|#if !SCN_DISABLE_LOCALE
 4206|    342|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 12, False: 330]
  ------------------
 4207|     12|            return read_impl<Range>(
 4208|     12|                range, rd,
 4209|     12|                [](float_reader<CharT>& r, auto&&... args) {
 4210|     12|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|     12|                },
 4212|     12|                value, loc);
 4213|     12|        }
 4214|    330|#endif
 4215|       |
 4216|    330|        return read_impl<Range>(
 4217|    330|            range, rd,
 4218|    330|            [](float_reader<CharT>& r, auto&&... args) {
 4219|    330|                return r.read_source(SCN_FWD(args)...);
 4220|    330|            },
 4221|    330|            value);
 4222|    342|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNS1_12float_readerIcEENS1_12function_refIFSM_SP_SH_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4238|    342|    {
 4239|    342|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|    342|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|    342|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 342, False: 0]
  |  |  ------------------
  ------------------
 4241|    342|            return unexpected(r.error());
 4242|    342|        }
 4243|       |
 4244|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|      0|        return ranges::next(range.begin(), n);
 4246|      0|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_:
  742|     12|        : m_fptr([](storage fn,
  743|     12|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     12|              cvref<T> obj = *get<T>(fn);
  745|     12|              if constexpr (std::is_void_v<R>) {
  746|     12|                  obj(static_cast<decltype(args)>(args)...);
  747|     12|              }
  748|     12|              else {
  749|     12|                  return obj(static_cast<decltype(args)>(args)...);
  750|     12|              }
  751|     12|          }),
  752|     12|          m_storage(std::addressof(f))
  753|     12|    {
  754|     12|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1H_SC_SJ_SL_:
  743|     12|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     12|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     12|              else {
  749|     12|                  return obj(static_cast<decltype(args)>(args)...);
  750|     12|              }
  751|     12|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|     12|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     12|        else if constexpr (std::is_object_v<T>) {
  688|     12|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     12|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSD_ST_EEEDaSW_SZ_:
 4209|     12|                [](float_reader<CharT>& r, auto&&... args) {
 4210|     12|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|     12|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|     12|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     12|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     12|        {
  662|     12|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_:
  742|    330|        : m_fptr([](storage fn,
  743|    330|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    330|              cvref<T> obj = *get<T>(fn);
  745|    330|              if constexpr (std::is_void_v<R>) {
  746|    330|                  obj(static_cast<decltype(args)>(args)...);
  747|    330|              }
  748|    330|              else {
  749|    330|                  return obj(static_cast<decltype(args)>(args)...);
  750|    330|              }
  751|    330|          }),
  752|    330|          m_storage(std::addressof(f))
  753|    330|    {
  754|    330|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1H_SC_SJ_SL_:
  743|    330|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    330|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    330|              else {
  749|    330|                  return obj(static_cast<decltype(args)>(args)...);
  750|    330|              }
  751|    330|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|    330|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    330|        else if constexpr (std::is_object_v<T>) {
  688|    330|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    330|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSD_ST_EEEDaSW_SZ_:
 4218|    330|            [](float_reader<CharT>& r, auto&&... args) {
 4219|    330|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|    330|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|    330|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|    330|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    330|        {
  662|    330|        }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4202|    278|    {
 4203|    278|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|    278|#if !SCN_DISABLE_LOCALE
 4206|    278|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 6, False: 272]
  ------------------
 4207|      6|            return read_impl<Range>(
 4208|      6|                range, rd,
 4209|      6|                [](float_reader<CharT>& r, auto&&... args) {
 4210|      6|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|      6|                },
 4212|      6|                value, loc);
 4213|      6|        }
 4214|    272|#endif
 4215|       |
 4216|    272|        return read_impl<Range>(
 4217|    272|            range, rd,
 4218|    272|            [](float_reader<CharT>& r, auto&&... args) {
 4219|    272|                return r.read_source(SCN_FWD(args)...);
 4220|    272|            },
 4221|    272|            value);
 4222|    278|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4238|    910|    {
 4239|    910|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|    910|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|    910|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 22, False: 888]
  |  |  ------------------
  ------------------
 4241|     22|            return unexpected(r.error());
 4242|     22|        }
 4243|       |
 4244|    888|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|    888|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    888|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    888|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    888|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 888, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    888|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    888|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    888|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    888|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    888|    }                                                  \
  |  |  |  | 3939|    888|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|      0|        return ranges::next(range.begin(), n);
 4246|    888|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|      6|        : m_fptr([](storage fn,
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|      6|              if constexpr (std::is_void_v<R>) {
  746|      6|                  obj(static_cast<decltype(args)>(args)...);
  747|      6|              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
  752|      6|          m_storage(std::addressof(f))
  753|      6|    {
  754|      6|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|      6|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|      6|        else if constexpr (std::is_object_v<T>) {
  688|      6|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|      6|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4209|      6|                [](float_reader<CharT>& r, auto&&... args) {
 4210|      6|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|      6|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|      6|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      6|        {
  662|      6|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|    272|        : m_fptr([](storage fn,
  743|    272|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    272|              cvref<T> obj = *get<T>(fn);
  745|    272|              if constexpr (std::is_void_v<R>) {
  746|    272|                  obj(static_cast<decltype(args)>(args)...);
  747|    272|              }
  748|    272|              else {
  749|    272|                  return obj(static_cast<decltype(args)>(args)...);
  750|    272|              }
  751|    272|          }),
  752|    272|          m_storage(std::addressof(f))
  753|    272|    {
  754|    272|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|    272|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    272|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    272|              else {
  749|    272|                  return obj(static_cast<decltype(args)>(args)...);
  750|    272|              }
  751|    272|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|    272|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    272|        else if constexpr (std::is_object_v<T>) {
  688|    272|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    272|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4218|    272|            [](float_reader<CharT>& r, auto&&... args) {
 4219|    272|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|    272|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|    272|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|    272|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    272|        {
  662|    272|        }
_ZN3scn2v44impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEcEEDav:
 5848|  3.03k|{
 5849|       |    if constexpr (std::is_same_v<T, bool>) {
 5850|       |        return reader_impl_for_bool<CharT>{};
 5851|       |    }
 5852|       |    else if constexpr (std::is_same_v<T, char>) {
 5853|       |        return reader_impl_for_char<CharT>{};
 5854|       |    }
 5855|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5856|       |        return reader_impl_for_wchar<CharT>{};
 5857|       |    }
 5858|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5859|       |        return reader_impl_for_code_point<CharT>{};
 5860|       |    }
 5861|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5862|       |                       std::is_same_v<T, std::wstring_view>) {
 5863|       |        return reader_impl_for_string<CharT>{};
 5864|       |    }
 5865|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5866|  3.03k|                       std::is_same_v<T, std::wstring>) {
 5867|  3.03k|        return reader_impl_for_string<CharT>{};
 5868|       |    }
 5869|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5870|       |                       std::is_same_v<T, wregex_matches>) {
 5871|       |        return reader_impl_for_regex_matches<CharT>{};
 5872|       |    }
 5873|       |    else if constexpr (std::is_same_v<T, void*>) {
 5874|       |        return reader_impl_for_voidptr<CharT>{};
 5875|       |    }
 5876|       |    else if constexpr (std::is_floating_point_v<T>) {
 5877|       |        return reader_impl_for_float<CharT>{};
 5878|       |    }
 5879|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5880|       |                       !std::is_same_v<T, wchar_t> &&
 5881|       |                       !std::is_same_v<T, char32_t> &&
 5882|       |                       !std::is_same_v<T, bool>) {
 5883|       |        return reader_impl_for_int<CharT>{};
 5884|       |    }
 5885|       |    else {
 5886|       |        return reader_impl_for_monostate<CharT>{};
 5887|       |    }
 5888|  3.03k|}
_ZN3scn2v44impl13string_readerIcEC2Ev:
 5242|  9.10k|    constexpr string_reader() = default;
_ZN3scn2v44impl11reader_baseINS1_13string_readerIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3155|  7.20k|    {
 3156|  7.20k|        reader_error_handler eh{};
 3157|  7.20k|        get_derived().check_specs_impl(specs, eh);
 3158|  7.20k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  7.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 402, False: 6.80k]
  |  |  ------------------
  ------------------
 3159|    402|            return detail::unexpected_scan_error(
 3160|    402|                scan_error::invalid_format_string, eh.m_msg);
 3161|    402|        }
 3162|  6.80k|        return {};
 3163|  7.20k|    }
_ZN3scn2v44impl11reader_baseINS1_13string_readerIcEEcE11get_derivedEv:
 3167|  7.20k|    {
 3168|  7.20k|        return static_cast<Derived&>(*this);
 3169|  7.20k|    }
_ZN3scn2v44impl13string_readerIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5246|  7.20k|    {
 5247|  7.20k|        detail::check_string_type_specs(specs, eh);
 5248|       |
 5249|  7.20k|        SCN_GCC_PUSH
 5250|  7.20k|        SCN_GCC_IGNORE("-Wswitch")
 5251|  7.20k|        SCN_GCC_IGNORE("-Wswitch-default")
 5252|       |
 5253|  7.20k|        SCN_CLANG_PUSH
 5254|  7.20k|        SCN_CLANG_IGNORE("-Wswitch")
 5255|  7.20k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5256|       |
 5257|  7.20k|        switch (specs.type) {
  ------------------
  |  Branch (5257:17): [True: 396, False: 6.81k]
  ------------------
 5258|  1.71k|            case detail::presentation_type::none:
  ------------------
  |  Branch (5258:13): [True: 1.71k, False: 5.49k]
  ------------------
 5259|  1.71k|                m_type = reader_type::word;
 5260|  1.71k|                break;
 5261|       |
 5262|    660|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5262:13): [True: 660, False: 6.54k]
  ------------------
 5263|    660|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5263:21): [True: 114, False: 546]
  ------------------
 5264|    660|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5264:21): [True: 312, False: 234]
  ------------------
 5265|    426|                    m_type = reader_type::custom_word;
 5266|    426|                }
 5267|    234|                else {
 5268|    234|                    m_type = reader_type::word;
 5269|    234|                }
 5270|    660|                break;
 5271|      0|            }
 5272|       |
 5273|    150|            case detail::presentation_type::character:
  ------------------
  |  Branch (5273:13): [True: 150, False: 7.05k]
  ------------------
 5274|    150|                m_type = reader_type::character;
 5275|    150|                break;
 5276|       |
 5277|  3.63k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5277:13): [True: 3.63k, False: 3.57k]
  ------------------
 5278|  3.63k|                m_type = reader_type::character_set;
 5279|  3.63k|                break;
 5280|       |
 5281|    120|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5281:13): [True: 120, False: 7.08k]
  ------------------
 5282|    120|                m_type = reader_type::regex;
 5283|    120|                break;
 5284|       |
 5285|    534|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5285:13): [True: 534, False: 6.67k]
  ------------------
 5286|    534|                m_type = reader_type::regex_escaped;
 5287|    534|                break;
 5288|  7.20k|        }
 5289|       |
 5290|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5291|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5292|  7.20k|    }
_ZNK3scn2v44impl13string_readerIcE19skip_ws_before_readEv:
 5295|  11.5k|    {
 5296|  11.5k|        return m_type == reader_type::word;
 5297|  11.5k|    }
_ZN3scn2v44impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1241|  8.63k|{
 1242|  8.63k|    auto it = src.begin();
 1243|   481k|    while (it != src.end()) {
  ------------------
  |  Branch (1243:12): [True: 474k, False: 6.55k]
  ------------------
 1244|   474k|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1245|   474k|        if (len == 0) {
  ------------------
  |  Branch (1245:13): [True: 1.38k, False: 473k]
  ------------------
 1246|  1.38k|            return false;
 1247|  1.38k|        }
 1248|   473k|        if (src.end() - it < len) {
  ------------------
  |  Branch (1248:13): [True: 234, False: 473k]
  ------------------
 1249|    234|            return false;
 1250|    234|        }
 1251|   473k|        const auto cp = detail::decode_code_point_exhaustive(
 1252|   473k|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1253|   473k|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1253:13): [True: 468, False: 472k]
  ------------------
 1254|    468|            return false;
 1255|    468|        }
 1256|   472k|        it += len;
 1257|   472k|    }
 1258|  6.55k|    return true;
 1259|  8.63k|}
_ZN3scn2v44impl22transcode_if_necessaryIccEENS0_13scan_expectedIvEEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS9_11char_traitsISB_EENS9_9allocatorISB_EEEE:
 3107|    418|{
 3108|    418|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3109|    418|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (3109:13): [True: 418, False: 0]
  ------------------
 3110|    418|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  934|    418|    static_cast<    \
  |  |  935|    418|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3111|    418|        }
 3112|      0|        else {
 3113|      0|            dest.assign(source.view());
 3114|      0|        }
 3115|       |    }
 3116|       |    else {
 3117|       |        return transcode_impl(source.view(), dest);
 3118|       |    }
 3119|       |
 3120|    418|    return {};
 3121|    418|}
_ZN3scn2v44impl25character_set_reader_implIcE12specs_helper15handle_nonasciiEv:
 5143|  3.63k|        {
 5144|  3.63k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5144:17): [True: 606, False: 3.02k]
  ------------------
 5145|    606|                return {};
 5146|    606|            }
 5147|       |
 5148|  3.02k|            auto charset_string = specs.charset_string<SourceCharT>();
 5149|  3.02k|            auto it = detail::to_address(charset_string.begin());
 5150|  3.02k|            auto set = detail::parse_presentation_set(
 5151|  3.02k|                it, detail::to_address(charset_string.end()), nonascii);
 5152|  3.02k|            SCN_TRY_DISCARD(nonascii.get_error());
  ------------------
  |  | 3930|  3.02k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  3.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 3.02k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5153|  3.02k|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  931|  3.02k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5154|  3.02k|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  931|  3.02k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5155|       |
 5156|  3.02k|            std::sort(nonascii.extra_ranges.begin(),
 5157|  3.02k|                      nonascii.extra_ranges.end());
 5158|  3.02k|            return {};
 5159|  3.02k|        }
_ZNK3scn2v44impl25character_set_reader_implIcE20read_source_callback28on_classic_with_extra_rangesEDi:
 5176|   320k|        {
 5177|   320k|            if (!is_ascii_char(cp)) {
  ------------------
  |  Branch (5177:17): [True: 46.3k, False: 274k]
  ------------------
 5178|  46.3k|                return helper.is_char_set_in_extra_literals(cp);
 5179|  46.3k|            }
 5180|       |
 5181|   274k|            return helper.is_char_set_in_literals(static_cast<char>(cp));
 5182|   320k|        }
_ZNK3scn2v44impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDi:
 5126|  46.3k|        {
 5127|       |            // TODO: binary search?
 5128|  46.3k|            if (nonascii.extra_ranges.empty()) {
  ------------------
  |  Branch (5128:17): [True: 0, False: 46.3k]
  ------------------
 5129|      0|                return false;
 5130|      0|            }
 5131|       |
 5132|  46.3k|            const auto cp_val = static_cast<uint32_t>(cp);
 5133|  46.3k|            return std::find_if(
 5134|  46.3k|                       nonascii.extra_ranges.begin(),
 5135|  46.3k|                       nonascii.extra_ranges.end(),
 5136|  46.3k|                       [cp_val](const auto& pair) noexcept {
 5137|  46.3k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
 5138|  46.3k|                                  static_cast<uint32_t>(pair.second) > cp_val;
 5139|  46.3k|                       }) != nonascii.extra_ranges.end();
 5140|  46.3k|        }
_ZZNK3scn2v44impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDiENKUlRKT_E_clINSt3__14pairIDiDiEEEEDaS7_:
 5136|  7.90M|                       [cp_val](const auto& pair) noexcept {
 5137|  7.90M|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
  ------------------
  |  Branch (5137:35): [True: 7.89M, False: 3.10k]
  ------------------
 5138|  7.90M|                                  static_cast<uint32_t>(pair.second) > cp_val;
  ------------------
  |  Branch (5138:35): [True: 44.9k, False: 7.85M]
  ------------------
 5139|  7.90M|                       }) != nonascii.extra_ranges.end();
_ZNK3scn2v44impl25character_set_reader_implIcE12specs_helper23is_char_set_in_literalsEc:
 5116|   282k|        {
 5117|   282k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  930|   282k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   282k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5118|   282k|            const auto val =
 5119|   282k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5120|   282k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5121|   282k|                    (val % 8)) &
 5122|   282k|                   1u;
 5123|   282k|        }
_ZNK3scn2v44impl25character_set_reader_implIcE20read_source_callback13on_ascii_onlyEc:
 5167|  10.5k|        {
 5168|  10.5k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5168:17): [True: 1.99k, False: 8.52k]
  ------------------
 5169|  1.99k|                return false;
 5170|  1.99k|            }
 5171|       |
 5172|  8.52k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5173|  10.5k|        }
_ZN3scn2v44impl25character_set_reader_implIcE12specs_helperC2ERKNS0_6detail12format_specsE:
 5113|  3.63k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v44impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5313|    836|    {
 5314|    836|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    836|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|    836|        return read_impl(range, specs, value);
 5316|    836|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5331|    836|    {
 5332|    836|        SCN_CLANG_PUSH
 5333|    836|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|    836|        switch (m_type) {
 5336|    304|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 304, False: 532]
  ------------------
 5337|    304|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|     86|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 86, False: 750]
  ------------------
 5340|     86|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|     86|                                                                   value);
 5342|       |
 5343|     48|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 48, False: 788]
  ------------------
 5344|     48|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|    306|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 306, False: 530]
  ------------------
 5347|    306|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|    306|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|      2|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 2, False: 834]
  ------------------
 5352|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|      2|                    range, specs.charset_string<SourceCharT>(),
 5354|      2|                    specs.regexp_flags, value);
 5355|       |
 5356|     90|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 90, False: 746]
  ------------------
 5357|     90|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|     90|                    range,
 5359|     90|                    get_unescaped_regex_pattern(
 5360|     90|                        specs.charset_string<SourceCharT>()),
 5361|     90|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 836]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|    836|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|    836|        }
 5368|       |
 5369|    836|        SCN_CLANG_POP
 5370|    836|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4860|    304|    {
 4861|    304|        return read_string_impl(range, read_until_classic_space(range), value);
 4862|    304|    }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4794|    438|{
 4795|    438|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    438|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    438|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 190, False: 248]
  ------------------
 4799|    190|        return detail::unexpected_scan_error(
 4800|    190|            scan_error::invalid_scanned_value,
 4801|    190|            "Invalid encoding in scanned string");
 4802|    190|    }
 4803|       |
 4804|    248|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    248|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    248|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 248]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|    248|    return SCN_MOVE(result);
  ------------------
  |  |  934|    248|    static_cast<    \
  |  |  935|    248|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    248|}
_ZN3scn2v44impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2186|    912|{
 2187|       |    if constexpr (ranges::contiguous_range<Range> &&
 2188|       |                  ranges::sized_range<Range> &&
 2189|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2190|       |        auto buf = make_contiguous_buffer(range);
 2191|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2192|       |        return ranges::next(range.begin(),
 2193|       |                            ranges::distance(buf.view().begin(), it));
 2194|       |    }
 2195|    912|    else {
 2196|    912|        auto it = range.begin();
 2197|       |
 2198|    912|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|    912|            auto seg = get_contiguous_beginning(range);
 2200|    912|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2201|    912|                seg_it != seg.end()) {
  ------------------
  |  Branch (2201:17): [True: 0, False: 912]
  ------------------
 2202|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2203|      0|            }
 2204|    912|            ranges::advance(it, seg.size());
 2205|    912|        }
 2206|       |
 2207|      0|        return read_until_code_point(
 2208|    912|            ranges::subrange{it, range.end()},
 2209|    912|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2210|    912|    }
 2211|    912|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbDiESQ_EE:
 2159|    912|{
 2160|    912|    auto it = range.begin();
 2161|  13.8k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 13.1k, False: 720]
  ------------------
 2162|  13.1k|        const auto val =
 2163|  13.1k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  13.1k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|  13.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 11.5k, False: 1.57k]
  |  |  ------------------
  ------------------
 2165|  11.5k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  11.5k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  11.5k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 192, False: 11.3k]
  ------------------
 2168|    192|                return it;
 2169|    192|            }
 2170|  11.5k|        }
 2171|  12.9k|        it = val.iterator;
 2172|  12.9k|    }
 2173|       |
 2174|    720|    return it;
 2175|    912|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_:
  742|    912|        : m_fptr([](storage fn,
  743|    912|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    912|              cvref<T> obj = *get<T>(fn);
  745|    912|              if constexpr (std::is_void_v<R>) {
  746|    912|                  obj(static_cast<decltype(args)>(args)...);
  747|    912|              }
  748|    912|              else {
  749|    912|                  return obj(static_cast<decltype(args)>(args)...);
  750|    912|              }
  751|    912|          }),
  752|    912|          m_storage(std::addressof(f))
  753|    912|    {
  754|    912|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESY_Di:
  743|  11.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  11.5k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  11.5k|              else {
  749|  11.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  11.5k|              }
  751|  11.5k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  11.5k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  11.5k|        else if constexpr (std::is_object_v<T>) {
  688|  11.5k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  11.5k|    }
_ZZN3scn2v44impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2209|  11.5k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|    912|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    912|        {
  662|    912|        }
_ZN3scn2v44impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4881|     86|    {
 4882|     86|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4882:13): [True: 44, False: 42]
  ------------------
 4883|     44|            return read_string_impl(
 4884|     44|                range,
 4885|     44|                read_until_code_unit(
 4886|     44|                    range,
 4887|     44|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4888|     44|                        SourceCharT ch) { return ch == until; }),
 4889|     44|                value);
 4890|     44|        }
 4891|     42|        return read_string_impl(
 4892|     42|            range,
 4893|     42|            read_until_code_units(
 4894|     42|                range, specs.fill.template get_code_units<SourceCharT>()),
 4895|     42|            value);
 4896|     86|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|     44|        : m_fptr([](storage fn,
  743|     44|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     44|              cvref<T> obj = *get<T>(fn);
  745|     44|              if constexpr (std::is_void_v<R>) {
  746|     44|                  obj(static_cast<decltype(args)>(args)...);
  747|     44|              }
  748|     44|              else {
  749|     44|                  return obj(static_cast<decltype(args)>(args)...);
  750|     44|              }
  751|     44|          }),
  752|     44|          m_storage(std::addressof(f))
  753|     44|    {
  754|     44|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES1D_c:
  743|  1.03k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.03k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.03k|              else {
  749|  1.03k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.03k|              }
  751|  1.03k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|  1.03k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.03k|        else if constexpr (std::is_object_v<T>) {
  688|  1.03k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.03k|    }
_ZZN3scn2v44impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlcE_clEc:
 4888|  1.03k|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     44|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     44|        {
  662|     44|        }
_ZN3scn2v44impl21read_until_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEESI_RKT0_:
 2105|    126|{
 2106|    126|    static_assert(ranges::common_range<CodeUnits>);
 2107|       |
 2108|       |    if constexpr (ranges::common_range<Range>) {
 2109|       |        return std::search(range.begin(), range.end(), needle.begin(),
 2110|       |                           needle.end());
 2111|       |    }
 2112|    126|    else {
 2113|    126|        auto first = range.begin();
 2114|  1.11k|        while (true) {
  ------------------
  |  Branch (2114:16): [Folded - Ignored]
  ------------------
 2115|  1.11k|            auto it = first;
 2116|  1.41k|            for (auto needle_it = needle.begin();; ++it, (void)++needle_it) {
 2117|  1.41k|                if (needle_it == needle.end()) {
  ------------------
  |  Branch (2117:21): [True: 90, False: 1.32k]
  ------------------
 2118|     90|                    return first;
 2119|     90|                }
 2120|  1.32k|                if (it == range.end()) {
  ------------------
  |  Branch (2120:21): [True: 36, False: 1.29k]
  ------------------
 2121|     36|                    return it;
 2122|     36|                }
 2123|  1.29k|                if (*it != *needle_it) {
  ------------------
  |  Branch (2123:21): [True: 990, False: 300]
  ------------------
 2124|    990|                    break;
 2125|    990|                }
 2126|  1.29k|            }
 2127|    990|            ++first;
 2128|    990|        }
 2129|    126|    }
 2130|    126|}
_ZN3scn2v44impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4987|     48|    {
 4988|     48|        return read_impl(
 4989|     48|            range,
 4990|     48|            [&](const auto& rng) {
 4991|     48|                return read_string_impl(rng, read_all(rng), value);
 4992|     48|            },
 4993|     48|            detail::priority_tag<1>{});
 4994|     48|    }
_ZN3scn2v44impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 5014|     48|    {
 5015|     48|        return read_cb(range);
 5016|     48|    }
_ZZN3scn2v44impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4990|     48|            [&](const auto& rng) {
 4991|     48|                return read_string_impl(rng, read_all(rng), value);
 4992|     48|            },
_ZN3scn2v44impl8read_allINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 1937|    144|{
 1938|    144|    return ranges::next(range.begin(), range.end());
 1939|    144|}
_ZNK3scn2v46ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS1_6detail9subrange_8subrangeIS9_S9_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EESL_E4typeESL_SM_:
  312|    144|    {
  313|    144|        ranges::advance(x, bound);
  314|    144|        return x;
  315|    144|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EEvE4typeERSL_SM_:
  274|    144|    {
  275|    144|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|    144|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEvRT_T0_NS0_6detail12priority_tagILm0EEE:
  202|    144|    {
  203|  2.77k|        while (i != bound) {
  ------------------
  |  Branch (203:16): [True: 2.63k, False: 144]
  ------------------
  204|  2.63k|            ++i;
  205|  2.63k|        }
  206|    144|    }
_ZN3scn2v44impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5088|    306|    {
 5089|    306|        auto it = read_source_impl(range, {specs});
 5090|    306|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|    306|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12, False: 294]
  |  |  ------------------
  ------------------
 5091|     12|            return unexpected(it.error());
 5092|     12|        }
 5093|       |
 5094|    294|        return read_string_impl(range, *it, value);
 5095|    306|    }
_ZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperE:
 5191|    918|    {
 5192|    918|        const bool is_inverted = helper.specs.charset_is_inverted;
 5193|    918|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5194|       |
 5195|    918|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3930|    918|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    918|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 918]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5196|       |
 5197|    918|        read_source_callback cb_wrapper{helper};
 5198|       |
 5199|    918|        if (accepts_nonascii) {
  ------------------
  |  Branch (5199:13): [True: 564, False: 354]
  ------------------
 5200|    564|            const auto cb = [&](char32_t cp) {
 5201|    564|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5202|    564|            };
 5203|       |
 5204|    564|            if (is_inverted) {
  ------------------
  |  Branch (5204:17): [True: 276, False: 288]
  ------------------
 5205|    276|                auto it = read_until_code_point(range, cb);
 5206|    276|                return check_nonempty(it, range);
 5207|    276|            }
 5208|    288|            auto it = read_while_code_point(range, cb);
 5209|    288|            return check_nonempty(it, range);
 5210|    564|        }
 5211|       |
 5212|    354|        const auto cb = [&](SourceCharT ch) {
 5213|    354|            return cb_wrapper.on_ascii_only(ch);
 5214|    354|        };
 5215|       |
 5216|    354|        if (is_inverted) {
  ------------------
  |  Branch (5216:13): [True: 180, False: 174]
  ------------------
 5217|    180|            auto it = read_until_code_unit(range, cb);
 5218|    180|            return check_nonempty(it, range);
 5219|    180|        }
 5220|    174|        auto it = read_while_code_unit(range, cb);
 5221|    174|        return check_nonempty(it, range);
 5222|    354|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|    564|        : m_fptr([](storage fn,
  743|    564|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    564|              cvref<T> obj = *get<T>(fn);
  745|    564|              if constexpr (std::is_void_v<R>) {
  746|    564|                  obj(static_cast<decltype(args)>(args)...);
  747|    564|              }
  748|    564|              else {
  749|    564|                  return obj(static_cast<decltype(args)>(args)...);
  750|    564|              }
  751|    564|          }),
  752|    564|          m_storage(std::addressof(f))
  753|    564|    {
  754|    564|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEDiE_clES15_Di:
  743|  17.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  17.3k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  17.3k|              else {
  749|  17.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  17.3k|              }
  751|  17.3k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|  17.3k|    {
  684|  17.3k|        if constexpr (std::is_const_v<T>) {
  685|  17.3k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  17.3k|    }
_ZZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlDiE_clEDi:
 5200|  17.3k|            const auto cb = [&](char32_t cp) {
 5201|  17.3k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5202|  17.3k|            };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPKSL_:
  665|    564|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    564|        {
  667|    564|        }
_ZN3scn2v44impl25character_set_reader_implIcE14check_nonemptyINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEEEEENS0_13scan_expectedIT_EERKSI_T0_:
 5227|    918|    {
 5228|    918|        if (it == range.begin()) {
  ------------------
  |  Branch (5228:13): [True: 36, False: 882]
  ------------------
 5229|     36|            return detail::unexpected_scan_error(
 5230|     36|                scan_error::invalid_scanned_value,
 5231|     36|                "No characters matched in [character set]");
 5232|     36|        }
 5233|       |
 5234|    882|        return it;
 5235|    918|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|    354|        : m_fptr([](storage fn,
  743|    354|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    354|              cvref<T> obj = *get<T>(fn);
  745|    354|              if constexpr (std::is_void_v<R>) {
  746|    354|                  obj(static_cast<decltype(args)>(args)...);
  747|    354|              }
  748|    354|              else {
  749|    354|                  return obj(static_cast<decltype(args)>(args)...);
  750|    354|              }
  751|    354|          }),
  752|    354|          m_storage(std::addressof(f))
  753|    354|    {
  754|    354|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES15_c:
  743|  7.15k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.15k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  7.15k|              else {
  749|  7.15k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.15k|              }
  751|  7.15k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  7.15k|    {
  684|  7.15k|        if constexpr (std::is_const_v<T>) {
  685|  7.15k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  7.15k|    }
_ZZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlcE_clEc:
 5212|  7.15k|        const auto cb = [&](SourceCharT ch) {
 5213|  7.15k|            return cb_wrapper.on_ascii_only(ch);
 5214|  7.15k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPKSL_:
  665|    354|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    354|        {
  667|    354|        }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4794|    294|{
 4795|    294|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    294|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    294|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 124, False: 170]
  ------------------
 4799|    124|        return detail::unexpected_scan_error(
 4800|    124|            scan_error::invalid_scanned_value,
 4801|    124|            "Invalid encoding in scanned string");
 4802|    124|    }
 4803|       |
 4804|    170|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    170|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    170|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 170]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|    170|    return SCN_MOVE(result);
  ------------------
  |  |  934|    170|    static_cast<    \
  |  |  935|    170|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    170|}
_ZN3scn2v44impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4931|     92|    {
 4932|     92|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3940|     92|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     92|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     92|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     92|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 92, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     92|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     92|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     92|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     92|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     92|    }                                                  \
  |  |  |  | 3939|     92|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4933|      0|        return read_string_impl(range, it, value);
 4934|     92|    }
_ZN3scn2v44impl24regex_string_reader_implIcE4implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsE:
 4953|    276|    {
 4954|       |        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 4955|       |                      !std::is_same_v<SourceCharT, char>) {
 4956|       |            return detail::unexpected_scan_error(
 4957|       |                scan_error::invalid_format_string,
 4958|       |                "Regex backend doesn't support wide strings as input");
 4959|       |        }
 4960|    276|        else {
 4961|    276|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4961:17): [True: 276, False: 0]
  ------------------
 4962|    276|                return detail::unexpected_scan_error(
 4963|    276|                    scan_error::invalid_format_string,
 4964|    276|                    "Cannot use regex with a non-contiguous source "
 4965|    276|                    "range");
 4966|    276|            }
 4967|       |
 4968|      0|            auto input = get_as_contiguous(range);
 4969|      0|            SCN_TRY(it,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4970|      0|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4971|      0|            return ranges::next(range.begin(),
 4972|      0|                                ranges::distance(input.begin(), it));
 4973|      0|        }
 4974|    276|    }
_ZN3scn2v44impl27is_entire_source_contiguousINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEbT_:
  959|    276|{
  960|       |    if constexpr (ranges::contiguous_range<Range> &&
  961|       |                  ranges::sized_range<Range>) {
  962|       |        return true;
  963|       |    }
  964|       |    else if constexpr (std::is_same_v<
  965|       |                           ranges::const_iterator_t<Range>,
  966|       |                           typename detail::basic_scan_buffer<
  967|       |                               detail::char_t<Range>>::forward_iterator>) {
  968|       |        auto beg = r.begin();
  969|       |        if (!beg.stores_parent()) {
  970|       |            return true;
  971|       |        }
  972|       |        return beg.parent()->is_contiguous();
  973|       |    }
  974|    276|    else {
  975|    276|        return false;
  976|    276|    }
  977|    276|}
_ZN3scn2v44impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5313|  1.40k|    {
 5314|  1.40k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  1.40k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|  1.40k|        return read_impl(range, specs, value);
 5316|  1.40k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5331|  1.40k|    {
 5332|  1.40k|        SCN_CLANG_PUSH
 5333|  1.40k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|  1.40k|        switch (m_type) {
 5336|    314|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 314, False: 1.08k]
  ------------------
 5337|    314|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|     56|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 56, False: 1.34k]
  ------------------
 5340|     56|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|     56|                                                                   value);
 5342|       |
 5343|      0|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 0, False: 1.40k]
  ------------------
 5344|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|    904|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 904, False: 496]
  ------------------
 5347|    904|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|    904|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|     38|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 38, False: 1.36k]
  ------------------
 5352|     38|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|     38|                    range, specs.charset_string<SourceCharT>(),
 5354|     38|                    specs.regexp_flags, value);
 5355|       |
 5356|     88|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 88, False: 1.31k]
  ------------------
 5357|     88|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|     88|                    range,
 5359|     88|                    get_unescaped_regex_pattern(
 5360|     88|                        specs.charset_string<SourceCharT>()),
 5361|     88|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 1.40k]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|  1.40k|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|  1.40k|        }
 5368|       |
 5369|  1.40k|        SCN_CLANG_POP
 5370|  1.40k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4860|    946|    {
 4861|    946|        return read_string_impl(range, read_until_classic_space(range), value);
 4862|    946|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4794|  1.00k|{
 4795|  1.00k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|  1.00k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|  1.00k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 328, False: 674]
  ------------------
 4799|    328|        return detail::unexpected_scan_error(
 4800|    328|            scan_error::invalid_scanned_value,
 4801|    328|            "Invalid encoding in scanned string");
 4802|    328|    }
 4803|       |
 4804|    674|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    674|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    674|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 674]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|    674|    return SCN_MOVE(result);
  ------------------
  |  |  934|    674|    static_cast<    \
  |  |  935|    674|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    674|}
_ZN3scn2v44impl22transcode_if_necessaryIccEENS0_13scan_expectedIvEENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 3127|  1.22k|{
 3128|  1.22k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3129|  1.22k|        dest.assign(source.view());
 3130|       |    }
 3131|       |    else {
 3132|       |        return transcode_impl(source.view(), dest);
 3133|       |    }
 3134|       |
 3135|  1.22k|    return {};
 3136|  1.22k|}
_ZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2186|  2.83k|{
 2187|       |    if constexpr (ranges::contiguous_range<Range> &&
 2188|       |                  ranges::sized_range<Range> &&
 2189|  2.83k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2190|  2.83k|        auto buf = make_contiguous_buffer(range);
 2191|  2.83k|        auto it = find_classic_space_narrow_fast(buf.view());
 2192|  2.83k|        return ranges::next(range.begin(),
 2193|  2.83k|                            ranges::distance(buf.view().begin(), it));
 2194|       |    }
 2195|       |    else {
 2196|       |        auto it = range.begin();
 2197|       |
 2198|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|       |            auto seg = get_contiguous_beginning(range);
 2200|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2201|       |                seg_it != seg.end()) {
 2202|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2203|       |            }
 2204|       |            ranges::advance(it, seg.size());
 2205|       |        }
 2206|       |
 2207|       |        return read_until_code_point(
 2208|       |            ranges::subrange{it, range.end()},
 2209|       |            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2210|       |    }
 2211|  2.83k|}
_ZN3scn2v44impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4881|     56|    {
 4882|     56|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4882:13): [True: 30, False: 26]
  ------------------
 4883|     30|            return read_string_impl(
 4884|     30|                range,
 4885|     30|                read_until_code_unit(
 4886|     30|                    range,
 4887|     30|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4888|     30|                        SourceCharT ch) { return ch == until; }),
 4889|     30|                value);
 4890|     30|        }
 4891|     26|        return read_string_impl(
 4892|     26|            range,
 4893|     26|            read_until_code_units(
 4894|     26|                range, specs.fill.template get_code_units<SourceCharT>()),
 4895|     26|            value);
 4896|     56|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     30|        : m_fptr([](storage fn,
  743|     30|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     30|              cvref<T> obj = *get<T>(fn);
  745|     30|              if constexpr (std::is_void_v<R>) {
  746|     30|                  obj(static_cast<decltype(args)>(args)...);
  747|     30|              }
  748|     30|              else {
  749|     30|                  return obj(static_cast<decltype(args)>(args)...);
  750|     30|              }
  751|     30|          }),
  752|     30|          m_storage(std::addressof(f))
  753|     30|    {
  754|     30|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES1B_c:
  743|    698|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    698|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    698|              else {
  749|    698|                  return obj(static_cast<decltype(args)>(args)...);
  750|    698|              }
  751|    698|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    698|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    698|        else if constexpr (std::is_object_v<T>) {
  688|    698|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    698|    }
_ZZN3scn2v44impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlcE_clEc:
 4888|    698|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     30|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     30|        {
  662|     30|        }
_ZN3scn2v44impl21read_until_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEESG_RKT0_:
 2105|     78|{
 2106|     78|    static_assert(ranges::common_range<CodeUnits>);
 2107|       |
 2108|     78|    if constexpr (ranges::common_range<Range>) {
 2109|     78|        return std::search(range.begin(), range.end(), needle.begin(),
 2110|     78|                           needle.end());
 2111|       |    }
 2112|       |    else {
 2113|       |        auto first = range.begin();
 2114|       |        while (true) {
 2115|       |            auto it = first;
 2116|       |            for (auto needle_it = needle.begin();; ++it, (void)++needle_it) {
 2117|       |                if (needle_it == needle.end()) {
 2118|       |                    return first;
 2119|       |                }
 2120|       |                if (it == range.end()) {
 2121|       |                    return it;
 2122|       |                }
 2123|       |                if (*it != *needle_it) {
 2124|       |                    break;
 2125|       |                }
 2126|       |            }
 2127|       |            ++first;
 2128|       |        }
 2129|       |    }
 2130|     78|}
_ZN3scn2v44impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5088|    904|    {
 5089|    904|        auto it = read_source_impl(range, {specs});
 5090|    904|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|    904|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 340, False: 564]
  |  |  ------------------
  ------------------
 5091|    340|            return unexpected(it.error());
 5092|    340|        }
 5093|       |
 5094|    564|        return read_string_impl(range, *it, value);
 5095|    904|    }
_ZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5191|  2.71k|    {
 5192|  2.71k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5193|  2.71k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5194|       |
 5195|  2.71k|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3930|  2.71k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 2.71k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5196|       |
 5197|  2.71k|        read_source_callback cb_wrapper{helper};
 5198|       |
 5199|  2.71k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5199:13): [True: 2.46k, False: 252]
  ------------------
 5200|  2.46k|            const auto cb = [&](char32_t cp) {
 5201|  2.46k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5202|  2.46k|            };
 5203|       |
 5204|  2.46k|            if (is_inverted) {
  ------------------
  |  Branch (5204:17): [True: 204, False: 2.25k]
  ------------------
 5205|    204|                auto it = read_until_code_point(range, cb);
 5206|    204|                return check_nonempty(it, range);
 5207|    204|            }
 5208|  2.25k|            auto it = read_while_code_point(range, cb);
 5209|  2.25k|            return check_nonempty(it, range);
 5210|  2.46k|        }
 5211|       |
 5212|    252|        const auto cb = [&](SourceCharT ch) {
 5213|    252|            return cb_wrapper.on_ascii_only(ch);
 5214|    252|        };
 5215|       |
 5216|    252|        if (is_inverted) {
  ------------------
  |  Branch (5216:13): [True: 114, False: 138]
  ------------------
 5217|    114|            auto it = read_until_code_unit(range, cb);
 5218|    114|            return check_nonempty(it, range);
 5219|    114|        }
 5220|    138|        auto it = read_while_code_unit(range, cb);
 5221|    138|        return check_nonempty(it, range);
 5222|    252|    }
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2159|  2.46k|{
 2160|  2.46k|    auto it = range.begin();
 2161|   304k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 304k, False: 168]
  ------------------
 2162|   304k|        const auto val =
 2163|   304k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|   304k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|   304k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 303k, False: 1.21k]
  |  |  ------------------
  ------------------
 2165|   303k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|   303k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|   303k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 2.29k, False: 300k]
  ------------------
 2168|  2.29k|                return it;
 2169|  2.29k|            }
 2170|   303k|        }
 2171|   301k|        it = val.iterator;
 2172|   301k|    }
 2173|       |
 2174|    168|    return it;
 2175|  2.46k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1997|   304k|{
 1998|   304k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|   304k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   304k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|   304k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|   304k|    auto it = range.begin();
 2002|   304k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|   304k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|   304k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.21k, False: 303k]
  |  |  ------------------
  ------------------
 2005|  1.21k|        ++it;
 2006|  1.21k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|  1.21k|        return {it, {}};
 2008|  1.21k|    }
 2009|       |
 2010|   303k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 258k, False: 44.4k]
  ------------------
 2011|   258k|        ++it;
 2012|   258k|        return {it, string_type(1, *range.begin())};
 2013|   258k|    }
 2014|       |
 2015|  44.4k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|  44.4k|    return {it, string_type{range.begin(), it}};
 2017|   303k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1264|  1.21k|{
 1265|  1.21k|    auto it = input.begin();
 1266|  1.72k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 1.66k, False: 60]
  ------------------
 1267|  1.66k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 1.15k, False: 510]
  ------------------
 1268|  1.15k|            break;
 1269|  1.15k|        }
 1270|  1.66k|    }
 1271|  1.21k|    return it;
 1272|  1.21k|}
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeERSA_SE_SB_:
  282|  44.4k|    {
  283|  44.4k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  44.4k|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeERSB_SE_SA_:
  211|  44.4k|    {
  212|  44.4k|        if (fn::abs(n) >= fn::abs(bound - i)) {
  ------------------
  |  Branch (212:13): [True: 66, False: 44.4k]
  ------------------
  213|     66|            auto dist = bound - i;
  214|     66|            fn::impl_i_s(i, bound, priority_tag<2>{});
  215|     66|            return dist;
  216|     66|        }
  217|  44.4k|        fn::impl_i_n(i, n, priority_tag<1>{});
  218|  44.4k|        return n;
  219|  44.4k|    }
_ZN3scn2v46ranges6detail8advance_2fn3absIlEET_S6_:
  131|  88.9k|    {
  132|  88.9k|        if (t < T{0}) {
  ------------------
  |  Branch (132:13): [True: 0, False: 88.9k]
  ------------------
  133|      0|            return -t;
  134|      0|        }
  135|  88.9k|        return t;
  136|  88.9k|    }
_ZNK3scn2v44impl27read_code_point_into_resultIPKccE8is_validEv:
 1988|   304k|    {
 1989|   304k|        return !codepoint.empty();
 1990|   304k|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|  2.46k|        : m_fptr([](storage fn,
  743|  2.46k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.46k|              cvref<T> obj = *get<T>(fn);
  745|  2.46k|              if constexpr (std::is_void_v<R>) {
  746|  2.46k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.46k|              }
  748|  2.46k|              else {
  749|  2.46k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.46k|              }
  751|  2.46k|          }),
  752|  2.46k|          m_storage(std::addressof(f))
  753|  2.46k|    {
  754|  2.46k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clES13_Di:
  743|   303k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   303k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   303k|              else {
  749|   303k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   303k|              }
  751|   303k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|   303k|    {
  684|   303k|        if constexpr (std::is_const_v<T>) {
  685|   303k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   303k|    }
_ZZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlDiE_clEDi:
 5200|   303k|            const auto cb = [&](char32_t cp) {
 5201|   303k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5202|   303k|            };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|  2.46k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  2.46k|        {
  667|  2.46k|        }
_ZN3scn2v44impl25character_set_reader_implIcE14check_nonemptyIPKcNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5227|  2.71k|    {
 5228|  2.71k|        if (it == range.begin()) {
  ------------------
  |  Branch (5228:13): [True: 1.02k, False: 1.69k]
  ------------------
 5229|  1.02k|            return detail::unexpected_scan_error(
 5230|  1.02k|                scan_error::invalid_scanned_value,
 5231|  1.02k|                "No characters matched in [character set]");
 5232|  1.02k|        }
 5233|       |
 5234|  1.69k|        return it;
 5235|  2.71k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2180|  2.25k|{
 2181|  2.25k|    return read_until_code_point(range, std::not_fn(pred));
 2182|  2.25k|}
_ZN3scn2v44impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|    252|        : m_fptr([](storage fn,
  743|    252|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    252|              cvref<T> obj = *get<T>(fn);
  745|    252|              if constexpr (std::is_void_v<R>) {
  746|    252|                  obj(static_cast<decltype(args)>(args)...);
  747|    252|              }
  748|    252|              else {
  749|    252|                  return obj(static_cast<decltype(args)>(args)...);
  750|    252|              }
  751|    252|          }),
  752|    252|          m_storage(std::addressof(f))
  753|    252|    {
  754|    252|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  3.36k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.36k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  3.36k|              else {
  749|  3.36k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.36k|              }
  751|  3.36k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  3.36k|    {
  684|  3.36k|        if constexpr (std::is_const_v<T>) {
  685|  3.36k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  3.36k|    }
_ZZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlcE_clEc:
 5212|  3.36k|        const auto cb = [&](SourceCharT ch) {
 5213|  3.36k|            return cb_wrapper.on_ascii_only(ch);
 5214|  3.36k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|    252|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    252|        {
  667|    252|        }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4794|    598|{
 4795|    598|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    598|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    598|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 52, False: 546]
  ------------------
 4799|     52|        return detail::unexpected_scan_error(
 4800|     52|            scan_error::invalid_scanned_value,
 4801|     52|            "Invalid encoding in scanned string");
 4802|     52|    }
 4803|       |
 4804|    546|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    546|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    546|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 546]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|    546|    return SCN_MOVE(result);
  ------------------
  |  |  934|    546|    static_cast<    \
  |  |  935|    546|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    546|}
_ZN3scn2v44impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4931|    126|    {
 4932|    126|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3940|    126|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    126|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    126|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    126|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 92, False: 34]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     92|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     92|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     92|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     92|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     92|    }                                                  \
  |  |  |  | 3939|    126|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     34|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4933|     34|        return read_string_impl(range, it, value);
 4934|    126|    }
_ZN3scn2v44impl24regex_string_reader_implIcE4implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsE:
 4953|    378|    {
 4954|       |        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 4955|       |                      !std::is_same_v<SourceCharT, char>) {
 4956|       |            return detail::unexpected_scan_error(
 4957|       |                scan_error::invalid_format_string,
 4958|       |                "Regex backend doesn't support wide strings as input");
 4959|       |        }
 4960|    378|        else {
 4961|    378|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4961:17): [True: 0, False: 378]
  ------------------
 4962|      0|                return detail::unexpected_scan_error(
 4963|      0|                    scan_error::invalid_format_string,
 4964|      0|                    "Cannot use regex with a non-contiguous source "
 4965|      0|                    "range");
 4966|      0|            }
 4967|       |
 4968|    378|            auto input = get_as_contiguous(range);
 4969|    378|            SCN_TRY(it,
  ------------------
  |  | 3940|    378|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    378|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    378|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    378|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 276, False: 102]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    276|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    276|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    276|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    276|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    276|    }                                                  \
  |  |  |  | 3939|    378|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    102|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4970|    102|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4971|    102|            return ranges::next(range.begin(),
 4972|    102|                                ranges::distance(input.begin(), it));
 4973|    378|        }
 4974|    378|    }
_ZN3scn2v44impl27is_entire_source_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  959|    378|{
  960|       |    if constexpr (ranges::contiguous_range<Range> &&
  961|    378|                  ranges::sized_range<Range>) {
  962|    378|        return true;
  963|       |    }
  964|       |    else if constexpr (std::is_same_v<
  965|       |                           ranges::const_iterator_t<Range>,
  966|       |                           typename detail::basic_scan_buffer<
  967|       |                               detail::char_t<Range>>::forward_iterator>) {
  968|       |        auto beg = r.begin();
  969|       |        if (!beg.stores_parent()) {
  970|       |            return true;
  971|       |        }
  972|       |        return beg.parent()->is_contiguous();
  973|       |    }
  974|       |    else {
  975|       |        return false;
  976|       |    }
  977|    378|}
_ZN3scn2v44impl17get_as_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaT_:
 1065|    378|{
 1066|    378|    SCN_EXPECT(is_segment_contiguous(r));
  ------------------
  |  |  930|    378|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    378|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1067|       |
 1068|       |    if constexpr (ranges::contiguous_range<Range> &&
 1069|    378|                  ranges::sized_range<Range>) {
 1070|    378|        return r;
 1071|       |    }
 1072|       |    else if constexpr (std::is_same_v<
 1073|       |                           ranges::const_iterator_t<Range>,
 1074|       |                           typename detail::basic_scan_buffer<
 1075|       |                               detail::char_t<Range>>::forward_iterator>) {
 1076|       |        if constexpr (ranges::common_range<Range>) {
 1077|       |            return detail::make_string_view_from_pointers(
 1078|       |                r.begin().to_contiguous_segment_iterator(),
 1079|       |                r.end().to_contiguous_segment_iterator());
 1080|       |        }
 1081|       |        else {
 1082|       |            return r.begin().contiguous_segment();
 1083|       |        }
 1084|       |    }
 1085|       |    else {
 1086|       |        SCN_EXPECT(false);
 1087|       |        SCN_UNREACHABLE;
 1088|       |        // for return type deduction
 1089|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1090|       |    }
 1091|    378|}
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  981|    378|{
  982|       |    if constexpr (ranges::contiguous_range<Range> &&
  983|    378|                  ranges::sized_range<Range>) {
  984|    378|        return true;
  985|       |    }
  986|       |    else if constexpr (std::is_same_v<
  987|       |                           ranges::const_iterator_t<Range>,
  988|       |                           typename detail::basic_scan_buffer<
  989|       |                               detail::char_t<Range>>::forward_iterator>) {
  990|       |        auto beg = r.begin();
  991|       |        if (beg.contiguous_segment().empty()) {
  992|       |            return false;
  993|       |        }
  994|       |        if constexpr (ranges::common_range<Range>) {
  995|       |            return beg.contiguous_segment().end() ==
  996|       |                   ranges::end(r).contiguous_segment().end();
  997|       |        }
  998|       |        else {
  999|       |            if (beg.stores_parent()) {
 1000|       |                return beg.contiguous_segment().end() ==
 1001|       |                       beg.parent()->current_view().end();
 1002|       |            }
 1003|       |            return true;
 1004|       |        }
 1005|       |    }
 1006|       |    else {
 1007|       |        return false;
 1008|       |    }
 1009|    378|}
_ZN3scn2v44impl22read_regex_string_implIcNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT0_EEEEEENSt3__117basic_string_viewIT_NSF_11char_traitsISH_EEEENS0_6detail11regex_flagsESB_:
 4378|    378|{
 4379|    378|    static_assert(ranges::contiguous_range<Input> &&
 4380|    378|                  ranges::borrowed_range<Input> &&
 4381|    378|                  std::is_same_v<ranges::range_value_t<Input>, CharT>);
 4382|       |
 4383|       |#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 4384|       |    std::basic_regex<CharT> re{};
 4385|       |    try {
 4386|       |        SCN_TRY(re_flags, make_regex_flags(flags));
 4387|       |        re = std::basic_regex<CharT>{pattern.data(), pattern.size(),
 4388|       |                                     re_flags | std::regex_constants::nosubs};
 4389|       |    }
 4390|       |    catch (const std::regex_error& err) {
 4391|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4392|       |                                             "Invalid regex");
 4393|       |    }
 4394|       |
 4395|       |    std::match_results<const CharT*> matches{};
 4396|       |    try {
 4397|       |        bool found = std::regex_search(input.data(),
 4398|       |                                       input.data() + input.size(), matches, re,
 4399|       |                                       std::regex_constants::match_continuous);
 4400|       |        if (!found || matches.prefix().matched) {
 4401|       |            return detail::unexpected_scan_error(
 4402|       |                scan_error::invalid_scanned_value,
 4403|       |                "Regular expression didn't match");
 4404|       |        }
 4405|       |    }
 4406|       |    catch (const std::regex_error& err) {
 4407|       |        return detail::unexpected_scan_error(
 4408|       |            scan_error::invalid_format_string,
 4409|       |            "Regex matching failed with an error");
 4410|       |    }
 4411|       |
 4412|       |    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4413|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_BOOST
 4414|       |    auto re =
 4415|       |#if SCN_REGEX_BOOST_USE_ICU
 4416|       |        boost::make_u32regex(pattern.data(), pattern.data() + pattern.size(),
 4417|       |                             make_regex_flags(flags) |
 4418|       |                                 boost::regex_constants::no_except |
 4419|       |                                 boost::regex_constants::nosubs);
 4420|       |#else
 4421|       |        boost::basic_regex<CharT>{pattern.data(), pattern.size(),
 4422|       |                                  make_regex_flags(flags) |
 4423|       |                                      boost::regex_constants::no_except |
 4424|       |                                      boost::regex_constants::nosubs};
 4425|       |#endif
 4426|       |    if (re.status() != 0) {
 4427|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4428|       |                                             "Invalid regex");
 4429|       |    }
 4430|       |
 4431|       |    boost::match_results<const CharT*> matches{};
 4432|       |    try {
 4433|       |        bool found =
 4434|       |#if SCN_REGEX_BOOST_USE_ICU
 4435|       |            boost::u32regex_search(input.data(), input.data() + input.size(),
 4436|       |                                   matches, re,
 4437|       |                                   boost::regex_constants::match_continuous);
 4438|       |#else
 4439|       |            boost::regex_search(input.data(), input.data() + input.size(),
 4440|       |                                matches, re,
 4441|       |                                boost::regex_constants::match_continuous);
 4442|       |#endif
 4443|       |        if (!found || matches.prefix().matched) {
 4444|       |            return detail::unexpected_scan_error(
 4445|       |                scan_error::invalid_scanned_value,
 4446|       |                "Regular expression didn't match");
 4447|       |        }
 4448|       |    }
 4449|       |    catch (const std::runtime_error& err) {
 4450|       |        return detail::unexpected_scan_error(
 4451|       |            scan_error::invalid_format_string,
 4452|       |            "Regex matching failed with an error");
 4453|       |    }
 4454|       |
 4455|       |    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4456|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_RE2
 4457|       |    static_assert(std::is_same_v<CharT, char>);
 4458|    378|    std::string flagged_pattern{};
 4459|    378|    auto re = [&]() {
 4460|    378|        auto [opts, flagstr] = make_regex_flags(flags);
 4461|    378|        opts.set_never_capture(true);
 4462|    378|        if (flagstr.empty()) {
 4463|    378|            return re2::RE2{pattern, opts};
 4464|    378|        }
 4465|    378|        flagged_pattern.reserve(flagstr.size() + pattern.size());
 4466|    378|        flagged_pattern.append(flagstr);
 4467|    378|        flagged_pattern.append(pattern);
 4468|    378|        return re2::RE2{flagged_pattern, opts};
 4469|    378|    }();
 4470|    378|    if (!re.ok()) {
  ------------------
  |  Branch (4470:9): [True: 126, False: 252]
  ------------------
 4471|    126|        return detail::unexpected_scan_error(
 4472|    126|            scan_error::invalid_format_string,
 4473|    126|            "Failed to parse regular expression");
 4474|    126|    }
 4475|       |
 4476|    252|    auto new_input = detail::make_string_view_from_pointers(
 4477|    252|        detail::to_address(input.begin()), detail::to_address(input.end()));
 4478|    252|    bool found = re2::RE2::Consume(&new_input, re);
 4479|    252|    if (!found) {
  ------------------
  |  Branch (4479:9): [True: 150, False: 102]
  ------------------
 4480|    150|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 4481|    150|                                             "Regular expression didn't match");
 4482|    150|    }
 4483|    102|    return input.begin() + ranges::distance(input.data(), new_input.data());
 4484|    252|#endif  // SCN_REGEX_BACKEND == ...
 4485|    252|}
_ZZN3scn2v44impl22read_regex_string_implIcNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT0_EEEEEENSt3__117basic_string_viewIT_NSF_11char_traitsISH_EEEENS0_6detail11regex_flagsESB_ENKUlvE_clEv:
 4459|    378|    auto re = [&]() {
 4460|    378|        auto [opts, flagstr] = make_regex_flags(flags);
 4461|    378|        opts.set_never_capture(true);
 4462|    378|        if (flagstr.empty()) {
  ------------------
  |  Branch (4462:13): [True: 18, False: 360]
  ------------------
 4463|     18|            return re2::RE2{pattern, opts};
 4464|     18|        }
 4465|    360|        flagged_pattern.reserve(flagstr.size() + pattern.size());
 4466|    360|        flagged_pattern.append(flagstr);
 4467|    360|        flagged_pattern.append(pattern);
 4468|    360|        return re2::RE2{flagged_pattern, opts};
 4469|    378|    }();
_ZN3scn2v44impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEcEEDav:
 5848|  3.03k|{
 5849|       |    if constexpr (std::is_same_v<T, bool>) {
 5850|       |        return reader_impl_for_bool<CharT>{};
 5851|       |    }
 5852|       |    else if constexpr (std::is_same_v<T, char>) {
 5853|       |        return reader_impl_for_char<CharT>{};
 5854|       |    }
 5855|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5856|       |        return reader_impl_for_wchar<CharT>{};
 5857|       |    }
 5858|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5859|       |        return reader_impl_for_code_point<CharT>{};
 5860|       |    }
 5861|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5862|       |                       std::is_same_v<T, std::wstring_view>) {
 5863|       |        return reader_impl_for_string<CharT>{};
 5864|       |    }
 5865|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5866|  3.03k|                       std::is_same_v<T, std::wstring>) {
 5867|  3.03k|        return reader_impl_for_string<CharT>{};
 5868|       |    }
 5869|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5870|       |                       std::is_same_v<T, wregex_matches>) {
 5871|       |        return reader_impl_for_regex_matches<CharT>{};
 5872|       |    }
 5873|       |    else if constexpr (std::is_same_v<T, void*>) {
 5874|       |        return reader_impl_for_voidptr<CharT>{};
 5875|       |    }
 5876|       |    else if constexpr (std::is_floating_point_v<T>) {
 5877|       |        return reader_impl_for_float<CharT>{};
 5878|       |    }
 5879|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5880|       |                       !std::is_same_v<T, wchar_t> &&
 5881|       |                       !std::is_same_v<T, char32_t> &&
 5882|       |                       !std::is_same_v<T, bool>) {
 5883|       |        return reader_impl_for_int<CharT>{};
 5884|       |    }
 5885|       |    else {
 5886|       |        return reader_impl_for_monostate<CharT>{};
 5887|       |    }
 5888|  3.03k|}
_ZN3scn2v44impl22transcode_if_necessaryIcwEENS0_13scan_expectedIvEEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS9_11char_traitsISB_EENS9_9allocatorISB_EEEE:
 3107|    418|{
 3108|       |    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3109|       |        if (source.stores_allocated_string()) {
 3110|       |            dest.assign(SCN_MOVE(source.get_allocated_string()));
 3111|       |        }
 3112|       |        else {
 3113|       |            dest.assign(source.view());
 3114|       |        }
 3115|       |    }
 3116|    418|    else {
 3117|    418|        return transcode_impl(source.view(), dest);
 3118|    418|    }
 3119|       |
 3120|      0|    return {};
 3121|    418|}
_ZN3scn2v44impl14transcode_implIcwEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEERNS5_12basic_stringIT0_NS8_ISC_EENS5_9allocatorISC_EEEE:
 3082|  1.63k|{
 3083|  1.63k|    dst.clear();
 3084|  1.63k|    transcode_valid_to_string(src, dst);
 3085|  1.63k|    return {};
 3086|  1.63k|}
_ZN3scn2v44impl25transcode_valid_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1501|  1.63k|{
 1502|  1.63k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1503|       |
 1504|  1.63k|    SCN_EXPECT(validate_unicode(src));
  ------------------
  |  |  930|  1.63k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.63k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1505|  1.63k|    if constexpr (sizeof(SourceCharT) == 1) {
 1506|       |        if constexpr (sizeof(DestCharT) == 2) {
 1507|       |            // TODO: Optimize, remove utf32-step, go direct utf8->utf16
 1508|       |            std::u32string tmp;
 1509|       |            transcode_valid_to_string_impl_to32(src, tmp);
 1510|       |            return transcode_to_string_impl_32to16<true>(
 1511|       |                std::u32string_view{tmp}, dest);
 1512|       |        }
 1513|  1.63k|        else if constexpr (sizeof(DestCharT) == 4) {
 1514|  1.63k|            return transcode_valid_to_string_impl_to32(src, dest);
 1515|  1.63k|        }
 1516|       |    }
 1517|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1518|       |        if constexpr (sizeof(DestCharT) == 1) {
 1519|       |            std::u32string tmp;
 1520|       |            transcode_valid_to_string_impl_to32(src, tmp);
 1521|       |            return transcode_to_string_impl_32to8<true>(
 1522|       |                std::u32string_view{tmp}, dest);
 1523|       |        }
 1524|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1525|       |            return trasncode_valid_to_string_impl_to32(src, dest);
 1526|       |        }
 1527|       |    }
 1528|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1529|       |        if constexpr (sizeof(DestCharT) == 1) {
 1530|       |            return transcode_to_string_impl_32to8<true>(src, dest);
 1531|       |        }
 1532|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1533|       |            return transcode_to_string_impl_32to16<true>(src, dest);
 1534|       |        }
 1535|       |    }
 1536|       |
 1537|  1.63k|    SCN_EXPECT(false);
  ------------------
  |  |  930|  1.63k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.63k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1538|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1539|  1.63k|}
_ZN3scn2v44impl35transcode_valid_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1375|  1.63k|{
 1376|  1.63k|    static_assert(sizeof(DestCharT) == 4);
 1377|       |
 1378|  1.63k|    auto it = src.begin();
 1379|   115k|    while (it != src.end()) {
  ------------------
  |  Branch (1379:12): [True: 113k, False: 1.63k]
  ------------------
 1380|   113k|        auto res = get_next_code_point_valid(
 1381|   113k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1382|   113k|                                                                 src.end()));
 1383|   113k|        SCN_EXPECT(res.value < detail::invalid_code_point);
  ------------------
  |  |  930|   113k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   113k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1384|   113k|        dest.push_back(res.value);
 1385|   113k|        it = detail::make_string_view_iterator(src, res.iterator);
 1386|   113k|    }
 1387|  1.63k|}
_ZN3scn2v44impl25get_next_code_point_validIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1298|   113k|{
 1299|   113k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  930|   113k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   113k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1300|       |
 1301|   113k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1302|   113k|    SCN_EXPECT(len <= input.size());
  ------------------
  |  |  930|   113k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   113k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1303|       |
 1304|   113k|    return {input.begin() + len,
 1305|   113k|            detail::decode_code_point_exhaustive_valid(input.substr(0, len))};
 1306|   113k|}
_ZN3scn2v44impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5313|    836|    {
 5314|    836|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    836|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|    836|        return read_impl(range, specs, value);
 5316|    836|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5331|    836|    {
 5332|    836|        SCN_CLANG_PUSH
 5333|    836|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|    836|        switch (m_type) {
 5336|    304|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 304, False: 532]
  ------------------
 5337|    304|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|     86|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 86, False: 750]
  ------------------
 5340|     86|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|     86|                                                                   value);
 5342|       |
 5343|     48|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 48, False: 788]
  ------------------
 5344|     48|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|    306|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 306, False: 530]
  ------------------
 5347|    306|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|    306|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|      2|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 2, False: 834]
  ------------------
 5352|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|      2|                    range, specs.charset_string<SourceCharT>(),
 5354|      2|                    specs.regexp_flags, value);
 5355|       |
 5356|     90|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 90, False: 746]
  ------------------
 5357|     90|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|     90|                    range,
 5359|     90|                    get_unescaped_regex_pattern(
 5360|     90|                        specs.charset_string<SourceCharT>()),
 5361|     90|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 836]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|    836|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|    836|        }
 5368|       |
 5369|    836|        SCN_CLANG_POP
 5370|    836|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4860|    304|    {
 4861|    304|        return read_string_impl(range, read_until_classic_space(range), value);
 4862|    304|    }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4794|    438|{
 4795|    438|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    438|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    438|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 190, False: 248]
  ------------------
 4799|    190|        return detail::unexpected_scan_error(
 4800|    190|            scan_error::invalid_scanned_value,
 4801|    190|            "Invalid encoding in scanned string");
 4802|    190|    }
 4803|       |
 4804|    248|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    248|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    248|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 248]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|    248|    return SCN_MOVE(result);
  ------------------
  |  |  934|    248|    static_cast<    \
  |  |  935|    248|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    248|}
_ZN3scn2v44impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4881|     86|    {
 4882|     86|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4882:13): [True: 44, False: 42]
  ------------------
 4883|     44|            return read_string_impl(
 4884|     44|                range,
 4885|     44|                read_until_code_unit(
 4886|     44|                    range,
 4887|     44|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4888|     44|                        SourceCharT ch) { return ch == until; }),
 4889|     44|                value);
 4890|     44|        }
 4891|     42|        return read_string_impl(
 4892|     42|            range,
 4893|     42|            read_until_code_units(
 4894|     42|                range, specs.fill.template get_code_units<SourceCharT>()),
 4895|     42|            value);
 4896|     86|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|     44|        : m_fptr([](storage fn,
  743|     44|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     44|              cvref<T> obj = *get<T>(fn);
  745|     44|              if constexpr (std::is_void_v<R>) {
  746|     44|                  obj(static_cast<decltype(args)>(args)...);
  747|     44|              }
  748|     44|              else {
  749|     44|                  return obj(static_cast<decltype(args)>(args)...);
  750|     44|              }
  751|     44|          }),
  752|     44|          m_storage(std::addressof(f))
  753|     44|    {
  754|     44|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES1D_c:
  743|  1.03k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.03k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.03k|              else {
  749|  1.03k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.03k|              }
  751|  1.03k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|  1.03k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.03k|        else if constexpr (std::is_object_v<T>) {
  688|  1.03k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.03k|    }
_ZZN3scn2v44impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlcE_clEc:
 4888|  1.03k|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     44|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     44|        {
  662|     44|        }
_ZN3scn2v44impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4987|     48|    {
 4988|     48|        return read_impl(
 4989|     48|            range,
 4990|     48|            [&](const auto& rng) {
 4991|     48|                return read_string_impl(rng, read_all(rng), value);
 4992|     48|            },
 4993|     48|            detail::priority_tag<1>{});
 4994|     48|    }
_ZN3scn2v44impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 5014|     48|    {
 5015|     48|        return read_cb(range);
 5016|     48|    }
_ZZN3scn2v44impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4990|     48|            [&](const auto& rng) {
 4991|     48|                return read_string_impl(rng, read_all(rng), value);
 4992|     48|            },
_ZN3scn2v44impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5088|    306|    {
 5089|    306|        auto it = read_source_impl(range, {specs});
 5090|    306|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|    306|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12, False: 294]
  |  |  ------------------
  ------------------
 5091|     12|            return unexpected(it.error());
 5092|     12|        }
 5093|       |
 5094|    294|        return read_string_impl(range, *it, value);
 5095|    306|    }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4794|    294|{
 4795|    294|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    294|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    294|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 124, False: 170]
  ------------------
 4799|    124|        return detail::unexpected_scan_error(
 4800|    124|            scan_error::invalid_scanned_value,
 4801|    124|            "Invalid encoding in scanned string");
 4802|    124|    }
 4803|       |
 4804|    170|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    170|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    170|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 170]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|    170|    return SCN_MOVE(result);
  ------------------
  |  |  934|    170|    static_cast<    \
  |  |  935|    170|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    170|}
_ZN3scn2v44impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4931|     92|    {
 4932|     92|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3940|     92|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     92|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     92|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     92|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 92, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     92|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     92|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     92|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     92|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     92|    }                                                  \
  |  |  |  | 3939|     92|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4933|      0|        return read_string_impl(range, it, value);
 4934|     92|    }
_ZN3scn2v44impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5313|  1.40k|    {
 5314|  1.40k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  1.40k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|  1.40k|        return read_impl(range, specs, value);
 5316|  1.40k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5331|  1.40k|    {
 5332|  1.40k|        SCN_CLANG_PUSH
 5333|  1.40k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|  1.40k|        switch (m_type) {
 5336|    314|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 314, False: 1.08k]
  ------------------
 5337|    314|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|     56|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 56, False: 1.34k]
  ------------------
 5340|     56|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|     56|                                                                   value);
 5342|       |
 5343|      0|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 0, False: 1.40k]
  ------------------
 5344|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|    904|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 904, False: 496]
  ------------------
 5347|    904|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|    904|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|     38|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 38, False: 1.36k]
  ------------------
 5352|     38|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|     38|                    range, specs.charset_string<SourceCharT>(),
 5354|     38|                    specs.regexp_flags, value);
 5355|       |
 5356|     88|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 88, False: 1.31k]
  ------------------
 5357|     88|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|     88|                    range,
 5359|     88|                    get_unescaped_regex_pattern(
 5360|     88|                        specs.charset_string<SourceCharT>()),
 5361|     88|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 1.40k]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|  1.40k|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|  1.40k|        }
 5368|       |
 5369|  1.40k|        SCN_CLANG_POP
 5370|  1.40k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4860|    946|    {
 4861|    946|        return read_string_impl(range, read_until_classic_space(range), value);
 4862|    946|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4794|  1.00k|{
 4795|  1.00k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|  1.00k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|  1.00k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 328, False: 674]
  ------------------
 4799|    328|        return detail::unexpected_scan_error(
 4800|    328|            scan_error::invalid_scanned_value,
 4801|    328|            "Invalid encoding in scanned string");
 4802|    328|    }
 4803|       |
 4804|    674|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    674|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    674|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 674]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|    674|    return SCN_MOVE(result);
  ------------------
  |  |  934|    674|    static_cast<    \
  |  |  935|    674|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    674|}
_ZN3scn2v44impl22transcode_if_necessaryIcwEENS0_13scan_expectedIvEENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 3127|  1.22k|{
 3128|       |    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3129|       |        dest.assign(source.view());
 3130|       |    }
 3131|  1.22k|    else {
 3132|  1.22k|        return transcode_impl(source.view(), dest);
 3133|  1.22k|    }
 3134|       |
 3135|      0|    return {};
 3136|  1.22k|}
_ZN3scn2v44impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4881|     56|    {
 4882|     56|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4882:13): [True: 30, False: 26]
  ------------------
 4883|     30|            return read_string_impl(
 4884|     30|                range,
 4885|     30|                read_until_code_unit(
 4886|     30|                    range,
 4887|     30|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4888|     30|                        SourceCharT ch) { return ch == until; }),
 4889|     30|                value);
 4890|     30|        }
 4891|     26|        return read_string_impl(
 4892|     26|            range,
 4893|     26|            read_until_code_units(
 4894|     26|                range, specs.fill.template get_code_units<SourceCharT>()),
 4895|     26|            value);
 4896|     56|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     30|        : m_fptr([](storage fn,
  743|     30|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     30|              cvref<T> obj = *get<T>(fn);
  745|     30|              if constexpr (std::is_void_v<R>) {
  746|     30|                  obj(static_cast<decltype(args)>(args)...);
  747|     30|              }
  748|     30|              else {
  749|     30|                  return obj(static_cast<decltype(args)>(args)...);
  750|     30|              }
  751|     30|          }),
  752|     30|          m_storage(std::addressof(f))
  753|     30|    {
  754|     30|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES1B_c:
  743|    698|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    698|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    698|              else {
  749|    698|                  return obj(static_cast<decltype(args)>(args)...);
  750|    698|              }
  751|    698|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    698|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    698|        else if constexpr (std::is_object_v<T>) {
  688|    698|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    698|    }
_ZZN3scn2v44impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlcE_clEc:
 4888|    698|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     30|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     30|        {
  662|     30|        }
_ZN3scn2v44impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5088|    904|    {
 5089|    904|        auto it = read_source_impl(range, {specs});
 5090|    904|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|    904|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 340, False: 564]
  |  |  ------------------
  ------------------
 5091|    340|            return unexpected(it.error());
 5092|    340|        }
 5093|       |
 5094|    564|        return read_string_impl(range, *it, value);
 5095|    904|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4794|    598|{
 4795|    598|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    598|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    598|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 52, False: 546]
  ------------------
 4799|     52|        return detail::unexpected_scan_error(
 4800|     52|            scan_error::invalid_scanned_value,
 4801|     52|            "Invalid encoding in scanned string");
 4802|     52|    }
 4803|       |
 4804|    546|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    546|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    546|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 546]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|    546|    return SCN_MOVE(result);
  ------------------
  |  |  934|    546|    static_cast<    \
  |  |  935|    546|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    546|}
_ZN3scn2v44impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4931|    126|    {
 4932|    126|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3940|    126|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    126|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    126|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    126|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 92, False: 34]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     92|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     92|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     92|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     92|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     92|    }                                                  \
  |  |  |  | 3939|    126|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     34|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4933|     34|        return read_string_impl(range, it, value);
 4934|    126|    }
_ZN3scn2v44impl11make_readerINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEEDav:
 5848|  3.03k|{
 5849|       |    if constexpr (std::is_same_v<T, bool>) {
 5850|       |        return reader_impl_for_bool<CharT>{};
 5851|       |    }
 5852|       |    else if constexpr (std::is_same_v<T, char>) {
 5853|       |        return reader_impl_for_char<CharT>{};
 5854|       |    }
 5855|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5856|       |        return reader_impl_for_wchar<CharT>{};
 5857|       |    }
 5858|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5859|       |        return reader_impl_for_code_point<CharT>{};
 5860|       |    }
 5861|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5862|  3.03k|                       std::is_same_v<T, std::wstring_view>) {
 5863|  3.03k|        return reader_impl_for_string<CharT>{};
 5864|       |    }
 5865|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5866|       |                       std::is_same_v<T, std::wstring>) {
 5867|       |        return reader_impl_for_string<CharT>{};
 5868|       |    }
 5869|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5870|       |                       std::is_same_v<T, wregex_matches>) {
 5871|       |        return reader_impl_for_regex_matches<CharT>{};
 5872|       |    }
 5873|       |    else if constexpr (std::is_same_v<T, void*>) {
 5874|       |        return reader_impl_for_voidptr<CharT>{};
 5875|       |    }
 5876|       |    else if constexpr (std::is_floating_point_v<T>) {
 5877|       |        return reader_impl_for_float<CharT>{};
 5878|       |    }
 5879|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5880|       |                       !std::is_same_v<T, wchar_t> &&
 5881|       |                       !std::is_same_v<T, char32_t> &&
 5882|       |                       !std::is_same_v<T, bool>) {
 5883|       |        return reader_impl_for_int<CharT>{};
 5884|       |    }
 5885|       |    else {
 5886|       |        return reader_impl_for_monostate<CharT>{};
 5887|       |    }
 5888|  3.03k|}
_ZN3scn2v44impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5313|    836|    {
 5314|    836|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    836|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|    836|        return read_impl(range, specs, value);
 5316|    836|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5331|    836|    {
 5332|    836|        SCN_CLANG_PUSH
 5333|    836|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|    836|        switch (m_type) {
 5336|    304|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 304, False: 532]
  ------------------
 5337|    304|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|     86|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 86, False: 750]
  ------------------
 5340|     86|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|     86|                                                                   value);
 5342|       |
 5343|     48|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 48, False: 788]
  ------------------
 5344|     48|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|    306|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 306, False: 530]
  ------------------
 5347|    306|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|    306|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|      2|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 2, False: 834]
  ------------------
 5352|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|      2|                    range, specs.charset_string<SourceCharT>(),
 5354|      2|                    specs.regexp_flags, value);
 5355|       |
 5356|     90|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 90, False: 746]
  ------------------
 5357|     90|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|     90|                    range,
 5359|     90|                    get_unescaped_regex_pattern(
 5360|     90|                        specs.charset_string<SourceCharT>()),
 5361|     90|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 836]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|    836|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|    836|        }
 5368|       |
 5369|    836|        SCN_CLANG_POP
 5370|    836|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4867|    304|    {
 4868|    304|        return read_string_view_impl(range, read_until_classic_space(range),
 4869|    304|                                     value);
 4870|    304|    }
_ZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEE:
 4813|    438|{
 4814|    438|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4815|       |
 4816|    438|    auto src = [&]() {
 4817|    438|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|    438|            return make_contiguous_buffer(
 4819|    438|                ranges::subrange{range.begin().base(), result.base()});
 4820|    438|        }
 4821|    438|        else {
 4822|    438|            return make_contiguous_buffer(
 4823|    438|                ranges::subrange{range.begin(), result});
 4824|    438|        }
 4825|    438|    }();
 4826|    438|    using src_type = decltype(src);
 4827|       |
 4828|    438|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4828:9): [Folded - Ignored]
  ------------------
 4829|      0|        return detail::unexpected_scan_error(
 4830|      0|            scan_error::invalid_format_string,
 4831|      0|            "Cannot read a string_view from this source range (not "
 4832|      0|            "contiguous)");
 4833|      0|    }
 4834|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4835|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4836|       |                                             "Cannot read a string_view from "
 4837|       |                                             "this source range (would require "
 4838|       |                                             "transcoding)");
 4839|       |    }
 4840|    438|    else {
 4841|    438|        const auto view = src.view();
 4842|    438|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4843|       |
 4844|    438|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4844:13): [True: 190, False: 248]
  ------------------
 4845|    190|            return detail::unexpected_scan_error(
 4846|    190|                scan_error::invalid_scanned_value,
 4847|    190|                "Invalid encoding in scanned string_view");
 4848|    190|        }
 4849|       |
 4850|    248|        return SCN_MOVE(result);
  ------------------
  |  |  934|    248|    static_cast<    \
  |  |  935|    248|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4851|    438|    }
 4852|    438|}
_ZZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEEENKUlvE_clEv:
 4816|    438|    auto src = [&]() {
 4817|    438|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|    438|            return make_contiguous_buffer(
 4819|    438|                ranges::subrange{range.begin().base(), result.base()});
 4820|       |        }
 4821|       |        else {
 4822|       |            return make_contiguous_buffer(
 4823|       |                ranges::subrange{range.begin(), result});
 4824|       |        }
 4825|    438|    }();
_ZN3scn2v44impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 4903|     86|    {
 4904|     86|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4904:13): [True: 44, False: 42]
  ------------------
 4905|     44|            return read_string_view_impl(
 4906|     44|                range,
 4907|     44|                read_until_code_unit(
 4908|     44|                    range,
 4909|     44|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4910|     44|                        SourceCharT ch) { return ch == until; }),
 4911|     44|                value);
 4912|     44|        }
 4913|     42|        return read_string_view_impl(
 4914|     42|            range,
 4915|     42|            read_until_code_units(
 4916|     42|                range, specs.fill.template get_code_units<SourceCharT>()),
 4917|     42|            value);
 4918|     86|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_S11_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|     44|        : m_fptr([](storage fn,
  743|     44|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     44|              cvref<T> obj = *get<T>(fn);
  745|     44|              if constexpr (std::is_void_v<R>) {
  746|     44|                  obj(static_cast<decltype(args)>(args)...);
  747|     44|              }
  748|     44|              else {
  749|     44|                  return obj(static_cast<decltype(args)>(args)...);
  750|     44|              }
  751|     44|          }),
  752|     44|          m_storage(std::addressof(f))
  753|     44|    {
  754|     44|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_S11_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES1B_c:
  743|  1.03k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.03k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.03k|              else {
  749|  1.03k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.03k|              }
  751|  1.03k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_17basic_string_viewIT0_NSI_11char_traitsISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|  1.03k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.03k|        else if constexpr (std::is_object_v<T>) {
  688|  1.03k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.03k|    }
_ZZN3scn2v44impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEEENKUlcE_clEc:
 4910|  1.03k|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     44|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     44|        {
  662|     44|        }
_ZN3scn2v44impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4999|     48|    {
 5000|     48|        return read_impl(
 5001|     48|            range,
 5002|     48|            [&](const auto& rng) {
 5003|     48|                return read_string_view_impl(rng, read_all(rng), value);
 5004|     48|            },
 5005|     48|            detail::priority_tag<1>{});
 5006|     48|    }
_ZN3scn2v44impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_17basic_string_viewIT0_NSG_11char_traitsISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSX_OSP_NS0_6detail12priority_tagILm1EEE:
 5014|     48|    {
 5015|     48|        return read_cb(range);
 5016|     48|    }
_ZZN3scn2v44impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEEENKUlRKSH_E_clISD_EEDaSU_:
 5002|     48|            [&](const auto& rng) {
 5003|     48|                return read_string_view_impl(rng, read_all(rng), value);
 5004|     48|            },
_ZN3scn2v44impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 5102|    306|    {
 5103|    306|        auto it = read_source_impl(range, {specs});
 5104|    306|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|    306|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12, False: 294]
  |  |  ------------------
  ------------------
 5105|     12|            return unexpected(it.error());
 5106|     12|        }
 5107|       |
 5108|    294|        return read_string_view_impl(range, *it, value);
 5109|    306|    }
_ZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEE:
 4813|    294|{
 4814|    294|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4815|       |
 4816|    294|    auto src = [&]() {
 4817|    294|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|    294|            return make_contiguous_buffer(
 4819|    294|                ranges::subrange{range.begin().base(), result.base()});
 4820|    294|        }
 4821|    294|        else {
 4822|    294|            return make_contiguous_buffer(
 4823|    294|                ranges::subrange{range.begin(), result});
 4824|    294|        }
 4825|    294|    }();
 4826|    294|    using src_type = decltype(src);
 4827|       |
 4828|    294|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4828:9): [Folded - Ignored]
  ------------------
 4829|      0|        return detail::unexpected_scan_error(
 4830|      0|            scan_error::invalid_format_string,
 4831|      0|            "Cannot read a string_view from this source range (not "
 4832|      0|            "contiguous)");
 4833|      0|    }
 4834|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4835|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4836|       |                                             "Cannot read a string_view from "
 4837|       |                                             "this source range (would require "
 4838|       |                                             "transcoding)");
 4839|       |    }
 4840|    294|    else {
 4841|    294|        const auto view = src.view();
 4842|    294|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4843|       |
 4844|    294|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4844:13): [True: 124, False: 170]
  ------------------
 4845|    124|            return detail::unexpected_scan_error(
 4846|    124|                scan_error::invalid_scanned_value,
 4847|    124|                "Invalid encoding in scanned string_view");
 4848|    124|        }
 4849|       |
 4850|    170|        return SCN_MOVE(result);
  ------------------
  |  |  934|    170|    static_cast<    \
  |  |  935|    170|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4851|    294|    }
 4852|    294|}
_ZZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEEENKUlvE_clEv:
 4816|    294|    auto src = [&]() {
 4817|    294|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|    294|            return make_contiguous_buffer(
 4819|    294|                ranges::subrange{range.begin().base(), result.base()});
 4820|       |        }
 4821|       |        else {
 4822|       |            return make_contiguous_buffer(
 4823|       |                ranges::subrange{range.begin(), result});
 4824|       |        }
 4825|    294|    }();
_ZN3scn2v44impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSN_IT0_NSO_IST_EEEE:
 4942|     92|    {
 4943|     92|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3940|     92|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     92|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     92|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     92|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 92, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     92|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     92|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     92|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     92|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     92|    }                                                  \
  |  |  |  | 3939|     92|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4944|      0|        return read_string_view_impl(range, it, value);
 4945|     92|    }
_ZN3scn2v44impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5313|  1.40k|    {
 5314|  1.40k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  1.40k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|  1.40k|        return read_impl(range, specs, value);
 5316|  1.40k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5331|  1.40k|    {
 5332|  1.40k|        SCN_CLANG_PUSH
 5333|  1.40k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|  1.40k|        switch (m_type) {
 5336|    314|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 314, False: 1.08k]
  ------------------
 5337|    314|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|     56|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 56, False: 1.34k]
  ------------------
 5340|     56|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|     56|                                                                   value);
 5342|       |
 5343|      0|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 0, False: 1.40k]
  ------------------
 5344|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|    904|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 904, False: 496]
  ------------------
 5347|    904|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|    904|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|     38|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 38, False: 1.36k]
  ------------------
 5352|     38|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|     38|                    range, specs.charset_string<SourceCharT>(),
 5354|     38|                    specs.regexp_flags, value);
 5355|       |
 5356|     88|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 88, False: 1.31k]
  ------------------
 5357|     88|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|     88|                    range,
 5359|     88|                    get_unescaped_regex_pattern(
 5360|     88|                        specs.charset_string<SourceCharT>()),
 5361|     88|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 1.40k]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|  1.40k|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|  1.40k|        }
 5368|       |
 5369|  1.40k|        SCN_CLANG_POP
 5370|  1.40k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4867|    946|    {
 4868|    946|        return read_string_view_impl(range, read_until_classic_space(range),
 4869|    946|                                     value);
 4870|    946|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4813|  1.00k|{
 4814|  1.00k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4815|       |
 4816|  1.00k|    auto src = [&]() {
 4817|  1.00k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|  1.00k|            return make_contiguous_buffer(
 4819|  1.00k|                ranges::subrange{range.begin().base(), result.base()});
 4820|  1.00k|        }
 4821|  1.00k|        else {
 4822|  1.00k|            return make_contiguous_buffer(
 4823|  1.00k|                ranges::subrange{range.begin(), result});
 4824|  1.00k|        }
 4825|  1.00k|    }();
 4826|  1.00k|    using src_type = decltype(src);
 4827|       |
 4828|  1.00k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4828:9): [Folded - Ignored]
  ------------------
 4829|      0|        return detail::unexpected_scan_error(
 4830|      0|            scan_error::invalid_format_string,
 4831|      0|            "Cannot read a string_view from this source range (not "
 4832|      0|            "contiguous)");
 4833|      0|    }
 4834|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4835|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4836|       |                                             "Cannot read a string_view from "
 4837|       |                                             "this source range (would require "
 4838|       |                                             "transcoding)");
 4839|       |    }
 4840|  1.00k|    else {
 4841|  1.00k|        const auto view = src.view();
 4842|  1.00k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4843|       |
 4844|  1.00k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4844:13): [True: 328, False: 674]
  ------------------
 4845|    328|            return detail::unexpected_scan_error(
 4846|    328|                scan_error::invalid_scanned_value,
 4847|    328|                "Invalid encoding in scanned string_view");
 4848|    328|        }
 4849|       |
 4850|    674|        return SCN_MOVE(result);
  ------------------
  |  |  934|    674|    static_cast<    \
  |  |  935|    674|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4851|  1.00k|    }
 4852|  1.00k|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4816|  1.00k|    auto src = [&]() {
 4817|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|       |            return make_contiguous_buffer(
 4819|       |                ranges::subrange{range.begin().base(), result.base()});
 4820|       |        }
 4821|  1.00k|        else {
 4822|  1.00k|            return make_contiguous_buffer(
 4823|  1.00k|                ranges::subrange{range.begin(), result});
 4824|  1.00k|        }
 4825|  1.00k|    }();
_ZN3scn2v44impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 4903|     56|    {
 4904|     56|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4904:13): [True: 30, False: 26]
  ------------------
 4905|     30|            return read_string_view_impl(
 4906|     30|                range,
 4907|     30|                read_until_code_unit(
 4908|     30|                    range,
 4909|     30|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4910|     30|                        SourceCharT ch) { return ch == until; }),
 4911|     30|                value);
 4912|     30|        }
 4913|     26|        return read_string_view_impl(
 4914|     26|            range,
 4915|     26|            read_until_code_units(
 4916|     26|                range, specs.fill.template get_code_units<SourceCharT>()),
 4917|     26|            value);
 4918|     56|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_SZ_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     30|        : m_fptr([](storage fn,
  743|     30|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     30|              cvref<T> obj = *get<T>(fn);
  745|     30|              if constexpr (std::is_void_v<R>) {
  746|     30|                  obj(static_cast<decltype(args)>(args)...);
  747|     30|              }
  748|     30|              else {
  749|     30|                  return obj(static_cast<decltype(args)>(args)...);
  750|     30|              }
  751|     30|          }),
  752|     30|          m_storage(std::addressof(f))
  753|     30|    {
  754|     30|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_SZ_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES19_c:
  743|    698|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    698|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    698|              else {
  749|    698|                  return obj(static_cast<decltype(args)>(args)...);
  750|    698|              }
  751|    698|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_17basic_string_viewIT0_NSG_11char_traitsIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    698|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    698|        else if constexpr (std::is_object_v<T>) {
  688|    698|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    698|    }
_ZZN3scn2v44impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEEENKUlcE_clEc:
 4910|    698|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     30|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     30|        {
  662|     30|        }
_ZN3scn2v44impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5102|    904|    {
 5103|    904|        auto it = read_source_impl(range, {specs});
 5104|    904|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|    904|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 340, False: 564]
  |  |  ------------------
  ------------------
 5105|    340|            return unexpected(it.error());
 5106|    340|        }
 5107|       |
 5108|    564|        return read_string_view_impl(range, *it, value);
 5109|    904|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4813|    598|{
 4814|    598|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4815|       |
 4816|    598|    auto src = [&]() {
 4817|    598|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|    598|            return make_contiguous_buffer(
 4819|    598|                ranges::subrange{range.begin().base(), result.base()});
 4820|    598|        }
 4821|    598|        else {
 4822|    598|            return make_contiguous_buffer(
 4823|    598|                ranges::subrange{range.begin(), result});
 4824|    598|        }
 4825|    598|    }();
 4826|    598|    using src_type = decltype(src);
 4827|       |
 4828|    598|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4828:9): [Folded - Ignored]
  ------------------
 4829|      0|        return detail::unexpected_scan_error(
 4830|      0|            scan_error::invalid_format_string,
 4831|      0|            "Cannot read a string_view from this source range (not "
 4832|      0|            "contiguous)");
 4833|      0|    }
 4834|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4835|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4836|       |                                             "Cannot read a string_view from "
 4837|       |                                             "this source range (would require "
 4838|       |                                             "transcoding)");
 4839|       |    }
 4840|    598|    else {
 4841|    598|        const auto view = src.view();
 4842|    598|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4843|       |
 4844|    598|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4844:13): [True: 52, False: 546]
  ------------------
 4845|     52|            return detail::unexpected_scan_error(
 4846|     52|                scan_error::invalid_scanned_value,
 4847|     52|                "Invalid encoding in scanned string_view");
 4848|     52|        }
 4849|       |
 4850|    546|        return SCN_MOVE(result);
  ------------------
  |  |  934|    546|    static_cast<    \
  |  |  935|    546|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4851|    598|    }
 4852|    598|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4816|    598|    auto src = [&]() {
 4817|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|       |            return make_contiguous_buffer(
 4819|       |                ranges::subrange{range.begin().base(), result.base()});
 4820|       |        }
 4821|    598|        else {
 4822|    598|            return make_contiguous_buffer(
 4823|    598|                ranges::subrange{range.begin(), result});
 4824|    598|        }
 4825|    598|    }();
_ZN3scn2v44impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSL_IT0_NSM_ISR_EEEE:
 4942|    126|    {
 4943|    126|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3940|    126|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    126|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    126|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    126|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 92, False: 34]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     92|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     92|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     92|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     92|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     92|    }                                                  \
  |  |  |  | 3939|    126|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     34|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4944|     34|        return read_string_view_impl(range, it, value);
 4945|    126|    }
_ZN3scn2v44impl16char_reader_baseIwE11check_specsERKNS0_6detail12format_specsE:
 5661|    836|    {
 5662|    836|        reader_error_handler eh{};
 5663|       |        if constexpr (std::is_same_v<ValueCharT, char32_t>) {
 5664|       |            detail::check_code_point_type_specs(specs, eh);
 5665|       |        }
 5666|    836|        else {
 5667|    836|            detail::check_char_type_specs(specs, eh);
 5668|    836|        }
 5669|    836|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|    836|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 398, False: 438]
  |  |  ------------------
  ------------------
 5670|    398|            return detail::unexpected_scan_error(
 5671|    398|                scan_error::invalid_format_string, eh.m_msg);
 5672|    398|        }
 5673|    438|        return {};
 5674|    836|    }
_ZNK3scn2v44impl12function_refIFbwES3_EclEw:
  762|  8.75k|    {
  763|  8.75k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  8.75k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  8.75k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  1.35k|        : m_fptr([](storage fn,
  743|  1.35k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.35k|              cvref<T> obj = *get<T>(fn);
  745|  1.35k|              if constexpr (std::is_void_v<R>) {
  746|  1.35k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.35k|              }
  748|  1.35k|              else {
  749|  1.35k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.35k|              }
  751|  1.35k|          }),
  752|  1.35k|          m_storage(std::addressof(f))
  753|  1.35k|    {
  754|  1.35k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEwE_clESK_w:
  743|  3.34k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.34k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  3.34k|              else {
  749|  3.34k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.34k|              }
  751|  3.34k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  3.34k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  3.34k|        else if constexpr (std::is_object_v<T>) {
  688|  3.34k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  3.34k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  1.35k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.35k|        {
  662|  1.35k|        }
_ZNK3scn2v44impl16char_reader_baseIwE19skip_ws_before_readEv:
 5656|  1.28k|    {
 5657|  1.28k|        return false;
 5658|  1.28k|    }
_ZN3scn2v44impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1878|     78|    {
 1879|     78|        auto stdloc = loc.get<std::locale>();
 1880|     78|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1881|     78|        grouping = numpunct.grouping();
 1882|     78|        thousands_sep =
 1883|     78|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1883:13): [True: 0, False: 78]
  ------------------
 1884|     78|        decimal_point = numpunct.decimal_point();
 1885|     78|    }
_ZN3scn2v44impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1815|     94|{
 1816|     94|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1816:9): [True: 94, False: 0]
  ------------------
 1817|     94|        return std::use_facet<Facet>(stdloc);
 1818|     94|    }
 1819|      0|    stdloc = std::locale(stdloc, new Facet{});
 1820|      0|    return std::use_facet<Facet>(stdloc);
 1821|     94|}
_ZN3scn2v44impl20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2448|  3.03k|{
 2449|  3.03k|    size_t count{0};
 2450|  3.03k|    for_each_code_point(input, [&count](char32_t cp) {
 2451|  3.03k|        count += calculate_text_width_for_fmt_v10(cp);
 2452|  3.03k|    });
 2453|  3.03k|    return count;
 2454|  3.03k|}
_ZN3scn2v44impl19for_each_code_pointIwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_12function_refIFvDiESA_EE:
 1544|  3.03k|{
 1545|       |    // TODO: Could be optimized by being eager
 1546|  3.03k|    auto it = input.begin();
 1547|  9.88k|    while (it != input.end()) {
  ------------------
  |  Branch (1547:12): [True: 6.84k, False: 3.03k]
  ------------------
 1548|  6.84k|        auto res = get_next_code_point(
 1549|  6.84k|            detail::make_string_view_from_iterators<CharT>(it, input.end()));
 1550|  6.84k|        cb(res.value);
 1551|  6.84k|        it = detail::make_string_view_iterator(input, res.iterator);
 1552|  6.84k|    }
 1553|  3.03k|}
_ZN3scn2v44impl19get_next_code_pointIwEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1278|  58.0k|{
 1279|  58.0k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  930|  58.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  58.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1280|       |
 1281|  58.0k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1282|  58.0k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|  58.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 58.0k]
  |  |  ------------------
  ------------------
 1283|      0|        return {get_start_for_next_code_point(input),
 1284|      0|                detail::invalid_code_point};
 1285|      0|    }
 1286|  58.0k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  865|  58.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 58.0k]
  |  |  ------------------
  ------------------
 1287|      0|        return {input.end(), detail::invalid_code_point};
 1288|      0|    }
 1289|       |
 1290|  58.0k|    return {input.begin() + len,
 1291|  58.0k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1292|  58.0k|}
_ZN3scn2v44impl12function_refIFvDiES3_EC2IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfIS9_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSF_EEvE4typeELPv0EEEOS9_:
  742|  3.03k|        : m_fptr([](storage fn,
  743|  3.03k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.03k|              cvref<T> obj = *get<T>(fn);
  745|  3.03k|              if constexpr (std::is_void_v<R>) {
  746|  3.03k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.03k|              }
  748|  3.03k|              else {
  749|  3.03k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.03k|              }
  751|  3.03k|          }),
  752|  3.03k|          m_storage(std::addressof(f))
  753|  3.03k|    {
  754|  3.03k|    }
_ZZN3scn2v44impl12function_refIFvDiES3_EC1IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfIS9_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSF_EEvE4typeELPv0EEEOS9_ENKUlNS1_12fnref_detail4base7storageEDiE_clESO_Di:
  743|  6.84k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.84k|              cvref<T> obj = *get<T>(fn);
  745|  6.84k|              if constexpr (std::is_void_v<R>) {
  746|  6.84k|                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|       |              else {
  749|       |                  return obj(static_cast<decltype(args)>(args)...);
  750|       |              }
  751|  6.84k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEUlDiE_EEDaNS3_7storageE:
  683|  6.84k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  6.84k|        else if constexpr (std::is_object_v<T>) {
  688|  6.84k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  6.84k|    }
_ZZN3scn2v44impl20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEENKUlDiE_clEDi:
 2450|  6.84k|    for_each_code_point(input, [&count](char32_t cp) {
 2451|  6.84k|        count += calculate_text_width_for_fmt_v10(cp);
 2452|  6.84k|    });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vIS9_EEvE4typeELPv0EEEPS9_:
  660|  3.03k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  3.03k|        {
  662|  3.03k|        }
_ZNK3scn2v44impl24contiguous_range_factoryIwE4viewEv:
 1680|  2.22k|    {
 1681|  2.22k|        return m_view;
 1682|  2.22k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwED2Ev:
 1670|  2.28k|    ~contiguous_range_factory() = default;
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E14multibyte_leftEv:
 2520|  2.30k|    {
 2521|  2.30k|        return m_multibyte_left;
 2522|  2.30k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E22is_current_double_wideEv:
 2525|  1.81k|    {
 2526|  1.81k|        assert(count() != 0 || multibyte_left() != 0);
 2527|  1.81k|        return _get_width_at_current_cp_start(
 2528|  1.81k|                   _get_cp_length_at_current()) == 2;
 2529|  1.81k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E30_get_width_at_current_cp_startEl:
 2753|  29.8k|    {
 2754|  29.8k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  865|  29.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 29.8k]
  |  |  ------------------
  ------------------
 2755|      0|            return 0;
 2756|      0|        }
 2757|       |
 2758|  29.8k|        if (cplen == 1) {
  ------------------
  |  Branch (2758:13): [True: 29.8k, False: 0]
  ------------------
 2759|  29.8k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  930|  29.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  29.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2760|  29.8k|            auto cp = static_cast<char32_t>(*m_current);
 2761|  29.8k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2762|  29.8k|        }
 2763|       |
 2764|      0|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2765|      0|                                           cplen);
 2766|      0|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2767|      0|            return 0;
 2768|      0|        }
 2769|       |
 2770|      0|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2771|      0|        return static_cast<difference_type>(
 2772|      0|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2773|      0|    }
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1955|  4.70k|{
 1956|  4.70k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|  4.70k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.70k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|  4.70k|    if constexpr (ranges::sized_range<Range>) {
 1959|  4.70k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|  4.70k|        if (sz < count) {
  ------------------
  |  Branch (1960:13): [True: 126, False: 4.58k]
  ------------------
 1961|    126|            return unexpected(eof_error::eof);
 1962|    126|        }
 1963|       |
 1964|  4.58k|        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|       |    else {
 1967|       |        auto it = range.begin();
 1968|       |        if (guaranteed_minimum_size(range) >= count) {
 1969|       |            return ranges::next(it, count);
 1970|       |        }
 1971|       |
 1972|       |        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1973|       |            if (it == range.end()) {
 1974|       |                return unexpected(eof_error::eof);
 1975|       |            }
 1976|       |        }
 1977|       |
 1978|       |        return it;
 1979|       |    }
 1980|  4.70k|}
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E25_get_cp_length_at_currentEv:
 2747|  29.8k|    {
 2748|  29.8k|        return static_cast<difference_type>(
 2749|  29.8k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2750|  29.8k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EdeEv:
 2532|  42.2k|    {
 2533|  42.2k|        return *m_current;
 2534|  42.2k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EppEv:
 2541|  28.0k|    {
 2542|  28.0k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  930|  28.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  28.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2543|  28.0k|        _increment_current();
 2544|  28.0k|        return *this;
 2545|  28.0k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E18_increment_currentEv:
 2776|  28.0k|    {
 2777|  28.0k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2777:13): [True: 28.0k, False: 0]
  ------------------
 2778|  28.0k|            auto cplen = _get_cp_length_at_current();
 2779|  28.0k|            m_multibyte_left = cplen - 1;
 2780|  28.0k|            m_count -= _get_width_at_current_cp_start(cplen);
 2781|  28.0k|        }
 2782|      0|        else {
 2783|      0|            --m_multibyte_left;
 2784|      0|        }
 2785|       |
 2786|  28.0k|        ++m_current;
 2787|  28.0k|    }
_ZN3scn2v44impl27counted_width_iterator_implneIPKwS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2637|  10.2k|    {
 2638|  10.2k|        return !(a == b);
 2639|  10.2k|    }
_ZN3scn2v44impl27counted_width_iterator_impleqIPKwS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2629|  11.1k|    {
 2630|  11.1k|        return a.m_current == b.m_current;
 2631|  11.1k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EdeEv:
 2536|  2.33k|    {
 2537|  2.33k|        return *m_current;
 2538|  2.33k|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EEwE8is_validEv:
 1988|  13.4k|    {
 1989|  13.4k|        return !codepoint.empty();
 1990|  13.4k|    }
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EESB_EEEEDaOT_:
 1781|    514|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|       |                  ranges::sized_range<Range>) {
 1785|       |        return string_view_wrapper{SCN_FWD(range)};
 1786|       |    }
 1787|    514|    else {
 1788|    514|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  936|    514|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1789|    514|    }
 1790|    514|}
_ZN3scn2v44impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSH_:
 1635|    514|    {
 1636|    514|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|    514|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1637|    514|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEvOT_:
 1719|    514|    {
 1720|    514|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|    514|        else {
 1753|    514|            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|    514|            if constexpr (ranges::common_range<Range>) {
 1758|    514|                std::copy(ranges::begin(range), ranges::end(range),
 1759|    514|                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|    514|            m_view = string_view_type{str};
 1768|    514|        }
 1769|    514|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EC2ES5_S5_l:
 2480|  9.15k|        : m_current(x), m_end(s), m_count(n)
 2481|  9.15k|    {
 2482|  9.15k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E4baseEv:
 2512|  40.4k|    {
 2513|  40.4k|        return m_current;
 2514|  40.4k|    }
_ZN3scn2v44impl24read_while_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2215|  1.78k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|  1.78k|    else {
 2225|  1.78k|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|  1.78k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  1.78k|            return detail::is_cp_space(cp);
 2238|  1.78k|        });
 2239|  1.78k|    }
 2240|  1.78k|}
_ZN3scn2v44impl21read_while_code_pointINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_NS1_12function_refIFbDiESG_EE:
 2180|  1.78k|{
 2181|  1.78k|    return read_until_code_point(range, std::not_fn(pred));
 2182|  1.78k|}
_ZN3scn2v44impl21read_until_code_pointINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_NS1_12function_refIFbDiESG_EE:
 2159|  1.78k|{
 2160|  1.78k|    auto it = range.begin();
 2161|  3.01k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 2.06k, False: 944]
  ------------------
 2162|  2.06k|        const auto val =
 2163|  2.06k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  2.06k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|  2.06k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 2.06k, False: 0]
  |  |  ------------------
  ------------------
 2165|  2.06k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  2.06k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  2.06k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 836, False: 1.23k]
  ------------------
 2168|    836|                return it;
 2169|    836|            }
 2170|  2.06k|        }
 2171|  1.23k|        it = val.iterator;
 2172|  1.23k|    }
 2173|       |
 2174|    944|    return it;
 2175|  1.78k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1997|  39.8k|{
 1998|  39.8k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|  39.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  39.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  39.8k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  39.8k|    auto it = range.begin();
 2002|  39.8k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  39.8k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|  39.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 39.8k]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|  39.8k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 39.8k, False: 0]
  ------------------
 2011|  39.8k|        ++it;
 2012|  39.8k|        return {it, string_type(1, *range.begin())};
 2013|  39.8k|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|  39.8k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  944|  57.4k|{
  945|  57.4k|    return is_range_eof(r.begin(), r.end());
  946|  57.4k|}
_ZN3scn2v44impl12is_range_eofIPKwS4_EEbT_T0_:
  928|   108k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   108k|    {
  938|   108k|        return begin == end;
  939|   108k|    }
  940|   108k|}
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|    758|    {
  190|    758|        i = std::move(bound);
  191|    758|    }
_ZNK3scn2v44impl27read_code_point_into_resultIPKwwE8is_validEv:
 1988|  39.8k|    {
 1989|  39.8k|        return !codepoint.empty();
 1990|  39.8k|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_:
  742|  1.78k|        : m_fptr([](storage fn,
  743|  1.78k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.78k|              cvref<T> obj = *get<T>(fn);
  745|  1.78k|              if constexpr (std::is_void_v<R>) {
  746|  1.78k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.78k|              }
  748|  1.78k|              else {
  749|  1.78k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.78k|              }
  751|  1.78k|          }),
  752|  1.78k|          m_storage(std::addressof(f))
  753|  1.78k|    {
  754|  1.78k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESU_Di:
  743|  2.06k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.06k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.06k|              else {
  749|  2.06k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.06k|              }
  751|  2.06k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  683|  2.06k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  2.06k|        else if constexpr (std::is_object_v<T>) {
  688|  2.06k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.06k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2236|  2.06k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  2.06k|            return detail::is_cp_space(cp);
 2238|  2.06k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vISE_EEvE4typeELPv0EEEPSE_:
  660|  1.78k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.78k|        {
  662|  1.78k|        }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  950|  17.5k|{
  951|  17.5k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  17.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 17.5k]
  |  |  ------------------
  ------------------
  952|      0|        return eof_error::eof;
  953|      0|    }
  954|  17.5k|    return eof_error::good;
  955|  17.5k|}
_ZNK3scn2v44impl14_take_width_fnclINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEDTtlNS1_15take_width_viewEfp_fp0_EERKT_l:
 2942|  3.53k|    {
 2943|  3.53k|        return take_width_view{r, n};
 2944|  3.53k|    }
_ZN3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2ERKS9_l:
 2910|  3.53k|        : m_base(base), m_count(count)
 2911|  3.53k|    {
 2912|  3.53k|    }
_ZN3scn2v44impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEvEC2ERKS9_:
 2822|  3.53k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v44impl21reader_impl_for_wcharIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERwNSN_10locale_refE:
 5737|    120|    {
 5738|    120|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5738:13): [True: 100, False: 20]
  ------------------
 5739|    120|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5739:13): [True: 0, False: 20]
  ------------------
 5740|    100|            return read_default(range, value, loc);
 5741|    100|        }
 5742|       |
 5743|     20|        reader_impl_for_int<CharT> reader{};
 5744|     20|        using integer_type =
 5745|     20|            std::conditional_t<sizeof(wchar_t) == 2, int16_t, int32_t>;
 5746|     20|        integer_type tmp_value{};
 5747|     20|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5748|     20|        value = static_cast<integer_type>(value);
 5749|     20|        return ret;
 5750|    120|    }
_ZN3scn2v44impl21reader_impl_for_wcharIwE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RwNS0_6detail10locale_refE:
 5721|    100|    {
 5722|    100|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    100|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5723|       |        if constexpr (std::is_same_v<CharT, char>) {
 5724|       |            return code_point_reader<wchar_t>{}.read(range, value);
 5725|       |        }
 5726|    100|        else {
 5727|    100|            return code_unit_reader<wchar_t>{}.read(range, value);
 5728|    100|        }
 5729|    100|    }
_ZN3scn2v44impl16code_unit_readerIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSH_Rw:
 5601|    100|    {
 5602|    100|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3940|    100|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    100|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    100|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    100|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 100]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    100|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    100|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5603|    100|        ch = *range.begin();
 5604|    100|        return it;
 5605|    100|    }
_ZN3scn2v44impl14read_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 1944|    898|{
 1945|    898|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|    898|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 898]
  |  |  ------------------
  ------------------
 1946|      0|        return unexpected(e);
 1947|      0|    }
 1948|       |
 1949|    898|    return ranges::next(range.begin());
 1950|    898|}
_ZN3scn2v44impl9eof_checkINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_9eof_errorET_:
  950|    898|{
  951|    898|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|    898|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 898]
  |  |  ------------------
  ------------------
  952|      0|        return eof_error::eof;
  953|      0|    }
  954|    898|    return eof_error::good;
  955|    898|}
_ZN3scn2v44impl12is_range_eofINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEbT_:
  944|    898|{
  945|    898|    return is_range_eof(r.begin(), r.end());
  946|    898|}
_ZN3scn2v44impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEbT_T0_:
  928|  14.3k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  14.3k|    {
  938|  14.3k|        return begin == end;
  939|  14.3k|    }
  940|  14.3k|}
_ZN3scn2v44impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2878|  37.7k|        {
 2879|  37.7k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2879:21): [True: 488, False: 37.2k]
  |  Branch (2879:39): [True: 488, False: 0]
  ------------------
 2880|  37.7k|                   y.base() == x.m_end ||
  ------------------
  |  Branch (2880:20): [True: 198, False: 37.0k]
  ------------------
 2881|  37.7k|                   (y.count() == 1 && y.multibyte_left() == 0 &&
  ------------------
  |  Branch (2881:21): [True: 1.81k, False: 35.2k]
  |  Branch (2881:39): [True: 1.81k, False: 0]
  ------------------
 2882|  37.0k|                    y.is_current_double_wide());
  ------------------
  |  Branch (2882:21): [True: 44, False: 1.77k]
  ------------------
 2883|  37.7k|        }
_ZNK3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE3endEv:
 2926|  25.2k|    {
 2927|  25.2k|        return sentinel<true>{m_base.get().end()};
 2928|  25.2k|    }
_ZNK3scn2v44impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEvE3getEv:
 2825|  43.5k|    {
 2826|  43.5k|        return view;
 2827|  43.5k|    }
_ZN3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE8sentinelILb1EEC2ES8_:
 2859|  25.2k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
  ------------------
  |  |  934|  25.2k|    static_cast<    \
  |  |  935|  25.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
_ZNK3scn2v46ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
  295|    942|    {
  296|    942|        ++x;
  297|    942|        return x;
  298|    942|    }
_ZNK3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 2920|  9.15k|    {
 2921|  9.15k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2922|  9.15k|                                      m_count};
 2923|  9.15k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEiEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3589|    158|    {
 3590|    158|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|    158|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    158|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    158|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    158|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 158]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    158|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    158|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|    158|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|    158|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 0, False: 158]
  ------------------
 3594|       |            if constexpr (!std::is_signed_v<T>) {
 3595|       |                return detail::unexpected_scan_error(
 3596|       |                    scan_error::invalid_scanned_value,
 3597|       |                    "Unexpected '-' sign when parsing an "
 3598|       |                    "unsigned value");
 3599|       |            }
 3600|      0|            else {
 3601|      0|                if (specs.type ==
  ------------------
  |  Branch (3601:21): [True: 0, False: 0]
  ------------------
 3602|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3603|      0|                    return detail::unexpected_scan_error(
 3604|      0|                        scan_error::invalid_scanned_value,
 3605|      0|                        "'u'-option disallows negative values");
 3606|      0|                }
 3607|      0|            }
 3608|      0|        }
 3609|       |
 3610|    158|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 0, False: 158]
  ------------------
 3611|      0|            value = T{0};
 3612|      0|            return std::next(prefix_result.iterator);
 3613|      0|        }
 3614|       |
 3615|    158|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|    158|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 140, False: 18]
  |  |  ------------------
  ------------------
 3616|    140|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|    140|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    140|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    140|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    140|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 140, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    140|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    140|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    140|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    140|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    140|    }                                                  \
  |  |  |  | 3939|    140|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|      0|                    parse_integer_digits_without_thsep(
 3618|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|      0|                        prefix_result.parsed_base));
 3620|       |
 3621|      0|            auto buf = make_contiguous_buffer(
 3622|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|      0|                                        prefix_result.parsed_base));
 3626|       |
 3627|      0|            return ranges::next(
 3628|      0|                prefix_result.iterator,
 3629|      0|                ranges::distance(buf.view().begin(), result_it));
 3630|      0|        }
 3631|       |
 3632|     18|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|     18|            localized_number_formatting_options<CharT>{loc};
 3637|     18|#endif
 3638|       |
 3639|     18|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 18, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     18|    }                                                  \
  |  |  |  | 3939|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|      0|                parse_integer_digits_with_thsep(
 3641|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|      0|                    prefix_result.parsed_base, locale_options));
 3643|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|      0|            parse_digits_result;
 3645|       |
 3646|      0|        auto nothsep_source_view =
 3647|      0|            std::basic_string_view<CharT>{nothsep_source};
 3648|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|      0|            nothsep_source_it,
 3650|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|      0|                                prefix_result.parsed_base));
 3652|       |
 3653|      0|        return ranges::next(
 3654|      0|            prefix_result.iterator,
 3655|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|      0|                ranges::ssize(thsep_indices));
 3657|      0|    }
_ZN3scn2v44impl20parse_integer_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESG_i:
 3376|    400|{
 3377|    400|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3940|    400|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    400|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    400|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    400|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 400]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    400|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    400|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3378|    400|    auto [base_prefix_begin_it, sign] = sign_result;
 3379|       |
 3380|    400|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3381|    400|        parse_integer_base_prefix(
 3382|    400|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3383|       |
 3384|    400|    if (parsed_zero) {
  ------------------
  |  Branch (3384:9): [True: 0, False: 400]
  ------------------
 3385|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3385:13): [True: 0, False: 0]
  |  Branch (3385:13): [True: 0, False: 0]
  ------------------
 3386|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3386:13): [True: 0, False: 0]
  ------------------
 3387|      0|            digits_begin_it = base_prefix_begin_it;
 3388|      0|        }
 3389|      0|        else {
 3390|      0|            parsed_zero = false;
 3391|      0|        }
 3392|      0|    }
 3393|    400|    else {
 3394|    400|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3394:13): [True: 0, False: 400]
  |  Branch (3394:13): [True: 400, False: 0]
  ------------------
 3395|    400|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3395:13): [True: 400, False: 0]
  ------------------
 3396|    400|            digits_begin_it = base_prefix_begin_it;
 3397|    400|        }
 3398|    400|    }
 3399|       |
 3400|    400|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3400:9): [True: 400, False: 0]
  ------------------
 3401|    400|        sign = sign_type::plus_sign;
 3402|    400|    }
 3403|    400|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3404|    400|        digits_begin_it, parsed_base, sign, parsed_zero};
 3405|    400|}
_ZN3scn2v44impl18parse_numeric_signINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESG_:
 3257|    522|{
 3258|    522|    auto r = read_one_of_code_unit(range, "+-");
 3259|    522|    if (!r) {
  ------------------
  |  Branch (3259:9): [True: 522, False: 0]
  ------------------
 3260|    522|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3260:13): [True: 522, False: 0]
  ------------------
 3261|    522|            return std::pair{range.begin(), sign_type::default_sign};
 3262|    522|        }
 3263|      0|        return unexpected(eof_error::eof);
 3264|    522|    }
 3265|       |
 3266|      0|    auto& it = *r;
 3267|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3267:9): [True: 0, False: 0]
  ------------------
 3268|      0|        return std::pair{it, sign_type::minus_sign};
 3269|      0|    }
 3270|      0|    return std::pair{it, sign_type::plus_sign};
 3271|      0|}
_ZN3scn2v44impl21read_one_of_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2371|    522|{
 2372|    522|    auto it = read_code_unit(range);
 2373|    522|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|    522|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 522]
  |  |  ------------------
  ------------------
 2374|      0|        return unexpected(make_eof_parse_error(it.error()));
 2375|      0|    }
 2376|       |
 2377|  1.04k|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 1.04k, False: 522]
  ------------------
 2378|  1.04k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 0, False: 1.04k]
  ------------------
 2379|      0|            return *it;
 2380|      0|        }
 2381|  1.04k|    }
 2382|       |
 2383|    522|    return unexpected(parse_error::error);
 2384|    522|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_i:
 3343|    400|{
 3344|    400|    switch (base) {
 3345|      6|        case 2:
  ------------------
  |  Branch (3345:9): [True: 6, False: 394]
  ------------------
 3346|       |            // allow 0b/0B
 3347|      6|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3348|      6|                    false};
 3349|       |
 3350|     22|        case 8: {
  ------------------
  |  Branch (3350:9): [True: 22, False: 378]
  ------------------
 3351|       |            // allow 0o/0O/0
 3352|     22|            bool zero_parsed = false;
 3353|     22|            auto it = apply_opt(
 3354|     22|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3355|     22|            return {it, 8, zero_parsed};
 3356|      0|        }
 3357|       |
 3358|    114|        case 16:
  ------------------
  |  Branch (3358:9): [True: 114, False: 286]
  ------------------
 3359|       |            // allow 0x/0X
 3360|    114|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3361|    114|                    false};
 3362|       |
 3363|     22|        case 0:
  ------------------
  |  Branch (3363:9): [True: 22, False: 378]
  ------------------
 3364|       |            // detect base
 3365|     22|            return parse_integer_base_prefix_for_detection(range);
 3366|       |
 3367|    236|        default:
  ------------------
  |  Branch (3367:9): [True: 236, False: 164]
  ------------------
 3368|       |            // no base prefix allowed
 3369|    236|            return {range.begin(), base, false};
 3370|    400|    }
 3371|    400|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENS1_14parse_expectedESB_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEEE4typeEOSN_SP_:
 2390|    142|{
 2391|    142|    if (!result) {
  ------------------
  |  Branch (2391:9): [True: 142, False: 0]
  ------------------
 2392|    142|        return range.begin();
 2393|    142|    }
 2394|      0|    return *result;
 2395|    142|}
_ZN3scn2v44impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3294|     28|{
 3295|     28|    return read_matching_string_classic_nocase(range, "0b");
 3296|     28|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEE:
 2330|    566|{
 2331|    566|    using char_type = detail::char_t<Range>;
 2332|       |
 2333|       |    if constexpr (ranges::contiguous_range<Range> &&
 2334|       |                  std::is_same_v<char_type, char>) {
 2335|       |        if (range.size() < str.size()) {
 2336|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2337|       |        }
 2338|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2339|       |            return unexpected(parse_error::error);
 2340|       |        }
 2341|       |        return ranges::next(range.begin(), str.size());
 2342|       |    }
 2343|    566|    else {
 2344|    566|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|    566|            if (ch < 'A' || ch > 'Z') {
 2346|    566|                return ch;
 2347|    566|            }
 2348|    566|            return static_cast<char_type>(ch +
 2349|    566|                                          static_cast<char_type>('a' - 'A'));
 2350|    566|        };
 2351|       |
 2352|    566|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|    566|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    566|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    566|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    566|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 104, False: 462]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    104|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    104|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    104|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    104|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    104|    }                                                  \
  |  |  |  | 3939|    566|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    462|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2353|    462|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2354|    462|                        .transform_error(make_eof_parse_error));
 2355|       |
 2356|    462|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  865|    462|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 462, False: 0]
  |  |  ------------------
  ------------------
 2357|    462|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2358|    462|                    return ascii_tolower(a) ==
 2359|    462|                           static_cast<detail::char_t<Range>>(b);
 2360|    462|                }))) {
 2361|    462|            return unexpected(parse_error::error);
 2362|    462|        }
 2363|       |
 2364|      0|        return it;
 2365|    462|    }
 2366|    566|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_l:
 1955|    566|{
 1956|    566|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|    566|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    566|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|    566|    else {
 1967|    566|        auto it = range.begin();
 1968|    566|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 0, False: 566]
  ------------------
 1969|      0|            return ranges::next(it, count);
 1970|      0|        }
 1971|       |
 1972|  1.81k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 1.35k, False: 462]
  ------------------
 1973|  1.35k|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 104, False: 1.24k]
  ------------------
 1974|    104|                return unexpected(eof_error::eof);
 1975|    104|            }
 1976|  1.35k|        }
 1977|       |
 1978|    462|        return it;
 1979|    566|    }
 1980|    566|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEmT_:
 1095|    566|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|       |                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|       |        else {
 1107|       |            if (r.begin().stores_parent()) {
 1108|       |                return static_cast<size_t>(
 1109|       |                    r.begin().parent()->chars_available() -
 1110|       |                    r.begin().position());
 1111|       |            }
 1112|       |            return r.begin().contiguous_segment().size();
 1113|       |        }
 1114|       |    }
 1115|    566|    else {
 1116|    566|        return 0;
 1117|    566|    }
 1118|    566|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlwE_clEw:
 2344|    462|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|    462|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2345:17): [True: 32, False: 430]
  |  Branch (2345:29): [True: 430, False: 0]
  ------------------
 2346|    462|                return ch;
 2347|    462|            }
 2348|      0|            return static_cast<char_type>(ch +
 2349|      0|                                          static_cast<char_type>('a' - 'A'));
 2350|    462|        };
_ZN3scn2v44impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_Rb:
 3308|     44|{
 3309|     44|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3309:14): [True: 0, False: 44]
  ------------------
 3310|      0|        return *r;
 3311|      0|    }
 3312|       |
 3313|     44|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3313:14): [True: 0, False: 44]
  ------------------
 3314|      0|        zero_parsed = true;
 3315|      0|        return *r;
 3316|      0|    }
 3317|       |
 3318|     44|    return unexpected(parse_error::error);
 3319|     44|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NDTcl4implISL_EEE4typeE:
 2245|     44|{
 2246|     44|    auto it = read_code_unit(range);
 2247|     44|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|     44|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 44]
  |  |  ------------------
  ------------------
 2248|      0|        return unexpected(make_eof_parse_error(it.error()));
 2249|      0|    }
 2250|       |
 2251|     44|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|     44|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 44, False: 0]
  |  |  ------------------
  ------------------
 2252|     44|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|     44|        return unexpected(parse_error::error);
 2254|     44|    }
 2255|       |
 2256|      0|    return *it;
 2257|     44|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 1944|     44|{
 1945|     44|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|     44|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 44]
  |  |  ------------------
  ------------------
 1946|      0|        return unexpected(e);
 1947|      0|    }
 1948|       |
 1949|     44|    return ranges::next(range.begin());
 1950|     44|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_9eof_errorET_:
  950|     44|{
  951|     44|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|     44|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 44]
  |  |  ------------------
  ------------------
  952|      0|        return eof_error::eof;
  953|      0|    }
  954|     44|    return eof_error::good;
  955|     44|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEbT_:
  944|  13.4k|{
  945|  13.4k|    return is_range_eof(r.begin(), r.end());
  946|  13.4k|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3301|    136|{
 3302|    136|    return read_matching_string_classic_nocase(range, "0x");
 3303|    136|}
_ZN3scn2v44impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_:
 3324|     22|{
 3325|     22|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3325:14): [True: 0, False: 22]
  ------------------
 3326|      0|        return {*r, 16, false};
 3327|      0|    }
 3328|     22|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3328:14): [True: 0, False: 22]
  ------------------
 3329|      0|        return {*r, 2, false};
 3330|      0|    }
 3331|     22|    {
 3332|     22|        bool zero_parsed{false};
 3333|     22|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3333:18): [True: 0, False: 22]
  ------------------
 3334|      0|            return {*r, 8, zero_parsed};
 3335|      0|        }
 3336|     22|    }
 3337|     22|    return {range.begin(), 10, false};
 3338|     22|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_i:
 3410|    364|{
 3411|    364|    using char_type = detail::char_t<Range>;
 3412|       |
 3413|       |    if constexpr (ranges::contiguous_range<Range>) {
 3414|       |        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3415|       |            return detail::unexpected_scan_error(
 3416|       |                scan_error::invalid_scanned_value,
 3417|       |                "Failed to parse integer: No digits found");
 3418|       |        }
 3419|       |        return range.end();
 3420|       |    }
 3421|    364|    else {
 3422|    364|        return read_while1_code_unit(range,
 3423|    364|                                     [&](char_type ch) noexcept {
 3424|    364|                                         return char_to_int(ch) < base;
 3425|    364|                                     })
 3426|    364|            .transform_error(map_parse_error_to_scan_error(
 3427|    364|                scan_error::invalid_scanned_value,
 3428|    364|                "Failed to parse integer: No digits found"));
 3429|    364|    }
 3430|    364|}
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigISU_E8functionEEE:
 2094|    486|{
 2095|    486|    auto it = read_while_code_unit(range, pred);
 2096|    486|    if (it == range.begin()) {
  ------------------
  |  Branch (2096:9): [True: 486, False: 0]
  ------------------
 2097|    486|        return unexpected(parse_error::error);
 2098|    486|    }
 2099|      0|    return it;
 2100|    486|}
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 2074|    486|{
 2075|    486|    return read_until_code_unit(range, std::not_fn(pred));
 2076|    486|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 2055|    486|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|    486|    else {
 2060|    486|        auto first = range.begin();
 2061|    486|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 486, False: 0]
  ------------------
 2062|    486|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 486, False: 0]
  ------------------
 2063|    486|                return first;
 2064|    486|            }
 2065|    486|        }
 2066|      0|        return first;
 2067|    486|    }
 2068|    486|}
_ZN3scn2v44implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2891|  17.9k|        {
 2892|  17.9k|            return !(y == x);
 2893|  17.9k|        }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_SV_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSP_:
  742|    364|        : m_fptr([](storage fn,
  743|    364|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    364|              cvref<T> obj = *get<T>(fn);
  745|    364|              if constexpr (std::is_void_v<R>) {
  746|    364|                  obj(static_cast<decltype(args)>(args)...);
  747|    364|              }
  748|    364|              else {
  749|    364|                  return obj(static_cast<decltype(args)>(args)...);
  750|    364|              }
  751|    364|          }),
  752|    364|          m_storage(std::addressof(f))
  753|    364|    {
  754|    364|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_SV_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  743|    364|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    364|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    364|              else {
  749|    364|                  return obj(static_cast<decltype(args)>(args)...);
  750|    364|              }
  751|    364|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSD_EENS1_15take_width_viewINS9_ISD_SD_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_iEUlwE_EEDaNS3_7storageE:
  683|    364|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    364|        else if constexpr (std::is_object_v<T>) {
  688|    364|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    364|    }
_ZZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_iENKUlwE_clEw:
 3423|    364|                                     [&](char_type ch) noexcept {
 3424|    364|                                         return char_to_int(ch) < base;
 3425|    364|                                     })
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_TnPNSN_9enable_ifIXsr3stdE11is_object_vISP_EEvE4typeELPv0EEEPSP_:
  660|    364|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    364|        {
  662|    364|        }
_ZN3scn2v44impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEENSJ_12basic_stringIT0_NSJ_11char_traitsISS_EENSJ_9allocatorISS_EEEENSR_IcNST_IcEENSV_IcEEEEEEEEESM_iRKNS1_35localized_number_formatting_optionsISS_EE:
 3440|     36|{
 3441|     36|    std::basic_string<CharT> output;
 3442|     36|    std::string thsep_indices;
 3443|     36|    auto it = range.begin();
 3444|     36|    bool digit_matched = false;
 3445|     36|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3445:12): [True: 36, False: 0]
  ------------------
 3446|     36|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3446:13): [True: 0, False: 36]
  ------------------
 3447|      0|            thsep_indices.push_back(
 3448|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3449|      0|        }
 3450|     36|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3450:18): [True: 36, False: 0]
  ------------------
 3451|     36|            break;
 3452|     36|        }
 3453|      0|        else {
 3454|      0|            output.push_back(*it);
 3455|      0|            digit_matched = true;
 3456|      0|        }
 3457|     36|    }
 3458|     36|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  865|     36|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 36, False: 0]
  |  |  ------------------
  ------------------
 3459|     36|        return detail::unexpected_scan_error(
 3460|     36|            scan_error::invalid_scanned_value,
 3461|     36|            "Failed to parse integer: No digits found");
 3462|     36|    }
 3463|      0|    return std::tuple{it, output, thsep_indices};
 3464|     36|}
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E5countEv:
 2516|  77.6k|    {
 2517|  77.6k|        return m_count;
 2518|  77.6k|    }
_ZN3scn2v44impl21reader_impl_for_wcharIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERwNSL_10locale_refE:
 5737|    316|    {
 5738|    316|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5738:13): [True: 294, False: 22]
  ------------------
 5739|    316|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5739:13): [True: 0, False: 22]
  ------------------
 5740|    294|            return read_default(range, value, loc);
 5741|    294|        }
 5742|       |
 5743|     22|        reader_impl_for_int<CharT> reader{};
 5744|     22|        using integer_type =
 5745|     22|            std::conditional_t<sizeof(wchar_t) == 2, int16_t, int32_t>;
 5746|     22|        integer_type tmp_value{};
 5747|     22|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5748|     22|        value = static_cast<integer_type>(value);
 5749|     22|        return ret;
 5750|    316|    }
_ZN3scn2v44impl21reader_impl_for_wcharIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RwNS0_6detail10locale_refE:
 5721|    742|    {
 5722|    742|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    742|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5723|       |        if constexpr (std::is_same_v<CharT, char>) {
 5724|       |            return code_point_reader<wchar_t>{}.read(range, value);
 5725|       |        }
 5726|    742|        else {
 5727|    742|            return code_unit_reader<wchar_t>{}.read(range, value);
 5728|    742|        }
 5729|    742|    }
_ZN3scn2v44impl16code_unit_readerIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_Rw:
 5601|    742|    {
 5602|    742|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3940|    742|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    742|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    742|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    742|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 742]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    742|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    742|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5603|    742|        ch = *range.begin();
 5604|    742|        return it;
 5605|    742|    }
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1944|  5.41k|{
 1945|  5.41k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  5.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 5.41k]
  |  |  ------------------
  ------------------
 1946|      0|        return unexpected(e);
 1947|      0|    }
 1948|       |
 1949|  5.41k|    return ranges::next(range.begin());
 1950|  5.41k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  21.0k|    {
  296|  21.0k|        ++x;
  297|  21.0k|        return x;
  298|  21.0k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3589|    352|    {
 3590|    352|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|    352|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    352|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    352|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    352|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 352]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    352|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    352|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|    352|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|    352|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 0, False: 352]
  ------------------
 3594|       |            if constexpr (!std::is_signed_v<T>) {
 3595|       |                return detail::unexpected_scan_error(
 3596|       |                    scan_error::invalid_scanned_value,
 3597|       |                    "Unexpected '-' sign when parsing an "
 3598|       |                    "unsigned value");
 3599|       |            }
 3600|      0|            else {
 3601|      0|                if (specs.type ==
  ------------------
  |  Branch (3601:21): [True: 0, False: 0]
  ------------------
 3602|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3603|      0|                    return detail::unexpected_scan_error(
 3604|      0|                        scan_error::invalid_scanned_value,
 3605|      0|                        "'u'-option disallows negative values");
 3606|      0|                }
 3607|      0|            }
 3608|      0|        }
 3609|       |
 3610|    352|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 0, False: 352]
  ------------------
 3611|      0|            value = T{0};
 3612|      0|            return std::next(prefix_result.iterator);
 3613|      0|        }
 3614|       |
 3615|    352|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|    352|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 338, False: 14]
  |  |  ------------------
  ------------------
 3616|    338|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|    338|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    338|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    338|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    338|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 338]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    338|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    338|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|    338|                    parse_integer_digits_without_thsep(
 3618|    338|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|    338|                        prefix_result.parsed_base));
 3620|       |
 3621|    338|            auto buf = make_contiguous_buffer(
 3622|    338|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|    338|            SCN_TRY(result_it,
  ------------------
  |  | 3940|    338|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    338|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    338|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    338|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 338, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    338|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    338|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    338|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    338|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    338|    }                                                  \
  |  |  |  | 3939|    338|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|      0|                                        prefix_result.parsed_base));
 3626|       |
 3627|      0|            return ranges::next(
 3628|      0|                prefix_result.iterator,
 3629|      0|                ranges::distance(buf.view().begin(), result_it));
 3630|    338|        }
 3631|       |
 3632|     14|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|     14|            localized_number_formatting_options<CharT>{loc};
 3637|     14|#endif
 3638|       |
 3639|     14|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|     14|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     14|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     14|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 14, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     14|    }                                                  \
  |  |  |  | 3939|     14|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|      0|                parse_integer_digits_with_thsep(
 3641|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|      0|                    prefix_result.parsed_base, locale_options));
 3643|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|      0|            parse_digits_result;
 3645|       |
 3646|      0|        auto nothsep_source_view =
 3647|      0|            std::basic_string_view<CharT>{nothsep_source};
 3648|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|      0|            nothsep_source_it,
 3650|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|      0|                                prefix_result.parsed_base));
 3652|       |
 3653|      0|        return ranges::next(
 3654|      0|            prefix_result.iterator,
 3655|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|      0|                ranges::ssize(thsep_indices));
 3657|      0|    }
_ZN3scn2v44impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3376|  2.32k|{
 3377|  2.32k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3940|  2.32k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.32k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.32k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 2.32k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  2.32k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  2.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3378|  2.32k|    auto [base_prefix_begin_it, sign] = sign_result;
 3379|       |
 3380|  2.32k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3381|  2.32k|        parse_integer_base_prefix(
 3382|  2.32k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3383|       |
 3384|  2.32k|    if (parsed_zero) {
  ------------------
  |  Branch (3384:9): [True: 0, False: 2.32k]
  ------------------
 3385|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3385:13): [True: 0, False: 0]
  ------------------
 3386|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3386:13): [True: 0, False: 0]
  ------------------
 3387|      0|            digits_begin_it = base_prefix_begin_it;
 3388|      0|        }
 3389|      0|        else {
 3390|      0|            parsed_zero = false;
 3391|      0|        }
 3392|      0|    }
 3393|  2.32k|    else {
 3394|  2.32k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3394:13): [True: 0, False: 2.32k]
  ------------------
 3395|  2.32k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3395:13): [True: 2.32k, False: 0]
  ------------------
 3396|  2.32k|            digits_begin_it = base_prefix_begin_it;
 3397|  2.32k|        }
 3398|  2.32k|    }
 3399|       |
 3400|  2.32k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3400:9): [True: 2.32k, False: 0]
  ------------------
 3401|  2.32k|        sign = sign_type::plus_sign;
 3402|  2.32k|    }
 3403|  2.32k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3404|  2.32k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3405|  2.32k|}
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3257|  3.08k|{
 3258|  3.08k|    auto r = read_one_of_code_unit(range, "+-");
 3259|  3.08k|    if (!r) {
  ------------------
  |  Branch (3259:9): [True: 3.08k, False: 0]
  ------------------
 3260|  3.08k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3260:13): [True: 3.08k, False: 0]
  ------------------
 3261|  3.08k|            return std::pair{range.begin(), sign_type::default_sign};
 3262|  3.08k|        }
 3263|      0|        return unexpected(eof_error::eof);
 3264|  3.08k|    }
 3265|       |
 3266|      0|    auto& it = *r;
 3267|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3267:9): [True: 0, False: 0]
  ------------------
 3268|      0|        return std::pair{it, sign_type::minus_sign};
 3269|      0|    }
 3270|      0|    return std::pair{it, sign_type::plus_sign};
 3271|      0|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2371|  3.08k|{
 2372|  3.08k|    auto it = read_code_unit(range);
 2373|  3.08k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  3.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 3.08k]
  |  |  ------------------
  ------------------
 2374|      0|        return unexpected(make_eof_parse_error(it.error()));
 2375|      0|    }
 2376|       |
 2377|  6.17k|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 6.17k, False: 3.08k]
  ------------------
 2378|  6.17k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 0, False: 6.17k]
  ------------------
 2379|      0|            return *it;
 2380|      0|        }
 2381|  6.17k|    }
 2382|       |
 2383|  3.08k|    return unexpected(parse_error::error);
 2384|  3.08k|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3343|  2.32k|{
 3344|  2.32k|    switch (base) {
 3345|     12|        case 2:
  ------------------
  |  Branch (3345:9): [True: 12, False: 2.31k]
  ------------------
 3346|       |            // allow 0b/0B
 3347|     12|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3348|     12|                    false};
 3349|       |
 3350|     10|        case 8: {
  ------------------
  |  Branch (3350:9): [True: 10, False: 2.31k]
  ------------------
 3351|       |            // allow 0o/0O/0
 3352|     10|            bool zero_parsed = false;
 3353|     10|            auto it = apply_opt(
 3354|     10|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3355|     10|            return {it, 8, zero_parsed};
 3356|      0|        }
 3357|       |
 3358|    760|        case 16:
  ------------------
  |  Branch (3358:9): [True: 760, False: 1.56k]
  ------------------
 3359|       |            // allow 0x/0X
 3360|    760|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3361|    760|                    false};
 3362|       |
 3363|     16|        case 0:
  ------------------
  |  Branch (3363:9): [True: 16, False: 2.30k]
  ------------------
 3364|       |            // detect base
 3365|     16|            return parse_integer_base_prefix_for_detection(range);
 3366|       |
 3367|  1.52k|        default:
  ------------------
  |  Branch (3367:9): [True: 1.52k, False: 798]
  ------------------
 3368|       |            // no base prefix allowed
 3369|  1.52k|            return {range.begin(), base, false};
 3370|  2.32k|    }
 3371|  2.32k|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2390|    782|{
 2391|    782|    if (!result) {
  ------------------
  |  Branch (2391:9): [True: 782, False: 0]
  ------------------
 2392|    782|        return range.begin();
 2393|    782|    }
 2394|      0|    return *result;
 2395|    782|}
_ZN3scn2v44impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3294|     28|{
 3295|     28|    return read_matching_string_classic_nocase(range, "0b");
 3296|     28|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2330|  3.11k|{
 2331|  3.11k|    using char_type = detail::char_t<Range>;
 2332|       |
 2333|       |    if constexpr (ranges::contiguous_range<Range> &&
 2334|       |                  std::is_same_v<char_type, char>) {
 2335|       |        if (range.size() < str.size()) {
 2336|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2337|       |        }
 2338|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2339|       |            return unexpected(parse_error::error);
 2340|       |        }
 2341|       |        return ranges::next(range.begin(), str.size());
 2342|       |    }
 2343|  3.11k|    else {
 2344|  3.11k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|  3.11k|            if (ch < 'A' || ch > 'Z') {
 2346|  3.11k|                return ch;
 2347|  3.11k|            }
 2348|  3.11k|            return static_cast<char_type>(ch +
 2349|  3.11k|                                          static_cast<char_type>('a' - 'A'));
 2350|  3.11k|        };
 2351|       |
 2352|  3.11k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|  3.11k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  3.11k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  3.11k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  3.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4, False: 3.11k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      4|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      4|    }                                                  \
  |  |  |  | 3939|  3.11k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  3.11k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2353|  3.11k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2354|  3.11k|                        .transform_error(make_eof_parse_error));
 2355|       |
 2356|  3.11k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  865|  3.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.11k, False: 0]
  |  |  ------------------
  ------------------
 2357|  3.11k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2358|  3.11k|                    return ascii_tolower(a) ==
 2359|  3.11k|                           static_cast<detail::char_t<Range>>(b);
 2360|  3.11k|                }))) {
 2361|  3.11k|            return unexpected(parse_error::error);
 2362|  3.11k|        }
 2363|       |
 2364|      0|        return it;
 2365|  3.11k|    }
 2366|  3.11k|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2344|  3.11k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|  3.11k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2345:17): [True: 44, False: 3.06k]
  |  Branch (2345:29): [True: 3.06k, False: 0]
  ------------------
 2346|  3.11k|                return ch;
 2347|  3.11k|            }
 2348|      0|            return static_cast<char_type>(ch +
 2349|      0|                                          static_cast<char_type>('a' - 'A'));
 2350|  3.11k|        };
_ZN3scn2v44impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3308|     26|{
 3309|     26|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3309:14): [True: 0, False: 26]
  ------------------
 3310|      0|        return *r;
 3311|      0|    }
 3312|       |
 3313|     26|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3313:14): [True: 0, False: 26]
  ------------------
 3314|      0|        zero_parsed = true;
 3315|      0|        return *r;
 3316|      0|    }
 3317|       |
 3318|     26|    return unexpected(parse_error::error);
 3319|     26|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2245|  1.58k|{
 2246|  1.58k|    auto it = read_code_unit(range);
 2247|  1.58k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  1.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.58k]
  |  |  ------------------
  ------------------
 2248|      0|        return unexpected(make_eof_parse_error(it.error()));
 2249|      0|    }
 2250|       |
 2251|  1.58k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|  1.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.58k, False: 0]
  |  |  ------------------
  ------------------
 2252|  1.58k|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|  1.58k|        return unexpected(parse_error::error);
 2254|  1.58k|    }
 2255|       |
 2256|      0|    return *it;
 2257|  1.58k|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3301|    776|{
 3302|    776|    return read_matching_string_classic_nocase(range, "0x");
 3303|    776|}
_ZN3scn2v44impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3324|     16|{
 3325|     16|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3325:14): [True: 0, False: 16]
  ------------------
 3326|      0|        return {*r, 16, false};
 3327|      0|    }
 3328|     16|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3328:14): [True: 0, False: 16]
  ------------------
 3329|      0|        return {*r, 2, false};
 3330|      0|    }
 3331|     16|    {
 3332|     16|        bool zero_parsed{false};
 3333|     16|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3333:18): [True: 0, False: 16]
  ------------------
 3334|      0|            return {*r, 8, zero_parsed};
 3335|      0|        }
 3336|     16|    }
 3337|     16|    return {range.begin(), 10, false};
 3338|     16|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3410|  2.29k|{
 3411|  2.29k|    using char_type = detail::char_t<Range>;
 3412|       |
 3413|  2.29k|    if constexpr (ranges::contiguous_range<Range>) {
 3414|  2.29k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  2.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.29k]
  |  |  ------------------
  ------------------
 3415|      0|            return detail::unexpected_scan_error(
 3416|      0|                scan_error::invalid_scanned_value,
 3417|      0|                "Failed to parse integer: No digits found");
 3418|      0|        }
 3419|  2.29k|        return range.end();
 3420|       |    }
 3421|       |    else {
 3422|       |        return read_while1_code_unit(range,
 3423|       |                                     [&](char_type ch) noexcept {
 3424|       |                                         return char_to_int(ch) < base;
 3425|       |                                     })
 3426|       |            .transform_error(map_parse_error_to_scan_error(
 3427|       |                scan_error::invalid_scanned_value,
 3428|       |                "Failed to parse integer: No digits found"));
 3429|       |    }
 3430|  2.29k|}
_ZN3scn2v44impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3440|     28|{
 3441|     28|    std::basic_string<CharT> output;
 3442|     28|    std::string thsep_indices;
 3443|     28|    auto it = range.begin();
 3444|     28|    bool digit_matched = false;
 3445|     28|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3445:12): [True: 28, False: 0]
  ------------------
 3446|     28|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3446:13): [True: 0, False: 28]
  ------------------
 3447|      0|            thsep_indices.push_back(
 3448|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3449|      0|        }
 3450|     28|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3450:18): [True: 28, False: 0]
  ------------------
 3451|     28|            break;
 3452|     28|        }
 3453|      0|        else {
 3454|      0|            output.push_back(*it);
 3455|      0|            digit_matched = true;
 3456|      0|        }
 3457|     28|    }
 3458|     28|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  865|     28|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 28, False: 0]
  |  |  ------------------
  ------------------
 3459|     28|        return detail::unexpected_scan_error(
 3460|     28|            scan_error::invalid_scanned_value,
 3461|     28|            "Failed to parse integer: No digits found");
 3462|     28|    }
 3463|      0|    return std::tuple{it, output, thsep_indices};
 3464|     28|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1781|  8.34k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|  8.34k|                  ranges::sized_range<Range>) {
 1785|  8.34k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|  8.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|  8.34k|}
_ZN3scn2v44impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1587|  8.34k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|  8.34k|    {
 1589|  8.34k|    }
_ZNK3scn2v44impl19string_view_wrapperIwE4viewEv:
 1601|  9.66k|    {
 1602|  9.66k|        return sv;
 1603|  9.66k|    }
_ZN3scn2v44impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEb:
 5988|    508|{
 5989|    508|    using char_type = detail::char_t<Range>;
 5990|    508|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5991|       |
 5992|    508|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5992:9): [True: 508, False: 0]
  ------------------
 5993|    508|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5994|    508|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5995|       |
 5996|    508|        if (max_width == 0) {
  ------------------
  |  Branch (5996:13): [True: 436, False: 72]
  ------------------
 5997|    436|            auto it = read_while_code_unit(range, pred);
 5998|       |
 5999|    436|            if (want_skipped_width) {
  ------------------
  |  Branch (5999:17): [True: 72, False: 364]
  ------------------
 6000|     72|                auto prefix_width =
 6001|     72|                    static_cast<std::ptrdiff_t>(
 6002|     72|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 6003|     72|                    ranges::distance(range.begin(), it);
 6004|     72|                return result_type{it, prefix_width};
 6005|     72|            }
 6006|    364|            return result_type{it, 0};
 6007|    436|        }
 6008|       |
 6009|     72|        auto max_width_view = take_width(range, max_width);
 6010|     72|        auto w_it = read_while_code_unit(max_width_view, pred);
 6011|       |
 6012|     72|        if (want_skipped_width) {
  ------------------
  |  Branch (6012:13): [True: 72, False: 0]
  ------------------
 6013|     72|            return result_type{w_it.base(), max_width - w_it.count()};
 6014|     72|        }
 6015|      0|        return result_type{w_it.base(), 0};
 6016|     72|    }
 6017|       |
 6018|      0|    const auto fill_chars = fill.template get_code_units<char_type>();
 6019|      0|    if (max_width == 0) {
  ------------------
  |  Branch (6019:9): [True: 0, False: 0]
  ------------------
 6020|      0|        auto it = read_while_code_units(range, fill_chars);
 6021|       |
 6022|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (6022:13): [True: 0, False: 0]
  ------------------
 6023|      0|            auto prefix_width =
 6024|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 6025|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 6026|      0|            return result_type{it, prefix_width};
 6027|      0|        }
 6028|      0|        return result_type{it, 0};
 6029|      0|    }
 6030|       |
 6031|      0|    auto max_width_view = take_width(range, max_width);
 6032|      0|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 6033|       |
 6034|      0|    if (want_skipped_width) {
  ------------------
  |  Branch (6034:9): [True: 0, False: 0]
  ------------------
 6035|      0|        return result_type{w_it.base(), max_width - w_it.count()};
 6036|      0|    }
 6037|      0|    return result_type{w_it.base(), 0};
 6038|      0|}
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2074|    496|{
 2075|    496|    return read_until_code_unit(range, std::not_fn(pred));
 2076|    496|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2055|    646|{
 2056|    646|    if constexpr (ranges::common_range<Range>) {
 2057|    646|        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|       |    else {
 2060|       |        auto first = range.begin();
 2061|       |        for (; first != range.end(); ++first) {
 2062|       |            if (pred(*first)) {
 2063|       |                return first;
 2064|       |            }
 2065|       |        }
 2066|       |        return first;
 2067|       |    }
 2068|    646|}
_ZN3scn2v44impl12function_refIFbwES3_EC2IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_SR_TnPNSF_9enable_ifIXaaaasr6detailE11is_not_selfISH_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSH_:
  742|    508|        : m_fptr([](storage fn,
  743|    508|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    508|              cvref<T> obj = *get<T>(fn);
  745|    508|              if constexpr (std::is_void_v<R>) {
  746|    508|                  obj(static_cast<decltype(args)>(args)...);
  747|    508|              }
  748|    508|              else {
  749|    508|                  return obj(static_cast<decltype(args)>(args)...);
  750|    508|              }
  751|    508|          }),
  752|    508|          m_storage(std::addressof(f))
  753|    508|    {
  754|    508|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_SR_TnPNSF_9enable_ifIXaaaasr6detailE11is_not_selfISH_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSH_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|    954|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    954|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    954|              else {
  749|    954|                  return obj(static_cast<decltype(args)>(args)...);
  750|    954|              }
  751|    954|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRT_EEEElEEEESG_lRKNS0_6detail9fill_typeEbEUlwE_EEDaNS3_7storageE:
  683|    954|    {
  684|    954|        if constexpr (std::is_const_v<T>) {
  685|    954|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    954|    }
_ZZN3scn2v44impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEbENKUlwE_clEw:
 5994|    954|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_TnPNSF_9enable_ifIXsr3stdE11is_object_vISH_EEvE4typeELPv0EEEPKSH_:
  665|    508|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    508|        {
  667|    508|        }
_ZN3scn2v44impl20read_while_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2074|    132|{
 2075|    132|    return read_until_code_unit(range, std::not_fn(pred));
 2076|    132|}
_ZN3scn2v44impl20read_until_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2055|    222|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|    222|    else {
 2060|    222|        auto first = range.begin();
 2061|  1.30k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 1.17k, False: 130]
  ------------------
 2062|  1.17k|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 92, False: 1.08k]
  ------------------
 2063|     92|                return first;
 2064|     92|            }
 2065|  1.17k|        }
 2066|    130|        return first;
 2067|    222|    }
 2068|    222|}
_ZN3scn2v44impl23skip_classic_whitespaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_b:
 3065|    292|{
 3066|    292|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 0, False: 292]
  ------------------
 3067|      0|        auto it = read_while_classic_space(range);
 3068|      0|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|      0|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3070|      0|            return unexpected(e);
 3071|      0|        }
 3072|       |
 3073|      0|        return it;
 3074|      0|    }
 3075|       |
 3076|    292|    return read_while_classic_space(range);
 3077|    292|}
_ZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2215|    292|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|    292|    else {
 2225|    292|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|    292|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|    292|            return detail::is_cp_space(cp);
 2238|    292|        });
 2239|    292|    }
 2240|    292|}
_ZN3scn2v44impl21read_while_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2180|    466|{
 2181|    466|    return read_until_code_point(range, std::not_fn(pred));
 2182|    466|}
_ZN3scn2v44impl21read_until_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2159|    562|{
 2160|    562|    auto it = range.begin();
 2161|  7.93k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 7.84k, False: 96]
  ------------------
 2162|  7.84k|        const auto val =
 2163|  7.84k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  7.84k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|  7.84k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 7.84k, False: 0]
  |  |  ------------------
  ------------------
 2165|  7.84k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  7.84k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  7.84k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 466, False: 7.37k]
  ------------------
 2168|    466|                return it;
 2169|    466|            }
 2170|  7.84k|        }
 2171|  7.37k|        it = val.iterator;
 2172|  7.37k|    }
 2173|       |
 2174|     96|    return it;
 2175|    562|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISL_EEE4typeEEESL_:
 1997|  13.4k|{
 1998|  13.4k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|  13.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  13.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  13.4k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  13.4k|    auto it = range.begin();
 2002|  13.4k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  13.4k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|  13.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 13.4k]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|  13.4k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 13.4k, False: 0]
  ------------------
 2011|  13.4k|        ++it;
 2012|  13.4k|        return {it, string_type(1, *range.begin())};
 2013|  13.4k|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|  13.4k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_:
  742|    292|        : m_fptr([](storage fn,
  743|    292|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    292|              cvref<T> obj = *get<T>(fn);
  745|    292|              if constexpr (std::is_void_v<R>) {
  746|    292|                  obj(static_cast<decltype(args)>(args)...);
  747|    292|              }
  748|    292|              else {
  749|    292|                  return obj(static_cast<decltype(args)>(args)...);
  750|    292|              }
  751|    292|          }),
  752|    292|          m_storage(std::addressof(f))
  753|    292|    {
  754|    292|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESY_Di:
  743|    370|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    370|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    370|              else {
  749|    370|                  return obj(static_cast<decltype(args)>(args)...);
  750|    370|              }
  751|    370|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|    370|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    370|        else if constexpr (std::is_object_v<T>) {
  688|    370|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    370|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2236|    370|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|    370|            return detail::is_cp_space(cp);
 2238|    370|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|    292|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    292|        {
  662|    292|        }
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3065|  6.11k|{
 3066|  6.11k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 5.82k, False: 288]
  ------------------
 3067|  5.82k|        auto it = read_while_classic_space(range);
 3068|  5.82k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|  5.82k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  5.82k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 5.82k]
  |  |  ------------------
  ------------------
 3070|      0|            return unexpected(e);
 3071|      0|        }
 3072|       |
 3073|  5.82k|        return it;
 3074|  5.82k|    }
 3075|       |
 3076|    288|    return read_while_classic_space(range);
 3077|  6.11k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2215|  7.89k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|  7.89k|    else {
 2225|  7.89k|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|  7.89k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  7.89k|            return detail::is_cp_space(cp);
 2238|  7.89k|        });
 2239|  7.89k|    }
 2240|  7.89k|}
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2180|  8.07k|{
 2181|  8.07k|    return read_until_code_point(range, std::not_fn(pred));
 2182|  8.07k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2159|  10.4k|{
 2160|  10.4k|    auto it = range.begin();
 2161|  40.3k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 37.7k, False: 2.59k]
  ------------------
 2162|  37.7k|        const auto val =
 2163|  37.7k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  37.7k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|  37.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 37.7k, False: 0]
  |  |  ------------------
  ------------------
 2165|  37.7k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  37.7k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  37.7k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 7.90k, False: 29.8k]
  ------------------
 2168|  7.90k|                return it;
 2169|  7.90k|            }
 2170|  37.7k|        }
 2171|  29.8k|        it = val.iterator;
 2172|  29.8k|    }
 2173|       |
 2174|  2.59k|    return it;
 2175|  10.4k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|  7.89k|        : m_fptr([](storage fn,
  743|  7.89k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.89k|              cvref<T> obj = *get<T>(fn);
  745|  7.89k|              if constexpr (std::is_void_v<R>) {
  746|  7.89k|                  obj(static_cast<decltype(args)>(args)...);
  747|  7.89k|              }
  748|  7.89k|              else {
  749|  7.89k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.89k|              }
  751|  7.89k|          }),
  752|  7.89k|          m_storage(std::addressof(f))
  753|  7.89k|    {
  754|  7.89k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|  9.60k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  9.60k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  9.60k|              else {
  749|  9.60k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  9.60k|              }
  751|  9.60k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  9.60k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  9.60k|        else if constexpr (std::is_object_v<T>) {
  688|  9.60k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  9.60k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2236|  9.60k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  9.60k|            return detail::is_cp_space(cp);
 2238|  9.60k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|  7.89k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  7.89k|        {
  662|  7.89k|        }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3155|  1.75k|    {
 3156|  1.75k|        reader_error_handler eh{};
 3157|  1.75k|        get_derived().check_specs_impl(specs, eh);
 3158|  1.75k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  1.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 812, False: 940]
  |  |  ------------------
  ------------------
 3159|    812|            return detail::unexpected_scan_error(
 3160|    812|                scan_error::invalid_format_string, eh.m_msg);
 3161|    812|        }
 3162|    940|        return {};
 3163|  1.75k|    }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIwEEwE11get_derivedEv:
 3167|  1.75k|    {
 3168|  1.75k|        return static_cast<Derived&>(*this);
 3169|  1.75k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3535|  1.75k|    {
 3536|  1.75k|        detail::check_int_type_specs(specs, eh);
 3537|  1.75k|    }
_ZNK3scn2v44impl11reader_baseINS1_19reader_impl_for_intIwEEwE19skip_ws_before_readEv:
 3150|  1.83k|    {
 3151|  1.83k|        return true;
 3152|  1.83k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEjEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3589|    138|    {
 3590|    138|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|    138|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    138|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    138|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    138|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 138]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    138|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    138|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|    138|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|    138|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 0, False: 138]
  ------------------
 3594|      0|            if constexpr (!std::is_signed_v<T>) {
 3595|      0|                return detail::unexpected_scan_error(
 3596|      0|                    scan_error::invalid_scanned_value,
 3597|      0|                    "Unexpected '-' sign when parsing an "
 3598|      0|                    "unsigned value");
 3599|       |            }
 3600|       |            else {
 3601|       |                if (specs.type ==
 3602|       |                    detail::presentation_type::int_unsigned_decimal) {
 3603|       |                    return detail::unexpected_scan_error(
 3604|       |                        scan_error::invalid_scanned_value,
 3605|       |                        "'u'-option disallows negative values");
 3606|       |                }
 3607|       |            }
 3608|      0|        }
 3609|       |
 3610|    138|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 0, False: 138]
  ------------------
 3611|      0|            value = T{0};
 3612|      0|            return std::next(prefix_result.iterator);
 3613|      0|        }
 3614|       |
 3615|    138|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|    138|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 120, False: 18]
  |  |  ------------------
  ------------------
 3616|    120|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|    120|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    120|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    120|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    120|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 120, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    120|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    120|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    120|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    120|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    120|    }                                                  \
  |  |  |  | 3939|    120|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|      0|                    parse_integer_digits_without_thsep(
 3618|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|      0|                        prefix_result.parsed_base));
 3620|       |
 3621|      0|            auto buf = make_contiguous_buffer(
 3622|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|      0|                                        prefix_result.parsed_base));
 3626|       |
 3627|      0|            return ranges::next(
 3628|      0|                prefix_result.iterator,
 3629|      0|                ranges::distance(buf.view().begin(), result_it));
 3630|      0|        }
 3631|       |
 3632|     18|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|     18|            localized_number_formatting_options<CharT>{loc};
 3637|     18|#endif
 3638|       |
 3639|     18|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 18, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     18|    }                                                  \
  |  |  |  | 3939|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|      0|                parse_integer_digits_with_thsep(
 3641|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|      0|                    prefix_result.parsed_base, locale_options));
 3643|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|      0|            parse_digits_result;
 3645|       |
 3646|      0|        auto nothsep_source_view =
 3647|      0|            std::basic_string_view<CharT>{nothsep_source};
 3648|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|      0|            nothsep_source_it,
 3650|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|      0|                                prefix_result.parsed_base));
 3652|       |
 3653|      0|        return ranges::next(
 3654|      0|            prefix_result.iterator,
 3655|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|      0|                ranges::ssize(thsep_indices));
 3657|      0|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3589|    330|    {
 3590|    330|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|    330|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    330|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    330|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    330|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 330]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    330|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    330|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|    330|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|    330|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 0, False: 330]
  ------------------
 3594|      0|            if constexpr (!std::is_signed_v<T>) {
 3595|      0|                return detail::unexpected_scan_error(
 3596|      0|                    scan_error::invalid_scanned_value,
 3597|      0|                    "Unexpected '-' sign when parsing an "
 3598|      0|                    "unsigned value");
 3599|       |            }
 3600|       |            else {
 3601|       |                if (specs.type ==
 3602|       |                    detail::presentation_type::int_unsigned_decimal) {
 3603|       |                    return detail::unexpected_scan_error(
 3604|       |                        scan_error::invalid_scanned_value,
 3605|       |                        "'u'-option disallows negative values");
 3606|       |                }
 3607|       |            }
 3608|      0|        }
 3609|       |
 3610|    330|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 0, False: 330]
  ------------------
 3611|      0|            value = T{0};
 3612|      0|            return std::next(prefix_result.iterator);
 3613|      0|        }
 3614|       |
 3615|    330|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|    330|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 316, False: 14]
  |  |  ------------------
  ------------------
 3616|    316|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|    316|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    316|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    316|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    316|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 316]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    316|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    316|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|    316|                    parse_integer_digits_without_thsep(
 3618|    316|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|    316|                        prefix_result.parsed_base));
 3620|       |
 3621|    316|            auto buf = make_contiguous_buffer(
 3622|    316|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|    316|            SCN_TRY(result_it,
  ------------------
  |  | 3940|    316|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    316|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    316|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    316|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 316, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    316|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    316|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    316|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    316|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    316|    }                                                  \
  |  |  |  | 3939|    316|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|      0|                                        prefix_result.parsed_base));
 3626|       |
 3627|      0|            return ranges::next(
 3628|      0|                prefix_result.iterator,
 3629|      0|                ranges::distance(buf.view().begin(), result_it));
 3630|    316|        }
 3631|       |
 3632|     14|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|     14|            localized_number_formatting_options<CharT>{loc};
 3637|     14|#endif
 3638|       |
 3639|     14|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|     14|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     14|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     14|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 14, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     14|    }                                                  \
  |  |  |  | 3939|     14|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|      0|                parse_integer_digits_with_thsep(
 3641|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|      0|                    prefix_result.parsed_base, locale_options));
 3643|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|      0|            parse_digits_result;
 3645|       |
 3646|      0|        auto nothsep_source_view =
 3647|      0|            std::basic_string_view<CharT>{nothsep_source};
 3648|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|      0|            nothsep_source_it,
 3650|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|      0|                                prefix_result.parsed_base));
 3652|       |
 3653|      0|        return ranges::next(
 3654|      0|            prefix_result.iterator,
 3655|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|      0|                ranges::ssize(thsep_indices));
 3657|      0|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEmEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3589|    104|    {
 3590|    104|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|    104|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    104|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    104|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    104|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 104]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    104|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    104|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|    104|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|    104|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 0, False: 104]
  ------------------
 3594|      0|            if constexpr (!std::is_signed_v<T>) {
 3595|      0|                return detail::unexpected_scan_error(
 3596|      0|                    scan_error::invalid_scanned_value,
 3597|      0|                    "Unexpected '-' sign when parsing an "
 3598|      0|                    "unsigned value");
 3599|       |            }
 3600|       |            else {
 3601|       |                if (specs.type ==
 3602|       |                    detail::presentation_type::int_unsigned_decimal) {
 3603|       |                    return detail::unexpected_scan_error(
 3604|       |                        scan_error::invalid_scanned_value,
 3605|       |                        "'u'-option disallows negative values");
 3606|       |                }
 3607|       |            }
 3608|      0|        }
 3609|       |
 3610|    104|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 0, False: 104]
  ------------------
 3611|      0|            value = T{0};
 3612|      0|            return std::next(prefix_result.iterator);
 3613|      0|        }
 3614|       |
 3615|    104|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|    104|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 104, False: 0]
  |  |  ------------------
  ------------------
 3616|    104|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|    104|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    104|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    104|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    104|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 104, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    104|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    104|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    104|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    104|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    104|    }                                                  \
  |  |  |  | 3939|    104|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|      0|                    parse_integer_digits_without_thsep(
 3618|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|      0|                        prefix_result.parsed_base));
 3620|       |
 3621|      0|            auto buf = make_contiguous_buffer(
 3622|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|      0|                                        prefix_result.parsed_base));
 3626|       |
 3627|      0|            return ranges::next(
 3628|      0|                prefix_result.iterator,
 3629|      0|                ranges::distance(buf.view().begin(), result_it));
 3630|      0|        }
 3631|       |
 3632|      0|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|      0|            localized_number_formatting_options<CharT>{loc};
 3637|      0|#endif
 3638|       |
 3639|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|      0|                parse_integer_digits_with_thsep(
 3641|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|      0|                    prefix_result.parsed_base, locale_options));
 3643|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|      0|            parse_digits_result;
 3645|       |
 3646|      0|        auto nothsep_source_view =
 3647|      0|            std::basic_string_view<CharT>{nothsep_source};
 3648|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|      0|            nothsep_source_it,
 3650|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|      0|                                prefix_result.parsed_base));
 3652|       |
 3653|      0|        return ranges::next(
 3654|      0|            prefix_result.iterator,
 3655|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|      0|                ranges::ssize(thsep_indices));
 3657|      0|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEmEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3589|    744|    {
 3590|    744|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|    744|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    744|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    744|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    744|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 744]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    744|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    744|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|    744|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|    744|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 0, False: 744]
  ------------------
 3594|      0|            if constexpr (!std::is_signed_v<T>) {
 3595|      0|                return detail::unexpected_scan_error(
 3596|      0|                    scan_error::invalid_scanned_value,
 3597|      0|                    "Unexpected '-' sign when parsing an "
 3598|      0|                    "unsigned value");
 3599|       |            }
 3600|       |            else {
 3601|       |                if (specs.type ==
 3602|       |                    detail::presentation_type::int_unsigned_decimal) {
 3603|       |                    return detail::unexpected_scan_error(
 3604|       |                        scan_error::invalid_scanned_value,
 3605|       |                        "'u'-option disallows negative values");
 3606|       |                }
 3607|       |            }
 3608|      0|        }
 3609|       |
 3610|    744|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 0, False: 744]
  ------------------
 3611|      0|            value = T{0};
 3612|      0|            return std::next(prefix_result.iterator);
 3613|      0|        }
 3614|       |
 3615|    744|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|    744|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 744, False: 0]
  |  |  ------------------
  ------------------
 3616|    744|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|    744|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    744|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    744|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    744|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 744]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    744|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    744|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|    744|                    parse_integer_digits_without_thsep(
 3618|    744|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|    744|                        prefix_result.parsed_base));
 3620|       |
 3621|    744|            auto buf = make_contiguous_buffer(
 3622|    744|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|    744|            SCN_TRY(result_it,
  ------------------
  |  | 3940|    744|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    744|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    744|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    744|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 744, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    744|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    744|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    744|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    744|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    744|    }                                                  \
  |  |  |  | 3939|    744|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|      0|                                        prefix_result.parsed_base));
 3626|       |
 3627|      0|            return ranges::next(
 3628|      0|                prefix_result.iterator,
 3629|      0|                ranges::distance(buf.view().begin(), result_it));
 3630|    744|        }
 3631|       |
 3632|      0|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|      0|            localized_number_formatting_options<CharT>{loc};
 3637|      0|#endif
 3638|       |
 3639|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|      0|                parse_integer_digits_with_thsep(
 3641|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|      0|                    prefix_result.parsed_base, locale_options));
 3643|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|      0|            parse_digits_result;
 3645|       |
 3646|      0|        auto nothsep_source_view =
 3647|      0|            std::basic_string_view<CharT>{nothsep_source};
 3648|      0|        SCN_TRY(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|      0|            nothsep_source_it,
 3650|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|      0|                                prefix_result.parsed_base));
 3652|       |
 3653|      0|        return ranges::next(
 3654|      0|            prefix_result.iterator,
 3655|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|      0|                ranges::ssize(thsep_indices));
 3657|      0|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3155|    876|    {
 3156|    876|        reader_error_handler eh{};
 3157|    876|        get_derived().check_specs_impl(specs, eh);
 3158|    876|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|    876|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 434, False: 442]
  |  |  ------------------
  ------------------
 3159|    434|            return detail::unexpected_scan_error(
 3160|    434|                scan_error::invalid_format_string, eh.m_msg);
 3161|    434|        }
 3162|    442|        return {};
 3163|    876|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3167|    876|    {
 3168|    876|        return static_cast<Derived&>(*this);
 3169|    876|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4177|    876|    {
 4178|    876|        detail::check_float_type_specs(specs, eh);
 4179|    876|    }
_ZNK3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3150|    890|    {
 3151|    890|        return true;
 3152|    890|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4249|    438|    {
 4250|    438|        unsigned options{};
 4251|    438|        if (specs.localized) {
  ------------------
  |  Branch (4251:13): [True: 14, False: 424]
  ------------------
 4252|     14|            options |= float_reader_base::allow_thsep;
 4253|     14|        }
 4254|       |
 4255|    438|        SCN_GCC_COMPAT_PUSH
 4256|    438|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4257|       |
 4258|    438|        switch (specs.type) {
 4259|      8|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4259:13): [True: 8, False: 430]
  ------------------
 4260|      8|                return options | float_reader_base::allow_fixed;
 4261|       |
 4262|      4|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4262:13): [True: 4, False: 434]
  ------------------
 4263|      4|                return options | float_reader_base::allow_scientific;
 4264|       |
 4265|     18|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4265:13): [True: 18, False: 420]
  ------------------
 4266|     18|                return options | float_reader_base::allow_hex;
 4267|       |
 4268|      2|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4268:13): [True: 2, False: 436]
  ------------------
 4269|      2|                return options | float_reader_base::allow_scientific |
 4270|      2|                       float_reader_base::allow_fixed;
 4271|       |
 4272|    406|            case detail::presentation_type::none:
  ------------------
  |  Branch (4272:13): [True: 406, False: 32]
  ------------------
 4273|    406|                return options | float_reader_base::allow_scientific |
 4274|    406|                       float_reader_base::allow_fixed |
 4275|    406|                       float_reader_base::allow_hex;
 4276|       |
 4277|      0|            default:
  ------------------
  |  Branch (4277:13): [True: 0, False: 438]
  ------------------
 4278|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4279|    438|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4280|    438|        }
 4281|       |
 4282|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4283|    438|    }
_ZN3scn2v44impl12float_readerIwEC2Ej:
 3701|    438|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v44impl35localized_number_formatting_optionsIwEC2Ev:
 1869|    886|    localized_number_formatting_options() = default;
_ZN3scn2v44impl24contiguous_range_factoryIwEC2Ev:
 1630|  1.77k|    contiguous_range_factory() = default;
_ZN3scn2v44impl12float_readerIwE17handle_separatorsEv:
 4089|    758|    {
 4090|    758|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4090:13): [True: 758, False: 0]
  ------------------
 4091|    758|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4091:13): [True: 758, False: 0]
  ------------------
 4092|    758|            return;
 4093|    758|        }
 4094|       |
 4095|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4096|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4096:13): [True: 0, False: 0]
  ------------------
 4097|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4097:27): [True: 0, False: 0]
  ------------------
 4098|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4098:21): [True: 0, False: 0]
  ------------------
 4099|      0|                    ch = CharT{'.'};
 4100|      0|                }
 4101|      0|            }
 4102|      0|        }
 4103|       |
 4104|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4104:13): [True: 0, False: 0]
  ------------------
 4105|      0|            return;
 4106|      0|        }
 4107|       |
 4108|      0|        auto first =
 4109|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4110|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4110:13): [True: 0, False: 0]
  ------------------
 4111|      0|            return;
 4112|      0|        }
 4113|       |
 4114|      0|        m_thsep_indices.push_back(
 4115|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4116|       |
 4117|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4117:31): [True: 0, False: 0]
  ------------------
 4118|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4118:17): [True: 0, False: 0]
  ------------------
 4119|      0|                *first++ = std::move(*it);
 4120|      0|            }
 4121|      0|            else {
 4122|      0|                m_thsep_indices.push_back(
 4123|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4124|      0|            }
 4125|      0|        }
 4126|       |
 4127|      0|        str.erase(first, str.end());
 4128|      0|    }
_ZNK3scn2v44impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1685|    392|    {
 1686|    392|        return m_storage.has_value();
 1687|    392|    }
_ZNR3scn2v44impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1690|    196|    {
 1691|    196|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  930|    196|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    196|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1692|    196|        return *m_storage;
 1693|    196|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EclESC_SJ_SL_:
  762|    122|    {
  763|    122|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|    122|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    122|    }
_ZN3scn2v44impl12float_readerIwE21read_source_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3720|      8|    {
 3721|      8|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3722|      8|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  864|      8|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 8]
  |  |  ------------------
  ------------------
 3723|      0|            m_locale_options.thousands_sep = CharT{0};
 3724|      0|        }
 3725|       |
 3726|      8|        return read_source_impl(range);
 3727|      8|    }
_ZN3scn2v44impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_:
 3746|    122|    {
 3747|    122|        SCN_TRY(sign_result,
  ------------------
  |  | 3940|    122|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    122|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    122|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    122|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 122]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    122|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    122|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3748|    122|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3749|    122|        auto it = sign_result.first;
 3750|    122|        m_sign = sign_result.second;
 3751|       |
 3752|    122|        auto digits_begin = it;
 3753|    122|        auto r = ranges::subrange{it, range.end()};
 3754|       |        if constexpr (ranges::contiguous_range<Range> &&
 3755|       |                      ranges::sized_range<Range>) {
 3756|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3757|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3758|       |                SCN_TRY_ASSIGN(
 3759|       |                    it,
 3760|       |                    do_read_source_impl(
 3761|       |                        r,
 3762|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3763|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3764|       |            }
 3765|       |            else {
 3766|       |                auto cb = [&](const auto& rr)
 3767|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3768|       |                    auto res = read_all(rr);
 3769|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3770|       |                        return detail::unexpected_scan_error(
 3771|       |                            scan_error::invalid_scanned_value,
 3772|       |                            "Invalid float value");
 3773|       |                    }
 3774|       |                    return res;
 3775|       |                };
 3776|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3777|       |            }
 3778|       |        }
 3779|    122|        else {
 3780|    122|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3935|    122|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    122|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    122|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 122, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    122|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|    122|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    122|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    122|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|    122|    }                                                  \
  |  | 3939|    122|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    122|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3781|      0|                it,
 3782|      0|                do_read_source_impl(
 3783|      0|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3784|      0|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3785|      0|        }
 3786|       |
 3787|    122|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|    122|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    122|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3788|       |
 3789|      0|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3789:13): [True: 0, False: 0]
  |  Branch (3789:48): [True: 0, False: 0]
  ------------------
 3790|      0|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3790:13): [True: 0, False: 0]
  ------------------
 3791|      0|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3791:13): [True: 0, False: 0]
  ------------------
 3792|      0|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3793|      0|        }
 3794|       |
 3795|      0|        handle_separators();
 3796|       |
 3797|      0|        return it;
 3798|    122|    }
_ZN3scn2v44impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEZNS3_16read_source_implISG_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_EUlRKSO_E_ZNSK_ISG_EEST_SO_EUlSV_E0_EEST_SO_OT0_OT1_:
 4032|    122|    {
 4033|    122|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4034|    122|        const bool allowed_nonhex =
 4035|    122|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4036|    122|             ~static_cast<unsigned>(allow_hex)) != 0;
 4037|       |
 4038|    122|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4038:39): [True: 122, False: 0]
  |  Branch (4038:45): [True: 0, False: 122]
  ------------------
 4039|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4040|      0|                scan_error::invalid_scanned_value,
 4041|      0|                "Invalid infinite floating-point value"));
 4042|      0|        }
 4043|    122|        else if (r) {
  ------------------
  |  Branch (4043:18): [True: 0, False: 122]
  ------------------
 4044|      0|            return *r;
 4045|      0|        }
 4046|       |
 4047|    122|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4047:39): [True: 122, False: 0]
  |  Branch (4047:45): [True: 0, False: 122]
  ------------------
 4048|      0|            return unexpected(r.error());
 4049|      0|        }
 4050|    122|        else if (r) {
  ------------------
  |  Branch (4050:18): [True: 0, False: 122]
  ------------------
 4051|      0|            return *r;
 4052|      0|        }
 4053|       |
 4054|    122|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4054:13): [True: 114, False: 8]
  |  Branch (4054:28): [True: 6, False: 108]
  ------------------
 4055|       |            // only hex allowed:
 4056|       |            // prefix "0x" allowed, not required
 4057|      6|            auto it = range.begin();
 4058|       |
 4059|      6|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4059:22): [True: 0, False: 6]
  ------------------
 4060|      0|                m_kind = float_kind::hex_with_prefix;
 4061|      0|                it = *r;
 4062|      0|            }
 4063|      6|            else {
 4064|      6|                m_kind = float_kind::hex_without_prefix;
 4065|      6|            }
 4066|       |
 4067|      6|            return read_hex(ranges::subrange{it, range.end()});
 4068|      6|        }
 4069|    116|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4069:13): [True: 8, False: 108]
  |  Branch (4069:29): [True: 8, False: 0]
  ------------------
 4070|       |            // only nonhex allowed:
 4071|       |            // no prefix allowed
 4072|      8|            m_kind = float_kind::generic;
 4073|      8|            return read_regular_float(range);
 4074|      8|        }
 4075|       |        // both hex and nonhex allowed:
 4076|       |        // check for "0x" prefix -> hex,
 4077|       |        // regular otherwise
 4078|       |
 4079|    108|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  865|    108|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 108]
  |  |  ------------------
  ------------------
 4080|      0|            m_kind = float_kind::hex_with_prefix;
 4081|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4082|      0|        }
 4083|       |
 4084|    108|        m_kind = float_kind::generic;
 4085|    108|        return read_regular(range);
 4086|    108|    }
_ZN3scn2v44impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3840|    122|    {
 3841|    122|        auto it = range.begin();
 3842|    122|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3842:73): [True: 122, False: 0]
  ------------------
 3843|    122|            return unexpected(r.error());
 3844|    122|        }
 3845|      0|        else {
 3846|      0|            it = *r;
 3847|      0|        }
 3848|       |
 3849|      0|        if (auto r = read_matching_string_classic_nocase(
 3850|      0|                ranges::subrange{it, range.end()}, "inity");
 3851|      0|            !r) {
  ------------------
  |  Branch (3851:13): [True: 0, False: 0]
  ------------------
 3852|      0|            m_kind = float_kind::inf_short;
 3853|      0|            return it;
 3854|      0|        }
 3855|      0|        else {
 3856|      0|            m_kind = float_kind::inf_long;
 3857|      0|            return *r;
 3858|      0|        }
 3859|      0|    }
_ZN3scn2v44impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3863|    122|    {
 3864|    122|        auto it = range.begin();
 3865|    122|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3865:73): [True: 122, False: 0]
  ------------------
 3866|    122|            return r.transform_error(map_parse_error_to_scan_error(
 3867|    122|                scan_error::invalid_scanned_value,
 3868|    122|                "Invalid floating-point NaN value"));
 3869|    122|        }
 3870|      0|        else {
 3871|      0|            it = *r;
 3872|      0|        }
 3873|       |
 3874|      0|        if (auto r =
 3875|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3876|      0|            !r) {
  ------------------
  |  Branch (3876:13): [True: 0, False: 0]
  ------------------
 3877|      0|            m_kind = float_kind::nan_simple;
 3878|      0|            return it;
 3879|      0|        }
 3880|      0|        else {
 3881|      0|            it = *r;
 3882|      0|        }
 3883|       |
 3884|      0|        auto payload_beg_it = it;
 3885|      0|        it = read_while_code_unit(
 3886|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3887|      0|                return is_ascii_char(ch) &&
 3888|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3889|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3890|      0|            });
 3891|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3892|       |
 3893|      0|        m_kind = float_kind::nan_with_payload;
 3894|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3894:18): [True: 0, False: 0]
  ------------------
 3895|      0|                                             ')')) {
 3896|      0|            return *r;
 3897|      0|        }
 3898|      0|        return detail::unexpected_scan_error(
 3899|      0|            scan_error::invalid_scanned_value,
 3900|      0|            "Invalid floating-point NaN payload");
 3901|      0|    }
_ZN3scn2v44impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3833|    114|    {
 3834|    114|        return read_matching_string_classic_nocase(range, "0x");
 3835|    114|    }
_ZN3scn2v44impl12float_readerIwE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3934|      6|    {
 3935|      6|        auto it = range.begin();
 3936|       |
 3937|      6|        std::ptrdiff_t digits_count = 0;
 3938|      6|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3939|      6|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6, False: 0]
  |  |  ------------------
  ------------------
 3940|      6|            return r.transform_error(map_parse_error_to_scan_error(
 3941|      6|                scan_error::invalid_scanned_value,
 3942|      6|                "Invalid hexadecimal floating-point value"));
 3943|      6|        }
 3944|      0|        else {
 3945|      0|            digits_count += ranges::distance(it, *r);
 3946|      0|            it = *r;
 3947|      0|        }
 3948|       |
 3949|      0|        m_integral_part_length = digits_count;
 3950|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3950:18): [True: 0, False: 0]
  ------------------
 3951|      0|                                             m_locale_options.decimal_point)) {
 3952|      0|            it = *r;
 3953|      0|        }
 3954|       |
 3955|      0|        if (auto r =
  ------------------
  |  Branch (3955:18): [True: 0, False: 0]
  ------------------
 3956|      0|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3957|      0|            digits_count += ranges::distance(it, *r);
 3958|      0|            it = *r;
 3959|      0|        }
 3960|       |
 3961|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3962|      0|            return detail::unexpected_scan_error(
 3963|      0|                scan_error::invalid_scanned_value,
 3964|      0|                "No significand digits in hexfloat");
 3965|      0|        }
 3966|       |
 3967|      0|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3968|       |
 3969|      0|        return it;
 3970|      0|    }
_ZN3scn2v44impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3818|      6|    {
 3819|      6|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  865|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 6]
  |  |  |  Branch (865:45): [True: 0, False: 6]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3820|      6|                         thsep_allowed)) {
 3821|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3822|      0|                return char_to_int(ch) < 16 ||
 3823|      0|                       ch == m_locale_options.thousands_sep;
 3824|      0|            });
 3825|      0|        }
 3826|       |
 3827|      6|        return read_while1_code_unit(
 3828|      6|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3829|      6|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_:
  742|      6|        : m_fptr([](storage fn,
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|      6|              if constexpr (std::is_void_v<R>) {
  746|      6|                  obj(static_cast<decltype(args)>(args)...);
  747|      6|              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
  752|      6|          m_storage(std::addressof(f))
  753|      6|    {
  754|      6|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEwE_clES18_w:
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlwE0_EEDaNS3_7storageE:
  683|      6|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|      6|        else if constexpr (std::is_object_v<T>) {
  688|      6|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|      6|    }
_ZZN3scn2v44impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlwE0_clEw:
 3828|      6|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_TnPNSP_9enable_ifIXsr3stdE11is_object_vISR_EEvE4typeELPv0EEEPSR_:
  660|      6|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      6|        {
  662|      6|        }
_ZN3scn2v44impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3975|    116|    {
 3976|    116|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3977|    116|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3977:35): [True: 110, False: 6]
  |  Branch (3977:50): [True: 2, False: 108]
  ------------------
 3978|       |
 3979|    116|        auto it = ranges::begin(range);
 3980|    116|        std::ptrdiff_t digits_count = 0;
 3981|       |
 3982|    116|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3983|    116|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|    116|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 116, False: 0]
  |  |  ------------------
  ------------------
 3984|    116|            return r.transform_error(
 3985|    116|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3986|    116|                                              "Invalid floating-point value"));
 3987|    116|        }
 3988|      0|        else {
 3989|      0|            digits_count += ranges::distance(it, *r);
 3990|      0|            it = *r;
 3991|      0|        }
 3992|       |
 3993|      0|        m_integral_part_length = digits_count;
 3994|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3994:18): [True: 0, False: 0]
  ------------------
 3995|      0|                                             m_locale_options.decimal_point)) {
 3996|      0|            it = *r;
 3997|      0|        }
 3998|       |
 3999|      0|        if (auto r =
  ------------------
  |  Branch (3999:18): [True: 0, False: 0]
  ------------------
 4000|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4001|      0|            digits_count += ranges::distance(it, *r);
 4002|      0|            it = *r;
 4003|      0|        }
 4004|       |
 4005|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 4006|      0|            return detail::unexpected_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "No significand digits in float");
 4009|      0|        }
 4010|       |
 4011|      0|        auto beg_exp_it = it;
 4012|      0|        if (allowed_exp) {
  ------------------
  |  Branch (4012:13): [True: 0, False: 0]
  ------------------
 4013|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4014|      0|        }
 4015|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4015:13): [True: 0, False: 0]
  |  Branch (4015:29): [True: 0, False: 0]
  ------------------
 4016|      0|            return detail::unexpected_scan_error(
 4017|      0|                scan_error::invalid_scanned_value,
 4018|      0|                "No exponent given to scientific float");
 4019|      0|        }
 4020|       |
 4021|      0|        m_kind =
 4022|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4022:13): [True: 0, False: 0]
  ------------------
 4023|       |
 4024|      0|        return it;
 4025|      0|    }
_ZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3803|    116|    {
 3804|    116|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  865|    116|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 116]
  |  |  |  Branch (865:45): [True: 0, False: 116]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3805|    116|                         thsep_allowed)) {
 3806|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3807|      0|                return char_to_int(ch) < 10 ||
 3808|      0|                       ch == m_locale_options.thousands_sep;
 3809|      0|            });
 3810|      0|        }
 3811|       |
 3812|    116|        return read_while1_code_unit(
 3813|    116|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3814|    116|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_:
  742|    116|        : m_fptr([](storage fn,
  743|    116|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    116|              cvref<T> obj = *get<T>(fn);
  745|    116|              if constexpr (std::is_void_v<R>) {
  746|    116|                  obj(static_cast<decltype(args)>(args)...);
  747|    116|              }
  748|    116|              else {
  749|    116|                  return obj(static_cast<decltype(args)>(args)...);
  750|    116|              }
  751|    116|          }),
  752|    116|          m_storage(std::addressof(f))
  753|    116|    {
  754|    116|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEwE_clES18_w:
  743|    116|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    116|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    116|              else {
  749|    116|                  return obj(static_cast<decltype(args)>(args)...);
  750|    116|              }
  751|    116|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlwE0_EEDaNS3_7storageE:
  683|    116|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    116|        else if constexpr (std::is_object_v<T>) {
  688|    116|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    116|    }
_ZZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlwE0_clEw:
 3813|    116|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_TnPNSP_9enable_ifIXsr3stdE11is_object_vISR_EEvE4typeELPv0EEEPSR_:
  660|    116|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    116|        {
  662|    116|        }
_ZN3scn2v44impl12float_readerIwE11read_sourceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3706|    114|    {
 3707|    114|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  865|    114|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 114]
  |  |  ------------------
  ------------------
 3708|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3709|      0|                classic_with_thsep_tag{}};
 3710|      0|        }
 3711|       |
 3712|    114|        return read_source_impl(range);
 3713|    114|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|    764|    {
  763|    764|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|    764|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    764|    }
_ZN3scn2v44impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3720|      6|    {
 3721|      6|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3722|      6|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  864|      6|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 6]
  |  |  ------------------
  ------------------
 3723|      0|            m_locale_options.thousands_sep = CharT{0};
 3724|      0|        }
 3725|       |
 3726|      6|        return read_source_impl(range);
 3727|      6|    }
_ZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3746|    764|    {
 3747|    764|        SCN_TRY(sign_result,
  ------------------
  |  | 3940|    764|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    764|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    764|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    764|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 764]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    764|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    764|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3748|    764|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3749|    764|        auto it = sign_result.first;
 3750|    764|        m_sign = sign_result.second;
 3751|       |
 3752|    764|        auto digits_begin = it;
 3753|    764|        auto r = ranges::subrange{it, range.end()};
 3754|       |        if constexpr (ranges::contiguous_range<Range> &&
 3755|    764|                      ranges::sized_range<Range>) {
 3756|    764|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  865|  1.52k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 764]
  |  |  |  Branch (865:45): [True: 0, False: 764]
  |  |  |  Branch (865:45): [True: 0, False: 764]
  |  |  ------------------
  ------------------
 3757|    764|                             m_locale_options.decimal_point != CharT{'.'})) {
 3758|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|      0|    }                                                  \
  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3759|      0|                    it,
 3760|      0|                    do_read_source_impl(
 3761|      0|                        r,
 3762|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3763|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3764|      0|            }
 3765|    764|            else {
 3766|    764|                auto cb = [&](const auto& rr)
 3767|    764|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3768|    764|                    auto res = read_all(rr);
 3769|    764|                    if (SCN_UNLIKELY(res == r.begin())) {
 3770|    764|                        return detail::unexpected_scan_error(
 3771|    764|                            scan_error::invalid_scanned_value,
 3772|    764|                            "Invalid float value");
 3773|    764|                    }
 3774|    764|                    return res;
 3775|    764|                };
 3776|    764|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3935|    764|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    764|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    764|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 6, False: 758]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|      6|    }                                                  \
  |  | 3939|    764|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    764|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3777|    758|            }
 3778|       |        }
 3779|       |        else {
 3780|       |            SCN_TRY_ASSIGN(
 3781|       |                it,
 3782|       |                do_read_source_impl(
 3783|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3784|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3785|       |        }
 3786|       |
 3787|    764|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|    764|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    764|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3788|       |
 3789|    758|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3789:13): [True: 758, False: 0]
  |  Branch (3789:48): [True: 758, False: 0]
  ------------------
 3790|    758|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3790:13): [True: 758, False: 0]
  ------------------
 3791|    758|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3791:13): [True: 758, False: 0]
  ------------------
 3792|    758|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3793|    758|        }
 3794|       |
 3795|    758|        handle_separators();
 3796|       |
 3797|    758|        return it;
 3798|    764|    }
_ZN3scn2v44impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3840|    764|    {
 3841|    764|        auto it = range.begin();
 3842|    764|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3842:73): [True: 764, False: 0]
  ------------------
 3843|    764|            return unexpected(r.error());
 3844|    764|        }
 3845|      0|        else {
 3846|      0|            it = *r;
 3847|      0|        }
 3848|       |
 3849|      0|        if (auto r = read_matching_string_classic_nocase(
 3850|      0|                ranges::subrange{it, range.end()}, "inity");
 3851|      0|            !r) {
  ------------------
  |  Branch (3851:13): [True: 0, False: 0]
  ------------------
 3852|      0|            m_kind = float_kind::inf_short;
 3853|      0|            return it;
 3854|      0|        }
 3855|      0|        else {
 3856|      0|            m_kind = float_kind::inf_long;
 3857|      0|            return *r;
 3858|      0|        }
 3859|      0|    }
_ZN3scn2v44impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3863|    764|    {
 3864|    764|        auto it = range.begin();
 3865|    764|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3865:73): [True: 764, False: 0]
  ------------------
 3866|    764|            return r.transform_error(map_parse_error_to_scan_error(
 3867|    764|                scan_error::invalid_scanned_value,
 3868|    764|                "Invalid floating-point NaN value"));
 3869|    764|        }
 3870|      0|        else {
 3871|      0|            it = *r;
 3872|      0|        }
 3873|       |
 3874|      0|        if (auto r =
 3875|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3876|      0|            !r) {
  ------------------
  |  Branch (3876:13): [True: 0, False: 0]
  ------------------
 3877|      0|            m_kind = float_kind::nan_simple;
 3878|      0|            return it;
 3879|      0|        }
 3880|      0|        else {
 3881|      0|            it = *r;
 3882|      0|        }
 3883|       |
 3884|      0|        auto payload_beg_it = it;
 3885|      0|        it = read_while_code_unit(
 3886|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3887|      0|                return is_ascii_char(ch) &&
 3888|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3889|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3890|      0|            });
 3891|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3892|       |
 3893|      0|        m_kind = float_kind::nan_with_payload;
 3894|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3894:18): [True: 0, False: 0]
  ------------------
 3895|      0|                                             ')')) {
 3896|      0|            return *r;
 3897|      0|        }
 3898|      0|        return detail::unexpected_scan_error(
 3899|      0|            scan_error::invalid_scanned_value,
 3900|      0|            "Invalid floating-point NaN payload");
 3901|      0|    }
_ZN3scn2v44impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|    758|    {
 3834|    758|        return read_matching_string_classic_nocase(range, "0x");
 3835|    758|    }
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2094|      6|{
 2095|      6|    auto it = read_while_code_unit(range, pred);
 2096|      6|    if (it == range.begin()) {
  ------------------
  |  Branch (2096:9): [True: 6, False: 0]
  ------------------
 2097|      6|        return unexpected(parse_error::error);
 2098|      6|    }
 2099|      0|    return it;
 2100|      6|}
_ZN3scn2v44impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3975|      6|    {
 3976|      6|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3977|      6|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3977:35): [True: 4, False: 2]
  |  Branch (3977:50): [True: 2, False: 2]
  ------------------
 3978|       |
 3979|      6|        auto it = ranges::begin(range);
 3980|      6|        std::ptrdiff_t digits_count = 0;
 3981|       |
 3982|      6|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3983|      6|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6, False: 0]
  |  |  ------------------
  ------------------
 3984|      6|            return r.transform_error(
 3985|      6|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3986|      6|                                              "Invalid floating-point value"));
 3987|      6|        }
 3988|      0|        else {
 3989|      0|            digits_count += ranges::distance(it, *r);
 3990|      0|            it = *r;
 3991|      0|        }
 3992|       |
 3993|      0|        m_integral_part_length = digits_count;
 3994|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3994:18): [True: 0, False: 0]
  ------------------
 3995|      0|                                             m_locale_options.decimal_point)) {
 3996|      0|            it = *r;
 3997|      0|        }
 3998|       |
 3999|      0|        if (auto r =
  ------------------
  |  Branch (3999:18): [True: 0, False: 0]
  ------------------
 4000|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4001|      0|            digits_count += ranges::distance(it, *r);
 4002|      0|            it = *r;
 4003|      0|        }
 4004|       |
 4005|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 4006|      0|            return detail::unexpected_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "No significand digits in float");
 4009|      0|        }
 4010|       |
 4011|      0|        auto beg_exp_it = it;
 4012|      0|        if (allowed_exp) {
  ------------------
  |  Branch (4012:13): [True: 0, False: 0]
  ------------------
 4013|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4014|      0|        }
 4015|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4015:13): [True: 0, False: 0]
  |  Branch (4015:29): [True: 0, False: 0]
  ------------------
 4016|      0|            return detail::unexpected_scan_error(
 4017|      0|                scan_error::invalid_scanned_value,
 4018|      0|                "No exponent given to scientific float");
 4019|      0|        }
 4020|       |
 4021|      0|        m_kind =
 4022|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4022:13): [True: 0, False: 0]
  ------------------
 4023|       |
 4024|      0|        return it;
 4025|      0|    }
_ZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3803|      6|    {
 3804|      6|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  865|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 6]
  |  |  |  Branch (865:45): [True: 0, False: 6]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3805|      6|                         thsep_allowed)) {
 3806|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3807|      0|                return char_to_int(ch) < 10 ||
 3808|      0|                       ch == m_locale_options.thousands_sep;
 3809|      0|            });
 3810|      0|        }
 3811|       |
 3812|      6|        return read_while1_code_unit(
 3813|      6|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3814|      6|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|      6|        : m_fptr([](storage fn,
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|      6|              if constexpr (std::is_void_v<R>) {
  746|      6|                  obj(static_cast<decltype(args)>(args)...);
  747|      6|              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
  752|      6|          m_storage(std::addressof(f))
  753|      6|    {
  754|      6|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES10_w:
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  683|      6|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|      6|        else if constexpr (std::is_object_v<T>) {
  688|      6|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|      6|    }
_ZZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3813|      6|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|      6|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      6|        {
  662|      6|        }
_ZN3scn2v44impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 4032|    764|    {
 4033|    764|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4034|    764|        const bool allowed_nonhex =
 4035|    764|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4036|    764|             ~static_cast<unsigned>(allow_hex)) != 0;
 4037|       |
 4038|    764|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4038:39): [True: 764, False: 0]
  |  Branch (4038:45): [True: 0, False: 764]
  ------------------
 4039|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4040|      0|                scan_error::invalid_scanned_value,
 4041|      0|                "Invalid infinite floating-point value"));
 4042|      0|        }
 4043|    764|        else if (r) {
  ------------------
  |  Branch (4043:18): [True: 0, False: 764]
  ------------------
 4044|      0|            return *r;
 4045|      0|        }
 4046|       |
 4047|    764|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4047:39): [True: 764, False: 0]
  |  Branch (4047:45): [True: 0, False: 764]
  ------------------
 4048|      0|            return unexpected(r.error());
 4049|      0|        }
 4050|    764|        else if (r) {
  ------------------
  |  Branch (4050:18): [True: 0, False: 764]
  ------------------
 4051|      0|            return *r;
 4052|      0|        }
 4053|       |
 4054|    764|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4054:13): [True: 758, False: 6]
  |  Branch (4054:28): [True: 12, False: 746]
  ------------------
 4055|       |            // only hex allowed:
 4056|       |            // prefix "0x" allowed, not required
 4057|     12|            auto it = range.begin();
 4058|       |
 4059|     12|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4059:22): [True: 0, False: 12]
  ------------------
 4060|      0|                m_kind = float_kind::hex_with_prefix;
 4061|      0|                it = *r;
 4062|      0|            }
 4063|     12|            else {
 4064|     12|                m_kind = float_kind::hex_without_prefix;
 4065|     12|            }
 4066|       |
 4067|     12|            return read_hex(ranges::subrange{it, range.end()});
 4068|     12|        }
 4069|    752|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4069:13): [True: 6, False: 746]
  |  Branch (4069:29): [True: 6, False: 0]
  ------------------
 4070|       |            // only nonhex allowed:
 4071|       |            // no prefix allowed
 4072|      6|            m_kind = float_kind::generic;
 4073|      6|            return read_regular_float(range);
 4074|      6|        }
 4075|       |        // both hex and nonhex allowed:
 4076|       |        // check for "0x" prefix -> hex,
 4077|       |        // regular otherwise
 4078|       |
 4079|    746|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  865|    746|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 746]
  |  |  ------------------
  ------------------
 4080|      0|            m_kind = float_kind::hex_with_prefix;
 4081|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4082|      0|        }
 4083|       |
 4084|    746|        m_kind = float_kind::generic;
 4085|    746|        return read_regular(range);
 4086|    746|    }
_ZZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3767|    758|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3768|    758|                    auto res = read_all(rr);
 3769|    758|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  865|    758|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 758]
  |  |  ------------------
  ------------------
 3770|      0|                        return detail::unexpected_scan_error(
 3771|      0|                            scan_error::invalid_scanned_value,
 3772|      0|                            "Invalid float value");
 3773|      0|                    }
 3774|    758|                    return res;
 3775|    758|                };
_ZN3scn2v44impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1937|    758|{
 1938|    758|    return ranges::next(range.begin(), range.end());
 1939|    758|}
_ZNK3scn2v46ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|    758|    {
  313|    758|        ranges::advance(x, bound);
  314|    758|        return x;
  315|    758|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|    758|    {
  275|    758|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|    758|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1675|    758|    {
 1676|    758|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|    758|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|    758|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1719|    758|    {
 1720|    758|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|    758|                      ranges::sized_range<Range>) {
 1725|    758|            m_storage.reset();
 1726|    758|            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|    758|    }
_ZN3scn2v44impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3706|    758|    {
 3707|    758|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  865|    758|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 758]
  |  |  ------------------
  ------------------
 3708|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3709|      0|                classic_with_thsep_tag{}};
 3710|      0|        }
 3711|       |
 3712|    758|        return read_source_impl(range);
 3713|    758|    }
_ZN3scn2v44impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3732|    758|    {
 3733|    758|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|    758|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    758|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3734|       |
 3735|    758|        const std::ptrdiff_t sign_len =
 3736|    758|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3736:13): [True: 0, False: 758]
  ------------------
 3737|       |
 3738|    758|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3940|    758|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    758|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    758|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    758|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 758, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    758|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    758|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    758|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    758|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    758|    }                                                  \
  |  |  |  | 3939|    758|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3739|      0|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3740|    758|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 4202|    122|    {
 4203|    122|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|    122|#if !SCN_DISABLE_LOCALE
 4206|    122|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 8, False: 114]
  ------------------
 4207|      8|            return read_impl<Range>(
 4208|      8|                range, rd,
 4209|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4210|      8|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|      8|                },
 4212|      8|                value, loc);
 4213|      8|        }
 4214|    114|#endif
 4215|       |
 4216|    114|        return read_impl<Range>(
 4217|    114|            range, rd,
 4218|    114|            [](float_reader<CharT>& r, auto&&... args) {
 4219|    114|                return r.read_source(SCN_FWD(args)...);
 4220|    114|            },
 4221|    114|            value);
 4222|    122|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNS1_12float_readerIwEENS1_12function_refIFSM_SP_SH_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4238|    122|    {
 4239|    122|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|    122|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|    122|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 122, False: 0]
  |  |  ------------------
  ------------------
 4241|    122|            return unexpected(r.error());
 4242|    122|        }
 4243|       |
 4244|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|      0|        return ranges::next(range.begin(), n);
 4246|      0|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_:
  742|      8|        : m_fptr([](storage fn,
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|      8|              if constexpr (std::is_void_v<R>) {
  746|      8|                  obj(static_cast<decltype(args)>(args)...);
  747|      8|              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
  752|      8|          m_storage(std::addressof(f))
  753|      8|    {
  754|      8|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1H_SC_SJ_SL_:
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|      8|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|      8|        else if constexpr (std::is_object_v<T>) {
  688|      8|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|      8|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSD_ST_EEEDaSW_SZ_:
 4209|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4210|      8|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|      8|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|      8|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      8|        {
  662|      8|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_:
  742|    114|        : m_fptr([](storage fn,
  743|    114|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    114|              cvref<T> obj = *get<T>(fn);
  745|    114|              if constexpr (std::is_void_v<R>) {
  746|    114|                  obj(static_cast<decltype(args)>(args)...);
  747|    114|              }
  748|    114|              else {
  749|    114|                  return obj(static_cast<decltype(args)>(args)...);
  750|    114|              }
  751|    114|          }),
  752|    114|          m_storage(std::addressof(f))
  753|    114|    {
  754|    114|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1H_SC_SJ_SL_:
  743|    114|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    114|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    114|              else {
  749|    114|                  return obj(static_cast<decltype(args)>(args)...);
  750|    114|              }
  751|    114|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|    114|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    114|        else if constexpr (std::is_object_v<T>) {
  688|    114|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    114|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSD_ST_EEEDaSW_SZ_:
 4218|    114|            [](float_reader<CharT>& r, auto&&... args) {
 4219|    114|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|    114|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|    114|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|    114|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    114|        {
  662|    114|        }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4202|    316|    {
 4203|    316|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|    316|#if !SCN_DISABLE_LOCALE
 4206|    316|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 6, False: 310]
  ------------------
 4207|      6|            return read_impl<Range>(
 4208|      6|                range, rd,
 4209|      6|                [](float_reader<CharT>& r, auto&&... args) {
 4210|      6|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|      6|                },
 4212|      6|                value, loc);
 4213|      6|        }
 4214|    310|#endif
 4215|       |
 4216|    310|        return read_impl<Range>(
 4217|    310|            range, rd,
 4218|    310|            [](float_reader<CharT>& r, auto&&... args) {
 4219|    310|                return r.read_source(SCN_FWD(args)...);
 4220|    310|            },
 4221|    310|            value);
 4222|    316|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4238|    764|    {
 4239|    764|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|    764|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|    764|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6, False: 758]
  |  |  ------------------
  ------------------
 4241|      6|            return unexpected(r.error());
 4242|      6|        }
 4243|       |
 4244|    758|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|    758|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    758|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    758|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    758|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 758, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    758|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    758|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    758|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    758|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    758|    }                                                  \
  |  |  |  | 3939|    758|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|      0|        return ranges::next(range.begin(), n);
 4246|    758|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|      6|        : m_fptr([](storage fn,
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|      6|              if constexpr (std::is_void_v<R>) {
  746|      6|                  obj(static_cast<decltype(args)>(args)...);
  747|      6|              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
  752|      6|          m_storage(std::addressof(f))
  753|      6|    {
  754|      6|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|      6|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|      6|        else if constexpr (std::is_object_v<T>) {
  688|      6|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|      6|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4209|      6|                [](float_reader<CharT>& r, auto&&... args) {
 4210|      6|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|      6|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|      6|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      6|        {
  662|      6|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|    310|        : m_fptr([](storage fn,
  743|    310|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    310|              cvref<T> obj = *get<T>(fn);
  745|    310|              if constexpr (std::is_void_v<R>) {
  746|    310|                  obj(static_cast<decltype(args)>(args)...);
  747|    310|              }
  748|    310|              else {
  749|    310|                  return obj(static_cast<decltype(args)>(args)...);
  750|    310|              }
  751|    310|          }),
  752|    310|          m_storage(std::addressof(f))
  753|    310|    {
  754|    310|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|    310|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    310|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    310|              else {
  749|    310|                  return obj(static_cast<decltype(args)>(args)...);
  750|    310|              }
  751|    310|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|    310|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    310|        else if constexpr (std::is_object_v<T>) {
  688|    310|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    310|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4218|    310|            [](float_reader<CharT>& r, auto&&... args) {
 4219|    310|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|    310|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|    310|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|    310|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    310|        {
  662|    310|        }
_ZN3scn2v44impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEwEEDav:
 5848|  1.28k|{
 5849|       |    if constexpr (std::is_same_v<T, bool>) {
 5850|       |        return reader_impl_for_bool<CharT>{};
 5851|       |    }
 5852|       |    else if constexpr (std::is_same_v<T, char>) {
 5853|       |        return reader_impl_for_char<CharT>{};
 5854|       |    }
 5855|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5856|       |        return reader_impl_for_wchar<CharT>{};
 5857|       |    }
 5858|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5859|       |        return reader_impl_for_code_point<CharT>{};
 5860|       |    }
 5861|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5862|       |                       std::is_same_v<T, std::wstring_view>) {
 5863|       |        return reader_impl_for_string<CharT>{};
 5864|       |    }
 5865|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5866|  1.28k|                       std::is_same_v<T, std::wstring>) {
 5867|  1.28k|        return reader_impl_for_string<CharT>{};
 5868|       |    }
 5869|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5870|       |                       std::is_same_v<T, wregex_matches>) {
 5871|       |        return reader_impl_for_regex_matches<CharT>{};
 5872|       |    }
 5873|       |    else if constexpr (std::is_same_v<T, void*>) {
 5874|       |        return reader_impl_for_voidptr<CharT>{};
 5875|       |    }
 5876|       |    else if constexpr (std::is_floating_point_v<T>) {
 5877|       |        return reader_impl_for_float<CharT>{};
 5878|       |    }
 5879|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5880|       |                       !std::is_same_v<T, wchar_t> &&
 5881|       |                       !std::is_same_v<T, char32_t> &&
 5882|       |                       !std::is_same_v<T, bool>) {
 5883|       |        return reader_impl_for_int<CharT>{};
 5884|       |    }
 5885|       |    else {
 5886|       |        return reader_impl_for_monostate<CharT>{};
 5887|       |    }
 5888|  1.28k|}
_ZN3scn2v44impl13string_readerIwEC2Ev:
 5242|  3.85k|    constexpr string_reader() = default;
_ZN3scn2v44impl11reader_baseINS1_13string_readerIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3155|  2.50k|    {
 3156|  2.50k|        reader_error_handler eh{};
 3157|  2.50k|        get_derived().check_specs_impl(specs, eh);
 3158|  2.50k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  2.50k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 246, False: 2.26k]
  |  |  ------------------
  ------------------
 3159|    246|            return detail::unexpected_scan_error(
 3160|    246|                scan_error::invalid_format_string, eh.m_msg);
 3161|    246|        }
 3162|  2.26k|        return {};
 3163|  2.50k|    }
_ZN3scn2v44impl11reader_baseINS1_13string_readerIwEEwE11get_derivedEv:
 3167|  2.50k|    {
 3168|  2.50k|        return static_cast<Derived&>(*this);
 3169|  2.50k|    }
_ZN3scn2v44impl13string_readerIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5246|  2.50k|    {
 5247|  2.50k|        detail::check_string_type_specs(specs, eh);
 5248|       |
 5249|  2.50k|        SCN_GCC_PUSH
 5250|  2.50k|        SCN_GCC_IGNORE("-Wswitch")
 5251|  2.50k|        SCN_GCC_IGNORE("-Wswitch-default")
 5252|       |
 5253|  2.50k|        SCN_CLANG_PUSH
 5254|  2.50k|        SCN_CLANG_IGNORE("-Wswitch")
 5255|  2.50k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5256|       |
 5257|  2.50k|        switch (specs.type) {
  ------------------
  |  Branch (5257:17): [True: 240, False: 2.26k]
  ------------------
 5258|  1.18k|            case detail::presentation_type::none:
  ------------------
  |  Branch (5258:13): [True: 1.18k, False: 1.32k]
  ------------------
 5259|  1.18k|                m_type = reader_type::word;
 5260|  1.18k|                break;
 5261|       |
 5262|    204|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5262:13): [True: 204, False: 2.30k]
  ------------------
 5263|    204|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5263:21): [True: 66, False: 138]
  ------------------
 5264|    204|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5264:21): [True: 90, False: 48]
  ------------------
 5265|    156|                    m_type = reader_type::custom_word;
 5266|    156|                }
 5267|     48|                else {
 5268|     48|                    m_type = reader_type::word;
 5269|     48|                }
 5270|    204|                break;
 5271|      0|            }
 5272|       |
 5273|     66|            case detail::presentation_type::character:
  ------------------
  |  Branch (5273:13): [True: 66, False: 2.44k]
  ------------------
 5274|     66|                m_type = reader_type::character;
 5275|     66|                break;
 5276|       |
 5277|    810|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5277:13): [True: 810, False: 1.69k]
  ------------------
 5278|    810|                m_type = reader_type::character_set;
 5279|    810|                break;
 5280|       |
 5281|      0|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5281:13): [True: 0, False: 2.50k]
  ------------------
 5282|      0|                m_type = reader_type::regex;
 5283|      0|                break;
 5284|       |
 5285|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5285:13): [True: 0, False: 2.50k]
  ------------------
 5286|      0|                m_type = reader_type::regex_escaped;
 5287|      0|                break;
 5288|  2.50k|        }
 5289|       |
 5290|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5291|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5292|  2.50k|    }
_ZNK3scn2v44impl13string_readerIwE19skip_ws_before_readEv:
 5295|  4.70k|    {
 5296|  4.70k|        return m_type == reader_type::word;
 5297|  4.70k|    }
_ZN3scn2v44impl16validate_unicodeIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1241|  4.36k|{
 1242|  4.36k|    auto it = src.begin();
 1243|  47.3k|    while (it != src.end()) {
  ------------------
  |  Branch (1243:12): [True: 43.9k, False: 3.42k]
  ------------------
 1244|  43.9k|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1245|  43.9k|        if (len == 0) {
  ------------------
  |  Branch (1245:13): [True: 0, False: 43.9k]
  ------------------
 1246|      0|            return false;
 1247|      0|        }
 1248|  43.9k|        if (src.end() - it < len) {
  ------------------
  |  Branch (1248:13): [True: 0, False: 43.9k]
  ------------------
 1249|      0|            return false;
 1250|      0|        }
 1251|  43.9k|        const auto cp = detail::decode_code_point_exhaustive(
 1252|  43.9k|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1253|  43.9k|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1253:13): [True: 942, False: 43.0k]
  ------------------
 1254|    942|            return false;
 1255|    942|        }
 1256|  43.0k|        it += len;
 1257|  43.0k|    }
 1258|  3.42k|    return true;
 1259|  4.36k|}
_ZN3scn2v44impl22transcode_if_necessaryIwcEENS0_13scan_expectedIvEEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS9_11char_traitsISB_EENS9_9allocatorISB_EEEE:
 3107|    196|{
 3108|       |    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3109|       |        if (source.stores_allocated_string()) {
 3110|       |            dest.assign(SCN_MOVE(source.get_allocated_string()));
 3111|       |        }
 3112|       |        else {
 3113|       |            dest.assign(source.view());
 3114|       |        }
 3115|       |    }
 3116|    196|    else {
 3117|    196|        return transcode_impl(source.view(), dest);
 3118|    196|    }
 3119|       |
 3120|      0|    return {};
 3121|    196|}
_ZN3scn2v44impl14transcode_implIwcEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEERNS5_12basic_stringIT0_NS8_ISC_EENS5_9allocatorISC_EEEE:
 3082|    856|{
 3083|    856|    dst.clear();
 3084|    856|    transcode_valid_to_string(src, dst);
 3085|    856|    return {};
 3086|    856|}
_ZN3scn2v44impl25transcode_valid_to_stringIwcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1501|    856|{
 1502|    856|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1503|       |
 1504|    856|    SCN_EXPECT(validate_unicode(src));
  ------------------
  |  |  930|    856|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    856|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1505|       |    if constexpr (sizeof(SourceCharT) == 1) {
 1506|       |        if constexpr (sizeof(DestCharT) == 2) {
 1507|       |            // TODO: Optimize, remove utf32-step, go direct utf8->utf16
 1508|       |            std::u32string tmp;
 1509|       |            transcode_valid_to_string_impl_to32(src, tmp);
 1510|       |            return transcode_to_string_impl_32to16<true>(
 1511|       |                std::u32string_view{tmp}, dest);
 1512|       |        }
 1513|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1514|       |            return transcode_valid_to_string_impl_to32(src, dest);
 1515|       |        }
 1516|       |    }
 1517|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1518|       |        if constexpr (sizeof(DestCharT) == 1) {
 1519|       |            std::u32string tmp;
 1520|       |            transcode_valid_to_string_impl_to32(src, tmp);
 1521|       |            return transcode_to_string_impl_32to8<true>(
 1522|       |                std::u32string_view{tmp}, dest);
 1523|       |        }
 1524|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1525|       |            return trasncode_valid_to_string_impl_to32(src, dest);
 1526|       |        }
 1527|       |    }
 1528|    856|    else if constexpr (sizeof(SourceCharT) == 4) {
 1529|    856|        if constexpr (sizeof(DestCharT) == 1) {
 1530|    856|            return transcode_to_string_impl_32to8<true>(src, dest);
 1531|       |        }
 1532|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1533|       |            return transcode_to_string_impl_32to16<true>(src, dest);
 1534|       |        }
 1535|    856|    }
 1536|       |
 1537|    856|    SCN_EXPECT(false);
  ------------------
  |  |  930|    856|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    856|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1538|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1539|    856|}
_ZN3scn2v44impl30transcode_to_string_impl_32to8ILb1EwcEEvNSt3__117basic_string_viewIT0_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT1_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1392|    856|{
 1393|    856|    static_assert(sizeof(SourceCharT) == 4);
 1394|    856|    static_assert(sizeof(DestCharT) == 1);
 1395|       |
 1396|  9.30k|    for (auto cp : src) {
  ------------------
  |  Branch (1396:18): [True: 9.30k, False: 856]
  ------------------
 1397|  9.30k|        const auto u32cp = static_cast<uint32_t>(cp);
 1398|  9.30k|        if (SCN_UNLIKELY(!VerifiedValid && cp >= detail::invalid_code_point)) {
  ------------------
  |  |  865|  9.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [Folded - Ignored]
  |  |  |  Branch (865:45): [Folded - Ignored]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1399|       |            // Replacement character
 1400|      0|            dest.push_back(static_cast<char>(0xef));
 1401|      0|            dest.push_back(static_cast<char>(0xbf));
 1402|      0|            dest.push_back(static_cast<char>(0xbd));
 1403|      0|        }
 1404|  9.30k|        else if (cp < 128) {
  ------------------
  |  Branch (1404:18): [True: 7.62k, False: 1.68k]
  ------------------
 1405|  7.62k|            dest.push_back(static_cast<char>(cp));
 1406|  7.62k|        }
 1407|  1.68k|        else if (cp < 2048) {
  ------------------
  |  Branch (1407:18): [True: 102, False: 1.58k]
  ------------------
 1408|    102|            dest.push_back(
 1409|    102|                static_cast<char>(0xc0 | (static_cast<char>(u32cp >> 6))));
 1410|    102|            dest.push_back(
 1411|    102|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1412|    102|        }
 1413|  1.58k|        else if (cp < 65536) {
  ------------------
  |  Branch (1413:18): [True: 1.03k, False: 544]
  ------------------
 1414|  1.03k|            dest.push_back(
 1415|  1.03k|                static_cast<char>(0xe0 | (static_cast<char>(u32cp >> 12))));
 1416|  1.03k|            dest.push_back(static_cast<char>(
 1417|  1.03k|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1418|  1.03k|            dest.push_back(
 1419|  1.03k|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1420|  1.03k|        }
 1421|    544|        else {
 1422|    544|            dest.push_back(
 1423|    544|                static_cast<char>(0xf0 | (static_cast<char>(u32cp >> 18))));
 1424|    544|            dest.push_back(static_cast<char>(
 1425|    544|                0x80 | (static_cast<char>(u32cp >> 12) & 0x3f)));
 1426|    544|            dest.push_back(static_cast<char>(
 1427|    544|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1428|    544|            dest.push_back(
 1429|    544|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1430|    544|        }
 1431|  9.30k|    }
 1432|    856|}
_ZN3scn2v44impl25character_set_reader_implIwE12specs_helper15handle_nonasciiEv:
 5143|    810|        {
 5144|    810|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5144:17): [True: 204, False: 606]
  ------------------
 5145|    204|                return {};
 5146|    204|            }
 5147|       |
 5148|    606|            auto charset_string = specs.charset_string<SourceCharT>();
 5149|    606|            auto it = detail::to_address(charset_string.begin());
 5150|    606|            auto set = detail::parse_presentation_set(
 5151|    606|                it, detail::to_address(charset_string.end()), nonascii);
 5152|    606|            SCN_TRY_DISCARD(nonascii.get_error());
  ------------------
  |  | 3930|    606|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    606|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 606]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5153|    606|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  931|    606|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|    606|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5154|    606|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  931|    606|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|    606|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5155|       |
 5156|    606|            std::sort(nonascii.extra_ranges.begin(),
 5157|    606|                      nonascii.extra_ranges.end());
 5158|    606|            return {};
 5159|    606|        }
_ZNK3scn2v44impl25character_set_reader_implIwE20read_source_callback28on_classic_with_extra_rangesEDi:
 5176|  11.5k|        {
 5177|  11.5k|            if (!is_ascii_char(cp)) {
  ------------------
  |  Branch (5177:17): [True: 2.13k, False: 9.43k]
  ------------------
 5178|  2.13k|                return helper.is_char_set_in_extra_literals(cp);
 5179|  2.13k|            }
 5180|       |
 5181|  9.43k|            return helper.is_char_set_in_literals(static_cast<char>(cp));
 5182|  11.5k|        }
_ZNK3scn2v44impl25character_set_reader_implIwE12specs_helper29is_char_set_in_extra_literalsEDi:
 5126|  2.13k|        {
 5127|       |            // TODO: binary search?
 5128|  2.13k|            if (nonascii.extra_ranges.empty()) {
  ------------------
  |  Branch (5128:17): [True: 0, False: 2.13k]
  ------------------
 5129|      0|                return false;
 5130|      0|            }
 5131|       |
 5132|  2.13k|            const auto cp_val = static_cast<uint32_t>(cp);
 5133|  2.13k|            return std::find_if(
 5134|  2.13k|                       nonascii.extra_ranges.begin(),
 5135|  2.13k|                       nonascii.extra_ranges.end(),
 5136|  2.13k|                       [cp_val](const auto& pair) noexcept {
 5137|  2.13k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
 5138|  2.13k|                                  static_cast<uint32_t>(pair.second) > cp_val;
 5139|  2.13k|                       }) != nonascii.extra_ranges.end();
 5140|  2.13k|        }
_ZZNK3scn2v44impl25character_set_reader_implIwE12specs_helper29is_char_set_in_extra_literalsEDiENKUlRKT_E_clINSt3__14pairIDiDiEEEEDaS7_:
 5136|  15.4k|                       [cp_val](const auto& pair) noexcept {
 5137|  15.4k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
  ------------------
  |  Branch (5137:35): [True: 15.2k, False: 192]
  ------------------
 5138|  15.4k|                                  static_cast<uint32_t>(pair.second) > cp_val;
  ------------------
  |  Branch (5138:35): [True: 2.06k, False: 13.1k]
  ------------------
 5139|  15.4k|                       }) != nonascii.extra_ranges.end();
_ZNK3scn2v44impl25character_set_reader_implIwE12specs_helper23is_char_set_in_literalsEc:
 5116|  11.4k|        {
 5117|  11.4k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  930|  11.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  11.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5118|  11.4k|            const auto val =
 5119|  11.4k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5120|  11.4k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5121|  11.4k|                    (val % 8)) &
 5122|  11.4k|                   1u;
 5123|  11.4k|        }
_ZNK3scn2v44impl25character_set_reader_implIwE20read_source_callback13on_ascii_onlyEw:
 5167|  2.00k|        {
 5168|  2.00k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5168:17): [True: 12, False: 1.99k]
  ------------------
 5169|     12|                return false;
 5170|     12|            }
 5171|       |
 5172|  1.99k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5173|  2.00k|        }
_ZN3scn2v44impl25character_set_reader_implIwE12specs_helperC2ERKNS0_6detail12format_specsE:
 5113|    810|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v44impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5313|    262|    {
 5314|    262|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    262|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|    262|        return read_impl(range, specs, value);
 5316|    262|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5331|    262|    {
 5332|    262|        SCN_CLANG_PUSH
 5333|    262|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|    262|        switch (m_type) {
 5336|    104|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 104, False: 158]
  ------------------
 5337|    104|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|     14|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 14, False: 248]
  ------------------
 5340|     14|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|     14|                                                                   value);
 5342|       |
 5343|     18|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 18, False: 244]
  ------------------
 5344|     18|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|    126|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 126, False: 136]
  ------------------
 5347|    126|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|    126|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|      0|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 0, False: 262]
  ------------------
 5352|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|      0|                    range, specs.charset_string<SourceCharT>(),
 5354|      0|                    specs.regexp_flags, value);
 5355|       |
 5356|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 0, False: 262]
  ------------------
 5357|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|      0|                    range,
 5359|      0|                    get_unescaped_regex_pattern(
 5360|      0|                        specs.charset_string<SourceCharT>()),
 5361|      0|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 262]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|    262|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|    262|        }
 5368|       |
 5369|    262|        SCN_CLANG_POP
 5370|    262|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4860|    104|    {
 4861|    104|        return read_string_impl(range, read_until_classic_space(range), value);
 4862|    104|    }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4794|    136|{
 4795|    136|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    136|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    136|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 58, False: 78]
  ------------------
 4799|     58|        return detail::unexpected_scan_error(
 4800|     58|            scan_error::invalid_scanned_value,
 4801|     58|            "Invalid encoding in scanned string");
 4802|     58|    }
 4803|       |
 4804|     78|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|     78|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|     78|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 78]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|     78|    return SCN_MOVE(result);
  ------------------
  |  |  934|     78|    static_cast<    \
  |  |  935|     78|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|     78|}
_ZN3scn2v44impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2186|    312|{
 2187|       |    if constexpr (ranges::contiguous_range<Range> &&
 2188|       |                  ranges::sized_range<Range> &&
 2189|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2190|       |        auto buf = make_contiguous_buffer(range);
 2191|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2192|       |        return ranges::next(range.begin(),
 2193|       |                            ranges::distance(buf.view().begin(), it));
 2194|       |    }
 2195|    312|    else {
 2196|    312|        auto it = range.begin();
 2197|       |
 2198|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|       |            auto seg = get_contiguous_beginning(range);
 2200|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2201|       |                seg_it != seg.end()) {
 2202|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2203|       |            }
 2204|       |            ranges::advance(it, seg.size());
 2205|       |        }
 2206|       |
 2207|    312|        return read_until_code_point(
 2208|    312|            ranges::subrange{it, range.end()},
 2209|    312|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2210|    312|    }
 2211|    312|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbDiESQ_EE:
 2159|    312|{
 2160|    312|    auto it = range.begin();
 2161|  5.83k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 5.56k, False: 276]
  ------------------
 2162|  5.56k|        const auto val =
 2163|  5.56k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  5.56k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|  5.56k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 5.56k, False: 0]
  |  |  ------------------
  ------------------
 2165|  5.56k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  5.56k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  5.56k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 36, False: 5.52k]
  ------------------
 2168|     36|                return it;
 2169|     36|            }
 2170|  5.56k|        }
 2171|  5.52k|        it = val.iterator;
 2172|  5.52k|    }
 2173|       |
 2174|    276|    return it;
 2175|    312|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_:
  742|    312|        : m_fptr([](storage fn,
  743|    312|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    312|              cvref<T> obj = *get<T>(fn);
  745|    312|              if constexpr (std::is_void_v<R>) {
  746|    312|                  obj(static_cast<decltype(args)>(args)...);
  747|    312|              }
  748|    312|              else {
  749|    312|                  return obj(static_cast<decltype(args)>(args)...);
  750|    312|              }
  751|    312|          }),
  752|    312|          m_storage(std::addressof(f))
  753|    312|    {
  754|    312|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESY_Di:
  743|  5.56k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.56k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  5.56k|              else {
  749|  5.56k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.56k|              }
  751|  5.56k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  5.56k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  5.56k|        else if constexpr (std::is_object_v<T>) {
  688|  5.56k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  5.56k|    }
_ZZN3scn2v44impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2209|  5.56k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|    312|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    312|        {
  662|    312|        }
_ZN3scn2v44impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4881|     14|    {
 4882|     14|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4882:13): [True: 14, False: 0]
  ------------------
 4883|     14|            return read_string_impl(
 4884|     14|                range,
 4885|     14|                read_until_code_unit(
 4886|     14|                    range,
 4887|     14|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4888|     14|                        SourceCharT ch) { return ch == until; }),
 4889|     14|                value);
 4890|     14|        }
 4891|      0|        return read_string_impl(
 4892|      0|            range,
 4893|      0|            read_until_code_units(
 4894|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4895|      0|            value);
 4896|     14|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|     14|        : m_fptr([](storage fn,
  743|     14|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     14|              cvref<T> obj = *get<T>(fn);
  745|     14|              if constexpr (std::is_void_v<R>) {
  746|     14|                  obj(static_cast<decltype(args)>(args)...);
  747|     14|              }
  748|     14|              else {
  749|     14|                  return obj(static_cast<decltype(args)>(args)...);
  750|     14|              }
  751|     14|          }),
  752|     14|          m_storage(std::addressof(f))
  753|     14|    {
  754|     14|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES1D_w:
  743|     62|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     62|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     62|              else {
  749|     62|                  return obj(static_cast<decltype(args)>(args)...);
  750|     62|              }
  751|     62|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlwE_EEDaNS3_7storageE:
  683|     62|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     62|        else if constexpr (std::is_object_v<T>) {
  688|     62|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     62|    }
_ZZN3scn2v44impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlwE_clEw:
 4888|     62|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     14|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     14|        {
  662|     14|        }
_ZN3scn2v44impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4987|     18|    {
 4988|     18|        return read_impl(
 4989|     18|            range,
 4990|     18|            [&](const auto& rng) {
 4991|     18|                return read_string_impl(rng, read_all(rng), value);
 4992|     18|            },
 4993|     18|            detail::priority_tag<1>{});
 4994|     18|    }
_ZN3scn2v44impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 5014|     18|    {
 5015|     18|        return read_cb(range);
 5016|     18|    }
_ZZN3scn2v44impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4990|     18|            [&](const auto& rng) {
 4991|     18|                return read_string_impl(rng, read_all(rng), value);
 4992|     18|            },
_ZN3scn2v44impl8read_allINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 1937|     54|{
 1938|     54|    return ranges::next(range.begin(), range.end());
 1939|     54|}
_ZNK3scn2v46ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS1_6detail9subrange_8subrangeIS9_S9_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EESL_E4typeESL_SM_:
  312|     54|    {
  313|     54|        ranges::advance(x, bound);
  314|     54|        return x;
  315|     54|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EEvE4typeERSL_SM_:
  274|     54|    {
  275|     54|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|     54|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEvRT_T0_NS0_6detail12priority_tagILm0EEE:
  202|     54|    {
  203|    246|        while (i != bound) {
  ------------------
  |  Branch (203:16): [True: 192, False: 54]
  ------------------
  204|    192|            ++i;
  205|    192|        }
  206|     54|    }
_ZN3scn2v44impl25character_set_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5088|    126|    {
 5089|    126|        auto it = read_source_impl(range, {specs});
 5090|    126|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|    126|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8, False: 118]
  |  |  ------------------
  ------------------
 5091|      8|            return unexpected(it.error());
 5092|      8|        }
 5093|       |
 5094|    118|        return read_string_impl(range, *it, value);
 5095|    126|    }
_ZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperE:
 5191|    378|    {
 5192|    378|        const bool is_inverted = helper.specs.charset_is_inverted;
 5193|    378|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5194|       |
 5195|    378|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3930|    378|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    378|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 378]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5196|       |
 5197|    378|        read_source_callback cb_wrapper{helper};
 5198|       |
 5199|    378|        if (accepts_nonascii) {
  ------------------
  |  Branch (5199:13): [True: 270, False: 108]
  ------------------
 5200|    270|            const auto cb = [&](char32_t cp) {
 5201|    270|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5202|    270|            };
 5203|       |
 5204|    270|            if (is_inverted) {
  ------------------
  |  Branch (5204:17): [True: 96, False: 174]
  ------------------
 5205|     96|                auto it = read_until_code_point(range, cb);
 5206|     96|                return check_nonempty(it, range);
 5207|     96|            }
 5208|    174|            auto it = read_while_code_point(range, cb);
 5209|    174|            return check_nonempty(it, range);
 5210|    270|        }
 5211|       |
 5212|    108|        const auto cb = [&](SourceCharT ch) {
 5213|    108|            return cb_wrapper.on_ascii_only(ch);
 5214|    108|        };
 5215|       |
 5216|    108|        if (is_inverted) {
  ------------------
  |  Branch (5216:13): [True: 48, False: 60]
  ------------------
 5217|     48|            auto it = read_until_code_unit(range, cb);
 5218|     48|            return check_nonempty(it, range);
 5219|     48|        }
 5220|     60|        auto it = read_while_code_unit(range, cb);
 5221|     60|        return check_nonempty(it, range);
 5222|    108|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|    270|        : m_fptr([](storage fn,
  743|    270|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    270|              cvref<T> obj = *get<T>(fn);
  745|    270|              if constexpr (std::is_void_v<R>) {
  746|    270|                  obj(static_cast<decltype(args)>(args)...);
  747|    270|              }
  748|    270|              else {
  749|    270|                  return obj(static_cast<decltype(args)>(args)...);
  750|    270|              }
  751|    270|          }),
  752|    270|          m_storage(std::addressof(f))
  753|    270|    {
  754|    270|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEDiE_clES15_Di:
  743|  7.47k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.47k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  7.47k|              else {
  749|  7.47k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.47k|              }
  751|  7.47k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|  7.47k|    {
  684|  7.47k|        if constexpr (std::is_const_v<T>) {
  685|  7.47k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  7.47k|    }
_ZZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlDiE_clEDi:
 5200|  7.47k|            const auto cb = [&](char32_t cp) {
 5201|  7.47k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5202|  7.47k|            };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPKSL_:
  665|    270|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    270|        {
  667|    270|        }
_ZN3scn2v44impl25character_set_reader_implIwE14check_nonemptyINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEEEEENS0_13scan_expectedIT_EERKSI_T0_:
 5227|    378|    {
 5228|    378|        if (it == range.begin()) {
  ------------------
  |  Branch (5228:13): [True: 24, False: 354]
  ------------------
 5229|     24|            return detail::unexpected_scan_error(
 5230|     24|                scan_error::invalid_scanned_value,
 5231|     24|                "No characters matched in [character set]");
 5232|     24|        }
 5233|       |
 5234|    354|        return it;
 5235|    378|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlwE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|    108|        : m_fptr([](storage fn,
  743|    108|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    108|              cvref<T> obj = *get<T>(fn);
  745|    108|              if constexpr (std::is_void_v<R>) {
  746|    108|                  obj(static_cast<decltype(args)>(args)...);
  747|    108|              }
  748|    108|              else {
  749|    108|                  return obj(static_cast<decltype(args)>(args)...);
  750|    108|              }
  751|    108|          }),
  752|    108|          m_storage(std::addressof(f))
  753|    108|    {
  754|    108|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlwE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES15_w:
  743|    732|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    732|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    732|              else {
  749|    732|                  return obj(static_cast<decltype(args)>(args)...);
  750|    732|              }
  751|    732|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|    732|    {
  684|    732|        if constexpr (std::is_const_v<T>) {
  685|    732|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    732|    }
_ZZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlwE_clEw:
 5212|    732|        const auto cb = [&](SourceCharT ch) {
 5213|    732|            return cb_wrapper.on_ascii_only(ch);
 5214|    732|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlwE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPKSL_:
  665|    108|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    108|        {
  667|    108|        }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4794|    118|{
 4795|    118|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    118|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    118|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 0, False: 118]
  ------------------
 4799|      0|        return detail::unexpected_scan_error(
 4800|      0|            scan_error::invalid_scanned_value,
 4801|      0|            "Invalid encoding in scanned string");
 4802|      0|    }
 4803|       |
 4804|    118|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    118|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    118|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 118]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|    118|    return SCN_MOVE(result);
  ------------------
  |  |  934|    118|    static_cast<    \
  |  |  935|    118|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    118|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5313|    486|    {
 5314|    486|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    486|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|    486|        return read_impl(range, specs, value);
 5316|    486|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5331|    486|    {
 5332|    486|        SCN_CLANG_PUSH
 5333|    486|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|    486|        switch (m_type) {
 5336|    306|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 306, False: 180]
  ------------------
 5337|    306|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|     36|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 36, False: 450]
  ------------------
 5340|     36|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|     36|                                                                   value);
 5342|       |
 5343|      0|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 0, False: 486]
  ------------------
 5344|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|    144|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 144, False: 342]
  ------------------
 5347|    144|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|    144|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|      0|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 0, False: 486]
  ------------------
 5352|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|      0|                    range, specs.charset_string<SourceCharT>(),
 5354|      0|                    specs.regexp_flags, value);
 5355|       |
 5356|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 0, False: 486]
  ------------------
 5357|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|      0|                    range,
 5359|      0|                    get_unescaped_regex_pattern(
 5360|      0|                        specs.charset_string<SourceCharT>()),
 5361|      0|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 486]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|    486|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|    486|        }
 5368|       |
 5369|    486|        SCN_CLANG_POP
 5370|    486|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4860|    754|    {
 4861|    754|        return read_string_impl(range, read_until_classic_space(range), value);
 4862|    754|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4794|    790|{
 4795|    790|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    790|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    790|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 252, False: 538]
  ------------------
 4799|    252|        return detail::unexpected_scan_error(
 4800|    252|            scan_error::invalid_scanned_value,
 4801|    252|            "Invalid encoding in scanned string");
 4802|    252|    }
 4803|       |
 4804|    538|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    538|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    538|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 538]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|    538|    return SCN_MOVE(result);
  ------------------
  |  |  934|    538|    static_cast<    \
  |  |  935|    538|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    538|}
_ZN3scn2v44impl22transcode_if_necessaryIwcEENS0_13scan_expectedIvEENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 3127|    660|{
 3128|       |    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3129|       |        dest.assign(source.view());
 3130|       |    }
 3131|    660|    else {
 3132|    660|        return transcode_impl(source.view(), dest);
 3133|    660|    }
 3134|       |
 3135|      0|    return {};
 3136|    660|}
_ZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2186|  2.26k|{
 2187|       |    if constexpr (ranges::contiguous_range<Range> &&
 2188|       |                  ranges::sized_range<Range> &&
 2189|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2190|       |        auto buf = make_contiguous_buffer(range);
 2191|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2192|       |        return ranges::next(range.begin(),
 2193|       |                            ranges::distance(buf.view().begin(), it));
 2194|       |    }
 2195|  2.26k|    else {
 2196|  2.26k|        auto it = range.begin();
 2197|       |
 2198|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|       |            auto seg = get_contiguous_beginning(range);
 2200|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2201|       |                seg_it != seg.end()) {
 2202|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2203|       |            }
 2204|       |            ranges::advance(it, seg.size());
 2205|       |        }
 2206|       |
 2207|  2.26k|        return read_until_code_point(
 2208|  2.26k|            ranges::subrange{it, range.end()},
 2209|  2.26k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2210|  2.26k|    }
 2211|  2.26k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|  2.26k|        : m_fptr([](storage fn,
  743|  2.26k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.26k|              cvref<T> obj = *get<T>(fn);
  745|  2.26k|              if constexpr (std::is_void_v<R>) {
  746|  2.26k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.26k|              }
  748|  2.26k|              else {
  749|  2.26k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.26k|              }
  751|  2.26k|          }),
  752|  2.26k|          m_storage(std::addressof(f))
  753|  2.26k|    {
  754|  2.26k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|  24.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  24.0k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  24.0k|              else {
  749|  24.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  24.0k|              }
  751|  24.0k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  24.0k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  24.0k|        else if constexpr (std::is_object_v<T>) {
  688|  24.0k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  24.0k|    }
_ZZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2209|  24.0k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|  2.26k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.26k|        {
  662|  2.26k|        }
_ZN3scn2v44impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4881|     36|    {
 4882|     36|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4882:13): [True: 36, False: 0]
  ------------------
 4883|     36|            return read_string_impl(
 4884|     36|                range,
 4885|     36|                read_until_code_unit(
 4886|     36|                    range,
 4887|     36|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4888|     36|                        SourceCharT ch) { return ch == until; }),
 4889|     36|                value);
 4890|     36|        }
 4891|      0|        return read_string_impl(
 4892|      0|            range,
 4893|      0|            read_until_code_units(
 4894|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4895|      0|            value);
 4896|     36|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     36|        : m_fptr([](storage fn,
  743|     36|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     36|              cvref<T> obj = *get<T>(fn);
  745|     36|              if constexpr (std::is_void_v<R>) {
  746|     36|                  obj(static_cast<decltype(args)>(args)...);
  747|     36|              }
  748|     36|              else {
  749|     36|                  return obj(static_cast<decltype(args)>(args)...);
  750|     36|              }
  751|     36|          }),
  752|     36|          m_storage(std::addressof(f))
  753|     36|    {
  754|     36|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES1B_w:
  743|    486|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    486|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    486|              else {
  749|    486|                  return obj(static_cast<decltype(args)>(args)...);
  750|    486|              }
  751|    486|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    486|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    486|        else if constexpr (std::is_object_v<T>) {
  688|    486|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    486|    }
_ZZN3scn2v44impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlwE_clEw:
 4888|    486|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     36|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     36|        {
  662|     36|        }
_ZN3scn2v44impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5088|    144|    {
 5089|    144|        auto it = read_source_impl(range, {specs});
 5090|    144|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|    144|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 18, False: 126]
  |  |  ------------------
  ------------------
 5091|     18|            return unexpected(it.error());
 5092|     18|        }
 5093|       |
 5094|    126|        return read_string_impl(range, *it, value);
 5095|    144|    }
_ZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5191|    432|    {
 5192|    432|        const bool is_inverted = helper.specs.charset_is_inverted;
 5193|    432|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5194|       |
 5195|    432|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3930|    432|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    432|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 432]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5196|       |
 5197|    432|        read_source_callback cb_wrapper{helper};
 5198|       |
 5199|    432|        if (accepts_nonascii) {
  ------------------
  |  Branch (5199:13): [True: 336, False: 96]
  ------------------
 5200|    336|            const auto cb = [&](char32_t cp) {
 5201|    336|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5202|    336|            };
 5203|       |
 5204|    336|            if (is_inverted) {
  ------------------
  |  Branch (5204:17): [True: 156, False: 180]
  ------------------
 5205|    156|                auto it = read_until_code_point(range, cb);
 5206|    156|                return check_nonempty(it, range);
 5207|    156|            }
 5208|    180|            auto it = read_while_code_point(range, cb);
 5209|    180|            return check_nonempty(it, range);
 5210|    336|        }
 5211|       |
 5212|     96|        const auto cb = [&](SourceCharT ch) {
 5213|     96|            return cb_wrapper.on_ascii_only(ch);
 5214|     96|        };
 5215|       |
 5216|     96|        if (is_inverted) {
  ------------------
  |  Branch (5216:13): [True: 42, False: 54]
  ------------------
 5217|     42|            auto it = read_until_code_unit(range, cb);
 5218|     42|            return check_nonempty(it, range);
 5219|     42|        }
 5220|     54|        auto it = read_while_code_unit(range, cb);
 5221|     54|        return check_nonempty(it, range);
 5222|     96|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|    336|        : m_fptr([](storage fn,
  743|    336|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    336|              cvref<T> obj = *get<T>(fn);
  745|    336|              if constexpr (std::is_void_v<R>) {
  746|    336|                  obj(static_cast<decltype(args)>(args)...);
  747|    336|              }
  748|    336|              else {
  749|    336|                  return obj(static_cast<decltype(args)>(args)...);
  750|    336|              }
  751|    336|          }),
  752|    336|          m_storage(std::addressof(f))
  753|    336|    {
  754|    336|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clES13_Di:
  743|  4.10k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.10k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  4.10k|              else {
  749|  4.10k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.10k|              }
  751|  4.10k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|  4.10k|    {
  684|  4.10k|        if constexpr (std::is_const_v<T>) {
  685|  4.10k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  4.10k|    }
_ZZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlDiE_clEDi:
 5200|  4.10k|            const auto cb = [&](char32_t cp) {
 5201|  4.10k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5202|  4.10k|            };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|    336|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    336|        {
  667|    336|        }
_ZN3scn2v44impl25character_set_reader_implIwE14check_nonemptyIPKwNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5227|    432|    {
 5228|    432|        if (it == range.begin()) {
  ------------------
  |  Branch (5228:13): [True: 54, False: 378]
  ------------------
 5229|     54|            return detail::unexpected_scan_error(
 5230|     54|                scan_error::invalid_scanned_value,
 5231|     54|                "No characters matched in [character set]");
 5232|     54|        }
 5233|       |
 5234|    378|        return it;
 5235|    432|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     96|        : m_fptr([](storage fn,
  743|     96|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     96|              cvref<T> obj = *get<T>(fn);
  745|     96|              if constexpr (std::is_void_v<R>) {
  746|     96|                  obj(static_cast<decltype(args)>(args)...);
  747|     96|              }
  748|     96|              else {
  749|     96|                  return obj(static_cast<decltype(args)>(args)...);
  750|     96|              }
  751|     96|          }),
  752|     96|          m_storage(std::addressof(f))
  753|     96|    {
  754|     96|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|  1.27k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.27k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.27k|              else {
  749|  1.27k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.27k|              }
  751|  1.27k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  1.27k|    {
  684|  1.27k|        if constexpr (std::is_const_v<T>) {
  685|  1.27k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.27k|    }
_ZZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlwE_clEw:
 5212|  1.27k|        const auto cb = [&](SourceCharT ch) {
 5213|  1.27k|            return cb_wrapper.on_ascii_only(ch);
 5214|  1.27k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|     96|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|     96|        {
  667|     96|        }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4794|    126|{
 4795|    126|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    126|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    126|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 4, False: 122]
  ------------------
 4799|      4|        return detail::unexpected_scan_error(
 4800|      4|            scan_error::invalid_scanned_value,
 4801|      4|            "Invalid encoding in scanned string");
 4802|      4|    }
 4803|       |
 4804|    122|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    122|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    122|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 122]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|    122|    return SCN_MOVE(result);
  ------------------
  |  |  934|    122|    static_cast<    \
  |  |  935|    122|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    122|}
_ZN3scn2v44impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEwEEDav:
 5848|  1.28k|{
 5849|       |    if constexpr (std::is_same_v<T, bool>) {
 5850|       |        return reader_impl_for_bool<CharT>{};
 5851|       |    }
 5852|       |    else if constexpr (std::is_same_v<T, char>) {
 5853|       |        return reader_impl_for_char<CharT>{};
 5854|       |    }
 5855|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5856|       |        return reader_impl_for_wchar<CharT>{};
 5857|       |    }
 5858|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5859|       |        return reader_impl_for_code_point<CharT>{};
 5860|       |    }
 5861|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5862|       |                       std::is_same_v<T, std::wstring_view>) {
 5863|       |        return reader_impl_for_string<CharT>{};
 5864|       |    }
 5865|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5866|  1.28k|                       std::is_same_v<T, std::wstring>) {
 5867|  1.28k|        return reader_impl_for_string<CharT>{};
 5868|       |    }
 5869|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5870|       |                       std::is_same_v<T, wregex_matches>) {
 5871|       |        return reader_impl_for_regex_matches<CharT>{};
 5872|       |    }
 5873|       |    else if constexpr (std::is_same_v<T, void*>) {
 5874|       |        return reader_impl_for_voidptr<CharT>{};
 5875|       |    }
 5876|       |    else if constexpr (std::is_floating_point_v<T>) {
 5877|       |        return reader_impl_for_float<CharT>{};
 5878|       |    }
 5879|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5880|       |                       !std::is_same_v<T, wchar_t> &&
 5881|       |                       !std::is_same_v<T, char32_t> &&
 5882|       |                       !std::is_same_v<T, bool>) {
 5883|       |        return reader_impl_for_int<CharT>{};
 5884|       |    }
 5885|       |    else {
 5886|       |        return reader_impl_for_monostate<CharT>{};
 5887|       |    }
 5888|  1.28k|}
_ZN3scn2v44impl22transcode_if_necessaryIwwEENS0_13scan_expectedIvEEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS9_11char_traitsISB_EENS9_9allocatorISB_EEEE:
 3107|    196|{
 3108|    196|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3109|    196|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (3109:13): [True: 196, False: 0]
  ------------------
 3110|    196|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  934|    196|    static_cast<    \
  |  |  935|    196|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3111|    196|        }
 3112|      0|        else {
 3113|      0|            dest.assign(source.view());
 3114|      0|        }
 3115|       |    }
 3116|       |    else {
 3117|       |        return transcode_impl(source.view(), dest);
 3118|       |    }
 3119|       |
 3120|    196|    return {};
 3121|    196|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5313|    262|    {
 5314|    262|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    262|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|    262|        return read_impl(range, specs, value);
 5316|    262|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5331|    262|    {
 5332|    262|        SCN_CLANG_PUSH
 5333|    262|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|    262|        switch (m_type) {
 5336|    104|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 104, False: 158]
  ------------------
 5337|    104|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|     14|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 14, False: 248]
  ------------------
 5340|     14|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|     14|                                                                   value);
 5342|       |
 5343|     18|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 18, False: 244]
  ------------------
 5344|     18|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|    126|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 126, False: 136]
  ------------------
 5347|    126|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|    126|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|      0|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 0, False: 262]
  ------------------
 5352|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|      0|                    range, specs.charset_string<SourceCharT>(),
 5354|      0|                    specs.regexp_flags, value);
 5355|       |
 5356|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 0, False: 262]
  ------------------
 5357|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|      0|                    range,
 5359|      0|                    get_unescaped_regex_pattern(
 5360|      0|                        specs.charset_string<SourceCharT>()),
 5361|      0|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 262]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|    262|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|    262|        }
 5368|       |
 5369|    262|        SCN_CLANG_POP
 5370|    262|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4860|    104|    {
 4861|    104|        return read_string_impl(range, read_until_classic_space(range), value);
 4862|    104|    }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4794|    136|{
 4795|    136|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    136|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    136|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 58, False: 78]
  ------------------
 4799|     58|        return detail::unexpected_scan_error(
 4800|     58|            scan_error::invalid_scanned_value,
 4801|     58|            "Invalid encoding in scanned string");
 4802|     58|    }
 4803|       |
 4804|     78|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|     78|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|     78|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 78]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|     78|    return SCN_MOVE(result);
  ------------------
  |  |  934|     78|    static_cast<    \
  |  |  935|     78|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|     78|}
_ZN3scn2v44impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4881|     14|    {
 4882|     14|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4882:13): [True: 14, False: 0]
  ------------------
 4883|     14|            return read_string_impl(
 4884|     14|                range,
 4885|     14|                read_until_code_unit(
 4886|     14|                    range,
 4887|     14|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4888|     14|                        SourceCharT ch) { return ch == until; }),
 4889|     14|                value);
 4890|     14|        }
 4891|      0|        return read_string_impl(
 4892|      0|            range,
 4893|      0|            read_until_code_units(
 4894|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4895|      0|            value);
 4896|     14|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|     14|        : m_fptr([](storage fn,
  743|     14|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     14|              cvref<T> obj = *get<T>(fn);
  745|     14|              if constexpr (std::is_void_v<R>) {
  746|     14|                  obj(static_cast<decltype(args)>(args)...);
  747|     14|              }
  748|     14|              else {
  749|     14|                  return obj(static_cast<decltype(args)>(args)...);
  750|     14|              }
  751|     14|          }),
  752|     14|          m_storage(std::addressof(f))
  753|     14|    {
  754|     14|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES1D_w:
  743|     62|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     62|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     62|              else {
  749|     62|                  return obj(static_cast<decltype(args)>(args)...);
  750|     62|              }
  751|     62|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlwE_EEDaNS3_7storageE:
  683|     62|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     62|        else if constexpr (std::is_object_v<T>) {
  688|     62|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     62|    }
_ZZN3scn2v44impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlwE_clEw:
 4888|     62|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     14|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     14|        {
  662|     14|        }
_ZN3scn2v44impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4987|     18|    {
 4988|     18|        return read_impl(
 4989|     18|            range,
 4990|     18|            [&](const auto& rng) {
 4991|     18|                return read_string_impl(rng, read_all(rng), value);
 4992|     18|            },
 4993|     18|            detail::priority_tag<1>{});
 4994|     18|    }
_ZN3scn2v44impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 5014|     18|    {
 5015|     18|        return read_cb(range);
 5016|     18|    }
_ZZN3scn2v44impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4990|     18|            [&](const auto& rng) {
 4991|     18|                return read_string_impl(rng, read_all(rng), value);
 4992|     18|            },
_ZN3scn2v44impl25character_set_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5088|    126|    {
 5089|    126|        auto it = read_source_impl(range, {specs});
 5090|    126|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|    126|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8, False: 118]
  |  |  ------------------
  ------------------
 5091|      8|            return unexpected(it.error());
 5092|      8|        }
 5093|       |
 5094|    118|        return read_string_impl(range, *it, value);
 5095|    126|    }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4794|    118|{
 4795|    118|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    118|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    118|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 0, False: 118]
  ------------------
 4799|      0|        return detail::unexpected_scan_error(
 4800|      0|            scan_error::invalid_scanned_value,
 4801|      0|            "Invalid encoding in scanned string");
 4802|      0|    }
 4803|       |
 4804|    118|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    118|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    118|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 118]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|    118|    return SCN_MOVE(result);
  ------------------
  |  |  934|    118|    static_cast<    \
  |  |  935|    118|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    118|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5313|    486|    {
 5314|    486|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    486|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|    486|        return read_impl(range, specs, value);
 5316|    486|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5331|    486|    {
 5332|    486|        SCN_CLANG_PUSH
 5333|    486|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|    486|        switch (m_type) {
 5336|    306|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 306, False: 180]
  ------------------
 5337|    306|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|     36|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 36, False: 450]
  ------------------
 5340|     36|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|     36|                                                                   value);
 5342|       |
 5343|      0|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 0, False: 486]
  ------------------
 5344|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|    144|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 144, False: 342]
  ------------------
 5347|    144|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|    144|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|      0|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 0, False: 486]
  ------------------
 5352|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|      0|                    range, specs.charset_string<SourceCharT>(),
 5354|      0|                    specs.regexp_flags, value);
 5355|       |
 5356|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 0, False: 486]
  ------------------
 5357|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|      0|                    range,
 5359|      0|                    get_unescaped_regex_pattern(
 5360|      0|                        specs.charset_string<SourceCharT>()),
 5361|      0|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 486]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|    486|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|    486|        }
 5368|       |
 5369|    486|        SCN_CLANG_POP
 5370|    486|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4860|    754|    {
 4861|    754|        return read_string_impl(range, read_until_classic_space(range), value);
 4862|    754|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4794|    790|{
 4795|    790|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    790|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    790|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 252, False: 538]
  ------------------
 4799|    252|        return detail::unexpected_scan_error(
 4800|    252|            scan_error::invalid_scanned_value,
 4801|    252|            "Invalid encoding in scanned string");
 4802|    252|    }
 4803|       |
 4804|    538|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    538|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    538|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 538]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|    538|    return SCN_MOVE(result);
  ------------------
  |  |  934|    538|    static_cast<    \
  |  |  935|    538|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    538|}
_ZN3scn2v44impl22transcode_if_necessaryIwwEENS0_13scan_expectedIvEENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 3127|    660|{
 3128|    660|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3129|    660|        dest.assign(source.view());
 3130|       |    }
 3131|       |    else {
 3132|       |        return transcode_impl(source.view(), dest);
 3133|       |    }
 3134|       |
 3135|    660|    return {};
 3136|    660|}
_ZN3scn2v44impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4881|     36|    {
 4882|     36|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4882:13): [True: 36, False: 0]
  ------------------
 4883|     36|            return read_string_impl(
 4884|     36|                range,
 4885|     36|                read_until_code_unit(
 4886|     36|                    range,
 4887|     36|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4888|     36|                        SourceCharT ch) { return ch == until; }),
 4889|     36|                value);
 4890|     36|        }
 4891|      0|        return read_string_impl(
 4892|      0|            range,
 4893|      0|            read_until_code_units(
 4894|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4895|      0|            value);
 4896|     36|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     36|        : m_fptr([](storage fn,
  743|     36|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     36|              cvref<T> obj = *get<T>(fn);
  745|     36|              if constexpr (std::is_void_v<R>) {
  746|     36|                  obj(static_cast<decltype(args)>(args)...);
  747|     36|              }
  748|     36|              else {
  749|     36|                  return obj(static_cast<decltype(args)>(args)...);
  750|     36|              }
  751|     36|          }),
  752|     36|          m_storage(std::addressof(f))
  753|     36|    {
  754|     36|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES1B_w:
  743|    486|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    486|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    486|              else {
  749|    486|                  return obj(static_cast<decltype(args)>(args)...);
  750|    486|              }
  751|    486|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    486|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    486|        else if constexpr (std::is_object_v<T>) {
  688|    486|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    486|    }
_ZZN3scn2v44impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlwE_clEw:
 4888|    486|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     36|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     36|        {
  662|     36|        }
_ZN3scn2v44impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5088|    144|    {
 5089|    144|        auto it = read_source_impl(range, {specs});
 5090|    144|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|    144|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 18, False: 126]
  |  |  ------------------
  ------------------
 5091|     18|            return unexpected(it.error());
 5092|     18|        }
 5093|       |
 5094|    126|        return read_string_impl(range, *it, value);
 5095|    144|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4794|    126|{
 4795|    126|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    126|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    126|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 4, False: 122]
  ------------------
 4799|      4|        return detail::unexpected_scan_error(
 4800|      4|            scan_error::invalid_scanned_value,
 4801|      4|            "Invalid encoding in scanned string");
 4802|      4|    }
 4803|       |
 4804|    122|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    122|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    122|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 122]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|    122|    return SCN_MOVE(result);
  ------------------
  |  |  934|    122|    static_cast<    \
  |  |  935|    122|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    122|}
_ZN3scn2v44impl11make_readerINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEEDav:
 5848|  1.28k|{
 5849|       |    if constexpr (std::is_same_v<T, bool>) {
 5850|       |        return reader_impl_for_bool<CharT>{};
 5851|       |    }
 5852|       |    else if constexpr (std::is_same_v<T, char>) {
 5853|       |        return reader_impl_for_char<CharT>{};
 5854|       |    }
 5855|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5856|       |        return reader_impl_for_wchar<CharT>{};
 5857|       |    }
 5858|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5859|       |        return reader_impl_for_code_point<CharT>{};
 5860|       |    }
 5861|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5862|  1.28k|                       std::is_same_v<T, std::wstring_view>) {
 5863|  1.28k|        return reader_impl_for_string<CharT>{};
 5864|       |    }
 5865|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5866|       |                       std::is_same_v<T, std::wstring>) {
 5867|       |        return reader_impl_for_string<CharT>{};
 5868|       |    }
 5869|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5870|       |                       std::is_same_v<T, wregex_matches>) {
 5871|       |        return reader_impl_for_regex_matches<CharT>{};
 5872|       |    }
 5873|       |    else if constexpr (std::is_same_v<T, void*>) {
 5874|       |        return reader_impl_for_voidptr<CharT>{};
 5875|       |    }
 5876|       |    else if constexpr (std::is_floating_point_v<T>) {
 5877|       |        return reader_impl_for_float<CharT>{};
 5878|       |    }
 5879|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5880|       |                       !std::is_same_v<T, wchar_t> &&
 5881|       |                       !std::is_same_v<T, char32_t> &&
 5882|       |                       !std::is_same_v<T, bool>) {
 5883|       |        return reader_impl_for_int<CharT>{};
 5884|       |    }
 5885|       |    else {
 5886|       |        return reader_impl_for_monostate<CharT>{};
 5887|       |    }
 5888|  1.28k|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5313|    262|    {
 5314|    262|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    262|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|    262|        return read_impl(range, specs, value);
 5316|    262|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5331|    262|    {
 5332|    262|        SCN_CLANG_PUSH
 5333|    262|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|    262|        switch (m_type) {
 5336|    104|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 104, False: 158]
  ------------------
 5337|    104|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|     14|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 14, False: 248]
  ------------------
 5340|     14|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|     14|                                                                   value);
 5342|       |
 5343|     18|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 18, False: 244]
  ------------------
 5344|     18|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|    126|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 126, False: 136]
  ------------------
 5347|    126|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|    126|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|      0|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 0, False: 262]
  ------------------
 5352|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|      0|                    range, specs.charset_string<SourceCharT>(),
 5354|      0|                    specs.regexp_flags, value);
 5355|       |
 5356|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 0, False: 262]
  ------------------
 5357|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|      0|                    range,
 5359|      0|                    get_unescaped_regex_pattern(
 5360|      0|                        specs.charset_string<SourceCharT>()),
 5361|      0|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 262]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|    262|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|    262|        }
 5368|       |
 5369|    262|        SCN_CLANG_POP
 5370|    262|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4867|    104|    {
 4868|    104|        return read_string_view_impl(range, read_until_classic_space(range),
 4869|    104|                                     value);
 4870|    104|    }
_ZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEE:
 4813|    136|{
 4814|    136|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4815|       |
 4816|    136|    auto src = [&]() {
 4817|    136|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|    136|            return make_contiguous_buffer(
 4819|    136|                ranges::subrange{range.begin().base(), result.base()});
 4820|    136|        }
 4821|    136|        else {
 4822|    136|            return make_contiguous_buffer(
 4823|    136|                ranges::subrange{range.begin(), result});
 4824|    136|        }
 4825|    136|    }();
 4826|    136|    using src_type = decltype(src);
 4827|       |
 4828|    136|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4828:9): [Folded - Ignored]
  ------------------
 4829|      0|        return detail::unexpected_scan_error(
 4830|      0|            scan_error::invalid_format_string,
 4831|      0|            "Cannot read a string_view from this source range (not "
 4832|      0|            "contiguous)");
 4833|      0|    }
 4834|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4835|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4836|       |                                             "Cannot read a string_view from "
 4837|       |                                             "this source range (would require "
 4838|       |                                             "transcoding)");
 4839|       |    }
 4840|    136|    else {
 4841|    136|        const auto view = src.view();
 4842|    136|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4843|       |
 4844|    136|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4844:13): [True: 58, False: 78]
  ------------------
 4845|     58|            return detail::unexpected_scan_error(
 4846|     58|                scan_error::invalid_scanned_value,
 4847|     58|                "Invalid encoding in scanned string_view");
 4848|     58|        }
 4849|       |
 4850|     78|        return SCN_MOVE(result);
  ------------------
  |  |  934|     78|    static_cast<    \
  |  |  935|     78|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4851|    136|    }
 4852|    136|}
_ZZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEEENKUlvE_clEv:
 4816|    136|    auto src = [&]() {
 4817|    136|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|    136|            return make_contiguous_buffer(
 4819|    136|                ranges::subrange{range.begin().base(), result.base()});
 4820|       |        }
 4821|       |        else {
 4822|       |            return make_contiguous_buffer(
 4823|       |                ranges::subrange{range.begin(), result});
 4824|       |        }
 4825|    136|    }();
_ZN3scn2v44impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 4903|     14|    {
 4904|     14|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4904:13): [True: 14, False: 0]
  ------------------
 4905|     14|            return read_string_view_impl(
 4906|     14|                range,
 4907|     14|                read_until_code_unit(
 4908|     14|                    range,
 4909|     14|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4910|     14|                        SourceCharT ch) { return ch == until; }),
 4911|     14|                value);
 4912|     14|        }
 4913|      0|        return read_string_view_impl(
 4914|      0|            range,
 4915|      0|            read_until_code_units(
 4916|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4917|      0|            value);
 4918|     14|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlwE_S11_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|     14|        : m_fptr([](storage fn,
  743|     14|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     14|              cvref<T> obj = *get<T>(fn);
  745|     14|              if constexpr (std::is_void_v<R>) {
  746|     14|                  obj(static_cast<decltype(args)>(args)...);
  747|     14|              }
  748|     14|              else {
  749|     14|                  return obj(static_cast<decltype(args)>(args)...);
  750|     14|              }
  751|     14|          }),
  752|     14|          m_storage(std::addressof(f))
  753|     14|    {
  754|     14|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlwE_S11_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES1B_w:
  743|     62|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     62|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     62|              else {
  749|     62|                  return obj(static_cast<decltype(args)>(args)...);
  750|     62|              }
  751|     62|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_17basic_string_viewIT0_NSI_11char_traitsISV_EEEEEUlwE_EEDaNS3_7storageE:
  683|     62|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     62|        else if constexpr (std::is_object_v<T>) {
  688|     62|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     62|    }
_ZZN3scn2v44impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEEENKUlwE_clEw:
 4910|     62|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlwE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     14|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     14|        {
  662|     14|        }
_ZN3scn2v44impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4999|     18|    {
 5000|     18|        return read_impl(
 5001|     18|            range,
 5002|     18|            [&](const auto& rng) {
 5003|     18|                return read_string_view_impl(rng, read_all(rng), value);
 5004|     18|            },
 5005|     18|            detail::priority_tag<1>{});
 5006|     18|    }
_ZN3scn2v44impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_17basic_string_viewIT0_NSG_11char_traitsISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSX_OSP_NS0_6detail12priority_tagILm1EEE:
 5014|     18|    {
 5015|     18|        return read_cb(range);
 5016|     18|    }
_ZZN3scn2v44impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEEENKUlRKSH_E_clISD_EEDaSU_:
 5002|     18|            [&](const auto& rng) {
 5003|     18|                return read_string_view_impl(rng, read_all(rng), value);
 5004|     18|            },
_ZN3scn2v44impl25character_set_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 5102|    126|    {
 5103|    126|        auto it = read_source_impl(range, {specs});
 5104|    126|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|    126|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8, False: 118]
  |  |  ------------------
  ------------------
 5105|      8|            return unexpected(it.error());
 5106|      8|        }
 5107|       |
 5108|    118|        return read_string_view_impl(range, *it, value);
 5109|    126|    }
_ZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEE:
 4813|    118|{
 4814|    118|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4815|       |
 4816|    118|    auto src = [&]() {
 4817|    118|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|    118|            return make_contiguous_buffer(
 4819|    118|                ranges::subrange{range.begin().base(), result.base()});
 4820|    118|        }
 4821|    118|        else {
 4822|    118|            return make_contiguous_buffer(
 4823|    118|                ranges::subrange{range.begin(), result});
 4824|    118|        }
 4825|    118|    }();
 4826|    118|    using src_type = decltype(src);
 4827|       |
 4828|    118|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4828:9): [Folded - Ignored]
  ------------------
 4829|      0|        return detail::unexpected_scan_error(
 4830|      0|            scan_error::invalid_format_string,
 4831|      0|            "Cannot read a string_view from this source range (not "
 4832|      0|            "contiguous)");
 4833|      0|    }
 4834|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4835|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4836|       |                                             "Cannot read a string_view from "
 4837|       |                                             "this source range (would require "
 4838|       |                                             "transcoding)");
 4839|       |    }
 4840|    118|    else {
 4841|    118|        const auto view = src.view();
 4842|    118|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4843|       |
 4844|    118|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4844:13): [True: 0, False: 118]
  ------------------
 4845|      0|            return detail::unexpected_scan_error(
 4846|      0|                scan_error::invalid_scanned_value,
 4847|      0|                "Invalid encoding in scanned string_view");
 4848|      0|        }
 4849|       |
 4850|    118|        return SCN_MOVE(result);
  ------------------
  |  |  934|    118|    static_cast<    \
  |  |  935|    118|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4851|    118|    }
 4852|    118|}
_ZZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEEENKUlvE_clEv:
 4816|    118|    auto src = [&]() {
 4817|    118|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|    118|            return make_contiguous_buffer(
 4819|    118|                ranges::subrange{range.begin().base(), result.base()});
 4820|       |        }
 4821|       |        else {
 4822|       |            return make_contiguous_buffer(
 4823|       |                ranges::subrange{range.begin(), result});
 4824|       |        }
 4825|    118|    }();
_ZN3scn2v44impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5313|    486|    {
 5314|    486|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    486|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|    486|        return read_impl(range, specs, value);
 5316|    486|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5331|    486|    {
 5332|    486|        SCN_CLANG_PUSH
 5333|    486|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|    486|        switch (m_type) {
 5336|    306|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 306, False: 180]
  ------------------
 5337|    306|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|     36|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 36, False: 450]
  ------------------
 5340|     36|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|     36|                                                                   value);
 5342|       |
 5343|      0|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 0, False: 486]
  ------------------
 5344|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|    144|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 144, False: 342]
  ------------------
 5347|    144|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|    144|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|      0|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 0, False: 486]
  ------------------
 5352|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|      0|                    range, specs.charset_string<SourceCharT>(),
 5354|      0|                    specs.regexp_flags, value);
 5355|       |
 5356|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 0, False: 486]
  ------------------
 5357|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|      0|                    range,
 5359|      0|                    get_unescaped_regex_pattern(
 5360|      0|                        specs.charset_string<SourceCharT>()),
 5361|      0|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 486]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|    486|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|    486|        }
 5368|       |
 5369|    486|        SCN_CLANG_POP
 5370|    486|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4867|    754|    {
 4868|    754|        return read_string_view_impl(range, read_until_classic_space(range),
 4869|    754|                                     value);
 4870|    754|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4813|    790|{
 4814|    790|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4815|       |
 4816|    790|    auto src = [&]() {
 4817|    790|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|    790|            return make_contiguous_buffer(
 4819|    790|                ranges::subrange{range.begin().base(), result.base()});
 4820|    790|        }
 4821|    790|        else {
 4822|    790|            return make_contiguous_buffer(
 4823|    790|                ranges::subrange{range.begin(), result});
 4824|    790|        }
 4825|    790|    }();
 4826|    790|    using src_type = decltype(src);
 4827|       |
 4828|    790|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4828:9): [Folded - Ignored]
  ------------------
 4829|      0|        return detail::unexpected_scan_error(
 4830|      0|            scan_error::invalid_format_string,
 4831|      0|            "Cannot read a string_view from this source range (not "
 4832|      0|            "contiguous)");
 4833|      0|    }
 4834|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4835|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4836|       |                                             "Cannot read a string_view from "
 4837|       |                                             "this source range (would require "
 4838|       |                                             "transcoding)");
 4839|       |    }
 4840|    790|    else {
 4841|    790|        const auto view = src.view();
 4842|    790|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4843|       |
 4844|    790|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4844:13): [True: 252, False: 538]
  ------------------
 4845|    252|            return detail::unexpected_scan_error(
 4846|    252|                scan_error::invalid_scanned_value,
 4847|    252|                "Invalid encoding in scanned string_view");
 4848|    252|        }
 4849|       |
 4850|    538|        return SCN_MOVE(result);
  ------------------
  |  |  934|    538|    static_cast<    \
  |  |  935|    538|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4851|    790|    }
 4852|    790|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4816|    790|    auto src = [&]() {
 4817|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|       |            return make_contiguous_buffer(
 4819|       |                ranges::subrange{range.begin().base(), result.base()});
 4820|       |        }
 4821|    790|        else {
 4822|    790|            return make_contiguous_buffer(
 4823|    790|                ranges::subrange{range.begin(), result});
 4824|    790|        }
 4825|    790|    }();
_ZN3scn2v44impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 4903|     36|    {
 4904|     36|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4904:13): [True: 36, False: 0]
  ------------------
 4905|     36|            return read_string_view_impl(
 4906|     36|                range,
 4907|     36|                read_until_code_unit(
 4908|     36|                    range,
 4909|     36|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4910|     36|                        SourceCharT ch) { return ch == until; }),
 4911|     36|                value);
 4912|     36|        }
 4913|      0|        return read_string_view_impl(
 4914|      0|            range,
 4915|      0|            read_until_code_units(
 4916|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4917|      0|            value);
 4918|     36|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_SZ_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     36|        : m_fptr([](storage fn,
  743|     36|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     36|              cvref<T> obj = *get<T>(fn);
  745|     36|              if constexpr (std::is_void_v<R>) {
  746|     36|                  obj(static_cast<decltype(args)>(args)...);
  747|     36|              }
  748|     36|              else {
  749|     36|                  return obj(static_cast<decltype(args)>(args)...);
  750|     36|              }
  751|     36|          }),
  752|     36|          m_storage(std::addressof(f))
  753|     36|    {
  754|     36|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_SZ_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES19_w:
  743|    486|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    486|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    486|              else {
  749|    486|                  return obj(static_cast<decltype(args)>(args)...);
  750|    486|              }
  751|    486|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_17basic_string_viewIT0_NSG_11char_traitsIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    486|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    486|        else if constexpr (std::is_object_v<T>) {
  688|    486|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    486|    }
_ZZN3scn2v44impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEEENKUlwE_clEw:
 4910|    486|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     36|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     36|        {
  662|     36|        }
_ZN3scn2v44impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5102|    144|    {
 5103|    144|        auto it = read_source_impl(range, {specs});
 5104|    144|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|    144|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 18, False: 126]
  |  |  ------------------
  ------------------
 5105|     18|            return unexpected(it.error());
 5106|     18|        }
 5107|       |
 5108|    126|        return read_string_view_impl(range, *it, value);
 5109|    144|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4813|    126|{
 4814|    126|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4815|       |
 4816|    126|    auto src = [&]() {
 4817|    126|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|    126|            return make_contiguous_buffer(
 4819|    126|                ranges::subrange{range.begin().base(), result.base()});
 4820|    126|        }
 4821|    126|        else {
 4822|    126|            return make_contiguous_buffer(
 4823|    126|                ranges::subrange{range.begin(), result});
 4824|    126|        }
 4825|    126|    }();
 4826|    126|    using src_type = decltype(src);
 4827|       |
 4828|    126|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4828:9): [Folded - Ignored]
  ------------------
 4829|      0|        return detail::unexpected_scan_error(
 4830|      0|            scan_error::invalid_format_string,
 4831|      0|            "Cannot read a string_view from this source range (not "
 4832|      0|            "contiguous)");
 4833|      0|    }
 4834|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4835|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4836|       |                                             "Cannot read a string_view from "
 4837|       |                                             "this source range (would require "
 4838|       |                                             "transcoding)");
 4839|       |    }
 4840|    126|    else {
 4841|    126|        const auto view = src.view();
 4842|    126|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4843|       |
 4844|    126|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4844:13): [True: 4, False: 122]
  ------------------
 4845|      4|            return detail::unexpected_scan_error(
 4846|      4|                scan_error::invalid_scanned_value,
 4847|      4|                "Invalid encoding in scanned string_view");
 4848|      4|        }
 4849|       |
 4850|    122|        return SCN_MOVE(result);
  ------------------
  |  |  934|    122|    static_cast<    \
  |  |  935|    122|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4851|    126|    }
 4852|    126|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4816|    126|    auto src = [&]() {
 4817|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|       |            return make_contiguous_buffer(
 4819|       |                ranges::subrange{range.begin().base(), result.base()});
 4820|       |        }
 4821|    126|        else {
 4822|    126|            return make_contiguous_buffer(
 4823|    126|                ranges::subrange{range.begin(), result});
 4824|    126|        }
 4825|    126|    }();
_ZN3scn2v44impl22make_contiguous_bufferIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 1781|  7.10k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|  7.10k|                  ranges::sized_range<Range>) {
 1785|  7.10k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|  7.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|  7.10k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEETnPNS5_9enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISC_Esr6rangesE11sized_rangeISC_EEvE4typeELPv0EEEOSC_:
 1587|  7.10k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|  7.10k|    {
 1589|  7.10k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5834|  5.68k|{
 5835|  5.68k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  5.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 5.68k]
  |  |  ------------------
  ------------------
 5836|      0|        return unexpected(e);
 5837|      0|    }
 5838|       |
 5839|  5.68k|    if (!is_required) {
  ------------------
  |  Branch (5839:9): [True: 632, False: 5.05k]
  ------------------
 5840|    632|        return range.begin();
 5841|    632|    }
 5842|       |
 5843|  5.05k|    return skip_classic_whitespace(range);
 5844|  5.68k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIiEENS0_13scan_expectedIS9_EERT_:
 5910|    632|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|    632|                          basic_contiguous_scan_context<char_type>>) {
 5915|    632|            auto rd = make_reader<T, char_type>();
 5916|    632|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|    632|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|    632|    {
 5903|    632|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|    632|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    632|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    632|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    632|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 632]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    632|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    632|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|    632|                        .transform_error(make_eof_scan_error));
 5905|    632|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|    632|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3578|    632|    {
 3579|    632|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    632|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|    632|        return read_default_with_base(range, value, 10);
 3581|    632|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIjEENS0_13scan_expectedIS9_EERT_:
 5910|    632|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|    632|                          basic_contiguous_scan_context<char_type>>) {
 5915|    632|            auto rd = make_reader<T, char_type>();
 5916|    632|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|    632|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|    632|    {
 5903|    632|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|    632|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    632|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    632|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    632|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 632]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    632|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    632|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|    632|                        .transform_error(make_eof_scan_error));
 5905|    632|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|    632|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3578|    632|    {
 3579|    632|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    632|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|    632|        return read_default_with_base(range, value, 10);
 3581|    632|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIPvEENS0_13scan_expectedIS9_EERT_:
 5910|    632|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|    632|                          basic_contiguous_scan_context<char_type>>) {
 5915|    632|            auto rd = make_reader<T, char_type>();
 5916|    632|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|    632|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_23reader_impl_for_voidptrIcEESA_PvEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 5902|    632|    {
 5903|    632|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|    632|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    632|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    632|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    632|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 632]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    632|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    632|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|    632|                        .transform_error(make_eof_scan_error));
 5905|    632|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|    632|    }
_ZNK3scn2v44impl23reader_impl_for_voidptrIcE19skip_ws_before_readEv:
 5786|  1.20k|    {
 5787|  1.20k|        return true;
 5788|  1.20k|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RPvNS0_6detail10locale_refE:
 5804|    882|    {
 5805|    882|        detail::format_specs specs{};
 5806|    882|        specs.type = detail::presentation_type::int_hex;
 5807|       |
 5808|    882|        std::uintptr_t intvalue{};
 5809|    882|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3940|    882|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    882|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    882|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    882|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 882, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    882|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    882|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    882|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    882|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    882|    }                                                  \
  |  |  |  | 3939|    882|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5810|      0|                                                                intvalue, loc));
 5811|      0|        value = reinterpret_cast<void*>(intvalue);
 5812|      0|        return result;
 5813|    882|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIbEENS0_13scan_expectedIS9_EERT_:
 5910|    632|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|    632|                          basic_contiguous_scan_context<char_type>>) {
 5915|    632|            auto rd = make_reader<T, char_type>();
 5916|    632|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|    632|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_20reader_impl_for_boolIcEESA_bEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|    632|    {
 5903|    632|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|    632|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    632|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    632|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    632|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 632]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    632|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    632|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|    632|                        .transform_error(make_eof_scan_error));
 5905|    632|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|    632|    }
_ZNK3scn2v44impl11reader_baseINS1_20reader_impl_for_boolIcEEcE19skip_ws_before_readEv:
 3150|  1.52k|    {
 3151|  1.52k|        return true;
 3152|  1.52k|    }
_ZNK3scn2v44impl20reader_impl_for_boolIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNS0_6detail10locale_refE:
 5541|    632|    {
 5542|    632|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    632|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5543|       |
 5544|    632|        return bool_reader<CharT>{}.read_classic(range, value);
 5545|    632|    }
_ZN3scn2v44impl16bool_reader_baseC2Ev:
 5385|  1.08k|    constexpr bool_reader_base() = default;
_ZNK3scn2v44impl16bool_reader_base12read_classicINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5391|  1.02k|    {
 5392|  1.02k|        scan_error err{scan_error::invalid_scanned_value,
 5393|  1.02k|                       "Failed to read boolean"};
 5394|       |
 5395|  1.02k|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5395:13): [True: 900, False: 124]
  ------------------
 5396|    900|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5396:22): [True: 0, False: 900]
  ------------------
 5397|      0|                return *r;
 5398|      0|            }
 5399|    900|            else {
 5400|    900|                err = r.error();
 5401|    900|            }
 5402|    900|        }
 5403|       |
 5404|  1.02k|        if (m_options & allow_text) {
  ------------------
  |  Branch (5404:13): [True: 1.00k, False: 22]
  ------------------
 5405|  1.00k|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5405:22): [True: 0, False: 1.00k]
  ------------------
 5406|      0|                return *r;
 5407|      0|            }
 5408|  1.00k|            else {
 5409|  1.00k|                err = r.error();
 5410|  1.00k|            }
 5411|  1.00k|        }
 5412|       |
 5413|  1.02k|        return unexpected(err);
 5414|  1.02k|    }
_ZNK3scn2v44impl16bool_reader_base12read_numericINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5420|    912|    {
 5421|    912|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5421:18): [True: 0, False: 912]
  ------------------
 5422|      0|            value = false;
 5423|      0|            return *r;
 5424|      0|        }
 5425|    912|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5425:18): [True: 0, False: 912]
  ------------------
 5426|      0|            value = true;
 5427|      0|            return *r;
 5428|      0|        }
 5429|       |
 5430|    912|        return detail::unexpected_scan_error(
 5431|    912|            scan_error::invalid_scanned_value,
 5432|    912|            "Failed to read numeric boolean value: No match");
 5433|    912|    }
_ZNK3scn2v44impl16bool_reader_base20read_textual_classicINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5438|  1.00k|    {
 5439|  1.00k|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5439:18): [True: 0, False: 1.00k]
  ------------------
 5440|      0|            value = true;
 5441|      0|            return *r;
 5442|      0|        }
 5443|  1.00k|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5443:18): [True: 0, False: 1.00k]
  ------------------
 5444|      0|            value = false;
 5445|      0|            return *r;
 5446|      0|        }
 5447|       |
 5448|  1.00k|        return detail::unexpected_scan_error(
 5449|  1.00k|            scan_error::invalid_scanned_value,
 5450|  1.00k|            "Failed to read textual boolean value: No match");
 5451|  1.00k|    }
_ZN3scn2v44impl28read_matching_string_classicINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2293|  2.00k|{
 2294|  2.00k|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|  2.00k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.00k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.00k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.00k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 100, False: 1.90k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    100|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    100|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    100|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    100|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    100|    }                                                  \
  |  |  |  | 3939|  2.00k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.90k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2295|  1.90k|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2296|  1.90k|                    .transform_error(make_eof_parse_error));
 2297|       |
 2298|  1.90k|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2299|  1.90k|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2300|  1.90k|        if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  865|  1.90k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.90k, False: 0]
  |  |  ------------------
  ------------------
 2301|  1.90k|            return unexpected(parse_error::error);
 2302|  1.90k|        }
 2303|      0|        return it;
 2304|       |    }
 2305|       |    else {
 2306|       |        auto range_it = range.begin();
 2307|       |        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
 2308|       |            if (SCN_UNLIKELY(*range_it !=
 2309|       |                             static_cast<detail::char_t<Range>>(str[i]))) {
 2310|       |                return unexpected(parse_error::error);
 2311|       |            }
 2312|       |        }
 2313|       |        return it;
 2314|       |    }
 2315|  1.90k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIcEENS0_13scan_expectedIS9_EERT_:
 5910|    632|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|    632|                          basic_contiguous_scan_context<char_type>>) {
 5915|    632|            auto rd = make_reader<T, char_type>();
 5916|    632|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|    632|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_20reader_impl_for_charIcEESA_cEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|    632|    {
 5903|    632|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|    632|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    632|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    632|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    632|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 632]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    632|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    632|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|    632|                        .transform_error(make_eof_scan_error));
 5905|    632|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|    632|    }
_ZN3scn2v44impl12float_readerIcEC2Ev:
 3699|    632|    constexpr float_reader() = default;
_ZN3scn2v44impl17float_reader_baseC2Ev:
 3685|  1.08k|    constexpr float_reader_base() = default;
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIdEENS0_13scan_expectedIS9_EERT_:
 5910|    632|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|    632|                          basic_contiguous_scan_context<char_type>>) {
 5915|    632|            auto rd = make_reader<T, char_type>();
 5916|    632|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|    632|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|    632|    {
 5903|    632|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|    632|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    632|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    632|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    632|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 632]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    632|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    632|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|    632|                        .transform_error(make_eof_scan_error));
 5905|    632|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|    632|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4184|    632|    {
 4185|    632|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    632|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4186|       |
 4187|    632|        float_reader<CharT> rd{};
 4188|    632|        return read_impl<Range>(
 4189|    632|            range, rd,
 4190|    632|            [](float_reader<CharT>& r, auto&&... args) {
 4191|    632|                return r.read_source(SCN_FWD(args)...);
 4192|    632|            },
 4193|    632|            value);
 4194|    632|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|    632|        : m_fptr([](storage fn,
  743|    632|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    632|              cvref<T> obj = *get<T>(fn);
  745|    632|              if constexpr (std::is_void_v<R>) {
  746|    632|                  obj(static_cast<decltype(args)>(args)...);
  747|    632|              }
  748|    632|              else {
  749|    632|                  return obj(static_cast<decltype(args)>(args)...);
  750|    632|              }
  751|    632|          }),
  752|    632|          m_storage(std::addressof(f))
  753|    632|    {
  754|    632|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|    632|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    632|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    632|              else {
  749|    632|                  return obj(static_cast<decltype(args)>(args)...);
  750|    632|              }
  751|    632|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|    632|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    632|        else if constexpr (std::is_object_v<T>) {
  688|    632|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    632|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4190|    632|            [](float_reader<CharT>& r, auto&&... args) {
 4191|    632|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|    632|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4192|    632|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|    632|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    632|        {
  662|    632|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIS9_EERT_:
 5910|    632|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|    632|                          basic_contiguous_scan_context<char_type>>) {
 5915|    632|            auto rd = make_reader<T, char_type>();
 5916|    632|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|    632|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5902|    632|    {
 5903|    632|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|    632|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    632|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    632|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    632|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 632]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    632|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    632|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|    632|                        .transform_error(make_eof_scan_error));
 5905|    632|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|    632|    }
_ZN3scn2v44impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5302|    632|    {
 5303|    632|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    632|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|    632|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5305|    632|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIS9_EERT_:
 5910|    632|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|    632|                          basic_contiguous_scan_context<char_type>>) {
 5915|    632|            auto rd = make_reader<T, char_type>();
 5916|    632|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|    632|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5902|    632|    {
 5903|    632|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|    632|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    632|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    632|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    632|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 632]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    632|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    632|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|    632|                        .transform_error(make_eof_scan_error));
 5905|    632|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|    632|    }
_ZN3scn2v44impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5302|    632|    {
 5303|    632|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    632|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|    632|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5305|    632|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIS9_EERT_:
 5910|    632|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|    632|                          basic_contiguous_scan_context<char_type>>) {
 5915|    632|            auto rd = make_reader<T, char_type>();
 5916|    632|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|    632|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5902|    632|    {
 5903|    632|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|    632|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    632|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    632|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    632|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 632]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    632|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    632|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|    632|                        .transform_error(make_eof_scan_error));
 5905|    632|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|    632|    }
_ZN3scn2v44impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5302|    632|    {
 5303|    632|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    632|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|    632|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5305|    632|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEcEEEENSL_10locale_refE:
 2985|  46.6k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  934|  46.6k|    static_cast<    \
  |  |  935|  46.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2986|  46.6k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2987|  46.6k|          m_current(m_range.begin())
 2988|  46.6k|    {
 2989|  46.6k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE3endEv:
 2997|   120k|    {
 2998|   120k|        return m_range.end();
 2999|   120k|    }
_ZN3scn2v44impl19is_first_char_spaceIcEENS1_26is_first_char_space_resultIT_EENSt3__117basic_string_viewIS4_NS6_11char_traitsIS4_EEEE:
 1318|  41.1k|{
 1319|       |    // TODO: optimize
 1320|  41.1k|    SCN_EXPECT(!str.empty());
  ------------------
  |  |  930|  41.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  41.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1321|  41.1k|    auto res = get_next_code_point(str);
 1322|  41.1k|    return {res.iterator, res.value, detail::is_cp_space(res.value)};
 1323|  41.1k|}
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE10advance_toES7_:
 3012|  43.8k|    {
 3013|  43.8k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  930|  43.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  43.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3014|  43.8k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3015|  43.8k|            if (it == nullptr) {
  ------------------
  |  Branch (3015:17): [True: 0, False: 43.8k]
  ------------------
 3016|      0|                it = end();
 3017|      0|            }
 3018|  43.8k|        }
 3019|  43.8k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|  43.8k|    static_cast<    \
  |  |  935|  43.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3020|  43.8k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5rangeEv:
 3002|  34.7k|    {
 3003|  34.7k|        return ranges::subrange{begin(), end()};
 3004|  34.7k|    }
_ZN3scn2v44impl24read_while_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2215|  7.10k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|  7.10k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|  7.10k|        auto buf = make_contiguous_buffer(range);
 2220|  7.10k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|  7.10k|        return ranges::next(range.begin(),
 2222|  7.10k|                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|       |    else {
 2225|       |        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|       |            return detail::is_cp_space(cp);
 2238|       |        });
 2239|       |    }
 2240|  7.10k|}
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE11impl_prefixINS1_15take_width_viewISA_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_b:
 6073|  4.89k|    {
 6074|  4.89k|        const bool need_skipped_width =
 6075|  4.89k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6075:13): [True: 124, False: 4.77k]
  |  Branch (6075:33): [True: 4.77k, False: 0]
  ------------------
 6076|  4.89k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6077|       |
 6078|       |        // Read prefix
 6079|  4.89k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6079:13): [True: 224, False: 4.67k]
  ------------------
 6080|  4.89k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6080:13): [True: 768, False: 3.90k]
  ------------------
 6081|    992|            return skip_fill(rng, specs.precision, specs.fill,
 6082|    992|                             need_skipped_width);
 6083|    992|        }
 6084|  3.90k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6084:13): [True: 3.69k, False: 208]
  |  Branch (6084:56): [True: 2.27k, False: 1.42k]
  ------------------
 6085|       |            // Default alignment:
 6086|       |            // Skip preceding whitespace, if required by the reader
 6087|  2.27k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6087:17): [True: 2.27k, False: 0]
  ------------------
 6088|  2.27k|                auto max_width_view = take_width(rng, specs.precision);
 6089|  2.27k|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|  2.27k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.27k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.27k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.27k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 238, False: 2.03k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    238|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    238|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    238|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    238|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    238|    }                                                  \
  |  |  |  | 3939|  2.27k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  2.03k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6090|  2.03k|                                  .transform_error(make_eof_scan_error));
 6091|  2.03k|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6092|  2.27k|            }
 6093|      0|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6094|      0|                            make_eof_scan_error));
 6095|       |
 6096|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6096:17): [True: 0, False: 0]
  ------------------
 6097|      0|                return result_type{
 6098|      0|                    it,
 6099|      0|                    calculate_text_width(make_contiguous_buffer(
 6100|      0|                                             ranges::subrange{rng.begin(), it})
 6101|      0|                                             .view())};
 6102|      0|            }
 6103|      0|            return result_type{it, 0};
 6104|      0|        }
 6105|       |
 6106|  1.63k|        return result_type{rng.begin(), 0};
 6107|  3.90k|    }
_ZN3scn2v44impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEb:
 5988|    992|{
 5989|    992|    using char_type = detail::char_t<Range>;
 5990|    992|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5991|       |
 5992|    992|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5992:9): [True: 520, False: 472]
  ------------------
 5993|    520|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5994|    520|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5995|       |
 5996|    520|        if (max_width == 0) {
  ------------------
  |  Branch (5996:13): [True: 0, False: 520]
  ------------------
 5997|      0|            auto it = read_while_code_unit(range, pred);
 5998|       |
 5999|      0|            if (want_skipped_width) {
  ------------------
  |  Branch (5999:17): [True: 0, False: 0]
  ------------------
 6000|      0|                auto prefix_width =
 6001|      0|                    static_cast<std::ptrdiff_t>(
 6002|      0|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 6003|      0|                    ranges::distance(range.begin(), it);
 6004|      0|                return result_type{it, prefix_width};
 6005|      0|            }
 6006|      0|            return result_type{it, 0};
 6007|      0|        }
 6008|       |
 6009|    520|        auto max_width_view = take_width(range, max_width);
 6010|    520|        auto w_it = read_while_code_unit(max_width_view, pred);
 6011|       |
 6012|    520|        if (want_skipped_width) {
  ------------------
  |  Branch (6012:13): [True: 520, False: 0]
  ------------------
 6013|    520|            return result_type{w_it.base(), max_width - w_it.count()};
 6014|    520|        }
 6015|      0|        return result_type{w_it.base(), 0};
 6016|    520|    }
 6017|       |
 6018|    472|    const auto fill_chars = fill.template get_code_units<char_type>();
 6019|    472|    if (max_width == 0) {
  ------------------
  |  Branch (6019:9): [True: 0, False: 472]
  ------------------
 6020|      0|        auto it = read_while_code_units(range, fill_chars);
 6021|       |
 6022|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (6022:13): [True: 0, False: 0]
  ------------------
 6023|      0|            auto prefix_width =
 6024|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 6025|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 6026|      0|            return result_type{it, prefix_width};
 6027|      0|        }
 6028|      0|        return result_type{it, 0};
 6029|      0|    }
 6030|       |
 6031|    472|    auto max_width_view = take_width(range, max_width);
 6032|    472|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 6033|       |
 6034|    472|    if (want_skipped_width) {
  ------------------
  |  Branch (6034:9): [True: 472, False: 0]
  ------------------
 6035|    472|        return result_type{w_it.base(), max_width - w_it.count()};
 6036|    472|    }
 6037|      0|    return result_type{w_it.base(), 0};
 6038|    472|}
_ZN3scn2v44impl12function_refIFbcES3_EC2IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_ST_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSJ_:
  742|    520|        : m_fptr([](storage fn,
  743|    520|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    520|              cvref<T> obj = *get<T>(fn);
  745|    520|              if constexpr (std::is_void_v<R>) {
  746|    520|                  obj(static_cast<decltype(args)>(args)...);
  747|    520|              }
  748|    520|              else {
  749|    520|                  return obj(static_cast<decltype(args)>(args)...);
  750|    520|              }
  751|    520|          }),
  752|    520|          m_storage(std::addressof(f))
  753|    520|    {
  754|    520|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_ST_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES15_c:
  743|    734|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    734|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    734|              else {
  749|    734|                  return obj(static_cast<decltype(args)>(args)...);
  750|    734|              }
  751|    734|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESI_lRKNS0_6detail9fill_typeEbEUlcE_EEDaNS3_7storageE:
  683|    734|    {
  684|    734|        if constexpr (std::is_const_v<T>) {
  685|    734|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    734|    }
_ZZN3scn2v44impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEbENKUlcE_clEc:
 5994|    734|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|    520|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    520|        {
  667|    520|        }
_ZN3scn2v44impl20read_while_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2074|    520|{
 2075|    520|    return read_until_code_unit(range, std::not_fn(pred));
 2076|    520|}
_ZN3scn2v44impl20read_until_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2055|    520|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|    520|    else {
 2060|    520|        auto first = range.begin();
 2061|    770|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 734, False: 36]
  ------------------
 2062|    734|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 484, False: 250]
  ------------------
 2063|    484|                return first;
 2064|    484|            }
 2065|    734|        }
 2066|     36|        return first;
 2067|    520|    }
 2068|    520|}
_ZNK3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE5beginEv:
 2920|  5.53k|    {
 2921|  5.53k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2922|  5.53k|                                      m_count};
 2923|  5.53k|    }
_ZNK3scn2v44impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEvE3getEv:
 2825|  22.1k|    {
 2826|  22.1k|        return view;
 2827|  22.1k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEC2ES6_SF_l:
 2480|  5.53k|        : m_current(x), m_end(s), m_count(n)
 2481|  5.53k|    {
 2482|  5.53k|    }
_ZN3scn2v44implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2891|  7.32k|        {
 2892|  7.32k|            return !(y == x);
 2893|  7.32k|        }
_ZN3scn2v44impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2878|  14.6k|        {
 2879|  14.6k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2879:21): [True: 1.07k, False: 13.5k]
  |  Branch (2879:39): [True: 566, False: 504]
  ------------------
 2880|  14.6k|                   y.base() == x.m_end ||
  ------------------
  |  Branch (2880:20): [True: 28, False: 14.0k]
  ------------------
 2881|  14.6k|                   (y.count() == 1 && y.multibyte_left() == 0 &&
  ------------------
  |  Branch (2881:21): [True: 1.91k, False: 12.0k]
  |  Branch (2881:39): [True: 1.39k, False: 522]
  ------------------
 2882|  14.0k|                    y.is_current_double_wide());
  ------------------
  |  Branch (2882:21): [True: 0, False: 1.39k]
  ------------------
 2883|  14.6k|        }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE14multibyte_leftEv:
 2520|  2.98k|    {
 2521|  2.98k|        return m_multibyte_left;
 2522|  2.98k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE22is_current_double_wideEv:
 2525|  1.39k|    {
 2526|  1.39k|        assert(count() != 0 || multibyte_left() != 0);
 2527|  1.39k|        return _get_width_at_current_cp_start(
 2528|  1.39k|                   _get_cp_length_at_current()) == 2;
 2529|  1.39k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE30_get_width_at_current_cp_startEl:
 2753|  8.00k|    {
 2754|  8.00k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  865|  8.00k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 8.00k]
  |  |  ------------------
  ------------------
 2755|      0|            return 0;
 2756|      0|        }
 2757|       |
 2758|  8.00k|        if (cplen == 1) {
  ------------------
  |  Branch (2758:13): [True: 4.33k, False: 3.66k]
  ------------------
 2759|  4.33k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  930|  4.33k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.33k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2760|  4.33k|            auto cp = static_cast<char32_t>(*m_current);
 2761|  4.33k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2762|  4.33k|        }
 2763|       |
 2764|  3.66k|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2765|  3.66k|                                           cplen);
 2766|  3.66k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  3.66k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 3.66k]
  |  |  ------------------
  ------------------
 2767|      0|            return 0;
 2768|      0|        }
 2769|       |
 2770|  3.66k|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2771|  3.66k|        return static_cast<difference_type>(
 2772|  3.66k|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2773|  3.66k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE25_get_cp_length_at_currentEv:
 2747|  8.00k|    {
 2748|  8.00k|        return static_cast<difference_type>(
 2749|  8.00k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2750|  8.00k|    }
_ZNK3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE3endEv:
 2926|  11.1k|    {
 2927|  11.1k|        return sentinel<true>{m_base.get().end()};
 2928|  11.1k|    }
_ZN3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE8sentinelILb1EEC2ENSA_8sentinelILb1EEE:
 2859|  11.1k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
  ------------------
  |  |  934|  11.1k|    static_cast<    \
  |  |  935|  11.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEdeEv:
 2532|  9.52k|    {
 2533|  9.52k|        return *m_current;
 2534|  9.52k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEppEv:
 2541|  11.4k|    {
 2542|  11.4k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  930|  11.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  11.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2543|  11.4k|        _increment_current();
 2544|  11.4k|        return *this;
 2545|  11.4k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE18_increment_currentEv:
 2776|  11.4k|    {
 2777|  11.4k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2777:13): [True: 6.60k, False: 4.85k]
  ------------------
 2778|  6.60k|            auto cplen = _get_cp_length_at_current();
 2779|  6.60k|            m_multibyte_left = cplen - 1;
 2780|  6.60k|            m_count -= _get_width_at_current_cp_start(cplen);
 2781|  6.60k|        }
 2782|  4.85k|        else {
 2783|  4.85k|            --m_multibyte_left;
 2784|  4.85k|        }
 2785|       |
 2786|  11.4k|        ++m_current;
 2787|  11.4k|    }
_ZN3scn2v44impl21read_while_code_unitsINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENSt3__117basic_string_viewIcNSD_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEESJ_RKT0_:
 2135|    472|{
 2136|    472|    static_assert(ranges::common_range<CodeUnits>);
 2137|       |
 2138|    472|    auto it = range.begin();
 2139|    472|    while (it != range.end()) {
  ------------------
  |  Branch (2139:12): [True: 472, False: 0]
  ------------------
 2140|    472|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2141|    472|                                           needle.size());
 2142|    472|        if (!r) {
  ------------------
  |  Branch (2142:13): [True: 82, False: 390]
  ------------------
 2143|     82|            return it;
 2144|     82|        }
 2145|    390|        static_assert(
 2146|    390|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2147|    390|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2147:13): [True: 390, False: 0]
  ------------------
 2148|    390|            return it;
 2149|    390|        }
 2150|      0|        it = *r;
 2151|      0|    }
 2152|      0|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2153|      0|    return it;
 2154|      0|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_l:
 1955|    472|{
 1956|    472|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|    472|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    472|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|    472|    else {
 1967|    472|        auto it = range.begin();
 1968|    472|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 0, False: 472]
  ------------------
 1969|      0|            return ranges::next(it, count);
 1970|      0|        }
 1971|       |
 1972|  1.94k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 1.55k, False: 390]
  ------------------
 1973|  1.55k|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 82, False: 1.47k]
  ------------------
 1974|     82|                return unexpected(eof_error::eof);
 1975|     82|            }
 1976|  1.55k|        }
 1977|       |
 1978|    390|        return it;
 1979|    472|    }
 1980|    472|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEmT_:
 1095|    472|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|       |                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|       |        else {
 1107|       |            if (r.begin().stores_parent()) {
 1108|       |                return static_cast<size_t>(
 1109|       |                    r.begin().parent()->chars_available() -
 1110|       |                    r.begin().position());
 1111|       |            }
 1112|       |            return r.begin().contiguous_segment().size();
 1113|       |        }
 1114|       |    }
 1115|    472|    else {
 1116|    472|        return 0;
 1117|    472|    }
 1118|    472|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSM_NS1_20incrementable_traitsISM_E15difference_typeE:
  267|  2.27k|    {
  268|  2.27k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  2.27k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent22random_access_iteratorISM_EEvE4typeERSM_NS1_20incrementable_traitsISM_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  160|  2.27k|    {
  161|  2.27k|        constexpr auto zero = iter_difference_t<I>{0};
  162|       |
  163|  2.27k|        if (n > zero) {
  ------------------
  |  Branch (163:13): [True: 0, False: 2.27k]
  ------------------
  164|      0|            while (n-- > zero) {
  ------------------
  |  Branch (164:20): [True: 0, False: 0]
  ------------------
  165|      0|                ++i;
  166|      0|            }
  167|      0|        }
  168|  2.27k|        else {
  169|  2.27k|            while (n++ < zero) {
  ------------------
  |  Branch (169:20): [True: 0, False: 2.27k]
  ------------------
  170|      0|                --i;
  171|      0|            }
  172|  2.27k|        }
  173|  2.27k|    }
_ZN3scn2v44impl27counted_width_iterator_implneINS2_22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEDTeqclscPFRKS7_vELDnEEclscPFRKT_vELDnEEERKNS4_IS7_SG_EERKNS4_ISL_T0_EE:
 2637|  6.95k|    {
 2638|  6.95k|        return !(a == b);
 2639|  6.95k|    }
_ZN3scn2v44impl27counted_width_iterator_impleqINS2_22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEDTeqclscPFRKS7_vELDnEEclscPFRKT_vELDnEEERKNS4_IS7_SG_EERKNS4_ISL_T0_EE:
 2629|  6.95k|    {
 2630|  6.95k|        return a.m_current == b.m_current;
 2631|  6.95k|    }
_ZNK3scn2v44impl14_take_width_fnclINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEEDTtlS4_fp_fp0_EERKT_l:
 2942|  3.26k|    {
 2943|  3.26k|        return take_width_view{r, n};
 2944|  3.26k|    }
_ZN3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEEC2ERKSA_l:
 2910|  3.26k|        : m_base(base), m_count(count)
 2911|  3.26k|    {
 2912|  3.26k|    }
_ZN3scn2v44impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEvEC2ERKSB_:
 2822|  3.26k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v44impl23skip_classic_whitespaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3065|  2.27k|{
 3066|  2.27k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 2.27k, False: 0]
  ------------------
 3067|  2.27k|        auto it = read_while_classic_space(range);
 3068|  2.27k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|  2.27k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  2.27k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 238, False: 2.03k]
  |  |  ------------------
  ------------------
 3070|    238|            return unexpected(e);
 3071|    238|        }
 3072|       |
 3073|  2.03k|        return it;
 3074|  2.27k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|  2.27k|}
_ZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2215|  2.27k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|  2.27k|    else {
 2225|  2.27k|        auto it = range.begin();
 2226|       |
 2227|  2.27k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|  2.27k|            auto seg = get_contiguous_beginning(range);
 2229|  2.27k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|  2.27k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2230:17): [True: 0, False: 2.27k]
  ------------------
 2231|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|      0|            }
 2233|  2.27k|            ranges::advance(it, seg.size());
 2234|  2.27k|        }
 2235|       |
 2236|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  2.27k|            return detail::is_cp_space(cp);
 2238|  2.27k|        });
 2239|  2.27k|    }
 2240|  2.27k|}
_ZN3scn2v44impl24get_contiguous_beginningINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDaT_:
 1039|  2.27k|{
 1040|       |    if constexpr (ranges::contiguous_range<Range> &&
 1041|       |                  ranges::sized_range<Range>) {
 1042|       |        return r;
 1043|       |    }
 1044|       |    else if constexpr (std::is_same_v<
 1045|       |                           ranges::const_iterator_t<Range>,
 1046|       |                           typename detail::basic_scan_buffer<
 1047|       |                               detail::char_t<Range>>::forward_iterator>) {
 1048|       |        if constexpr (ranges::common_range<Range>) {
 1049|       |            auto seg = r.begin().contiguous_segment();
 1050|       |            auto dist =
 1051|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1052|       |            return seg.substr(0, std::min(seg.size(), dist));
 1053|       |        }
 1054|       |        else {
 1055|       |            return r.begin().contiguous_segment();
 1056|       |        }
 1057|       |    }
 1058|  2.27k|    else {
 1059|  2.27k|        return std::basic_string_view<detail::char_t<Range>>{};
 1060|  2.27k|    }
 1061|  2.27k|}
_ZN3scn2v44impl21read_while_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2180|  2.27k|{
 2181|  2.27k|    return read_until_code_point(range, std::not_fn(pred));
 2182|  2.27k|}
_ZN3scn2v44impl21read_until_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2159|  2.27k|{
 2160|  2.27k|    auto it = range.begin();
 2161|  3.68k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 3.45k, False: 238]
  ------------------
 2162|  3.45k|        const auto val =
 2163|  3.45k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  3.45k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|  3.45k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 3.45k, False: 0]
  |  |  ------------------
  ------------------
 2165|  3.45k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  3.45k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  3.45k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 2.03k, False: 1.41k]
  ------------------
 2168|  2.03k|                return it;
 2169|  2.03k|            }
 2170|  3.45k|        }
 2171|  1.41k|        it = val.iterator;
 2172|  1.41k|    }
 2173|       |
 2174|    238|    return it;
 2175|  2.27k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISP_EEE4typeEEESP_:
 1997|  3.45k|{
 1998|  3.45k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|  3.45k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.45k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  3.45k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  3.45k|    auto it = range.begin();
 2002|  3.45k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  3.45k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|  3.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 3.45k]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|  3.45k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 2.55k, False: 892]
  ------------------
 2011|  2.55k|        ++it;
 2012|  2.55k|        return {it, string_type(1, *range.begin())};
 2013|  2.55k|    }
 2014|       |
 2015|    892|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|    892|    return {it, string_type{range.begin(), it}};
 2017|  3.45k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEbT_:
  944|  5.72k|{
  945|  5.72k|    return is_range_eof(r.begin(), r.end());
  946|  5.72k|}
_ZN3scn2v44impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS8_ISE_E8sentinelILb1EEEEEbT_T0_:
  928|  5.72k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  5.72k|    {
  938|  5.72k|        return begin == end;
  939|  5.72k|    }
  940|  5.72k|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSC_ISG_E8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SP_EENS1_20incrementable_traitsISP_E15difference_typeEE4typeERSP_ST_SQ_:
  282|    892|    {
  283|    892|        return n - fn::impl_i_n_s(i, n, bound);
  284|    892|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSC_ISG_E8sentinelILb1EEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SP_EENS1_20incrementable_traitsISP_E15difference_typeEE4typeERSP_ST_SQ_:
  226|    892|    {
  227|    892|        constexpr iter_difference_t<I> zero{0};
  228|    892|        iter_difference_t<I> counter{0};
  229|       |
  230|    892|        if (n < zero) {
  ------------------
  |  Branch (230:13): [True: 0, False: 892]
  ------------------
  231|      0|            do {
  232|      0|                --i;
  233|      0|                --counter;  // Yes, really
  234|      0|            } while (++n < zero && i != bound);
  ------------------
  |  Branch (234:22): [True: 0, False: 0]
  |  Branch (234:36): [True: 0, False: 0]
  ------------------
  235|      0|        }
  236|    892|        else {
  237|  3.28k|            while (n-- > zero && i != bound) {
  ------------------
  |  Branch (237:20): [True: 2.39k, False: 892]
  |  Branch (237:34): [True: 2.39k, False: 0]
  ------------------
  238|  2.39k|                ++i;
  239|  2.39k|                ++counter;
  240|  2.39k|            }
  241|    892|        }
  242|       |
  243|    892|        return counter;
  244|    892|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEcE8is_validEv:
 1988|  3.45k|    {
 1989|  3.45k|        return !codepoint.empty();
 1990|  3.45k|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|  2.27k|        : m_fptr([](storage fn,
  743|  2.27k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.27k|              cvref<T> obj = *get<T>(fn);
  745|  2.27k|              if constexpr (std::is_void_v<R>) {
  746|  2.27k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.27k|              }
  748|  2.27k|              else {
  749|  2.27k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.27k|              }
  751|  2.27k|          }),
  752|  2.27k|          m_storage(std::addressof(f))
  753|  2.27k|    {
  754|  2.27k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  3.45k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.45k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  3.45k|              else {
  749|  3.45k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.45k|              }
  751|  3.45k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS6_INS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  3.45k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  3.45k|        else if constexpr (std::is_object_v<T>) {
  688|  3.45k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  3.45k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2236|  3.45k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  3.45k|            return detail::is_cp_space(cp);
 2238|  3.45k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  2.27k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.27k|        {
  662|  2.27k|        }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_9eof_errorET_:
  950|  2.27k|{
  951|  2.27k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  2.27k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 238, False: 2.03k]
  |  |  ------------------
  ------------------
  952|    238|        return eof_error::eof;
  953|    238|    }
  954|  2.03k|    return eof_error::good;
  955|  2.27k|}
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE4baseEv:
 2512|  17.0k|    {
 2513|  17.0k|        return m_current;
 2514|  17.0k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE5countEv:
 2516|  33.0k|    {
 2517|  33.0k|        return m_count;
 2518|  33.0k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6073|  5.96k|    {
 6074|  5.96k|        const bool need_skipped_width =
 6075|  5.96k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6075:13): [True: 1.88k, False: 4.07k]
  |  Branch (6075:33): [True: 0, False: 4.07k]
  ------------------
 6076|  5.96k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6077|       |
 6078|       |        // Read prefix
 6079|  5.96k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6079:13): [True: 116, False: 5.84k]
  ------------------
 6080|  5.96k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6080:13): [True: 296, False: 5.55k]
  ------------------
 6081|    412|            return skip_fill(rng, specs.precision, specs.fill,
 6082|    412|                             need_skipped_width);
 6083|    412|        }
 6084|  5.55k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6084:13): [True: 4.83k, False: 720]
  |  Branch (6084:56): [True: 1.65k, False: 3.17k]
  ------------------
 6085|       |            // Default alignment:
 6086|       |            // Skip preceding whitespace, if required by the reader
 6087|  1.65k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6087:17): [True: 0, False: 1.65k]
  ------------------
 6088|      0|                auto max_width_view = take_width(rng, specs.precision);
 6089|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6090|      0|                                  .transform_error(make_eof_scan_error));
 6091|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6092|      0|            }
 6093|  3.30k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|  1.65k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.65k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.65k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.65k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  1.65k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6094|  3.30k|                            make_eof_scan_error));
 6095|       |
 6096|  3.30k|            if (need_skipped_width) {
  ------------------
  |  Branch (6096:17): [True: 1.04k, False: 606]
  ------------------
 6097|  1.04k|                return result_type{
 6098|  1.04k|                    it,
 6099|  1.04k|                    calculate_text_width(make_contiguous_buffer(
 6100|  1.04k|                                             ranges::subrange{rng.begin(), it})
 6101|  1.04k|                                             .view())};
 6102|  1.04k|            }
 6103|    606|            return result_type{it, 0};
 6104|  3.30k|        }
 6105|       |
 6106|  3.89k|        return result_type{rng.begin(), 0};
 6107|  5.55k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6115|  3.39k|    {
 6116|  3.39k|        const bool need_skipped_width =
 6117|  3.39k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6117:13): [True: 500, False: 2.89k]
  |  Branch (6117:33): [True: 1.28k, False: 1.60k]
  ------------------
 6118|  3.39k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6119|       |
 6120|  3.39k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6120:13): [True: 308, False: 3.08k]
  ------------------
 6121|  3.39k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6121:13): [True: 374, False: 2.71k]
  ------------------
 6122|    682|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6122:17): [True: 326, False: 356]
  ------------------
 6123|    682|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6123:17): [True: 104, False: 222]
  ------------------
 6124|    104|                return result_type{rng.begin(), 0};
 6125|    104|            }
 6126|    578|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6127|    578|                             specs.fill, need_skipped_width);
 6128|    682|        }
 6129|  2.71k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6129:13): [True: 2.56k, False: 150]
  ------------------
 6130|  2.71k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6130:13): [True: 2.24k, False: 318]
  ------------------
 6131|  2.71k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6131:15): [True: 248, False: 1.99k]
  |  Branch (6131:35): [True: 212, False: 36]
  ------------------
 6132|  2.24k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6132:15): [True: 662, False: 1.37k]
  ------------------
 6133|  2.03k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6133:15): [True: 550, False: 112]
  ------------------
 6134|    762|            if (specs.precision != 0) {
  ------------------
  |  Branch (6134:17): [True: 550, False: 212]
  ------------------
 6135|    550|                const auto initial_width =
 6136|    550|                    specs.precision - prefix_width - value_width;
 6137|    550|                auto max_width_view = take_width(rng, initial_width);
 6138|    550|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|    550|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    550|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    550|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    550|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 550]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    550|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    550|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    550|                                  .transform_error(make_eof_scan_error));
 6140|    550|                return result_type{w_it.base(), initial_width - w_it.count()};
 6141|    550|            }
 6142|    424|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|    212|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    212|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    212|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    212|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 212]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    212|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    212|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|    424|                            make_eof_scan_error));
 6144|       |
 6145|    424|            if (need_skipped_width) {
  ------------------
  |  Branch (6145:17): [True: 212, False: 0]
  ------------------
 6146|    212|                return result_type{
 6147|    212|                    it,
 6148|    212|                    calculate_text_width(make_contiguous_buffer(
 6149|    212|                                             ranges::subrange{rng.begin(), it})
 6150|    212|                                             .view())};
 6151|    212|            }
 6152|      0|            return result_type{it, 0};
 6153|    424|        }
 6154|  1.95k|        return result_type{rng.begin(), 0};
 6155|  2.71k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIiEENS0_13scan_expectedIS9_EERT_:
 6225|  2.44k|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|  2.44k|                          basic_contiguous_scan_context<char_type>>) {
 6230|  2.44k|            auto rd = make_reader<T, char_type>();
 6231|  2.44k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  2.44k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 1.79k, False: 652]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  1.79k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  1.79k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.79k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.79k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  1.79k|    }
  ------------------
 6232|    652|            return impl(rd, range, value);
 6233|       |        }
 6234|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6235|       |            auto rd = make_reader<T, char_type>();
 6236|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6237|       |
 6238|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6239|       |                specs.width != 0) {
 6240|       |                return impl(rd, range, value);
 6241|       |            }
 6242|       |
 6243|       |            auto crange = get_as_contiguous(range);
 6244|       |            SCN_TRY(it, impl(rd, crange, value));
 6245|       |            return ranges::next(range.begin(),
 6246|       |                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|  2.44k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6160|    652|    {
 6161|    652|        const bool need_skipped_width =
 6162|    652|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 190, False: 462]
  |  Branch (6162:33): [True: 372, False: 90]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|    652|        auto it = rng.begin();
 6166|    652|        std::ptrdiff_t prefix_width = 0;
 6167|    652|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 374, False: 278]
  ------------------
 6168|    374|            auto max_width_view = take_width(rng, specs.precision);
 6169|    374|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    374|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    374|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    374|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    374|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 32, False: 342]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     32|    }                                                  \
  |  |  |  | 3939|    374|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    342|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|    342|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|    342|            it = prefix_result.first.base();
 6172|    342|            prefix_width = prefix_result.second;
 6173|    342|        }
 6174|    278|        else {
 6175|    278|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|    278|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    278|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    278|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    278|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 278]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    278|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    278|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|    278|            std::tie(it, prefix_width) = prefix_result;
 6177|    278|        }
 6178|    620|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|    620|        std::ptrdiff_t value_width = 0;
 6182|    620|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 342, False: 278]
  ------------------
 6183|    342|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 4, False: 338]
  ------------------
 6184|      4|                return detail::unexpected_scan_error(
 6185|      4|                    scan_error::invalid_fill,
 6186|      4|                    "Too many fill characters before value, "
 6187|      4|                    "precision exceeded before reading value");
 6188|      4|            }
 6189|       |
 6190|    338|            const auto initial_width = specs.precision - prefix_width;
 6191|    338|            auto max_width_view =
 6192|    338|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|    338|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    338|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    338|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    338|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    338|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 338, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    338|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    338|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    338|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    338|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    338|    }                                                  \
  |  |  |  | 3939|    338|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|      0|            it = w_it.base();
 6195|      0|            value_width = initial_width - w_it.count();
 6196|      0|        }
 6197|    278|        else {
 6198|    278|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|    278|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    278|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    278|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 278, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    278|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|    278|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    278|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    278|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|    278|    }                                                  \
  |  | 3939|    278|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    278|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|      0|                                             specs, value, loc));
 6200|       |
 6201|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 0, False: 0]
  ------------------
 6202|      0|                value_width = calculate_text_width(
 6203|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|      0|                        .view());
 6205|      0|            }
 6206|      0|        }
 6207|       |
 6208|       |        // Read postfix
 6209|      0|        std::ptrdiff_t postfix_width = 0;
 6210|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 0, False: 0]
  ------------------
 6211|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6214|      0|                                 value_width));
 6215|      0|            std::tie(it, postfix_width) = postfix_result;
 6216|      0|        }
 6217|       |
 6218|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6219|      0|            specs, prefix_width, value_width, postfix_width));
 6220|      0|        return it;
 6221|      0|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIjEENS0_13scan_expectedIS9_EERT_:
 6225|  2.44k|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|  2.44k|                          basic_contiguous_scan_context<char_type>>) {
 6230|  2.44k|            auto rd = make_reader<T, char_type>();
 6231|  2.44k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  2.44k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 1.79k, False: 652]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  1.79k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  1.79k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.79k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.79k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  1.79k|    }
  ------------------
 6232|    652|            return impl(rd, range, value);
 6233|       |        }
 6234|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6235|       |            auto rd = make_reader<T, char_type>();
 6236|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6237|       |
 6238|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6239|       |                specs.width != 0) {
 6240|       |                return impl(rd, range, value);
 6241|       |            }
 6242|       |
 6243|       |            auto crange = get_as_contiguous(range);
 6244|       |            SCN_TRY(it, impl(rd, crange, value));
 6245|       |            return ranges::next(range.begin(),
 6246|       |                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|  2.44k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6160|    652|    {
 6161|    652|        const bool need_skipped_width =
 6162|    652|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 190, False: 462]
  |  Branch (6162:33): [True: 372, False: 90]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|    652|        auto it = rng.begin();
 6166|    652|        std::ptrdiff_t prefix_width = 0;
 6167|    652|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 374, False: 278]
  ------------------
 6168|    374|            auto max_width_view = take_width(rng, specs.precision);
 6169|    374|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    374|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    374|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    374|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    374|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 32, False: 342]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     32|    }                                                  \
  |  |  |  | 3939|    374|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    342|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|    342|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|    342|            it = prefix_result.first.base();
 6172|    342|            prefix_width = prefix_result.second;
 6173|    342|        }
 6174|    278|        else {
 6175|    278|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|    278|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    278|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    278|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    278|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 278]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    278|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    278|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|    278|            std::tie(it, prefix_width) = prefix_result;
 6177|    278|        }
 6178|    620|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|    620|        std::ptrdiff_t value_width = 0;
 6182|    620|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 342, False: 278]
  ------------------
 6183|    342|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 4, False: 338]
  ------------------
 6184|      4|                return detail::unexpected_scan_error(
 6185|      4|                    scan_error::invalid_fill,
 6186|      4|                    "Too many fill characters before value, "
 6187|      4|                    "precision exceeded before reading value");
 6188|      4|            }
 6189|       |
 6190|    338|            const auto initial_width = specs.precision - prefix_width;
 6191|    338|            auto max_width_view =
 6192|    338|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|    338|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    338|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    338|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    338|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    338|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 338, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    338|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    338|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    338|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    338|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    338|    }                                                  \
  |  |  |  | 3939|    338|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|      0|            it = w_it.base();
 6195|      0|            value_width = initial_width - w_it.count();
 6196|      0|        }
 6197|    278|        else {
 6198|    278|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|    278|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    278|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    278|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 278, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    278|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|    278|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    278|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    278|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|    278|    }                                                  \
  |  | 3939|    278|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    278|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|      0|                                             specs, value, loc));
 6200|       |
 6201|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 0, False: 0]
  ------------------
 6202|      0|                value_width = calculate_text_width(
 6203|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|      0|                        .view());
 6205|      0|            }
 6206|      0|        }
 6207|       |
 6208|       |        // Read postfix
 6209|      0|        std::ptrdiff_t postfix_width = 0;
 6210|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 0, False: 0]
  ------------------
 6211|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6214|      0|                                 value_width));
 6215|      0|            std::tie(it, postfix_width) = postfix_result;
 6216|      0|        }
 6217|       |
 6218|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6219|      0|            specs, prefix_width, value_width, postfix_width));
 6220|      0|        return it;
 6221|      0|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIPvEENS0_13scan_expectedIS9_EERT_:
 6225|  2.40k|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|  2.40k|                          basic_contiguous_scan_context<char_type>>) {
 6230|  2.40k|            auto rd = make_reader<T, char_type>();
 6231|  2.40k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  2.40k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 1.82k, False: 576]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  1.82k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  1.82k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.82k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.82k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  1.82k|    }
  ------------------
 6232|    576|            return impl(rd, range, value);
 6233|       |        }
 6234|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6235|       |            auto rd = make_reader<T, char_type>();
 6236|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6237|       |
 6238|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6239|       |                specs.width != 0) {
 6240|       |                return impl(rd, range, value);
 6241|       |            }
 6242|       |
 6243|       |            auto crange = get_as_contiguous(range);
 6244|       |            SCN_TRY(it, impl(rd, crange, value));
 6245|       |            return ranges::next(range.begin(),
 6246|       |                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|  2.40k|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIcE11check_specsERKNS0_6detail12format_specsE:
 5791|  2.40k|    {
 5792|  2.40k|        reader_error_handler eh{};
 5793|  2.40k|        detail::check_pointer_type_specs(specs, eh);
 5794|  2.40k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  2.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.82k, False: 576]
  |  |  ------------------
  ------------------
 5795|  1.82k|            return detail::unexpected_scan_error(
 5796|  1.82k|                scan_error::invalid_format_string, eh.m_msg);
 5797|  1.82k|        }
 5798|    576|        return {};
 5799|  2.40k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_23reader_impl_for_voidptrIcEESA_PvEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 6160|    576|    {
 6161|    576|        const bool need_skipped_width =
 6162|    576|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 184, False: 392]
  |  Branch (6162:33): [True: 324, False: 68]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|    576|        auto it = rng.begin();
 6166|    576|        std::ptrdiff_t prefix_width = 0;
 6167|    576|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 326, False: 250]
  ------------------
 6168|    326|            auto max_width_view = take_width(rng, specs.precision);
 6169|    326|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    326|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    326|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    326|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    326|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 24, False: 302]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     24|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     24|    }                                                  \
  |  |  |  | 3939|    326|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    302|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|    302|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|    302|            it = prefix_result.first.base();
 6172|    302|            prefix_width = prefix_result.second;
 6173|    302|        }
 6174|    250|        else {
 6175|    250|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|    250|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    250|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    250|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    250|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 250]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    250|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    250|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|    250|            std::tie(it, prefix_width) = prefix_result;
 6177|    250|        }
 6178|    552|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|    552|        std::ptrdiff_t value_width = 0;
 6182|    552|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 302, False: 250]
  ------------------
 6183|    302|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 2, False: 300]
  ------------------
 6184|      2|                return detail::unexpected_scan_error(
 6185|      2|                    scan_error::invalid_fill,
 6186|      2|                    "Too many fill characters before value, "
 6187|      2|                    "precision exceeded before reading value");
 6188|      2|            }
 6189|       |
 6190|    300|            const auto initial_width = specs.precision - prefix_width;
 6191|    300|            auto max_width_view =
 6192|    300|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|    300|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    300|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    300|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    300|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    300|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 300, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    300|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    300|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    300|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    300|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    300|    }                                                  \
  |  |  |  | 3939|    300|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|      0|            it = w_it.base();
 6195|      0|            value_width = initial_width - w_it.count();
 6196|      0|        }
 6197|    250|        else {
 6198|    250|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|    250|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    250|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    250|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 250, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    250|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|    250|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    250|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    250|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|    250|    }                                                  \
  |  | 3939|    250|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    250|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|      0|                                             specs, value, loc));
 6200|       |
 6201|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 0, False: 0]
  ------------------
 6202|      0|                value_width = calculate_text_width(
 6203|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|      0|                        .view());
 6205|      0|            }
 6206|      0|        }
 6207|       |
 6208|       |        // Read postfix
 6209|      0|        std::ptrdiff_t postfix_width = 0;
 6210|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 0, False: 0]
  ------------------
 6211|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6214|      0|                                 value_width));
 6215|      0|            std::tie(it, postfix_width) = postfix_result;
 6216|      0|        }
 6217|       |
 6218|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6219|      0|            specs, prefix_width, value_width, postfix_width));
 6220|      0|        return it;
 6221|      0|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERPvNSN_10locale_refE:
 5821|    300|    {
 5822|    300|        SCN_UNUSED(specs);
  ------------------
  |  |  915|    300|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5823|    300|        return read_default(range, value, loc);
 5824|    300|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIcE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RPvNS0_6detail10locale_refE:
 5804|    300|    {
 5805|    300|        detail::format_specs specs{};
 5806|    300|        specs.type = detail::presentation_type::int_hex;
 5807|       |
 5808|    300|        std::uintptr_t intvalue{};
 5809|    300|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3940|    300|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    300|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    300|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    300|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 300, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    300|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    300|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    300|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    300|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    300|    }                                                  \
  |  |  |  | 3939|    300|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5810|      0|                                                                intvalue, loc));
 5811|      0|        value = reinterpret_cast<void*>(intvalue);
 5812|      0|        return result;
 5813|    300|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERPvNSL_10locale_refE:
 5821|    250|    {
 5822|    250|        SCN_UNUSED(specs);
  ------------------
  |  |  915|    250|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5823|    250|        return read_default(range, value, loc);
 5824|    250|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIbEENS0_13scan_expectedIS9_EERT_:
 6225|  2.44k|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|  2.44k|                          basic_contiguous_scan_context<char_type>>) {
 6230|  2.44k|            auto rd = make_reader<T, char_type>();
 6231|  2.44k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  2.44k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 1.55k, False: 888]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  1.55k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  1.55k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.55k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.55k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  1.55k|    }
  ------------------
 6232|    888|            return impl(rd, range, value);
 6233|       |        }
 6234|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6235|       |            auto rd = make_reader<T, char_type>();
 6236|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6237|       |
 6238|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6239|       |                specs.width != 0) {
 6240|       |                return impl(rd, range, value);
 6241|       |            }
 6242|       |
 6243|       |            auto crange = get_as_contiguous(range);
 6244|       |            SCN_TRY(it, impl(rd, crange, value));
 6245|       |            return ranges::next(range.begin(),
 6246|       |                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|  2.44k|    }
_ZN3scn2v44impl11reader_baseINS1_20reader_impl_for_boolIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3155|  2.44k|    {
 3156|  2.44k|        reader_error_handler eh{};
 3157|  2.44k|        get_derived().check_specs_impl(specs, eh);
 3158|  2.44k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  2.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.55k, False: 888]
  |  |  ------------------
  ------------------
 3159|  1.55k|            return detail::unexpected_scan_error(
 3160|  1.55k|                scan_error::invalid_format_string, eh.m_msg);
 3161|  1.55k|        }
 3162|    888|        return {};
 3163|  2.44k|    }
_ZN3scn2v44impl11reader_baseINS1_20reader_impl_for_boolIcEEcE11get_derivedEv:
 3167|  2.44k|    {
 3168|  2.44k|        return static_cast<Derived&>(*this);
 3169|  2.44k|    }
_ZN3scn2v44impl20reader_impl_for_boolIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5534|  2.44k|    {
 5535|  2.44k|        detail::check_bool_type_specs(specs, eh);
 5536|  2.44k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_20reader_impl_for_boolIcEESA_bEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6160|    888|    {
 6161|    888|        const bool need_skipped_width =
 6162|    888|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 200, False: 688]
  |  Branch (6162:33): [True: 474, False: 214]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|    888|        auto it = rng.begin();
 6166|    888|        std::ptrdiff_t prefix_width = 0;
 6167|    888|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 478, False: 410]
  ------------------
 6168|    478|            auto max_width_view = take_width(rng, specs.precision);
 6169|    478|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    478|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    478|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    478|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    478|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 36, False: 442]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     36|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     36|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     36|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     36|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     36|    }                                                  \
  |  |  |  | 3939|    478|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    442|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|    442|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|    442|            it = prefix_result.first.base();
 6172|    442|            prefix_width = prefix_result.second;
 6173|    442|        }
 6174|    410|        else {
 6175|    410|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|    410|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    410|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    410|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    410|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 410]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    410|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    410|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|    410|            std::tie(it, prefix_width) = prefix_result;
 6177|    410|        }
 6178|    852|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|    852|        std::ptrdiff_t value_width = 0;
 6182|    852|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 442, False: 410]
  ------------------
 6183|    442|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 4, False: 438]
  ------------------
 6184|      4|                return detail::unexpected_scan_error(
 6185|      4|                    scan_error::invalid_fill,
 6186|      4|                    "Too many fill characters before value, "
 6187|      4|                    "precision exceeded before reading value");
 6188|      4|            }
 6189|       |
 6190|    438|            const auto initial_width = specs.precision - prefix_width;
 6191|    438|            auto max_width_view =
 6192|    438|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|    438|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    438|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    438|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    438|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    438|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 438, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    438|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    438|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    438|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    438|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    438|    }                                                  \
  |  |  |  | 3939|    438|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|      0|            it = w_it.base();
 6195|      0|            value_width = initial_width - w_it.count();
 6196|      0|        }
 6197|    410|        else {
 6198|    410|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|    410|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    410|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    410|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 410, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    410|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|    410|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    410|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    410|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|    410|    }                                                  \
  |  | 3939|    410|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    410|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|      0|                                             specs, value, loc));
 6200|       |
 6201|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 0, False: 0]
  ------------------
 6202|      0|                value_width = calculate_text_width(
 6203|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|      0|                        .view());
 6205|      0|            }
 6206|      0|        }
 6207|       |
 6208|       |        // Read postfix
 6209|      0|        std::ptrdiff_t postfix_width = 0;
 6210|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 0, False: 0]
  ------------------
 6211|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6214|      0|                                 value_width));
 6215|      0|            std::tie(it, postfix_width) = postfix_result;
 6216|      0|        }
 6217|       |
 6218|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6219|      0|            specs, prefix_width, value_width, postfix_width));
 6220|      0|        return it;
 6221|      0|    }
_ZNK3scn2v44impl20reader_impl_for_boolIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERbNSN_10locale_refE:
 5553|    438|    {
 5554|    438|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5555|       |
 5556|    438|#if !SCN_DISABLE_LOCALE
 5557|    438|        if (specs.localized) {
  ------------------
  |  Branch (5557:13): [True: 22, False: 416]
  ------------------
 5558|     22|            return rd.read_localized(range, loc, value);
 5559|     22|        }
 5560|    416|#endif
 5561|       |
 5562|    416|        return rd.read_classic(range, value);
 5563|    438|    }
_ZN3scn2v44impl20reader_impl_for_boolIcE11get_optionsERKNS0_6detail12format_specsE:
 5566|    848|    {
 5567|    848|        SCN_GCC_COMPAT_PUSH
 5568|    848|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 5569|       |
 5570|    848|        switch (specs.type) {
 5571|    224|            case detail::presentation_type::string:
  ------------------
  |  Branch (5571:13): [True: 224, False: 624]
  ------------------
 5572|    224|                return bool_reader_base::allow_text;
 5573|       |
 5574|     14|            case detail::presentation_type::int_generic:
  ------------------
  |  Branch (5574:13): [True: 14, False: 834]
  ------------------
 5575|     28|            case detail::presentation_type::int_binary:
  ------------------
  |  Branch (5575:13): [True: 14, False: 834]
  ------------------
 5576|     34|            case detail::presentation_type::int_decimal:
  ------------------
  |  Branch (5576:13): [True: 6, False: 842]
  ------------------
 5577|     46|            case detail::presentation_type::int_hex:
  ------------------
  |  Branch (5577:13): [True: 12, False: 836]
  ------------------
 5578|     60|            case detail::presentation_type::int_octal:
  ------------------
  |  Branch (5578:13): [True: 14, False: 834]
  ------------------
 5579|     64|            case detail::presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (5579:13): [True: 4, False: 844]
  ------------------
 5580|     64|                return bool_reader_base::allow_numeric;
 5581|       |
 5582|    560|            default:
  ------------------
  |  Branch (5582:13): [True: 560, False: 288]
  ------------------
 5583|    560|                return bool_reader_base::allow_text |
 5584|    560|                       bool_reader_base::allow_numeric;
 5585|    848|        }
 5586|       |
 5587|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 5588|    848|    }
_ZNK3scn2v44impl11bool_readerIcE14read_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refERb:
 5464|     22|    {
 5465|     22|        scan_error err{scan_error::invalid_scanned_value,
 5466|     22|                       "Failed to read boolean"};
 5467|       |
 5468|     22|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5468:13): [True: 20, False: 2]
  ------------------
 5469|     20|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5469:22): [True: 0, False: 20]
  ------------------
 5470|      0|                return *r;
 5471|      0|            }
 5472|     20|            else {
 5473|     20|                err = r.error();
 5474|     20|            }
 5475|     20|        }
 5476|       |
 5477|     22|        if (m_options & allow_text) {
  ------------------
  |  Branch (5477:13): [True: 14, False: 8]
  ------------------
 5478|     14|            auto stdloc = loc.get<std::locale>();
 5479|     14|            const auto& numpunct =
 5480|     14|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5481|     14|            const auto truename = numpunct.truename();
 5482|     14|            const auto falsename = numpunct.falsename();
 5483|       |
 5484|     14|            if (auto r =
  ------------------
  |  Branch (5484:22): [True: 0, False: 14]
  ------------------
 5485|     14|                    read_textual_custom(range, value, truename, falsename)) {
 5486|      0|                return *r;
 5487|      0|            }
 5488|     14|            else {
 5489|     14|                err = r.error();
 5490|     14|            }
 5491|     14|        }
 5492|       |
 5493|     22|        return unexpected(err);
 5494|     22|    }
_ZNK3scn2v44impl16bool_reader_base12read_numericINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5420|    344|    {
 5421|    344|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5421:18): [True: 0, False: 344]
  ------------------
 5422|      0|            value = false;
 5423|      0|            return *r;
 5424|      0|        }
 5425|    344|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5425:18): [True: 0, False: 344]
  ------------------
 5426|      0|            value = true;
 5427|      0|            return *r;
 5428|      0|        }
 5429|       |
 5430|    344|        return detail::unexpected_scan_error(
 5431|    344|            scan_error::invalid_scanned_value,
 5432|    344|            "Failed to read numeric boolean value: No match");
 5433|    344|    }
_ZN3scn2v44impl23read_matching_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NDTcl4implISF_EEE4typeE:
 2245|    688|{
 2246|    688|    auto it = read_code_unit(range);
 2247|    688|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|    688|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 688]
  |  |  ------------------
  ------------------
 2248|      0|        return unexpected(make_eof_parse_error(it.error()));
 2249|      0|    }
 2250|       |
 2251|    688|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|    688|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 688, False: 0]
  |  |  ------------------
  ------------------
 2252|    688|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|    688|        return unexpected(parse_error::error);
 2254|    688|    }
 2255|       |
 2256|      0|    return *it;
 2257|    688|}
_ZNK3scn2v44impl11bool_readerIcE19read_textual_customINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RbNSF_17basic_string_viewIcNSF_11char_traitsIcEEEESR_:
 5504|     14|    {
 5505|     14|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5506|     14|        const auto shorter = std::pair{
 5507|     14|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5507:13): [True: 14, False: 0]
  ------------------
 5508|     14|        const auto longer = std::pair{
 5509|     14|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5509:13): [True: 0, False: 14]
  ------------------
 5510|       |
 5511|     14|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5511:18): [True: 0, False: 14]
  ------------------
 5512|      0|            value = shorter.second;
 5513|      0|            return *r;
 5514|      0|        }
 5515|     14|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5515:18): [True: 0, False: 14]
  ------------------
 5516|      0|            value = longer.second;
 5517|      0|            return *r;
 5518|      0|        }
 5519|       |
 5520|     14|        return detail::unexpected_scan_error(
 5521|     14|            scan_error::invalid_scanned_value,
 5522|     14|            "Failed to read textual boolean: No match");
 5523|     14|    }
_ZN3scn2v44impl20read_matching_stringINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewINDTcl4implISF_EEE4typeENSD_11char_traitsISN_EEEE:
 2278|     28|{
 2279|     28|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|     28|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     28|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     28|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     28|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 14, False: 14]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     14|    }                                                  \
  |  |  |  | 3939|     28|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     14|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2280|     14|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2281|     14|                    .transform_error(make_eof_parse_error));
 2282|       |
 2283|     14|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2284|     14|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  865|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14, False: 0]
  |  |  ------------------
  ------------------
 2285|     14|        return unexpected(parse_error::error);
 2286|     14|    }
 2287|      0|    return it;
 2288|     14|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_l:
 1955|    808|{
 1956|    808|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|    808|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    808|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|    808|    else {
 1967|    808|        auto it = range.begin();
 1968|    808|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 0, False: 808]
  ------------------
 1969|      0|            return ranges::next(it, count);
 1970|      0|        }
 1971|       |
 1972|  4.02k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 3.38k, False: 640]
  ------------------
 1973|  3.38k|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 168, False: 3.22k]
  ------------------
 1974|    168|                return unexpected(eof_error::eof);
 1975|    168|            }
 1976|  3.38k|        }
 1977|       |
 1978|    640|        return it;
 1979|    808|    }
 1980|    808|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEmT_:
 1095|    808|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|       |                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|       |        else {
 1107|       |            if (r.begin().stores_parent()) {
 1108|       |                return static_cast<size_t>(
 1109|       |                    r.begin().parent()->chars_available() -
 1110|       |                    r.begin().position());
 1111|       |            }
 1112|       |            return r.begin().contiguous_segment().size();
 1113|       |        }
 1114|       |    }
 1115|    808|    else {
 1116|    808|        return 0;
 1117|    808|    }
 1118|    808|}
_ZNK3scn2v44impl16bool_reader_base12read_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5391|    416|    {
 5392|    416|        scan_error err{scan_error::invalid_scanned_value,
 5393|    416|                       "Failed to read boolean"};
 5394|       |
 5395|    416|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5395:13): [True: 324, False: 92]
  ------------------
 5396|    324|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5396:22): [True: 0, False: 324]
  ------------------
 5397|      0|                return *r;
 5398|      0|            }
 5399|    324|            else {
 5400|    324|                err = r.error();
 5401|    324|            }
 5402|    324|        }
 5403|       |
 5404|    416|        if (m_options & allow_text) {
  ------------------
  |  Branch (5404:13): [True: 390, False: 26]
  ------------------
 5405|    390|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5405:22): [True: 0, False: 390]
  ------------------
 5406|      0|                return *r;
 5407|      0|            }
 5408|    390|            else {
 5409|    390|                err = r.error();
 5410|    390|            }
 5411|    390|        }
 5412|       |
 5413|    416|        return unexpected(err);
 5414|    416|    }
_ZNK3scn2v44impl16bool_reader_base20read_textual_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5438|    390|    {
 5439|    390|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5439:18): [True: 0, False: 390]
  ------------------
 5440|      0|            value = true;
 5441|      0|            return *r;
 5442|      0|        }
 5443|    390|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5443:18): [True: 0, False: 390]
  ------------------
 5444|      0|            value = false;
 5445|      0|            return *r;
 5446|      0|        }
 5447|       |
 5448|    390|        return detail::unexpected_scan_error(
 5449|    390|            scan_error::invalid_scanned_value,
 5450|    390|            "Failed to read textual boolean value: No match");
 5451|    390|    }
_ZN3scn2v44impl28read_matching_string_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2293|    780|{
 2294|    780|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|    780|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    780|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    780|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    780|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 154, False: 626]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    154|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    154|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    154|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    154|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    154|    }                                                  \
  |  |  |  | 3939|    780|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    626|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2295|    626|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2296|    626|                    .transform_error(make_eof_parse_error));
 2297|       |
 2298|    626|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2299|    626|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2300|    626|        if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  865|    626|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 626, False: 0]
  |  |  ------------------
  ------------------
 2301|    626|            return unexpected(parse_error::error);
 2302|    626|        }
 2303|      0|        return it;
 2304|       |    }
 2305|       |    else {
 2306|       |        auto range_it = range.begin();
 2307|       |        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
 2308|       |            if (SCN_UNLIKELY(*range_it !=
 2309|       |                             static_cast<detail::char_t<Range>>(str[i]))) {
 2310|       |                return unexpected(parse_error::error);
 2311|       |            }
 2312|       |        }
 2313|       |        return it;
 2314|       |    }
 2315|    626|}
_ZNK3scn2v44impl20reader_impl_for_boolIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERbNSL_10locale_refE:
 5553|    410|    {
 5554|    410|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5555|       |
 5556|    410|#if !SCN_DISABLE_LOCALE
 5557|    410|        if (specs.localized) {
  ------------------
  |  Branch (5557:13): [True: 18, False: 392]
  ------------------
 5558|     18|            return rd.read_localized(range, loc, value);
 5559|     18|        }
 5560|    392|#endif
 5561|       |
 5562|    392|        return rd.read_classic(range, value);
 5563|    410|    }
_ZNK3scn2v44impl11bool_readerIcE14read_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refERb:
 5464|     18|    {
 5465|     18|        scan_error err{scan_error::invalid_scanned_value,
 5466|     18|                       "Failed to read boolean"};
 5467|       |
 5468|     18|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5468:13): [True: 12, False: 6]
  ------------------
 5469|     12|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5469:22): [True: 0, False: 12]
  ------------------
 5470|      0|                return *r;
 5471|      0|            }
 5472|     12|            else {
 5473|     12|                err = r.error();
 5474|     12|            }
 5475|     12|        }
 5476|       |
 5477|     18|        if (m_options & allow_text) {
  ------------------
  |  Branch (5477:13): [True: 10, False: 8]
  ------------------
 5478|     10|            auto stdloc = loc.get<std::locale>();
 5479|     10|            const auto& numpunct =
 5480|     10|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5481|     10|            const auto truename = numpunct.truename();
 5482|     10|            const auto falsename = numpunct.falsename();
 5483|       |
 5484|     10|            if (auto r =
  ------------------
  |  Branch (5484:22): [True: 0, False: 10]
  ------------------
 5485|     10|                    read_textual_custom(range, value, truename, falsename)) {
 5486|      0|                return *r;
 5487|      0|            }
 5488|     10|            else {
 5489|     10|                err = r.error();
 5490|     10|            }
 5491|     10|        }
 5492|       |
 5493|     18|        return unexpected(err);
 5494|     18|    }
_ZNK3scn2v44impl11bool_readerIcE19read_textual_customINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNSD_17basic_string_viewIcNSD_11char_traitsIcEEEESP_:
 5504|     10|    {
 5505|     10|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5506|     10|        const auto shorter = std::pair{
 5507|     10|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5507:13): [True: 10, False: 0]
  ------------------
 5508|     10|        const auto longer = std::pair{
 5509|     10|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5509:13): [True: 0, False: 10]
  ------------------
 5510|       |
 5511|     10|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5511:18): [True: 0, False: 10]
  ------------------
 5512|      0|            value = shorter.second;
 5513|      0|            return *r;
 5514|      0|        }
 5515|     10|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5515:18): [True: 0, False: 10]
  ------------------
 5516|      0|            value = longer.second;
 5517|      0|            return *r;
 5518|      0|        }
 5519|       |
 5520|     10|        return detail::unexpected_scan_error(
 5521|     10|            scan_error::invalid_scanned_value,
 5522|     10|            "Failed to read textual boolean: No match");
 5523|     10|    }
_ZN3scn2v44impl20read_matching_stringINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewINDTcl4implISD_EEE4typeENSB_11char_traitsISL_EEEE:
 2278|     20|{
 2279|     20|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2, False: 18]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      2|    }                                                  \
  |  |  |  | 3939|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     18|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2280|     18|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2281|     18|                    .transform_error(make_eof_parse_error));
 2282|       |
 2283|     18|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2284|     18|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  865|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 18, False: 0]
  |  |  ------------------
  ------------------
 2285|     18|        return unexpected(parse_error::error);
 2286|     18|    }
 2287|      0|    return it;
 2288|     18|}
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIcEENS0_13scan_expectedIS9_EERT_:
 6225|  2.40k|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|  2.40k|                          basic_contiguous_scan_context<char_type>>) {
 6230|  2.40k|            auto rd = make_reader<T, char_type>();
 6231|  2.40k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  2.40k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 1.77k, False: 628]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  1.77k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  1.77k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.77k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.77k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  1.77k|    }
  ------------------
 6232|    628|            return impl(rd, range, value);
 6233|       |        }
 6234|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6235|       |            auto rd = make_reader<T, char_type>();
 6236|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6237|       |
 6238|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6239|       |                specs.width != 0) {
 6240|       |                return impl(rd, range, value);
 6241|       |            }
 6242|       |
 6243|       |            auto crange = get_as_contiguous(range);
 6244|       |            SCN_TRY(it, impl(rd, crange, value));
 6245|       |            return ranges::next(range.begin(),
 6246|       |                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|  2.40k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_20reader_impl_for_charIcEESA_cEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6160|    628|    {
 6161|    628|        const bool need_skipped_width =
 6162|    628|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 186, False: 442]
  |  Branch (6162:33): [True: 358, False: 84]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|    628|        auto it = rng.begin();
 6166|    628|        std::ptrdiff_t prefix_width = 0;
 6167|    628|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 360, False: 268]
  ------------------
 6168|    360|            auto max_width_view = take_width(rng, specs.precision);
 6169|    360|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    360|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    360|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    360|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    360|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 360]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    360|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    360|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|    360|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|    360|            it = prefix_result.first.base();
 6172|    360|            prefix_width = prefix_result.second;
 6173|    360|        }
 6174|    268|        else {
 6175|    268|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|    268|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    268|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    268|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    268|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 268]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    268|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    268|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|    268|            std::tie(it, prefix_width) = prefix_result;
 6177|    268|        }
 6178|    628|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|    628|        std::ptrdiff_t value_width = 0;
 6182|    628|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 360, False: 268]
  ------------------
 6183|    360|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 4, False: 356]
  ------------------
 6184|      4|                return detail::unexpected_scan_error(
 6185|      4|                    scan_error::invalid_fill,
 6186|      4|                    "Too many fill characters before value, "
 6187|      4|                    "precision exceeded before reading value");
 6188|      4|            }
 6189|       |
 6190|    356|            const auto initial_width = specs.precision - prefix_width;
 6191|    356|            auto max_width_view =
 6192|    356|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|    356|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    356|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    356|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    356|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    356|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 34, False: 322]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     34|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     34|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     34|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     34|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     34|    }                                                  \
  |  |  |  | 3939|    356|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    322|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|    322|            it = w_it.base();
 6195|    322|            value_width = initial_width - w_it.count();
 6196|    322|        }
 6197|    268|        else {
 6198|    268|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|    268|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    268|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    268|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 22, False: 246]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|     22|    }                                                  \
  |  | 3939|    268|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    268|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|    246|                                             specs, value, loc));
 6200|       |
 6201|    246|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 180, False: 66]
  ------------------
 6202|    180|                value_width = calculate_text_width(
 6203|    180|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|    180|                        .view());
 6205|    180|            }
 6206|    246|        }
 6207|       |
 6208|       |        // Read postfix
 6209|    568|        std::ptrdiff_t postfix_width = 0;
 6210|    568|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 568, False: 0]
  ------------------
 6211|    568|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    568|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    568|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    568|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    568|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 568]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    568|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    568|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|    568|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|    568|                                 rd.skip_ws_before_read(), prefix_width,
 6214|    568|                                 value_width));
 6215|    568|            std::tie(it, postfix_width) = postfix_result;
 6216|    568|        }
 6217|       |
 6218|    568|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    568|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    568|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 158, False: 410]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    158|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|    158|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    158|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    158|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|    158|    }
  ------------------
 6219|    568|            specs, prefix_width, value_width, postfix_width));
 6220|    410|        return it;
 6221|    568|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIdEENS0_13scan_expectedIS9_EERT_:
 6225|  2.44k|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|  2.44k|                          basic_contiguous_scan_context<char_type>>) {
 6230|  2.44k|            auto rd = make_reader<T, char_type>();
 6231|  2.44k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  2.44k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 1.78k, False: 656]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  1.78k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  1.78k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.78k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.78k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  1.78k|    }
  ------------------
 6232|    656|            return impl(rd, range, value);
 6233|       |        }
 6234|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6235|       |            auto rd = make_reader<T, char_type>();
 6236|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6237|       |
 6238|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6239|       |                specs.width != 0) {
 6240|       |                return impl(rd, range, value);
 6241|       |            }
 6242|       |
 6243|       |            auto crange = get_as_contiguous(range);
 6244|       |            SCN_TRY(it, impl(rd, crange, value));
 6245|       |            return ranges::next(range.begin(),
 6246|       |                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|  2.44k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6160|    656|    {
 6161|    656|        const bool need_skipped_width =
 6162|    656|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 190, False: 466]
  |  Branch (6162:33): [True: 374, False: 92]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|    656|        auto it = rng.begin();
 6166|    656|        std::ptrdiff_t prefix_width = 0;
 6167|    656|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 378, False: 278]
  ------------------
 6168|    378|            auto max_width_view = take_width(rng, specs.precision);
 6169|    378|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    378|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    378|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    378|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    378|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 30, False: 348]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     30|    }                                                  \
  |  |  |  | 3939|    378|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    348|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|    348|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|    348|            it = prefix_result.first.base();
 6172|    348|            prefix_width = prefix_result.second;
 6173|    348|        }
 6174|    278|        else {
 6175|    278|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|    278|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    278|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    278|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    278|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 278]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    278|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    278|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|    278|            std::tie(it, prefix_width) = prefix_result;
 6177|    278|        }
 6178|    626|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|    626|        std::ptrdiff_t value_width = 0;
 6182|    626|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 348, False: 278]
  ------------------
 6183|    348|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 6, False: 342]
  ------------------
 6184|      6|                return detail::unexpected_scan_error(
 6185|      6|                    scan_error::invalid_fill,
 6186|      6|                    "Too many fill characters before value, "
 6187|      6|                    "precision exceeded before reading value");
 6188|      6|            }
 6189|       |
 6190|    342|            const auto initial_width = specs.precision - prefix_width;
 6191|    342|            auto max_width_view =
 6192|    342|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|    342|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    342|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    342|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    342|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    342|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 342, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    342|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    342|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    342|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    342|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    342|    }                                                  \
  |  |  |  | 3939|    342|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|      0|            it = w_it.base();
 6195|      0|            value_width = initial_width - w_it.count();
 6196|      0|        }
 6197|    278|        else {
 6198|    278|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|    278|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    278|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    278|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 278, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    278|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|    278|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    278|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    278|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|    278|    }                                                  \
  |  | 3939|    278|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    278|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|      0|                                             specs, value, loc));
 6200|       |
 6201|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 0, False: 0]
  ------------------
 6202|      0|                value_width = calculate_text_width(
 6203|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|      0|                        .view());
 6205|      0|            }
 6206|      0|        }
 6207|       |
 6208|       |        // Read postfix
 6209|      0|        std::ptrdiff_t postfix_width = 0;
 6210|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 0, False: 0]
  ------------------
 6211|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6214|      0|                                 value_width));
 6215|      0|            std::tie(it, postfix_width) = postfix_result;
 6216|      0|        }
 6217|       |
 6218|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6219|      0|            specs, prefix_width, value_width, postfix_width));
 6220|      0|        return it;
 6221|      0|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIS9_EERT_:
 6225|  2.40k|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|  2.40k|                          basic_contiguous_scan_context<char_type>>) {
 6230|  2.40k|            auto rd = make_reader<T, char_type>();
 6231|  2.40k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  2.40k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 134, False: 2.26k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    134|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|    134|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    134|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    134|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|    134|    }
  ------------------
 6232|  2.26k|            return impl(rd, range, value);
 6233|       |        }
 6234|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6235|       |            auto rd = make_reader<T, char_type>();
 6236|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6237|       |
 6238|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6239|       |                specs.width != 0) {
 6240|       |                return impl(rd, range, value);
 6241|       |            }
 6242|       |
 6243|       |            auto crange = get_as_contiguous(range);
 6244|       |            SCN_TRY(it, impl(rd, crange, value));
 6245|       |            return ranges::next(range.begin(),
 6246|       |                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|  2.40k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6160|  2.26k|    {
 6161|  2.26k|        const bool need_skipped_width =
 6162|  2.26k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 290, False: 1.97k]
  |  Branch (6162:33): [True: 832, False: 1.14k]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|  2.26k|        auto it = rng.begin();
 6166|  2.26k|        std::ptrdiff_t prefix_width = 0;
 6167|  2.26k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 868, False: 1.40k]
  ------------------
 6168|    868|            auto max_width_view = take_width(rng, specs.precision);
 6169|    868|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    868|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    868|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    868|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    868|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 28, False: 840]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     28|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     28|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     28|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     28|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     28|    }                                                  \
  |  |  |  | 3939|    868|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    840|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|    840|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|    840|            it = prefix_result.first.base();
 6172|    840|            prefix_width = prefix_result.second;
 6173|    840|        }
 6174|  1.40k|        else {
 6175|  1.40k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  1.40k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.40k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.40k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.40k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  1.40k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.40k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|  1.40k|            std::tie(it, prefix_width) = prefix_result;
 6177|  1.40k|        }
 6178|  2.24k|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|  2.24k|        std::ptrdiff_t value_width = 0;
 6182|  2.24k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 840, False: 1.40k]
  ------------------
 6183|    840|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 4, False: 836]
  ------------------
 6184|      4|                return detail::unexpected_scan_error(
 6185|      4|                    scan_error::invalid_fill,
 6186|      4|                    "Too many fill characters before value, "
 6187|      4|                    "precision exceeded before reading value");
 6188|      4|            }
 6189|       |
 6190|    836|            const auto initial_width = specs.precision - prefix_width;
 6191|    836|            auto max_width_view =
 6192|    836|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|    836|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    836|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    836|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    836|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    836|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 418, False: 418]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    418|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    418|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    418|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    418|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    418|    }                                                  \
  |  |  |  | 3939|    836|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    418|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|    418|            it = w_it.base();
 6195|    418|            value_width = initial_width - w_it.count();
 6196|    418|        }
 6197|  1.40k|        else {
 6198|  1.40k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  1.40k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  1.40k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  1.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 554, False: 846]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    554|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|    554|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    554|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    554|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|    554|    }                                                  \
  |  | 3939|  1.40k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  1.40k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|    846|                                             specs, value, loc));
 6200|       |
 6201|    846|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 220, False: 626]
  ------------------
 6202|    220|                value_width = calculate_text_width(
 6203|    220|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|    220|                        .view());
 6205|    220|            }
 6206|    846|        }
 6207|       |
 6208|       |        // Read postfix
 6209|  1.26k|        std::ptrdiff_t postfix_width = 0;
 6210|  1.26k|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 942, False: 322]
  ------------------
 6211|    942|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    942|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    942|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    942|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    942|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 942]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    942|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    942|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|    942|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|    942|                                 rd.skip_ws_before_read(), prefix_width,
 6214|    942|                                 value_width));
 6215|    942|            std::tie(it, postfix_width) = postfix_result;
 6216|    942|        }
 6217|       |
 6218|  1.26k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  1.26k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  1.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 106, False: 1.15k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    106|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|    106|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    106|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    106|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|    106|    }
  ------------------
 6219|  1.26k|            specs, prefix_width, value_width, postfix_width));
 6220|  1.15k|        return it;
 6221|  1.26k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIS9_EERT_:
 6225|  2.40k|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|  2.40k|                          basic_contiguous_scan_context<char_type>>) {
 6230|  2.40k|            auto rd = make_reader<T, char_type>();
 6231|  2.40k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  2.40k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 134, False: 2.26k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    134|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|    134|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    134|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    134|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|    134|    }
  ------------------
 6232|  2.26k|            return impl(rd, range, value);
 6233|       |        }
 6234|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6235|       |            auto rd = make_reader<T, char_type>();
 6236|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6237|       |
 6238|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6239|       |                specs.width != 0) {
 6240|       |                return impl(rd, range, value);
 6241|       |            }
 6242|       |
 6243|       |            auto crange = get_as_contiguous(range);
 6244|       |            SCN_TRY(it, impl(rd, crange, value));
 6245|       |            return ranges::next(range.begin(),
 6246|       |                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|  2.40k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6160|  2.26k|    {
 6161|  2.26k|        const bool need_skipped_width =
 6162|  2.26k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 290, False: 1.97k]
  |  Branch (6162:33): [True: 832, False: 1.14k]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|  2.26k|        auto it = rng.begin();
 6166|  2.26k|        std::ptrdiff_t prefix_width = 0;
 6167|  2.26k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 868, False: 1.40k]
  ------------------
 6168|    868|            auto max_width_view = take_width(rng, specs.precision);
 6169|    868|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    868|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    868|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    868|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    868|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 28, False: 840]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     28|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     28|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     28|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     28|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     28|    }                                                  \
  |  |  |  | 3939|    868|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    840|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|    840|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|    840|            it = prefix_result.first.base();
 6172|    840|            prefix_width = prefix_result.second;
 6173|    840|        }
 6174|  1.40k|        else {
 6175|  1.40k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  1.40k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.40k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.40k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.40k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  1.40k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.40k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|  1.40k|            std::tie(it, prefix_width) = prefix_result;
 6177|  1.40k|        }
 6178|  2.24k|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|  2.24k|        std::ptrdiff_t value_width = 0;
 6182|  2.24k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 840, False: 1.40k]
  ------------------
 6183|    840|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 4, False: 836]
  ------------------
 6184|      4|                return detail::unexpected_scan_error(
 6185|      4|                    scan_error::invalid_fill,
 6186|      4|                    "Too many fill characters before value, "
 6187|      4|                    "precision exceeded before reading value");
 6188|      4|            }
 6189|       |
 6190|    836|            const auto initial_width = specs.precision - prefix_width;
 6191|    836|            auto max_width_view =
 6192|    836|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|    836|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    836|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    836|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    836|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    836|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 418, False: 418]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    418|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    418|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    418|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    418|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    418|    }                                                  \
  |  |  |  | 3939|    836|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    418|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|    418|            it = w_it.base();
 6195|    418|            value_width = initial_width - w_it.count();
 6196|    418|        }
 6197|  1.40k|        else {
 6198|  1.40k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  1.40k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  1.40k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  1.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 554, False: 846]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    554|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|    554|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    554|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    554|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|    554|    }                                                  \
  |  | 3939|  1.40k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  1.40k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|    846|                                             specs, value, loc));
 6200|       |
 6201|    846|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 220, False: 626]
  ------------------
 6202|    220|                value_width = calculate_text_width(
 6203|    220|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|    220|                        .view());
 6205|    220|            }
 6206|    846|        }
 6207|       |
 6208|       |        // Read postfix
 6209|  1.26k|        std::ptrdiff_t postfix_width = 0;
 6210|  1.26k|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 942, False: 322]
  ------------------
 6211|    942|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    942|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    942|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    942|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    942|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 942]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    942|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    942|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|    942|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|    942|                                 rd.skip_ws_before_read(), prefix_width,
 6214|    942|                                 value_width));
 6215|    942|            std::tie(it, postfix_width) = postfix_result;
 6216|    942|        }
 6217|       |
 6218|  1.26k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  1.26k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  1.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 106, False: 1.15k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    106|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|    106|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    106|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    106|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|    106|    }
  ------------------
 6219|  1.26k|            specs, prefix_width, value_width, postfix_width));
 6220|  1.15k|        return it;
 6221|  1.26k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIS9_EERT_:
 6225|  2.40k|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|  2.40k|                          basic_contiguous_scan_context<char_type>>) {
 6230|  2.40k|            auto rd = make_reader<T, char_type>();
 6231|  2.40k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  2.40k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 134, False: 2.26k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    134|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|    134|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    134|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    134|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|    134|    }
  ------------------
 6232|  2.26k|            return impl(rd, range, value);
 6233|       |        }
 6234|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6235|       |            auto rd = make_reader<T, char_type>();
 6236|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6237|       |
 6238|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6239|       |                specs.width != 0) {
 6240|       |                return impl(rd, range, value);
 6241|       |            }
 6242|       |
 6243|       |            auto crange = get_as_contiguous(range);
 6244|       |            SCN_TRY(it, impl(rd, crange, value));
 6245|       |            return ranges::next(range.begin(),
 6246|       |                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|  2.40k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6160|  2.26k|    {
 6161|  2.26k|        const bool need_skipped_width =
 6162|  2.26k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 290, False: 1.97k]
  |  Branch (6162:33): [True: 832, False: 1.14k]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|  2.26k|        auto it = rng.begin();
 6166|  2.26k|        std::ptrdiff_t prefix_width = 0;
 6167|  2.26k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 868, False: 1.40k]
  ------------------
 6168|    868|            auto max_width_view = take_width(rng, specs.precision);
 6169|    868|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    868|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    868|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    868|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    868|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 28, False: 840]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     28|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     28|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     28|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     28|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     28|    }                                                  \
  |  |  |  | 3939|    868|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    840|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|    840|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|    840|            it = prefix_result.first.base();
 6172|    840|            prefix_width = prefix_result.second;
 6173|    840|        }
 6174|  1.40k|        else {
 6175|  1.40k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  1.40k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.40k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.40k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.40k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  1.40k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.40k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|  1.40k|            std::tie(it, prefix_width) = prefix_result;
 6177|  1.40k|        }
 6178|  2.24k|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|  2.24k|        std::ptrdiff_t value_width = 0;
 6182|  2.24k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 840, False: 1.40k]
  ------------------
 6183|    840|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 4, False: 836]
  ------------------
 6184|      4|                return detail::unexpected_scan_error(
 6185|      4|                    scan_error::invalid_fill,
 6186|      4|                    "Too many fill characters before value, "
 6187|      4|                    "precision exceeded before reading value");
 6188|      4|            }
 6189|       |
 6190|    836|            const auto initial_width = specs.precision - prefix_width;
 6191|    836|            auto max_width_view =
 6192|    836|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|    836|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    836|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    836|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    836|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    836|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 418, False: 418]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    418|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    418|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    418|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    418|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    418|    }                                                  \
  |  |  |  | 3939|    836|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    418|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|    418|            it = w_it.base();
 6195|    418|            value_width = initial_width - w_it.count();
 6196|    418|        }
 6197|  1.40k|        else {
 6198|  1.40k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  1.40k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  1.40k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  1.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 554, False: 846]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    554|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|    554|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    554|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    554|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|    554|    }                                                  \
  |  | 3939|  1.40k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  1.40k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|    846|                                             specs, value, loc));
 6200|       |
 6201|    846|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 220, False: 626]
  ------------------
 6202|    220|                value_width = calculate_text_width(
 6203|    220|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|    220|                        .view());
 6205|    220|            }
 6206|    846|        }
 6207|       |
 6208|       |        // Read postfix
 6209|  1.26k|        std::ptrdiff_t postfix_width = 0;
 6210|  1.26k|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 942, False: 322]
  ------------------
 6211|    942|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    942|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    942|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    942|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    942|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 942]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    942|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    942|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|    942|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|    942|                                 rd.skip_ws_before_read(), prefix_width,
 6214|    942|                                 value_width));
 6215|    942|            std::tie(it, postfix_width) = postfix_result;
 6216|    942|        }
 6217|       |
 6218|  1.26k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  1.26k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  1.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 106, False: 1.15k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    106|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|    106|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    106|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    106|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|    106|    }
  ------------------
 6219|  1.26k|            specs, prefix_width, value_width, postfix_width));
 6220|  1.15k|        return it;
 6221|  1.26k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5834|  4.03k|{
 5835|  4.03k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  4.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 4.03k]
  |  |  ------------------
  ------------------
 5836|      0|        return unexpected(e);
 5837|      0|    }
 5838|       |
 5839|  4.03k|    if (!is_required) {
  ------------------
  |  Branch (5839:9): [True: 448, False: 3.58k]
  ------------------
 5840|    448|        return range.begin();
 5841|    448|    }
 5842|       |
 5843|  3.58k|    return skip_classic_whitespace(range);
 5844|  4.03k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIiEENS0_13scan_expectedIS9_EERT_:
 5910|    448|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|    448|                          basic_contiguous_scan_context<char_type>>) {
 5915|    448|            auto rd = make_reader<T, char_type>();
 5916|    448|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|    448|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|    448|    {
 5903|    448|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|    448|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    448|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    448|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    448|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 448]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    448|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    448|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|    448|                        .transform_error(make_eof_scan_error));
 5905|    448|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|    448|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3578|    448|    {
 3579|    448|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    448|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|    448|        return read_default_with_base(range, value, 10);
 3581|    448|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3542|    448|    {
 3543|    448|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|    448|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    448|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    448|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    448|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 448]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    448|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    448|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|    448|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|       |        if constexpr (!std::is_signed_v<T>) {
 3547|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3548|       |                return detail::unexpected_scan_error(
 3549|       |                    scan_error::invalid_scanned_value,
 3550|       |                    "Unexpected '-' sign when parsing an "
 3551|       |                    "unsigned value");
 3552|       |            }
 3553|       |        }
 3554|       |
 3555|    448|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 448]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|    896|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|    448|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    448|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    448|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    448|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 448]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    448|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    448|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|    896|                parse_integer_digits_without_thsep(
 3562|    896|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|    896|                    prefix_result.parsed_base));
 3564|       |
 3565|    896|        auto buf = make_contiguous_buffer(
 3566|    896|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|    896|        SCN_TRY(result_it,
  ------------------
  |  | 3940|    448|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    448|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    448|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    448|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 448, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    448|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    448|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    448|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    448|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    448|    }                                                  \
  |  |  |  | 3939|    448|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|      0|                                    prefix_result.parsed_base));
 3570|       |
 3571|      0|        return ranges::next(prefix_result.iterator,
 3572|      0|                            ranges::distance(buf.view().begin(), result_it));
 3573|    896|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIjEENS0_13scan_expectedIS9_EERT_:
 5910|    448|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|    448|                          basic_contiguous_scan_context<char_type>>) {
 5915|    448|            auto rd = make_reader<T, char_type>();
 5916|    448|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|    448|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|    448|    {
 5903|    448|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|    448|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    448|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    448|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    448|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 448]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    448|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    448|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|    448|                        .transform_error(make_eof_scan_error));
 5905|    448|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|    448|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3578|    448|    {
 3579|    448|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    448|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|    448|        return read_default_with_base(range, value, 10);
 3581|    448|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3542|    448|    {
 3543|    448|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|    448|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    448|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    448|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    448|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 448]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    448|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    448|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|    448|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|    448|        if constexpr (!std::is_signed_v<T>) {
 3547|    448|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3547:17): [True: 0, False: 448]
  ------------------
 3548|      0|                return detail::unexpected_scan_error(
 3549|      0|                    scan_error::invalid_scanned_value,
 3550|      0|                    "Unexpected '-' sign when parsing an "
 3551|      0|                    "unsigned value");
 3552|      0|            }
 3553|    448|        }
 3554|       |
 3555|    448|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 448]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|    896|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|    448|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    448|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    448|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    448|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 448]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    448|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    448|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|    896|                parse_integer_digits_without_thsep(
 3562|    896|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|    896|                    prefix_result.parsed_base));
 3564|       |
 3565|    896|        auto buf = make_contiguous_buffer(
 3566|    896|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|    896|        SCN_TRY(result_it,
  ------------------
  |  | 3940|    448|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    448|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    448|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    448|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 448, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    448|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    448|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    448|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    448|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    448|    }                                                  \
  |  |  |  | 3939|    448|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|      0|                                    prefix_result.parsed_base));
 3570|       |
 3571|      0|        return ranges::next(prefix_result.iterator,
 3572|      0|                            ranges::distance(buf.view().begin(), result_it));
 3573|    896|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIPvEENS0_13scan_expectedIS9_EERT_:
 5910|    448|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|    448|                          basic_contiguous_scan_context<char_type>>) {
 5915|    448|            auto rd = make_reader<T, char_type>();
 5916|    448|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|    448|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_23reader_impl_for_voidptrIwEESA_PvEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 5902|    448|    {
 5903|    448|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|    448|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    448|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    448|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    448|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 448]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    448|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    448|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|    448|                        .transform_error(make_eof_scan_error));
 5905|    448|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|    448|    }
_ZNK3scn2v44impl23reader_impl_for_voidptrIwE19skip_ws_before_readEv:
 5786|    850|    {
 5787|    850|        return true;
 5788|    850|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RPvNS0_6detail10locale_refE:
 5804|    744|    {
 5805|    744|        detail::format_specs specs{};
 5806|    744|        specs.type = detail::presentation_type::int_hex;
 5807|       |
 5808|    744|        std::uintptr_t intvalue{};
 5809|    744|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3940|    744|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    744|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    744|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    744|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 744, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    744|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    744|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    744|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    744|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    744|    }                                                  \
  |  |  |  | 3939|    744|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5810|      0|                                                                intvalue, loc));
 5811|      0|        value = reinterpret_cast<void*>(intvalue);
 5812|      0|        return result;
 5813|    744|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIbEENS0_13scan_expectedIS9_EERT_:
 5910|    448|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|    448|                          basic_contiguous_scan_context<char_type>>) {
 5915|    448|            auto rd = make_reader<T, char_type>();
 5916|    448|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|    448|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_20reader_impl_for_boolIwEESA_bEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|    448|    {
 5903|    448|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|    448|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    448|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    448|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    448|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 448]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    448|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    448|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|    448|                        .transform_error(make_eof_scan_error));
 5905|    448|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|    448|    }
_ZNK3scn2v44impl11reader_baseINS1_20reader_impl_for_boolIwEEwE19skip_ws_before_readEv:
 3150|    992|    {
 3151|    992|        return true;
 3152|    992|    }
_ZNK3scn2v44impl20reader_impl_for_boolIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNS0_6detail10locale_refE:
 5541|    448|    {
 5542|    448|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    448|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5543|       |
 5544|    448|        return bool_reader<CharT>{}.read_classic(range, value);
 5545|    448|    }
_ZNK3scn2v44impl16bool_reader_base12read_classicINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5391|    812|    {
 5392|    812|        scan_error err{scan_error::invalid_scanned_value,
 5393|    812|                       "Failed to read boolean"};
 5394|       |
 5395|    812|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5395:13): [True: 764, False: 48]
  ------------------
 5396|    764|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5396:22): [True: 0, False: 764]
  ------------------
 5397|      0|                return *r;
 5398|      0|            }
 5399|    764|            else {
 5400|    764|                err = r.error();
 5401|    764|            }
 5402|    764|        }
 5403|       |
 5404|    812|        if (m_options & allow_text) {
  ------------------
  |  Branch (5404:13): [True: 790, False: 22]
  ------------------
 5405|    790|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5405:22): [True: 0, False: 790]
  ------------------
 5406|      0|                return *r;
 5407|      0|            }
 5408|    790|            else {
 5409|    790|                err = r.error();
 5410|    790|            }
 5411|    790|        }
 5412|       |
 5413|    812|        return unexpected(err);
 5414|    812|    }
_ZNK3scn2v44impl16bool_reader_base12read_numericINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5420|    780|    {
 5421|    780|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5421:18): [True: 0, False: 780]
  ------------------
 5422|      0|            value = false;
 5423|      0|            return *r;
 5424|      0|        }
 5425|    780|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5425:18): [True: 0, False: 780]
  ------------------
 5426|      0|            value = true;
 5427|      0|            return *r;
 5428|      0|        }
 5429|       |
 5430|    780|        return detail::unexpected_scan_error(
 5431|    780|            scan_error::invalid_scanned_value,
 5432|    780|            "Failed to read numeric boolean value: No match");
 5433|    780|    }
_ZNK3scn2v44impl16bool_reader_base20read_textual_classicINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5438|    790|    {
 5439|    790|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5439:18): [True: 0, False: 790]
  ------------------
 5440|      0|            value = true;
 5441|      0|            return *r;
 5442|      0|        }
 5443|    790|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5443:18): [True: 0, False: 790]
  ------------------
 5444|      0|            value = false;
 5445|      0|            return *r;
 5446|      0|        }
 5447|       |
 5448|    790|        return detail::unexpected_scan_error(
 5449|    790|            scan_error::invalid_scanned_value,
 5450|    790|            "Failed to read textual boolean value: No match");
 5451|    790|    }
_ZN3scn2v44impl28read_matching_string_classicINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2293|  1.58k|{
 2294|  1.58k|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|  1.58k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.58k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.58k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 120, False: 1.46k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    120|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    120|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    120|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    120|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    120|    }                                                  \
  |  |  |  | 3939|  1.58k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.46k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2295|  1.46k|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2296|  1.46k|                    .transform_error(make_eof_parse_error));
 2297|       |
 2298|       |    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2299|       |        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2300|       |        if (SCN_UNLIKELY(sv.view() != str)) {
 2301|       |            return unexpected(parse_error::error);
 2302|       |        }
 2303|       |        return it;
 2304|       |    }
 2305|  1.46k|    else {
 2306|  1.46k|        auto range_it = range.begin();
 2307|  1.46k|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
  ------------------
  |  Branch (2307:28): [True: 1.46k, False: 0]
  ------------------
 2308|  1.46k|            if (SCN_UNLIKELY(*range_it !=
  ------------------
  |  |  865|  1.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.46k, False: 0]
  |  |  ------------------
  ------------------
 2309|  1.46k|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2310|  1.46k|                return unexpected(parse_error::error);
 2311|  1.46k|            }
 2312|  1.46k|        }
 2313|      0|        return it;
 2314|  1.46k|    }
 2315|  1.46k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIwEENS0_13scan_expectedIS9_EERT_:
 5910|    448|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|    448|                          basic_contiguous_scan_context<char_type>>) {
 5915|    448|            auto rd = make_reader<T, char_type>();
 5916|    448|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|    448|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_wcharIwEESA_wEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|    448|    {
 5903|    448|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|    448|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    448|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    448|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    448|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 448]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    448|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    448|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|    448|                        .transform_error(make_eof_scan_error));
 5905|    448|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|    448|    }
_ZN3scn2v44impl12float_readerIwEC2Ev:
 3699|    448|    constexpr float_reader() = default;
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIdEENS0_13scan_expectedIS9_EERT_:
 5910|    448|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|    448|                          basic_contiguous_scan_context<char_type>>) {
 5915|    448|            auto rd = make_reader<T, char_type>();
 5916|    448|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|    448|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|    448|    {
 5903|    448|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|    448|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    448|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    448|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    448|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 448]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    448|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    448|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|    448|                        .transform_error(make_eof_scan_error));
 5905|    448|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|    448|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4184|    448|    {
 4185|    448|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    448|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4186|       |
 4187|    448|        float_reader<CharT> rd{};
 4188|    448|        return read_impl<Range>(
 4189|    448|            range, rd,
 4190|    448|            [](float_reader<CharT>& r, auto&&... args) {
 4191|    448|                return r.read_source(SCN_FWD(args)...);
 4192|    448|            },
 4193|    448|            value);
 4194|    448|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|    448|        : m_fptr([](storage fn,
  743|    448|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    448|              cvref<T> obj = *get<T>(fn);
  745|    448|              if constexpr (std::is_void_v<R>) {
  746|    448|                  obj(static_cast<decltype(args)>(args)...);
  747|    448|              }
  748|    448|              else {
  749|    448|                  return obj(static_cast<decltype(args)>(args)...);
  750|    448|              }
  751|    448|          }),
  752|    448|          m_storage(std::addressof(f))
  753|    448|    {
  754|    448|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|    448|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    448|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    448|              else {
  749|    448|                  return obj(static_cast<decltype(args)>(args)...);
  750|    448|              }
  751|    448|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|    448|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    448|        else if constexpr (std::is_object_v<T>) {
  688|    448|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    448|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4190|    448|            [](float_reader<CharT>& r, auto&&... args) {
 4191|    448|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|    448|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4192|    448|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|    448|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    448|        {
  662|    448|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIS9_EERT_:
 5910|    448|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|    448|                          basic_contiguous_scan_context<char_type>>) {
 5915|    448|            auto rd = make_reader<T, char_type>();
 5916|    448|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|    448|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5902|    448|    {
 5903|    448|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|    448|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    448|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    448|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    448|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 448]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    448|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    448|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|    448|                        .transform_error(make_eof_scan_error));
 5905|    448|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|    448|    }
_ZN3scn2v44impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5302|    448|    {
 5303|    448|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    448|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|    448|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5305|    448|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIS9_EERT_:
 5910|    448|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|    448|                          basic_contiguous_scan_context<char_type>>) {
 5915|    448|            auto rd = make_reader<T, char_type>();
 5916|    448|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|    448|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5902|    448|    {
 5903|    448|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|    448|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    448|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    448|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    448|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 448]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    448|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    448|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|    448|                        .transform_error(make_eof_scan_error));
 5905|    448|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|    448|    }
_ZN3scn2v44impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5302|    448|    {
 5303|    448|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    448|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|    448|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5305|    448|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIS9_EERT_:
 5910|    448|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|    448|                          basic_contiguous_scan_context<char_type>>) {
 5915|    448|            auto rd = make_reader<T, char_type>();
 5916|    448|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|    448|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5902|    448|    {
 5903|    448|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|    448|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    448|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    448|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    448|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 448]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    448|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    448|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|    448|                        .transform_error(make_eof_scan_error));
 5905|    448|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|    448|    }
_ZN3scn2v44impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5302|    448|    {
 5303|    448|        SCN_UNUSED(loc);
  ------------------
  |  |  915|    448|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|    448|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5305|    448|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEwEEEENSL_10locale_refE:
 2985|  93.3k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  934|  93.3k|    static_cast<    \
  |  |  935|  93.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2986|  93.3k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2987|  93.3k|          m_current(m_range.begin())
 2988|  93.3k|    {
 2989|  93.3k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE3endEv:
 2997|  85.6k|    {
 2998|  85.6k|        return m_range.end();
 2999|  85.6k|    }
_ZN3scn2v44impl19is_first_char_spaceIwEENS1_26is_first_char_space_resultIT_EENSt3__117basic_string_viewIS4_NS6_11char_traitsIS4_EEEE:
 1318|  51.1k|{
 1319|       |    // TODO: optimize
 1320|  51.1k|    SCN_EXPECT(!str.empty());
  ------------------
  |  |  930|  51.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  51.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1321|  51.1k|    auto res = get_next_code_point(str);
 1322|  51.1k|    return {res.iterator, res.value, detail::is_cp_space(res.value)};
 1323|  51.1k|}
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE10advance_toES7_:
 3012|  20.4k|    {
 3013|  20.4k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  930|  20.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  20.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3014|  20.4k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3015|  20.4k|            if (it == nullptr) {
  ------------------
  |  Branch (3015:17): [True: 0, False: 20.4k]
  ------------------
 3016|      0|                it = end();
 3017|      0|            }
 3018|  20.4k|        }
 3019|  20.4k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|  20.4k|    static_cast<    \
  |  |  935|  20.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3020|  20.4k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5rangeEv:
 3002|  13.6k|    {
 3003|  13.6k|        return ranges::subrange{begin(), end()};
 3004|  13.6k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE11impl_prefixINS1_15take_width_viewISA_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_b:
 6073|  1.60k|    {
 6074|  1.60k|        const bool need_skipped_width =
 6075|  1.60k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6075:13): [True: 40, False: 1.56k]
  |  Branch (6075:33): [True: 1.56k, False: 0]
  ------------------
 6076|  1.60k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6077|       |
 6078|       |        // Read prefix
 6079|  1.60k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6079:13): [True: 36, False: 1.56k]
  ------------------
 6080|  1.60k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6080:13): [True: 206, False: 1.35k]
  ------------------
 6081|    242|            return skip_fill(rng, specs.precision, specs.fill,
 6082|    242|                             need_skipped_width);
 6083|    242|        }
 6084|  1.35k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6084:13): [True: 1.31k, False: 44]
  |  Branch (6084:56): [True: 796, False: 518]
  ------------------
 6085|       |            // Default alignment:
 6086|       |            // Skip preceding whitespace, if required by the reader
 6087|    796|            if (specs.precision != 0) {
  ------------------
  |  Branch (6087:17): [True: 796, False: 0]
  ------------------
 6088|    796|                auto max_width_view = take_width(rng, specs.precision);
 6089|    796|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|    796|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    796|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    796|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    796|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 796]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    796|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    796|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6090|    796|                                  .transform_error(make_eof_scan_error));
 6091|    796|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6092|    796|            }
 6093|      0|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6094|      0|                            make_eof_scan_error));
 6095|       |
 6096|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6096:17): [True: 0, False: 0]
  ------------------
 6097|      0|                return result_type{
 6098|      0|                    it,
 6099|      0|                    calculate_text_width(make_contiguous_buffer(
 6100|      0|                                             ranges::subrange{rng.begin(), it})
 6101|      0|                                             .view())};
 6102|      0|            }
 6103|      0|            return result_type{it, 0};
 6104|      0|        }
 6105|       |
 6106|    562|        return result_type{rng.begin(), 0};
 6107|  1.35k|    }
_ZN3scn2v44impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEb:
 5988|    242|{
 5989|    242|    using char_type = detail::char_t<Range>;
 5990|    242|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5991|       |
 5992|    242|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5992:9): [True: 242, False: 0]
  ------------------
 5993|    242|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5994|    242|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5995|       |
 5996|    242|        if (max_width == 0) {
  ------------------
  |  Branch (5996:13): [True: 0, False: 242]
  ------------------
 5997|      0|            auto it = read_while_code_unit(range, pred);
 5998|       |
 5999|      0|            if (want_skipped_width) {
  ------------------
  |  Branch (5999:17): [True: 0, False: 0]
  ------------------
 6000|      0|                auto prefix_width =
 6001|      0|                    static_cast<std::ptrdiff_t>(
 6002|      0|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 6003|      0|                    ranges::distance(range.begin(), it);
 6004|      0|                return result_type{it, prefix_width};
 6005|      0|            }
 6006|      0|            return result_type{it, 0};
 6007|      0|        }
 6008|       |
 6009|    242|        auto max_width_view = take_width(range, max_width);
 6010|    242|        auto w_it = read_while_code_unit(max_width_view, pred);
 6011|       |
 6012|    242|        if (want_skipped_width) {
  ------------------
  |  Branch (6012:13): [True: 242, False: 0]
  ------------------
 6013|    242|            return result_type{w_it.base(), max_width - w_it.count()};
 6014|    242|        }
 6015|      0|        return result_type{w_it.base(), 0};
 6016|    242|    }
 6017|       |
 6018|      0|    const auto fill_chars = fill.template get_code_units<char_type>();
 6019|      0|    if (max_width == 0) {
  ------------------
  |  Branch (6019:9): [True: 0, False: 0]
  ------------------
 6020|      0|        auto it = read_while_code_units(range, fill_chars);
 6021|       |
 6022|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (6022:13): [True: 0, False: 0]
  ------------------
 6023|      0|            auto prefix_width =
 6024|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 6025|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 6026|      0|            return result_type{it, prefix_width};
 6027|      0|        }
 6028|      0|        return result_type{it, 0};
 6029|      0|    }
 6030|       |
 6031|      0|    auto max_width_view = take_width(range, max_width);
 6032|      0|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 6033|       |
 6034|      0|    if (want_skipped_width) {
  ------------------
  |  Branch (6034:9): [True: 0, False: 0]
  ------------------
 6035|      0|        return result_type{w_it.base(), max_width - w_it.count()};
 6036|      0|    }
 6037|      0|    return result_type{w_it.base(), 0};
 6038|      0|}
_ZN3scn2v44impl12function_refIFbwES3_EC2IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_ST_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSJ_:
  742|    242|        : m_fptr([](storage fn,
  743|    242|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    242|              cvref<T> obj = *get<T>(fn);
  745|    242|              if constexpr (std::is_void_v<R>) {
  746|    242|                  obj(static_cast<decltype(args)>(args)...);
  747|    242|              }
  748|    242|              else {
  749|    242|                  return obj(static_cast<decltype(args)>(args)...);
  750|    242|              }
  751|    242|          }),
  752|    242|          m_storage(std::addressof(f))
  753|    242|    {
  754|    242|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_ST_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES15_w:
  743|    312|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    312|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    312|              else {
  749|    312|                  return obj(static_cast<decltype(args)>(args)...);
  750|    312|              }
  751|    312|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESI_lRKNS0_6detail9fill_typeEbEUlwE_EEDaNS3_7storageE:
  683|    312|    {
  684|    312|        if constexpr (std::is_const_v<T>) {
  685|    312|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    312|    }
_ZZN3scn2v44impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEbENKUlwE_clEw:
 5994|    312|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|    242|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    242|        {
  667|    242|        }
_ZN3scn2v44impl20read_while_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2074|    242|{
 2075|    242|    return read_until_code_unit(range, std::not_fn(pred));
 2076|    242|}
_ZN3scn2v44impl20read_until_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2055|    242|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|    242|    else {
 2060|    242|        auto first = range.begin();
 2061|    346|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 312, False: 34]
  ------------------
 2062|    312|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 208, False: 104]
  ------------------
 2063|    208|                return first;
 2064|    208|            }
 2065|    312|        }
 2066|     34|        return first;
 2067|    242|    }
 2068|    242|}
_ZNK3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE5beginEv:
 2920|  1.83k|    {
 2921|  1.83k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2922|  1.83k|                                      m_count};
 2923|  1.83k|    }
_ZNK3scn2v44impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEvE3getEv:
 2825|  6.40k|    {
 2826|  6.40k|        return view;
 2827|  6.40k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEC2ES6_SF_l:
 2480|  1.83k|        : m_current(x), m_end(s), m_count(n)
 2481|  1.83k|    {
 2482|  1.83k|    }
_ZN3scn2v44implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2891|  1.14k|        {
 2892|  1.14k|            return !(y == x);
 2893|  1.14k|        }
_ZN3scn2v44impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2878|  2.73k|        {
 2879|  2.73k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2879:21): [True: 34, False: 2.70k]
  |  Branch (2879:39): [True: 34, False: 0]
  ------------------
 2880|  2.73k|                   y.base() == x.m_end ||
  ------------------
  |  Branch (2880:20): [True: 0, False: 2.70k]
  ------------------
 2881|  2.73k|                   (y.count() == 1 && y.multibyte_left() == 0 &&
  ------------------
  |  Branch (2881:21): [True: 266, False: 2.43k]
  |  Branch (2881:39): [True: 266, False: 0]
  ------------------
 2882|  2.70k|                    y.is_current_double_wide());
  ------------------
  |  Branch (2882:21): [True: 0, False: 266]
  ------------------
 2883|  2.73k|        }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE14multibyte_leftEv:
 2520|    300|    {
 2521|    300|        return m_multibyte_left;
 2522|    300|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE22is_current_double_wideEv:
 2525|    266|    {
 2526|    266|        assert(count() != 0 || multibyte_left() != 0);
 2527|    266|        return _get_width_at_current_cp_start(
 2528|    266|                   _get_cp_length_at_current()) == 2;
 2529|    266|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE30_get_width_at_current_cp_startEl:
 2753|  1.16k|    {
 2754|  1.16k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  865|  1.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.16k]
  |  |  ------------------
  ------------------
 2755|      0|            return 0;
 2756|      0|        }
 2757|       |
 2758|  1.16k|        if (cplen == 1) {
  ------------------
  |  Branch (2758:13): [True: 1.16k, False: 0]
  ------------------
 2759|  1.16k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  930|  1.16k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.16k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2760|  1.16k|            auto cp = static_cast<char32_t>(*m_current);
 2761|  1.16k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2762|  1.16k|        }
 2763|       |
 2764|      0|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2765|      0|                                           cplen);
 2766|      0|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2767|      0|            return 0;
 2768|      0|        }
 2769|       |
 2770|      0|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2771|      0|        return static_cast<difference_type>(
 2772|      0|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2773|      0|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE25_get_cp_length_at_currentEv:
 2747|  1.16k|    {
 2748|  1.16k|        return static_cast<difference_type>(
 2749|  1.16k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2750|  1.16k|    }
_ZNK3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE3endEv:
 2926|  2.73k|    {
 2927|  2.73k|        return sentinel<true>{m_base.get().end()};
 2928|  2.73k|    }
_ZN3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE8sentinelILb1EEC2ENSA_8sentinelILb1EEE:
 2859|  2.73k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
  ------------------
  |  |  934|  2.73k|    static_cast<    \
  |  |  935|  2.73k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEdeEv:
 2532|  1.90k|    {
 2533|  1.90k|        return *m_current;
 2534|  1.90k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEppEv:
 2541|    900|    {
 2542|    900|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  930|    900|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    900|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2543|    900|        _increment_current();
 2544|    900|        return *this;
 2545|    900|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE18_increment_currentEv:
 2776|    900|    {
 2777|    900|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2777:13): [True: 900, False: 0]
  ------------------
 2778|    900|            auto cplen = _get_cp_length_at_current();
 2779|    900|            m_multibyte_left = cplen - 1;
 2780|    900|            m_count -= _get_width_at_current_cp_start(cplen);
 2781|    900|        }
 2782|      0|        else {
 2783|      0|            --m_multibyte_left;
 2784|      0|        }
 2785|       |
 2786|    900|        ++m_current;
 2787|    900|    }
_ZNK3scn2v44impl14_take_width_fnclINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEEDTtlS4_fp_fp0_EERKT_l:
 2942|  1.03k|    {
 2943|  1.03k|        return take_width_view{r, n};
 2944|  1.03k|    }
_ZN3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEEC2ERKSA_l:
 2910|  1.03k|        : m_base(base), m_count(count)
 2911|  1.03k|    {
 2912|  1.03k|    }
_ZN3scn2v44impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEvEC2ERKSB_:
 2822|  1.03k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v44impl23skip_classic_whitespaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3065|    796|{
 3066|    796|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 796, False: 0]
  ------------------
 3067|    796|        auto it = read_while_classic_space(range);
 3068|    796|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|    796|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|    796|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 796]
  |  |  ------------------
  ------------------
 3070|      0|            return unexpected(e);
 3071|      0|        }
 3072|       |
 3073|    796|        return it;
 3074|    796|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|    796|}
_ZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2215|    796|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|    796|    else {
 2225|    796|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|    796|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|    796|            return detail::is_cp_space(cp);
 2238|    796|        });
 2239|    796|    }
 2240|    796|}
_ZN3scn2v44impl21read_while_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2180|    796|{
 2181|    796|    return read_until_code_point(range, std::not_fn(pred));
 2182|    796|}
_ZN3scn2v44impl21read_until_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2159|    796|{
 2160|    796|    auto it = range.begin();
 2161|    796|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 796, False: 0]
  ------------------
 2162|    796|        const auto val =
 2163|    796|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|    796|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|    796|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 796, False: 0]
  |  |  ------------------
  ------------------
 2165|    796|            const auto cp = detail::decode_code_point_exhaustive(
 2166|    796|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|    796|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 796, False: 0]
  ------------------
 2168|    796|                return it;
 2169|    796|            }
 2170|    796|        }
 2171|      0|        it = val.iterator;
 2172|      0|    }
 2173|       |
 2174|      0|    return it;
 2175|    796|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISP_EEE4typeEEESP_:
 1997|    796|{
 1998|    796|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|    796|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    796|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|    796|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|    796|    auto it = range.begin();
 2002|    796|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|    796|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|    796|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 796]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|    796|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 796, False: 0]
  ------------------
 2011|    796|        ++it;
 2012|    796|        return {it, string_type(1, *range.begin())};
 2013|    796|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|    796|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEbT_:
  944|  1.59k|{
  945|  1.59k|    return is_range_eof(r.begin(), r.end());
  946|  1.59k|}
_ZN3scn2v44impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS8_ISE_E8sentinelILb1EEEEEbT_T0_:
  928|  1.59k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  1.59k|    {
  938|  1.59k|        return begin == end;
  939|  1.59k|    }
  940|  1.59k|}
_ZNK3scn2v44impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEwE8is_validEv:
 1988|    796|    {
 1989|    796|        return !codepoint.empty();
 1990|    796|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|    796|        : m_fptr([](storage fn,
  743|    796|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    796|              cvref<T> obj = *get<T>(fn);
  745|    796|              if constexpr (std::is_void_v<R>) {
  746|    796|                  obj(static_cast<decltype(args)>(args)...);
  747|    796|              }
  748|    796|              else {
  749|    796|                  return obj(static_cast<decltype(args)>(args)...);
  750|    796|              }
  751|    796|          }),
  752|    796|          m_storage(std::addressof(f))
  753|    796|    {
  754|    796|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|    796|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    796|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    796|              else {
  749|    796|                  return obj(static_cast<decltype(args)>(args)...);
  750|    796|              }
  751|    796|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS6_INS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|    796|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    796|        else if constexpr (std::is_object_v<T>) {
  688|    796|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    796|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2236|    796|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|    796|            return detail::is_cp_space(cp);
 2238|    796|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|    796|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    796|        {
  662|    796|        }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_9eof_errorET_:
  950|    796|{
  951|    796|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|    796|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 796]
  |  |  ------------------
  ------------------
  952|      0|        return eof_error::eof;
  953|      0|    }
  954|    796|    return eof_error::good;
  955|    796|}
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE4baseEv:
 2512|  3.73k|    {
 2513|  3.73k|        return m_current;
 2514|  3.73k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE5countEv:
 2516|  6.73k|    {
 2517|  6.73k|        return m_count;
 2518|  6.73k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6073|  3.42k|    {
 6074|  3.42k|        const bool need_skipped_width =
 6075|  3.42k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6075:13): [True: 2.16k, False: 1.26k]
  |  Branch (6075:33): [True: 0, False: 1.26k]
  ------------------
 6076|  3.42k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6077|       |
 6078|       |        // Read prefix
 6079|  3.42k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6079:13): [True: 56, False: 3.37k]
  ------------------
 6080|  3.42k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6080:13): [True: 270, False: 3.10k]
  ------------------
 6081|    326|            return skip_fill(rng, specs.precision, specs.fill,
 6082|    326|                             need_skipped_width);
 6083|    326|        }
 6084|  3.10k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6084:13): [True: 2.89k, False: 208]
  |  Branch (6084:56): [True: 2.24k, False: 652]
  ------------------
 6085|       |            // Default alignment:
 6086|       |            // Skip preceding whitespace, if required by the reader
 6087|  2.24k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6087:17): [True: 0, False: 2.24k]
  ------------------
 6088|      0|                auto max_width_view = take_width(rng, specs.precision);
 6089|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6090|      0|                                  .transform_error(make_eof_scan_error));
 6091|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6092|      0|            }
 6093|  4.48k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|  2.24k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.24k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.24k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 2.24k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  2.24k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  2.24k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6094|  4.48k|                            make_eof_scan_error));
 6095|       |
 6096|  4.48k|            if (need_skipped_width) {
  ------------------
  |  Branch (6096:17): [True: 1.76k, False: 474]
  ------------------
 6097|  1.76k|                return result_type{
 6098|  1.76k|                    it,
 6099|  1.76k|                    calculate_text_width(make_contiguous_buffer(
 6100|  1.76k|                                             ranges::subrange{rng.begin(), it})
 6101|  1.76k|                                             .view())};
 6102|  1.76k|            }
 6103|    474|            return result_type{it, 0};
 6104|  4.48k|        }
 6105|       |
 6106|    860|        return result_type{rng.begin(), 0};
 6107|  3.10k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6115|  1.49k|    {
 6116|  1.49k|        const bool need_skipped_width =
 6117|  1.49k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6117:13): [True: 454, False: 1.03k]
  |  Branch (6117:33): [True: 590, False: 448]
  ------------------
 6118|  1.49k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6119|       |
 6120|  1.49k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6120:13): [True: 70, False: 1.42k]
  ------------------
 6121|  1.49k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6121:13): [True: 162, False: 1.26k]
  ------------------
 6122|    232|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6122:17): [True: 80, False: 152]
  ------------------
 6123|    232|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6123:17): [True: 50, False: 30]
  ------------------
 6124|     50|                return result_type{rng.begin(), 0};
 6125|     50|            }
 6126|    182|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6127|    182|                             specs.fill, need_skipped_width);
 6128|    232|        }
 6129|  1.26k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6129:13): [True: 1.24k, False: 18]
  ------------------
 6130|  1.26k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6130:13): [True: 1.03k, False: 204]
  ------------------
 6131|  1.26k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6131:15): [True: 304, False: 734]
  |  Branch (6131:35): [True: 288, False: 16]
  ------------------
 6132|  1.03k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6132:15): [True: 468, False: 282]
  ------------------
 6133|    750|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6133:15): [True: 292, False: 176]
  ------------------
 6134|    580|            if (specs.precision != 0) {
  ------------------
  |  Branch (6134:17): [True: 292, False: 288]
  ------------------
 6135|    292|                const auto initial_width =
 6136|    292|                    specs.precision - prefix_width - value_width;
 6137|    292|                auto max_width_view = take_width(rng, initial_width);
 6138|    292|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|    292|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    292|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    292|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    292|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 292]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    292|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    292|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    292|                                  .transform_error(make_eof_scan_error));
 6140|    292|                return result_type{w_it.base(), initial_width - w_it.count()};
 6141|    292|            }
 6142|    576|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|    288|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    288|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    288|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    288|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 288]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    288|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    288|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|    576|                            make_eof_scan_error));
 6144|       |
 6145|    576|            if (need_skipped_width) {
  ------------------
  |  Branch (6145:17): [True: 288, False: 0]
  ------------------
 6146|    288|                return result_type{
 6147|    288|                    it,
 6148|    288|                    calculate_text_width(make_contiguous_buffer(
 6149|    288|                                             ranges::subrange{rng.begin(), it})
 6150|    288|                                             .view())};
 6151|    288|            }
 6152|      0|            return result_type{it, 0};
 6153|    576|        }
 6154|    680|        return result_type{rng.begin(), 0};
 6155|  1.26k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIiEENS0_13scan_expectedIS9_EERT_:
 6225|    876|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|    876|                          basic_contiguous_scan_context<char_type>>) {
 6230|    876|            auto rd = make_reader<T, char_type>();
 6231|    876|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|    876|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    876|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 406, False: 470]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    406|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|    406|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    406|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    406|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|    406|    }
  ------------------
 6232|    470|            return impl(rd, range, value);
 6233|       |        }
 6234|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6235|       |            auto rd = make_reader<T, char_type>();
 6236|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6237|       |
 6238|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6239|       |                specs.width != 0) {
 6240|       |                return impl(rd, range, value);
 6241|       |            }
 6242|       |
 6243|       |            auto crange = get_as_contiguous(range);
 6244|       |            SCN_TRY(it, impl(rd, crange, value));
 6245|       |            return ranges::next(range.begin(),
 6246|       |                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|    876|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6160|    470|    {
 6161|    470|        const bool need_skipped_width =
 6162|    470|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 230, False: 240]
  |  Branch (6162:33): [True: 138, False: 102]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|    470|        auto it = rng.begin();
 6166|    470|        std::ptrdiff_t prefix_width = 0;
 6167|    470|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 140, False: 330]
  ------------------
 6168|    140|            auto max_width_view = take_width(rng, specs.precision);
 6169|    140|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    140|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    140|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    140|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    140|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 140]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    140|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    140|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|    140|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|    140|            it = prefix_result.first.base();
 6172|    140|            prefix_width = prefix_result.second;
 6173|    140|        }
 6174|    330|        else {
 6175|    330|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|    330|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    330|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    330|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    330|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 330]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    330|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    330|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|    330|            std::tie(it, prefix_width) = prefix_result;
 6177|    330|        }
 6178|    470|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|    470|        std::ptrdiff_t value_width = 0;
 6182|    470|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 140, False: 330]
  ------------------
 6183|    140|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 2, False: 138]
  ------------------
 6184|      2|                return detail::unexpected_scan_error(
 6185|      2|                    scan_error::invalid_fill,
 6186|      2|                    "Too many fill characters before value, "
 6187|      2|                    "precision exceeded before reading value");
 6188|      2|            }
 6189|       |
 6190|    138|            const auto initial_width = specs.precision - prefix_width;
 6191|    138|            auto max_width_view =
 6192|    138|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|    138|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    138|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    138|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    138|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    138|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 138, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    138|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    138|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    138|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    138|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    138|    }                                                  \
  |  |  |  | 3939|    138|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|      0|            it = w_it.base();
 6195|      0|            value_width = initial_width - w_it.count();
 6196|      0|        }
 6197|    330|        else {
 6198|    330|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|    330|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    330|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    330|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 330, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    330|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|    330|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    330|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    330|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|    330|    }                                                  \
  |  | 3939|    330|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    330|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|      0|                                             specs, value, loc));
 6200|       |
 6201|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 0, False: 0]
  ------------------
 6202|      0|                value_width = calculate_text_width(
 6203|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|      0|                        .view());
 6205|      0|            }
 6206|      0|        }
 6207|       |
 6208|       |        // Read postfix
 6209|      0|        std::ptrdiff_t postfix_width = 0;
 6210|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 0, False: 0]
  ------------------
 6211|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6214|      0|                                 value_width));
 6215|      0|            std::tie(it, postfix_width) = postfix_result;
 6216|      0|        }
 6217|       |
 6218|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6219|      0|            specs, prefix_width, value_width, postfix_width));
 6220|      0|        return it;
 6221|      0|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIjEENS0_13scan_expectedIS9_EERT_:
 6225|    876|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|    876|                          basic_contiguous_scan_context<char_type>>) {
 6230|    876|            auto rd = make_reader<T, char_type>();
 6231|    876|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|    876|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    876|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 406, False: 470]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    406|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|    406|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    406|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    406|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|    406|    }
  ------------------
 6232|    470|            return impl(rd, range, value);
 6233|       |        }
 6234|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6235|       |            auto rd = make_reader<T, char_type>();
 6236|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6237|       |
 6238|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6239|       |                specs.width != 0) {
 6240|       |                return impl(rd, range, value);
 6241|       |            }
 6242|       |
 6243|       |            auto crange = get_as_contiguous(range);
 6244|       |            SCN_TRY(it, impl(rd, crange, value));
 6245|       |            return ranges::next(range.begin(),
 6246|       |                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|    876|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6160|    470|    {
 6161|    470|        const bool need_skipped_width =
 6162|    470|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 230, False: 240]
  |  Branch (6162:33): [True: 138, False: 102]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|    470|        auto it = rng.begin();
 6166|    470|        std::ptrdiff_t prefix_width = 0;
 6167|    470|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 140, False: 330]
  ------------------
 6168|    140|            auto max_width_view = take_width(rng, specs.precision);
 6169|    140|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    140|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    140|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    140|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    140|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 140]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    140|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    140|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|    140|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|    140|            it = prefix_result.first.base();
 6172|    140|            prefix_width = prefix_result.second;
 6173|    140|        }
 6174|    330|        else {
 6175|    330|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|    330|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    330|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    330|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    330|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 330]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    330|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    330|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|    330|            std::tie(it, prefix_width) = prefix_result;
 6177|    330|        }
 6178|    470|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|    470|        std::ptrdiff_t value_width = 0;
 6182|    470|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 140, False: 330]
  ------------------
 6183|    140|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 2, False: 138]
  ------------------
 6184|      2|                return detail::unexpected_scan_error(
 6185|      2|                    scan_error::invalid_fill,
 6186|      2|                    "Too many fill characters before value, "
 6187|      2|                    "precision exceeded before reading value");
 6188|      2|            }
 6189|       |
 6190|    138|            const auto initial_width = specs.precision - prefix_width;
 6191|    138|            auto max_width_view =
 6192|    138|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|    138|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    138|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    138|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    138|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    138|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 138, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    138|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    138|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    138|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    138|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    138|    }                                                  \
  |  |  |  | 3939|    138|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|      0|            it = w_it.base();
 6195|      0|            value_width = initial_width - w_it.count();
 6196|      0|        }
 6197|    330|        else {
 6198|    330|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|    330|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    330|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    330|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 330, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    330|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|    330|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    330|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    330|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|    330|    }                                                  \
  |  | 3939|    330|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    330|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|      0|                                             specs, value, loc));
 6200|       |
 6201|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 0, False: 0]
  ------------------
 6202|      0|                value_width = calculate_text_width(
 6203|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|      0|                        .view());
 6205|      0|            }
 6206|      0|        }
 6207|       |
 6208|       |        // Read postfix
 6209|      0|        std::ptrdiff_t postfix_width = 0;
 6210|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 0, False: 0]
  ------------------
 6211|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6214|      0|                                 value_width));
 6215|      0|            std::tie(it, postfix_width) = postfix_result;
 6216|      0|        }
 6217|       |
 6218|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6219|      0|            specs, prefix_width, value_width, postfix_width));
 6220|      0|        return it;
 6221|      0|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIPvEENS0_13scan_expectedIS9_EERT_:
 6225|    836|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|    836|                          basic_contiguous_scan_context<char_type>>) {
 6230|    836|            auto rd = make_reader<T, char_type>();
 6231|    836|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|    836|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    836|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 434, False: 402]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    434|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|    434|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    434|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    434|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|    434|    }
  ------------------
 6232|    402|            return impl(rd, range, value);
 6233|       |        }
 6234|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6235|       |            auto rd = make_reader<T, char_type>();
 6236|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6237|       |
 6238|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6239|       |                specs.width != 0) {
 6240|       |                return impl(rd, range, value);
 6241|       |            }
 6242|       |
 6243|       |            auto crange = get_as_contiguous(range);
 6244|       |            SCN_TRY(it, impl(rd, crange, value));
 6245|       |            return ranges::next(range.begin(),
 6246|       |                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|    836|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIwE11check_specsERKNS0_6detail12format_specsE:
 5791|    836|    {
 5792|    836|        reader_error_handler eh{};
 5793|    836|        detail::check_pointer_type_specs(specs, eh);
 5794|    836|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|    836|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 434, False: 402]
  |  |  ------------------
  ------------------
 5795|    434|            return detail::unexpected_scan_error(
 5796|    434|                scan_error::invalid_format_string, eh.m_msg);
 5797|    434|        }
 5798|    402|        return {};
 5799|    836|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_23reader_impl_for_voidptrIwEESA_PvEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 6160|    402|    {
 6161|    402|        const bool need_skipped_width =
 6162|    402|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 226, False: 176]
  |  Branch (6162:33): [True: 104, False: 72]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|    402|        auto it = rng.begin();
 6166|    402|        std::ptrdiff_t prefix_width = 0;
 6167|    402|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 106, False: 296]
  ------------------
 6168|    106|            auto max_width_view = take_width(rng, specs.precision);
 6169|    106|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    106|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    106|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    106|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    106|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 106]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    106|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    106|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|    106|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|    106|            it = prefix_result.first.base();
 6172|    106|            prefix_width = prefix_result.second;
 6173|    106|        }
 6174|    296|        else {
 6175|    296|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|    296|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    296|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    296|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    296|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 296]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    296|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    296|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|    296|            std::tie(it, prefix_width) = prefix_result;
 6177|    296|        }
 6178|    402|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|    402|        std::ptrdiff_t value_width = 0;
 6182|    402|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 106, False: 296]
  ------------------
 6183|    106|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 2, False: 104]
  ------------------
 6184|      2|                return detail::unexpected_scan_error(
 6185|      2|                    scan_error::invalid_fill,
 6186|      2|                    "Too many fill characters before value, "
 6187|      2|                    "precision exceeded before reading value");
 6188|      2|            }
 6189|       |
 6190|    104|            const auto initial_width = specs.precision - prefix_width;
 6191|    104|            auto max_width_view =
 6192|    104|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|    104|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    104|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    104|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    104|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    104|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 104, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    104|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    104|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    104|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    104|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    104|    }                                                  \
  |  |  |  | 3939|    104|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|      0|            it = w_it.base();
 6195|      0|            value_width = initial_width - w_it.count();
 6196|      0|        }
 6197|    296|        else {
 6198|    296|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|    296|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    296|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    296|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 296, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    296|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|    296|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    296|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    296|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|    296|    }                                                  \
  |  | 3939|    296|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    296|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|      0|                                             specs, value, loc));
 6200|       |
 6201|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 0, False: 0]
  ------------------
 6202|      0|                value_width = calculate_text_width(
 6203|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|      0|                        .view());
 6205|      0|            }
 6206|      0|        }
 6207|       |
 6208|       |        // Read postfix
 6209|      0|        std::ptrdiff_t postfix_width = 0;
 6210|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 0, False: 0]
  ------------------
 6211|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6214|      0|                                 value_width));
 6215|      0|            std::tie(it, postfix_width) = postfix_result;
 6216|      0|        }
 6217|       |
 6218|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6219|      0|            specs, prefix_width, value_width, postfix_width));
 6220|      0|        return it;
 6221|      0|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERPvNSN_10locale_refE:
 5821|    104|    {
 5822|    104|        SCN_UNUSED(specs);
  ------------------
  |  |  915|    104|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5823|    104|        return read_default(range, value, loc);
 5824|    104|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIwE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RPvNS0_6detail10locale_refE:
 5804|    104|    {
 5805|    104|        detail::format_specs specs{};
 5806|    104|        specs.type = detail::presentation_type::int_hex;
 5807|       |
 5808|    104|        std::uintptr_t intvalue{};
 5809|    104|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3940|    104|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    104|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    104|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    104|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 104, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    104|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    104|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    104|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    104|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    104|    }                                                  \
  |  |  |  | 3939|    104|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5810|      0|                                                                intvalue, loc));
 5811|      0|        value = reinterpret_cast<void*>(intvalue);
 5812|      0|        return result;
 5813|    104|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERPvNSL_10locale_refE:
 5821|    296|    {
 5822|    296|        SCN_UNUSED(specs);
  ------------------
  |  |  915|    296|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5823|    296|        return read_default(range, value, loc);
 5824|    296|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIbEENS0_13scan_expectedIS9_EERT_:
 6225|    876|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|    876|                          basic_contiguous_scan_context<char_type>>) {
 6230|    876|            auto rd = make_reader<T, char_type>();
 6231|    876|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|    876|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    876|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 332, False: 544]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    332|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|    332|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    332|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    332|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|    332|    }
  ------------------
 6232|    544|            return impl(rd, range, value);
 6233|       |        }
 6234|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6235|       |            auto rd = make_reader<T, char_type>();
 6236|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6237|       |
 6238|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6239|       |                specs.width != 0) {
 6240|       |                return impl(rd, range, value);
 6241|       |            }
 6242|       |
 6243|       |            auto crange = get_as_contiguous(range);
 6244|       |            SCN_TRY(it, impl(rd, crange, value));
 6245|       |            return ranges::next(range.begin(),
 6246|       |                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|    876|    }
_ZN3scn2v44impl11reader_baseINS1_20reader_impl_for_boolIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3155|    876|    {
 3156|    876|        reader_error_handler eh{};
 3157|    876|        get_derived().check_specs_impl(specs, eh);
 3158|    876|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|    876|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 332, False: 544]
  |  |  ------------------
  ------------------
 3159|    332|            return detail::unexpected_scan_error(
 3160|    332|                scan_error::invalid_format_string, eh.m_msg);
 3161|    332|        }
 3162|    544|        return {};
 3163|    876|    }
_ZN3scn2v44impl11reader_baseINS1_20reader_impl_for_boolIwEEwE11get_derivedEv:
 3167|    876|    {
 3168|    876|        return static_cast<Derived&>(*this);
 3169|    876|    }
_ZN3scn2v44impl20reader_impl_for_boolIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5534|    876|    {
 5535|    876|        detail::check_bool_type_specs(specs, eh);
 5536|    876|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_20reader_impl_for_boolIwEESA_bEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6160|    544|    {
 6161|    544|        const bool need_skipped_width =
 6162|    544|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 244, False: 300]
  |  Branch (6162:33): [True: 158, False: 142]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|    544|        auto it = rng.begin();
 6166|    544|        std::ptrdiff_t prefix_width = 0;
 6167|    544|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 162, False: 382]
  ------------------
 6168|    162|            auto max_width_view = take_width(rng, specs.precision);
 6169|    162|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    162|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    162|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    162|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    162|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 162]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    162|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    162|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|    162|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|    162|            it = prefix_result.first.base();
 6172|    162|            prefix_width = prefix_result.second;
 6173|    162|        }
 6174|    382|        else {
 6175|    382|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|    382|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    382|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    382|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    382|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 382]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    382|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    382|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|    382|            std::tie(it, prefix_width) = prefix_result;
 6177|    382|        }
 6178|    544|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|    544|        std::ptrdiff_t value_width = 0;
 6182|    544|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 162, False: 382]
  ------------------
 6183|    162|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 4, False: 158]
  ------------------
 6184|      4|                return detail::unexpected_scan_error(
 6185|      4|                    scan_error::invalid_fill,
 6186|      4|                    "Too many fill characters before value, "
 6187|      4|                    "precision exceeded before reading value");
 6188|      4|            }
 6189|       |
 6190|    158|            const auto initial_width = specs.precision - prefix_width;
 6191|    158|            auto max_width_view =
 6192|    158|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|    158|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    158|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    158|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    158|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    158|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 158, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    158|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    158|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    158|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    158|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    158|    }                                                  \
  |  |  |  | 3939|    158|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|      0|            it = w_it.base();
 6195|      0|            value_width = initial_width - w_it.count();
 6196|      0|        }
 6197|    382|        else {
 6198|    382|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|    382|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    382|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    382|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 382, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    382|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|    382|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    382|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    382|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|    382|    }                                                  \
  |  | 3939|    382|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    382|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|      0|                                             specs, value, loc));
 6200|       |
 6201|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 0, False: 0]
  ------------------
 6202|      0|                value_width = calculate_text_width(
 6203|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|      0|                        .view());
 6205|      0|            }
 6206|      0|        }
 6207|       |
 6208|       |        // Read postfix
 6209|      0|        std::ptrdiff_t postfix_width = 0;
 6210|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 0, False: 0]
  ------------------
 6211|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6214|      0|                                 value_width));
 6215|      0|            std::tie(it, postfix_width) = postfix_result;
 6216|      0|        }
 6217|       |
 6218|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6219|      0|            specs, prefix_width, value_width, postfix_width));
 6220|      0|        return it;
 6221|      0|    }
_ZNK3scn2v44impl20reader_impl_for_boolIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERbNSN_10locale_refE:
 5553|    158|    {
 5554|    158|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5555|       |
 5556|    158|#if !SCN_DISABLE_LOCALE
 5557|    158|        if (specs.localized) {
  ------------------
  |  Branch (5557:13): [True: 20, False: 138]
  ------------------
 5558|     20|            return rd.read_localized(range, loc, value);
 5559|     20|        }
 5560|    138|#endif
 5561|       |
 5562|    138|        return rd.read_classic(range, value);
 5563|    158|    }
_ZN3scn2v44impl20reader_impl_for_boolIwE11get_optionsERKNS0_6detail12format_specsE:
 5566|    540|    {
 5567|    540|        SCN_GCC_COMPAT_PUSH
 5568|    540|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 5569|       |
 5570|    540|        switch (specs.type) {
 5571|     70|            case detail::presentation_type::string:
  ------------------
  |  Branch (5571:13): [True: 70, False: 470]
  ------------------
 5572|     70|                return bool_reader_base::allow_text;
 5573|       |
 5574|     14|            case detail::presentation_type::int_generic:
  ------------------
  |  Branch (5574:13): [True: 14, False: 526]
  ------------------
 5575|     22|            case detail::presentation_type::int_binary:
  ------------------
  |  Branch (5575:13): [True: 8, False: 532]
  ------------------
 5576|     30|            case detail::presentation_type::int_decimal:
  ------------------
  |  Branch (5576:13): [True: 8, False: 532]
  ------------------
 5577|     40|            case detail::presentation_type::int_hex:
  ------------------
  |  Branch (5577:13): [True: 10, False: 530]
  ------------------
 5578|     52|            case detail::presentation_type::int_octal:
  ------------------
  |  Branch (5578:13): [True: 12, False: 528]
  ------------------
 5579|     64|            case detail::presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (5579:13): [True: 12, False: 528]
  ------------------
 5580|     64|                return bool_reader_base::allow_numeric;
 5581|       |
 5582|    406|            default:
  ------------------
  |  Branch (5582:13): [True: 406, False: 134]
  ------------------
 5583|    406|                return bool_reader_base::allow_text |
 5584|    406|                       bool_reader_base::allow_numeric;
 5585|    540|        }
 5586|       |
 5587|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 5588|    540|    }
_ZNK3scn2v44impl11bool_readerIwE14read_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refERb:
 5464|     20|    {
 5465|     20|        scan_error err{scan_error::invalid_scanned_value,
 5466|     20|                       "Failed to read boolean"};
 5467|       |
 5468|     20|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5468:13): [True: 18, False: 2]
  ------------------
 5469|     18|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5469:22): [True: 0, False: 18]
  ------------------
 5470|      0|                return *r;
 5471|      0|            }
 5472|     18|            else {
 5473|     18|                err = r.error();
 5474|     18|            }
 5475|     18|        }
 5476|       |
 5477|     20|        if (m_options & allow_text) {
  ------------------
  |  Branch (5477:13): [True: 10, False: 10]
  ------------------
 5478|     10|            auto stdloc = loc.get<std::locale>();
 5479|     10|            const auto& numpunct =
 5480|     10|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5481|     10|            const auto truename = numpunct.truename();
 5482|     10|            const auto falsename = numpunct.falsename();
 5483|       |
 5484|     10|            if (auto r =
  ------------------
  |  Branch (5484:22): [True: 0, False: 10]
  ------------------
 5485|     10|                    read_textual_custom(range, value, truename, falsename)) {
 5486|      0|                return *r;
 5487|      0|            }
 5488|     10|            else {
 5489|     10|                err = r.error();
 5490|     10|            }
 5491|     10|        }
 5492|       |
 5493|     20|        return unexpected(err);
 5494|     20|    }
_ZNK3scn2v44impl16bool_reader_base12read_numericINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5420|    138|    {
 5421|    138|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5421:18): [True: 0, False: 138]
  ------------------
 5422|      0|            value = false;
 5423|      0|            return *r;
 5424|      0|        }
 5425|    138|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5425:18): [True: 0, False: 138]
  ------------------
 5426|      0|            value = true;
 5427|      0|            return *r;
 5428|      0|        }
 5429|       |
 5430|    138|        return detail::unexpected_scan_error(
 5431|    138|            scan_error::invalid_scanned_value,
 5432|    138|            "Failed to read numeric boolean value: No match");
 5433|    138|    }
_ZN3scn2v44impl23read_matching_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NDTcl4implISF_EEE4typeE:
 2245|    276|{
 2246|    276|    auto it = read_code_unit(range);
 2247|    276|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|    276|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 276]
  |  |  ------------------
  ------------------
 2248|      0|        return unexpected(make_eof_parse_error(it.error()));
 2249|      0|    }
 2250|       |
 2251|    276|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|    276|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 276, False: 0]
  |  |  ------------------
  ------------------
 2252|    276|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|    276|        return unexpected(parse_error::error);
 2254|    276|    }
 2255|       |
 2256|      0|    return *it;
 2257|    276|}
_ZNK3scn2v44impl11bool_readerIwE19read_textual_customINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RbNSF_17basic_string_viewIwNSF_11char_traitsIwEEEESR_:
 5504|     10|    {
 5505|     10|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5506|     10|        const auto shorter = std::pair{
 5507|     10|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5507:13): [True: 10, False: 0]
  ------------------
 5508|     10|        const auto longer = std::pair{
 5509|     10|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5509:13): [True: 0, False: 10]
  ------------------
 5510|       |
 5511|     10|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5511:18): [True: 0, False: 10]
  ------------------
 5512|      0|            value = shorter.second;
 5513|      0|            return *r;
 5514|      0|        }
 5515|     10|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5515:18): [True: 0, False: 10]
  ------------------
 5516|      0|            value = longer.second;
 5517|      0|            return *r;
 5518|      0|        }
 5519|       |
 5520|     10|        return detail::unexpected_scan_error(
 5521|     10|            scan_error::invalid_scanned_value,
 5522|     10|            "Failed to read textual boolean: No match");
 5523|     10|    }
_ZN3scn2v44impl20read_matching_stringINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewINDTcl4implISF_EEE4typeENSD_11char_traitsISN_EEEE:
 2278|     20|{
 2279|     20|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 14, False: 6]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     14|    }                                                  \
  |  |  |  | 3939|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2280|      6|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2281|      6|                    .transform_error(make_eof_parse_error));
 2282|       |
 2283|      6|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2284|      6|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  865|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6, False: 0]
  |  |  ------------------
  ------------------
 2285|      6|        return unexpected(parse_error::error);
 2286|      6|    }
 2287|      0|    return it;
 2288|      6|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_l:
 1955|    256|{
 1956|    256|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|    256|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    256|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|    256|    else {
 1967|    256|        auto it = range.begin();
 1968|    256|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 0, False: 256]
  ------------------
 1969|      0|            return ranges::next(it, count);
 1970|      0|        }
 1971|       |
 1972|  1.23k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 1.04k, False: 186]
  ------------------
 1973|  1.04k|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 70, False: 974]
  ------------------
 1974|     70|                return unexpected(eof_error::eof);
 1975|     70|            }
 1976|  1.04k|        }
 1977|       |
 1978|    186|        return it;
 1979|    256|    }
 1980|    256|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEmT_:
 1095|    256|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|       |                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|       |        else {
 1107|       |            if (r.begin().stores_parent()) {
 1108|       |                return static_cast<size_t>(
 1109|       |                    r.begin().parent()->chars_available() -
 1110|       |                    r.begin().position());
 1111|       |            }
 1112|       |            return r.begin().contiguous_segment().size();
 1113|       |        }
 1114|       |    }
 1115|    256|    else {
 1116|    256|        return 0;
 1117|    256|    }
 1118|    256|}
_ZNK3scn2v44impl16bool_reader_base12read_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5391|    138|    {
 5392|    138|        scan_error err{scan_error::invalid_scanned_value,
 5393|    138|                       "Failed to read boolean"};
 5394|       |
 5395|    138|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5395:13): [True: 120, False: 18]
  ------------------
 5396|    120|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5396:22): [True: 0, False: 120]
  ------------------
 5397|      0|                return *r;
 5398|      0|            }
 5399|    120|            else {
 5400|    120|                err = r.error();
 5401|    120|            }
 5402|    120|        }
 5403|       |
 5404|    138|        if (m_options & allow_text) {
  ------------------
  |  Branch (5404:13): [True: 118, False: 20]
  ------------------
 5405|    118|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5405:22): [True: 0, False: 118]
  ------------------
 5406|      0|                return *r;
 5407|      0|            }
 5408|    118|            else {
 5409|    118|                err = r.error();
 5410|    118|            }
 5411|    118|        }
 5412|       |
 5413|    138|        return unexpected(err);
 5414|    138|    }
_ZNK3scn2v44impl16bool_reader_base20read_textual_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5438|    118|    {
 5439|    118|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5439:18): [True: 0, False: 118]
  ------------------
 5440|      0|            value = true;
 5441|      0|            return *r;
 5442|      0|        }
 5443|    118|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5443:18): [True: 0, False: 118]
  ------------------
 5444|      0|            value = false;
 5445|      0|            return *r;
 5446|      0|        }
 5447|       |
 5448|    118|        return detail::unexpected_scan_error(
 5449|    118|            scan_error::invalid_scanned_value,
 5450|    118|            "Failed to read textual boolean value: No match");
 5451|    118|    }
_ZN3scn2v44impl28read_matching_string_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2293|    236|{
 2294|    236|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|    236|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    236|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    236|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    236|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 56, False: 180]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     56|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     56|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     56|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     56|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     56|    }                                                  \
  |  |  |  | 3939|    236|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    180|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2295|    180|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2296|    180|                    .transform_error(make_eof_parse_error));
 2297|       |
 2298|       |    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2299|       |        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2300|       |        if (SCN_UNLIKELY(sv.view() != str)) {
 2301|       |            return unexpected(parse_error::error);
 2302|       |        }
 2303|       |        return it;
 2304|       |    }
 2305|    180|    else {
 2306|    180|        auto range_it = range.begin();
 2307|    180|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
  ------------------
  |  Branch (2307:28): [True: 180, False: 0]
  ------------------
 2308|    180|            if (SCN_UNLIKELY(*range_it !=
  ------------------
  |  |  865|    180|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 180, False: 0]
  |  |  ------------------
  ------------------
 2309|    180|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2310|    180|                return unexpected(parse_error::error);
 2311|    180|            }
 2312|    180|        }
 2313|      0|        return it;
 2314|    180|    }
 2315|    180|}
_ZNK3scn2v44impl20reader_impl_for_boolIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERbNSL_10locale_refE:
 5553|    382|    {
 5554|    382|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5555|       |
 5556|    382|#if !SCN_DISABLE_LOCALE
 5557|    382|        if (specs.localized) {
  ------------------
  |  Branch (5557:13): [True: 18, False: 364]
  ------------------
 5558|     18|            return rd.read_localized(range, loc, value);
 5559|     18|        }
 5560|    364|#endif
 5561|       |
 5562|    364|        return rd.read_classic(range, value);
 5563|    382|    }
_ZNK3scn2v44impl11bool_readerIwE14read_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refERb:
 5464|     18|    {
 5465|     18|        scan_error err{scan_error::invalid_scanned_value,
 5466|     18|                       "Failed to read boolean"};
 5467|       |
 5468|     18|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5468:13): [True: 16, False: 2]
  ------------------
 5469|     16|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5469:22): [True: 0, False: 16]
  ------------------
 5470|      0|                return *r;
 5471|      0|            }
 5472|     16|            else {
 5473|     16|                err = r.error();
 5474|     16|            }
 5475|     16|        }
 5476|       |
 5477|     18|        if (m_options & allow_text) {
  ------------------
  |  Branch (5477:13): [True: 6, False: 12]
  ------------------
 5478|      6|            auto stdloc = loc.get<std::locale>();
 5479|      6|            const auto& numpunct =
 5480|      6|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5481|      6|            const auto truename = numpunct.truename();
 5482|      6|            const auto falsename = numpunct.falsename();
 5483|       |
 5484|      6|            if (auto r =
  ------------------
  |  Branch (5484:22): [True: 0, False: 6]
  ------------------
 5485|      6|                    read_textual_custom(range, value, truename, falsename)) {
 5486|      0|                return *r;
 5487|      0|            }
 5488|      6|            else {
 5489|      6|                err = r.error();
 5490|      6|            }
 5491|      6|        }
 5492|       |
 5493|     18|        return unexpected(err);
 5494|     18|    }
_ZNK3scn2v44impl11bool_readerIwE19read_textual_customINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNSD_17basic_string_viewIwNSD_11char_traitsIwEEEESP_:
 5504|      6|    {
 5505|      6|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5506|      6|        const auto shorter = std::pair{
 5507|      6|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5507:13): [True: 6, False: 0]
  ------------------
 5508|      6|        const auto longer = std::pair{
 5509|      6|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5509:13): [True: 0, False: 6]
  ------------------
 5510|       |
 5511|      6|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5511:18): [True: 0, False: 6]
  ------------------
 5512|      0|            value = shorter.second;
 5513|      0|            return *r;
 5514|      0|        }
 5515|      6|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5515:18): [True: 0, False: 6]
  ------------------
 5516|      0|            value = longer.second;
 5517|      0|            return *r;
 5518|      0|        }
 5519|       |
 5520|      6|        return detail::unexpected_scan_error(
 5521|      6|            scan_error::invalid_scanned_value,
 5522|      6|            "Failed to read textual boolean: No match");
 5523|      6|    }
_ZN3scn2v44impl20read_matching_stringINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewINDTcl4implISD_EEE4typeENSB_11char_traitsISL_EEEE:
 2278|     12|{
 2279|     12|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|     12|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|     12|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|     12|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2, False: 10]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      2|    }                                                  \
  |  |  |  | 3939|     12|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2280|     10|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2281|     10|                    .transform_error(make_eof_parse_error));
 2282|       |
 2283|     10|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2284|     10|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  865|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10, False: 0]
  |  |  ------------------
  ------------------
 2285|     10|        return unexpected(parse_error::error);
 2286|     10|    }
 2287|      0|    return it;
 2288|     10|}
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIwEENS0_13scan_expectedIS9_EERT_:
 6225|    836|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|    836|                          basic_contiguous_scan_context<char_type>>) {
 6230|    836|            auto rd = make_reader<T, char_type>();
 6231|    836|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|    836|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    836|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 398, False: 438]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    398|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|    398|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    398|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    398|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|    398|    }
  ------------------
 6232|    438|            return impl(rd, range, value);
 6233|       |        }
 6234|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6235|       |            auto rd = make_reader<T, char_type>();
 6236|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6237|       |
 6238|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6239|       |                specs.width != 0) {
 6240|       |                return impl(rd, range, value);
 6241|       |            }
 6242|       |
 6243|       |            auto crange = get_as_contiguous(range);
 6244|       |            SCN_TRY(it, impl(rd, crange, value));
 6245|       |            return ranges::next(range.begin(),
 6246|       |                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|    836|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_wcharIwEESA_wEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6160|    438|    {
 6161|    438|        const bool need_skipped_width =
 6162|    438|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 228, False: 210]
  |  Branch (6162:33): [True: 120, False: 90]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|    438|        auto it = rng.begin();
 6166|    438|        std::ptrdiff_t prefix_width = 0;
 6167|    438|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 122, False: 316]
  ------------------
 6168|    122|            auto max_width_view = take_width(rng, specs.precision);
 6169|    122|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    122|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    122|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    122|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    122|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 122]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    122|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    122|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|    122|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|    122|            it = prefix_result.first.base();
 6172|    122|            prefix_width = prefix_result.second;
 6173|    122|        }
 6174|    316|        else {
 6175|    316|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|    316|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    316|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    316|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    316|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 316]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    316|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    316|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|    316|            std::tie(it, prefix_width) = prefix_result;
 6177|    316|        }
 6178|    438|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|    438|        std::ptrdiff_t value_width = 0;
 6182|    438|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 122, False: 316]
  ------------------
 6183|    122|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 2, False: 120]
  ------------------
 6184|      2|                return detail::unexpected_scan_error(
 6185|      2|                    scan_error::invalid_fill,
 6186|      2|                    "Too many fill characters before value, "
 6187|      2|                    "precision exceeded before reading value");
 6188|      2|            }
 6189|       |
 6190|    120|            const auto initial_width = specs.precision - prefix_width;
 6191|    120|            auto max_width_view =
 6192|    120|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|    120|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    120|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    120|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    120|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    120|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 20, False: 100]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     20|    }                                                  \
  |  |  |  | 3939|    120|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    100|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|    100|            it = w_it.base();
 6195|    100|            value_width = initial_width - w_it.count();
 6196|    100|        }
 6197|    316|        else {
 6198|    316|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|    316|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    316|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    316|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 22, False: 294]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|     22|    }                                                  \
  |  | 3939|    316|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    316|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|    294|                                             specs, value, loc));
 6200|       |
 6201|    294|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 224, False: 70]
  ------------------
 6202|    224|                value_width = calculate_text_width(
 6203|    224|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|    224|                        .view());
 6205|    224|            }
 6206|    294|        }
 6207|       |
 6208|       |        // Read postfix
 6209|    394|        std::ptrdiff_t postfix_width = 0;
 6210|    394|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 394, False: 0]
  ------------------
 6211|    394|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    394|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    394|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    394|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    394|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 394]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    394|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    394|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|    394|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|    394|                                 rd.skip_ws_before_read(), prefix_width,
 6214|    394|                                 value_width));
 6215|    394|            std::tie(it, postfix_width) = postfix_result;
 6216|    394|        }
 6217|       |
 6218|    394|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    394|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    394|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 222, False: 172]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    222|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|    222|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    222|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    222|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|    222|    }
  ------------------
 6219|    394|            specs, prefix_width, value_width, postfix_width));
 6220|    172|        return it;
 6221|    394|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIdEENS0_13scan_expectedIS9_EERT_:
 6225|    876|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|    876|                          basic_contiguous_scan_context<char_type>>) {
 6230|    876|            auto rd = make_reader<T, char_type>();
 6231|    876|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|    876|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    876|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 434, False: 442]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    434|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|    434|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    434|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    434|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|    434|    }
  ------------------
 6232|    442|            return impl(rd, range, value);
 6233|       |        }
 6234|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6235|       |            auto rd = make_reader<T, char_type>();
 6236|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6237|       |
 6238|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6239|       |                specs.width != 0) {
 6240|       |                return impl(rd, range, value);
 6241|       |            }
 6242|       |
 6243|       |            auto crange = get_as_contiguous(range);
 6244|       |            SCN_TRY(it, impl(rd, crange, value));
 6245|       |            return ranges::next(range.begin(),
 6246|       |                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|    876|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6160|    442|    {
 6161|    442|        const bool need_skipped_width =
 6162|    442|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 234, False: 208]
  |  Branch (6162:33): [True: 122, False: 86]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|    442|        auto it = rng.begin();
 6166|    442|        std::ptrdiff_t prefix_width = 0;
 6167|    442|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 126, False: 316]
  ------------------
 6168|    126|            auto max_width_view = take_width(rng, specs.precision);
 6169|    126|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    126|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    126|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    126|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    126|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 126]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    126|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    126|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|    126|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|    126|            it = prefix_result.first.base();
 6172|    126|            prefix_width = prefix_result.second;
 6173|    126|        }
 6174|    316|        else {
 6175|    316|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|    316|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    316|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    316|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    316|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 316]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    316|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    316|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|    316|            std::tie(it, prefix_width) = prefix_result;
 6177|    316|        }
 6178|    442|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|    442|        std::ptrdiff_t value_width = 0;
 6182|    442|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 126, False: 316]
  ------------------
 6183|    126|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 4, False: 122]
  ------------------
 6184|      4|                return detail::unexpected_scan_error(
 6185|      4|                    scan_error::invalid_fill,
 6186|      4|                    "Too many fill characters before value, "
 6187|      4|                    "precision exceeded before reading value");
 6188|      4|            }
 6189|       |
 6190|    122|            const auto initial_width = specs.precision - prefix_width;
 6191|    122|            auto max_width_view =
 6192|    122|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|    122|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    122|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    122|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    122|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    122|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 122, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    122|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    122|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    122|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    122|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    122|    }                                                  \
  |  |  |  | 3939|    122|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|      0|            it = w_it.base();
 6195|      0|            value_width = initial_width - w_it.count();
 6196|      0|        }
 6197|    316|        else {
 6198|    316|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|    316|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    316|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    316|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 316, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    316|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|    316|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    316|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    316|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|    316|    }                                                  \
  |  | 3939|    316|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    316|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|      0|                                             specs, value, loc));
 6200|       |
 6201|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 0, False: 0]
  ------------------
 6202|      0|                value_width = calculate_text_width(
 6203|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|      0|                        .view());
 6205|      0|            }
 6206|      0|        }
 6207|       |
 6208|       |        // Read postfix
 6209|      0|        std::ptrdiff_t postfix_width = 0;
 6210|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 0, False: 0]
  ------------------
 6211|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6214|      0|                                 value_width));
 6215|      0|            std::tie(it, postfix_width) = postfix_result;
 6216|      0|        }
 6217|       |
 6218|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6219|      0|            specs, prefix_width, value_width, postfix_width));
 6220|      0|        return it;
 6221|      0|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIS9_EERT_:
 6225|    836|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|    836|                          basic_contiguous_scan_context<char_type>>) {
 6230|    836|            auto rd = make_reader<T, char_type>();
 6231|    836|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|    836|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    836|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 82, False: 754]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|     82|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|     82|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     82|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     82|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|     82|    }
  ------------------
 6232|    754|            return impl(rd, range, value);
 6233|       |        }
 6234|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6235|       |            auto rd = make_reader<T, char_type>();
 6236|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6237|       |
 6238|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6239|       |                specs.width != 0) {
 6240|       |                return impl(rd, range, value);
 6241|       |            }
 6242|       |
 6243|       |            auto crange = get_as_contiguous(range);
 6244|       |            SCN_TRY(it, impl(rd, crange, value));
 6245|       |            return ranges::next(range.begin(),
 6246|       |                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|    836|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6160|    754|    {
 6161|    754|        const bool need_skipped_width =
 6162|    754|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 272, False: 482]
  |  Branch (6162:33): [True: 260, False: 222]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|    754|        auto it = rng.begin();
 6166|    754|        std::ptrdiff_t prefix_width = 0;
 6167|    754|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 268, False: 486]
  ------------------
 6168|    268|            auto max_width_view = take_width(rng, specs.precision);
 6169|    268|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    268|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    268|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    268|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    268|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 268]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    268|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    268|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|    268|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|    268|            it = prefix_result.first.base();
 6172|    268|            prefix_width = prefix_result.second;
 6173|    268|        }
 6174|    486|        else {
 6175|    486|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|    486|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    486|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    486|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    486|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 486]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    486|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    486|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|    486|            std::tie(it, prefix_width) = prefix_result;
 6177|    486|        }
 6178|    754|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|    754|        std::ptrdiff_t value_width = 0;
 6182|    754|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 268, False: 486]
  ------------------
 6183|    268|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 6, False: 262]
  ------------------
 6184|      6|                return detail::unexpected_scan_error(
 6185|      6|                    scan_error::invalid_fill,
 6186|      6|                    "Too many fill characters before value, "
 6187|      6|                    "precision exceeded before reading value");
 6188|      6|            }
 6189|       |
 6190|    262|            const auto initial_width = specs.precision - prefix_width;
 6191|    262|            auto max_width_view =
 6192|    262|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|    262|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    262|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    262|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    262|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    262|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 66, False: 196]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     66|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     66|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     66|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     66|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     66|    }                                                  \
  |  |  |  | 3939|    262|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    196|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|    196|            it = w_it.base();
 6195|    196|            value_width = initial_width - w_it.count();
 6196|    196|        }
 6197|    486|        else {
 6198|    486|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|    486|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    486|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    486|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 62, False: 424]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|     62|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|     62|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     62|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     62|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|     62|    }                                                  \
  |  | 3939|    486|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    486|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|    424|                                             specs, value, loc));
 6200|       |
 6201|    424|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 252, False: 172]
  ------------------
 6202|    252|                value_width = calculate_text_width(
 6203|    252|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|    252|                        .view());
 6205|    252|            }
 6206|    424|        }
 6207|       |
 6208|       |        // Read postfix
 6209|    620|        std::ptrdiff_t postfix_width = 0;
 6210|    620|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 366, False: 254]
  ------------------
 6211|    366|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    366|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    366|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    366|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    366|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 366]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    366|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    366|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|    366|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|    366|                                 rd.skip_ws_before_read(), prefix_width,
 6214|    366|                                 value_width));
 6215|    366|            std::tie(it, postfix_width) = postfix_result;
 6216|    366|        }
 6217|       |
 6218|    620|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    620|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    620|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 46, False: 574]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|     46|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|     46|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     46|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     46|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|     46|    }
  ------------------
 6219|    620|            specs, prefix_width, value_width, postfix_width));
 6220|    574|        return it;
 6221|    620|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIS9_EERT_:
 6225|    836|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|    836|                          basic_contiguous_scan_context<char_type>>) {
 6230|    836|            auto rd = make_reader<T, char_type>();
 6231|    836|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|    836|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    836|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 82, False: 754]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|     82|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|     82|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     82|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     82|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|     82|    }
  ------------------
 6232|    754|            return impl(rd, range, value);
 6233|       |        }
 6234|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6235|       |            auto rd = make_reader<T, char_type>();
 6236|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6237|       |
 6238|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6239|       |                specs.width != 0) {
 6240|       |                return impl(rd, range, value);
 6241|       |            }
 6242|       |
 6243|       |            auto crange = get_as_contiguous(range);
 6244|       |            SCN_TRY(it, impl(rd, crange, value));
 6245|       |            return ranges::next(range.begin(),
 6246|       |                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|    836|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6160|    754|    {
 6161|    754|        const bool need_skipped_width =
 6162|    754|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 272, False: 482]
  |  Branch (6162:33): [True: 260, False: 222]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|    754|        auto it = rng.begin();
 6166|    754|        std::ptrdiff_t prefix_width = 0;
 6167|    754|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 268, False: 486]
  ------------------
 6168|    268|            auto max_width_view = take_width(rng, specs.precision);
 6169|    268|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    268|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    268|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    268|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    268|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 268]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    268|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    268|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|    268|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|    268|            it = prefix_result.first.base();
 6172|    268|            prefix_width = prefix_result.second;
 6173|    268|        }
 6174|    486|        else {
 6175|    486|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|    486|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    486|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    486|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    486|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 486]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    486|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    486|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|    486|            std::tie(it, prefix_width) = prefix_result;
 6177|    486|        }
 6178|    754|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|    754|        std::ptrdiff_t value_width = 0;
 6182|    754|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 268, False: 486]
  ------------------
 6183|    268|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 6, False: 262]
  ------------------
 6184|      6|                return detail::unexpected_scan_error(
 6185|      6|                    scan_error::invalid_fill,
 6186|      6|                    "Too many fill characters before value, "
 6187|      6|                    "precision exceeded before reading value");
 6188|      6|            }
 6189|       |
 6190|    262|            const auto initial_width = specs.precision - prefix_width;
 6191|    262|            auto max_width_view =
 6192|    262|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|    262|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    262|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    262|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    262|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    262|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 66, False: 196]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     66|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     66|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     66|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     66|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     66|    }                                                  \
  |  |  |  | 3939|    262|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    196|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|    196|            it = w_it.base();
 6195|    196|            value_width = initial_width - w_it.count();
 6196|    196|        }
 6197|    486|        else {
 6198|    486|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|    486|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    486|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    486|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 62, False: 424]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|     62|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|     62|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     62|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     62|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|     62|    }                                                  \
  |  | 3939|    486|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    486|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|    424|                                             specs, value, loc));
 6200|       |
 6201|    424|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 252, False: 172]
  ------------------
 6202|    252|                value_width = calculate_text_width(
 6203|    252|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|    252|                        .view());
 6205|    252|            }
 6206|    424|        }
 6207|       |
 6208|       |        // Read postfix
 6209|    620|        std::ptrdiff_t postfix_width = 0;
 6210|    620|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 366, False: 254]
  ------------------
 6211|    366|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    366|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    366|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    366|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    366|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 366]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    366|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    366|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|    366|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|    366|                                 rd.skip_ws_before_read(), prefix_width,
 6214|    366|                                 value_width));
 6215|    366|            std::tie(it, postfix_width) = postfix_result;
 6216|    366|        }
 6217|       |
 6218|    620|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    620|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    620|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 46, False: 574]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|     46|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|     46|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     46|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     46|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|     46|    }
  ------------------
 6219|    620|            specs, prefix_width, value_width, postfix_width));
 6220|    574|        return it;
 6221|    620|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIS9_EERT_:
 6225|    836|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|    836|                          basic_contiguous_scan_context<char_type>>) {
 6230|    836|            auto rd = make_reader<T, char_type>();
 6231|    836|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|    836|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    836|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 82, False: 754]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|     82|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|     82|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     82|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     82|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|     82|    }
  ------------------
 6232|    754|            return impl(rd, range, value);
 6233|       |        }
 6234|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6235|       |            auto rd = make_reader<T, char_type>();
 6236|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6237|       |
 6238|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6239|       |                specs.width != 0) {
 6240|       |                return impl(rd, range, value);
 6241|       |            }
 6242|       |
 6243|       |            auto crange = get_as_contiguous(range);
 6244|       |            SCN_TRY(it, impl(rd, crange, value));
 6245|       |            return ranges::next(range.begin(),
 6246|       |                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|    836|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6160|    754|    {
 6161|    754|        const bool need_skipped_width =
 6162|    754|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 272, False: 482]
  |  Branch (6162:33): [True: 260, False: 222]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|    754|        auto it = rng.begin();
 6166|    754|        std::ptrdiff_t prefix_width = 0;
 6167|    754|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 268, False: 486]
  ------------------
 6168|    268|            auto max_width_view = take_width(rng, specs.precision);
 6169|    268|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|    268|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    268|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    268|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    268|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 268]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    268|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    268|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|    268|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|    268|            it = prefix_result.first.base();
 6172|    268|            prefix_width = prefix_result.second;
 6173|    268|        }
 6174|    486|        else {
 6175|    486|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|    486|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    486|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    486|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    486|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 486]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    486|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    486|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|    486|            std::tie(it, prefix_width) = prefix_result;
 6177|    486|        }
 6178|    754|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|    754|        std::ptrdiff_t value_width = 0;
 6182|    754|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 268, False: 486]
  ------------------
 6183|    268|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 6, False: 262]
  ------------------
 6184|      6|                return detail::unexpected_scan_error(
 6185|      6|                    scan_error::invalid_fill,
 6186|      6|                    "Too many fill characters before value, "
 6187|      6|                    "precision exceeded before reading value");
 6188|      6|            }
 6189|       |
 6190|    262|            const auto initial_width = specs.precision - prefix_width;
 6191|    262|            auto max_width_view =
 6192|    262|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|    262|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|    262|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    262|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    262|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    262|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 66, False: 196]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     66|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     66|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     66|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     66|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     66|    }                                                  \
  |  |  |  | 3939|    262|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    196|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|    196|            it = w_it.base();
 6195|    196|            value_width = initial_width - w_it.count();
 6196|    196|        }
 6197|    486|        else {
 6198|    486|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|    486|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|    486|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|    486|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 62, False: 424]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|     62|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|     62|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     62|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     62|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|     62|    }                                                  \
  |  | 3939|    486|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|    486|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|    424|                                             specs, value, loc));
 6200|       |
 6201|    424|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 252, False: 172]
  ------------------
 6202|    252|                value_width = calculate_text_width(
 6203|    252|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|    252|                        .view());
 6205|    252|            }
 6206|    424|        }
 6207|       |
 6208|       |        // Read postfix
 6209|    620|        std::ptrdiff_t postfix_width = 0;
 6210|    620|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 366, False: 254]
  ------------------
 6211|    366|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    366|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    366|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    366|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    366|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 366]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    366|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    366|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|    366|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|    366|                                 rd.skip_ws_before_read(), prefix_width,
 6214|    366|                                 value_width));
 6215|    366|            std::tie(it, postfix_width) = postfix_result;
 6216|    366|        }
 6217|       |
 6218|    620|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    620|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    620|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 46, False: 574]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|     46|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|     46|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     46|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     46|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|     46|    }
  ------------------
 6219|    620|            specs, prefix_width, value_width, postfix_width));
 6220|    574|        return it;
 6221|    620|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3542|    632|    {
 3543|    632|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|    632|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    632|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    632|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    632|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 632]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    632|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    632|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|    632|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|       |        if constexpr (!std::is_signed_v<T>) {
 3547|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3548|       |                return detail::unexpected_scan_error(
 3549|       |                    scan_error::invalid_scanned_value,
 3550|       |                    "Unexpected '-' sign when parsing an "
 3551|       |                    "unsigned value");
 3552|       |            }
 3553|       |        }
 3554|       |
 3555|    632|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 632]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  1.26k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|    632|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    632|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    632|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    632|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 632]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    632|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    632|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  1.26k|                parse_integer_digits_without_thsep(
 3562|  1.26k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  1.26k|                    prefix_result.parsed_base));
 3564|       |
 3565|  1.26k|        auto buf = make_contiguous_buffer(
 3566|  1.26k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  1.26k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|    632|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    632|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    632|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    632|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 632, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    632|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    632|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    632|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    632|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    632|    }                                                  \
  |  |  |  | 3939|    632|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|      0|                                    prefix_result.parsed_base));
 3570|       |
 3571|      0|        return ranges::next(prefix_result.iterator,
 3572|      0|                            ranges::distance(buf.view().begin(), result_it));
 3573|  1.26k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3542|    632|    {
 3543|    632|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|    632|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    632|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    632|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    632|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 632]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    632|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    632|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|    632|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|    632|        if constexpr (!std::is_signed_v<T>) {
 3547|    632|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3547:17): [True: 0, False: 632]
  ------------------
 3548|      0|                return detail::unexpected_scan_error(
 3549|      0|                    scan_error::invalid_scanned_value,
 3550|      0|                    "Unexpected '-' sign when parsing an "
 3551|      0|                    "unsigned value");
 3552|      0|            }
 3553|    632|        }
 3554|       |
 3555|    632|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 632]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  1.26k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|    632|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    632|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    632|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    632|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 632]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    632|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    632|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  1.26k|                parse_integer_digits_without_thsep(
 3562|  1.26k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  1.26k|                    prefix_result.parsed_base));
 3564|       |
 3565|  1.26k|        auto buf = make_contiguous_buffer(
 3566|  1.26k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  1.26k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|    632|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    632|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    632|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    632|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 632, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    632|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    632|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    632|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    632|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    632|    }                                                  \
  |  |  |  | 3939|    632|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|      0|                                    prefix_result.parsed_base));
 3570|       |
 3571|      0|        return ranges::next(prefix_result.iterator,
 3572|      0|                            ranges::distance(buf.view().begin(), result_it));
 3573|  1.26k|    }

LLVMFuzzerTestOneInput:
   68|  2.59k|{
   69|  2.59k|    scn::fuzz::run(data, size);
   70|  2.59k|    return 0;
   71|  2.59k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   51|  2.59k|{
   52|  2.59k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (52:9): [True: 0, False: 2.59k]
  |  Branch (52:35): [True: 0, False: 2.59k]
  ------------------
   53|      0|        return;
   54|      0|    }
   55|       |
   56|  2.59k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   57|       |
   58|  2.59k|    run_for_source(sv);
   59|  2.59k|    run_for_source(wsv_reinterpret);
   60|  2.59k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (60:9): [True: 2.59k, False: 0]
  ------------------
   61|  2.59k|        run_for_source(wsv_transcode);
   62|  2.59k|    }
   63|  2.59k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_114run_for_sourceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT_:
   36|  2.59k|{
   37|  2.59k|    using char_type = ranges::range_value_t<Source>;
   38|       |
   39|  2.59k|    run_for_type<char_type>(source);
   40|  2.59k|    run_for_type<int>(source);
   41|  2.59k|    run_for_type<unsigned>(source);
   42|  2.59k|    run_for_type<double>(source);
   43|  2.59k|    run_for_type<bool>(source);
   44|  2.59k|    run_for_type<void*>(source);
   45|  2.59k|    run_for_type<std::string>(source);
   46|  2.59k|    run_for_type<std::wstring>(source);
   47|  2.59k|    run_for_type<std::basic_string_view<char_type>>(source);
   48|  2.59k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIcNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  2.59k|{
   25|  2.59k|    {
   26|  2.59k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  2.59k|    }
   28|  2.59k|    {
   29|  2.59k|        auto _ =
   30|  2.59k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  2.59k|    }
   32|  2.59k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIiNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  2.59k|{
   25|  2.59k|    {
   26|  2.59k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  2.59k|    }
   28|  2.59k|    {
   29|  2.59k|        auto _ =
   30|  2.59k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  2.59k|    }
   32|  2.59k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIjNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  2.59k|{
   25|  2.59k|    {
   26|  2.59k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  2.59k|    }
   28|  2.59k|    {
   29|  2.59k|        auto _ =
   30|  2.59k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  2.59k|    }
   32|  2.59k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIdNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  2.59k|{
   25|  2.59k|    {
   26|  2.59k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  2.59k|    }
   28|  2.59k|    {
   29|  2.59k|        auto _ =
   30|  2.59k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  2.59k|    }
   32|  2.59k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIbNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  2.59k|{
   25|  2.59k|    {
   26|  2.59k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  2.59k|    }
   28|  2.59k|    {
   29|  2.59k|        auto _ =
   30|  2.59k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  2.59k|    }
   32|  2.59k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIPvNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEvRT0_:
   24|  2.59k|{
   25|  2.59k|    {
   26|  2.59k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  2.59k|    }
   28|  2.59k|    {
   29|  2.59k|        auto _ =
   30|  2.59k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  2.59k|    }
   32|  2.59k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_17basic_string_viewIcS6_EEEEvRT0_:
   24|  2.59k|{
   25|  2.59k|    {
   26|  2.59k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  2.59k|    }
   28|  2.59k|    {
   29|  2.59k|        auto _ =
   30|  2.59k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  2.59k|    }
   32|  2.59k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS3_17basic_string_viewIcNS5_IcEEEEEEvRT0_:
   24|  2.59k|{
   25|  2.59k|    {
   26|  2.59k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  2.59k|    }
   28|  2.59k|    {
   29|  2.59k|        auto _ =
   30|  2.59k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  2.59k|    }
   32|  2.59k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEES7_EEvRT0_:
   24|  2.59k|{
   25|  2.59k|    {
   26|  2.59k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  2.59k|    }
   28|  2.59k|    {
   29|  2.59k|        auto _ =
   30|  2.59k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  2.59k|    }
   32|  2.59k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_114run_for_sourceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT_:
   36|  5.18k|{
   37|  5.18k|    using char_type = ranges::range_value_t<Source>;
   38|       |
   39|  5.18k|    run_for_type<char_type>(source);
   40|  5.18k|    run_for_type<int>(source);
   41|  5.18k|    run_for_type<unsigned>(source);
   42|  5.18k|    run_for_type<double>(source);
   43|  5.18k|    run_for_type<bool>(source);
   44|  5.18k|    run_for_type<void*>(source);
   45|  5.18k|    run_for_type<std::string>(source);
   46|  5.18k|    run_for_type<std::wstring>(source);
   47|  5.18k|    run_for_type<std::basic_string_view<char_type>>(source);
   48|  5.18k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIwNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  5.18k|{
   25|  5.18k|    {
   26|  5.18k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  5.18k|    }
   28|  5.18k|    {
   29|  5.18k|        auto _ =
   30|  5.18k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  5.18k|    }
   32|  5.18k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIiNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  5.18k|{
   25|  5.18k|    {
   26|  5.18k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  5.18k|    }
   28|  5.18k|    {
   29|  5.18k|        auto _ =
   30|  5.18k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  5.18k|    }
   32|  5.18k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIjNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  5.18k|{
   25|  5.18k|    {
   26|  5.18k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  5.18k|    }
   28|  5.18k|    {
   29|  5.18k|        auto _ =
   30|  5.18k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  5.18k|    }
   32|  5.18k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIdNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  5.18k|{
   25|  5.18k|    {
   26|  5.18k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  5.18k|    }
   28|  5.18k|    {
   29|  5.18k|        auto _ =
   30|  5.18k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  5.18k|    }
   32|  5.18k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIbNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  5.18k|{
   25|  5.18k|    {
   26|  5.18k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  5.18k|    }
   28|  5.18k|    {
   29|  5.18k|        auto _ =
   30|  5.18k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  5.18k|    }
   32|  5.18k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIPvNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEvRT0_:
   24|  5.18k|{
   25|  5.18k|    {
   26|  5.18k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  5.18k|    }
   28|  5.18k|    {
   29|  5.18k|        auto _ =
   30|  5.18k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  5.18k|    }
   32|  5.18k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_17basic_string_viewIwNS5_IwEEEEEEvRT0_:
   24|  5.18k|{
   25|  5.18k|    {
   26|  5.18k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  5.18k|    }
   28|  5.18k|    {
   29|  5.18k|        auto _ =
   30|  5.18k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  5.18k|    }
   32|  5.18k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS3_17basic_string_viewIwS6_EEEEvRT0_:
   24|  5.18k|{
   25|  5.18k|    {
   26|  5.18k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  5.18k|    }
   28|  5.18k|    {
   29|  5.18k|        auto _ =
   30|  5.18k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  5.18k|    }
   32|  5.18k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEES7_EEvRT0_:
   24|  5.18k|{
   25|  5.18k|    {
   26|  5.18k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  5.18k|    }
   28|  5.18k|    {
   29|  5.18k|        auto _ =
   30|  5.18k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  5.18k|    }
   32|  5.18k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   52|  2.59k|{
   53|  2.59k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  930|  2.59k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.59k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   54|       |
   55|       |    // narrow
   56|  2.59k|    string_buffer.resize(size);
   57|  2.59k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   58|  2.59k|    auto sv = std::string_view{string_buffer};
   59|       |
   60|       |    // wide, bitwise reinterpret
   61|  2.59k|    const auto wsv_reinterpret_size =
   62|  2.59k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (62:9): [True: 92, False: 2.50k]
  ------------------
   63|  2.59k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   64|  2.59k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   65|  2.59k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   66|       |
   67|       |    // wide, transcode to correct encoding (utf16 or utf32)
   68|  2.59k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   69|  2.59k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   70|       |
   71|  2.59k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   72|  2.59k|}

