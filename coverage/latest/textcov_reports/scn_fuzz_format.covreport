_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSL_T0_E_clIccEEDaSL_SV_:
  859|  1.82k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSL_T0_E_clIwcEEDaSL_SV_:
  859|    918|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  859|  4.52k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3806|  18.1M|{
 3807|  18.1M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3807:19): [Folded - Ignored]
  ------------------
 3808|  18.1M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3809|  18.1M|    }
 3810|  18.1M|    else if constexpr (sizeof(U) == 2) {
 3811|  18.1M|        return utf16_code_point_length_by_starting_code_unit(ch);
 3812|  18.1M|    }
 3813|  18.1M|    else {
 3814|       |        // utf-32
 3815|  18.1M|        static_assert(sizeof(U) == 4);
 3816|  18.1M|        SCN_UNUSED(ch);
 3817|  18.1M|        return 1;
 3818|  18.1M|    }
 3819|  18.1M|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3770|  18.1M|{
 3771|  18.1M|    static_assert(sizeof(U8) == 1);
 3772|       |
 3773|  18.1M|    SCN_GCC_COMPAT_PUSH
 3774|  18.1M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3775|  18.1M|    constexpr char lengths[] =
 3776|  18.1M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3777|  18.1M|        "\1\1\1\1\1\1\1\1"
 3778|  18.1M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3779|       |                            // byte
 3780|  18.1M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3781|  18.1M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3782|  18.1M|        "\4";               // highest bits 11110 -> 4-byte cp
 3783|  18.1M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3784|  18.1M|    SCN_GCC_COMPAT_POP
 3785|  18.1M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4012|  16.6M|{
 4013|  16.6M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4013:19): [Folded - Ignored]
  ------------------
 4014|  16.6M|        return decode_utf8_code_point_exhaustive(input);
 4015|  16.6M|    }
 4016|  16.6M|    else if constexpr (sizeof(CharT) == 2) {
 4017|  16.6M|        return decode_utf16_code_point_exhaustive(input);
 4018|  16.6M|    }
 4019|  16.6M|    else {
 4020|  16.6M|        SCN_EXPECT(input.size() == 1);
 4021|  16.6M|        auto cp = static_cast<char32_t>(input.front());
 4022|  16.6M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4023|  16.6M|            return invalid_code_point;
 4024|  16.6M|        }
 4025|  16.6M|        return cp;
 4026|  16.6M|    }
 4027|  16.6M|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3825|  16.6M|{
 3826|  16.6M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  16.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3827|       |
 3828|  16.6M|    const auto is_trailing_code_unit = [](char ch) {
 3829|  16.6M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3830|  16.6M|    };
 3831|       |
 3832|  16.6M|    if (input.size() == 1) {
  ------------------
  |  Branch (3832:9): [True: 14.9M, False: 1.63M]
  ------------------
 3833|  14.9M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3833:13): [True: 192, False: 14.9M]
  ------------------
 3834|    192|            SCN_UNLIKELY_ATTR
 3835|    192|            return invalid_code_point;
 3836|    192|        }
 3837|  14.9M|        return static_cast<char32_t>(input[0]);
 3838|  14.9M|    }
 3839|       |
 3840|  1.63M|    if (input.size() == 2) {
  ------------------
  |  Branch (3840:9): [True: 1.55M, False: 80.5k]
  ------------------
 3841|  1.55M|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3841:13): [True: 78, False: 1.55M]
  ------------------
 3842|     78|            SCN_UNLIKELY_ATTR
 3843|     78|            return invalid_code_point;
 3844|     78|        }
 3845|  1.55M|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3845:13): [True: 32.2k, False: 1.52M]
  ------------------
 3846|  32.2k|            SCN_UNLIKELY_ATTR
 3847|  32.2k|            return invalid_code_point;
 3848|  32.2k|        }
 3849|       |
 3850|  1.52M|        char32_t cp{};
 3851|  1.52M|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3852|  1.52M|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3853|  1.52M|        return cp;
 3854|  1.55M|    }
 3855|       |
 3856|  80.5k|    if (input.size() == 3) {
  ------------------
  |  Branch (3856:9): [True: 59.0k, False: 21.4k]
  ------------------
 3857|  59.0k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3857:13): [True: 18, False: 59.0k]
  ------------------
 3858|     18|            SCN_UNLIKELY_ATTR
 3859|     18|            return invalid_code_point;
 3860|     18|        }
 3861|  59.0k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3861:13): [True: 19.4k, False: 39.5k]
  ------------------
 3862|  59.0k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3862:13): [True: 2.17k, False: 37.3k]
  ------------------
 3863|  21.6k|            SCN_UNLIKELY_ATTR
 3864|  21.6k|            return invalid_code_point;
 3865|  21.6k|        }
 3866|       |
 3867|  37.3k|        char32_t cp{};
 3868|  37.3k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3869|  37.3k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3870|  37.3k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3871|  37.3k|        return cp;
 3872|  59.0k|    }
 3873|       |
 3874|  21.4k|    if (input.size() == 4) {
  ------------------
  |  Branch (3874:9): [True: 21.4k, False: 0]
  ------------------
 3875|  21.4k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3875:13): [True: 0, False: 21.4k]
  ------------------
 3876|      0|            SCN_UNLIKELY_ATTR
 3877|      0|            return invalid_code_point;
 3878|      0|        }
 3879|  21.4k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3879:13): [True: 7.92k, False: 13.5k]
  ------------------
 3880|  7.92k|            SCN_UNLIKELY_ATTR
 3881|  7.92k|            return invalid_code_point;
 3882|  7.92k|        }
 3883|  13.5k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3883:13): [True: 2.68k, False: 10.8k]
  ------------------
 3884|  13.5k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3884:13): [True: 1.11k, False: 9.78k]
  ------------------
 3885|  13.5k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3885:13): [True: 875, False: 8.90k]
  ------------------
 3886|  4.66k|            SCN_UNLIKELY_ATTR
 3887|  4.66k|            return invalid_code_point;
 3888|  4.66k|        }
 3889|       |
 3890|  8.90k|        char32_t cp{};
 3891|  8.90k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3892|  8.90k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3893|  8.90k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3894|  8.90k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3895|  8.90k|        return cp;
 3896|  13.5k|    }
 3897|       |
 3898|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3899|       |    // gcc 7 thinks we'll get here, even when we won't
 3900|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3901|      0|#endif
 3902|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3903|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3828|  1.68M|    const auto is_trailing_code_unit = [](char ch) {
 3829|  1.68M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3830|  1.68M|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3698|  7.87M|{
 3699|  7.87M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3699:19): [Folded - Ignored]
  |  Branch (3699:19): [Folded - Ignored]
  ------------------
 3700|  7.87M|                                          decltype(first), decltype(last)> &&
 3701|  7.87M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3701:19): [Folded - Ignored]
  ------------------
 3702|  7.87M|        return {first, last};
 3703|  7.87M|    }
 3704|  7.87M|    else {
 3705|  7.87M|        return {to_address(first), static_cast<size_t>(std::distance(
 3706|  7.87M|                                       to_address(first), to_address(last)))};
 3707|  7.87M|    }
 3708|  7.87M|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  23.7M|{
  326|  23.7M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  23.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  23.7M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  303|  23.7M|{
  304|  23.7M|    return p;
  305|  23.7M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3729|  5.68M|{
 3730|  5.68M|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (3730:19): [Folded - Ignored]
  |  Branch (3730:19): [Folded - Ignored]
  ------------------
 3731|  5.68M|                      typename std::basic_string_view<CharT>::iterator,
 3732|  5.68M|                      decltype(it)> &&
 3733|  5.68M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3733:19): [Folded - Ignored]
  ------------------
 3734|  5.68M|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  5.68M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3735|  5.68M|        return it;
 3736|  5.68M|    }
 3737|  5.68M|    else {
 3738|  5.68M|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3739|  5.68M|    }
 3740|  5.68M|}
_ZN3scn2v34scanIJcERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8866|  14.8k|{
 8867|  14.8k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  14.8k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  14.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.8k|    static_cast<    \
  |  |  929|  14.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.8k|    static_cast<    \
  |  |  929|  14.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  14.8k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJcEEEDav:
 5395|  29.7k|{
 5396|  29.7k|    detail::check_scan_arg_types<Args...>();
 5397|  29.7k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  29.7k|}
_ZN3scn2v36detail20check_scan_arg_typesIJcEEEvv:
 5134|  29.7k|{
 5135|  29.7k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  29.7k|                  "Scan argument types must be default constructible");
 5137|  29.7k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  29.7k|                  "Scan argument types must be Destructible");
 5139|  29.7k|    static_assert(
 5140|  29.7k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  29.7k|        "Scan argument types must not be references");
 5142|  29.7k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEEC2Ev:
 5348|  29.7k|    {
 5349|  29.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEE12make_argptrsIJcEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  29.7k|    {
 5360|  29.7k|        return {detail::make_arg<
 5361|  29.7k|            kind, Context,
 5362|  29.7k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  29.7k|                                 typename Context::char_type>::value>(args)...};
 5364|  29.7k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE12EcvEEPvRT2_:
 5169|  29.7k|{
 5170|  29.7k|    return make_value<Context>(value).ref_value;
 5171|  29.7k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEcEEDaRT0_:
 5119|  29.7k|{
 5120|  29.7k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  29.7k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  29.7k|                                  needs_context_tag>) {
 5124|  29.7k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  29.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  29.7k|    }
 5126|  29.7k|    else {
 5127|  29.7k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  29.7k|            value, context_tag<Context>{}));
 5129|  29.7k|    }
 5130|  29.7k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERc:
 4987|  29.7k|    {
 4988|  29.7k|        if constexpr (std::is_same_v<char_type, char> &&
  ------------------
  |  Branch (4988:23): [Folded - Ignored]
  |  Branch (4988:23): [Folded - Ignored]
  ------------------
 4989|  29.7k|                      !is_type_disabled<char_type>) {
  ------------------
  |  Branch (4989:23): [Folded - Ignored]
  ------------------
 4990|  29.7k|            return val;
 4991|  29.7k|        }
 4992|  29.7k|        else if constexpr (is_type_disabled<char_type>) {
 4993|  29.7k|            return unscannable_disabled{val};
 4994|  29.7k|        }
 4995|  29.7k|        else {
 4996|  29.7k|            SCN_UNUSED(val);
 4997|  29.7k|            return unscannable_char{};
 4998|  29.7k|        }
 4999|  29.7k|    }
_ZN3scn2v36detail15make_value_implIRcEEDaOT_:
 5088|  29.7k|{
 5089|  29.7k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  29.7k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  29.7k|    constexpr bool scannable_char =
 5093|  29.7k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  29.7k|    static_assert(scannable_char,
 5095|  29.7k|                  "Cannot scan an argument of an unsupported character "
 5096|  29.7k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  29.7k|    constexpr bool scannable_const =
 5099|  29.7k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  29.7k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  29.7k|    constexpr bool scannable_disabled =
 5103|  29.7k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  29.7k|    static_assert(scannable_disabled,
 5105|  29.7k|                  "Cannot scan an argument that has been disabled by "
 5106|  29.7k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  29.7k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  29.7k|    static_assert(
 5110|  29.7k|        scannable,
 5111|  29.7k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  29.7k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  29.7k|    return arg_value{arg};
 5115|  29.7k|}
_ZN3scn2v36detail9arg_valueC2IcEERT_:
 4901|  29.7k|    {
 4902|  29.7k|    }
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESE_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEEEOSA_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8653|   133k|{
 8654|   133k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   133k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8655|   133k|}
_ZN3scn2v36detail13vscan_genericIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS1_22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEEOSB_NS4_IT0_NS5_ISN_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISN_EEEE:
 8590|   133k|{
 8591|   133k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   133k|    auto result = vscan_impl(buffer, format, args);
 8594|   133k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 131k, False: 2.17k]
  |  |  ------------------
  ------------------
 8595|   131k|        return unexpected(result.error());
 8596|   131k|    }
 8597|  2.17k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  2.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   133k|}
_ZN3scn2v36detail16make_scan_bufferINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaRKT_:
 4719|   267k|{
 4720|   267k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|   267k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|   267k|                  "\n"
 4724|   267k|                  "Unsupported range type given as input to a scanning "
 4725|   267k|                  "function.\n"
 4726|   267k|                  "A range needs to have a character type (value type) "
 4727|   267k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|   267k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|   267k|                  "to be included.\n"
 4730|   267k|                  "See the scnlib documentation for more details.");
 4731|   267k|    static_assert(
 4732|   267k|        !std::is_same_v<T, custom_char_traits>,
 4733|   267k|        "\n"
 4734|   267k|        "Unsupported range type given as input to a scanning "
 4735|   267k|        "function.\n"
 4736|   267k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|   267k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|   267k|        "not supported.");
 4739|   267k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|   267k|                  "\n"
 4741|   267k|                  "Unsupported range type given as input to a scanning "
 4742|   267k|                  "function.\n"
 4743|   267k|                  "file_marker_found cannot be used as an "
 4744|   267k|                  "source range type to scn::scan.\n"
 4745|   267k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|   267k|                  "and do not provide an explicit source range, "
 4747|   267k|                  "or use scn::scan with a FILE* directly.");
 4748|   267k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|   267k|                  "\n"
 4750|   267k|                  "Unsupported range type given as input to a scanning "
 4751|   267k|                  "function.\n"
 4752|   267k|                  "In order to be scannable, a range needs to satisfy "
 4753|   267k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|   267k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|   267k|                  "\n"
 4756|   267k|                  "Unsupported range type given as input to a scanning "
 4757|   267k|                  "function.\n"
 4758|   267k|                  "A range needs to model forward_range and have a valid "
 4759|   267k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|   267k|                  "Examples of scannable ranges are std::string, "
 4761|   267k|                  "std::string_view, "
 4762|   267k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|   267k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|   267k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|   267k|}
_ZN3scn2v36detail17_make_scan_buffer4implIcEEDaNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEENS1_12priority_tagILm3EEE:
 4611|   267k|{
 4612|   267k|    if constexpr (is_valid_char_type<CharT>) {
  ------------------
  |  Branch (4612:19): [Folded - Ignored]
  ------------------
 4613|   267k|        return r;
 4614|       |        // return make_string_scan_buffer(r);
 4615|   267k|    }
 4616|   267k|    else {
 4617|   267k|        return invalid_char_type{};
 4618|   267k|    }
 4619|   267k|}
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1597|   806k|    {
 1598|   806k|        return has_value();
 1599|   806k|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  484|  1.61M|    {
  485|  1.61M|        return m_has_value;
  486|  1.61M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1603|   801k|    {
 1604|   801k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   801k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   801k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   801k|        return this->get_unexpected().error();
 1606|   801k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   801k|    {
  468|   801k|        return m_unexpected;
  469|   801k|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  360|  4.88M|    {
  361|  4.88M|        return m_unexpected;
  362|  4.88M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  346|  2.75M|    {
  347|  2.75M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  2.75M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  2.75M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|   263k|    {
 1476|   263k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|   263k|    {
  447|   263k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  355|  2.84M|    {
  356|  2.84M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  2.84M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  2.84M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   267k|    {
 1177|   267k|    }
_ZN3scn2v36detail23make_vscan_result_rangeIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_l:
 5922|  4.35k|{
 5923|  4.35k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|  4.35k|                      ranges::iterator_t<SourceRange>>) {
 5925|  4.35k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|  4.35k|    }
 5927|  4.35k|    else {
 5928|  4.35k|        auto it = ranges::begin(source);
 5929|  4.35k|        while (n > 0) {
 5930|  4.35k|            --n;
 5931|  4.35k|            ++it;
 5932|  4.35k|        }
 5933|  4.35k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|  4.35k|    }
 5935|  4.35k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  4.35k|    {
 2724|  4.35k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  4.35k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  4.35k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  4.35k|    {
 2705|  4.35k|        return decay_copy(t.begin());
 2706|  4.35k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1948|  80.8k|{
 1949|  80.8k|    return SCN_FWD(t);
  ------------------
  |  |  930|  80.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  80.8k|}
_ZN3scn2v36detail27make_vscan_result_range_endINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaRT_:
 5909|  4.35k|{
 5910|  4.35k|    return ranges::end(source);
 5911|  4.35k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  4.35k|    {
 2781|  4.35k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  4.35k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  4.35k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  4.35k|    {
 2763|  4.35k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  4.35k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  4.35k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_LPv0EEET_S6_:
 3315|  2.01M|    {
 3316|  2.01M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1652|  5.51k|    {
 1653|  5.51k|        return value();
 1654|  5.51k|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1626|  5.51k|    {
 1627|  5.51k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  5.51k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.51k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  5.51k|        return this->get_value();
 1629|  5.51k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  450|  5.51k|    {
  451|  5.51k|        return m_value;
  452|  5.51k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|  4.35k|    {
 1430|  4.35k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  436|  4.35k|    {
  437|  4.35k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEcvS6_Ev:
 7974|  29.7k|    {
 7975|  29.7k|        return m_str;
 7976|  29.7k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJcEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  29.7k|    {
 5426|  29.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEE12arg_pointersEv:
 5378|  29.7k|    {
 5379|  29.7k|        return m_argptrs;
 5380|  29.7k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5477|   267k|    {
 5478|   267k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJcEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  29.7k|{
 8820|  29.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  29.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 29.4k, False: 218]
  |  |  ------------------
  ------------------
 8821|  29.4k|        return unexpected(result.error());
 8822|  29.4k|    }
 8823|    218|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    218|    static_cast<    \
  |  |  929|    218|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    218|    static_cast<    \
  |  |  929|    218|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  29.7k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1597|   267k|    {
 1598|   267k|        return has_value();
 1599|   267k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   534k|    {
  485|   534k|        return m_has_value;
  486|   534k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1603|   263k|    {
 1604|   263k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   263k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   263k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   263k|        return this->get_unexpected().error();
 1606|   263k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   263k|    {
  468|   263k|        return m_unexpected;
  469|   263k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  29.4k|    {
 1476|  29.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  29.4k|    {
  447|  29.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  29.7k|    {
 1177|  29.7k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1652|  4.35k|    {
 1653|  4.35k|        return value();
 1654|  4.35k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|  4.35k|    {
 1627|  4.35k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.35k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.35k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.35k|        return this->get_value();
 1629|  4.35k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  4.35k|    {
  451|  4.35k|        return m_value;
  452|  4.35k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJcEEC2ES8_ONSt3__15tupleIJcEEE:
 5829|    218|    {
 5830|    218|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5680|  4.35k|    {
 5681|  4.35k|    }
_ZN3scn2v36detail25scan_result_value_storageIJcEEC2EONSt3__15tupleIJcEEE:
 5615|    218|    {
 5616|    218|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|    218|    {
 1430|    218|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|    218|    {
  437|    218|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEE4argsEv:
 5373|  29.7k|    {
 5374|  29.7k|        return m_args;
 5375|  29.7k|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7690|   267k|{
 7691|   267k|    return s;
 7692|   267k|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7667|   267k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  29.7k|    {
 7971|  29.7k|    }
_ZN3scn2v34scanIJcENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8933|  14.8k|{
 8934|  14.8k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  14.8k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  14.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.8k|    static_cast<    \
  |  |  929|  14.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.8k|    static_cast<    \
  |  |  929|  14.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  14.8k|}
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS2_6localeEvEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEERKT0_OSB_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8671|   133k|{
 8672|   133k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   133k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8673|   133k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS1_22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT_OSC_NS5_IT1_NS6_ISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISR_EEEE:
 8606|   133k|{
 8607|   133k|#if !SCN_DISABLE_LOCALE
 8608|   133k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   133k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   133k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   133k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   133k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 131k, False: 2.17k]
  |  |  ------------------
  ------------------
 8615|   131k|        return unexpected(result.error());
 8616|   131k|    }
 8617|  2.17k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  2.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   133k|}
_ZN3scn2v34scanIJiERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8866|  14.8k|{
 8867|  14.8k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  14.8k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  14.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.8k|    static_cast<    \
  |  |  929|  14.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.8k|    static_cast<    \
  |  |  929|  14.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  14.8k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJiEEEDav:
 5395|  29.7k|{
 5396|  29.7k|    detail::check_scan_arg_types<Args...>();
 5397|  29.7k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  29.7k|}
_ZN3scn2v36detail20check_scan_arg_typesIJiEEEvv:
 5134|  89.1k|{
 5135|  89.1k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  89.1k|                  "Scan argument types must be default constructible");
 5137|  89.1k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  89.1k|                  "Scan argument types must be Destructible");
 5139|  89.1k|    static_assert(
 5140|  89.1k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  89.1k|        "Scan argument types must not be references");
 5142|  89.1k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEEC2Ev:
 5348|  29.7k|    {
 5349|  29.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  29.7k|    {
 5360|  29.7k|        return {detail::make_arg<
 5361|  29.7k|            kind, Context,
 5362|  29.7k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  29.7k|                                 typename Context::char_type>::value>(args)...};
 5364|  29.7k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE3EivEEPvRT2_:
 5169|  29.7k|{
 5170|  29.7k|    return make_value<Context>(value).ref_value;
 5171|  29.7k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEiEEDaRT0_:
 5119|  29.7k|{
 5120|  29.7k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  29.7k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  29.7k|                                  needs_context_tag>) {
 5124|  29.7k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  29.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  29.7k|    }
 5126|  29.7k|    else {
 5127|  29.7k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  29.7k|            value, context_tag<Context>{}));
 5129|  29.7k|    }
 5130|  29.7k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERi:
 4958|  29.7k|    {                                                                        \
 4959|  29.7k|        return val;                                                          \
 4960|  29.7k|    }
_ZN3scn2v36detail15make_value_implIRiEEDaOT_:
 5088|  89.1k|{
 5089|  89.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  89.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  89.1k|    constexpr bool scannable_char =
 5093|  89.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  89.1k|    static_assert(scannable_char,
 5095|  89.1k|                  "Cannot scan an argument of an unsupported character "
 5096|  89.1k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  89.1k|    constexpr bool scannable_const =
 5099|  89.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  89.1k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  89.1k|    constexpr bool scannable_disabled =
 5103|  89.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  89.1k|    static_assert(scannable_disabled,
 5105|  89.1k|                  "Cannot scan an argument that has been disabled by "
 5106|  89.1k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  89.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  89.1k|    static_assert(
 5110|  89.1k|        scannable,
 5111|  89.1k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  89.1k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  89.1k|    return arg_value{arg};
 5115|  89.1k|}
_ZN3scn2v36detail9arg_valueC2IiEERT_:
 4901|  89.1k|    {
 4902|  89.1k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEcvS6_Ev:
 7974|  29.7k|    {
 7975|  29.7k|        return m_str;
 7976|  29.7k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJiEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  29.7k|    {
 5426|  29.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE12arg_pointersEv:
 5378|  29.7k|    {
 5379|  29.7k|        return m_argptrs;
 5380|  29.7k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  29.7k|{
 8820|  29.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  29.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 29.7k, False: 0]
  |  |  ------------------
  ------------------
 8821|  29.7k|        return unexpected(result.error());
 8822|  29.7k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  29.7k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  29.7k|    {
 1476|  29.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  29.7k|    {
  447|  29.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  29.7k|    {
 1177|  29.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE4argsEv:
 5373|  29.7k|    {
 5374|  29.7k|        return m_args;
 5375|  29.7k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  29.7k|    {
 7971|  29.7k|    }
_ZN3scn2v34scanIJiENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8933|  14.8k|{
 8934|  14.8k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  14.8k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  14.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.8k|    static_cast<    \
  |  |  929|  14.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.8k|    static_cast<    \
  |  |  929|  14.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  14.8k|}
_ZN3scn2v34scanIJjERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8866|  14.8k|{
 8867|  14.8k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  14.8k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  14.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.8k|    static_cast<    \
  |  |  929|  14.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.8k|    static_cast<    \
  |  |  929|  14.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  14.8k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJjEEEDav:
 5395|  29.7k|{
 5396|  29.7k|    detail::check_scan_arg_types<Args...>();
 5397|  29.7k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  29.7k|}
_ZN3scn2v36detail20check_scan_arg_typesIJjEEEvv:
 5134|  89.1k|{
 5135|  89.1k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  89.1k|                  "Scan argument types must be default constructible");
 5137|  89.1k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  89.1k|                  "Scan argument types must be Destructible");
 5139|  89.1k|    static_assert(
 5140|  89.1k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  89.1k|        "Scan argument types must not be references");
 5142|  89.1k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEEC2Ev:
 5348|  29.7k|    {
 5349|  29.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  29.7k|    {
 5360|  29.7k|        return {detail::make_arg<
 5361|  29.7k|            kind, Context,
 5362|  29.7k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  29.7k|                                 typename Context::char_type>::value>(args)...};
 5364|  29.7k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE8EjvEEPvRT2_:
 5169|  29.7k|{
 5170|  29.7k|    return make_value<Context>(value).ref_value;
 5171|  29.7k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEjEEDaRT0_:
 5119|  29.7k|{
 5120|  29.7k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  29.7k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  29.7k|                                  needs_context_tag>) {
 5124|  29.7k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  29.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  29.7k|    }
 5126|  29.7k|    else {
 5127|  29.7k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  29.7k|            value, context_tag<Context>{}));
 5129|  29.7k|    }
 5130|  29.7k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERj:
 4958|  29.7k|    {                                                                        \
 4959|  29.7k|        return val;                                                          \
 4960|  29.7k|    }
_ZN3scn2v36detail15make_value_implIRjEEDaOT_:
 5088|  89.1k|{
 5089|  89.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  89.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  89.1k|    constexpr bool scannable_char =
 5093|  89.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  89.1k|    static_assert(scannable_char,
 5095|  89.1k|                  "Cannot scan an argument of an unsupported character "
 5096|  89.1k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  89.1k|    constexpr bool scannable_const =
 5099|  89.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  89.1k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  89.1k|    constexpr bool scannable_disabled =
 5103|  89.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  89.1k|    static_assert(scannable_disabled,
 5105|  89.1k|                  "Cannot scan an argument that has been disabled by "
 5106|  89.1k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  89.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  89.1k|    static_assert(
 5110|  89.1k|        scannable,
 5111|  89.1k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  89.1k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  89.1k|    return arg_value{arg};
 5115|  89.1k|}
_ZN3scn2v36detail9arg_valueC2IjEERT_:
 4901|  89.1k|    {
 4902|  89.1k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEcvS6_Ev:
 7974|  29.7k|    {
 7975|  29.7k|        return m_str;
 7976|  29.7k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJjEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  29.7k|    {
 5426|  29.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE12arg_pointersEv:
 5378|  29.7k|    {
 5379|  29.7k|        return m_argptrs;
 5380|  29.7k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  29.7k|{
 8820|  29.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  29.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 29.7k, False: 0]
  |  |  ------------------
  ------------------
 8821|  29.7k|        return unexpected(result.error());
 8822|  29.7k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  29.7k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  29.7k|    {
 1476|  29.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  29.7k|    {
  447|  29.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  29.7k|    {
 1177|  29.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE4argsEv:
 5373|  29.7k|    {
 5374|  29.7k|        return m_args;
 5375|  29.7k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  29.7k|    {
 7971|  29.7k|    }
_ZN3scn2v34scanIJjENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8933|  14.8k|{
 8934|  14.8k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  14.8k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  14.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.8k|    static_cast<    \
  |  |  929|  14.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.8k|    static_cast<    \
  |  |  929|  14.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  14.8k|}
_ZN3scn2v34scanIJdERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8866|  14.8k|{
 8867|  14.8k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  14.8k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  14.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.8k|    static_cast<    \
  |  |  929|  14.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.8k|    static_cast<    \
  |  |  929|  14.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  14.8k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJdEEEDav:
 5395|  29.7k|{
 5396|  29.7k|    detail::check_scan_arg_types<Args...>();
 5397|  29.7k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  29.7k|}
_ZN3scn2v36detail20check_scan_arg_typesIJdEEEvv:
 5134|  89.1k|{
 5135|  89.1k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  89.1k|                  "Scan argument types must be default constructible");
 5137|  89.1k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  89.1k|                  "Scan argument types must be Destructible");
 5139|  89.1k|    static_assert(
 5140|  89.1k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  89.1k|        "Scan argument types must not be references");
 5142|  89.1k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEEC2Ev:
 5348|  29.7k|    {
 5349|  29.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  29.7k|    {
 5360|  29.7k|        return {detail::make_arg<
 5361|  29.7k|            kind, Context,
 5362|  29.7k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  29.7k|                                 typename Context::char_type>::value>(args)...};
 5364|  29.7k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE17EdvEEPvRT2_:
 5169|  29.7k|{
 5170|  29.7k|    return make_value<Context>(value).ref_value;
 5171|  29.7k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEdEEDaRT0_:
 5119|  29.7k|{
 5120|  29.7k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  29.7k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  29.7k|                                  needs_context_tag>) {
 5124|  29.7k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  29.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  29.7k|    }
 5126|  29.7k|    else {
 5127|  29.7k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  29.7k|            value, context_tag<Context>{}));
 5129|  29.7k|    }
 5130|  29.7k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERd:
 4958|  29.7k|    {                                                                        \
 4959|  29.7k|        return val;                                                          \
 4960|  29.7k|    }
_ZN3scn2v36detail15make_value_implIRdEEDaOT_:
 5088|  89.1k|{
 5089|  89.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  89.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  89.1k|    constexpr bool scannable_char =
 5093|  89.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  89.1k|    static_assert(scannable_char,
 5095|  89.1k|                  "Cannot scan an argument of an unsupported character "
 5096|  89.1k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  89.1k|    constexpr bool scannable_const =
 5099|  89.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  89.1k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  89.1k|    constexpr bool scannable_disabled =
 5103|  89.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  89.1k|    static_assert(scannable_disabled,
 5105|  89.1k|                  "Cannot scan an argument that has been disabled by "
 5106|  89.1k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  89.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  89.1k|    static_assert(
 5110|  89.1k|        scannable,
 5111|  89.1k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  89.1k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  89.1k|    return arg_value{arg};
 5115|  89.1k|}
_ZN3scn2v36detail9arg_valueC2IdEERT_:
 4901|  89.1k|    {
 4902|  89.1k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEcvS6_Ev:
 7974|  29.7k|    {
 7975|  29.7k|        return m_str;
 7976|  29.7k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  29.7k|    {
 5426|  29.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12arg_pointersEv:
 5378|  29.7k|    {
 5379|  29.7k|        return m_argptrs;
 5380|  29.7k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  29.7k|{
 8820|  29.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  29.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 29.7k, False: 0]
  |  |  ------------------
  ------------------
 8821|  29.7k|        return unexpected(result.error());
 8822|  29.7k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  29.7k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  29.7k|    {
 1476|  29.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  29.7k|    {
  447|  29.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  29.7k|    {
 1177|  29.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE4argsEv:
 5373|  29.7k|    {
 5374|  29.7k|        return m_args;
 5375|  29.7k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  29.7k|    {
 7971|  29.7k|    }
_ZN3scn2v34scanIJdENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8933|  14.8k|{
 8934|  14.8k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  14.8k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  14.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.8k|    static_cast<    \
  |  |  929|  14.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.8k|    static_cast<    \
  |  |  929|  14.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  14.8k|}
_ZN3scn2v34scanIJbERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8866|  14.8k|{
 8867|  14.8k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  14.8k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  14.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.8k|    static_cast<    \
  |  |  929|  14.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.8k|    static_cast<    \
  |  |  929|  14.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  14.8k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJbEEEDav:
 5395|  29.7k|{
 5396|  29.7k|    detail::check_scan_arg_types<Args...>();
 5397|  29.7k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  29.7k|}
_ZN3scn2v36detail20check_scan_arg_typesIJbEEEvv:
 5134|  89.1k|{
 5135|  89.1k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  89.1k|                  "Scan argument types must be default constructible");
 5137|  89.1k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  89.1k|                  "Scan argument types must be Destructible");
 5139|  89.1k|    static_assert(
 5140|  89.1k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  89.1k|        "Scan argument types must not be references");
 5142|  89.1k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEEC2Ev:
 5348|  29.7k|    {
 5349|  29.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEE12make_argptrsIJbEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  29.7k|    {
 5360|  29.7k|        return {detail::make_arg<
 5361|  29.7k|            kind, Context,
 5362|  29.7k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  29.7k|                                 typename Context::char_type>::value>(args)...};
 5364|  29.7k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE11EbvEEPvRT2_:
 5169|  29.7k|{
 5170|  29.7k|    return make_value<Context>(value).ref_value;
 5171|  29.7k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEbEEDaRT0_:
 5119|  29.7k|{
 5120|  29.7k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  29.7k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  29.7k|                                  needs_context_tag>) {
 5124|  29.7k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  29.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  29.7k|    }
 5126|  29.7k|    else {
 5127|  29.7k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  29.7k|            value, context_tag<Context>{}));
 5129|  29.7k|    }
 5130|  29.7k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERb:
 4958|  29.7k|    {                                                                        \
 4959|  29.7k|        return val;                                                          \
 4960|  29.7k|    }
_ZN3scn2v36detail15make_value_implIRbEEDaOT_:
 5088|  89.1k|{
 5089|  89.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  89.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  89.1k|    constexpr bool scannable_char =
 5093|  89.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  89.1k|    static_assert(scannable_char,
 5095|  89.1k|                  "Cannot scan an argument of an unsupported character "
 5096|  89.1k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  89.1k|    constexpr bool scannable_const =
 5099|  89.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  89.1k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  89.1k|    constexpr bool scannable_disabled =
 5103|  89.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  89.1k|    static_assert(scannable_disabled,
 5105|  89.1k|                  "Cannot scan an argument that has been disabled by "
 5106|  89.1k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  89.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  89.1k|    static_assert(
 5110|  89.1k|        scannable,
 5111|  89.1k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  89.1k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  89.1k|    return arg_value{arg};
 5115|  89.1k|}
_ZN3scn2v36detail9arg_valueC2IbEERT_:
 4901|  89.1k|    {
 4902|  89.1k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEcvS6_Ev:
 7974|  29.7k|    {
 7975|  29.7k|        return m_str;
 7976|  29.7k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJbEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  29.7k|    {
 5426|  29.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEE12arg_pointersEv:
 5378|  29.7k|    {
 5379|  29.7k|        return m_argptrs;
 5380|  29.7k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJbEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  29.7k|{
 8820|  29.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  29.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 29.7k, False: 0]
  |  |  ------------------
  ------------------
 8821|  29.7k|        return unexpected(result.error());
 8822|  29.7k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  29.7k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  29.7k|    {
 1476|  29.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  29.7k|    {
  447|  29.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  29.7k|    {
 1177|  29.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEE4argsEv:
 5373|  29.7k|    {
 5374|  29.7k|        return m_args;
 5375|  29.7k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  29.7k|    {
 7971|  29.7k|    }
_ZN3scn2v34scanIJbENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8933|  14.8k|{
 8934|  14.8k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  14.8k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  14.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.8k|    static_cast<    \
  |  |  929|  14.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.8k|    static_cast<    \
  |  |  929|  14.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  14.8k|}
_ZN3scn2v34scanIJPvERNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
 8866|  14.8k|{
 8867|  14.8k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  14.8k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  14.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.8k|    static_cast<    \
  |  |  929|  14.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.8k|    static_cast<    \
  |  |  929|  14.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  14.8k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJPvEEEDav:
 5395|  29.7k|{
 5396|  29.7k|    detail::check_scan_arg_types<Args...>();
 5397|  29.7k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  29.7k|}
_ZN3scn2v36detail20check_scan_arg_typesIJPvEEEvv:
 5134|  89.1k|{
 5135|  89.1k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  89.1k|                  "Scan argument types must be default constructible");
 5137|  89.1k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  89.1k|                  "Scan argument types must be Destructible");
 5139|  89.1k|    static_assert(
 5140|  89.1k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  89.1k|        "Scan argument types must not be references");
 5142|  89.1k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEEC2Ev:
 5348|  29.7k|    {
 5349|  29.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEE12make_argptrsIJS5_EEENSt3__15arrayIS5_Lm1EEEDpRT_:
 5359|  29.7k|    {
 5360|  29.7k|        return {detail::make_arg<
 5361|  29.7k|            kind, Context,
 5362|  29.7k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  29.7k|                                 typename Context::char_type>::value>(args)...};
 5364|  29.7k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE15EPvvEES7_RT2_:
 5169|  29.7k|{
 5170|  29.7k|    return make_value<Context>(value).ref_value;
 5171|  29.7k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEPvEEDaRT0_:
 5119|  29.7k|{
 5120|  29.7k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  29.7k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  29.7k|                                  needs_context_tag>) {
 5124|  29.7k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  29.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  29.7k|    }
 5126|  29.7k|    else {
 5127|  29.7k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  29.7k|            value, context_tag<Context>{}));
 5129|  29.7k|    }
 5130|  29.7k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERPv:
 4958|  29.7k|    {                                                                        \
 4959|  29.7k|        return val;                                                          \
 4960|  29.7k|    }
_ZN3scn2v36detail15make_value_implIRPvEEDaOT_:
 5088|  89.1k|{
 5089|  89.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  89.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  89.1k|    constexpr bool scannable_char =
 5093|  89.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  89.1k|    static_assert(scannable_char,
 5095|  89.1k|                  "Cannot scan an argument of an unsupported character "
 5096|  89.1k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  89.1k|    constexpr bool scannable_const =
 5099|  89.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  89.1k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  89.1k|    constexpr bool scannable_disabled =
 5103|  89.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  89.1k|    static_assert(scannable_disabled,
 5105|  89.1k|                  "Cannot scan an argument that has been disabled by "
 5106|  89.1k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  89.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  89.1k|    static_assert(
 5110|  89.1k|        scannable,
 5111|  89.1k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  89.1k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  89.1k|    return arg_value{arg};
 5115|  89.1k|}
_ZN3scn2v36detail9arg_valueC2IPvEERT_:
 4901|  89.1k|    {
 4902|  89.1k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEcvS6_Ev:
 7974|  29.7k|    {
 7975|  29.7k|        return m_str;
 7976|  29.7k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJPvEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  29.7k|    {
 5426|  29.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEE12arg_pointersEv:
 5378|  29.7k|    {
 5379|  29.7k|        return m_argptrs;
 5380|  29.7k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJPvEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSA_ISC_EEONSt3__15tupleIJSE_EEE:
 8819|  29.7k|{
 8820|  29.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  29.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 29.7k, False: 0]
  |  |  ------------------
  ------------------
 8821|  29.7k|        return unexpected(result.error());
 8822|  29.7k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  29.7k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEEC2ISC_LSA_0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  29.7k|    {
 1476|  29.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  446|  29.7k|    {
  447|  29.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  29.7k|    {
 1177|  29.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEE4argsEv:
 5373|  29.7k|    {
 5374|  29.7k|        return m_args;
 5375|  29.7k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  29.7k|    {
 7971|  29.7k|    }
_ZN3scn2v34scanIJPvENSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
 8933|  14.8k|{
 8934|  14.8k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  14.8k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  14.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.8k|    static_cast<    \
  |  |  929|  14.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.8k|    static_cast<    \
  |  |  929|  14.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  14.8k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEERNS2_17basic_string_viewIcS5_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEEOSF_NS0_24basic_scan_format_stringIcNSK_13type_identityISF_E4typeEJDpNSW_ISQ_E4typeEEEE:
 8866|  14.8k|{
 8867|  14.8k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  14.8k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  14.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.8k|    static_cast<    \
  |  |  929|  14.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.8k|    static_cast<    \
  |  |  929|  14.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  14.8k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEDav:
 5395|  29.7k|{
 5396|  29.7k|    detail::check_scan_arg_types<Args...>();
 5397|  29.7k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  29.7k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEvv:
 5134|  89.1k|{
 5135|  89.1k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  89.1k|                  "Scan argument types must be default constructible");
 5137|  89.1k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  89.1k|                  "Scan argument types must be Destructible");
 5139|  89.1k|    static_assert(
 5140|  89.1k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  89.1k|        "Scan argument types must not be references");
 5142|  89.1k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEC2Ev:
 5348|  29.7k|    {
 5349|  29.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  29.7k|    {
 5360|  29.7k|        return {detail::make_arg<
 5361|  29.7k|            kind, Context,
 5362|  29.7k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  29.7k|                                 typename Context::char_type>::value>(args)...};
 5364|  29.7k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEvEEPvRT2_:
 5169|  29.7k|{
 5170|  29.7k|    return make_value<Context>(value).ref_value;
 5171|  29.7k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDaRT0_:
 5119|  29.7k|{
 5120|  29.7k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  29.7k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  29.7k|                                  needs_context_tag>) {
 5124|  29.7k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  29.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  29.7k|    }
 5126|  29.7k|    else {
 5127|  29.7k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  29.7k|            value, context_tag<Context>{}));
 5129|  29.7k|    }
 5130|  29.7k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 4958|  29.7k|    {                                                                        \
 4959|  29.7k|        return val;                                                          \
 4960|  29.7k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEDaOT_:
 5088|  89.1k|{
 5089|  89.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  89.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  89.1k|    constexpr bool scannable_char =
 5093|  89.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  89.1k|    static_assert(scannable_char,
 5095|  89.1k|                  "Cannot scan an argument of an unsupported character "
 5096|  89.1k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  89.1k|    constexpr bool scannable_const =
 5099|  89.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  89.1k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  89.1k|    constexpr bool scannable_disabled =
 5103|  89.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  89.1k|    static_assert(scannable_disabled,
 5105|  89.1k|                  "Cannot scan an argument that has been disabled by "
 5106|  89.1k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  89.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  89.1k|    static_assert(
 5110|  89.1k|        scannable,
 5111|  89.1k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  89.1k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  89.1k|    return arg_value{arg};
 5115|  89.1k|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERT_:
 4901|  89.1k|    {
 4902|  89.1k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEcvS6_Ev:
 7974|  29.7k|    {
 7975|  29.7k|        return m_str;
 7976|  29.7k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  29.7k|    {
 5426|  29.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12arg_pointersEv:
 5378|  29.7k|    {
 5379|  29.7k|        return m_argptrs;
 5380|  29.7k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8819|  29.7k|{
 8820|  29.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  29.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.3k, False: 1.37k]
  |  |  ------------------
  ------------------
 8821|  28.3k|        return unexpected(result.error());
 8822|  28.3k|    }
 8823|  1.37k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  1.37k|    static_cast<    \
  |  |  929|  1.37k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  1.37k|    static_cast<    \
  |  |  929|  1.37k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  29.7k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1475|  28.3k|    {
 1476|  28.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  625|  28.3k|    {
  626|  28.3k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  28.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  28.3k|    {
  689|  28.3k|        scn::detail::construct_at(unexpected_ptr(),
  690|  28.3k|                                  std::forward<Args>(args)...);
  691|  28.3k|        m_has_value = false;
  692|  28.3k|    }
_ZN3scn2v36detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  391|   175k|{
  392|   175k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|   175k|        T(std::forward<Args>(args)...);
  394|   175k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  56.6k|    {
  718|  56.6k|        return reinterpret_cast<unexpected<E>*>(
  719|  56.6k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  56.6k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  56.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  29.7k|    {
 1177|  29.7k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5829|  1.37k|    {
 5830|  1.37k|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEC2EONS3_5tupleIJS9_EEE:
 5615|  1.73k|    {
 5616|  1.73k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|  1.37k|    {
 1430|  1.37k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  615|  1.37k|    {
  616|  1.37k|        construct(std::forward<Args>(args)...);
  617|  1.37k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|  1.37k|    {
  682|  1.37k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|  1.37k|        m_has_value = true;
  684|  1.37k|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|  1.37k|{
  392|  1.37k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  1.37k|        T(std::forward<Args>(args)...);
  394|  1.37k|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2EOSG_:
 5821|  1.37k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  2.75k|    {
  706|  2.75k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  2.75k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  2.75k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 5825|  2.75k|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE4argsEv:
 5373|  29.7k|    {
 5374|  29.7k|        return m_args;
 5375|  29.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEED2Ev:
 5370|  29.7k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  29.7k|    {
 7971|  29.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  29.7k|    {
  631|  29.7k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 1.37k, False: 28.3k]
  ------------------
  632|  1.37k|            destroy_value();
  633|  1.37k|        }
  634|  28.3k|        else {
  635|  28.3k|            destroy_unexpected();
  636|  28.3k|        }
  637|  29.7k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  29.7k|    {
  675|  29.7k|        return m_has_value;
  676|  29.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|  1.37k|    {
  696|  1.37k|        scn::detail::destroy_at(value_ptr());
  697|  1.37k|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  397|  1.37k|{
  398|  1.37k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|  1.37k|        for (auto& elem : *p) {
  400|  1.37k|            scn::detail::destroy_at(&elem);
  401|  1.37k|        }
  402|  1.37k|    }
  403|  1.37k|    else {
  404|  1.37k|        p->~T();
  405|  1.37k|    }
  406|  1.37k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  28.3k|    {
  700|  28.3k|        scn::detail::destroy_at(unexpected_ptr());
  701|  28.3k|    }
_ZN3scn2v36detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  397|   175k|{
  398|   175k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|   175k|        for (auto& elem : *p) {
  400|   175k|            scn::detail::destroy_at(&elem);
  401|   175k|        }
  402|   175k|    }
  403|   175k|    else {
  404|   175k|        p->~T();
  405|   175k|    }
  406|   175k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeERNS2_17basic_string_viewIcS5_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEERKT0_OSG_NS0_24basic_scan_format_stringIcNSL_13type_identityISG_E4typeEJDpNS10_ISR_E4typeEEEE:
 8933|  14.8k|{
 8934|  14.8k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  14.8k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  14.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.8k|    static_cast<    \
  |  |  929|  14.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.8k|    static_cast<    \
  |  |  929|  14.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  14.8k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEERNS2_17basic_string_viewIcNS4_IcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNSL_13type_identityISG_E4typeEJDpNSX_ISR_E4typeEEEE:
 8866|  14.8k|{
 8867|  14.8k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  14.8k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  14.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.8k|    static_cast<    \
  |  |  929|  14.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.8k|    static_cast<    \
  |  |  929|  14.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  14.8k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEEDav:
 5395|  29.7k|{
 5396|  29.7k|    detail::check_scan_arg_types<Args...>();
 5397|  29.7k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  29.7k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEEvv:
 5134|  89.1k|{
 5135|  89.1k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  89.1k|                  "Scan argument types must be default constructible");
 5137|  89.1k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  89.1k|                  "Scan argument types must be Destructible");
 5139|  89.1k|    static_assert(
 5140|  89.1k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  89.1k|        "Scan argument types must not be references");
 5142|  89.1k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEC2Ev:
 5348|  29.7k|    {
 5349|  29.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  29.7k|    {
 5360|  29.7k|        return {detail::make_arg<
 5361|  29.7k|            kind, Context,
 5362|  29.7k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  29.7k|                                 typename Context::char_type>::value>(args)...};
 5364|  29.7k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEvEEPvRT2_:
 5169|  29.7k|{
 5170|  29.7k|    return make_value<Context>(value).ref_value;
 5171|  29.7k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEDaRT0_:
 5119|  29.7k|{
 5120|  29.7k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  29.7k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  29.7k|                                  needs_context_tag>) {
 5124|  29.7k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  29.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  29.7k|    }
 5126|  29.7k|    else {
 5127|  29.7k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  29.7k|            value, context_tag<Context>{}));
 5129|  29.7k|    }
 5130|  29.7k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 4958|  29.7k|    {                                                                        \
 4959|  29.7k|        return val;                                                          \
 4960|  29.7k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEDaOT_:
 5088|  89.1k|{
 5089|  89.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  89.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  89.1k|    constexpr bool scannable_char =
 5093|  89.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  89.1k|    static_assert(scannable_char,
 5095|  89.1k|                  "Cannot scan an argument of an unsupported character "
 5096|  89.1k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  89.1k|    constexpr bool scannable_const =
 5099|  89.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  89.1k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  89.1k|    constexpr bool scannable_disabled =
 5103|  89.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  89.1k|    static_assert(scannable_disabled,
 5105|  89.1k|                  "Cannot scan an argument that has been disabled by "
 5106|  89.1k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  89.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  89.1k|    static_assert(
 5110|  89.1k|        scannable,
 5111|  89.1k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  89.1k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  89.1k|    return arg_value{arg};
 5115|  89.1k|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEERT_:
 4901|  89.1k|    {
 4902|  89.1k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEcvS6_Ev:
 7974|  29.7k|    {
 7975|  29.7k|        return m_str;
 7976|  29.7k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  29.7k|    {
 5426|  29.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12arg_pointersEv:
 5378|  29.7k|    {
 5379|  29.7k|        return m_argptrs;
 5380|  29.7k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8819|  29.7k|{
 8820|  29.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  29.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.3k, False: 1.37k]
  |  |  ------------------
  ------------------
 8821|  28.3k|        return unexpected(result.error());
 8822|  28.3k|    }
 8823|  1.37k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  1.37k|    static_cast<    \
  |  |  929|  1.37k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  1.37k|    static_cast<    \
  |  |  929|  1.37k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  29.7k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1475|  28.3k|    {
 1476|  28.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  625|  28.3k|    {
  626|  28.3k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  28.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  28.3k|    {
  689|  28.3k|        scn::detail::construct_at(unexpected_ptr(),
  690|  28.3k|                                  std::forward<Args>(args)...);
  691|  28.3k|        m_has_value = false;
  692|  28.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  56.6k|    {
  718|  56.6k|        return reinterpret_cast<unexpected<E>*>(
  719|  56.6k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  56.6k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  56.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  29.7k|    {
 1177|  29.7k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5829|  1.37k|    {
 5830|  1.37k|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEC2EONS3_5tupleIJS9_EEE:
 5615|  1.73k|    {
 5616|  1.73k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|  1.37k|    {
 1430|  1.37k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  615|  1.37k|    {
  616|  1.37k|        construct(std::forward<Args>(args)...);
  617|  1.37k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|  1.37k|    {
  682|  1.37k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|  1.37k|        m_has_value = true;
  684|  1.37k|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|  1.37k|{
  392|  1.37k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  1.37k|        T(std::forward<Args>(args)...);
  394|  1.37k|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2EOSG_:
 5821|  1.37k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  2.75k|    {
  706|  2.75k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  2.75k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  2.75k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 5825|  2.75k|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE4argsEv:
 5373|  29.7k|    {
 5374|  29.7k|        return m_args;
 5375|  29.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEED2Ev:
 5370|  29.7k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  29.7k|    {
 7971|  29.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  29.7k|    {
  631|  29.7k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 1.37k, False: 28.3k]
  ------------------
  632|  1.37k|            destroy_value();
  633|  1.37k|        }
  634|  28.3k|        else {
  635|  28.3k|            destroy_unexpected();
  636|  28.3k|        }
  637|  29.7k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  29.7k|    {
  675|  29.7k|        return m_has_value;
  676|  29.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|  1.37k|    {
  696|  1.37k|        scn::detail::destroy_at(value_ptr());
  697|  1.37k|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  397|  1.37k|{
  398|  1.37k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|  1.37k|        for (auto& elem : *p) {
  400|  1.37k|            scn::detail::destroy_at(&elem);
  401|  1.37k|        }
  402|  1.37k|    }
  403|  1.37k|    else {
  404|  1.37k|        p->~T();
  405|  1.37k|    }
  406|  1.37k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  28.3k|    {
  700|  28.3k|        scn::detail::destroy_at(unexpected_ptr());
  701|  28.3k|    }
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeERNS2_17basic_string_viewIcNS4_IcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNSM_13type_identityISH_E4typeEJDpNS11_ISS_E4typeEEEE:
 8933|  14.8k|{
 8934|  14.8k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  14.8k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  14.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.8k|    static_cast<    \
  |  |  929|  14.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.8k|    static_cast<    \
  |  |  929|  14.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  14.8k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEERS6_vEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8866|  14.8k|{
 8867|  14.8k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  14.8k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  14.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.8k|    static_cast<    \
  |  |  929|  14.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.8k|    static_cast<    \
  |  |  929|  14.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  14.8k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEEDav:
 5395|  29.7k|{
 5396|  29.7k|    detail::check_scan_arg_types<Args...>();
 5397|  29.7k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  29.7k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEEvv:
 5134|  29.7k|{
 5135|  29.7k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  29.7k|                  "Scan argument types must be default constructible");
 5137|  29.7k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  29.7k|                  "Scan argument types must be Destructible");
 5139|  29.7k|    static_assert(
 5140|  29.7k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  29.7k|        "Scan argument types must not be references");
 5142|  29.7k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEC2Ev:
 5348|  29.7k|    {
 5349|  29.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  29.7k|    {
 5360|  29.7k|        return {detail::make_arg<
 5361|  29.7k|            kind, Context,
 5362|  29.7k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  29.7k|                                 typename Context::char_type>::value>(args)...};
 5364|  29.7k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE19ENSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEvEEPvRT2_:
 5169|  29.7k|{
 5170|  29.7k|    return make_value<Context>(value).ref_value;
 5171|  29.7k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDaRT0_:
 5119|  29.7k|{
 5120|  29.7k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  29.7k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  29.7k|                                  needs_context_tag>) {
 5124|  29.7k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  29.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  29.7k|    }
 5126|  29.7k|    else {
 5127|  29.7k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  29.7k|            value, context_tag<Context>{}));
 5129|  29.7k|    }
 5130|  29.7k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 4958|  29.7k|    {                                                                        \
 4959|  29.7k|        return val;                                                          \
 4960|  29.7k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 5088|  29.7k|{
 5089|  29.7k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  29.7k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  29.7k|    constexpr bool scannable_char =
 5093|  29.7k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  29.7k|    static_assert(scannable_char,
 5095|  29.7k|                  "Cannot scan an argument of an unsupported character "
 5096|  29.7k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  29.7k|    constexpr bool scannable_const =
 5099|  29.7k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  29.7k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  29.7k|    constexpr bool scannable_disabled =
 5103|  29.7k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  29.7k|    static_assert(scannable_disabled,
 5105|  29.7k|                  "Cannot scan an argument that has been disabled by "
 5106|  29.7k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  29.7k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  29.7k|    static_assert(
 5110|  29.7k|        scannable,
 5111|  29.7k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  29.7k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  29.7k|    return arg_value{arg};
 5115|  29.7k|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEERT_:
 4901|  29.7k|    {
 4902|  29.7k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEcvS6_Ev:
 7974|  29.7k|    {
 7975|  29.7k|        return m_str;
 7976|  29.7k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  29.7k|    {
 5426|  29.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12arg_pointersEv:
 5378|  29.7k|    {
 5379|  29.7k|        return m_argptrs;
 5380|  29.7k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8819|  29.7k|{
 8820|  29.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  29.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.3k, False: 1.37k]
  |  |  ------------------
  ------------------
 8821|  28.3k|        return unexpected(result.error());
 8822|  28.3k|    }
 8823|  1.37k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  1.37k|    static_cast<    \
  |  |  929|  1.37k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  1.37k|    static_cast<    \
  |  |  929|  1.37k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  29.7k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1475|  28.3k|    {
 1476|  28.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  446|  28.3k|    {
  447|  28.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  29.7k|    {
 1177|  29.7k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5829|  1.37k|    {
 5830|  1.37k|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEC2EONS3_5tupleIJS7_EEE:
 5615|  1.37k|    {
 5616|  1.37k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1429|  1.37k|    {
 1430|  1.37k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  436|  1.37k|    {
  437|  1.37k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE4argsEv:
 5373|  29.7k|    {
 5374|  29.7k|        return m_args;
 5375|  29.7k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  29.7k|    {
 7971|  29.7k|    }
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS2_6localeERS6_vvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8933|  14.8k|{
 8934|  14.8k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  14.8k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  14.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.8k|    static_cast<    \
  |  |  929|  14.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.8k|    static_cast<    \
  |  |  929|  14.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  14.8k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJwEEEDav:
 5395|  59.4k|{
 5396|  59.4k|    detail::check_scan_arg_types<Args...>();
 5397|  59.4k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  59.4k|}
_ZN3scn2v36detail20check_scan_arg_typesIJwEEEvv:
 5134|  59.4k|{
 5135|  59.4k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  59.4k|                  "Scan argument types must be default constructible");
 5137|  59.4k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  59.4k|                  "Scan argument types must be Destructible");
 5139|  59.4k|    static_assert(
 5140|  59.4k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  59.4k|        "Scan argument types must not be references");
 5142|  59.4k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEEC2Ev:
 5348|  59.4k|    {
 5349|  59.4k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEE12make_argptrsIJwEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  59.4k|    {
 5360|  59.4k|        return {detail::make_arg<
 5361|  59.4k|            kind, Context,
 5362|  59.4k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  59.4k|                                 typename Context::char_type>::value>(args)...};
 5364|  59.4k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE13EwvEEPvRT2_:
 5169|  59.4k|{
 5170|  59.4k|    return make_value<Context>(value).ref_value;
 5171|  59.4k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEwEEDaRT0_:
 5119|  59.4k|{
 5120|  59.4k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  59.4k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  59.4k|                                  needs_context_tag>) {
 5124|  59.4k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  59.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  59.4k|    }
 5126|  59.4k|    else {
 5127|  59.4k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  59.4k|            value, context_tag<Context>{}));
 5129|  59.4k|    }
 5130|  59.4k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERw:
 4958|  59.4k|    {                                                                        \
 4959|  59.4k|        return val;                                                          \
 4960|  59.4k|    }
_ZN3scn2v36detail15make_value_implIRwEEDaOT_:
 5088|  59.4k|{
 5089|  59.4k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  59.4k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  59.4k|    constexpr bool scannable_char =
 5093|  59.4k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  59.4k|    static_assert(scannable_char,
 5095|  59.4k|                  "Cannot scan an argument of an unsupported character "
 5096|  59.4k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  59.4k|    constexpr bool scannable_const =
 5099|  59.4k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  59.4k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  59.4k|    constexpr bool scannable_disabled =
 5103|  59.4k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  59.4k|    static_assert(scannable_disabled,
 5105|  59.4k|                  "Cannot scan an argument that has been disabled by "
 5106|  59.4k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  59.4k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  59.4k|    static_assert(
 5110|  59.4k|        scannable,
 5111|  59.4k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  59.4k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  59.4k|    return arg_value{arg};
 5115|  59.4k|}
_ZN3scn2v36detail9arg_valueC2IwEERT_:
 4901|  59.4k|    {
 4902|  59.4k|    }
_ZN3scn2v36detail13vscan_genericIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS1_22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEEOSB_NS4_IT0_NS5_ISN_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISN_EEEE:
 8590|   267k|{
 8591|   267k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   267k|    auto result = vscan_impl(buffer, format, args);
 8594|   267k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   267k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 266k, False: 583]
  |  |  ------------------
  ------------------
 8595|   266k|        return unexpected(result.error());
 8596|   266k|    }
 8597|    583|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|    583|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   267k|}
_ZN3scn2v36detail16make_scan_bufferINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaRKT_:
 4719|   534k|{
 4720|   534k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|   534k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|   534k|                  "\n"
 4724|   534k|                  "Unsupported range type given as input to a scanning "
 4725|   534k|                  "function.\n"
 4726|   534k|                  "A range needs to have a character type (value type) "
 4727|   534k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|   534k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|   534k|                  "to be included.\n"
 4730|   534k|                  "See the scnlib documentation for more details.");
 4731|   534k|    static_assert(
 4732|   534k|        !std::is_same_v<T, custom_char_traits>,
 4733|   534k|        "\n"
 4734|   534k|        "Unsupported range type given as input to a scanning "
 4735|   534k|        "function.\n"
 4736|   534k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|   534k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|   534k|        "not supported.");
 4739|   534k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|   534k|                  "\n"
 4741|   534k|                  "Unsupported range type given as input to a scanning "
 4742|   534k|                  "function.\n"
 4743|   534k|                  "file_marker_found cannot be used as an "
 4744|   534k|                  "source range type to scn::scan.\n"
 4745|   534k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|   534k|                  "and do not provide an explicit source range, "
 4747|   534k|                  "or use scn::scan with a FILE* directly.");
 4748|   534k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|   534k|                  "\n"
 4750|   534k|                  "Unsupported range type given as input to a scanning "
 4751|   534k|                  "function.\n"
 4752|   534k|                  "In order to be scannable, a range needs to satisfy "
 4753|   534k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|   534k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|   534k|                  "\n"
 4756|   534k|                  "Unsupported range type given as input to a scanning "
 4757|   534k|                  "function.\n"
 4758|   534k|                  "A range needs to model forward_range and have a valid "
 4759|   534k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|   534k|                  "Examples of scannable ranges are std::string, "
 4761|   534k|                  "std::string_view, "
 4762|   534k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|   534k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|   534k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|   534k|}
_ZN3scn2v36detail17_make_scan_buffer4implIwEEDaNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEENS1_12priority_tagILm3EEE:
 4611|   534k|{
 4612|   534k|    if constexpr (is_valid_char_type<CharT>) {
  ------------------
  |  Branch (4612:19): [Folded - Ignored]
  ------------------
 4613|   534k|        return r;
 4614|       |        // return make_string_scan_buffer(r);
 4615|   534k|    }
 4616|   534k|    else {
 4617|   534k|        return invalid_char_type{};
 4618|   534k|    }
 4619|   534k|}
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|   533k|    {
 1476|   533k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|   533k|    {
  447|   533k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   534k|    {
 1177|   534k|    }
_ZN3scn2v36detail23make_vscan_result_rangeIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_l:
 5922|  1.16k|{
 5923|  1.16k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|  1.16k|                      ranges::iterator_t<SourceRange>>) {
 5925|  1.16k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|  1.16k|    }
 5927|  1.16k|    else {
 5928|  1.16k|        auto it = ranges::begin(source);
 5929|  1.16k|        while (n > 0) {
 5930|  1.16k|            --n;
 5931|  1.16k|            ++it;
 5932|  1.16k|        }
 5933|  1.16k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|  1.16k|    }
 5935|  1.16k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.16k|    {
 2724|  1.16k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.16k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.16k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.16k|    {
 2705|  1.16k|        return decay_copy(t.begin());
 2706|  1.16k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1948|  49.6k|{
 1949|  49.6k|    return SCN_FWD(t);
  ------------------
  |  |  930|  49.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  49.6k|}
_ZN3scn2v36detail27make_vscan_result_range_endINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaRT_:
 5909|  1.16k|{
 5910|  1.16k|    return ranges::end(source);
 5911|  1.16k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.16k|    {
 2781|  1.16k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.16k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.16k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.16k|    {
 2763|  1.16k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.16k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.16k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_LPv0EEET_S6_:
 3315|   911k|    {
 3316|   911k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|  1.16k|    {
 1430|  1.16k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  436|  1.16k|    {
  437|  1.16k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEcvS6_Ev:
 7974|  59.4k|    {
 7975|  59.4k|        return m_str;
 7976|  59.4k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJwEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  59.4k|    {
 5426|  59.4k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEE12arg_pointersEv:
 5378|  59.4k|    {
 5379|  59.4k|        return m_argptrs;
 5380|  59.4k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5477|   534k|    {
 5478|   534k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJwEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  59.4k|{
 8820|  59.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  59.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 59.3k, False: 110]
  |  |  ------------------
  ------------------
 8821|  59.3k|        return unexpected(result.error());
 8822|  59.3k|    }
 8823|    110|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    110|    static_cast<    \
  |  |  929|    110|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    110|    static_cast<    \
  |  |  929|    110|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  59.4k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1597|   534k|    {
 1598|   534k|        return has_value();
 1599|   534k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.06M|    {
  485|  1.06M|        return m_has_value;
  486|  1.06M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1603|   533k|    {
 1604|   533k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   533k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   533k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   533k|        return this->get_unexpected().error();
 1606|   533k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   533k|    {
  468|   533k|        return m_unexpected;
  469|   533k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  59.3k|    {
 1476|  59.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  59.3k|    {
  447|  59.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  59.4k|    {
 1177|  59.4k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1652|  1.16k|    {
 1653|  1.16k|        return value();
 1654|  1.16k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|  1.16k|    {
 1627|  1.16k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.16k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.16k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.16k|        return this->get_value();
 1629|  1.16k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.16k|    {
  451|  1.16k|        return m_value;
  452|  1.16k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJwEEC2ES8_ONSt3__15tupleIJwEEE:
 5829|    110|    {
 5830|    110|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5680|  1.16k|    {
 5681|  1.16k|    }
_ZN3scn2v36detail25scan_result_value_storageIJwEEC2EONSt3__15tupleIJwEEE:
 5615|    110|    {
 5616|    110|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|    110|    {
 1430|    110|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|    110|    {
  437|    110|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEE4argsEv:
 5373|  59.4k|    {
 5374|  59.4k|        return m_args;
 5375|  59.4k|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7695|   534k|{
 7696|   534k|    return s;
 7697|   534k|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7667|   534k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  59.4k|    {
 7971|  59.4k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS1_22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT_OSC_NS5_IT1_NS6_ISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISR_EEEE:
 8606|   267k|{
 8607|   267k|#if !SCN_DISABLE_LOCALE
 8608|   267k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   267k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   267k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   267k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   267k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   267k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 266k, False: 583]
  |  |  ------------------
  ------------------
 8615|   266k|        return unexpected(result.error());
 8616|   266k|    }
 8617|    583|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|    583|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   267k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJiEEEDav:
 5395|  59.4k|{
 5396|  59.4k|    detail::check_scan_arg_types<Args...>();
 5397|  59.4k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  59.4k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEEC2Ev:
 5348|  59.4k|    {
 5349|  59.4k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  59.4k|    {
 5360|  59.4k|        return {detail::make_arg<
 5361|  59.4k|            kind, Context,
 5362|  59.4k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  59.4k|                                 typename Context::char_type>::value>(args)...};
 5364|  59.4k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE3EivEEPvRT2_:
 5169|  59.4k|{
 5170|  59.4k|    return make_value<Context>(value).ref_value;
 5171|  59.4k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEiEEDaRT0_:
 5119|  59.4k|{
 5120|  59.4k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  59.4k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  59.4k|                                  needs_context_tag>) {
 5124|  59.4k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  59.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  59.4k|    }
 5126|  59.4k|    else {
 5127|  59.4k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  59.4k|            value, context_tag<Context>{}));
 5129|  59.4k|    }
 5130|  59.4k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERi:
 4958|  59.4k|    {                                                                        \
 4959|  59.4k|        return val;                                                          \
 4960|  59.4k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEcvS6_Ev:
 7974|  59.4k|    {
 7975|  59.4k|        return m_str;
 7976|  59.4k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJiEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  59.4k|    {
 5426|  59.4k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE12arg_pointersEv:
 5378|  59.4k|    {
 5379|  59.4k|        return m_argptrs;
 5380|  59.4k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  59.4k|{
 8820|  59.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  59.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 59.4k, False: 0]
  |  |  ------------------
  ------------------
 8821|  59.4k|        return unexpected(result.error());
 8822|  59.4k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  59.4k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  59.4k|    {
 1476|  59.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  59.4k|    {
  447|  59.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  59.4k|    {
 1177|  59.4k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE4argsEv:
 5373|  59.4k|    {
 5374|  59.4k|        return m_args;
 5375|  59.4k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  59.4k|    {
 7971|  59.4k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJjEEEDav:
 5395|  59.4k|{
 5396|  59.4k|    detail::check_scan_arg_types<Args...>();
 5397|  59.4k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  59.4k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEEC2Ev:
 5348|  59.4k|    {
 5349|  59.4k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  59.4k|    {
 5360|  59.4k|        return {detail::make_arg<
 5361|  59.4k|            kind, Context,
 5362|  59.4k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  59.4k|                                 typename Context::char_type>::value>(args)...};
 5364|  59.4k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE8EjvEEPvRT2_:
 5169|  59.4k|{
 5170|  59.4k|    return make_value<Context>(value).ref_value;
 5171|  59.4k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEjEEDaRT0_:
 5119|  59.4k|{
 5120|  59.4k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  59.4k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  59.4k|                                  needs_context_tag>) {
 5124|  59.4k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  59.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  59.4k|    }
 5126|  59.4k|    else {
 5127|  59.4k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  59.4k|            value, context_tag<Context>{}));
 5129|  59.4k|    }
 5130|  59.4k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERj:
 4958|  59.4k|    {                                                                        \
 4959|  59.4k|        return val;                                                          \
 4960|  59.4k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEcvS6_Ev:
 7974|  59.4k|    {
 7975|  59.4k|        return m_str;
 7976|  59.4k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJjEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  59.4k|    {
 5426|  59.4k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE12arg_pointersEv:
 5378|  59.4k|    {
 5379|  59.4k|        return m_argptrs;
 5380|  59.4k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  59.4k|{
 8820|  59.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  59.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 59.4k, False: 0]
  |  |  ------------------
  ------------------
 8821|  59.4k|        return unexpected(result.error());
 8822|  59.4k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  59.4k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  59.4k|    {
 1476|  59.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  59.4k|    {
  447|  59.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  59.4k|    {
 1177|  59.4k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE4argsEv:
 5373|  59.4k|    {
 5374|  59.4k|        return m_args;
 5375|  59.4k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  59.4k|    {
 7971|  59.4k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJdEEEDav:
 5395|  59.4k|{
 5396|  59.4k|    detail::check_scan_arg_types<Args...>();
 5397|  59.4k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  59.4k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEEC2Ev:
 5348|  59.4k|    {
 5349|  59.4k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  59.4k|    {
 5360|  59.4k|        return {detail::make_arg<
 5361|  59.4k|            kind, Context,
 5362|  59.4k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  59.4k|                                 typename Context::char_type>::value>(args)...};
 5364|  59.4k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE17EdvEEPvRT2_:
 5169|  59.4k|{
 5170|  59.4k|    return make_value<Context>(value).ref_value;
 5171|  59.4k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEdEEDaRT0_:
 5119|  59.4k|{
 5120|  59.4k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  59.4k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  59.4k|                                  needs_context_tag>) {
 5124|  59.4k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  59.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  59.4k|    }
 5126|  59.4k|    else {
 5127|  59.4k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  59.4k|            value, context_tag<Context>{}));
 5129|  59.4k|    }
 5130|  59.4k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERd:
 4958|  59.4k|    {                                                                        \
 4959|  59.4k|        return val;                                                          \
 4960|  59.4k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEcvS6_Ev:
 7974|  59.4k|    {
 7975|  59.4k|        return m_str;
 7976|  59.4k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  59.4k|    {
 5426|  59.4k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12arg_pointersEv:
 5378|  59.4k|    {
 5379|  59.4k|        return m_argptrs;
 5380|  59.4k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  59.4k|{
 8820|  59.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  59.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 59.4k, False: 0]
  |  |  ------------------
  ------------------
 8821|  59.4k|        return unexpected(result.error());
 8822|  59.4k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  59.4k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  59.4k|    {
 1476|  59.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  59.4k|    {
  447|  59.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  59.4k|    {
 1177|  59.4k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE4argsEv:
 5373|  59.4k|    {
 5374|  59.4k|        return m_args;
 5375|  59.4k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  59.4k|    {
 7971|  59.4k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJbEEEDav:
 5395|  59.4k|{
 5396|  59.4k|    detail::check_scan_arg_types<Args...>();
 5397|  59.4k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  59.4k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEEC2Ev:
 5348|  59.4k|    {
 5349|  59.4k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEE12make_argptrsIJbEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  59.4k|    {
 5360|  59.4k|        return {detail::make_arg<
 5361|  59.4k|            kind, Context,
 5362|  59.4k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  59.4k|                                 typename Context::char_type>::value>(args)...};
 5364|  59.4k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE11EbvEEPvRT2_:
 5169|  59.4k|{
 5170|  59.4k|    return make_value<Context>(value).ref_value;
 5171|  59.4k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEbEEDaRT0_:
 5119|  59.4k|{
 5120|  59.4k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  59.4k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  59.4k|                                  needs_context_tag>) {
 5124|  59.4k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  59.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  59.4k|    }
 5126|  59.4k|    else {
 5127|  59.4k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  59.4k|            value, context_tag<Context>{}));
 5129|  59.4k|    }
 5130|  59.4k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERb:
 4958|  59.4k|    {                                                                        \
 4959|  59.4k|        return val;                                                          \
 4960|  59.4k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEcvS6_Ev:
 7974|  59.4k|    {
 7975|  59.4k|        return m_str;
 7976|  59.4k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJbEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  59.4k|    {
 5426|  59.4k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEE12arg_pointersEv:
 5378|  59.4k|    {
 5379|  59.4k|        return m_argptrs;
 5380|  59.4k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJbEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  59.4k|{
 8820|  59.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  59.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 59.4k, False: 0]
  |  |  ------------------
  ------------------
 8821|  59.4k|        return unexpected(result.error());
 8822|  59.4k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  59.4k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  59.4k|    {
 1476|  59.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  59.4k|    {
  447|  59.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  59.4k|    {
 1177|  59.4k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEE4argsEv:
 5373|  59.4k|    {
 5374|  59.4k|        return m_args;
 5375|  59.4k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  59.4k|    {
 7971|  59.4k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJPvEEEDav:
 5395|  59.4k|{
 5396|  59.4k|    detail::check_scan_arg_types<Args...>();
 5397|  59.4k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  59.4k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEEC2Ev:
 5348|  59.4k|    {
 5349|  59.4k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEE12make_argptrsIJS5_EEENSt3__15arrayIS5_Lm1EEEDpRT_:
 5359|  59.4k|    {
 5360|  59.4k|        return {detail::make_arg<
 5361|  59.4k|            kind, Context,
 5362|  59.4k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  59.4k|                                 typename Context::char_type>::value>(args)...};
 5364|  59.4k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE15EPvvEES7_RT2_:
 5169|  59.4k|{
 5170|  59.4k|    return make_value<Context>(value).ref_value;
 5171|  59.4k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEPvEEDaRT0_:
 5119|  59.4k|{
 5120|  59.4k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  59.4k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  59.4k|                                  needs_context_tag>) {
 5124|  59.4k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  59.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  59.4k|    }
 5126|  59.4k|    else {
 5127|  59.4k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  59.4k|            value, context_tag<Context>{}));
 5129|  59.4k|    }
 5130|  59.4k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERPv:
 4958|  59.4k|    {                                                                        \
 4959|  59.4k|        return val;                                                          \
 4960|  59.4k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEcvS6_Ev:
 7974|  59.4k|    {
 7975|  59.4k|        return m_str;
 7976|  59.4k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJPvEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  59.4k|    {
 5426|  59.4k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEE12arg_pointersEv:
 5378|  59.4k|    {
 5379|  59.4k|        return m_argptrs;
 5380|  59.4k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJPvEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSA_ISC_EEONSt3__15tupleIJSE_EEE:
 8819|  59.4k|{
 8820|  59.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  59.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 59.4k, False: 0]
  |  |  ------------------
  ------------------
 8821|  59.4k|        return unexpected(result.error());
 8822|  59.4k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  59.4k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEEC2ISC_LSA_0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  59.4k|    {
 1476|  59.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  446|  59.4k|    {
  447|  59.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  59.4k|    {
 1177|  59.4k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEE4argsEv:
 5373|  59.4k|    {
 5374|  59.4k|        return m_args;
 5375|  59.4k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  59.4k|    {
 7971|  59.4k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEDav:
 5395|  59.4k|{
 5396|  59.4k|    detail::check_scan_arg_types<Args...>();
 5397|  59.4k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  59.4k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEC2Ev:
 5348|  59.4k|    {
 5349|  59.4k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  59.4k|    {
 5360|  59.4k|        return {detail::make_arg<
 5361|  59.4k|            kind, Context,
 5362|  59.4k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  59.4k|                                 typename Context::char_type>::value>(args)...};
 5364|  59.4k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEvEEPvRT2_:
 5169|  59.4k|{
 5170|  59.4k|    return make_value<Context>(value).ref_value;
 5171|  59.4k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDaRT0_:
 5119|  59.4k|{
 5120|  59.4k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  59.4k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  59.4k|                                  needs_context_tag>) {
 5124|  59.4k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  59.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  59.4k|    }
 5126|  59.4k|    else {
 5127|  59.4k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  59.4k|            value, context_tag<Context>{}));
 5129|  59.4k|    }
 5130|  59.4k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 4958|  59.4k|    {                                                                        \
 4959|  59.4k|        return val;                                                          \
 4960|  59.4k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEcvS6_Ev:
 7974|  59.4k|    {
 7975|  59.4k|        return m_str;
 7976|  59.4k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  59.4k|    {
 5426|  59.4k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12arg_pointersEv:
 5378|  59.4k|    {
 5379|  59.4k|        return m_argptrs;
 5380|  59.4k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8819|  59.4k|{
 8820|  59.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  59.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 59.0k, False: 352]
  |  |  ------------------
  ------------------
 8821|  59.0k|        return unexpected(result.error());
 8822|  59.0k|    }
 8823|    352|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    352|    static_cast<    \
  |  |  929|    352|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    352|    static_cast<    \
  |  |  929|    352|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  59.4k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1475|  59.0k|    {
 1476|  59.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  625|  59.0k|    {
  626|  59.0k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  59.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  59.0k|    {
  689|  59.0k|        scn::detail::construct_at(unexpected_ptr(),
  690|  59.0k|                                  std::forward<Args>(args)...);
  691|  59.0k|        m_has_value = false;
  692|  59.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|   118k|    {
  718|   118k|        return reinterpret_cast<unexpected<E>*>(
  719|   118k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|   118k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|   118k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  59.4k|    {
 1177|  59.4k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5829|    352|    {
 5830|    352|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|    352|    {
 1430|    352|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  615|    352|    {
  616|    352|        construct(std::forward<Args>(args)...);
  617|    352|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|    352|    {
  682|    352|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|    352|        m_has_value = true;
  684|    352|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|    352|{
  392|    352|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|    352|        T(std::forward<Args>(args)...);
  394|    352|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2EOSG_:
 5821|    352|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|    704|    {
  706|    704|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|    704|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|    704|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 5825|    704|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE4argsEv:
 5373|  59.4k|    {
 5374|  59.4k|        return m_args;
 5375|  59.4k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEED2Ev:
 5370|  59.4k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  59.4k|    {
 7971|  59.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  59.4k|    {
  631|  59.4k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 352, False: 59.0k]
  ------------------
  632|    352|            destroy_value();
  633|    352|        }
  634|  59.0k|        else {
  635|  59.0k|            destroy_unexpected();
  636|  59.0k|        }
  637|  59.4k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  59.4k|    {
  675|  59.4k|        return m_has_value;
  676|  59.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|    352|    {
  696|    352|        scn::detail::destroy_at(value_ptr());
  697|    352|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  397|    352|{
  398|    352|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|    352|        for (auto& elem : *p) {
  400|    352|            scn::detail::destroy_at(&elem);
  401|    352|        }
  402|    352|    }
  403|    352|    else {
  404|    352|        p->~T();
  405|    352|    }
  406|    352|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  59.0k|    {
  700|  59.0k|        scn::detail::destroy_at(unexpected_ptr());
  701|  59.0k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEEDav:
 5395|  59.4k|{
 5396|  59.4k|    detail::check_scan_arg_types<Args...>();
 5397|  59.4k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  59.4k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEC2Ev:
 5348|  59.4k|    {
 5349|  59.4k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  59.4k|    {
 5360|  59.4k|        return {detail::make_arg<
 5361|  59.4k|            kind, Context,
 5362|  59.4k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  59.4k|                                 typename Context::char_type>::value>(args)...};
 5364|  59.4k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEvEEPvRT2_:
 5169|  59.4k|{
 5170|  59.4k|    return make_value<Context>(value).ref_value;
 5171|  59.4k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEDaRT0_:
 5119|  59.4k|{
 5120|  59.4k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  59.4k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  59.4k|                                  needs_context_tag>) {
 5124|  59.4k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  59.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  59.4k|    }
 5126|  59.4k|    else {
 5127|  59.4k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  59.4k|            value, context_tag<Context>{}));
 5129|  59.4k|    }
 5130|  59.4k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 4958|  59.4k|    {                                                                        \
 4959|  59.4k|        return val;                                                          \
 4960|  59.4k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEcvS6_Ev:
 7974|  59.4k|    {
 7975|  59.4k|        return m_str;
 7976|  59.4k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  59.4k|    {
 5426|  59.4k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12arg_pointersEv:
 5378|  59.4k|    {
 5379|  59.4k|        return m_argptrs;
 5380|  59.4k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8819|  59.4k|{
 8820|  59.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  59.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 59.0k, False: 352]
  |  |  ------------------
  ------------------
 8821|  59.0k|        return unexpected(result.error());
 8822|  59.0k|    }
 8823|    352|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    352|    static_cast<    \
  |  |  929|    352|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    352|    static_cast<    \
  |  |  929|    352|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  59.4k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1475|  59.0k|    {
 1476|  59.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  625|  59.0k|    {
  626|  59.0k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  59.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  59.0k|    {
  689|  59.0k|        scn::detail::construct_at(unexpected_ptr(),
  690|  59.0k|                                  std::forward<Args>(args)...);
  691|  59.0k|        m_has_value = false;
  692|  59.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|   118k|    {
  718|   118k|        return reinterpret_cast<unexpected<E>*>(
  719|   118k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|   118k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|   118k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  59.4k|    {
 1177|  59.4k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5829|    352|    {
 5830|    352|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|    352|    {
 1430|    352|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  615|    352|    {
  616|    352|        construct(std::forward<Args>(args)...);
  617|    352|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|    352|    {
  682|    352|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|    352|        m_has_value = true;
  684|    352|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|    352|{
  392|    352|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|    352|        T(std::forward<Args>(args)...);
  394|    352|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2EOSG_:
 5821|    352|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|    704|    {
  706|    704|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|    704|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|    704|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 5825|    704|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE4argsEv:
 5373|  59.4k|    {
 5374|  59.4k|        return m_args;
 5375|  59.4k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEED2Ev:
 5370|  59.4k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  59.4k|    {
 7971|  59.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  59.4k|    {
  631|  59.4k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 352, False: 59.0k]
  ------------------
  632|    352|            destroy_value();
  633|    352|        }
  634|  59.0k|        else {
  635|  59.0k|            destroy_unexpected();
  636|  59.0k|        }
  637|  59.4k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  59.4k|    {
  675|  59.4k|        return m_has_value;
  676|  59.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|    352|    {
  696|    352|        scn::detail::destroy_at(value_ptr());
  697|    352|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  397|    352|{
  398|    352|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|    352|        for (auto& elem : *p) {
  400|    352|            scn::detail::destroy_at(&elem);
  401|    352|        }
  402|    352|    }
  403|    352|    else {
  404|    352|        p->~T();
  405|    352|    }
  406|    352|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  59.0k|    {
  700|  59.0k|        scn::detail::destroy_at(unexpected_ptr());
  701|  59.0k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEEDav:
 5395|  59.4k|{
 5396|  59.4k|    detail::check_scan_arg_types<Args...>();
 5397|  59.4k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  59.4k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEEvv:
 5134|  59.4k|{
 5135|  59.4k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  59.4k|                  "Scan argument types must be default constructible");
 5137|  59.4k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  59.4k|                  "Scan argument types must be Destructible");
 5139|  59.4k|    static_assert(
 5140|  59.4k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  59.4k|        "Scan argument types must not be references");
 5142|  59.4k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEC2Ev:
 5348|  59.4k|    {
 5349|  59.4k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  59.4k|    {
 5360|  59.4k|        return {detail::make_arg<
 5361|  59.4k|            kind, Context,
 5362|  59.4k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  59.4k|                                 typename Context::char_type>::value>(args)...};
 5364|  59.4k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE20ENSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEvEEPvRT2_:
 5169|  59.4k|{
 5170|  59.4k|    return make_value<Context>(value).ref_value;
 5171|  59.4k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDaRT0_:
 5119|  59.4k|{
 5120|  59.4k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  59.4k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  59.4k|                                  needs_context_tag>) {
 5124|  59.4k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  59.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  59.4k|    }
 5126|  59.4k|    else {
 5127|  59.4k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  59.4k|            value, context_tag<Context>{}));
 5129|  59.4k|    }
 5130|  59.4k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 4958|  59.4k|    {                                                                        \
 4959|  59.4k|        return val;                                                          \
 4960|  59.4k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaOT_:
 5088|  59.4k|{
 5089|  59.4k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  59.4k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  59.4k|    constexpr bool scannable_char =
 5093|  59.4k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  59.4k|    static_assert(scannable_char,
 5095|  59.4k|                  "Cannot scan an argument of an unsupported character "
 5096|  59.4k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  59.4k|    constexpr bool scannable_const =
 5099|  59.4k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  59.4k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  59.4k|    constexpr bool scannable_disabled =
 5103|  59.4k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  59.4k|    static_assert(scannable_disabled,
 5105|  59.4k|                  "Cannot scan an argument that has been disabled by "
 5106|  59.4k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  59.4k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  59.4k|    static_assert(
 5110|  59.4k|        scannable,
 5111|  59.4k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  59.4k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  59.4k|    return arg_value{arg};
 5115|  59.4k|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEERT_:
 4901|  59.4k|    {
 4902|  59.4k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEcvS6_Ev:
 7974|  59.4k|    {
 7975|  59.4k|        return m_str;
 7976|  59.4k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  59.4k|    {
 5426|  59.4k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12arg_pointersEv:
 5378|  59.4k|    {
 5379|  59.4k|        return m_argptrs;
 5380|  59.4k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8819|  59.4k|{
 8820|  59.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  59.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 59.0k, False: 352]
  |  |  ------------------
  ------------------
 8821|  59.0k|        return unexpected(result.error());
 8822|  59.0k|    }
 8823|    352|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    352|    static_cast<    \
  |  |  929|    352|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    352|    static_cast<    \
  |  |  929|    352|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  59.4k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1475|  59.0k|    {
 1476|  59.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  446|  59.0k|    {
  447|  59.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  59.4k|    {
 1177|  59.4k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5829|    352|    {
 5830|    352|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEC2EONS3_5tupleIJS7_EEE:
 5615|    352|    {
 5616|    352|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1429|    352|    {
 1430|    352|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  436|    352|    {
  437|    352|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE4argsEv:
 5373|  59.4k|    {
 5374|  59.4k|        return m_args;
 5375|  59.4k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  59.4k|    {
 7971|  59.4k|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3567|  1.51M|    {
 3568|  1.51M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  1.51M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|  1.51M|    }
_ZNK3scn2v310scan_errorcvbEv:
 3573|  9.75M|    {
 3574|  9.75M|        return m_code == good;
 3575|  9.75M|    }
_ZNK3scn2v310scan_error4codeEv:
 3584|   237k|    {
 3585|   237k|        return m_code;
 3586|   237k|    }
_ZNK3scn2v36detail9fill_type4sizeEv:
 6180|  9.57k|    {
 6181|  9.57k|        return m_size;
 6182|  9.57k|    }
_ZNK3scn2v36detail12format_specs8get_baseEv:
 6221|  5.86k|    {
 6222|  5.86k|        SCN_GCC_COMPAT_PUSH
 6223|  5.86k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 6224|  5.86k|        switch (type) {
 6225|  2.71k|            case presentation_type::none:
  ------------------
  |  Branch (6225:13): [True: 2.71k, False: 3.14k]
  ------------------
 6226|  2.71k|                return 10;
 6227|     60|            case presentation_type::int_generic:
  ------------------
  |  Branch (6227:13): [True: 60, False: 5.80k]
  ------------------
 6228|     60|                return 0;
 6229|      0|            case presentation_type::int_arbitrary_base:
  ------------------
  |  Branch (6229:13): [True: 0, False: 5.86k]
  ------------------
 6230|      0|                return arbitrary_base;
 6231|       |
 6232|     38|            case presentation_type::int_binary:
  ------------------
  |  Branch (6232:13): [True: 38, False: 5.82k]
  ------------------
 6233|     38|                return 2;
 6234|    144|            case presentation_type::int_octal:
  ------------------
  |  Branch (6234:13): [True: 144, False: 5.72k]
  ------------------
 6235|    144|                return 8;
 6236|     38|            case presentation_type::int_decimal:
  ------------------
  |  Branch (6236:13): [True: 38, False: 5.82k]
  ------------------
 6237|    102|            case presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (6237:13): [True: 64, False: 5.80k]
  ------------------
 6238|    102|                return 10;
 6239|  2.80k|            case presentation_type::int_hex:
  ------------------
  |  Branch (6239:13): [True: 2.80k, False: 3.06k]
  ------------------
 6240|  2.80k|                return 16;
 6241|       |
 6242|      0|            default:
  ------------------
  |  Branch (6242:13): [True: 0, False: 5.86k]
  ------------------
 6243|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6244|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6245|  5.86k|        }
 6246|  5.86k|        SCN_GCC_COMPAT_POP
 6247|  5.86k|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6259|   251k|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter8on_alignENS1_10align_typeE:
 6262|  27.9k|    {
 6263|  27.9k|        m_specs.align = align;
 6264|  27.9k|    }
_ZN3scn2v36detail12specs_setter12on_localizedEv:
 6271|    784|    {
 6272|    784|        if constexpr (!SCN_DISABLE_LOCALE) {
  ------------------
  |  |  114|    784|#define SCN_DISABLE_LOCALE 0
  ------------------
  |  Branch (6272:23): [Folded - Ignored]
  ------------------
 6273|    784|            m_specs.localized = true;
 6274|    784|        }
 6275|      0|        else {
 6276|      0|            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 6277|      0|        }
 6278|    784|    }
_ZN3scn2v36detail12specs_setter8on_widthEi:
 6281|  82.8k|    {
 6282|  82.8k|        if (m_specs.precision != 0 && width > m_specs.precision) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 82.8k]
  |  Branch (6282:39): [True: 0, False: 0]
  ------------------
 6283|       |            // clang-format off
 6284|      0|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 6285|       |            // clang-format on
 6286|      0|        }
 6287|       |
 6288|  82.8k|        m_specs.width = width;
 6289|  82.8k|    }
_ZN3scn2v36detail12specs_setter12on_precisionEi:
 6291|  23.3k|    {
 6292|  23.3k|        if (m_specs.width > prec) {
  ------------------
  |  Branch (6292:13): [True: 82, False: 23.2k]
  ------------------
 6293|       |            // clang-format off
 6294|     82|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 6295|       |            // clang-format on
 6296|     82|        }
 6297|       |
 6298|  23.2k|        m_specs.precision = prec;
 6299|  23.2k|    }
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6302|   369k|    {
 6303|   369k|        m_specs.type = type;
 6304|   369k|    }
_ZN3scn2v36detail12specs_setter17on_charset_singleEDi:
 6307|  5.78M|    {
 6308|  5.78M|        const auto cp_value = static_cast<unsigned>(cp);
 6309|  5.78M|        if (SCN_LIKELY(cp_value <= 127)) {
  ------------------
  |  |  858|  5.78M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 5.02M, False: 755k]
  |  |  ------------------
  ------------------
 6310|  5.02M|            m_specs.charset_literals[cp_value / 8] |=
 6311|  5.02M|                static_cast<unsigned char>(1ul << (cp_value % 8));
 6312|  5.02M|        }
 6313|   755k|        else {
 6314|   755k|            m_specs.charset_has_nonascii = true;
 6315|   755k|        }
 6316|  5.78M|    }
_ZN3scn2v36detail12specs_setter16on_charset_rangeEDiDi:
 6319|  33.8k|    {
 6320|  33.8k|        const auto begin_value = static_cast<unsigned>(begin);
 6321|  33.8k|        const auto end_value = static_cast<unsigned>(end);
 6322|  33.8k|        SCN_EXPECT(begin_value < end_value);
  ------------------
  |  |  924|  33.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6323|       |
 6324|  33.8k|        if (SCN_LIKELY(end_value <= 127)) {
  ------------------
  |  |  858|  33.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 22.8k, False: 11.0k]
  |  |  ------------------
  ------------------
 6325|       |            // No need to bit-twiddle with a mask, because with the
 6326|       |            // SCN_ASSUME, -O3 will optimize this to a single operation
 6327|  22.8k|            SCN_ASSUME(begin_value < end_value);
  ------------------
  |  |  878|  22.8k|#define SCN_ASSUME(x) __builtin_assume(x)
  ------------------
 6328|  1.38M|            for (auto v = begin_value; v != end_value; ++v) {
  ------------------
  |  Branch (6328:40): [True: 1.36M, False: 22.8k]
  ------------------
 6329|  1.36M|                m_specs.charset_literals[v / 8] |=
 6330|  1.36M|                    static_cast<unsigned char>(1ul << (v % 8));
 6331|  1.36M|            }
 6332|  22.8k|        }
 6333|  11.0k|        else {
 6334|  11.0k|            m_specs.charset_has_nonascii = true;
 6335|  11.0k|        }
 6336|  33.8k|    }
_ZN3scn2v36detail12specs_setter19on_charset_invertedEv:
 6339|  5.16k|    {
 6340|  5.16k|        m_specs.charset_is_inverted = true;
 6341|  5.16k|    }
_ZN3scn2v36detail12specs_setter14on_regex_flagsENS1_11regex_flagsE:
 6358|   196k|    {
 6359|   196k|        m_specs.regexp_flags = flags;
 6360|   196k|    }
_ZN3scn2v36detail12specs_setter8on_errorEPKc:
 6364|  14.3k|    {
 6365|  14.3k|        SCN_UNLIKELY_ATTR
 6366|  14.3k|        m_error = scan_error{scan_error::invalid_format_string, msg};
 6367|  14.3k|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6375|  6.09M|    {
 6376|  6.09M|        return static_cast<bool>(m_error);
 6377|  6.09M|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3608|   237k|{
 3609|   237k|    return a.code() == b;
 3610|   237k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3612|   237k|{
 3613|   237k|    return !(a == b);
 3614|   237k|}
_ZN3scn2v36detail39decode_utf8_code_point_exhaustive_validENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3907|   524k|{
 3908|   524k|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|   524k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   524k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3909|       |
 3910|   524k|    const auto is_trailing_code_unit = [](char ch) {
 3911|   524k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3912|   524k|    };
 3913|       |
 3914|   524k|    if (input.size() == 1) {
  ------------------
  |  Branch (3914:9): [True: 463k, False: 60.4k]
  ------------------
 3915|   463k|        SCN_EXPECT(static_cast<unsigned char>(input[0]) < 0x80);
  ------------------
  |  |  924|   463k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   463k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3916|   463k|        return static_cast<char32_t>(input[0]);
 3917|   463k|    }
 3918|       |
 3919|  60.4k|    if (input.size() == 2) {
  ------------------
  |  Branch (3919:9): [True: 58.2k, False: 2.25k]
  ------------------
 3920|  58.2k|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xe0) == 0xc0);
  ------------------
  |  |  924|  58.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  58.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3921|  58.2k|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  924|  58.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  58.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3922|       |
 3923|  58.2k|        char32_t cp{};
 3924|  58.2k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3925|  58.2k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3926|  58.2k|        return cp;
 3927|  58.2k|    }
 3928|       |
 3929|  2.25k|    if (input.size() == 3) {
  ------------------
  |  Branch (3929:9): [True: 1.91k, False: 336]
  ------------------
 3930|  1.91k|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xf0) == 0xe0);
  ------------------
  |  |  924|  1.91k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.91k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3931|  1.91k|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  924|  1.91k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.91k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3932|  1.91k|        SCN_EXPECT(is_trailing_code_unit(input[2]));
  ------------------
  |  |  924|  1.91k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.91k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3933|       |
 3934|  1.91k|        char32_t cp{};
 3935|  1.91k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3936|  1.91k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3937|  1.91k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3938|  1.91k|        return cp;
 3939|  1.91k|    }
 3940|       |
 3941|    336|    if (input.size() == 4) {
  ------------------
  |  Branch (3941:9): [True: 336, False: 0]
  ------------------
 3942|    336|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xf8) == 0xf0);
  ------------------
  |  |  924|    336|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    336|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3943|    336|        SCN_EXPECT(static_cast<unsigned char>(input[0]) <= 0xf4);
  ------------------
  |  |  924|    336|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    336|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3944|    336|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  924|    336|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    336|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3945|    336|        SCN_EXPECT(is_trailing_code_unit(input[2]));
  ------------------
  |  |  924|    336|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    336|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3946|    336|        SCN_EXPECT(is_trailing_code_unit(input[3]));
  ------------------
  |  |  924|    336|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    336|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3947|       |
 3948|    336|        char32_t cp{};
 3949|    336|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3950|    336|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3951|    336|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3952|    336|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3953|    336|        return cp;
 3954|    336|    }
 3955|       |
 3956|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3957|       |    // gcc 7 thinks we'll get here, even when we won't
 3958|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3959|      0|#endif
 3960|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3961|      0|}
_ZN3scn2v36detailanENS1_11regex_flagsES2_:
 6110|   290k|{
 6111|   290k|    return static_cast<regex_flags>(static_cast<unsigned>(a) &
 6112|   290k|                                    static_cast<unsigned>(b));
 6113|   290k|}
_ZN3scn2v36detailorENS1_11regex_flagsES2_:
 6115|  37.7k|{
 6116|  37.7k|    return static_cast<regex_flags>(static_cast<unsigned>(a) |
 6117|  37.7k|                                    static_cast<unsigned>(b));
 6118|  37.7k|}
_ZN3scn2v36detailoRERNS1_11regex_flagsES2_:
 6130|  37.7k|{
 6131|  37.7k|    return a = a | b;
 6132|  37.7k|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7062|  1.89k|{
 7063|  1.89k|    switch (type) {
 7064|    126|        case arg_type::none_type:
  ------------------
  |  Branch (7064:9): [True: 126, False: 1.77k]
  ------------------
 7065|    126|            return arg_type_category::none;
 7066|       |
 7067|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7067:9): [True: 0, False: 1.89k]
  ------------------
 7068|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7068:9): [True: 0, False: 1.89k]
  ------------------
 7069|    196|        case arg_type::int_type:
  ------------------
  |  Branch (7069:9): [True: 196, False: 1.70k]
  ------------------
 7070|    196|        case arg_type::long_type:
  ------------------
  |  Branch (7070:9): [True: 0, False: 1.89k]
  ------------------
 7071|    196|        case arg_type::llong_type:
  ------------------
  |  Branch (7071:9): [True: 0, False: 1.89k]
  ------------------
 7072|    196|            return arg_type_category::integer;
 7073|       |
 7074|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7074:9): [True: 0, False: 1.89k]
  ------------------
 7075|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7075:9): [True: 0, False: 1.89k]
  ------------------
 7076|    196|        case arg_type::uint_type:
  ------------------
  |  Branch (7076:9): [True: 196, False: 1.70k]
  ------------------
 7077|    196|        case arg_type::ulong_type:
  ------------------
  |  Branch (7077:9): [True: 0, False: 1.89k]
  ------------------
 7078|    196|        case arg_type::ullong_type:
  ------------------
  |  Branch (7078:9): [True: 0, False: 1.89k]
  ------------------
 7079|    196|            return arg_type_category::unsigned_integer;
 7080|       |
 7081|    196|        case arg_type::pointer_type:
  ------------------
  |  Branch (7081:9): [True: 196, False: 1.70k]
  ------------------
 7082|    196|            return arg_type_category::pointer;
 7083|    196|        case arg_type::bool_type:
  ------------------
  |  Branch (7083:9): [True: 196, False: 1.70k]
  ------------------
 7084|    196|            return arg_type_category::boolean;
 7085|    108|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7085:9): [True: 108, False: 1.78k]
  ------------------
 7086|    196|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7086:9): [True: 88, False: 1.80k]
  ------------------
 7087|    196|        case arg_type::code_point_type:
  ------------------
  |  Branch (7087:9): [True: 0, False: 1.89k]
  ------------------
 7088|    196|            return arg_type_category::character;
 7089|       |
 7090|      0|        case arg_type::float_type:
  ------------------
  |  Branch (7090:9): [True: 0, False: 1.89k]
  ------------------
 7091|    196|        case arg_type::double_type:
  ------------------
  |  Branch (7091:9): [True: 196, False: 1.70k]
  ------------------
 7092|    196|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7092:9): [True: 0, False: 1.89k]
  ------------------
 7093|    196|            return arg_type_category::floating;
 7094|       |
 7095|    108|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7095:9): [True: 108, False: 1.78k]
  ------------------
 7096|    306|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7096:9): [True: 198, False: 1.69k]
  ------------------
 7097|    396|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7097:9): [True: 90, False: 1.80k]
  ------------------
 7098|    594|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7098:9): [True: 198, False: 1.69k]
  ------------------
 7099|    594|            return arg_type_category::string;
 7100|       |
 7101|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7101:9): [True: 0, False: 1.89k]
  ------------------
 7102|      0|            return arg_type_category::custom;
 7103|       |
 7104|      0|            SCN_CLANG_PUSH
 7105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7106|      0|        default:
  ------------------
  |  Branch (7106:9): [True: 0, False: 1.89k]
  ------------------
 7107|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7108|  1.89k|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7109|  1.89k|            SCN_CLANG_POP
 7110|  1.89k|    }
 7111|       |
 7112|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7113|  1.89k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA41_KcEEEDaDpOT_:
 3653|  1.94k|{
 3654|  1.94k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.94k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  1.94k|}
_ZN3scn2v36detail20check_int_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7148|  54.0k|{
 7149|  54.0k|    if (SCN_UNLIKELY(specs.type > presentation_type::int_hex)) {
  ------------------
  |  |  859|  54.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 50.9k, False: 3.10k]
  |  |  ------------------
  ------------------
 7150|  50.9k|        return handler.on_error("Invalid type specifier for integer type");
 7151|  50.9k|    }
 7152|  3.10k|    if (specs.localized) {
  ------------------
  |  Branch (7152:9): [True: 220, False: 2.88k]
  ------------------
 7153|    220|        if (SCN_UNLIKELY(specs.type == presentation_type::int_binary)) {
  ------------------
  |  |  859|    220|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 208]
  |  |  ------------------
  ------------------
 7154|       |            // clang-format off
 7155|     12|            handler.on_error("'b'/'B' specifier not supported for localized integers");
 7156|       |            // clang-format on
 7157|     12|            return;
 7158|     12|        }
 7159|    208|        if (SCN_UNLIKELY(specs.type == presentation_type::int_arbitrary_base)) {
  ------------------
  |  |  859|    208|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 208]
  |  |  ------------------
  ------------------
 7160|       |            // clang-format off
 7161|      0|            return handler.on_error("Arbitrary bases not supported for localized integers");
 7162|       |            // clang-format on
 7163|      0|        }
 7164|    208|    }
 7165|  3.10k|}
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1948|     52|{
 1949|     52|    return SCN_FWD(t);
  ------------------
  |  |  930|     52|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|     52|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
 3653|  4.55k|{
 3654|  4.55k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  4.55k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  4.55k|}
_ZN3scn2v36detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7192|  27.0k|{
 7193|  27.0k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7193:9): [True: 25.6k, False: 1.37k]
  ------------------
 7194|  27.0k|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (7194:10): [True: 176, False: 25.4k]
  ------------------
 7195|  25.6k|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (7195:10): [True: 25.3k, False: 168]
  ------------------
 7196|  25.4k|        SCN_UNLIKELY_ATTR
 7197|  25.4k|        return handler.on_error("Invalid type specifier for float type");
 7198|  25.4k|    }
 7199|  27.0k|}
_ZNK3scn2v36detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EE9has_valueEv:
  484|   126k|    {
  485|   126k|        return m_has_value;
  486|   126k|    }
_ZNK3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEcvbEv:
 1597|  63.1k|    {
 1598|  63.1k|        return has_value();
 1599|  63.1k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EE9get_valueEv:
  450|  63.1k|    {
  451|  63.1k|        return m_value;
  452|  63.1k|    }
_ZNR3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEE5valueIS4_LPv0EEERT_v:
 1626|  63.1k|    {
 1627|  63.1k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  63.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  63.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  63.1k|        return this->get_value();
 1629|  63.1k|    }
_ZNO3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEdeIS4_LPv0EEEOT_v:
 1662|  63.1k|    {
 1663|  63.1k|        return std::move(value());
 1664|  63.1k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA14_KcEEEDaDpOT_:
 3653|  35.0k|{
 3654|  35.0k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  35.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  35.0k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA32_KcEEEDaDpOT_:
 3653|  20.7k|{
 3654|  20.7k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  20.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  20.7k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA36_KcEEEDaDpOT_:
 3653|    630|{
 3654|    630|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|    630|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|    630|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA52_KcEEEDaDpOT_:
 3653|  2.16k|{
 3654|  2.16k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  2.16k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  2.16k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA40_KcEEEDaDpOT_:
 3653|  2.27k|{
 3654|  2.27k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  2.27k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  2.27k|}
_ZN3scn2v36detail23check_string_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7204|  80.5k|{
 7205|  80.5k|    if (specs.type == presentation_type::none ||
  ------------------
  |  Branch (7205:9): [True: 3.99k, False: 76.5k]
  ------------------
 7206|  80.5k|        specs.type == presentation_type::string ||
  ------------------
  |  Branch (7206:9): [True: 810, False: 75.7k]
  ------------------
 7207|  80.5k|        specs.type == presentation_type::string_set ||
  ------------------
  |  Branch (7207:9): [True: 9.51k, False: 66.2k]
  ------------------
 7208|  80.5k|        specs.type == presentation_type::regex ||
  ------------------
  |  Branch (7208:9): [True: 59.1k, False: 7.08k]
  ------------------
 7209|  80.5k|        specs.type == presentation_type::regex_escaped) {
  ------------------
  |  Branch (7209:9): [True: 6.15k, False: 930]
  ------------------
 7210|  79.6k|        return;
 7211|  79.6k|    }
 7212|    930|    if (specs.type == presentation_type::character) {
  ------------------
  |  Branch (7212:9): [True: 198, False: 732]
  ------------------
 7213|    198|        if (SCN_UNLIKELY(specs.precision == 0)) {
  ------------------
  |  |  859|    198|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 186]
  |  |  ------------------
  ------------------
 7214|       |            // clang-format off
 7215|     12|            return handler.on_error("'c' type specifier for strings requires the field precision to be specified");
 7216|       |            // clang-format on
 7217|     12|        }
 7218|    186|        return;
 7219|    198|    }
 7220|    732|    SCN_UNLIKELY_ATTR
 7221|    732|    handler.on_error("Invalid type specifier for string");
 7222|    732|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA47_KcEEEDaDpOT_:
 3653|  5.89k|{
 3654|  5.89k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  5.89k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  5.89k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA23_KcEEEDaDpOT_:
 3653|     70|{
 3654|     70|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|     70|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|     70|}
_ZN3scn2v36detail21check_bool_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7238|  27.0k|{
 7239|  27.0k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7239:9): [True: 25.6k, False: 1.37k]
  ------------------
 7240|  27.0k|        specs.type != presentation_type::string &&
  ------------------
  |  Branch (7240:9): [True: 25.3k, False: 298]
  ------------------
 7241|  27.0k|        specs.type != presentation_type::int_generic &&
  ------------------
  |  Branch (7241:9): [True: 25.3k, False: 24]
  ------------------
 7242|  27.0k|        specs.type != presentation_type::int_hex &&
  ------------------
  |  Branch (7242:9): [True: 25.3k, False: 32]
  ------------------
 7243|  27.0k|        specs.type != presentation_type::int_binary &&
  ------------------
  |  Branch (7243:9): [True: 25.2k, False: 20]
  ------------------
 7244|  27.0k|        specs.type != presentation_type::int_unsigned_decimal &&
  ------------------
  |  Branch (7244:9): [True: 25.2k, False: 22]
  ------------------
 7245|  27.0k|        specs.type != presentation_type::int_octal &&
  ------------------
  |  Branch (7245:9): [True: 25.2k, False: 62]
  ------------------
 7246|  27.0k|        specs.type != presentation_type::int_decimal) {
  ------------------
  |  Branch (7246:9): [True: 25.1k, False: 16]
  ------------------
 7247|  25.1k|        SCN_UNLIKELY_ATTR
 7248|  25.1k|        return handler.on_error("Invalid type specifier for boolean");
 7249|  25.1k|    }
 7250|  27.0k|}
_ZN3scn2v36detail21check_char_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7170|  26.8k|{
 7171|  26.8k|    if (specs.type > presentation_type::int_hex ||
  ------------------
  |  Branch (7171:9): [True: 25.4k, False: 1.44k]
  ------------------
 7172|  26.8k|        specs.type == presentation_type::int_arbitrary_base) {
  ------------------
  |  Branch (7172:9): [True: 0, False: 1.44k]
  ------------------
 7173|  25.4k|        SCN_UNLIKELY_ATTR
 7174|  25.4k|        return handler.on_error("Invalid type specifier for character type");
 7175|  25.4k|    }
 7176|  26.8k|}
_ZN3scn2v36detail24check_pointer_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7227|  26.8k|{
 7228|  26.8k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7228:9): [True: 25.5k, False: 1.33k]
  ------------------
 7229|  26.8k|        specs.type != presentation_type::pointer) {
  ------------------
  |  Branch (7229:9): [True: 25.5k, False: 12]
  ------------------
 7230|  25.5k|        SCN_UNLIKELY_ATTR
 7231|  25.5k|        return handler.on_error("Invalid type specifier for pointer");
 7232|  25.5k|    }
 7233|  26.8k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA79_KcEEEDaDpOT_:
 3653|    144|{
 3654|    144|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|    144|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|    144|}
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3714|   214k|{
 3715|   214k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3715:19): [Folded - Ignored]
  ------------------
 3716|   214k|                                          const CharT*, const CharT*>) {
 3717|   214k|        return {first, last};
 3718|   214k|    }
 3719|   214k|    else {
 3720|   214k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3721|   214k|    }
 3722|   214k|}
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3714|   763k|{
 3715|   763k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3715:19): [Folded - Ignored]
  ------------------
 3716|   763k|                                          const CharT*, const CharT*>) {
 3717|   763k|        return {first, last};
 3718|   763k|    }
 3719|   763k|    else {
 3720|   763k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3721|   763k|    }
 3722|   763k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3329|  4.86M|    {
 3330|  4.86M|        return m_iterator;
 3331|  4.86M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3333|  5.35M|    {
 3334|  5.35M|        return m_sentinel;
 3335|  5.35M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3329|  1.32M|    {
 3330|  1.32M|        return m_iterator;
 3331|  1.32M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3333|  1.76M|    {
 3334|  1.76M|        return m_sentinel;
 3335|  1.76M|    }
_ZN3scn2v36detail10locale_refC2Ev:
 7990|   413k|    constexpr locale_ref() = default;
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|    134|{
 1211|    134|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|    134|}
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  360|  2.79k|    {
  361|  2.79k|        return m_unexpected;
  362|  2.79k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA22_KcEEEDaDpOT_:
 3653|  6.30k|{
 3654|  6.30k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  6.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  6.30k|}
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  346|  81.8k|    {
  347|  81.8k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  81.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  81.8k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1475|   251k|    {
 1476|   251k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  446|   252k|    {
  447|   252k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   301k|    {
 1177|   301k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1429|  43.7k|    {
 1430|  43.7k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  43.7k|    {
  437|  43.7k|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1597|   302k|    {
 1598|   302k|        return has_value();
 1599|   302k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  484|   601k|    {
  485|   601k|        return m_has_value;
  486|   601k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1603|   251k|    {
 1604|   251k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   251k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   251k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   251k|        return this->get_unexpected().error();
 1606|   251k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   251k|    {
  468|   251k|        return m_unexpected;
  469|   251k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1662|  30.2k|    {
 1663|  30.2k|        return std::move(value());
 1664|  30.2k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1626|  47.3k|    {
 1627|  47.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  47.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  47.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  47.3k|        return this->get_value();
 1629|  47.3k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  450|  47.3k|    {
  451|  47.3k|        return m_value;
  452|  47.3k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1475|   178k|    {
 1476|   178k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  446|   179k|    {
  447|   179k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   212k|    {
 1177|   212k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1429|  32.0k|    {
 1430|  32.0k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  32.0k|    {
  437|  32.0k|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1597|   213k|    {
 1598|   213k|        return has_value();
 1599|   213k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  484|   424k|    {
  485|   424k|        return m_has_value;
  486|   424k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1603|   178k|    {
 1604|   178k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   178k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   178k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   178k|        return this->get_unexpected().error();
 1606|   178k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   178k|    {
  468|   178k|        return m_unexpected;
  469|   178k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1662|  26.0k|    {
 1663|  26.0k|        return std::move(value());
 1664|  26.0k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1626|  31.9k|    {
 1627|  31.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  31.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  31.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  31.9k|        return this->get_value();
 1629|  31.9k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  450|  31.9k|    {
  451|  31.9k|        return m_value;
  452|  31.9k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  9.93k|    {
 1837|  9.93k|        return detail::transform_error_impl(std::move(*this),
 1838|  9.93k|                                            std::forward<F>(f));
 1839|  9.93k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|  9.93k|{
 1323|  9.93k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  9.93k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  9.93k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  9.93k|            return result(*std::forward<Exp>(exp));
 1327|  9.93k|        }
 1328|       |
 1329|  9.93k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  9.93k|        return result(unexpect, monostate{});
 1331|  9.93k|    }
 1332|  9.93k|    else {
 1333|  9.93k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  9.93k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  9.93k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 9.93k, False: 0]
  |  |  ------------------
  ------------------
 1335|  9.93k|                   ? result(*std::forward<Exp>(exp))
 1336|  9.93k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  9.93k|    }
 1340|  9.93k|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|   165k|    {
  485|   165k|        return m_has_value;
  486|   165k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1662|  12.0k|    {
 1663|  12.0k|        return std::move(value());
 1664|  12.0k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1626|  78.8k|    {
 1627|  78.8k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  78.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  78.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  78.8k|        return this->get_value();
 1629|  78.8k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  78.8k|    {
  451|  78.8k|        return m_value;
  452|  78.8k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1613|    102|    {
 1614|    102|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    102|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    102|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    102|        return std::move(this->get_unexpected().error());
 1616|    102|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|    102|    {
  468|    102|        return m_unexpected;
  469|    102|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1485|  1.08k|    {
 1486|  1.08k|    }
_ZN3scn2v310scan_errorC2Ev:
 3562|  1.18M|    constexpr scan_error() noexcept = default;
_ZNK3scn2v36detail9fill_type13get_code_unitIcEET_v:
 6186|  7.84k|    {
 6187|  7.84k|        SCN_EXPECT(m_size <= sizeof(CharT));
  ------------------
  |  |  924|  7.84k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.84k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6188|  7.84k|        CharT r{};
 6189|  7.84k|        std::memcpy(&r, m_data, m_size);
 6190|  7.84k|        return r;
 6191|  7.84k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  346|  1.77k|    {
  347|  1.77k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  1.77k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  1.77k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  355|  1.91k|    {
  356|  1.91k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  1.91k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  1.91k|    }
_ZNK3scn2v36detail9fill_type14get_code_unitsIcEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 6195|    602|    {
 6196|    602|        return {reinterpret_cast<const CharT*>(m_data), m_size};
 6197|    602|    }
_ZNK3scn2v36ranges6detail6ssize_2fnclIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSD_:
 2961|     52|    {
 2962|     52|        return fn::impl(std::forward<T>(t));
 2963|     52|    }
_ZN3scn2v36ranges6detail6ssize_2fn4implIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISD_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSD_EEEEE15difference_typeEE4typeELm8EElSM_E4typeE_EEOSD_:
 2952|     52|    {
 2953|     52|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 2954|     52|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|     52|    {
 2930|     52|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|     52|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 2895|     52|    {
 2896|     52|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|     52|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|     52|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  346|    134|    {
  347|    134|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|    134|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|    134|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  346|      8|    {
  347|      8|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|      8|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|      8|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_errorEE5errorEv:
  360|  24.7k|    {
  361|  24.7k|        return m_unexpected;
  362|  24.7k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  355|  4.42k|    {
  356|  4.42k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  4.42k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  4.42k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  346|  37.8k|    {
  347|  37.8k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  37.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  37.8k|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  360|  37.8k|    {
  361|  37.8k|        return m_unexpected;
  362|  37.8k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  355|  37.8k|    {
  356|  37.8k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  37.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  37.8k|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|    752|{
 1211|    752|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|    752|}
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  346|  3.66k|    {
  347|  3.66k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  3.66k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  3.66k|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JS8_EvEEDcOT_DpOT0_:
 1210|  2.14k|{
 1211|  2.14k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  2.14k|}
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  20.9k|{
  326|  20.9k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  20.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  20.9k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_LPv0EEEmv:
 3345|   128k|    {
 3346|   128k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3347|   128k|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|  1.01k|    {
 1476|  1.01k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  1.01k|    {
  447|  1.01k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  86.1k|    {
 1177|  86.1k|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1429|  85.1k|    {
 1430|  85.1k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  85.1k|    {
  437|  85.1k|    }
_ZNK3scn2v38expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1597|  74.0k|    {
 1598|  74.0k|        return has_value();
 1599|  74.0k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1652|  66.8k|    {
 1653|  66.8k|        return value();
 1654|  66.8k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEC2IS7_vEEOT_:
 1429|  8.86k|    {
 1430|  8.86k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  436|  8.86k|    {
  437|  8.86k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  9.24k|    {
 1177|  9.24k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|    378|    {
 1476|    378|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|    378|    {
  447|    378|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEcvbEv:
 1597|  4.61k|    {
 1598|  4.61k|        return has_value();
 1599|  4.61k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE9has_valueEv:
  484|  15.5k|    {
  485|  15.5k|        return m_has_value;
  486|  15.5k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEdeIS7_LPv0EEERT_v:
 1652|  1.63k|    {
 1653|  1.63k|        return value();
 1654|  1.63k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE5valueIS7_LPv0EEERT_v:
 1626|  5.91k|    {
 1627|  5.91k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  5.91k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.91k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  5.91k|        return this->get_value();
 1629|  5.91k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE9get_valueEv:
  450|  5.91k|    {
  451|  5.91k|        return m_value;
  452|  5.91k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|    134|    {
 1476|    134|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|    134|    {
  447|    134|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  9.04k|    {
 1177|  9.04k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|  8.91k|    {
 1430|  8.91k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2IJSB_EvEENS3_10in_place_tEDpOT_:
  436|  8.91k|    {
  437|  8.91k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|  1.53k|    {
 1837|  1.53k|        return detail::transform_error_impl(std::move(*this),
 1838|  1.53k|                                            std::forward<F>(f));
 1839|  1.53k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9eof_errorEEERFNS0_10scan_errorESA_ELPv0ESC_EEDaOT_OT0_:
 1322|  1.53k|{
 1323|  1.53k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.53k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.53k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.53k|            return result(*std::forward<Exp>(exp));
 1327|  1.53k|        }
 1328|       |
 1329|  1.53k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.53k|        return result(unexpect, monostate{});
 1331|  1.53k|    }
 1332|  1.53k|    else {
 1333|  1.53k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.53k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.53k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.53k, False: 0]
  |  |  ------------------
  ------------------
 1335|  1.53k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.53k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  1.53k|    }
 1340|  1.53k|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEdeIS7_LPv0EEEOT_v:
 1662|  4.28k|    {
 1663|  4.28k|        return std::move(value());
 1664|  4.28k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IS7_vEEOT_:
 1429|  4.12k|    {
 1430|  4.12k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  436|  4.12k|    {
  437|  4.12k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  18.9k|    {
 1177|  18.9k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE5errorEv:
 1613|    348|    {
 1614|    348|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    348|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    348|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    348|        return std::move(this->get_unexpected().error());
 1616|    348|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE14get_unexpectedEv:
  467|    348|    {
  468|    348|        return m_unexpected;
  469|    348|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1485|  2.44k|    {
 1486|  2.44k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|  12.8k|    {
  447|  12.8k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  3.37k|    {
 2724|  3.37k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  3.37k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESJ_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  3.37k|    {
 2705|  3.37k|        return decay_copy(t.begin());
 2706|  3.37k|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEEu7__decayIT_EOSA_:
 1948|  7.23k|{
 1949|  7.23k|    return SCN_FWD(t);
  ------------------
  |  |  930|  7.23k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  7.23k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_E5beginEv:
 3329|  3.37k|    {
 3330|  3.37k|        return m_iterator;
 3331|  3.37k|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  3.37k|    {
 2781|  3.37k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  3.37k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EESD_SD_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  3.37k|    {
 2763|  3.37k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  3.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  3.37k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_E3endEv:
 3333|  3.37k|    {
 3334|  3.37k|        return m_sentinel;
 3335|  3.37k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_EC2ISA_LPv0EEET_SA_:
 3315|  3.37k|    {
 3316|  3.37k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEcvbEv:
 1597|  9.04k|    {
 1598|  9.04k|        return has_value();
 1599|  9.04k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  18.0k|    {
  485|  18.0k|        return m_has_value;
  486|  18.0k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEE5errorEv:
 1603|    134|    {
 1604|    134|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    134|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    134|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    134|        return this->get_unexpected().error();
 1606|    134|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|    134|    {
  468|    134|        return m_unexpected;
  469|    134|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1662|  8.91k|    {
 1663|  8.91k|        return std::move(value());
 1664|  8.91k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|  8.91k|    {
 1627|  8.91k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  8.91k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.91k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  8.91k|        return this->get_value();
 1629|  8.91k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE9get_valueEv:
  450|  8.91k|    {
  451|  8.91k|        return m_value;
  452|  8.91k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  54.5k|    {
 1177|  54.5k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|  54.5k|    {
 1430|  54.5k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  436|  54.5k|    {
  437|  54.5k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1597|  54.5k|    {
 1598|  54.5k|        return has_value();
 1599|  54.5k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  484|   109k|    {
  485|   109k|        return m_has_value;
  486|   109k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|  54.5k|    {
 1663|  54.5k|        return std::move(value());
 1664|  54.5k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|  54.5k|    {
 1627|  54.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  54.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  54.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  54.5k|        return this->get_value();
 1629|  54.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  450|  54.5k|    {
  451|  54.5k|        return m_value;
  452|  54.5k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|  10.3k|    {
 1476|  10.3k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|    840|    {
 1476|    840|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|  1.18k|    {
  447|  1.18k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  11.6k|    {
 1177|  11.6k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2INS8_4codeELPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  7.73k|    {
 1476|  7.73k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJNS9_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  7.73k|    {
  447|  7.73k|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEcvbEv:
 1597|  10.6k|    {
 1598|  10.6k|        return has_value();
 1599|  10.6k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE9has_valueEv:
  484|  21.1k|    {
  485|  21.1k|        return m_has_value;
  486|  21.1k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5errorEv:
 1603|  3.79k|    {
 1604|  3.79k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  3.79k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.79k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  3.79k|        return this->get_unexpected().error();
 1606|  3.79k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE14get_unexpectedEv:
  467|  5.26k|    {
  468|  5.26k|        return m_unexpected;
  469|  5.26k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEC2ISB_vEEOT_:
 1429|  1.97k|    {
 1430|  1.97k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  436|  1.97k|    {
  437|  1.97k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.97k|    {
 1177|  1.97k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5valueIS7_LPv0EEERT_v:
 1626|  2.74k|    {
 1627|  2.74k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.74k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.74k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.74k|        return this->get_value();
 1629|  2.74k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE9get_valueEv:
  450|  2.74k|    {
  451|  2.74k|        return m_value;
  452|  2.74k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEcvbEv:
 1597|  1.48k|    {
 1598|  1.48k|        return has_value();
 1599|  1.48k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9has_valueEv:
  484|  3.94k|    {
  485|  3.94k|        return m_has_value;
  486|  3.94k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.48k|    {
 1177|  1.48k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEdeISB_LPv0EEEOT_v:
 1662|  1.97k|    {
 1663|  1.97k|        return std::move(value());
 1664|  1.97k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEE5valueISB_LPv0EEERT_v:
 1626|  1.97k|    {
 1627|  1.97k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.97k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.97k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.97k|        return this->get_value();
 1629|  1.97k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9get_valueEv:
  450|  1.97k|    {
  451|  1.97k|        return m_value;
  452|  1.97k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE3endEv:
 3333|   377k|    {
 3334|   377k|        return m_sentinel;
 3335|   377k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE15transform_errorIRFNS2_11parse_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|  3.09k|    {
 1837|  3.09k|        return detail::transform_error_impl(std::move(*this),
 1838|  3.09k|                                            std::forward<F>(f));
 1839|  3.09k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9eof_errorEEERFNS4_11parse_errorESA_ELPv0ESC_EEDaOT_OT0_:
 1322|  3.09k|{
 1323|  3.09k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  3.09k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  3.09k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  3.09k|            return result(*std::forward<Exp>(exp));
 1327|  3.09k|        }
 1328|       |
 1329|  3.09k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  3.09k|        return result(unexpect, monostate{});
 1331|  3.09k|    }
 1332|  3.09k|    else {
 1333|  3.09k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  3.09k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  3.09k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.74k, False: 348]
  |  |  ------------------
  ------------------
 1335|  3.09k|                   ? result(*std::forward<Exp>(exp))
 1336|  3.09k|                   : result(unexpect,
 1337|    348|                            trivial_invoke(std::forward<F>(f),
 1338|    348|                                           std::forward<Exp>(exp).error()));
 1339|  3.09k|    }
 1340|  3.09k|}
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IS7_vEEOT_:
 1429|  2.74k|    {
 1430|  2.74k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  436|  2.74k|    {
  437|  2.74k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1485|    348|    {
 1486|    348|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEdeIS7_LPv0EEEOT_v:
 1662|  2.74k|    {
 1663|  2.74k|        return std::move(value());
 1664|  2.74k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE5beginEv:
 3329|   706k|    {
 3330|   706k|        return m_iterator;
 3331|   706k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEEC2IS9_vEEOT_:
 1429|  1.48k|    {
 1430|  1.48k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  436|  1.48k|    {
  437|  1.48k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESA_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1836|  1.48k|    {
 1837|  1.48k|        return detail::transform_error_impl(std::move(*this),
 1838|  1.48k|                                            std::forward<F>(f));
 1839|  1.48k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS4_27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEENS4_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
 1322|  1.48k|{
 1323|  1.48k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.48k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.48k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.48k|            return result(*std::forward<Exp>(exp));
 1327|  1.48k|        }
 1328|       |
 1329|  1.48k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.48k|        return result(unexpect, monostate{});
 1331|  1.48k|    }
 1332|  1.48k|    else {
 1333|  1.48k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.48k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.48k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.48k, False: 0]
  |  |  ------------------
  ------------------
 1335|  1.48k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.48k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  1.48k|    }
 1340|  1.48k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EE9has_valueEv:
  484|  2.96k|    {
  485|  2.96k|        return m_has_value;
  486|  2.96k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEEdeIS9_LPv0EEEOT_v:
 1662|  1.48k|    {
 1663|  1.48k|        return std::move(value());
 1664|  1.48k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEE5valueIS9_LPv0EEERT_v:
 1626|  1.48k|    {
 1627|  1.48k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.48k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.48k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.48k|        return this->get_value();
 1629|  1.48k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EE9get_valueEv:
  450|  1.48k|    {
  451|  1.48k|        return m_value;
  452|  1.48k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEC2IS9_vEEOT_:
 1429|  1.48k|    {
 1430|  1.48k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  436|  1.48k|    {
  437|  1.48k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.48k|    {
 1177|  1.48k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEcvbEv:
 1597|  1.48k|    {
 1598|  1.48k|        return has_value();
 1599|  1.48k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.96k|    {
  485|  2.96k|        return m_has_value;
  486|  2.96k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1662|  1.48k|    {
 1663|  1.48k|        return std::move(value());
 1664|  1.48k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1626|  1.48k|    {
 1627|  1.48k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.48k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.48k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.48k|        return this->get_value();
 1629|  1.48k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.48k|    {
  451|  1.48k|        return m_value;
  452|  1.48k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeES6_EUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|  1.46k|    {
 1837|  1.46k|        return detail::transform_error_impl(std::move(*this),
 1838|  1.46k|                                            std::forward<F>(f));
 1839|  1.46k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES8_EUlSA_E_LPv0ESC_EEDaOT_OT0_:
 1322|  1.46k|{
 1323|  1.46k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.46k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.46k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.46k|            return result(*std::forward<Exp>(exp));
 1327|  1.46k|        }
 1328|       |
 1329|  1.46k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.46k|        return result(unexpect, monostate{});
 1331|  1.46k|    }
 1332|  1.46k|    else {
 1333|  1.46k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.46k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.46k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 1.46k]
  |  |  ------------------
  ------------------
 1335|  1.46k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.46k|                   : result(unexpect,
 1337|  1.46k|                            trivial_invoke(std::forward<F>(f),
 1338|  1.46k|                                           std::forward<Exp>(exp).error()));
 1339|  1.46k|    }
 1340|  1.46k|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5errorEv:
 1613|  1.46k|    {
 1614|  1.46k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.46k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.46k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  1.46k|        return std::move(this->get_unexpected().error());
 1616|  1.46k|    }
_ZN3scn2v313scan_expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EEEC2EONS0_8expectedIS7_NS0_10scan_errorEEE:
 3647|  2.44k|    {
 3648|  2.44k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEC2ISA_LPv0EEET_SF_:
 3315|   254k|    {
 3316|   254k|    }
_ZN3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|     16|    {
 1476|     16|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  625|     16|    {
  626|     16|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|     16|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESI_EEEvDpOT_:
  688|     16|    {
  689|     16|        scn::detail::construct_at(unexpected_ptr(),
  690|     16|                                  std::forward<Args>(args)...);
  691|     16|        m_has_value = false;
  692|     16|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|     48|    {
  718|     48|        return reinterpret_cast<unexpected<E>*>(
  719|     48|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|     48|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|     48|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|     16|    {
 1177|     16|    }
_ZNK3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEEcvbEv:
 1597|     16|    {
 1598|     16|        return has_value();
 1599|     16|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE9has_valueEv:
  674|     48|    {
  675|     48|        return m_has_value;
  676|     48|    }
_ZNR3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEE5errorEv:
 1603|     16|    {
 1604|     16|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     16|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     16|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|     16|        return this->get_unexpected().error();
 1606|     16|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|     16|    {
  658|     16|        return *unexpected_ptr();
  659|     16|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EED2Ev:
  630|     16|    {
  631|     16|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 0, False: 16]
  ------------------
  632|      0|            destroy_value();
  633|      0|        }
  634|     16|        else {
  635|     16|            destroy_unexpected();
  636|     16|        }
  637|     16|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|     16|    {
  700|     16|        scn::detail::destroy_at(unexpected_ptr());
  701|     16|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEcvbEv:
 1597|  19.4k|    {
 1598|  19.4k|        return has_value();
 1599|  19.4k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  37.8k|    {
  485|  37.8k|        return m_has_value;
  486|  37.8k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEE5errorEv:
 1603|  12.3k|    {
 1604|  12.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  12.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  12.3k|        return this->get_unexpected().error();
 1606|  12.3k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  12.3k|    {
  468|  12.3k|        return m_unexpected;
  469|  12.3k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEdeIS7_LPv0EEEOT_v:
 1662|  4.12k|    {
 1663|  4.12k|        return std::move(value());
 1664|  4.12k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEE5valueIS7_LPv0EEERT_v:
 1626|  6.13k|    {
 1627|  6.13k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  6.13k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.13k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  6.13k|        return this->get_value();
 1629|  6.13k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  6.13k|    {
  451|  6.13k|        return m_value;
  452|  6.13k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|  1.16k|    {
 1476|  1.16k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  1.26k|    {
  447|  1.26k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  16.1k|    {
 1177|  16.1k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|  12.7k|    {
 1476|  12.7k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  12.7k|    {
  447|  12.7k|    }
_ZNK3scn2v38expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1597|  17.1k|    {
 1598|  17.1k|        return has_value();
 1599|  17.1k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  26.7k|    {
  485|  26.7k|        return m_has_value;
  486|  26.7k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1603|  6.37k|    {
 1604|  6.37k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  6.37k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.37k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  6.37k|        return this->get_unexpected().error();
 1606|  6.37k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  6.37k|    {
  468|  6.37k|        return m_unexpected;
  469|  6.37k|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1429|  4.13k|    {
 1430|  4.13k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|  4.13k|    {
  437|  4.13k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  4.13k|    {
 1177|  4.13k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1626|  2.08k|    {
 1627|  2.08k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.08k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.08k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.08k|        return this->get_value();
 1629|  2.08k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  2.08k|    {
  451|  2.08k|        return m_value;
  452|  2.08k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  3.08k|    {
 1598|  3.08k|        return has_value();
 1599|  3.08k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|  8.27k|    {
  485|  8.27k|        return m_has_value;
  486|  8.27k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.08k|    {
 1177|  3.08k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1662|  4.13k|    {
 1663|  4.13k|        return std::move(value());
 1664|  4.13k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1626|  4.13k|    {
 1627|  4.13k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.13k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.13k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.13k|        return this->get_value();
 1629|  4.13k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|  4.13k|    {
  451|  4.13k|        return m_value;
  452|  4.13k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3220|  74.8k|    {
 3221|  74.8k|        return ranges::empty(derived())
  ------------------
  |  Branch (3221:16): [True: 2.73k, False: 72.1k]
  ------------------
 3222|  74.8k|                   ? nullptr
 3223|  74.8k|                   : std::addressof(*ranges::begin(derived()));
 3224|  74.8k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|  74.8k|    {
 3005|  74.8k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  74.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|  74.8k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|  74.8k|    {
 2978|  74.8k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  74.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|  74.8k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5emptyEv:
 3338|  74.8k|    {
 3339|  74.8k|        return m_iterator == m_sentinel;
 3340|  74.8k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3179|   146k|    {
 3180|   146k|        return static_cast<D&>(*this);
 3181|   146k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  72.1k|    {
 2724|  72.1k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  72.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  72.1k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  72.1k|    {
 2705|  72.1k|        return decay_copy(t.begin());
 2706|  72.1k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1429|  2.08k|    {
 1430|  2.08k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  2.08k|    {
  437|  2.08k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1429|  3.08k|    {
 1430|  3.08k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  436|  3.08k|    {
  437|  3.08k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  3.08k|    {
 1837|  3.08k|        return detail::transform_error_impl(std::move(*this),
 1838|  3.08k|                                            std::forward<F>(f));
 1839|  3.08k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
 1322|  3.08k|{
 1323|  3.08k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  3.08k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  3.08k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  3.08k|            return result(*std::forward<Exp>(exp));
 1327|  3.08k|        }
 1328|       |
 1329|  3.08k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  3.08k|        return result(unexpect, monostate{});
 1331|  3.08k|    }
 1332|  3.08k|    else {
 1333|  3.08k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  3.08k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  3.08k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.08k, False: 0]
  |  |  ------------------
  ------------------
 1335|  3.08k|                   ? result(*std::forward<Exp>(exp))
 1336|  3.08k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  3.08k|    }
 1340|  3.08k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  484|  6.16k|    {
  485|  6.16k|        return m_has_value;
  486|  6.16k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1662|  3.08k|    {
 1663|  3.08k|        return std::move(value());
 1664|  3.08k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1626|  3.08k|    {
 1627|  3.08k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.08k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.08k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.08k|        return this->get_value();
 1629|  3.08k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  450|  3.08k|    {
  451|  3.08k|        return m_value;
  452|  3.08k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|  3.08k|    {
 1430|  3.08k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  436|  3.08k|    {
  437|  3.08k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.08k|    {
 1177|  3.08k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1597|  3.08k|    {
 1598|  3.08k|        return has_value();
 1599|  3.08k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  484|  6.16k|    {
  485|  6.16k|        return m_has_value;
  486|  6.16k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|  3.08k|    {
 1663|  3.08k|        return std::move(value());
 1664|  3.08k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|  3.08k|    {
 1627|  3.08k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.08k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.08k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.08k|        return this->get_value();
 1629|  3.08k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  450|  3.08k|    {
  451|  3.08k|        return m_value;
  452|  3.08k|    }
_ZN3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISD_LPv0ELSG_0EEEONS0_10unexpectedIT_EE:
 1475|     84|    {
 1476|     84|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS0_10unexpect_tEDpOT_:
  625|     84|    {
  626|     84|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|     84|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESE_EEEvDpOT_:
  688|     84|    {
  689|     84|        scn::detail::construct_at(unexpected_ptr(),
  690|     84|                                  std::forward<Args>(args)...);
  691|     84|        m_has_value = false;
  692|     84|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|    252|    {
  718|    252|        return reinterpret_cast<unexpected<E>*>(
  719|    252|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|    252|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|    252|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|     84|    {
 1177|     84|    }
_ZNK3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEcvbEv:
 1597|     84|    {
 1598|     84|        return has_value();
 1599|     84|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9has_valueEv:
  674|    252|    {
  675|    252|        return m_has_value;
  676|    252|    }
_ZNR3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5errorEv:
 1603|     84|    {
 1604|     84|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     84|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     84|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|     84|        return this->get_unexpected().error();
 1606|     84|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|     84|    {
  658|     84|        return *unexpected_ptr();
  659|     84|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EED2Ev:
  630|     84|    {
  631|     84|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 0, False: 84]
  ------------------
  632|      0|            destroy_value();
  633|      0|        }
  634|     84|        else {
  635|     84|            destroy_unexpected();
  636|     84|        }
  637|     84|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|     84|    {
  700|     84|        scn::detail::destroy_at(unexpected_ptr());
  701|     84|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  42.5k|    {
 2855|  42.5k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  42.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  42.5k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  42.5k|    {
 2836|  42.5k|        return t.data();
 2837|  42.5k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1475|   801k|    {
 1476|   801k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  446|   801k|    {
  447|   801k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   806k|    {
 1177|   806k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1429|  5.51k|    {
 1430|  5.51k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  436|  5.51k|    {
  437|  5.51k|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1210|  3.68k|{
 1211|  3.68k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  3.68k|}
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEE15transform_errorIRFNS0_10scan_errorESC_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSI_:
 1836|    492|    {
 1837|    492|        return detail::transform_error_impl(std::move(*this),
 1838|    492|                                            std::forward<F>(f));
 1839|    492|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_9sign_typeEEENS6_9eof_errorEEERFNS0_10scan_errorESE_ELPv0ESG_EEDaOT_OT0_:
 1322|    492|{
 1323|    492|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    492|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    492|        if (SCN_LIKELY(exp.has_value())) {
 1326|    492|            return result(*std::forward<Exp>(exp));
 1327|    492|        }
 1328|       |
 1329|    492|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    492|        return result(unexpect, monostate{});
 1331|    492|    }
 1332|    492|    else {
 1333|    492|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    492|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    492|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 492, False: 0]
  |  |  ------------------
  ------------------
 1335|    492|                   ? result(*std::forward<Exp>(exp))
 1336|    492|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    492|    }
 1340|    492|}
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1429|    492|    {
 1430|    492|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  436|    492|    {
  437|    492|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    492|    {
 1177|    492|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|    492|    {
 1598|    492|        return has_value();
 1599|    492|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|    984|    {
  485|    984|        return m_has_value;
  486|    984|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEdeISB_LPv0EEEOT_v:
 1662|    492|    {
 1663|    492|        return std::move(value());
 1664|    492|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1626|    492|    {
 1627|    492|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    492|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    492|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    492|        return this->get_value();
 1629|    492|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    492|    {
  451|    492|        return m_value;
  452|    492|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeES6_EUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1822|    984|    {
 1823|    984|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|    984|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES8_EUlSA_E_LPv0ESD_EEDaOT_OT0_:
 1322|    984|{
 1323|    984|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    984|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    984|        if (SCN_LIKELY(exp.has_value())) {
 1326|    984|            return result(*std::forward<Exp>(exp));
 1327|    984|        }
 1328|       |
 1329|    984|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    984|        return result(unexpect, monostate{});
 1331|    984|    }
 1332|    984|    else {
 1333|    984|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    984|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    984|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 984]
  |  |  ------------------
  ------------------
 1335|    984|                   ? result(*std::forward<Exp>(exp))
 1336|    984|                   : result(unexpect,
 1337|    984|                            trivial_invoke(std::forward<F>(f),
 1338|    984|                                           std::forward<Exp>(exp).error()));
 1339|    984|    }
 1340|    984|}
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEdeIS7_LPv0EEERT_v:
 1652|  2.00k|    {
 1653|  2.00k|        return value();
 1654|  2.00k|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E0_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3667|      6|    auto&& SCN_TRY_TMP = (x);                          \
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|    486|    {
 2724|    486|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    486|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|    486|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESO_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|    486|    {
 2705|    486|        return decay_copy(t.begin());
 2706|    486|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3667|    468|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|  1.05k|    {
 1837|  1.05k|        return detail::transform_error_impl(std::move(*this),
 1838|  1.05k|                                            std::forward<F>(f));
 1839|  1.05k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1322|  1.05k|{
 1323|  1.05k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.05k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.05k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.05k|            return result(*std::forward<Exp>(exp));
 1327|  1.05k|        }
 1328|       |
 1329|  1.05k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.05k|        return result(unexpect, monostate{});
 1331|  1.05k|    }
 1332|  1.05k|    else {
 1333|  1.05k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.05k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.05k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.05k, False: 0]
  |  |  ------------------
  ------------------
 1335|  1.05k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.05k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  1.05k|    }
 1340|  1.05k|}
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|  1.05k|    {
 1430|  1.05k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|  1.05k|    {
  437|  1.05k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.05k|    {
 1177|  1.05k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|  1.05k|    {
 1598|  1.05k|        return has_value();
 1599|  1.05k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.10k|    {
  485|  2.10k|        return m_has_value;
  486|  2.10k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|  1.05k|    {
 1663|  1.05k|        return std::move(value());
 1664|  1.05k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|  1.05k|    {
 1627|  1.05k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.05k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.05k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.05k|        return this->get_value();
 1629|  1.05k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.05k|    {
  451|  1.05k|        return m_value;
  452|  1.05k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1822|  1.08k|    {
 1823|  1.08k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|  1.08k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1322|  1.08k|{
 1323|  1.08k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.08k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.08k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.08k|            return result(*std::forward<Exp>(exp));
 1327|  1.08k|        }
 1328|       |
 1329|  1.08k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.08k|        return result(unexpect, monostate{});
 1331|  1.08k|    }
 1332|  1.08k|    else {
 1333|  1.08k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.08k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.08k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 1.08k]
  |  |  ------------------
  ------------------
 1335|  1.08k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.08k|                   : result(unexpect,
 1337|  1.08k|                            trivial_invoke(std::forward<F>(f),
 1338|  1.08k|                                           std::forward<Exp>(exp).error()));
 1339|  1.08k|    }
 1340|  1.08k|}
_ZN3scn2v313scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3647|  1.08k|    {
 3648|  1.08k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1652|  17.1k|    {
 1653|  17.1k|        return value();
 1654|  17.1k|    }
_ZN3scn2v36detail22parse_presentation_setIcRNS0_4impl22nonascii_specs_handlerEEENSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEERPKS8_SD_OT0_:
 6696|  6.99k|{
 6697|  6.99k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  6.99k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.99k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|  6.99k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  6.99k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.99k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|  6.99k|    auto start = begin;
 6701|  6.99k|    ++begin;
 6702|       |
 6703|  6.99k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  6.99k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.99k]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|      0|        return {};
 6708|      0|    }
 6709|  6.99k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 588, False: 6.40k]
  ------------------
 6710|    588|        handler.on_charset_inverted();
 6711|    588|        ++begin;
 6712|    588|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    588|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 588]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|      0|            return {};
 6717|      0|        }
 6718|    588|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 6, False: 582]
  ------------------
 6719|      6|            handler.on_charset_single(char32_t{']'});
 6720|      6|            ++begin;
 6721|      6|        }
 6722|    588|    }
 6723|  6.40k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 0, False: 6.40k]
  ------------------
 6724|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|      0|    }
 6726|       |
 6727|  1.92M|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 1.92M, False: 0]
  ------------------
 6728|  1.92M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.92M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.92M]
  |  |  ------------------
  ------------------
 6729|      0|            break;
 6730|      0|        }
 6731|       |
 6732|  1.92M|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 6.99k, False: 1.92M]
  ------------------
 6733|  6.99k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|  6.99k|        }
 6735|       |
 6736|  1.92M|        parse_presentation_set_literal(begin, end, handler);
 6737|  1.92M|    }
 6738|       |
 6739|      0|    SCN_UNLIKELY_ATTR
 6740|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6741|      0|    return {};
 6742|  6.99k|}
_ZN3scn2v36detail30parse_presentation_set_literalIcRNS0_4impl22nonascii_specs_handlerEEEvRPKT_S8_OT0_:
 6660|  1.92M|{
 6661|  1.92M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.92M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.92M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|  1.92M|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|  1.92M|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  1.92M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.92M]
  |  |  ------------------
  ------------------
 6665|      0|        return;
 6666|      0|    }
 6667|       |
 6668|  1.92M|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 1.92M, False: 0]
  |  Branch (6668:25): [True: 10.6k, False: 1.90M]
  |  Branch (6668:49): [True: 10.6k, False: 0]
  ------------------
 6669|  1.92M|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 10.4k, False: 162]
  ------------------
 6670|  10.4k|        ++begin;
 6671|       |
 6672|  10.4k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|  10.4k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  10.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 10.4k]
  |  |  ------------------
  ------------------
 6674|      0|            return;
 6675|      0|        }
 6676|       |
 6677|  10.4k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  10.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 10.4k]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|      0|            return;
 6682|      0|        }
 6683|       |
 6684|  10.4k|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|  10.4k|        return;
 6686|  10.4k|    }
 6687|       |
 6688|  1.90M|    handler.on_charset_single(cp_first);
 6689|  1.90M|}
_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS0_4impl22nonascii_specs_handlerEEEDiRPKT_S8_OT0_:
 6636|  1.93M|{
 6637|  1.93M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.93M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.93M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|  1.93M|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|  1.93M|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  3.86M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.93M]
  |  |  |  Branch (859:45): [True: 0, False: 1.93M]
  |  |  |  Branch (859:45): [True: 0, False: 1.93M]
  |  |  ------------------
  ------------------
 6641|      0|        handler.on_error("Invalid encoding in format string");
 6642|      0|        return invalid_code_point;
 6643|      0|    }
 6644|       |
 6645|  1.93M|    const auto cp =
 6646|  1.93M|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|  1.93M|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  1.93M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.93M]
  |  |  ------------------
  ------------------
 6648|      0|        handler.on_error("Invalid encoding in format string");
 6649|      0|        return invalid_code_point;
 6650|      0|    }
 6651|       |
 6652|  1.93M|    begin += len;
 6653|  1.93M|    return cp;
 6654|  1.93M|}
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  63.1k|    {
 1177|  63.1k|    }
_ZN3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEC2IS4_vEEOT_:
 1429|  63.1k|    {
 1430|  63.1k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EEC2IJS5_EvEENS3_10in_place_tEDpOT_:
  436|  63.1k|    {
  437|  63.1k|    }
_ZNK3scn2v36detail12format_specs14charset_stringIcEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 6251|  45.1k|    {
 6252|  45.1k|        return {reinterpret_cast<const CharT*>(charset_string_data),
 6253|  45.1k|                charset_string_size};
 6254|  45.1k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IRKS7_vEEOT_:
 1429|  2.00k|    {
 1430|  2.00k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJRKS8_EvEENSt3__110in_place_tEDpOT_:
  436|  2.00k|    {
  437|  2.00k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1429|  4.65k|    {
 1430|  4.65k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  436|  4.65k|    {
  437|  4.65k|    }
_ZN3scn2v36detail34decode_code_point_exhaustive_validIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4032|   524k|{
 4033|   524k|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4033:19): [Folded - Ignored]
  ------------------
 4034|   524k|        return decode_utf8_code_point_exhaustive_valid(input);
 4035|   524k|    }
 4036|   524k|    else if constexpr (sizeof(CharT) == 2) {
 4037|   524k|        return decode_utf16_code_point_exhaustive_valid(input);
 4038|   524k|    }
 4039|   524k|    else {
 4040|   524k|        SCN_EXPECT(input.size() == 1);
 4041|   524k|        return static_cast<char32_t>(input.front());
 4042|   524k|    }
 4043|   524k|}
_ZZN3scn2v36detail39decode_utf8_code_point_exhaustive_validENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3910|  63.0k|    const auto is_trailing_code_unit = [](char ch) {
 3911|  63.0k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3912|  63.0k|    };
_ZNK3scn2v36detail9fill_type13get_code_unitIwEET_v:
 6186|  1.12k|    {
 6187|  1.12k|        SCN_EXPECT(m_size <= sizeof(CharT));
  ------------------
  |  |  924|  1.12k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.12k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6188|  1.12k|        CharT r{};
 6189|  1.12k|        std::memcpy(&r, m_data, m_size);
 6190|  1.12k|        return r;
 6191|  1.12k|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3806|  1.04M|{
 3807|  1.04M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3807:19): [Folded - Ignored]
  ------------------
 3808|  1.04M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3809|  1.04M|    }
 3810|  1.04M|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (3810:24): [Folded - Ignored]
  ------------------
 3811|  1.04M|        return utf16_code_point_length_by_starting_code_unit(ch);
 3812|  1.04M|    }
 3813|  1.04M|    else {
 3814|       |        // utf-32
 3815|  1.04M|        static_assert(sizeof(U) == 4);
 3816|  1.04M|        SCN_UNUSED(ch);
  ------------------
  |  |  909|  1.04M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3817|  1.04M|        return 1;
 3818|  1.04M|    }
 3819|  1.04M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4012|   983k|{
 4013|   983k|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4013:19): [Folded - Ignored]
  ------------------
 4014|   983k|        return decode_utf8_code_point_exhaustive(input);
 4015|   983k|    }
 4016|   983k|    else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (4016:24): [Folded - Ignored]
  ------------------
 4017|   983k|        return decode_utf16_code_point_exhaustive(input);
 4018|   983k|    }
 4019|   983k|    else {
 4020|   983k|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|   983k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   983k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4021|   983k|        auto cp = static_cast<char32_t>(input.front());
 4022|   983k|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|   983k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 288k, False: 694k]
  |  |  ------------------
  ------------------
 4023|   288k|            return invalid_code_point;
 4024|   288k|        }
 4025|   694k|        return cp;
 4026|   983k|    }
 4027|   983k|}
_ZN3scn2v36detail31make_string_view_from_iteratorsIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3698|  80.5k|{
 3699|  80.5k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3699:19): [Folded - Ignored]
  |  Branch (3699:19): [Folded - Ignored]
  ------------------
 3700|  80.5k|                                          decltype(first), decltype(last)> &&
 3701|  80.5k|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3701:19): [Folded - Ignored]
  ------------------
 3702|  80.5k|        return {first, last};
 3703|  80.5k|    }
 3704|  80.5k|    else {
 3705|  80.5k|        return {to_address(first), static_cast<size_t>(std::distance(
 3706|  80.5k|                                       to_address(first), to_address(last)))};
 3707|  80.5k|    }
 3708|  80.5k|}
_ZN3scn2v36detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|   340k|{
  326|   340k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|   340k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|   340k|}
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  303|   343k|{
  304|   343k|    return p;
  305|   343k|}
_ZN3scn2v36detail25make_string_view_iteratorIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3729|  7.49k|{
 3730|  7.49k|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (3730:19): [Folded - Ignored]
  |  Branch (3730:19): [Folded - Ignored]
  ------------------
 3731|  7.49k|                      typename std::basic_string_view<CharT>::iterator,
 3732|  7.49k|                      decltype(it)> &&
 3733|  7.49k|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3733:19): [Folded - Ignored]
  ------------------
 3734|  7.49k|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  7.49k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3735|  7.49k|        return it;
 3736|  7.49k|    }
 3737|  7.49k|    else {
 3738|  7.49k|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3739|  7.49k|    }
 3740|  7.49k|}
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  2.66k|{
  326|  2.66k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  2.66k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  2.66k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_LPv0EEEmv:
 3345|  41.5k|    {
 3346|  41.5k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3347|  41.5k|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|    138|    {
 1476|    138|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|    138|    {
  447|    138|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  25.4k|    {
 1177|  25.4k|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1429|  25.2k|    {
 1430|  25.2k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  25.2k|    {
  437|  25.2k|    }
_ZNK3scn2v38expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1597|  6.78k|    {
 1598|  6.78k|        return has_value();
 1599|  6.78k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  44.0k|    {
  485|  44.0k|        return m_has_value;
  486|  44.0k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1626|  18.4k|    {
 1627|  18.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  18.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  18.4k|        return this->get_value();
 1629|  18.4k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  18.4k|    {
  451|  18.4k|        return m_value;
  452|  18.4k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEC2IS7_vEEOT_:
 1429|  3.22k|    {
 1430|  3.22k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  436|  3.22k|    {
  437|  3.22k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.39k|    {
 1177|  3.39k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|    164|    {
 1476|    164|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|    164|    {
  447|    164|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEcvbEv:
 1597|  1.51k|    {
 1598|  1.51k|        return has_value();
 1599|  1.51k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE9has_valueEv:
  484|  5.26k|    {
  485|  5.26k|        return m_has_value;
  486|  5.26k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE5valueIS7_LPv0EEERT_v:
 1626|  1.71k|    {
 1627|  1.71k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.71k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.71k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.71k|        return this->get_value();
 1629|  1.71k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE9get_valueEv:
  450|  1.71k|    {
  451|  1.71k|        return m_value;
  452|  1.71k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.38k|    {
 1177|  2.38k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|  2.38k|    {
 1430|  2.38k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EEC2IJSB_EvEENS3_10in_place_tEDpOT_:
  436|  2.38k|    {
  437|  2.38k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|    362|    {
 1837|    362|        return detail::transform_error_impl(std::move(*this),
 1838|    362|                                            std::forward<F>(f));
 1839|    362|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9eof_errorEEERFNS0_10scan_errorESA_ELPv0ESC_EEDaOT_OT0_:
 1322|    362|{
 1323|    362|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    362|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    362|        if (SCN_LIKELY(exp.has_value())) {
 1326|    362|            return result(*std::forward<Exp>(exp));
 1327|    362|        }
 1328|       |
 1329|    362|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    362|        return result(unexpect, monostate{});
 1331|    362|    }
 1332|    362|    else {
 1333|    362|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    362|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    362|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 362, False: 0]
  |  |  ------------------
  ------------------
 1335|    362|                   ? result(*std::forward<Exp>(exp))
 1336|    362|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    362|    }
 1340|    362|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEdeIS7_LPv0EEEOT_v:
 1662|  1.71k|    {
 1663|  1.71k|        return std::move(value());
 1664|  1.71k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IS7_vEEOT_:
 1429|    928|    {
 1430|    928|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  436|    928|    {
  437|    928|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  4.90k|    {
 1177|  4.90k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE5errorEv:
 1613|    164|    {
 1614|    164|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    164|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    164|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    164|        return std::move(this->get_unexpected().error());
 1616|    164|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE14get_unexpectedEv:
  467|    164|    {
  468|    164|        return m_unexpected;
  469|    164|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1485|  1.17k|    {
 1486|  1.17k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|  3.97k|    {
  447|  3.97k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|    550|    {
 2724|    550|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    550|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|    550|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESJ_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|    550|    {
 2705|    550|        return decay_copy(t.begin());
 2706|    550|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEEu7__decayIT_EOSA_:
 1948|  1.33k|{
 1949|  1.33k|    return SCN_FWD(t);
  ------------------
  |  |  930|  1.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  1.33k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_E5beginEv:
 3329|    550|    {
 3330|    550|        return m_iterator;
 3331|    550|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|    550|    {
 2781|    550|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    550|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|    550|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EESD_SD_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|    550|    {
 2763|    550|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|    550|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|    550|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_E3endEv:
 3333|    550|    {
 3334|    550|        return m_sentinel;
 3335|    550|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_EC2ISA_LPv0EEET_SA_:
 3315|    550|    {
 3316|    550|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEcvbEv:
 1597|  2.38k|    {
 1598|  2.38k|        return has_value();
 1599|  2.38k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  4.77k|    {
  485|  4.77k|        return m_has_value;
  486|  4.77k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1662|  2.38k|    {
 1663|  2.38k|        return std::move(value());
 1664|  2.38k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|  2.38k|    {
 1627|  2.38k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.38k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.38k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.38k|        return this->get_value();
 1629|  2.38k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.38k|    {
  451|  2.38k|        return m_value;
  452|  2.38k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  36.3k|    {
 1177|  36.3k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|  36.3k|    {
 1430|  36.3k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  436|  36.3k|    {
  437|  36.3k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  11.7k|    {
 1837|  11.7k|        return detail::transform_error_impl(std::move(*this),
 1838|  11.7k|                                            std::forward<F>(f));
 1839|  11.7k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|  11.7k|{
 1323|  11.7k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  11.7k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  11.7k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  11.7k|            return result(*std::forward<Exp>(exp));
 1327|  11.7k|        }
 1328|       |
 1329|  11.7k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  11.7k|        return result(unexpect, monostate{});
 1331|  11.7k|    }
 1332|  11.7k|    else {
 1333|  11.7k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  11.7k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  11.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 11.7k, False: 0]
  |  |  ------------------
  ------------------
 1335|  11.7k|                   ? result(*std::forward<Exp>(exp))
 1336|  11.7k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  11.7k|    }
 1340|  11.7k|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1662|  18.4k|    {
 1663|  18.4k|        return std::move(value());
 1664|  18.4k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1613|    138|    {
 1614|    138|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    138|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    138|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    138|        return std::move(this->get_unexpected().error());
 1616|    138|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|    138|    {
  468|    138|        return m_unexpected;
  469|    138|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1485|  1.12k|    {
 1486|  1.12k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1597|  36.3k|    {
 1598|  36.3k|        return has_value();
 1599|  36.3k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  484|  72.6k|    {
  485|  72.6k|        return m_has_value;
  486|  72.6k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|  36.3k|    {
 1663|  36.3k|        return std::move(value());
 1664|  36.3k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|  36.3k|    {
 1627|  36.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  36.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  36.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  36.3k|        return this->get_value();
 1629|  36.3k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  450|  36.3k|    {
  451|  36.3k|        return m_value;
  452|  36.3k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|  2.79k|    {
 1476|  2.79k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|    412|    {
 1476|    412|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|    576|    {
  447|    576|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  5.76k|    {
 1177|  5.76k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2INS8_4codeELPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  3.83k|    {
 1476|  3.83k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJNS9_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  3.83k|    {
  447|  3.83k|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEcvbEv:
 1597|  5.33k|    {
 1598|  5.33k|        return has_value();
 1599|  5.33k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE9has_valueEv:
  484|  10.4k|    {
  485|  10.4k|        return m_has_value;
  486|  10.4k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5errorEv:
 1603|  1.88k|    {
 1604|  1.88k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.88k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.88k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.88k|        return this->get_unexpected().error();
 1606|  1.88k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE14get_unexpectedEv:
  467|  2.56k|    {
  468|  2.56k|        return m_unexpected;
  469|  2.56k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEC2ISB_vEEOT_:
 1429|    974|    {
 1430|    974|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  436|    974|    {
  437|    974|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    974|    {
 1177|    974|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5valueIS7_LPv0EEERT_v:
 1626|  1.35k|    {
 1627|  1.35k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.35k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.35k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.35k|        return this->get_value();
 1629|  1.35k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE9get_valueEv:
  450|  1.35k|    {
  451|  1.35k|        return m_value;
  452|  1.35k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEcvbEv:
 1597|    726|    {
 1598|    726|        return has_value();
 1599|    726|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9has_valueEv:
  484|  1.94k|    {
  485|  1.94k|        return m_has_value;
  486|  1.94k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    726|    {
 1177|    726|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEdeISB_LPv0EEEOT_v:
 1662|    974|    {
 1663|    974|        return std::move(value());
 1664|    974|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEE5valueISB_LPv0EEERT_v:
 1626|    974|    {
 1627|    974|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    974|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    974|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    974|        return this->get_value();
 1629|    974|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9get_valueEv:
  450|    974|    {
  451|    974|        return m_value;
  452|    974|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE3endEv:
 3333|  92.0k|    {
 3334|  92.0k|        return m_sentinel;
 3335|  92.0k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE15transform_errorIRFNS2_11parse_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|  1.51k|    {
 1837|  1.51k|        return detail::transform_error_impl(std::move(*this),
 1838|  1.51k|                                            std::forward<F>(f));
 1839|  1.51k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9eof_errorEEERFNS4_11parse_errorESA_ELPv0ESC_EEDaOT_OT0_:
 1322|  1.51k|{
 1323|  1.51k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.51k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.51k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.51k|            return result(*std::forward<Exp>(exp));
 1327|  1.51k|        }
 1328|       |
 1329|  1.51k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.51k|        return result(unexpect, monostate{});
 1331|  1.51k|    }
 1332|  1.51k|    else {
 1333|  1.51k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.51k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.51k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.35k, False: 164]
  |  |  ------------------
  ------------------
 1335|  1.51k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.51k|                   : result(unexpect,
 1337|    164|                            trivial_invoke(std::forward<F>(f),
 1338|    164|                                           std::forward<Exp>(exp).error()));
 1339|  1.51k|    }
 1340|  1.51k|}
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IS7_vEEOT_:
 1429|  1.35k|    {
 1430|  1.35k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  436|  1.35k|    {
  437|  1.35k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1485|    164|    {
 1486|    164|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEdeIS7_LPv0EEEOT_v:
 1662|  1.35k|    {
 1663|  1.35k|        return std::move(value());
 1664|  1.35k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE5beginEv:
 3329|  94.0k|    {
 3330|  94.0k|        return m_iterator;
 3331|  94.0k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEEC2IS9_vEEOT_:
 1429|    726|    {
 1430|    726|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  436|    726|    {
  437|    726|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESA_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1836|    726|    {
 1837|    726|        return detail::transform_error_impl(std::move(*this),
 1838|    726|                                            std::forward<F>(f));
 1839|    726|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS4_27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EEEENS4_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
 1322|    726|{
 1323|    726|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    726|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    726|        if (SCN_LIKELY(exp.has_value())) {
 1326|    726|            return result(*std::forward<Exp>(exp));
 1327|    726|        }
 1328|       |
 1329|    726|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    726|        return result(unexpect, monostate{});
 1331|    726|    }
 1332|    726|    else {
 1333|    726|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    726|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    726|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 726, False: 0]
  |  |  ------------------
  ------------------
 1335|    726|                   ? result(*std::forward<Exp>(exp))
 1336|    726|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    726|    }
 1340|    726|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EE9has_valueEv:
  484|  1.45k|    {
  485|  1.45k|        return m_has_value;
  486|  1.45k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEEdeIS9_LPv0EEEOT_v:
 1662|    726|    {
 1663|    726|        return std::move(value());
 1664|    726|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEE5valueIS9_LPv0EEERT_v:
 1626|    726|    {
 1627|    726|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    726|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    726|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    726|        return this->get_value();
 1629|    726|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EE9get_valueEv:
  450|    726|    {
  451|    726|        return m_value;
  452|    726|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEC2IS9_vEEOT_:
 1429|    726|    {
 1430|    726|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  436|    726|    {
  437|    726|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    726|    {
 1177|    726|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEcvbEv:
 1597|    726|    {
 1598|    726|        return has_value();
 1599|    726|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.45k|    {
  485|  1.45k|        return m_has_value;
  486|  1.45k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1662|    726|    {
 1663|    726|        return std::move(value());
 1664|    726|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1626|    726|    {
 1627|    726|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    726|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    726|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    726|        return this->get_value();
 1629|    726|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    726|    {
  451|    726|        return m_value;
  452|    726|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1836|    682|    {
 1837|    682|        return detail::transform_error_impl(std::move(*this),
 1838|    682|                                            std::forward<F>(f));
 1839|    682|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlSA_E_LPv0ESC_EEDaOT_OT0_:
 1322|    682|{
 1323|    682|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    682|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    682|        if (SCN_LIKELY(exp.has_value())) {
 1326|    682|            return result(*std::forward<Exp>(exp));
 1327|    682|        }
 1328|       |
 1329|    682|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    682|        return result(unexpect, monostate{});
 1331|    682|    }
 1332|    682|    else {
 1333|    682|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    682|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    682|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 682]
  |  |  ------------------
  ------------------
 1335|    682|                   ? result(*std::forward<Exp>(exp))
 1336|    682|                   : result(unexpect,
 1337|    682|                            trivial_invoke(std::forward<F>(f),
 1338|    682|                                           std::forward<Exp>(exp).error()));
 1339|    682|    }
 1340|    682|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5errorEv:
 1613|    682|    {
 1614|    682|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    682|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    682|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    682|        return std::move(this->get_unexpected().error());
 1616|    682|    }
_ZN3scn2v313scan_expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EEEC2EONS0_8expectedIS7_NS0_10scan_errorEEE:
 3647|  1.17k|    {
 3648|  1.17k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEC2ISA_LPv0EEET_SF_:
 3315|  31.9k|    {
 3316|  31.9k|    }
_ZN3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEEC2ISK_LPv0ELSN_0EEEONS0_10unexpectedIT_EE:
 1475|     44|    {
 1476|     44|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EEC2IJSL_EvEENS0_10unexpect_tEDpOT_:
  625|     44|    {
  626|     44|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|     44|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESL_EEEvDpOT_:
  688|     44|    {
  689|     44|        scn::detail::construct_at(unexpected_ptr(),
  690|     44|                                  std::forward<Args>(args)...);
  691|     44|        m_has_value = false;
  692|     44|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|    132|    {
  718|    132|        return reinterpret_cast<unexpected<E>*>(
  719|    132|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|    132|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|    132|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|     44|    {
 1177|     44|    }
_ZNK3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|     44|    {
 1598|     44|        return has_value();
 1599|     44|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|    132|    {
  675|    132|        return m_has_value;
  676|    132|    }
_ZNR3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1603|     44|    {
 1604|     44|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     44|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     44|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|     44|        return this->get_unexpected().error();
 1606|     44|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|     44|    {
  658|     44|        return *unexpected_ptr();
  659|     44|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|     44|    {
  631|     44|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 0, False: 44]
  ------------------
  632|      0|            destroy_value();
  633|      0|        }
  634|     44|        else {
  635|     44|            destroy_unexpected();
  636|     44|        }
  637|     44|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|     44|    {
  700|     44|        scn::detail::destroy_at(unexpected_ptr());
  701|     44|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEcvbEv:
 1597|  5.15k|    {
 1598|  5.15k|        return has_value();
 1599|  5.15k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  9.80k|    {
  485|  9.80k|        return m_has_value;
  486|  9.80k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEE5errorEv:
 1603|  3.72k|    {
 1604|  3.72k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  3.72k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.72k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  3.72k|        return this->get_unexpected().error();
 1606|  3.72k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  3.72k|    {
  468|  3.72k|        return m_unexpected;
  469|  3.72k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEdeIS7_LPv0EEEOT_v:
 1662|    928|    {
 1663|    928|        return std::move(value());
 1664|    928|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEE5valueIS7_LPv0EEERT_v:
 1626|    928|    {
 1627|    928|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    928|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    928|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    928|        return this->get_value();
 1629|    928|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE9get_valueEv:
  450|    928|    {
  451|    928|        return m_value;
  452|    928|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|  1.25k|    {
 1476|  1.25k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  1.39k|    {
  447|  1.39k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  21.6k|    {
 1177|  21.6k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|  13.5k|    {
 1476|  13.5k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  13.5k|    {
  447|  13.5k|    }
_ZNK3scn2v38expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1597|  22.7k|    {
 1598|  22.7k|        return has_value();
 1599|  22.7k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  37.4k|    {
  485|  37.4k|        return m_has_value;
  486|  37.4k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1603|  6.86k|    {
 1604|  6.86k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  6.86k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.86k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  6.86k|        return this->get_unexpected().error();
 1606|  6.86k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  6.86k|    {
  468|  6.86k|        return m_unexpected;
  469|  6.86k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1429|  4.48k|    {
 1430|  4.48k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|  4.48k|    {
  437|  4.48k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  4.48k|    {
 1177|  4.48k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1626|  6.71k|    {
 1627|  6.71k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  6.71k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.71k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  6.71k|        return this->get_value();
 1629|  6.71k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  6.71k|    {
  451|  6.71k|        return m_value;
  452|  6.71k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  3.37k|    {
 1598|  3.37k|        return has_value();
 1599|  3.37k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|  8.97k|    {
  485|  8.97k|        return m_has_value;
  486|  8.97k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.37k|    {
 1177|  3.37k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1662|  4.48k|    {
 1663|  4.48k|        return std::move(value());
 1664|  4.48k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1626|  4.48k|    {
 1627|  4.48k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.48k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.48k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.48k|        return this->get_value();
 1629|  4.48k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|  4.48k|    {
  451|  4.48k|        return m_value;
  452|  4.48k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  6.85k|    {
 1837|  6.85k|        return detail::transform_error_impl(std::move(*this),
 1838|  6.85k|                                            std::forward<F>(f));
 1839|  6.85k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|  6.85k|{
 1323|  6.85k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  6.85k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  6.85k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  6.85k|            return result(*std::forward<Exp>(exp));
 1327|  6.85k|        }
 1328|       |
 1329|  6.85k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  6.85k|        return result(unexpect, monostate{});
 1331|  6.85k|    }
 1332|  6.85k|    else {
 1333|  6.85k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  6.85k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  6.85k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 6.71k, False: 138]
  |  |  ------------------
  ------------------
 1335|  6.85k|                   ? result(*std::forward<Exp>(exp))
 1336|  6.85k|                   : result(unexpect,
 1337|    138|                            trivial_invoke(std::forward<F>(f),
 1338|    138|                                           std::forward<Exp>(exp).error()));
 1339|  6.85k|    }
 1340|  6.85k|}
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1429|  6.71k|    {
 1430|  6.71k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  6.71k|    {
  437|  6.71k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1485|    138|    {
 1486|    138|    }
_ZNO3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1662|  6.71k|    {
 1663|  6.71k|        return std::move(value());
 1664|  6.71k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEC2IS6_vEEOT_:
 1429|  3.37k|    {
 1430|  3.37k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  436|  3.37k|    {
  437|  3.37k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  3.37k|    {
 1837|  3.37k|        return detail::transform_error_impl(std::move(*this),
 1838|  3.37k|                                            std::forward<F>(f));
 1839|  3.37k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
 1322|  3.37k|{
 1323|  3.37k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  3.37k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  3.37k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  3.37k|            return result(*std::forward<Exp>(exp));
 1327|  3.37k|        }
 1328|       |
 1329|  3.37k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  3.37k|        return result(unexpect, monostate{});
 1331|  3.37k|    }
 1332|  3.37k|    else {
 1333|  3.37k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  3.37k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  3.37k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.37k, False: 0]
  |  |  ------------------
  ------------------
 1335|  3.37k|                   ? result(*std::forward<Exp>(exp))
 1336|  3.37k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  3.37k|    }
 1340|  3.37k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9has_valueEv:
  484|  6.74k|    {
  485|  6.74k|        return m_has_value;
  486|  6.74k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1662|  3.37k|    {
 1663|  3.37k|        return std::move(value());
 1664|  3.37k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1626|  3.37k|    {
 1627|  3.37k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.37k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.37k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.37k|        return this->get_value();
 1629|  3.37k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9get_valueEv:
  450|  3.37k|    {
  451|  3.37k|        return m_value;
  452|  3.37k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|  3.37k|    {
 1430|  3.37k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  436|  3.37k|    {
  437|  3.37k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.37k|    {
 1177|  3.37k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEcvbEv:
 1597|  3.37k|    {
 1598|  3.37k|        return has_value();
 1599|  3.37k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9has_valueEv:
  484|  6.74k|    {
  485|  6.74k|        return m_has_value;
  486|  6.74k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|  3.37k|    {
 1663|  3.37k|        return std::move(value());
 1664|  3.37k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|  3.37k|    {
 1627|  3.37k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.37k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.37k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.37k|        return this->get_value();
 1629|  3.37k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9get_valueEv:
  450|  3.37k|    {
  451|  3.37k|        return m_value;
  452|  3.37k|    }
_ZN3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1475|     64|    {
 1476|     64|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  625|     64|    {
  626|     64|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|     64|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESH_EEEvDpOT_:
  688|     64|    {
  689|     64|        scn::detail::construct_at(unexpected_ptr(),
  690|     64|                                  std::forward<Args>(args)...);
  691|     64|        m_has_value = false;
  692|     64|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|    192|    {
  718|    192|        return reinterpret_cast<unexpected<E>*>(
  719|    192|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|    192|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|    192|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|     64|    {
 1177|     64|    }
_ZNK3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|     64|    {
 1598|     64|        return has_value();
 1599|     64|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|    192|    {
  675|    192|        return m_has_value;
  676|    192|    }
_ZNR3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1603|     64|    {
 1604|     64|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     64|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     64|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|     64|        return this->get_unexpected().error();
 1606|     64|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|     64|    {
  658|     64|        return *unexpected_ptr();
  659|     64|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|     64|    {
  631|     64|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 0, False: 64]
  ------------------
  632|      0|            destroy_value();
  633|      0|        }
  634|     64|        else {
  635|     64|            destroy_unexpected();
  636|     64|        }
  637|     64|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|     64|    {
  700|     64|        scn::detail::destroy_at(unexpected_ptr());
  701|     64|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  18.6k|    {
 2855|  18.6k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  18.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  18.6k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  18.6k|    {
 2836|  18.6k|        return t.data();
 2837|  18.6k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3220|  53.5k|    {
 3221|  53.5k|        return ranges::empty(derived())
  ------------------
  |  Branch (3221:16): [True: 6.21k, False: 47.3k]
  ------------------
 3222|  53.5k|                   ? nullptr
 3223|  53.5k|                   : std::addressof(*ranges::begin(derived()));
 3224|  53.5k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|  53.5k|    {
 3005|  53.5k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  53.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|  53.5k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|  53.5k|    {
 2978|  53.5k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  53.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|  53.5k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5emptyEv:
 3338|  53.5k|    {
 3339|  53.5k|        return m_iterator == m_sentinel;
 3340|  53.5k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3179|   100k|    {
 3180|   100k|        return static_cast<D&>(*this);
 3181|   100k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  47.3k|    {
 2724|  47.3k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  47.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  47.3k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  47.3k|    {
 2705|  47.3k|        return decay_copy(t.begin());
 2706|  47.3k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEE15transform_errorIRFNS0_10scan_errorESC_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSI_:
 1836|    248|    {
 1837|    248|        return detail::transform_error_impl(std::move(*this),
 1838|    248|                                            std::forward<F>(f));
 1839|    248|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_9sign_typeEEENS6_9eof_errorEEERFNS0_10scan_errorESE_ELPv0ESG_EEDaOT_OT0_:
 1322|    248|{
 1323|    248|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    248|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    248|        if (SCN_LIKELY(exp.has_value())) {
 1326|    248|            return result(*std::forward<Exp>(exp));
 1327|    248|        }
 1328|       |
 1329|    248|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    248|        return result(unexpect, monostate{});
 1331|    248|    }
 1332|    248|    else {
 1333|    248|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    248|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    248|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 248, False: 0]
  |  |  ------------------
  ------------------
 1335|    248|                   ? result(*std::forward<Exp>(exp))
 1336|    248|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    248|    }
 1340|    248|}
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1429|    248|    {
 1430|    248|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  436|    248|    {
  437|    248|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    248|    {
 1177|    248|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|    248|    {
 1598|    248|        return has_value();
 1599|    248|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|    496|    {
  485|    496|        return m_has_value;
  486|    496|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEdeISB_LPv0EEEOT_v:
 1662|    248|    {
 1663|    248|        return std::move(value());
 1664|    248|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1626|    248|    {
 1627|    248|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    248|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    248|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    248|        return this->get_value();
 1629|    248|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    248|    {
  451|    248|        return m_value;
  452|    248|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1822|    496|    {
 1823|    496|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|    496|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlSA_E_LPv0ESD_EEDaOT_OT0_:
 1322|    496|{
 1323|    496|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    496|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    496|        if (SCN_LIKELY(exp.has_value())) {
 1326|    496|            return result(*std::forward<Exp>(exp));
 1327|    496|        }
 1328|       |
 1329|    496|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    496|        return result(unexpect, monostate{});
 1331|    496|    }
 1332|    496|    else {
 1333|    496|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    496|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    496|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 496]
  |  |  ------------------
  ------------------
 1335|    496|                   ? result(*std::forward<Exp>(exp))
 1336|    496|                   : result(unexpect,
 1337|    496|                            trivial_invoke(std::forward<F>(f),
 1338|    496|                                           std::forward<Exp>(exp).error()));
 1339|    496|    }
 1340|    496|}
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E0_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3667|     12|    auto&& SCN_TRY_TMP = (x);                          \
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|    236|    {
 2724|    236|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    236|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|    236|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESO_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|    236|    {
 2705|    236|        return decay_copy(t.begin());
 2706|    236|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3667|    216|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|  1.11k|    {
 1837|  1.11k|        return detail::transform_error_impl(std::move(*this),
 1838|  1.11k|                                            std::forward<F>(f));
 1839|  1.11k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1322|  1.11k|{
 1323|  1.11k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.11k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.11k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.11k|            return result(*std::forward<Exp>(exp));
 1327|  1.11k|        }
 1328|       |
 1329|  1.11k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.11k|        return result(unexpect, monostate{});
 1331|  1.11k|    }
 1332|  1.11k|    else {
 1333|  1.11k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.11k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.11k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.11k, False: 0]
  |  |  ------------------
  ------------------
 1335|  1.11k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.11k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  1.11k|    }
 1340|  1.11k|}
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|  1.11k|    {
 1430|  1.11k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|  1.11k|    {
  437|  1.11k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.11k|    {
 1177|  1.11k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|  1.11k|    {
 1598|  1.11k|        return has_value();
 1599|  1.11k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.22k|    {
  485|  2.22k|        return m_has_value;
  486|  2.22k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|  1.11k|    {
 1663|  1.11k|        return std::move(value());
 1664|  1.11k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|  1.11k|    {
 1627|  1.11k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.11k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.11k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.11k|        return this->get_value();
 1629|  1.11k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.11k|    {
  451|  1.11k|        return m_value;
  452|  1.11k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1822|  1.12k|    {
 1823|  1.12k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|  1.12k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1322|  1.12k|{
 1323|  1.12k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.12k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.12k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.12k|            return result(*std::forward<Exp>(exp));
 1327|  1.12k|        }
 1328|       |
 1329|  1.12k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.12k|        return result(unexpect, monostate{});
 1331|  1.12k|    }
 1332|  1.12k|    else {
 1333|  1.12k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.12k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.12k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 1.12k]
  |  |  ------------------
  ------------------
 1335|  1.12k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.12k|                   : result(unexpect,
 1337|  1.12k|                            trivial_invoke(std::forward<F>(f),
 1338|  1.12k|                                           std::forward<Exp>(exp).error()));
 1339|  1.12k|    }
 1340|  1.12k|}
_ZN3scn2v313scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3647|  1.12k|    {
 3648|  1.12k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1652|  5.91k|    {
 1653|  5.91k|        return value();
 1654|  5.91k|    }
_ZN3scn2v36detail22parse_presentation_setIwRNS0_4impl22nonascii_specs_handlerEEENSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEERPKS8_SD_OT0_:
 6696|    888|{
 6697|    888|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|    888|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    888|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|    888|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|    888|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    888|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|    888|    auto start = begin;
 6701|    888|    ++begin;
 6702|       |
 6703|    888|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    888|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 888]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|      0|        return {};
 6708|      0|    }
 6709|    888|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 210, False: 678]
  ------------------
 6710|    210|        handler.on_charset_inverted();
 6711|    210|        ++begin;
 6712|    210|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    210|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 210]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|      0|            return {};
 6717|      0|        }
 6718|    210|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 0, False: 210]
  ------------------
 6719|      0|            handler.on_charset_single(char32_t{']'});
 6720|      0|            ++begin;
 6721|      0|        }
 6722|    210|    }
 6723|    678|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 0, False: 678]
  ------------------
 6724|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|      0|    }
 6726|       |
 6727|  14.0k|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 14.0k, False: 0]
  ------------------
 6728|  14.0k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  14.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 14.0k]
  |  |  ------------------
  ------------------
 6729|      0|            break;
 6730|      0|        }
 6731|       |
 6732|  14.0k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 888, False: 13.1k]
  ------------------
 6733|    888|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|    888|        }
 6735|       |
 6736|  13.1k|        parse_presentation_set_literal(begin, end, handler);
 6737|  13.1k|    }
 6738|       |
 6739|      0|    SCN_UNLIKELY_ATTR
 6740|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6741|      0|    return {};
 6742|    888|}
_ZN3scn2v36detail30parse_presentation_set_literalIwRNS0_4impl22nonascii_specs_handlerEEEvRPKT_S8_OT0_:
 6660|  13.1k|{
 6661|  13.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  13.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|  13.1k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|  13.1k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  13.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 13.1k]
  |  |  ------------------
  ------------------
 6665|      0|        return;
 6666|      0|    }
 6667|       |
 6668|  13.1k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 13.1k, False: 0]
  |  Branch (6668:25): [True: 264, False: 12.8k]
  |  Branch (6668:49): [True: 264, False: 0]
  ------------------
 6669|  13.1k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 192, False: 72]
  ------------------
 6670|    192|        ++begin;
 6671|       |
 6672|    192|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|    192|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|    192|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 192]
  |  |  ------------------
  ------------------
 6674|      0|            return;
 6675|      0|        }
 6676|       |
 6677|    192|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|    192|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 192]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|      0|            return;
 6682|      0|        }
 6683|       |
 6684|    192|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|    192|        return;
 6686|    192|    }
 6687|       |
 6688|  12.9k|    handler.on_charset_single(cp_first);
 6689|  12.9k|}
_ZN3scn2v36detail33parse_presentation_set_code_pointIwRNS0_4impl22nonascii_specs_handlerEEEDiRPKT_S8_OT0_:
 6636|  13.3k|{
 6637|  13.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  13.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|  13.3k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|  13.3k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  26.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 13.3k]
  |  |  |  Branch (859:45): [True: 0, False: 13.3k]
  |  |  |  Branch (859:45): [True: 0, False: 13.3k]
  |  |  ------------------
  ------------------
 6641|      0|        handler.on_error("Invalid encoding in format string");
 6642|      0|        return invalid_code_point;
 6643|      0|    }
 6644|       |
 6645|  13.3k|    const auto cp =
 6646|  13.3k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|  13.3k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  13.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 13.3k]
  |  |  ------------------
  ------------------
 6648|      0|        handler.on_error("Invalid encoding in format string");
 6649|      0|        return invalid_code_point;
 6650|      0|    }
 6651|       |
 6652|  13.3k|    begin += len;
 6653|  13.3k|    return cp;
 6654|  13.3k|}
_ZNK3scn2v36detail12format_specs14charset_stringIwEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 6251|  28.0k|    {
 6252|  28.0k|        return {reinterpret_cast<const CharT*>(charset_string_data),
 6253|  28.0k|                charset_string_size};
 6254|  28.0k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1429|  1.08k|    {
 1430|  1.08k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  436|  1.08k|    {
  437|  1.08k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA29_KcEEEDaDpOT_:
 3653|  2.13k|{
 3654|  2.13k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  2.13k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  2.13k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  9.62k|    {
 2855|  9.62k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  9.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  9.62k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  9.62k|    {
 2836|  9.62k|        return t.data();
 2837|  9.62k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5465|   267k|    {
 5466|   267k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   267k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 267k]
  |  |  ------------------
  ------------------
 5467|      0|            return max_size();
 5468|      0|        }
 5469|       |
 5470|   267k|        return static_cast<std::size_t>(m_desc &
 5471|   267k|                                        ((1 << detail::packed_arg_bits) - 1));
 5472|   267k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5490|   428k|    {
 5491|   428k|        return (m_desc & detail::is_unpacked_bit) == 0;
 5492|   428k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5433|   160k|    {
 5434|   160k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   160k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 160k]
  |  |  ------------------
  ------------------
 5435|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5436|      0|                return m_args[id];
 5437|      0|            }
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|   160k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|   160k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 68, False: 160k]
  |  |  ------------------
  ------------------
 5442|     68|            return {};
 5443|     68|        }
 5444|       |
 5445|   160k|        const auto t = type(id);
 5446|   160k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|   160k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.60k, False: 158k]
  |  |  ------------------
  ------------------
 5447|  1.60k|            return {};
 5448|  1.60k|        }
 5449|       |
 5450|   158k|        basic_scan_arg<Context> arg;
 5451|   158k|        arg.m_type = t;
 5452|   158k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5452:13): [True: 158k, False: 0]
  ------------------
 5453|   158k|            arg.m_value.ref_value = m_builtin_values[id];
 5454|   158k|        }
 5455|      0|        else {
 5456|      0|            arg.m_value = m_values[id];
 5457|      0|        }
 5458|   158k|        return arg;
 5459|   160k|    }
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5240|   160k|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4897|   264k|    arg_value() = default;
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5499|   160k|    {
 5500|       |        // First (0th) index is size, types start after that
 5501|   160k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5502|   160k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5503|   160k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5504|   160k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5494|   158k|    {
 5495|   158k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5496|   158k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5246|   316k|    {
 5247|   316k|        return m_type != detail::arg_type::none_type;
 5248|   316k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  6.67k|{
 8417|  6.67k|#define SCN_VISIT(Type)                                         \
 8418|  6.67k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  6.67k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  6.67k|    }                                                           \
 8421|  6.67k|    else {                                                      \
 8422|  6.67k|        return vis(monostate_val);                              \
 8423|  6.67k|    }
 8424|       |
 8425|  6.67k|    monostate monostate_val{};
 8426|       |
 8427|  6.67k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 6.67k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 6.67k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|    742|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 742, False: 5.93k]
  ------------------
 8433|    742|            SCN_VISIT(int);
  ------------------
  |  | 8418|    742|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    742|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    742|    }                                                           \
  |  | 8421|    742|    else {                                                      \
  |  | 8422|    742|        return vis(monostate_val);                              \
  |  | 8423|    742|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 6.67k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 6.67k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 6.67k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 6.67k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|    742|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 742, False: 5.93k]
  ------------------
 8443|    742|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|    742|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    742|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    742|    }                                                           \
  |  | 8421|    742|    else {                                                      \
  |  | 8422|    742|        return vis(monostate_val);                              \
  |  | 8423|    742|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 6.67k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 6.67k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|    742|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 742, False: 5.93k]
  ------------------
 8449|    742|            SCN_VISIT(void*);
  ------------------
  |  | 8418|    742|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    742|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    742|    }                                                           \
  |  | 8421|    742|    else {                                                      \
  |  | 8422|    742|        return vis(monostate_val);                              \
  |  | 8423|    742|    }
  ------------------
 8450|    742|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 742, False: 5.93k]
  ------------------
 8451|    742|            SCN_VISIT(bool);
  ------------------
  |  | 8418|    742|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    742|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    742|    }                                                           \
  |  | 8421|    742|    else {                                                      \
  |  | 8422|    742|        return vis(monostate_val);                              \
  |  | 8423|    742|    }
  ------------------
 8452|    742|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 742, False: 5.93k]
  ------------------
 8453|    742|            SCN_VISIT(char);
  ------------------
  |  | 8418|    742|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    742|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    742|    }                                                           \
  |  | 8421|    742|    else {                                                      \
  |  | 8422|    742|        return vis(monostate_val);                              \
  |  | 8423|    742|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 6.67k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 6.67k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 6.67k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|    742|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 742, False: 5.93k]
  ------------------
 8461|    742|            SCN_VISIT(double);
  ------------------
  |  | 8418|    742|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    742|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    742|    }                                                           \
  |  | 8421|    742|    else {                                                      \
  |  | 8422|    742|        return vis(monostate_val);                              \
  |  | 8423|    742|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 6.67k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|    742|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 742, False: 5.93k]
  ------------------
 8465|    742|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|    742|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    742|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    742|    }                                                           \
  |  | 8421|    742|    else {                                                      \
  |  | 8422|    742|        return vis(monostate_val);                              \
  |  | 8423|    742|    }
  ------------------
 8466|    742|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 742, False: 5.93k]
  ------------------
 8467|    742|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|    742|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    742|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    742|    }                                                           \
  |  | 8421|    742|    else {                                                      \
  |  | 8422|    742|        return vis(monostate_val);                              \
  |  | 8423|    742|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 6.67k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|    742|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 742, False: 5.93k]
  ------------------
 8471|    742|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|    742|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    742|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    742|    }                                                           \
  |  | 8421|    742|    else {                                                      \
  |  | 8422|    742|        return vis(monostate_val);                              \
  |  | 8423|    742|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 6.67k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 6.67k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 6.67k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 6.67k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 6.67k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  6.67k|            SCN_CLANG_POP
 8495|  6.67k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  2.18k|    {
 1837|  2.18k|        return detail::transform_error_impl(std::move(*this),
 1838|  2.18k|                                            std::forward<F>(f));
 1839|  2.18k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|  2.18k|{
 1323|  2.18k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  2.18k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  2.18k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  2.18k|            return result(*std::forward<Exp>(exp));
 1327|  2.18k|        }
 1328|       |
 1329|  2.18k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  2.18k|        return result(unexpect, monostate{});
 1331|  2.18k|    }
 1332|  2.18k|    else {
 1333|  2.18k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.18k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.18k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.08k, False: 102]
  |  |  ------------------
  ------------------
 1335|  2.18k|                   ? result(*std::forward<Exp>(exp))
 1336|  2.18k|                   : result(unexpect,
 1337|    102|                            trivial_invoke(std::forward<F>(f),
 1338|    102|                                           std::forward<Exp>(exp).error()));
 1339|  2.18k|    }
 1340|  2.18k|}
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1485|    102|    {
 1486|    102|    }
_ZNO3scn2v38expectedIPKcNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1662|  2.08k|    {
 1663|  2.08k|        return std::move(value());
 1664|  2.08k|    }
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5544|   267k|    {
 5545|   267k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8055|   267k|    {
 8056|   267k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   267k|{
 7044|   267k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   267k|    handler.check_args_exhausted();
 7046|   267k|    return handler.get_error();
 7047|   267k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   267k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   267k|    auto begin = format.data();
 7013|   267k|    auto it = begin;
 7014|   267k|    const auto end = format.data() + format.size();
 7015|       |
 7016|   652k|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 641k, False: 11.0k]
  ------------------
 7017|   641k|        const auto ch = *it++;
 7018|   641k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 272k, False: 368k]
  ------------------
 7019|   272k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   272k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   272k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 253k, False: 19.2k]
  ------------------
 7023|   253k|                return;
 7024|   253k|            }
 7025|   272k|        }
 7026|   368k|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 4.22k, False: 364k]
  ------------------
 7027|  4.22k|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|  7.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.88k, False: 1.34k]
  |  |  |  Branch (859:45): [True: 604, False: 3.62k]
  |  |  |  Branch (859:45): [True: 2.27k, False: 1.34k]
  |  |  ------------------
  ------------------
 7028|  2.88k|                handler.on_error("Unmatched '}' in format string");
 7029|  2.88k|                return;
 7030|  2.88k|            }
 7031|       |
 7032|  1.34k|            handler.on_literal_text(begin, it);
 7033|  1.34k|            begin = ++it;
 7034|  1.34k|        }
 7035|   641k|    }
 7036|       |
 7037|  11.0k|    handler.on_literal_text(begin, end);
 7038|  11.0k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6941|   272k|{
 6942|   272k|    struct id_adapter {
 6943|   272k|        constexpr void operator()()
 6944|   272k|        {
 6945|   272k|            arg_id = handler.on_arg_id();
 6946|   272k|        }
 6947|   272k|        constexpr void operator()(std::size_t id)
 6948|   272k|        {
 6949|   272k|            arg_id = handler.on_arg_id(id);
 6950|   272k|        }
 6951|       |
 6952|   272k|        constexpr void on_error(const char* msg)
 6953|   272k|        {
 6954|   272k|            SCN_UNLIKELY_ATTR
 6955|   272k|            handler.on_error(msg);
 6956|   272k|        }
 6957|       |
 6958|   272k|        Handler& handler;
 6959|   272k|        std::size_t arg_id;
 6960|   272k|    };
 6961|       |
 6962|   272k|    ++begin;
 6963|   272k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   272k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 116, False: 272k]
  |  |  ------------------
  ------------------
 6964|    116|        handler.on_error("Unexpected end of replacement field");
 6965|    116|        return begin;
 6966|    116|    }
 6967|       |
 6968|   272k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 6.68k, False: 265k]
  ------------------
 6969|  6.68k|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|  6.68k|    }
 6971|   265k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 7.07k, False: 258k]
  ------------------
 6972|  7.07k|        handler.on_literal_text(begin, begin + 1);
 6973|  7.07k|    }
 6974|   258k|    else {
 6975|   258k|        auto adapter = id_adapter{handler, 0};
 6976|   258k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|   258k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   258k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 110, False: 258k]
  |  |  ------------------
  ------------------
 6979|    110|            handler.on_error("Missing '}' in format string");
 6980|    110|            return begin;
 6981|    110|        }
 6982|       |
 6983|   258k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 140, False: 258k]
  ------------------
 6984|    140|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|    140|        }
 6986|   258k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 153k, False: 104k]
  ------------------
 6987|   153k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   153k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 92, False: 153k]
  |  |  ------------------
  ------------------
 6988|     92|                handler.on_error("Unexpected end of replacement field");
 6989|     92|                return begin;
 6990|     92|            }
 6991|   153k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|   153k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   307k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.38k, False: 149k]
  |  |  |  Branch (859:45): [True: 0, False: 153k]
  |  |  |  Branch (859:45): [True: 4.38k, False: 149k]
  |  |  ------------------
  ------------------
 6993|  4.38k|                handler.on_error("Unknown format specifier");
 6994|  4.38k|                return begin;
 6995|  4.38k|            }
 6996|   153k|        }
 6997|   104k|        else {
 6998|   104k|            SCN_UNLIKELY_ATTR
 6999|   104k|            handler.on_error("Missing '}' in format string");
 7000|   104k|            return begin;
 7001|   104k|        }
 7002|   258k|    }
 7003|   163k|    return begin + 1;
 7004|   272k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 8038|   160k|    {
 8039|   160k|        return m_args.get(id);
 8040|   160k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE4argsEv:
 8043|  6.82k|    {
 8044|  6.82k|        return m_args;
 8045|  6.82k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8048|   155k|    {
 8049|   155k|        return m_locale;
 8050|   155k|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5565|   150k|    {
 5566|   150k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|   150k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 150k]
  |  |  ------------------
  ------------------
 5567|     42|            on_error(
 5568|     42|                "Cannot switch from manual to automatic argument indexing");
 5569|     42|            return 0;
 5570|     42|        }
 5571|       |
 5572|   150k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5573|   150k|        do_check_arg_id(id);
 5574|   150k|        return id;
 5575|   150k|    }
_ZNK3scn2v324basic_scan_parse_contextIcE8on_errorEPKc:
 5589|    122|    {
 5590|    122|        return detail::handle_error(
 5591|    122|            scan_error{scan_error::invalid_format_string, msg});
 5592|    122|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6053|   160k|{
 6054|   160k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6054:9): [Folded - Ignored]
  ------------------
 6055|   160k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6055:10): [Folded - Ignored]
  |  Branch (6055:22): [Folded - Ignored]
  ------------------
 6056|       |        // The cast below will cause an error on gcc pre-12
 6057|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6058|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6058:13): [True: 0, False: 0]
  ------------------
 6059|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6060|      0|            SCN_UNLIKELY_ATTR
 6061|      0|            on_error("Argument not found");
 6062|      0|        }
 6063|      0|    }
 6064|   160k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|   258k|{
 6443|   258k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   258k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   258k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|   258k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 258k, False: 0]
  |  Branch (6444:26): [True: 115k, False: 143k]
  ------------------
 6445|   115k|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|   115k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|   115k|    }
 6447|       |
 6448|   143k|    handler();
 6449|   143k|    return begin;
 6450|   258k|}
impl.cpp:_ZN3scn2v36detail15do_parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6412|   115k|{
 6413|   115k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   115k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   115k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6414|       |
 6415|   115k|    CharT c = *begin;
 6416|   115k|    if (c < CharT{'0'} || c > CharT{'9'}) {
  ------------------
  |  Branch (6416:9): [True: 104k, False: 11.0k]
  |  Branch (6416:27): [True: 398, False: 10.6k]
  ------------------
 6417|   104k|        handler.on_error("Invalid argument ID");
 6418|   104k|        return begin;
 6419|   104k|    }
 6420|       |
 6421|  10.6k|    int idx = 0;
 6422|  10.6k|    if (c != CharT{'0'}) {
  ------------------
  |  Branch (6422:9): [True: 360, False: 10.2k]
  ------------------
 6423|    360|        idx = parse_simple_int(begin, end);
 6424|    360|    }
 6425|  10.2k|    else {
 6426|  10.2k|        ++begin;
 6427|  10.2k|    }
 6428|       |
 6429|  10.6k|    if (begin == end || (*begin != CharT{'}'} && *begin != CharT{':'})) {
  ------------------
  |  Branch (6429:9): [True: 110, False: 10.5k]
  |  Branch (6429:26): [True: 10.3k, False: 140]
  |  Branch (6429:50): [True: 108, False: 10.2k]
  ------------------
 6430|    218|        handler.on_error("Invalid argument ID");
 6431|    218|        return begin;
 6432|    218|    }
 6433|  10.4k|    handler(idx);
 6434|       |
 6435|  10.4k|    return begin;
 6436|  10.6k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapter8on_errorEPKc:
 6953|   104k|        {
 6954|   104k|            SCN_UNLIKELY_ATTR
 6955|   104k|            handler.on_error(msg);
 6956|   104k|        }
_ZN3scn2v36detail16parse_simple_intIcEEiRPKT_S5_:
 6391|  27.4k|{
 6392|  27.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  27.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  27.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6393|  27.4k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  27.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  27.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6394|       |
 6395|  27.4k|    unsigned long long value = 0;
 6396|   101k|    do {
 6397|   101k|        value *= 10;
 6398|   101k|        value += static_cast<unsigned long long>(*begin - '0');
 6399|   101k|        if (value >
  ------------------
  |  Branch (6399:13): [True: 116, False: 101k]
  ------------------
 6400|   101k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6401|    116|            return -1;
 6402|    116|        }
 6403|   101k|        ++begin;
 6404|   101k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6404:14): [True: 101k, False: 312]
  |  Branch (6404:30): [True: 90.0k, False: 11.2k]
  |  Branch (6404:47): [True: 74.3k, False: 15.6k]
  ------------------
 6405|  27.3k|    return static_cast<int>(value);
 6406|  27.4k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEm:
 6948|  10.4k|        {
 6949|  10.4k|            arg_id = handler.on_arg_id(id);
 6950|  10.4k|        }
_ZN3scn2v324basic_scan_parse_contextIcE12check_arg_idEm:
 5578|  10.4k|    {
 5579|  10.4k|        if (SCN_UNLIKELY(m_next_arg_id > 0)) {
  ------------------
  |  |  859|  10.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 80, False: 10.3k]
  |  |  ------------------
  ------------------
 5580|     80|            on_error(
 5581|     80|                "Cannot switch from manual to automatic argument indexing");
 5582|     80|            return;
 5583|     80|        }
 5584|  10.3k|        m_next_arg_id = -1;
 5585|  10.3k|        do_check_arg_id(id);
 5586|  10.3k|    }
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|   143k|        {
 6945|   143k|            arg_id = handler.on_arg_id();
 6946|   143k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5251|   307k|    {
 5252|   307k|        return m_type;
 5253|   307k|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5560|   149k|    {
 5561|   149k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5562|   149k|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5549|   302k|    {
 5550|   302k|        return m_format.data();
 5551|   302k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7121|   153k|    {
 7122|   153k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   153k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   153k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|   153k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6857|   153k|{
 6858|   153k|    auto do_presentation = [&]() -> const CharT* {
 6859|   153k|        if (*begin == CharT{'['}) {
 6860|   153k|            auto set = parse_presentation_set(begin, end, handler);
 6861|   153k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|   153k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|   153k|                return begin;
 6866|   153k|            }
 6867|   153k|            handler.on_character_set_string(set);
 6868|   153k|            return begin;
 6869|   153k|        }
 6870|   153k|        if (*begin == CharT{'/'}) {
 6871|   153k|            return parse_presentation_regex(begin, end, handler);
 6872|   153k|        }
 6873|   153k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   153k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|   153k|            handler.on_error("Invalid type specifier in format string");
 6876|   153k|            return begin;
 6877|   153k|        }
 6878|   153k|        handler.on_type(type);
 6879|   153k|        return begin;
 6880|   153k|    };
 6881|       |
 6882|   153k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 152k, False: 1.10k]
  |  Branch (6882:28): [True: 2.44k, False: 150k]
  ------------------
 6883|   153k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 896, False: 1.54k]
  |  Branch (6883:36): [True: 844, False: 52]
  ------------------
 6884|    844|        return do_presentation();
 6885|    844|    }
 6886|       |
 6887|   152k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   152k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 152k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|   152k|    begin = parse_align(begin, end, handler);
 6893|   152k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   152k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 124, False: 152k]
  |  |  ------------------
  ------------------
 6894|    124|        handler.on_error("Unexpected end of format string");
 6895|    124|        return begin;
 6896|    124|    }
 6897|       |
 6898|   152k|    begin = parse_width(begin, end, handler);
 6899|   152k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   152k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 120, False: 152k]
  |  |  ------------------
  ------------------
 6900|    120|        handler.on_error("Unexpected end of format string");
 6901|    120|        return begin;
 6902|    120|    }
 6903|       |
 6904|   152k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 19.2k, False: 133k]
  ------------------
 6905|  19.2k|        ++begin;
 6906|  19.2k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  19.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 40, False: 19.1k]
  |  |  ------------------
  ------------------
 6907|     40|            handler.on_error("Unexpected end of format string");
 6908|     40|            return begin;
 6909|     40|        }
 6910|  19.1k|        begin = parse_precision(begin, end, handler);
 6911|  19.1k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  19.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 114, False: 19.0k]
  |  |  ------------------
  ------------------
 6912|    114|            handler.on_error("Unexpected end of format string");
 6913|    114|            return begin;
 6914|    114|        }
 6915|  19.1k|    }
 6916|       |
 6917|   152k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 1.02k, False: 151k]
  ------------------
 6918|  1.02k|        handler.on_localized();
 6919|  1.02k|        ++begin;
 6920|  1.02k|    }
 6921|   152k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   152k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52, False: 152k]
  |  |  ------------------
  ------------------
 6922|     52|        handler.on_error("Unexpected end of format string");
 6923|     52|        return begin;
 6924|     52|    }
 6925|       |
 6926|   152k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 152k, False: 0]
  |  Branch (6926:25): [True: 145k, False: 6.58k]
  ------------------
 6927|   145k|        do_presentation();
 6928|   145k|    }
 6929|   152k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   152k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.36k, False: 150k]
  |  |  ------------------
  ------------------
 6930|  2.36k|        handler.on_error("Unexpected end of format string");
 6931|  2.36k|        return begin;
 6932|  2.36k|    }
 6933|       |
 6934|   150k|    return begin;
 6935|   152k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6506|  2.44k|{
 6507|  2.44k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6507:13): [True: 842, False: 1.60k]
  |  Branch (6507:33): [True: 790, False: 52]
  ------------------
 6508|  2.44k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6508:13): [True: 286, False: 1.36k]
  |  Branch (6508:33): [True: 106, False: 180]
  ------------------
 6509|  2.44k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6858|   146k|    auto do_presentation = [&]() -> const CharT* {
 6859|   146k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 25.5k, False: 121k]
  ------------------
 6860|  25.5k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  25.5k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  25.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 818, False: 24.6k]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|    818|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|    818|                return begin;
 6866|    818|            }
 6867|  24.6k|            handler.on_character_set_string(set);
 6868|  24.6k|            return begin;
 6869|  25.5k|        }
 6870|   121k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 115k, False: 5.76k]
  ------------------
 6871|   115k|            return parse_presentation_regex(begin, end, handler);
 6872|   115k|        }
 6873|  5.76k|        presentation_type type = parse_presentation_type(*begin++);
 6874|  5.76k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  5.76k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.13k, False: 4.63k]
  |  |  ------------------
  ------------------
 6875|  1.13k|            handler.on_error("Invalid type specifier in format string");
 6876|  1.13k|            return begin;
 6877|  1.13k|        }
 6878|  4.63k|        handler.on_type(type);
 6879|  4.63k|        return begin;
 6880|  5.76k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6696|  25.5k|{
 6697|  25.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  25.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  25.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|  25.5k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  25.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  25.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|  25.5k|    auto start = begin;
 6701|  25.5k|    ++begin;
 6702|       |
 6703|  25.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  25.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 25.4k]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|     42|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|     42|        return {};
 6708|     42|    }
 6709|  25.4k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 3.72k, False: 21.7k]
  ------------------
 6710|  3.72k|        handler.on_charset_inverted();
 6711|  3.72k|        ++begin;
 6712|  3.72k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  3.72k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 3.68k]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|     34|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|     34|            return {};
 6717|     34|        }
 6718|  3.68k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 52, False: 3.63k]
  ------------------
 6719|     52|            handler.on_charset_single(char32_t{']'});
 6720|     52|            ++begin;
 6721|     52|        }
 6722|  3.68k|    }
 6723|  21.7k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 34, False: 21.7k]
  ------------------
 6724|     34|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|     34|    }
 6726|       |
 6727|  5.79M|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 5.79M, False: 484]
  ------------------
 6728|  5.79M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  5.79M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 224, False: 5.79M]
  |  |  ------------------
  ------------------
 6729|    224|            break;
 6730|    224|        }
 6731|       |
 6732|  5.79M|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 24.6k, False: 5.76M]
  ------------------
 6733|  24.6k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|  24.6k|        }
 6735|       |
 6736|  5.76M|        parse_presentation_set_literal(begin, end, handler);
 6737|  5.76M|    }
 6738|       |
 6739|    708|    SCN_UNLIKELY_ATTR
 6740|    708|    handler.on_error("Invalid [character set] specifier in format string");
 6741|    708|    return {};
 6742|  25.3k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEvRPKT_SE_OT0_:
 6660|  5.76M|{
 6661|  5.76M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  5.76M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.76M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|  5.76M|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|  5.76M|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  5.76M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 112, False: 5.76M]
  |  |  ------------------
  ------------------
 6665|    112|        return;
 6666|    112|    }
 6667|       |
 6668|  5.76M|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 5.76M, False: 188]
  |  Branch (6668:25): [True: 33.6k, False: 5.73M]
  |  Branch (6668:49): [True: 33.5k, False: 34]
  ------------------
 6669|  5.76M|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 33.0k, False: 520]
  ------------------
 6670|  33.0k|        ++begin;
 6671|       |
 6672|  33.0k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|  33.0k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  33.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 70, False: 32.9k]
  |  |  ------------------
  ------------------
 6674|     70|            return;
 6675|     70|        }
 6676|       |
 6677|  32.9k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  32.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 32.9k]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|     34|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|     34|            return;
 6682|     34|        }
 6683|       |
 6684|  32.9k|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|  32.9k|        return;
 6686|  32.9k|    }
 6687|       |
 6688|  5.73M|    handler.on_charset_single(cp_first);
 6689|  5.73M|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEDiRPKT_SE_OT0_:
 6636|  5.80M|{
 6637|  5.80M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  5.80M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.80M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|  5.80M|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|  5.80M|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  11.6M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 96, False: 5.80M]
  |  |  |  Branch (859:45): [True: 70, False: 5.80M]
  |  |  |  Branch (859:45): [True: 26, False: 5.80M]
  |  |  ------------------
  ------------------
 6641|     96|        handler.on_error("Invalid encoding in format string");
 6642|     96|        return invalid_code_point;
 6643|     96|    }
 6644|       |
 6645|  5.80M|    const auto cp =
 6646|  5.80M|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|  5.80M|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  5.80M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 86, False: 5.80M]
  |  |  ------------------
  ------------------
 6648|     86|        handler.on_error("Invalid encoding in format string");
 6649|     86|        return invalid_code_point;
 6650|     86|    }
 6651|       |
 6652|  5.80M|    begin += len;
 6653|  5.80M|    return cp;
 6654|  5.80M|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6345|  24.6k|    {
 6346|  24.6k|        m_specs.charset_string_data = fmt.data();
 6347|  24.6k|        m_specs.charset_string_size = fmt.size();
 6348|  24.6k|        on_type(presentation_type::string_set);
 6349|  24.6k|    }
impl.cpp:_ZN3scn2v36detail24parse_presentation_regexIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_RSE_SE_OT0_:
 6748|   115k|{
 6749|   115k|#if !SCN_DISABLE_REGEX
 6750|   115k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   115k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   115k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6751|   115k|    SCN_EXPECT(*begin == CharT{'/'});
  ------------------
  |  |  924|   115k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   115k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6752|       |
 6753|   115k|    if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|   231k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (6753:19): [Folded - Ignored]
  |  Branch (6753:19): [Folded - Ignored]
  ------------------
 6754|   115k|                  std::is_same_v<CharT, wchar_t>) {
  ------------------
  |  Branch (6754:19): [Folded - Ignored]
  ------------------
 6755|   115k|        handler.on_error("Regex backend doesn't support wide strings as input");
 6756|   115k|        return begin;
 6757|   115k|    }
 6758|       |
 6759|   115k|    auto start = begin;
 6760|   115k|    ++begin;
 6761|       |
 6762|   115k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   115k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 115k]
  |  |  ------------------
  ------------------
 6763|     34|        handler.on_error("Unexpected end of regex in format string");
 6764|     34|        return begin;
 6765|     34|    }
 6766|       |
 6767|   115k|    handler.on_type(presentation_type::regex);
 6768|  42.7M|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6768:12): [True: 42.7M, False: 560]
  ------------------
 6769|  42.7M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6769:13): [True: 241k, False: 42.5M]
  ------------------
 6770|   241k|            if (*(begin - 1) != CharT{'\\'}) {
  ------------------
  |  Branch (6770:17): [True: 114k, False: 126k]
  ------------------
 6771|   114k|                break;
 6772|   114k|            }
 6773|   126k|            else {
 6774|   126k|                handler.on_type(presentation_type::regex_escaped);
 6775|   126k|            }
 6776|   241k|        }
 6777|  42.7M|    }
 6778|   115k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   115k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 560, False: 114k]
  |  |  ------------------
  ------------------
 6779|    560|        handler.on_error("Unexpected end of regex in format string");
 6780|    560|        return begin;
 6781|    560|    }
 6782|       |
 6783|   114k|    auto regex_end = begin;
 6784|   114k|    auto regex_pattern = make_string_view_from_pointers(start + 1, regex_end);
 6785|   114k|    if (SCN_UNLIKELY(regex_pattern.empty())) {
  ------------------
  |  |  859|   114k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 114k]
  |  |  ------------------
  ------------------
 6786|     34|        handler.on_error("Invalid (empty) regex in format string");
 6787|     34|        return begin;
 6788|     34|    }
 6789|   114k|    handler.on_regex_pattern(regex_pattern);
 6790|   114k|    ++begin;
 6791|       |
 6792|   114k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   114k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 114k]
  |  |  ------------------
  ------------------
 6793|     34|        handler.on_error("Unexpected end of regex in format string");
 6794|     34|        return begin;
 6795|     34|    }
 6796|       |
 6797|   114k|    regex_flags flags{regex_flags::none};
 6798|   114k|    constexpr std::array<std::pair<char, regex_flags>, 4> flag_map{
 6799|   114k|        {{'m', regex_flags::multiline},
 6800|   114k|         {'s', regex_flags::singleline},
 6801|   114k|         {'i', regex_flags::nocase},
 6802|   114k|         {'n', regex_flags::nocapture}}};
 6803|   141k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6803:12): [True: 141k, False: 58]
  ------------------
 6804|   141k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6804:13): [True: 114k, False: 27.2k]
  ------------------
 6805|   114k|            break;
 6806|   114k|        }
 6807|  27.2k|        bool found_flag = false;
 6808|  72.9k|        for (auto flag : flag_map) {
  ------------------
  |  Branch (6808:24): [True: 72.9k, False: 312]
  ------------------
 6809|  72.9k|            if (static_cast<CharT>(flag.first) != *begin) {
  ------------------
  |  Branch (6809:17): [True: 46.0k, False: 26.8k]
  ------------------
 6810|  46.0k|                continue;
 6811|  46.0k|            }
 6812|  26.8k|            if ((flags & flag.second) != regex_flags::none) {
  ------------------
  |  Branch (6812:17): [True: 34, False: 26.8k]
  ------------------
 6813|     34|                handler.on_error("Flag set multiple times in regex");
 6814|     34|                return begin;
 6815|     34|            }
 6816|  26.8k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 6817|  26.8k|            if (*begin == CharT{'s'}) {
  ------------------
  |  Branch (6817:17): [True: 48, False: 26.8k]
  ------------------
 6818|       |                // clang-format off
 6819|     48|                handler.on_error("/s flag for regex isn't supported by regex backend");
 6820|       |                // clang-format on
 6821|     48|            }
 6822|       |#if !SCN_HAS_STD_REGEX_MULTILINE
 6823|       |            if (*begin == CharT{'m'}) {
 6824|       |                // clang-format off
 6825|       |                handler.on_error("/m flag for regex isn't supported by regex backend");
 6826|       |                // clang-format on
 6827|       |            }
 6828|       |#endif
 6829|  26.8k|#endif
 6830|  26.8k|            flags |= flag.second;
 6831|  26.8k|            found_flag = true;
 6832|  26.8k|            break;
 6833|  26.8k|        }
 6834|  27.1k|        if (!found_flag) {
  ------------------
  |  Branch (6834:13): [True: 312, False: 26.8k]
  ------------------
 6835|    312|            handler.on_error("Invalid flag in regex");
 6836|    312|            return begin;
 6837|    312|        }
 6838|  27.1k|    }
 6839|   114k|    handler.on_regex_flags(flags);
 6840|       |
 6841|   114k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   114k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 58, False: 114k]
  |  |  ------------------
  ------------------
 6842|     58|        handler.on_error("Unexpected end of regex in format string");
 6843|     58|        return begin;
 6844|     58|    }
 6845|       |
 6846|   114k|    return begin;
 6847|       |#else
 6848|       |    handler.on_error("Regular expression support is disabled");
 6849|       |    return {};
 6850|       |#endif
 6851|   114k|}
_ZN3scn2v36detail12specs_setter16on_regex_patternIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6353|   114k|    {
 6354|   114k|        m_specs.charset_string_data = pattern.data();
 6355|   114k|        m_specs.charset_string_size = pattern.size();
 6356|   114k|    }
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6454|  5.76k|{
 6455|  5.76k|    switch (type) {
 6456|    124|        case 'b':
  ------------------
  |  Branch (6456:9): [True: 124, False: 5.64k]
  ------------------
 6457|    176|        case 'B':
  ------------------
  |  Branch (6457:9): [True: 52, False: 5.71k]
  ------------------
 6458|    176|            return presentation_type::int_binary;
 6459|    128|        case 'd':
  ------------------
  |  Branch (6459:9): [True: 128, False: 5.64k]
  ------------------
 6460|    128|            return presentation_type::int_decimal;
 6461|    160|        case 'i':
  ------------------
  |  Branch (6461:9): [True: 160, False: 5.60k]
  ------------------
 6462|    160|            return presentation_type::int_generic;
 6463|     70|        case 'u':
  ------------------
  |  Branch (6463:9): [True: 70, False: 5.69k]
  ------------------
 6464|     70|            return presentation_type::int_unsigned_decimal;
 6465|    466|        case 'o':
  ------------------
  |  Branch (6465:9): [True: 466, False: 5.30k]
  ------------------
 6466|    466|            return presentation_type::int_octal;
 6467|     96|        case 'x':
  ------------------
  |  Branch (6467:9): [True: 96, False: 5.67k]
  ------------------
 6468|    148|        case 'X':
  ------------------
  |  Branch (6468:9): [True: 52, False: 5.71k]
  ------------------
 6469|    148|            return presentation_type::int_hex;
 6470|     34|        case 'r':
  ------------------
  |  Branch (6470:9): [True: 34, False: 5.73k]
  ------------------
 6471|     68|        case 'R':
  ------------------
  |  Branch (6471:9): [True: 34, False: 5.73k]
  ------------------
 6472|     68|            return presentation_type::int_arbitrary_base;
 6473|    106|        case 'a':
  ------------------
  |  Branch (6473:9): [True: 106, False: 5.66k]
  ------------------
 6474|    554|        case 'A':
  ------------------
  |  Branch (6474:9): [True: 448, False: 5.32k]
  ------------------
 6475|    554|            return presentation_type::float_hex;
 6476|     88|        case 'e':
  ------------------
  |  Branch (6476:9): [True: 88, False: 5.68k]
  ------------------
 6477|    158|        case 'E':
  ------------------
  |  Branch (6477:9): [True: 70, False: 5.69k]
  ------------------
 6478|    158|            return presentation_type::float_scientific;
 6479|    250|        case 'f':
  ------------------
  |  Branch (6479:9): [True: 250, False: 5.51k]
  ------------------
 6480|    356|        case 'F':
  ------------------
  |  Branch (6480:9): [True: 106, False: 5.66k]
  ------------------
 6481|    356|            return presentation_type::float_fixed;
 6482|    132|        case 'g':
  ------------------
  |  Branch (6482:9): [True: 132, False: 5.63k]
  ------------------
 6483|    190|        case 'G':
  ------------------
  |  Branch (6483:9): [True: 58, False: 5.71k]
  ------------------
 6484|    190|            return presentation_type::float_general;
 6485|  1.67k|        case 's':
  ------------------
  |  Branch (6485:9): [True: 1.67k, False: 4.09k]
  ------------------
 6486|  1.67k|            return presentation_type::string;
 6487|    376|        case 'c':
  ------------------
  |  Branch (6487:9): [True: 376, False: 5.39k]
  ------------------
 6488|    376|            return presentation_type::character;
 6489|     34|        case '?':
  ------------------
  |  Branch (6489:9): [True: 34, False: 5.73k]
  ------------------
 6490|     34|            return presentation_type::escaped_character;
 6491|     78|        case 'p':
  ------------------
  |  Branch (6491:9): [True: 78, False: 5.69k]
  ------------------
 6492|     78|            return presentation_type::pointer;
 6493|      0|        case '[':
  ------------------
  |  Branch (6493:9): [True: 0, False: 5.76k]
  ------------------
 6494|      0|        case '/':
  ------------------
  |  Branch (6494:9): [True: 0, False: 5.76k]
  ------------------
 6495|       |            // Should be handled by parse_presentation_set and
 6496|       |            // parse_presentation_regex
 6497|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6498|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6499|  1.13k|        default:
  ------------------
  |  Branch (6499:9): [True: 1.13k, False: 4.63k]
  ------------------
 6500|  1.13k|            return presentation_type::none;
 6501|  5.76k|    }
 6502|  5.76k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6531|   152k|{
 6532|   152k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   152k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   152k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|   152k|    auto check_align = [](wchar_t ch) {
 6535|   152k|        switch (ch) {
 6536|   152k|            case L'<':
 6537|   152k|                return align_type::left;
 6538|   152k|            case L'>':
 6539|   152k|                return align_type::right;
 6540|   152k|            case L'^':
 6541|   152k|                return align_type::center;
 6542|   152k|            default:
 6543|   152k|                return align_type::none;
 6544|   152k|        }
 6545|   152k|    };
 6546|       |
 6547|   152k|    auto potential_fill_len = code_point_length(begin, end);
 6548|   152k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   305k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 152k]
  |  |  |  Branch (859:45): [True: 38, False: 152k]
  |  |  |  Branch (859:45): [True: 4, False: 152k]
  |  |  ------------------
  ------------------
 6549|   152k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|     42|        handler.on_error("Invalid encoding in fill character");
 6551|     42|        return begin;
 6552|     42|    }
 6553|       |
 6554|   152k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|   152k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|   152k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|   152k|    const auto begin_before_fill = begin;
 6559|   152k|    begin += potential_fill_len;
 6560|       |
 6561|   152k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 1.06k, False: 151k]
  ------------------
 6562|  1.06k|        return begin_before_fill;
 6563|  1.06k|    }
 6564|       |
 6565|   151k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|   151k|    const auto begin_after_fill = begin;
 6567|   151k|    ++begin;
 6568|       |
 6569|   151k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 150k, False: 964]
  ------------------
 6570|   150k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   150k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 62, False: 150k]
  |  |  ------------------
  ------------------
 6571|     62|            handler.on_error("Invalid fill character '{' in format string");
 6572|     62|            return begin;
 6573|     62|        }
 6574|   150k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 17.6k, False: 133k]
  ------------------
 6575|  17.6k|            return begin_before_fill;
 6576|  17.6k|        }
 6577|   150k|    }
 6578|       |
 6579|   134k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 117k, False: 16.6k]
  ------------------
 6580|   117k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 7.02k, False: 110k]
  ------------------
 6581|  7.02k|            handler.on_align(potential_align_on_fill);
 6582|  7.02k|            return begin_after_fill;
 6583|  7.02k|        }
 6584|   110k|        return begin_before_fill;
 6585|   117k|    }
 6586|       |
 6587|  16.6k|    handler.on_fill(potential_fill);
 6588|  16.6k|    handler.on_align(potential_align_after_fill);
 6589|  16.6k|    return begin;
 6590|   134k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6513|   152k|{
 6514|   152k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   152k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   152k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6515|   152k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6515:19): [Folded - Ignored]
  ------------------
 6516|   152k|        return 1;
 6517|   152k|    }
 6518|   152k|    else {
 6519|   152k|        const auto lengths =
 6520|   152k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6521|   152k|            "\3\4";
 6522|   152k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6523|   152k|        return len;
 6524|   152k|    }
 6525|   152k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6534|   304k|    auto check_align = [](wchar_t ch) {
 6535|   304k|        switch (ch) {
 6536|  1.91k|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 1.91k, False: 302k]
  ------------------
 6537|  1.91k|                return align_type::left;
 6538|  3.02k|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 3.02k, False: 301k]
  ------------------
 6539|  3.02k|                return align_type::right;
 6540|  20.2k|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 20.2k, False: 284k]
  ------------------
 6541|  20.2k|                return align_type::center;
 6542|   279k|            default:
  ------------------
  |  Branch (6542:13): [True: 279k, False: 25.1k]
  ------------------
 6543|   279k|                return align_type::none;
 6544|   304k|        }
 6545|   304k|    };
_ZN3scn2v36detail12specs_setter7on_fillIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6267|  16.6k|    {
 6268|  16.6k|        m_specs.fill = fill;
 6269|  16.6k|    }
_ZN3scn2v36detail9fill_typeaSIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6148|  16.6k|    {
 6149|  16.6k|        SCN_EXPECT(!s.empty());
  ------------------
  |  |  924|  16.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6150|  16.6k|        SCN_EXPECT(s.size() * sizeof(CharT) <= max_size);
  ------------------
  |  |  924|  16.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6151|  16.6k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (6151:23): [Folded - Ignored]
  ------------------
 6152|  34.9k|            for (size_t i = 0; i < s.size(); ++i) {
  ------------------
  |  Branch (6152:32): [True: 18.3k, False: 16.6k]
  ------------------
 6153|  18.3k|                SCN_GCC_PUSH
 6154|  18.3k|                SCN_GCC_IGNORE("-Wstringop-overflow")  // false positive
 6155|  18.3k|                m_data[i] = s[i];
 6156|  18.3k|                SCN_GCC_POP
 6157|  18.3k|            }
 6158|  16.6k|            m_size = static_cast<unsigned char>(s.size());
 6159|  16.6k|        }
 6160|  16.6k|        else if constexpr (sizeof(CharT) == 2) {
 6161|  16.6k|            m_data[0] = static_cast<char>(static_cast<unsigned>(s.front()));
 6162|  16.6k|            m_data[1] =
 6163|  16.6k|                static_cast<char>(static_cast<unsigned>(s.front()) >> 8);
 6164|  16.6k|            if (s.size() == 1) {
 6165|  16.6k|                return;
 6166|  16.6k|            }
 6167|  16.6k|            m_data[2] = static_cast<char>(static_cast<unsigned>(s[1]));
 6168|  16.6k|            m_data[3] = static_cast<char>(static_cast<unsigned>(s[1]) >> 8);
 6169|  16.6k|        }
 6170|  16.6k|        else {
 6171|  16.6k|            const auto front = static_cast<unsigned>(s.front());
 6172|  16.6k|            m_data[0] = static_cast<char>(front);
 6173|  16.6k|            m_data[1] = static_cast<char>(front >> 8);
 6174|  16.6k|            m_data[2] = static_cast<char>(front >> 16);
 6175|  16.6k|            m_data[3] = static_cast<char>(front >> 24);
 6176|  16.6k|        }
 6177|  16.6k|    }
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6596|   152k|{
 6597|   152k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   152k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   152k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|   152k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 28.5k, False: 124k]
  |  Branch (6599:33): [True: 7.95k, False: 20.5k]
  ------------------
 6600|  7.95k|        int width = parse_simple_int(begin, end);
 6601|  7.95k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  7.95k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 7.91k, False: 34]
  |  |  ------------------
  ------------------
 6602|  7.91k|            handler.on_width(width);
 6603|  7.91k|        }
 6604|     34|        else {
 6605|     34|            handler.on_error("Invalid field width");
 6606|     34|            return begin;
 6607|     34|        }
 6608|  7.95k|    }
 6609|   152k|    return begin;
 6610|   152k|}
impl.cpp:_ZN3scn2v36detail15parse_precisionIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6616|  19.1k|{
 6617|  19.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  19.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6618|       |
 6619|  19.1k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6619:9): [True: 19.1k, False: 38]
  |  Branch (6619:33): [True: 19.1k, False: 46]
  ------------------
 6620|  19.1k|        int prec = parse_simple_int(begin, end);
 6621|  19.1k|        if (SCN_LIKELY(prec != -1)) {
  ------------------
  |  |  858|  19.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 19.0k, False: 48]
  |  |  ------------------
  ------------------
 6622|  19.0k|            handler.on_precision(prec);
 6623|  19.0k|        }
 6624|     48|        else {
 6625|     48|            handler.on_error("Invalid field precision");
 6626|     48|            return begin;
 6627|     48|        }
 6628|  19.1k|    }
 6629|  19.1k|    return begin;
 6630|  19.1k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7126|  1.02k|    {
 7127|  1.02k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|  1.02k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 914, False: 108]
  ------------------
 7129|  1.02k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 806, False: 108]
  ------------------
 7130|  1.02k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 698, False: 108]
  ------------------
 7131|  1.02k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 590, False: 108]
  ------------------
 7132|    590|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|    590|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|    590|        }
 7137|       |
 7138|    432|        Handler::on_localized();
 7139|    432|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   148k|{
 8417|   148k|#define SCN_VISIT(Type)                                         \
 8418|   148k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   148k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   148k|    }                                                           \
 8421|   148k|    else {                                                      \
 8422|   148k|        return vis(monostate_val);                              \
 8423|   148k|    }
 8424|       |
 8425|   148k|    monostate monostate_val{};
 8426|       |
 8427|   148k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 148k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 148k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|  16.6k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 16.6k, False: 132k]
  ------------------
 8433|  16.6k|            SCN_VISIT(int);
  ------------------
  |  | 8418|  16.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  16.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  16.6k|    }                                                           \
  |  | 8421|  16.6k|    else {                                                      \
  |  | 8422|  16.6k|        return vis(monostate_val);                              \
  |  | 8423|  16.6k|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 148k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 148k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 148k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 148k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|  16.6k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 16.6k, False: 132k]
  ------------------
 8443|  16.6k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|  16.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  16.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  16.6k|    }                                                           \
  |  | 8421|  16.6k|    else {                                                      \
  |  | 8422|  16.6k|        return vis(monostate_val);                              \
  |  | 8423|  16.6k|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 148k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 148k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|  16.5k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 16.5k, False: 132k]
  ------------------
 8449|  16.5k|            SCN_VISIT(void*);
  ------------------
  |  | 8418|  16.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  16.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  16.5k|    }                                                           \
  |  | 8421|  16.5k|    else {                                                      \
  |  | 8422|  16.5k|        return vis(monostate_val);                              \
  |  | 8423|  16.5k|    }
  ------------------
 8450|  16.6k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 16.6k, False: 132k]
  ------------------
 8451|  16.6k|            SCN_VISIT(bool);
  ------------------
  |  | 8418|  16.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  16.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  16.6k|    }                                                           \
  |  | 8421|  16.6k|    else {                                                      \
  |  | 8422|  16.6k|        return vis(monostate_val);                              \
  |  | 8423|  16.6k|    }
  ------------------
 8452|  16.5k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 16.5k, False: 132k]
  ------------------
 8453|  16.5k|            SCN_VISIT(char);
  ------------------
  |  | 8418|  16.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  16.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  16.5k|    }                                                           \
  |  | 8421|  16.5k|    else {                                                      \
  |  | 8422|  16.5k|        return vis(monostate_val);                              \
  |  | 8423|  16.5k|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 148k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 148k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 148k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|  16.6k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 16.6k, False: 132k]
  ------------------
 8461|  16.6k|            SCN_VISIT(double);
  ------------------
  |  | 8418|  16.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  16.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  16.6k|    }                                                           \
  |  | 8421|  16.6k|    else {                                                      \
  |  | 8422|  16.6k|        return vis(monostate_val);                              \
  |  | 8423|  16.6k|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 148k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|  16.5k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 16.5k, False: 132k]
  ------------------
 8465|  16.5k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|  16.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  16.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  16.5k|    }                                                           \
  |  | 8421|  16.5k|    else {                                                      \
  |  | 8422|  16.5k|        return vis(monostate_val);                              \
  |  | 8423|  16.5k|    }
  ------------------
 8466|  16.5k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 16.5k, False: 132k]
  ------------------
 8467|  16.5k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|  16.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  16.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  16.5k|    }                                                           \
  |  | 8421|  16.5k|    else {                                                      \
  |  | 8422|  16.5k|        return vis(monostate_val);                              \
  |  | 8423|  16.5k|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 148k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|  16.5k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 16.5k, False: 132k]
  ------------------
 8471|  16.5k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|  16.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  16.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  16.5k|    }                                                           \
  |  | 8421|  16.5k|    else {                                                      \
  |  | 8422|  16.5k|        return vis(monostate_val);                              \
  |  | 8423|  16.5k|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 148k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 148k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 148k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 148k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 148k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   148k|            SCN_CLANG_POP
 8495|   148k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE5beginEv:
 3329|  18.3k|    {
 3330|  18.3k|        return m_iterator;
 3331|  18.3k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISH_vEEOT_:
 1429|  3.65k|    {
 1430|  3.65k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  436|  3.65k|    {
  437|  3.65k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.87k|    {
 1177|  3.87k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE3endEv:
 3333|  9.70k|    {
 3334|  9.70k|        return m_sentinel;
 3335|  9.70k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1475|    220|    {
 1476|    220|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  446|    220|    {
  447|    220|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEEC2ISG_LPv0EEET_SJ_:
 3315|  8.69k|    {
 3316|  8.69k|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEcvbEv:
 1597|    248|    {
 1598|    248|        return has_value();
 1599|    248|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9has_valueEv:
  484|  7.66k|    {
  485|  7.66k|        return m_has_value;
  486|  7.66k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_LPv0EEERT_v:
 1652|    162|    {
 1653|    162|        return value();
 1654|    162|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5valueISH_LPv0EEERT_v:
 1626|  3.65k|    {
 1627|  3.65k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.65k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.65k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.65k|        return this->get_value();
 1629|  3.65k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9get_valueEv:
  450|  3.65k|    {
  451|  3.65k|        return m_value;
  452|  3.65k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESI_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSO_:
 1836|  3.62k|    {
 1837|  3.62k|        return detail::transform_error_impl(std::move(*this),
 1838|  3.62k|                                            std::forward<F>(f));
 1839|  3.62k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS6_IPKcS8_EENS4_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEE8sentinelILb1EEEEENS4_9eof_errorEEERFNS0_10scan_errorESK_ELPv0ESM_EEDaOT_OT0_:
 1322|  3.62k|{
 1323|  3.62k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  3.62k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  3.62k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  3.62k|            return result(*std::forward<Exp>(exp));
 1327|  3.62k|        }
 1328|       |
 1329|  3.62k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  3.62k|        return result(unexpect, monostate{});
 1331|  3.62k|    }
 1332|  3.62k|    else {
 1333|  3.62k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  3.62k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  3.62k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.49k, False: 134]
  |  |  ------------------
  ------------------
 1335|  3.62k|                   ? result(*std::forward<Exp>(exp))
 1336|  3.62k|                   : result(unexpect,
 1337|    134|                            trivial_invoke(std::forward<F>(f),
 1338|    134|                                           std::forward<Exp>(exp).error()));
 1339|  3.62k|    }
 1340|  3.62k|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_LPv0EEEOT_v:
 1662|  3.49k|    {
 1663|  3.49k|        return std::move(value());
 1664|  3.49k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|  3.49k|    {
 1430|  3.49k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  436|  3.49k|    {
  437|  3.49k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.62k|    {
 1177|  3.62k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5errorEv:
 1613|    134|    {
 1614|    134|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    134|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    134|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    134|        return std::move(this->get_unexpected().error());
 1616|    134|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE14get_unexpectedEv:
  467|    134|    {
  468|    134|        return m_unexpected;
  469|    134|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
 1485|    134|    {
 1486|    134|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  446|    134|    {
  447|    134|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEcvbEv:
 1597|  3.62k|    {
 1598|  3.62k|        return has_value();
 1599|  3.62k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  7.25k|    {
  485|  7.25k|        return m_has_value;
  486|  7.25k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5errorEv:
 1603|    134|    {
 1604|    134|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    134|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    134|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    134|        return this->get_unexpected().error();
 1606|    134|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|    134|    {
  468|    134|        return m_unexpected;
  469|    134|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEdeISH_LPv0EEEOT_v:
 1662|  3.49k|    {
 1663|  3.49k|        return std::move(value());
 1664|  3.49k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1626|  3.49k|    {
 1627|  3.49k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.49k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.49k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.49k|        return this->get_value();
 1629|  3.49k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  3.49k|    {
  451|  3.49k|        return m_value;
  452|  3.49k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5465|   534k|    {
 5466|   534k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   534k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 534k]
  |  |  ------------------
  ------------------
 5467|      0|            return max_size();
 5468|      0|        }
 5469|       |
 5470|   534k|        return static_cast<std::size_t>(m_desc &
 5471|   534k|                                        ((1 << detail::packed_arg_bits) - 1));
 5472|   534k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5490|   638k|    {
 5491|   638k|        return (m_desc & detail::is_unpacked_bit) == 0;
 5492|   638k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5433|   104k|    {
 5434|   104k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   104k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 104k]
  |  |  ------------------
  ------------------
 5435|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5436|      0|                return m_args[id];
 5437|      0|            }
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|   104k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|   104k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 92, False: 104k]
  |  |  ------------------
  ------------------
 5442|     92|            return {};
 5443|     92|        }
 5444|       |
 5445|   104k|        const auto t = type(id);
 5446|   104k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|   104k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.58k, False: 102k]
  |  |  ------------------
  ------------------
 5447|  1.58k|            return {};
 5448|  1.58k|        }
 5449|       |
 5450|   102k|        basic_scan_arg<Context> arg;
 5451|   102k|        arg.m_type = t;
 5452|   102k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5452:13): [True: 102k, False: 0]
  ------------------
 5453|   102k|            arg.m_value.ref_value = m_builtin_values[id];
 5454|   102k|        }
 5455|      0|        else {
 5456|      0|            arg.m_value = m_values[id];
 5457|      0|        }
 5458|   102k|        return arg;
 5459|   104k|    }
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5240|   104k|    constexpr basic_scan_arg() = default;
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5499|   104k|    {
 5500|       |        // First (0th) index is size, types start after that
 5501|   104k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5502|   104k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5503|   104k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5504|   104k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5494|   102k|    {
 5495|   102k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5496|   102k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5246|   203k|    {
 5247|   203k|        return m_type != detail::arg_type::none_type;
 5248|   203k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  5.90k|{
 8417|  5.90k|#define SCN_VISIT(Type)                                         \
 8418|  5.90k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  5.90k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  5.90k|    }                                                           \
 8421|  5.90k|    else {                                                      \
 8422|  5.90k|        return vis(monostate_val);                              \
 8423|  5.90k|    }
 8424|       |
 8425|  5.90k|    monostate monostate_val{};
 8426|       |
 8427|  5.90k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 5.90k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 5.90k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|    656|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 656, False: 5.24k]
  ------------------
 8433|    656|            SCN_VISIT(int);
  ------------------
  |  | 8418|    656|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    656|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    656|    }                                                           \
  |  | 8421|    656|    else {                                                      \
  |  | 8422|    656|        return vis(monostate_val);                              \
  |  | 8423|    656|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 5.90k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 5.90k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 5.90k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 5.90k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|    656|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 656, False: 5.24k]
  ------------------
 8443|    656|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|    656|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    656|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    656|    }                                                           \
  |  | 8421|    656|    else {                                                      \
  |  | 8422|    656|        return vis(monostate_val);                              \
  |  | 8423|    656|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 5.90k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 5.90k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|    656|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 656, False: 5.24k]
  ------------------
 8449|    656|            SCN_VISIT(void*);
  ------------------
  |  | 8418|    656|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    656|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    656|    }                                                           \
  |  | 8421|    656|    else {                                                      \
  |  | 8422|    656|        return vis(monostate_val);                              \
  |  | 8423|    656|    }
  ------------------
 8450|    656|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 656, False: 5.24k]
  ------------------
 8451|    656|            SCN_VISIT(bool);
  ------------------
  |  | 8418|    656|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    656|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    656|    }                                                           \
  |  | 8421|    656|    else {                                                      \
  |  | 8422|    656|        return vis(monostate_val);                              \
  |  | 8423|    656|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 5.90k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|    656|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 656, False: 5.24k]
  ------------------
 8455|    656|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|    656|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    656|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    656|    }                                                           \
  |  | 8421|    656|    else {                                                      \
  |  | 8422|    656|        return vis(monostate_val);                              \
  |  | 8423|    656|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 5.90k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 5.90k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|    656|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 656, False: 5.24k]
  ------------------
 8461|    656|            SCN_VISIT(double);
  ------------------
  |  | 8418|    656|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    656|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    656|    }                                                           \
  |  | 8421|    656|    else {                                                      \
  |  | 8422|    656|        return vis(monostate_val);                              \
  |  | 8423|    656|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 5.90k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 5.90k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|    656|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 656, False: 5.24k]
  ------------------
 8467|    656|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|    656|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    656|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    656|    }                                                           \
  |  | 8421|    656|    else {                                                      \
  |  | 8422|    656|        return vis(monostate_val);                              \
  |  | 8423|    656|    }
  ------------------
 8468|    656|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 656, False: 5.24k]
  ------------------
 8469|    656|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|    656|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    656|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    656|    }                                                           \
  |  | 8421|    656|    else {                                                      \
  |  | 8422|    656|        return vis(monostate_val);                              \
  |  | 8423|    656|    }
  ------------------
 8470|    656|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 656, False: 5.24k]
  ------------------
 8471|    656|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|    656|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    656|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    656|    }                                                           \
  |  | 8421|    656|    else {                                                      \
  |  | 8422|    656|        return vis(monostate_val);                              \
  |  | 8423|    656|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 5.90k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 5.90k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 5.90k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 5.90k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 5.90k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  5.90k|            SCN_CLANG_POP
 8495|  5.90k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5544|   534k|    {
 5545|   534k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8055|   534k|    {
 8056|   534k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   534k|{
 7044|   534k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   534k|    handler.check_args_exhausted();
 7046|   534k|    return handler.get_error();
 7047|   534k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   534k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   534k|    auto begin = format.data();
 7013|   534k|    auto it = begin;
 7014|   534k|    const auto end = format.data() + format.size();
 7015|       |
 7016|  1.11G|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 1.11G, False: 163k]
  ------------------
 7017|  1.11G|        const auto ch = *it++;
 7018|  1.11G|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 105k, False: 1.11G]
  ------------------
 7019|   105k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   105k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   105k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 100k, False: 4.88k]
  ------------------
 7023|   100k|                return;
 7024|   100k|            }
 7025|   105k|        }
 7026|  1.11G|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 307k, False: 1.10G]
  ------------------
 7027|   307k|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|   612k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 270k, False: 36.1k]
  |  |  |  Branch (859:45): [True: 1.45k, False: 305k]
  |  |  |  Branch (859:45): [True: 269k, False: 36.1k]
  |  |  ------------------
  ------------------
 7028|   270k|                handler.on_error("Unmatched '}' in format string");
 7029|   270k|                return;
 7030|   270k|            }
 7031|       |
 7032|  36.1k|            handler.on_literal_text(begin, it);
 7033|  36.1k|            begin = ++it;
 7034|  36.1k|        }
 7035|  1.11G|    }
 7036|       |
 7037|   163k|    handler.on_literal_text(begin, end);
 7038|   163k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6941|   105k|{
 6942|   105k|    struct id_adapter {
 6943|   105k|        constexpr void operator()()
 6944|   105k|        {
 6945|   105k|            arg_id = handler.on_arg_id();
 6946|   105k|        }
 6947|   105k|        constexpr void operator()(std::size_t id)
 6948|   105k|        {
 6949|   105k|            arg_id = handler.on_arg_id(id);
 6950|   105k|        }
 6951|       |
 6952|   105k|        constexpr void on_error(const char* msg)
 6953|   105k|        {
 6954|   105k|            SCN_UNLIKELY_ATTR
 6955|   105k|            handler.on_error(msg);
 6956|   105k|        }
 6957|       |
 6958|   105k|        Handler& handler;
 6959|   105k|        std::size_t arg_id;
 6960|   105k|    };
 6961|       |
 6962|   105k|    ++begin;
 6963|   105k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 88, False: 105k]
  |  |  ------------------
  ------------------
 6964|     88|        handler.on_error("Unexpected end of replacement field");
 6965|     88|        return begin;
 6966|     88|    }
 6967|       |
 6968|   105k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 5.84k, False: 99.2k]
  ------------------
 6969|  5.84k|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|  5.84k|    }
 6971|  99.2k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 112, False: 99.1k]
  ------------------
 6972|    112|        handler.on_literal_text(begin, begin + 1);
 6973|    112|    }
 6974|  99.1k|    else {
 6975|  99.1k|        auto adapter = id_adapter{handler, 0};
 6976|  99.1k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|  99.1k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  99.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 102, False: 99.0k]
  |  |  ------------------
  ------------------
 6979|    102|            handler.on_error("Missing '}' in format string");
 6980|    102|            return begin;
 6981|    102|        }
 6982|       |
 6983|  99.0k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 212, False: 98.8k]
  ------------------
 6984|    212|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|    212|        }
 6986|  98.8k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 98.1k, False: 722]
  ------------------
 6987|  98.1k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  98.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 64, False: 98.0k]
  |  |  ------------------
  ------------------
 6988|     64|                handler.on_error("Unexpected end of replacement field");
 6989|     64|                return begin;
 6990|     64|            }
 6991|  98.0k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|  98.0k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   196k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.53k, False: 94.5k]
  |  |  |  Branch (859:45): [True: 0, False: 98.0k]
  |  |  |  Branch (859:45): [True: 3.53k, False: 94.5k]
  |  |  ------------------
  ------------------
 6993|  3.53k|                handler.on_error("Unknown format specifier");
 6994|  3.53k|                return begin;
 6995|  3.53k|            }
 6996|  98.0k|        }
 6997|    722|        else {
 6998|    722|            SCN_UNLIKELY_ATTR
 6999|    722|            handler.on_error("Missing '}' in format string");
 7000|    722|            return begin;
 7001|    722|        }
 7002|  99.0k|    }
 7003|   100k|    return begin + 1;
 7004|   105k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 8038|   104k|    {
 8039|   104k|        return m_args.get(id);
 8040|   104k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE4argsEv:
 8043|  6.05k|    {
 8044|  6.05k|        return m_args;
 8045|  6.05k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8048|  99.9k|    {
 8049|  99.9k|        return m_locale;
 8050|  99.9k|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5565|   103k|    {
 5566|   103k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 48, False: 103k]
  |  |  ------------------
  ------------------
 5567|     48|            on_error(
 5568|     48|                "Cannot switch from manual to automatic argument indexing");
 5569|     48|            return 0;
 5570|     48|        }
 5571|       |
 5572|   103k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5573|   103k|        do_check_arg_id(id);
 5574|   103k|        return id;
 5575|   103k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE8on_errorEPKc:
 5589|    176|    {
 5590|    176|        return detail::handle_error(
 5591|    176|            scan_error{scan_error::invalid_format_string, msg});
 5592|    176|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6053|   103k|{
 6054|   103k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6054:9): [Folded - Ignored]
  ------------------
 6055|   103k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6055:10): [Folded - Ignored]
  |  Branch (6055:22): [Folded - Ignored]
  ------------------
 6056|       |        // The cast below will cause an error on gcc pre-12
 6057|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6058|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6058:13): [True: 0, False: 0]
  ------------------
 6059|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6060|      0|            SCN_UNLIKELY_ATTR
 6061|      0|            on_error("Argument not found");
 6062|      0|        }
 6063|      0|    }
 6064|   103k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|  99.1k|{
 6443|  99.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  99.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  99.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|  99.1k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 99.1k, False: 0]
  |  Branch (6444:26): [True: 1.18k, False: 97.9k]
  ------------------
 6445|  1.18k|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|  1.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|  1.18k|    }
 6447|       |
 6448|  97.9k|    handler();
 6449|  97.9k|    return begin;
 6450|  99.1k|}
impl.cpp:_ZN3scn2v36detail15do_parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6412|  1.18k|{
 6413|  1.18k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.18k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.18k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6414|       |
 6415|  1.18k|    CharT c = *begin;
 6416|  1.18k|    if (c < CharT{'0'} || c > CharT{'9'}) {
  ------------------
  |  Branch (6416:9): [True: 216, False: 970]
  |  Branch (6416:27): [True: 342, False: 628]
  ------------------
 6417|    558|        handler.on_error("Invalid argument ID");
 6418|    558|        return begin;
 6419|    558|    }
 6420|       |
 6421|    628|    int idx = 0;
 6422|    628|    if (c != CharT{'0'}) {
  ------------------
  |  Branch (6422:9): [True: 256, False: 372]
  ------------------
 6423|    256|        idx = parse_simple_int(begin, end);
 6424|    256|    }
 6425|    372|    else {
 6426|    372|        ++begin;
 6427|    372|    }
 6428|       |
 6429|    628|    if (begin == end || (*begin != CharT{'}'} && *begin != CharT{':'})) {
  ------------------
  |  Branch (6429:9): [True: 102, False: 526]
  |  Branch (6429:26): [True: 314, False: 212]
  |  Branch (6429:50): [True: 164, False: 150]
  ------------------
 6430|    266|        handler.on_error("Invalid argument ID");
 6431|    266|        return begin;
 6432|    266|    }
 6433|    362|    handler(idx);
 6434|       |
 6435|    362|    return begin;
 6436|    628|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapter8on_errorEPKc:
 6953|    824|        {
 6954|    824|            SCN_UNLIKELY_ATTR
 6955|    824|            handler.on_error(msg);
 6956|    824|        }
_ZN3scn2v36detail16parse_simple_intIwEEiRPKT_S5_:
 6391|  79.4k|{
 6392|  79.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  79.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  79.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6393|  79.4k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  79.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  79.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6394|       |
 6395|  79.4k|    unsigned long long value = 0;
 6396|  81.6k|    do {
 6397|  81.6k|        value *= 10;
 6398|  81.6k|        value += static_cast<unsigned long long>(*begin - '0');
 6399|  81.6k|        if (value >
  ------------------
  |  Branch (6399:13): [True: 0, False: 81.6k]
  ------------------
 6400|  81.6k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6401|      0|            return -1;
 6402|      0|        }
 6403|  81.6k|        ++begin;
 6404|  81.6k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6404:14): [True: 81.2k, False: 360]
  |  Branch (6404:30): [True: 8.96k, False: 72.2k]
  |  Branch (6404:47): [True: 2.19k, False: 6.77k]
  ------------------
 6405|  79.4k|    return static_cast<int>(value);
 6406|  79.4k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEm:
 6948|    362|        {
 6949|    362|            arg_id = handler.on_arg_id(id);
 6950|    362|        }
_ZN3scn2v324basic_scan_parse_contextIwE12check_arg_idEm:
 5578|    362|    {
 5579|    362|        if (SCN_UNLIKELY(m_next_arg_id > 0)) {
  ------------------
  |  |  859|    362|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 128, False: 234]
  |  |  ------------------
  ------------------
 5580|    128|            on_error(
 5581|    128|                "Cannot switch from manual to automatic argument indexing");
 5582|    128|            return;
 5583|    128|        }
 5584|    234|        m_next_arg_id = -1;
 5585|    234|        do_check_arg_id(id);
 5586|    234|    }
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|  97.9k|        {
 6945|  97.9k|            arg_id = handler.on_arg_id();
 6946|  97.9k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5251|   196k|    {
 5252|   196k|        return m_type;
 5253|   196k|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5560|  93.9k|    {
 5561|  93.9k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5562|  93.9k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5549|   191k|    {
 5550|   191k|        return m_format.data();
 5551|   191k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7121|  98.0k|    {
 7122|  98.0k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  98.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  98.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|  98.0k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6857|  98.0k|{
 6858|  98.0k|    auto do_presentation = [&]() -> const CharT* {
 6859|  98.0k|        if (*begin == CharT{'['}) {
 6860|  98.0k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  98.0k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|  98.0k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|  98.0k|                return begin;
 6866|  98.0k|            }
 6867|  98.0k|            handler.on_character_set_string(set);
 6868|  98.0k|            return begin;
 6869|  98.0k|        }
 6870|  98.0k|        if (*begin == CharT{'/'}) {
 6871|  98.0k|            return parse_presentation_regex(begin, end, handler);
 6872|  98.0k|        }
 6873|  98.0k|        presentation_type type = parse_presentation_type(*begin++);
 6874|  98.0k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|  98.0k|            handler.on_error("Invalid type specifier in format string");
 6876|  98.0k|            return begin;
 6877|  98.0k|        }
 6878|  98.0k|        handler.on_type(type);
 6879|  98.0k|        return begin;
 6880|  98.0k|    };
 6881|       |
 6882|  98.0k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 97.0k, False: 1.04k]
  |  Branch (6882:28): [True: 3.65k, False: 93.3k]
  ------------------
 6883|  98.0k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 360, False: 3.29k]
  |  Branch (6883:36): [True: 254, False: 106]
  ------------------
 6884|    254|        return do_presentation();
 6885|    254|    }
 6886|       |
 6887|  97.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  97.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 97.7k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|  97.7k|    begin = parse_align(begin, end, handler);
 6893|  97.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  97.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 144, False: 97.6k]
  |  |  ------------------
  ------------------
 6894|    144|        handler.on_error("Unexpected end of format string");
 6895|    144|        return begin;
 6896|    144|    }
 6897|       |
 6898|  97.6k|    begin = parse_width(begin, end, handler);
 6899|  97.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  97.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 106, False: 97.5k]
  |  |  ------------------
  ------------------
 6900|    106|        handler.on_error("Unexpected end of format string");
 6901|    106|        return begin;
 6902|    106|    }
 6903|       |
 6904|  97.5k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 4.42k, False: 93.1k]
  ------------------
 6905|  4.42k|        ++begin;
 6906|  4.42k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  4.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38, False: 4.38k]
  |  |  ------------------
  ------------------
 6907|     38|            handler.on_error("Unexpected end of format string");
 6908|     38|            return begin;
 6909|     38|        }
 6910|  4.38k|        begin = parse_precision(begin, end, handler);
 6911|  4.38k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  4.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 178, False: 4.20k]
  |  |  ------------------
  ------------------
 6912|    178|            handler.on_error("Unexpected end of format string");
 6913|    178|            return begin;
 6914|    178|        }
 6915|  4.38k|    }
 6916|       |
 6917|  97.3k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 874, False: 96.4k]
  ------------------
 6918|    874|        handler.on_localized();
 6919|    874|        ++begin;
 6920|    874|    }
 6921|  97.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  97.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 66, False: 97.2k]
  |  |  ------------------
  ------------------
 6922|     66|        handler.on_error("Unexpected end of format string");
 6923|     66|        return begin;
 6924|     66|    }
 6925|       |
 6926|  97.2k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 97.2k, False: 0]
  |  Branch (6926:25): [True: 91.0k, False: 6.20k]
  ------------------
 6927|  91.0k|        do_presentation();
 6928|  91.0k|    }
 6929|  97.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  97.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.22k, False: 95.0k]
  |  |  ------------------
  ------------------
 6930|  2.22k|        handler.on_error("Unexpected end of format string");
 6931|  2.22k|        return begin;
 6932|  2.22k|    }
 6933|       |
 6934|  95.0k|    return begin;
 6935|  97.2k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6506|  3.65k|{
 6507|  3.65k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6507:13): [True: 234, False: 3.42k]
  |  Branch (6507:33): [True: 200, False: 34]
  ------------------
 6508|  3.65k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6508:13): [True: 230, False: 3.22k]
  |  Branch (6508:33): [True: 160, False: 70]
  ------------------
 6509|  3.65k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6858|  91.3k|    auto do_presentation = [&]() -> const CharT* {
 6859|  91.3k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 4.82k, False: 86.4k]
  ------------------
 6860|  4.82k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  4.82k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  4.82k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 784, False: 4.04k]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|    784|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|    784|                return begin;
 6866|    784|            }
 6867|  4.04k|            handler.on_character_set_string(set);
 6868|  4.04k|            return begin;
 6869|  4.82k|        }
 6870|  86.4k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 82.3k, False: 4.13k]
  ------------------
 6871|  82.3k|            return parse_presentation_regex(begin, end, handler);
 6872|  82.3k|        }
 6873|  4.13k|        presentation_type type = parse_presentation_type(*begin++);
 6874|  4.13k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  4.13k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 728, False: 3.40k]
  |  |  ------------------
  ------------------
 6875|    728|            handler.on_error("Invalid type specifier in format string");
 6876|    728|            return begin;
 6877|    728|        }
 6878|  3.40k|        handler.on_type(type);
 6879|  3.40k|        return begin;
 6880|  4.13k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6696|  4.82k|{
 6697|  4.82k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  4.82k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.82k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|  4.82k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  4.82k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.82k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|  4.82k|    auto start = begin;
 6701|  4.82k|    ++begin;
 6702|       |
 6703|  4.82k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  4.82k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 40, False: 4.78k]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|     40|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|     40|        return {};
 6708|     40|    }
 6709|  4.78k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 1.44k, False: 3.33k]
  ------------------
 6710|  1.44k|        handler.on_charset_inverted();
 6711|  1.44k|        ++begin;
 6712|  1.44k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 48, False: 1.40k]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|     48|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|     48|            return {};
 6717|     48|        }
 6718|  1.40k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 30, False: 1.37k]
  ------------------
 6719|     30|            handler.on_charset_single(char32_t{']'});
 6720|     30|            ++begin;
 6721|     30|        }
 6722|  1.40k|    }
 6723|  3.33k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 34, False: 3.30k]
  ------------------
 6724|     34|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|     34|    }
 6726|       |
 6727|  54.6k|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 54.1k, False: 482]
  ------------------
 6728|  54.1k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  54.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 180, False: 54.0k]
  |  |  ------------------
  ------------------
 6729|    180|            break;
 6730|    180|        }
 6731|       |
 6732|  54.0k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 4.04k, False: 49.9k]
  ------------------
 6733|  4.04k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|  4.04k|        }
 6735|       |
 6736|  49.9k|        parse_presentation_set_literal(begin, end, handler);
 6737|  49.9k|    }
 6738|       |
 6739|    662|    SCN_UNLIKELY_ATTR
 6740|    662|    handler.on_error("Invalid [character set] specifier in format string");
 6741|    662|    return {};
 6742|  4.70k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEvRPKT_SE_OT0_:
 6660|  49.9k|{
 6661|  49.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  49.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  49.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|  49.9k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|  49.9k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  49.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 138, False: 49.8k]
  |  |  ------------------
  ------------------
 6665|    138|        return;
 6666|    138|    }
 6667|       |
 6668|  49.8k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 49.7k, False: 120]
  |  Branch (6668:25): [True: 1.34k, False: 48.3k]
  |  Branch (6668:49): [True: 1.29k, False: 48]
  ------------------
 6669|  49.8k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 1.01k, False: 280]
  ------------------
 6670|  1.01k|        ++begin;
 6671|       |
 6672|  1.01k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|  1.01k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  1.01k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 980]
  |  |  ------------------
  ------------------
 6674|     34|            return;
 6675|     34|        }
 6676|       |
 6677|    980|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|    980|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 46, False: 934]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|     46|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|     46|            return;
 6682|     46|        }
 6683|       |
 6684|    934|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|    934|        return;
 6686|    980|    }
 6687|       |
 6688|  48.8k|    handler.on_charset_single(cp_first);
 6689|  48.8k|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEDiRPKT_SE_OT0_:
 6636|  50.9k|{
 6637|  50.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  50.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  50.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|  50.9k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|  50.9k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|   101k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 50.9k]
  |  |  |  Branch (859:45): [True: 0, False: 50.9k]
  |  |  |  Branch (859:45): [True: 0, False: 50.9k]
  |  |  ------------------
  ------------------
 6641|      0|        handler.on_error("Invalid encoding in format string");
 6642|      0|        return invalid_code_point;
 6643|      0|    }
 6644|       |
 6645|  50.9k|    const auto cp =
 6646|  50.9k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|  50.9k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  50.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 172, False: 50.8k]
  |  |  ------------------
  ------------------
 6648|    172|        handler.on_error("Invalid encoding in format string");
 6649|    172|        return invalid_code_point;
 6650|    172|    }
 6651|       |
 6652|  50.8k|    begin += len;
 6653|  50.8k|    return cp;
 6654|  50.9k|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6345|  4.04k|    {
 6346|  4.04k|        m_specs.charset_string_data = fmt.data();
 6347|  4.04k|        m_specs.charset_string_size = fmt.size();
 6348|  4.04k|        on_type(presentation_type::string_set);
 6349|  4.04k|    }
impl.cpp:_ZN3scn2v36detail24parse_presentation_regexIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_RSE_SE_OT0_:
 6748|  82.3k|{
 6749|  82.3k|#if !SCN_DISABLE_REGEX
 6750|  82.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  82.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  82.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6751|  82.3k|    SCN_EXPECT(*begin == CharT{'/'});
  ------------------
  |  |  924|  82.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  82.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6752|       |
 6753|  82.3k|    if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|   164k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (6753:19): [Folded - Ignored]
  |  Branch (6753:19): [Folded - Ignored]
  ------------------
 6754|  82.3k|                  std::is_same_v<CharT, wchar_t>) {
  ------------------
  |  Branch (6754:19): [Folded - Ignored]
  ------------------
 6755|  82.3k|        handler.on_error("Regex backend doesn't support wide strings as input");
 6756|  82.3k|        return begin;
 6757|  82.3k|    }
 6758|       |
 6759|  82.3k|    auto start = begin;
 6760|  82.3k|    ++begin;
 6761|       |
 6762|  82.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  82.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 82.3k]
  |  |  ------------------
  ------------------
 6763|     34|        handler.on_error("Unexpected end of regex in format string");
 6764|     34|        return begin;
 6765|     34|    }
 6766|       |
 6767|  82.3k|    handler.on_type(presentation_type::regex);
 6768|  8.52M|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6768:12): [True: 8.52M, False: 360]
  ------------------
 6769|  8.52M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6769:13): [True: 90.8k, False: 8.43M]
  ------------------
 6770|  90.8k|            if (*(begin - 1) != CharT{'\\'}) {
  ------------------
  |  Branch (6770:17): [True: 81.9k, False: 8.91k]
  ------------------
 6771|  81.9k|                break;
 6772|  81.9k|            }
 6773|  8.91k|            else {
 6774|  8.91k|                handler.on_type(presentation_type::regex_escaped);
 6775|  8.91k|            }
 6776|  90.8k|        }
 6777|  8.52M|    }
 6778|  82.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  82.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 360, False: 81.9k]
  |  |  ------------------
  ------------------
 6779|    360|        handler.on_error("Unexpected end of regex in format string");
 6780|    360|        return begin;
 6781|    360|    }
 6782|       |
 6783|  81.9k|    auto regex_end = begin;
 6784|  81.9k|    auto regex_pattern = make_string_view_from_pointers(start + 1, regex_end);
 6785|  81.9k|    if (SCN_UNLIKELY(regex_pattern.empty())) {
  ------------------
  |  |  859|  81.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 58, False: 81.9k]
  |  |  ------------------
  ------------------
 6786|     58|        handler.on_error("Invalid (empty) regex in format string");
 6787|     58|        return begin;
 6788|     58|    }
 6789|  81.9k|    handler.on_regex_pattern(regex_pattern);
 6790|  81.9k|    ++begin;
 6791|       |
 6792|  81.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  81.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 81.8k]
  |  |  ------------------
  ------------------
 6793|     34|        handler.on_error("Unexpected end of regex in format string");
 6794|     34|        return begin;
 6795|     34|    }
 6796|       |
 6797|  81.8k|    regex_flags flags{regex_flags::none};
 6798|  81.8k|    constexpr std::array<std::pair<char, regex_flags>, 4> flag_map{
 6799|  81.8k|        {{'m', regex_flags::multiline},
 6800|  81.8k|         {'s', regex_flags::singleline},
 6801|  81.8k|         {'i', regex_flags::nocase},
 6802|  81.8k|         {'n', regex_flags::nocapture}}};
 6803|  92.7k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6803:12): [True: 92.6k, False: 82]
  ------------------
 6804|  92.6k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6804:13): [True: 81.6k, False: 11.0k]
  ------------------
 6805|  81.6k|            break;
 6806|  81.6k|        }
 6807|  11.0k|        bool found_flag = false;
 6808|  31.9k|        for (auto flag : flag_map) {
  ------------------
  |  Branch (6808:24): [True: 31.9k, False: 150]
  ------------------
 6809|  31.9k|            if (static_cast<CharT>(flag.first) != *begin) {
  ------------------
  |  Branch (6809:17): [True: 21.0k, False: 10.8k]
  ------------------
 6810|  21.0k|                continue;
 6811|  21.0k|            }
 6812|  10.8k|            if ((flags & flag.second) != regex_flags::none) {
  ------------------
  |  Branch (6812:17): [True: 28, False: 10.8k]
  ------------------
 6813|     28|                handler.on_error("Flag set multiple times in regex");
 6814|     28|                return begin;
 6815|     28|            }
 6816|  10.8k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 6817|  10.8k|            if (*begin == CharT{'s'}) {
  ------------------
  |  Branch (6817:17): [True: 76, False: 10.7k]
  ------------------
 6818|       |                // clang-format off
 6819|     76|                handler.on_error("/s flag for regex isn't supported by regex backend");
 6820|       |                // clang-format on
 6821|     76|            }
 6822|       |#if !SCN_HAS_STD_REGEX_MULTILINE
 6823|       |            if (*begin == CharT{'m'}) {
 6824|       |                // clang-format off
 6825|       |                handler.on_error("/m flag for regex isn't supported by regex backend");
 6826|       |                // clang-format on
 6827|       |            }
 6828|       |#endif
 6829|  10.8k|#endif
 6830|  10.8k|            flags |= flag.second;
 6831|  10.8k|            found_flag = true;
 6832|  10.8k|            break;
 6833|  10.8k|        }
 6834|  11.0k|        if (!found_flag) {
  ------------------
  |  Branch (6834:13): [True: 150, False: 10.8k]
  ------------------
 6835|    150|            handler.on_error("Invalid flag in regex");
 6836|    150|            return begin;
 6837|    150|        }
 6838|  11.0k|    }
 6839|  81.6k|    handler.on_regex_flags(flags);
 6840|       |
 6841|  81.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  81.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 82, False: 81.6k]
  |  |  ------------------
  ------------------
 6842|     82|        handler.on_error("Unexpected end of regex in format string");
 6843|     82|        return begin;
 6844|     82|    }
 6845|       |
 6846|  81.6k|    return begin;
 6847|       |#else
 6848|       |    handler.on_error("Regular expression support is disabled");
 6849|       |    return {};
 6850|       |#endif
 6851|  81.6k|}
_ZN3scn2v36detail12specs_setter16on_regex_patternIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6353|  81.9k|    {
 6354|  81.9k|        m_specs.charset_string_data = pattern.data();
 6355|  81.9k|        m_specs.charset_string_size = pattern.size();
 6356|  81.9k|    }
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6454|  4.13k|{
 6455|  4.13k|    switch (type) {
 6456|     88|        case 'b':
  ------------------
  |  Branch (6456:9): [True: 88, False: 4.04k]
  ------------------
 6457|    122|        case 'B':
  ------------------
  |  Branch (6457:9): [True: 34, False: 4.09k]
  ------------------
 6458|    122|            return presentation_type::int_binary;
 6459|     88|        case 'd':
  ------------------
  |  Branch (6459:9): [True: 88, False: 4.04k]
  ------------------
 6460|     88|            return presentation_type::int_decimal;
 6461|    136|        case 'i':
  ------------------
  |  Branch (6461:9): [True: 136, False: 3.99k]
  ------------------
 6462|    136|            return presentation_type::int_generic;
 6463|    196|        case 'u':
  ------------------
  |  Branch (6463:9): [True: 196, False: 3.93k]
  ------------------
 6464|    196|            return presentation_type::int_unsigned_decimal;
 6465|    168|        case 'o':
  ------------------
  |  Branch (6465:9): [True: 168, False: 3.96k]
  ------------------
 6466|    168|            return presentation_type::int_octal;
 6467|    202|        case 'x':
  ------------------
  |  Branch (6467:9): [True: 202, False: 3.93k]
  ------------------
 6468|    254|        case 'X':
  ------------------
  |  Branch (6468:9): [True: 52, False: 4.08k]
  ------------------
 6469|    254|            return presentation_type::int_hex;
 6470|     66|        case 'r':
  ------------------
  |  Branch (6470:9): [True: 66, False: 4.06k]
  ------------------
 6471|    118|        case 'R':
  ------------------
  |  Branch (6471:9): [True: 52, False: 4.08k]
  ------------------
 6472|    118|            return presentation_type::int_arbitrary_base;
 6473|    178|        case 'a':
  ------------------
  |  Branch (6473:9): [True: 178, False: 3.95k]
  ------------------
 6474|    348|        case 'A':
  ------------------
  |  Branch (6474:9): [True: 170, False: 3.96k]
  ------------------
 6475|    348|            return presentation_type::float_hex;
 6476|    160|        case 'e':
  ------------------
  |  Branch (6476:9): [True: 160, False: 3.97k]
  ------------------
 6477|    194|        case 'E':
  ------------------
  |  Branch (6477:9): [True: 34, False: 4.09k]
  ------------------
 6478|    194|            return presentation_type::float_scientific;
 6479|    102|        case 'f':
  ------------------
  |  Branch (6479:9): [True: 102, False: 4.03k]
  ------------------
 6480|    226|        case 'F':
  ------------------
  |  Branch (6480:9): [True: 124, False: 4.00k]
  ------------------
 6481|    226|            return presentation_type::float_fixed;
 6482|     34|        case 'g':
  ------------------
  |  Branch (6482:9): [True: 34, False: 4.09k]
  ------------------
 6483|     68|        case 'G':
  ------------------
  |  Branch (6483:9): [True: 34, False: 4.09k]
  ------------------
 6484|     68|            return presentation_type::float_general;
 6485|  1.06k|        case 's':
  ------------------
  |  Branch (6485:9): [True: 1.06k, False: 3.07k]
  ------------------
 6486|  1.06k|            return presentation_type::string;
 6487|    304|        case 'c':
  ------------------
  |  Branch (6487:9): [True: 304, False: 3.82k]
  ------------------
 6488|    304|            return presentation_type::character;
 6489|     34|        case '?':
  ------------------
  |  Branch (6489:9): [True: 34, False: 4.09k]
  ------------------
 6490|     34|            return presentation_type::escaped_character;
 6491|     88|        case 'p':
  ------------------
  |  Branch (6491:9): [True: 88, False: 4.04k]
  ------------------
 6492|     88|            return presentation_type::pointer;
 6493|      0|        case '[':
  ------------------
  |  Branch (6493:9): [True: 0, False: 4.13k]
  ------------------
 6494|      0|        case '/':
  ------------------
  |  Branch (6494:9): [True: 0, False: 4.13k]
  ------------------
 6495|       |            // Should be handled by parse_presentation_set and
 6496|       |            // parse_presentation_regex
 6497|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6498|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6499|    728|        default:
  ------------------
  |  Branch (6499:9): [True: 728, False: 3.40k]
  ------------------
 6500|    728|            return presentation_type::none;
 6501|  4.13k|    }
 6502|  4.13k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6531|  97.7k|{
 6532|  97.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  97.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  97.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|  97.7k|    auto check_align = [](wchar_t ch) {
 6535|  97.7k|        switch (ch) {
 6536|  97.7k|            case L'<':
 6537|  97.7k|                return align_type::left;
 6538|  97.7k|            case L'>':
 6539|  97.7k|                return align_type::right;
 6540|  97.7k|            case L'^':
 6541|  97.7k|                return align_type::center;
 6542|  97.7k|            default:
 6543|  97.7k|                return align_type::none;
 6544|  97.7k|        }
 6545|  97.7k|    };
 6546|       |
 6547|  97.7k|    auto potential_fill_len = code_point_length(begin, end);
 6548|  97.7k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   195k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 97.7k]
  |  |  |  Branch (859:45): [True: 0, False: 97.7k]
  |  |  |  Branch (859:45): [True: 0, False: 97.7k]
  |  |  ------------------
  ------------------
 6549|  97.7k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|  97.7k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|  97.7k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|  97.7k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|  97.7k|    const auto begin_before_fill = begin;
 6559|  97.7k|    begin += potential_fill_len;
 6560|       |
 6561|  97.7k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 1.04k, False: 96.7k]
  ------------------
 6562|  1.04k|        return begin_before_fill;
 6563|  1.04k|    }
 6564|       |
 6565|  96.7k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|  96.7k|    const auto begin_after_fill = begin;
 6567|  96.7k|    ++begin;
 6568|       |
 6569|  96.7k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 96.7k, False: 0]
  ------------------
 6570|  96.7k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  96.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 50, False: 96.6k]
  |  |  ------------------
  ------------------
 6571|     50|            handler.on_error("Invalid fill character '{' in format string");
 6572|     50|            return begin;
 6573|     50|        }
 6574|  96.6k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 4.62k, False: 92.0k]
  ------------------
 6575|  4.62k|            return begin_before_fill;
 6576|  4.62k|        }
 6577|  96.6k|    }
 6578|       |
 6579|  92.0k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 89.4k, False: 2.57k]
  ------------------
 6580|  89.4k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 1.70k, False: 87.7k]
  ------------------
 6581|  1.70k|            handler.on_align(potential_align_on_fill);
 6582|  1.70k|            return begin_after_fill;
 6583|  1.70k|        }
 6584|  87.7k|        return begin_before_fill;
 6585|  89.4k|    }
 6586|       |
 6587|  2.57k|    handler.on_fill(potential_fill);
 6588|  2.57k|    handler.on_align(potential_align_after_fill);
 6589|  2.57k|    return begin;
 6590|  92.0k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6513|  97.7k|{
 6514|  97.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  97.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  97.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6515|  97.7k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6515:19): [Folded - Ignored]
  ------------------
 6516|  97.7k|        return 1;
 6517|  97.7k|    }
 6518|  97.7k|    else {
 6519|  97.7k|        const auto lengths =
 6520|  97.7k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6521|  97.7k|            "\3\4";
 6522|  97.7k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6523|  97.7k|        return len;
 6524|  97.7k|    }
 6525|  97.7k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6534|   194k|    auto check_align = [](wchar_t ch) {
 6535|   194k|        switch (ch) {
 6536|  2.71k|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 2.71k, False: 191k]
  ------------------
 6537|  2.71k|                return align_type::left;
 6538|    358|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 358, False: 194k]
  ------------------
 6539|    358|                return align_type::right;
 6540|  2.62k|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 2.62k, False: 191k]
  ------------------
 6541|  2.62k|                return align_type::center;
 6542|   188k|            default:
  ------------------
  |  Branch (6542:13): [True: 188k, False: 5.70k]
  ------------------
 6543|   188k|                return align_type::none;
 6544|   194k|        }
 6545|   194k|    };
_ZN3scn2v36detail12specs_setter7on_fillIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6267|  2.57k|    {
 6268|  2.57k|        m_specs.fill = fill;
 6269|  2.57k|    }
_ZN3scn2v36detail9fill_typeaSIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6148|  2.57k|    {
 6149|  2.57k|        SCN_EXPECT(!s.empty());
  ------------------
  |  |  924|  2.57k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.57k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6150|  2.57k|        SCN_EXPECT(s.size() * sizeof(CharT) <= max_size);
  ------------------
  |  |  924|  2.57k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.57k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6151|  2.57k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (6151:23): [Folded - Ignored]
  ------------------
 6152|  2.57k|            for (size_t i = 0; i < s.size(); ++i) {
 6153|  2.57k|                SCN_GCC_PUSH
 6154|  2.57k|                SCN_GCC_IGNORE("-Wstringop-overflow")  // false positive
 6155|  2.57k|                m_data[i] = s[i];
 6156|  2.57k|                SCN_GCC_POP
 6157|  2.57k|            }
 6158|  2.57k|            m_size = static_cast<unsigned char>(s.size());
 6159|  2.57k|        }
 6160|  2.57k|        else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (6160:28): [Folded - Ignored]
  ------------------
 6161|  2.57k|            m_data[0] = static_cast<char>(static_cast<unsigned>(s.front()));
 6162|  2.57k|            m_data[1] =
 6163|  2.57k|                static_cast<char>(static_cast<unsigned>(s.front()) >> 8);
 6164|  2.57k|            if (s.size() == 1) {
 6165|  2.57k|                return;
 6166|  2.57k|            }
 6167|  2.57k|            m_data[2] = static_cast<char>(static_cast<unsigned>(s[1]));
 6168|  2.57k|            m_data[3] = static_cast<char>(static_cast<unsigned>(s[1]) >> 8);
 6169|  2.57k|        }
 6170|  2.57k|        else {
 6171|  2.57k|            const auto front = static_cast<unsigned>(s.front());
 6172|  2.57k|            m_data[0] = static_cast<char>(front);
 6173|  2.57k|            m_data[1] = static_cast<char>(front >> 8);
 6174|  2.57k|            m_data[2] = static_cast<char>(front >> 16);
 6175|  2.57k|            m_data[3] = static_cast<char>(front >> 24);
 6176|  2.57k|        }
 6177|  2.57k|    }
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6596|  97.6k|{
 6597|  97.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  97.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  97.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|  97.6k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 82.6k, False: 15.0k]
  |  Branch (6599:33): [True: 74.8k, False: 7.73k]
  ------------------
 6600|  74.8k|        int width = parse_simple_int(begin, end);
 6601|  74.8k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  74.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 74.8k, False: 0]
  |  |  ------------------
  ------------------
 6602|  74.8k|            handler.on_width(width);
 6603|  74.8k|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|  74.8k|    }
 6609|  97.6k|    return begin;
 6610|  97.6k|}
impl.cpp:_ZN3scn2v36detail15parse_precisionIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6616|  4.38k|{
 6617|  4.38k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  4.38k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.38k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6618|       |
 6619|  4.38k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6619:9): [True: 4.34k, False: 40]
  |  Branch (6619:33): [True: 4.27k, False: 70]
  ------------------
 6620|  4.27k|        int prec = parse_simple_int(begin, end);
 6621|  4.27k|        if (SCN_LIKELY(prec != -1)) {
  ------------------
  |  |  858|  4.27k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 4.27k, False: 0]
  |  |  ------------------
  ------------------
 6622|  4.27k|            handler.on_precision(prec);
 6623|  4.27k|        }
 6624|      0|        else {
 6625|      0|            handler.on_error("Invalid field precision");
 6626|      0|            return begin;
 6627|      0|        }
 6628|  4.27k|    }
 6629|  4.38k|    return begin;
 6630|  4.38k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7126|    874|    {
 7127|    874|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|    874|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 786, False: 88]
  ------------------
 7129|    874|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 698, False: 88]
  ------------------
 7130|    874|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 610, False: 88]
  ------------------
 7131|    874|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 522, False: 88]
  ------------------
 7132|    522|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|    522|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|    522|        }
 7137|       |
 7138|    352|        Handler::on_localized();
 7139|    352|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  93.5k|{
 8417|  93.5k|#define SCN_VISIT(Type)                                         \
 8418|  93.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  93.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  93.5k|    }                                                           \
 8421|  93.5k|    else {                                                      \
 8422|  93.5k|        return vis(monostate_val);                              \
 8423|  93.5k|    }
 8424|       |
 8425|  93.5k|    monostate monostate_val{};
 8426|       |
 8427|  93.5k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 93.5k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 93.5k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|  10.4k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 10.4k, False: 83.0k]
  ------------------
 8433|  10.4k|            SCN_VISIT(int);
  ------------------
  |  | 8418|  10.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  10.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  10.4k|    }                                                           \
  |  | 8421|  10.4k|    else {                                                      \
  |  | 8422|  10.4k|        return vis(monostate_val);                              \
  |  | 8423|  10.4k|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 93.5k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 93.5k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 93.5k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 93.5k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|  10.4k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 10.4k, False: 83.0k]
  ------------------
 8443|  10.4k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|  10.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  10.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  10.4k|    }                                                           \
  |  | 8421|  10.4k|    else {                                                      \
  |  | 8422|  10.4k|        return vis(monostate_val);                              \
  |  | 8423|  10.4k|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 93.5k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 93.5k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|  10.3k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 10.3k, False: 83.1k]
  ------------------
 8449|  10.3k|            SCN_VISIT(void*);
  ------------------
  |  | 8418|  10.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  10.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  10.3k|    }                                                           \
  |  | 8421|  10.3k|    else {                                                      \
  |  | 8422|  10.3k|        return vis(monostate_val);                              \
  |  | 8423|  10.3k|    }
  ------------------
 8450|  10.4k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 10.4k, False: 83.0k]
  ------------------
 8451|  10.4k|            SCN_VISIT(bool);
  ------------------
  |  | 8418|  10.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  10.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  10.4k|    }                                                           \
  |  | 8421|  10.4k|    else {                                                      \
  |  | 8422|  10.4k|        return vis(monostate_val);                              \
  |  | 8423|  10.4k|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 93.5k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|  10.3k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 10.3k, False: 83.1k]
  ------------------
 8455|  10.3k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|  10.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  10.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  10.3k|    }                                                           \
  |  | 8421|  10.3k|    else {                                                      \
  |  | 8422|  10.3k|        return vis(monostate_val);                              \
  |  | 8423|  10.3k|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 93.5k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 93.5k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|  10.4k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 10.4k, False: 83.0k]
  ------------------
 8461|  10.4k|            SCN_VISIT(double);
  ------------------
  |  | 8418|  10.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  10.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  10.4k|    }                                                           \
  |  | 8421|  10.4k|    else {                                                      \
  |  | 8422|  10.4k|        return vis(monostate_val);                              \
  |  | 8423|  10.4k|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 93.5k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 93.5k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|  10.3k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 10.3k, False: 83.1k]
  ------------------
 8467|  10.3k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|  10.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  10.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  10.3k|    }                                                           \
  |  | 8421|  10.3k|    else {                                                      \
  |  | 8422|  10.3k|        return vis(monostate_val);                              \
  |  | 8423|  10.3k|    }
  ------------------
 8468|  10.3k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 10.3k, False: 83.1k]
  ------------------
 8469|  10.3k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|  10.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  10.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  10.3k|    }                                                           \
  |  | 8421|  10.3k|    else {                                                      \
  |  | 8422|  10.3k|        return vis(monostate_val);                              \
  |  | 8423|  10.3k|    }
  ------------------
 8470|  10.3k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 10.3k, False: 83.1k]
  ------------------
 8471|  10.3k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|  10.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  10.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  10.3k|    }                                                           \
  |  | 8421|  10.3k|    else {                                                      \
  |  | 8422|  10.3k|        return vis(monostate_val);                              \
  |  | 8423|  10.3k|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 93.5k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 93.5k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 93.5k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 93.5k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 93.5k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  93.5k|            SCN_CLANG_POP
 8495|  93.5k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE5beginEv:
 3329|  6.06k|    {
 3330|  6.06k|        return m_iterator;
 3331|  6.06k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISH_vEEOT_:
 1429|  1.51k|    {
 1430|  1.51k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  436|  1.51k|    {
  437|  1.51k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.51k|    {
 1177|  1.51k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE3endEv:
 3333|  3.03k|    {
 3334|  3.03k|        return m_sentinel;
 3335|  3.03k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEEC2ISG_LPv0EEET_SJ_:
 3315|  3.03k|    {
 3316|  3.03k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9has_valueEv:
  484|  3.03k|    {
  485|  3.03k|        return m_has_value;
  486|  3.03k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5valueISH_LPv0EEERT_v:
 1626|  1.51k|    {
 1627|  1.51k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.51k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.51k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.51k|        return this->get_value();
 1629|  1.51k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9get_valueEv:
  450|  1.51k|    {
  451|  1.51k|        return m_value;
  452|  1.51k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESI_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSO_:
 1836|  1.51k|    {
 1837|  1.51k|        return detail::transform_error_impl(std::move(*this),
 1838|  1.51k|                                            std::forward<F>(f));
 1839|  1.51k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS6_IPKwS8_EENS4_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEE8sentinelILb1EEEEENS4_9eof_errorEEERFNS0_10scan_errorESK_ELPv0ESM_EEDaOT_OT0_:
 1322|  1.51k|{
 1323|  1.51k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.51k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.51k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.51k|            return result(*std::forward<Exp>(exp));
 1327|  1.51k|        }
 1328|       |
 1329|  1.51k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.51k|        return result(unexpect, monostate{});
 1331|  1.51k|    }
 1332|  1.51k|    else {
 1333|  1.51k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.51k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.51k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.51k, False: 0]
  |  |  ------------------
  ------------------
 1335|  1.51k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.51k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  1.51k|    }
 1340|  1.51k|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_LPv0EEEOT_v:
 1662|  1.51k|    {
 1663|  1.51k|        return std::move(value());
 1664|  1.51k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|  1.51k|    {
 1430|  1.51k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  436|  1.51k|    {
  437|  1.51k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.51k|    {
 1177|  1.51k|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEcvbEv:
 1597|  1.51k|    {
 1598|  1.51k|        return has_value();
 1599|  1.51k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  3.03k|    {
  485|  3.03k|        return m_has_value;
  486|  3.03k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEdeISH_LPv0EEEOT_v:
 1662|  1.51k|    {
 1663|  1.51k|        return std::move(value());
 1664|  1.51k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1626|  1.51k|    {
 1627|  1.51k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.51k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.51k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.51k|        return this->get_value();
 1629|  1.51k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.51k|    {
  451|  1.51k|        return m_value;
  452|  1.51k|    }

_ZN3scn2v34scanIJwERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  29.7k|{
   89|  29.7k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  29.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  29.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  29.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  29.7k|    static_cast<    \
  |  |  929|  29.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  29.7k|    static_cast<    \
  |  |  929|  29.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  29.7k|}
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESE_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEEEOSA_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   267k|{
   44|   267k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   267k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   267k|}
_ZN3scn2v34scanIJwENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  29.7k|{
  127|  29.7k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  29.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  29.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  29.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  29.7k|    static_cast<    \
  |  |  929|  29.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  29.7k|    static_cast<    \
  |  |  929|  29.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  29.7k|}
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS2_6localeELPv0EEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT0_OSC_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   267k|{
   60|   267k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   267k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   267k|}
_ZN3scn2v34scanIJiERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  29.7k|{
   89|  29.7k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  29.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  29.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  29.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  29.7k|    static_cast<    \
  |  |  929|  29.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  29.7k|    static_cast<    \
  |  |  929|  29.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  29.7k|}
_ZN3scn2v34scanIJiENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  29.7k|{
  127|  29.7k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  29.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  29.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  29.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  29.7k|    static_cast<    \
  |  |  929|  29.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  29.7k|    static_cast<    \
  |  |  929|  29.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  29.7k|}
_ZN3scn2v34scanIJjERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  29.7k|{
   89|  29.7k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  29.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  29.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  29.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  29.7k|    static_cast<    \
  |  |  929|  29.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  29.7k|    static_cast<    \
  |  |  929|  29.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  29.7k|}
_ZN3scn2v34scanIJjENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  29.7k|{
  127|  29.7k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  29.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  29.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  29.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  29.7k|    static_cast<    \
  |  |  929|  29.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  29.7k|    static_cast<    \
  |  |  929|  29.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  29.7k|}
_ZN3scn2v34scanIJdERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  29.7k|{
   89|  29.7k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  29.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  29.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  29.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  29.7k|    static_cast<    \
  |  |  929|  29.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  29.7k|    static_cast<    \
  |  |  929|  29.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  29.7k|}
_ZN3scn2v34scanIJdENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  29.7k|{
  127|  29.7k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  29.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  29.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  29.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  29.7k|    static_cast<    \
  |  |  929|  29.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  29.7k|    static_cast<    \
  |  |  929|  29.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  29.7k|}
_ZN3scn2v34scanIJbERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  29.7k|{
   89|  29.7k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  29.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  29.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  29.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  29.7k|    static_cast<    \
  |  |  929|  29.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  29.7k|    static_cast<    \
  |  |  929|  29.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  29.7k|}
_ZN3scn2v34scanIJbENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  29.7k|{
  127|  29.7k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  29.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  29.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  29.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  29.7k|    static_cast<    \
  |  |  929|  29.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  29.7k|    static_cast<    \
  |  |  929|  29.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  29.7k|}
_ZN3scn2v34scanIJPvERNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEELS2_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  29.7k|{
   89|  29.7k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  29.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  29.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  29.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  29.7k|    static_cast<    \
  |  |  929|  29.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  29.7k|    static_cast<    \
  |  |  929|  29.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  29.7k|}
_ZN3scn2v34scanIJPvENSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEELS2_0ELS2_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  29.7k|{
  127|  29.7k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  29.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  29.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  29.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  29.7k|    static_cast<    \
  |  |  929|  29.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  29.7k|    static_cast<    \
  |  |  929|  29.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  29.7k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEERNS2_17basic_string_viewIwNS4_IwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNSM_13type_identityISH_E4typeEJDpNSY_ISS_E4typeEEEE:
   88|  29.7k|{
   89|  29.7k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  29.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  29.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  29.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  29.7k|    static_cast<    \
  |  |  929|  29.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  29.7k|    static_cast<    \
  |  |  929|  29.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  29.7k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeERNS2_17basic_string_viewIwNS4_IwEEEELPv0ELSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNSN_13type_identityISI_E4typeEJDpNS12_IST_E4typeEEEE:
  126|  29.7k|{
  127|  29.7k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  29.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  29.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  29.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  29.7k|    static_cast<    \
  |  |  929|  29.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  29.7k|    static_cast<    \
  |  |  929|  29.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  29.7k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEERNS2_17basic_string_viewIwS5_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSL_13type_identityISG_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  29.7k|{
   89|  29.7k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  29.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  29.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  29.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  29.7k|    static_cast<    \
  |  |  929|  29.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  29.7k|    static_cast<    \
  |  |  929|  29.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  29.7k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeERNS2_17basic_string_viewIwS5_EELPv0ELSD_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSM_13type_identityISH_E4typeEJDpNS11_ISS_E4typeEEEE:
  126|  29.7k|{
  127|  29.7k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  29.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  29.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  29.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  29.7k|    static_cast<    \
  |  |  929|  29.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  29.7k|    static_cast<    \
  |  |  929|  29.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  29.7k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEERS6_LPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  29.7k|{
   89|  29.7k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  29.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  29.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  29.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  29.7k|    static_cast<    \
  |  |  929|  29.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  29.7k|    static_cast<    \
  |  |  929|  29.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  29.7k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS2_6localeERS6_LPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  29.7k|{
  127|  29.7k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  29.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  29.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  29.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  29.7k|    static_cast<    \
  |  |  929|  29.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  29.7k|    static_cast<    \
  |  |  929|  29.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  29.7k|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  652|   401k|{
  653|   401k|    static_assert(std::is_same_v<Locale, std::locale>);
  654|   401k|}
_ZNK3scn2v36detail10locale_ref3getINSt3__16localeEEET_v:
  658|    364|{
  659|    364|    static_assert(std::is_same_v<Locale, std::locale>);
  660|    364|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (660:12): [True: 182, False: 182]
  ------------------
  661|    364|                    : std::locale{};
  662|    364|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|  1.02k|{
 1221|  1.02k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  1.02k|                                  m_nan_payload_buffer, value);
 1223|  1.02k|    value = this->setsign(value);
 1224|  1.02k|    return n;
 1225|  1.02k|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|  1.10k|{
 1221|  1.10k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  1.10k|                                  m_nan_payload_buffer, value);
 1223|  1.10k|    value = this->setsign(value);
 1224|  1.10k|    return n;
 1225|  1.10k|}
_ZN3scn2v34impl19parse_integer_valueIcaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|     22|{
 1461|     22|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|     22|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|     22|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|     22|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|     22|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 22, False: 0]
  ------------------
 1467|     22|        SCN_UNLIKELY_ATTR
 1468|     22|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|     22|                                     "Invalid integer value");
 1470|     22|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIciEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    998|{
 1461|    998|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    998|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    998|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    998|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    998|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    998|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    998|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    998|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    998|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    998|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    998|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    998|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    998|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 998, False: 0]
  ------------------
 1467|    998|        SCN_UNLIKELY_ATTR
 1468|    998|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    998|                                     "Invalid integer value");
 1470|    998|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIwiEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|  1.12k|{
 1461|  1.12k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  1.12k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.12k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|  1.12k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  1.12k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.12k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  1.12k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  1.12k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.12k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  1.12k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  1.12k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.12k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|  1.12k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 1.12k, False: 0]
  ------------------
 1467|  1.12k|        SCN_UNLIKELY_ATTR
 1468|  1.12k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  1.12k|                                     "Invalid integer value");
 1470|  1.12k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIcjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    998|{
 1461|    998|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    998|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    998|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    998|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    998|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    998|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    998|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    998|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    998|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    998|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    998|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    998|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    998|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 998, False: 0]
  ------------------
 1467|    998|        SCN_UNLIKELY_ATTR
 1468|    998|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    998|                                     "Invalid integer value");
 1470|    998|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIwjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|  1.10k|{
 1461|  1.10k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  1.10k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.10k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|  1.10k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  1.10k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.10k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  1.10k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  1.10k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.10k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  1.10k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  1.10k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.10k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|  1.10k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 1.10k, False: 0]
  ------------------
 1467|  1.10k|        SCN_UNLIKELY_ATTR
 1468|  1.10k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  1.10k|                                     "Invalid integer value");
 1470|  1.10k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIcmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    980|{
 1461|    980|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    980|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    980|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    980|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    980|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    980|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    980|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    980|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    980|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    980|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    980|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    980|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    980|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 980, False: 0]
  ------------------
 1467|    980|        SCN_UNLIKELY_ATTR
 1468|    980|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    980|                                     "Invalid integer value");
 1470|    980|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIwmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|  1.08k|{
 1461|  1.08k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  1.08k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.08k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|  1.08k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  1.08k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.08k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  1.08k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  1.08k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.08k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  1.08k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  1.08k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.08k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|  1.08k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 1.08k, False: 0]
  ------------------
 1467|  1.08k|        SCN_UNLIKELY_ATTR
 1468|  1.08k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  1.08k|                                     "Invalid integer value");
 1470|  1.08k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2183|   133k|{
 2184|   133k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2185|   133k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2207|   267k|{
 2208|   267k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2209|   267k|}
_ZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  193|  4.51k|{
  194|  4.51k|    return find_classic_impl(
  195|  4.51k|        source, [](char ch) { return is_ascii_space(ch); },
  196|  4.51k|        [](char32_t cp) { return is_cp_space(cp); });
  197|  4.51k|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  201|  32.1k|{
  202|  32.1k|    return find_classic_impl(
  203|  32.1k|        source, [](char ch) { return !is_ascii_space(ch); },
  204|  32.1k|        [](char32_t cp) { return !is_cp_space(cp); });
  205|  32.1k|}
_ZN3scn2v36detail12handle_errorENS0_10scan_errorE:
  672|    298|{
  673|    298|    return e;
  674|    298|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2140|   133k|{
 2141|   133k|    return vscan_internal(source, format, args);
 2142|   133k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2160|   267k|{
 2161|   267k|    return vscan_internal(source, format, args);
 2162|   267k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  4.51k|{
  118|  4.51k|    auto it = source.begin();
  119|       |
  120|  30.8k|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 27.1k, False: 3.70k]
  ------------------
  121|  27.1k|        auto sv =
  122|  27.1k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  27.1k|                .substr(0, 8);
  124|       |
  125|  27.1k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 7.36k, False: 19.7k]
  ------------------
  126|  7.36k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  7.36k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  7.36k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 486, False: 6.87k]
  ------------------
  129|    486|                break;
  130|    486|            }
  131|  6.87k|            continue;
  132|  7.36k|        }
  133|       |
  134|  86.0k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 66.6k, False: 19.4k]
  ------------------
  135|  66.6k|            auto tmp =
  136|  66.6k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|  66.6k|            auto res = get_next_code_point(tmp);
  138|  66.6k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 324, False: 66.2k]
  ------------------
  139|    324|                return it;
  140|    324|            }
  141|  66.2k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  66.2k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  66.2k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  66.2k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  66.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  66.2k|        }
  145|  19.7k|    }
  146|       |
  147|  4.19k|    return detail::make_string_view_iterator(source, it);
  148|  4.51k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  104|  68.4k|{
  105|  68.4k|    static_assert(sizeof(*source.data()) == 1);
  106|  68.4k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|  68.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  68.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  107|  68.4k|    uint64_t word{};
  108|  68.4k|    std::memcpy(&word, source.data(), source.size());
  109|       |
  110|  68.4k|    return has_byte_greater(word, 127) != 0;
  111|  68.4k|}
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  195|  51.6k|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  196|  66.6k|        [](char32_t cp) { return is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  32.1k|{
  118|  32.1k|    auto it = source.begin();
  119|       |
  120|  51.8k|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 41.3k, False: 10.4k]
  ------------------
  121|  41.3k|        auto sv =
  122|  41.3k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  41.3k|                .substr(0, 8);
  124|       |
  125|  41.3k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 19.1k, False: 22.2k]
  ------------------
  126|  19.1k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  19.1k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  19.1k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 12.8k, False: 6.28k]
  ------------------
  129|  12.8k|                break;
  130|  12.8k|            }
  131|  6.28k|            continue;
  132|  19.1k|        }
  133|       |
  134|  68.9k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 55.5k, False: 13.3k]
  ------------------
  135|  55.5k|            auto tmp =
  136|  55.5k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|  55.5k|            auto res = get_next_code_point(tmp);
  138|  55.5k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 8.87k, False: 46.6k]
  ------------------
  139|  8.87k|                return it;
  140|  8.87k|            }
  141|  46.6k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  46.6k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  46.6k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  46.6k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  46.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  46.6k|        }
  145|  22.2k|    }
  146|       |
  147|  23.2k|    return detail::make_string_view_iterator(source, it);
  148|  32.1k|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  203|  55.2k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  204|  55.5k|        [](char32_t cp) { return !is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  1.02k|{
 1138|  1.02k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 1.02k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|  1.02k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 1.02k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|  1.02k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 1.02k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|  1.02k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 1.02k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|  1.02k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  1.02k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  1.02k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 46, False: 982]
  ------------------
 1185|     46|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|     46|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 46, False: 0]
  |  |  ------------------
  ------------------
 1186|     46|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|     46|                                         "Invalid floating-point digit");
 1188|     46|        }
 1189|     46|    }
 1190|    982|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|    982|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 982, False: 0]
  |  |  ------------------
  ------------------
 1191|    982|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|    982|                                     "Invalid floating-point digit");
 1193|    982|    }
 1194|       |
 1195|      0|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|      0|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|      0|            double tmp{};
 1200|      0|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|      0|            value = tmp;
 1202|      0|            return ret;
 1203|      0|        }
 1204|      0|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|      0|            return fast_float_fallback(data, value);
 1208|      0|        }
 1209|      0|    }
 1210|      0|    else {
 1211|       |        // Default to fast_float
 1212|      0|        return fast_float_impl<CharT, T>{data}(value);
 1213|      0|    }
 1214|      0|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  1.10k|{
 1138|  1.10k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 1.10k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|  1.10k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 1.10k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|  1.10k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 1.10k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|  1.10k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 1.10k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|  1.10k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  1.10k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.10k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  1.10k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 14, False: 1.09k]
  ------------------
 1185|     14|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14, False: 0]
  |  |  ------------------
  ------------------
 1186|     14|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|     14|                                         "Invalid floating-point digit");
 1188|     14|        }
 1189|     14|    }
 1190|  1.09k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  1.09k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.09k, False: 0]
  |  |  ------------------
  ------------------
 1191|  1.09k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  1.09k|                                     "Invalid floating-point digit");
 1193|  1.09k|    }
 1194|       |
 1195|      0|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|      0|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|      0|            double tmp{};
 1200|      0|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|      0|            value = tmp;
 1202|      0|            return ret;
 1203|      0|        }
 1204|      0|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|      0|            return fast_float_fallback(data, value);
 1208|      0|        }
 1209|      0|    }
 1210|      0|    else {
 1211|       |        // Default to fast_float
 1212|      0|        return fast_float_impl<CharT, T>{data}(value);
 1213|      0|    }
 1214|      0|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   267k|{
 1625|   267k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 267k, False: 414]
  ------------------
 1626|   267k|        return false;
 1627|   267k|    }
 1628|    414|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 126, False: 288]
  |  Branch (1628:39): [True: 18, False: 108]
  ------------------
 1629|   267k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1902|   267k|    {
 1903|   267k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1721|   802k|    {
 1722|   802k|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|   802k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 802k]
  |  |  ------------------
  ------------------
 1723|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1724|      0|        }
 1725|   802k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1852|   267k|    {
 1853|   267k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   267k|{
 2038|   267k|    const auto beg = handler.get_ctx().begin();
 2039|   267k|    detail::parse_format_string<false>(format, handler);
 2040|   267k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   267k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 263k, False: 4.34k]
  |  |  ------------------
  ------------------
 2041|   263k|        return unexpected(handler.error);
 2042|   263k|    }
 2043|  4.34k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   267k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2021|  1.19M|    {
 2022|  1.19M|        return ctx.get();
 2023|  1.19M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1856|  1.19M|    {
 1857|  1.19M|        return contiguous_ctx;
 1858|  1.19M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1906|   292k|    {
 1907|   373k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 91.0k, False: 282k]
  ------------------
 1908|  91.0k|            auto it = get_ctx().begin();
 1909|  91.0k|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 1.26k, False: 89.8k]
  ------------------
 1910|  1.26k|                SCN_UNLIKELY_ATTR
 1911|  1.26k|                return on_error("Unexpected end of source");
 1912|  1.26k|            }
 1913|       |
 1914|  89.8k|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|  89.8k|                    detail::make_string_view_from_pointers(begin, end));
 1916|  89.8k|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 5.72k, False: 84.1k]
  ------------------
 1917|  5.72k|                SCN_UNLIKELY_ATTR
 1918|  5.72k|                return on_error("Invalid encoding in format string");
 1919|  5.72k|            }
 1920|  84.1k|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 9.62k, False: 74.4k]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|  9.62k|                get_ctx().advance_to(
 1923|  9.62k|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|  9.62k|                auto begin_it = impl::read_while_classic_space(
 1926|  9.62k|                    detail::make_string_view_from_pointers(
 1927|  9.62k|                        detail::to_address(after_space_it),
 1928|  9.62k|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|  9.62k|                begin = detail::to_address(begin_it) - 1;
 1931|  9.62k|                continue;
 1932|  9.62k|            }
 1933|       |
 1934|  74.4k|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 3.08k, False: 71.4k]
  ------------------
 1935|  3.08k|                SCN_UNLIKELY_ATTR
 1936|  3.08k|                return on_error("Unexpected literal character in source");
 1937|  3.08k|            }
 1938|  71.4k|            get_ctx().advance_to(ranges::next(it));
 1939|  71.4k|        }
 1940|   292k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE20on_replacement_fieldEmPKc:
 1971|  6.82k|    {
 1972|  6.82k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1973|  6.82k|        set_arg_as_visited(arg_id);
 1974|       |
 1975|  6.82k|        on_visit_scan_arg(
 1976|  6.82k|            impl::default_arg_reader<context_type>{
 1977|  6.82k|                get_ctx().range(), get_ctx().args(), get_ctx().locale()},
 1978|  6.82k|            arg);
 1979|  6.82k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   160k|{
 1681|   160k|    auto arg = ctx.arg(id);
 1682|   160k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   160k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.67k, False: 158k]
  |  |  ------------------
  ------------------
 1683|  1.67k|        handler.on_error("Failed to find argument with ID");
 1684|  1.67k|    }
 1685|   160k|    return arg;
 1686|   160k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1796|   264k|    {
 1797|   264k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|   264k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.35k, False: 261k]
  |  |  ------------------
  ------------------
 1798|  3.35k|            on_error("Invalid out-of-range argument ID");
 1799|  3.35k|            return;
 1800|  3.35k|        }
 1801|       |
 1802|   261k|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|   261k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 142, False: 261k]
  |  |  ------------------
  ------------------
 1803|    142|            return on_error("Argument with this ID has already been scanned");
 1804|    142|        }
 1805|       |
 1806|   261k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|   261k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 261k, False: 0]
  |  |  ------------------
  ------------------
 1807|   261k|            visited_args_lower64 |= (1ull << id);
 1808|   261k|            return;
 1809|   261k|        }
 1810|       |
 1811|      0|        id -= 64;
 1812|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1813|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1781|   261k|    {
 1782|   261k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|   261k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 261k]
  |  |  ------------------
  ------------------
 1783|      0|            on_error("Invalid out-of-range argument ID");
 1784|      0|            return false;
 1785|      0|        }
 1786|       |
 1787|   261k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|   261k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 261k, False: 0]
  |  |  ------------------
  ------------------
 1788|   261k|            return (visited_args_lower64 >> id) & 1ull;
 1789|   261k|        }
 1790|       |
 1791|      0|        id -= 64;
 1792|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1793|   261k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl18default_arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1955|  6.82k|    {
 1956|  6.82k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 166, False: 6.66k]
  |  Branch (1956:23): [True: 0, False: 6.66k]
  ------------------
 1957|    166|            SCN_UNLIKELY_ATTR
 1958|    166|            return;
 1959|    166|        }
 1960|       |
 1961|  6.66k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  6.66k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  6.66k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  6.66k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.74k, False: 1.91k]
  |  |  ------------------
  ------------------
 1963|  4.74k|            on_error(r.error());
 1964|  4.74k|        }
 1965|  1.91k|        else {
 1966|  1.91k|            get_ctx().advance_to(*r);
 1967|  1.91k|        }
 1968|  6.66k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1765|   237k|    {
 1766|   237k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|   237k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 237k, False: 0]
  |  |  ------------------
  ------------------
 1767|   237k|            error = err;
 1768|   237k|        }
 1769|   237k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1943|   150k|    {
 1944|   150k|        return parse_ctx.next_arg_id();
 1945|   150k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEm:
 1947|  10.4k|    {
 1948|  10.4k|        parse_ctx.check_arg_id(id);
 1949|  10.4k|        return id;
 1950|  10.4k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1984|   153k|    {
 1985|   153k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   153k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   153k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 153k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   153k|        auto specs = detail::format_specs{};
 1998|   153k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   153k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   153k|            arg.type()};
 2001|       |
 2002|   153k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   153k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 2.81k, False: 151k]
  |  Branch (2003:29): [True: 1.43k, False: 149k]
  ------------------
 2004|  4.25k|            SCN_UNLIKELY_ATTR
 2005|  4.25k|            on_error("Missing '}' in format string");
 2006|  4.25k|            return parse_ctx.begin();
 2007|  4.25k|        }
 2008|   149k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   149k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 550, False: 149k]
  |  |  ------------------
  ------------------
 2009|    550|            return parse_ctx.begin();
 2010|    550|        }
 2011|   149k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   149k|        on_visit_scan_arg(
 2014|   149k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   149k|                                           get_ctx().locale()},
 2016|   149k|            arg);
 2017|   149k|        return parse_ctx.begin();
 2018|   149k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1700|   153k|    {
 1701|   153k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1955|   149k|    {
 1956|   149k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 116, False: 148k]
  |  Branch (1956:23): [True: 0, False: 148k]
  ------------------
 1957|    116|            SCN_UNLIKELY_ATTR
 1958|    116|            return;
 1959|    116|        }
 1960|       |
 1961|   148k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   148k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   148k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   148k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 138k, False: 10.5k]
  |  |  ------------------
  ------------------
 1963|   138k|            on_error(r.error());
 1964|   138k|        }
 1965|  10.5k|        else {
 1966|  10.5k|            get_ctx().advance_to(*r);
 1967|  10.5k|        }
 1968|   148k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorEPKc:
 1760|  1.25M|    {
 1761|  1.25M|        SCN_UNLIKELY_ATTR
 1762|  1.25M|        error = scan_error{scan_error::invalid_format_string, msg};
 1763|  1.25M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1728|   802k|    {
 1729|   802k|        {
 1730|   802k|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1730:45): [True: 0, False: 802k]
  ------------------
 1731|   802k|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1731:35): [True: 0, False: 802k]
  ------------------
 1732|   802k|                                      ? std::numeric_limits<uint64_t>::max()
 1733|   802k|                                      : (1ull << args_count_lower64) - 1;
 1734|       |
 1735|   802k|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1735:17): [True: 540k, False: 261k]
  ------------------
 1736|   540k|                return on_error("Argument list not exhausted");
 1737|   540k|            }
 1738|   802k|        }
 1739|       |
 1740|   261k|        if (args_count < 64) {
  ------------------
  |  Branch (1740:13): [True: 261k, False: 0]
  ------------------
 1741|   261k|            return;
 1742|   261k|        }
 1743|       |
 1744|      0|        auto last_args_count = args_count - 64;
 1745|      0|        for (auto it = visited_args_upper.begin();
 1746|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1746:14): [True: 0, False: 0]
  ------------------
 1747|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1747:17): [True: 0, False: 0]
  ------------------
 1748|      0|                return on_error("Argument list not exhausted");
 1749|      0|            }
 1750|      0|            last_args_count -= 8;
 1751|      0|        }
 1752|       |
 1753|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1754|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1754:13): [True: 0, False: 0]
  ------------------
 1755|      0|            return on_error("Argument list not exhausted");
 1756|      0|        }
 1757|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1776|   802k|    {
 1777|   802k|        return error;
 1778|   802k|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1772|  1.43M|    {
 1773|  1.43M|        return static_cast<bool>(error);
 1774|  1.43M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|   267k|{
 2053|   267k|    const auto argcount = args.size();
 2054|   267k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 18, False: 267k]
  |  Branch (2054:60): [True: 18, False: 0]
  ------------------
 2055|     18|        auto arg = args.get(0);
 2056|     18|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|     18|    }
 2058|       |
 2059|   267k|    auto handler = format_handler<true, CharT>{
 2060|   267k|        ranges::subrange<const CharT*>{source.data(),
 2061|   267k|                                       source.data() + source.size()},
 2062|   267k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   267k|    static_cast<    \
  |  |  929|   267k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   267k|    static_cast<    \
  |  |  929|   267k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   267k|    return vscan_parse_format_string(format, handler);
 2064|   267k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|     18|{
 1638|     18|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|     18|    auto reader =
 1644|     18|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|     18|            ranges::subrange<const CharT*>{source.data(),
 1646|     18|                                           source.data() + source.size()},
 1647|     18|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|     18|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     10|    }                                                  \
  |  |  |  | 3671|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|      8|    return ranges::distance(source.data(), it);
 1650|     18|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|   534k|{
 2053|   534k|    const auto argcount = args.size();
 2054|   534k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 18, False: 534k]
  |  Branch (2054:60): [True: 18, False: 0]
  ------------------
 2055|     18|        auto arg = args.get(0);
 2056|     18|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|     18|    }
 2058|       |
 2059|   534k|    auto handler = format_handler<true, CharT>{
 2060|   534k|        ranges::subrange<const CharT*>{source.data(),
 2061|   534k|                                       source.data() + source.size()},
 2062|   534k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   534k|    static_cast<    \
  |  |  929|   534k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   534k|    static_cast<    \
  |  |  929|   534k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   534k|    return vscan_parse_format_string(format, handler);
 2064|   534k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   534k|{
 1625|   534k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 522k, False: 12.7k]
  ------------------
 1626|   522k|        return false;
 1627|   522k|    }
 1628|  12.7k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 126, False: 12.6k]
  |  Branch (1628:39): [True: 18, False: 108]
  ------------------
 1629|   534k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|     18|{
 1638|     18|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|     18|    auto reader =
 1644|     18|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|     18|            ranges::subrange<const CharT*>{source.data(),
 1646|     18|                                           source.data() + source.size()},
 1647|     18|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|     18|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     10|    }                                                  \
  |  |  |  | 3671|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|      8|    return ranges::distance(source.data(), it);
 1650|     18|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1902|   534k|    {
 1903|   534k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1852|   534k|    {
 1853|   534k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   534k|{
 2038|   534k|    const auto beg = handler.get_ctx().begin();
 2039|   534k|    detail::parse_format_string<false>(format, handler);
 2040|   534k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   534k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 533k, False: 1.15k]
  |  |  ------------------
  ------------------
 2041|   533k|        return unexpected(handler.error);
 2042|   533k|    }
 2043|  1.15k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   534k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2021|  2.73M|    {
 2022|  2.73M|        return ctx.get();
 2023|  2.73M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1856|  2.73M|    {
 1857|  2.73M|        return contiguous_ctx;
 1858|  2.73M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1906|   305k|    {
 1907|   755k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 649k, False: 106k]
  ------------------
 1908|   649k|            auto it = get_ctx().begin();
 1909|   649k|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 552, False: 648k]
  ------------------
 1910|    552|                SCN_UNLIKELY_ATTR
 1911|    552|                return on_error("Unexpected end of source");
 1912|    552|            }
 1913|       |
 1914|   648k|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|   648k|                    detail::make_string_view_from_pointers(begin, end));
 1916|   648k|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 197k, False: 451k]
  ------------------
 1917|   197k|                SCN_UNLIKELY_ATTR
 1918|   197k|                return on_error("Invalid encoding in format string");
 1919|   197k|            }
 1920|   451k|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 33.0k, False: 418k]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|  33.0k|                get_ctx().advance_to(
 1923|  33.0k|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|  33.0k|                auto begin_it = impl::read_while_classic_space(
 1926|  33.0k|                    detail::make_string_view_from_pointers(
 1927|  33.0k|                        detail::to_address(after_space_it),
 1928|  33.0k|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|  33.0k|                begin = detail::to_address(begin_it) - 1;
 1931|  33.0k|                continue;
 1932|  33.0k|            }
 1933|       |
 1934|   418k|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 1.15k, False: 417k]
  ------------------
 1935|  1.15k|                SCN_UNLIKELY_ATTR
 1936|  1.15k|                return on_error("Unexpected literal character in source");
 1937|  1.15k|            }
 1938|   417k|            get_ctx().advance_to(ranges::next(it));
 1939|   417k|        }
 1940|   305k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE20on_replacement_fieldEmPKw:
 1971|  6.05k|    {
 1972|  6.05k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1973|  6.05k|        set_arg_as_visited(arg_id);
 1974|       |
 1975|  6.05k|        on_visit_scan_arg(
 1976|  6.05k|            impl::default_arg_reader<context_type>{
 1977|  6.05k|                get_ctx().range(), get_ctx().args(), get_ctx().locale()},
 1978|  6.05k|            arg);
 1979|  6.05k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   104k|{
 1681|   104k|    auto arg = ctx.arg(id);
 1682|   104k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   104k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.68k, False: 102k]
  |  |  ------------------
  ------------------
 1683|  1.68k|        handler.on_error("Failed to find argument with ID");
 1684|  1.68k|    }
 1685|   104k|    return arg;
 1686|   104k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl18default_arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1955|  6.05k|    {
 1956|  6.05k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 166, False: 5.88k]
  |  Branch (1956:23): [True: 0, False: 5.88k]
  ------------------
 1957|    166|            SCN_UNLIKELY_ATTR
 1958|    166|            return;
 1959|    166|        }
 1960|       |
 1961|  5.88k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  5.88k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  5.88k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  5.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.16k, False: 1.72k]
  |  |  ------------------
  ------------------
 1963|  4.16k|            on_error(r.error());
 1964|  4.16k|        }
 1965|  1.72k|        else {
 1966|  1.72k|            get_ctx().advance_to(*r);
 1967|  1.72k|        }
 1968|  5.88k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1943|   103k|    {
 1944|   103k|        return parse_ctx.next_arg_id();
 1945|   103k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEm:
 1947|    362|    {
 1948|    362|        parse_ctx.check_arg_id(id);
 1949|    362|        return id;
 1950|    362|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1984|  98.0k|    {
 1985|  98.0k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|  98.0k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|  98.0k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 98.0k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|  98.0k|        auto specs = detail::format_specs{};
 1998|  98.0k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|  98.0k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|  98.0k|            arg.type()};
 2001|       |
 2002|  98.0k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|  98.0k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 2.75k, False: 95.2k]
  |  Branch (2003:29): [True: 876, False: 94.4k]
  ------------------
 2004|  3.63k|            SCN_UNLIKELY_ATTR
 2005|  3.63k|            on_error("Missing '}' in format string");
 2006|  3.63k|            return parse_ctx.begin();
 2007|  3.63k|        }
 2008|  94.4k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  94.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 492, False: 93.9k]
  |  |  ------------------
  ------------------
 2009|    492|            return parse_ctx.begin();
 2010|    492|        }
 2011|  93.9k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|  93.9k|        on_visit_scan_arg(
 2014|  93.9k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|  93.9k|                                           get_ctx().locale()},
 2016|  93.9k|            arg);
 2017|  93.9k|        return parse_ctx.begin();
 2018|  94.4k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1700|  98.0k|    {
 1701|  98.0k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1955|  93.9k|    {
 1956|  93.9k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 412, False: 93.5k]
  |  Branch (1956:23): [True: 0, False: 93.5k]
  ------------------
 1957|    412|            SCN_UNLIKELY_ATTR
 1958|    412|            return;
 1959|    412|        }
 1960|       |
 1961|  93.5k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  93.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  93.5k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  93.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 90.3k, False: 3.11k]
  |  |  ------------------
  ------------------
 1963|  90.3k|            on_error(r.error());
 1964|  90.3k|        }
 1965|  3.11k|        else {
 1966|  3.11k|            get_ctx().advance_to(*r);
 1967|  3.11k|        }
 1968|  93.5k|    }

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1362|  14.8k|{
 1363|  14.8k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1364|       |
 1365|  14.8k|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1365:19): [Folded - Ignored]
  ------------------
 1366|  14.8k|        if constexpr (sizeof(DestCharT) == 2) {
  ------------------
  |  Branch (1366:23): [Folded - Ignored]
  ------------------
 1367|  14.8k|            std::u32string tmp;
 1368|  14.8k|            transcode_to_string_impl_to32(src, tmp);
 1369|  14.8k|            return transcode_to_string_impl_32to16<false>(
 1370|  14.8k|                std::u32string_view{tmp}, dest);
 1371|  14.8k|        }
 1372|  14.8k|        else if constexpr (sizeof(DestCharT) == 4) {
  ------------------
  |  Branch (1372:28): [Folded - Ignored]
  ------------------
 1373|  14.8k|            return transcode_to_string_impl_to32(src, dest);
 1374|  14.8k|        }
 1375|  14.8k|    }
 1376|      0|    else if constexpr (sizeof(SourceCharT) == 2) {
 1377|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1378|      0|            std::u32string tmp;
 1379|      0|            transcode_to_string_impl_to32(src, tmp);
 1380|      0|            return transcode_to_string_impl_32to8<false>(
 1381|      0|                std::u32string_view{tmp}, dest);
 1382|      0|        }
 1383|      0|        else if constexpr (sizeof(DestCharT) == 4) {
 1384|      0|            return trasncode_to_string_impl_to32(src, dest);
 1385|      0|        }
 1386|      0|    }
 1387|      0|    else if constexpr (sizeof(SourceCharT) == 4) {
 1388|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1389|      0|            return transcode_to_string_impl_32to8<false>(src, dest);
 1390|      0|        }
 1391|      0|        else if constexpr (sizeof(DestCharT) == 2) {
 1392|      0|            return transcode_to_string_impl_32to16<false>(src, dest);
 1393|      0|        }
 1394|      0|    }
 1395|       |
 1396|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1397|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1398|      0|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1255|  14.8k|{
 1256|  14.8k|    static_assert(sizeof(DestCharT) == 4);
 1257|       |
 1258|  14.8k|    auto it = src.begin();
 1259|  4.87M|    while (it != src.end()) {
  ------------------
  |  Branch (1259:12): [True: 4.85M, False: 14.8k]
  ------------------
 1260|  4.85M|        auto res = get_next_code_point(
 1261|  4.85M|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1262|  4.85M|                                                                 src.end()));
 1263|  4.85M|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|  4.85M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 135k, False: 4.72M]
  |  |  ------------------
  ------------------
 1264|   135k|            dest.push_back(DestCharT{0xfffd});
 1265|   135k|        }
 1266|  4.72M|        else {
 1267|  4.72M|            dest.push_back(res.value);
 1268|  4.72M|        }
 1269|  4.85M|        it = detail::make_string_view_iterator(src, res.iterator);
 1270|  4.85M|    }
 1271|  14.8k|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|  5.20M|{
 1169|  5.20M|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|  5.20M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.20M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|  5.20M|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|  5.20M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  5.20M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 97.2k, False: 5.10M]
  |  |  ------------------
  ------------------
 1173|  97.2k|        return {get_start_for_next_code_point(input),
 1174|  97.2k|                detail::invalid_code_point};
 1175|  97.2k|    }
 1176|  5.10M|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|  5.10M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.43k, False: 5.10M]
  |  |  ------------------
  ------------------
 1177|  1.43k|        return {input.end(), detail::invalid_code_point};
 1178|  1.43k|    }
 1179|       |
 1180|  5.10M|    return {input.begin() + len,
 1181|  5.10M|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|  5.10M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  97.2k|{
 1155|  97.2k|    auto it = input.begin();
 1156|   518k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 517k, False: 1.85k]
  ------------------
 1157|   517k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 95.3k, False: 421k]
  ------------------
 1158|  95.3k|            break;
 1159|  95.3k|        }
 1160|   517k|    }
 1161|  97.2k|    return it;
 1162|  97.2k|}
_ZN3scn2v34impl11parse_errorC2ENS2_4codeE:
  808|  61.8k|    {
  809|  61.8k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  61.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  61.8k|    }
_ZN3scn2v34impleqENS1_11parse_errorES2_:
  822|  23.2k|    {
  823|  23.2k|        return a.m_code == b.m_code;
  824|  23.2k|    }
_ZN3scn2v34impl20reader_error_handler8on_errorEPKc:
 2930|   153k|    {
 2931|   153k|        SCN_UNLIKELY_ATTR
 2932|   153k|        m_msg = msg;
 2933|   153k|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2935|   242k|    {
 2936|   242k|        return m_msg == nullptr;
 2937|   242k|    }
_ZN3scn2v34impl17float_reader_baseC2Ej:
 3644|  1.51k|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl22nonascii_specs_handler17on_charset_singleEDi:
 4989|  1.92M|    {
 4990|  1.92M|        on_charset_range(cp, cp + 1);
 4991|  1.92M|    }
_ZN3scn2v34impl22nonascii_specs_handler16on_charset_rangeEDiDi:
 4994|  1.93M|    {
 4995|  1.93M|        if (end <= 127) {
  ------------------
  |  Branch (4995:13): [True: 1.20M, False: 731k]
  ------------------
 4996|  1.20M|            return;
 4997|  1.20M|        }
 4998|       |
 4999|   160M|        for (auto& elem : extra_ranges) {
  ------------------
  |  Branch (4999:25): [True: 160M, False: 723k]
  ------------------
 5000|       |            // TODO: check for overlap
 5001|   160M|            if (elem.first == end) {
  ------------------
  |  Branch (5001:17): [True: 288, False: 160M]
  ------------------
 5002|    288|                elem.first = begin;
 5003|    288|                return;
 5004|    288|            }
 5005|       |
 5006|   160M|            if (elem.second == begin) {
  ------------------
  |  Branch (5006:17): [True: 7.48k, False: 160M]
  ------------------
 5007|  7.48k|                elem.second = end;
 5008|  7.48k|                return;
 5009|  7.48k|            }
 5010|   160M|        }
 5011|       |
 5012|   723k|        extra_ranges.push_back(std::make_pair(begin, end));
 5013|   723k|    }
_ZNK3scn2v34impl22nonascii_specs_handler19on_charset_invertedEv:
 5016|    798|    {
 5017|       |        // no-op
 5018|    798|    }
_ZNK3scn2v34impl22nonascii_specs_handlercvbEv:
 5031|  1.94M|    {
 5032|  1.94M|        return static_cast<bool>(err);
 5033|  1.94M|    }
_ZN3scn2v34impl16bool_reader_baseC2Ej:
 5349|  1.81k|    constexpr bool_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|   106k|{
  458|   106k|    return is_ascii_space_lookup[static_cast<size_t>(
  459|   106k|        static_cast<unsigned char>(ch))];
  460|   106k|}
_ZN3scn2v34impl13is_ascii_charEc:
  468|  1.45M|{
  469|  1.45M|    return static_cast<unsigned char>(ch) <= 127;
  470|  1.45M|}
_ZN3scn2v34impl13is_ascii_charEw:
  473|  2.46k|{
  474|  2.46k|#if WCHAR_MIN < 0
  475|  2.46k|    return ch >= 0 && ch <= 127;
  ------------------
  |  Branch (475:12): [True: 2.44k, False: 24]
  |  Branch (475:23): [True: 2.44k, False: 0]
  ------------------
  476|       |#else
  477|       |    return ch <= 127;
  478|       |#endif
  479|  2.46k|}
_ZN3scn2v34impl13is_ascii_charEDi:
  482|  1.59M|{
  483|  1.59M|    return cp <= 127;
  484|  1.59M|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|  68.4k|{
  539|  68.4k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  68.4k|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|  60.8k|{
  784|  60.8k|    return e != eof_error::good;
  785|  60.8k|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|    134|{
  798|    134|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|    134|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    134|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|    134|    return scan_error{scan_error::end_of_range, "EOF"};
  800|    134|}
_ZN3scn2v34impl20make_eof_parse_errorENS1_9eof_errorE:
  844|    760|{
  845|    760|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|    760|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    760|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|    760|    return parse_error::eof;
  847|    760|}
_ZN3scn2v34impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|  5.83k|{
  854|  5.83k|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 5.83k]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|  5.83k|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 88, False: 5.74k]
  ------------------
  859|     88|        return scan_error{scan_error::end_of_range, "EOF"};
  860|     88|    }
  861|       |
  862|  5.74k|    return scan_error{code, msg};
  863|  5.83k|}
_ZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  5.83k|{
  868|  5.83k|    return [code, msg](parse_error err) {
  869|  5.83k|        return make_scan_error_from_parse_error(err, code, msg);
  870|  5.83k|    };
  871|  5.83k|}
_ZN3scn2v34impl11is_cp_spaceEDi:
 1199|  1.07M|{
 1200|       |    // Pattern_White_Space property
 1201|  1.07M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (1201:13): [True: 561k, False: 510k]
  |  Branch (1201:27): [True: 70.6k, False: 491k]
  ------------------
 1202|  1.07M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (1202:12): [True: 7.48k, False: 994k]
  ------------------
 1203|  1.07M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (1203:12): [True: 17.2k, False: 977k]
  ------------------
 1204|  1.07M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (1204:12): [True: 2.12k, False: 975k]
  ------------------
 1205|  1.07M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (1205:12): [True: 13.5k, False: 961k]
  ------------------
 1206|  1.07M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (1206:12): [True: 2.34k, False: 959k]
  ------------------
 1207|  1.07M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (1207:12): [True: 190, False: 959k]
  ------------------
 1208|  1.07M|}
_ZN3scn2v34impl17fast_streq_nocaseEPKcS3_m:
 2219|  4.25k|{
 2220|  4.25k|    unsigned char running_diff{0};
 2221|  14.8k|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2221:24): [True: 10.6k, False: 4.25k]
  ------------------
 2222|  10.6k|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2223|  10.6k|    }
 2224|  4.25k|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2224:12): [True: 0, False: 4.25k]
  |  Branch (2224:33): [True: 0, False: 4.25k]
  ------------------
 2225|  4.25k|}
_ZN3scn2v34impl32calculate_text_width_for_fmt_v10EDi:
 2302|   428k|{
 2303|   428k|    if (cp >= 0x1100 &&
  ------------------
  |  Branch (2303:9): [True: 39.7k, False: 389k]
  ------------------
 2304|   428k|        (cp <= 0x115f ||  // Hangul Jamo init. consonants
  ------------------
  |  Branch (2304:10): [True: 486, False: 39.2k]
  ------------------
 2305|  39.7k|         cp == 0x2329 ||  // LEFT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (2305:10): [True: 72, False: 39.1k]
  ------------------
 2306|  39.7k|         cp == 0x232a ||  // RIGHT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (2306:10): [True: 108, False: 39.0k]
  ------------------
 2307|       |         // CJK ... Yi except IDEOGRAPHIC HALF FILL SPACE:
 2308|  39.7k|         (cp >= 0x2e80 && cp <= 0xa4cf && cp != 0x303f) ||
  ------------------
  |  Branch (2308:11): [True: 31.3k, False: 7.71k]
  |  Branch (2308:27): [True: 5.06k, False: 26.3k]
  |  Branch (2308:43): [True: 4.92k, False: 144]
  ------------------
 2309|  39.7k|         (cp >= 0xac00 && cp <= 0xd7a3) ||    // Hangul Syllables
  ------------------
  |  Branch (2309:11): [True: 26.3k, False: 7.86k]
  |  Branch (2309:27): [True: 274, False: 26.0k]
  ------------------
 2310|  39.7k|         (cp >= 0xf900 && cp <= 0xfaff) ||    // CJK Compatibility Ideographs
  ------------------
  |  Branch (2310:11): [True: 25.9k, False: 7.94k]
  |  Branch (2310:27): [True: 276, False: 25.6k]
  ------------------
 2311|  39.7k|         (cp >= 0xfe10 && cp <= 0xfe19) ||    // Vertical Forms
  ------------------
  |  Branch (2311:11): [True: 25.6k, False: 7.94k]
  |  Branch (2311:27): [True: 90, False: 25.5k]
  ------------------
 2312|  39.7k|         (cp >= 0xfe30 && cp <= 0xfe6f) ||    // CJK Compatibility Forms
  ------------------
  |  Branch (2312:11): [True: 25.5k, False: 7.94k]
  |  Branch (2312:27): [True: 344, False: 25.2k]
  ------------------
 2313|  39.7k|         (cp >= 0xff00 && cp <= 0xff60) ||    // Fullwidth Forms
  ------------------
  |  Branch (2313:11): [True: 25.2k, False: 7.94k]
  |  Branch (2313:27): [True: 108, False: 25.1k]
  ------------------
 2314|  39.7k|         (cp >= 0xffe0 && cp <= 0xffe6) ||    // Fullwidth Forms
  ------------------
  |  Branch (2314:11): [True: 25.1k, False: 7.94k]
  |  Branch (2314:27): [True: 78, False: 25.0k]
  ------------------
 2315|  39.7k|         (cp >= 0x20000 && cp <= 0x2fffd) ||  // CJK
  ------------------
  |  Branch (2315:11): [True: 24.4k, False: 8.53k]
  |  Branch (2315:28): [True: 84, False: 24.3k]
  ------------------
 2316|  39.7k|         (cp >= 0x30000 && cp <= 0x3fffd) ||
  ------------------
  |  Branch (2316:11): [True: 24.3k, False: 8.53k]
  |  Branch (2316:28): [True: 1.37k, False: 22.9k]
  ------------------
 2317|       |         // Miscellaneous Symbols and Pictographs + Emoticons:
 2318|  39.7k|         (cp >= 0x1f300 && cp <= 0x1f64f) ||
  ------------------
  |  Branch (2318:11): [True: 23.2k, False: 8.30k]
  |  Branch (2318:28): [True: 126, False: 23.1k]
  ------------------
 2319|       |         // Supplemental Symbols and Pictographs:
 2320|  39.7k|         (cp >= 0x1f900 && cp <= 0x1f9ff))) {
  ------------------
  |  Branch (2320:11): [True: 23.1k, False: 8.30k]
  |  Branch (2320:28): [True: 108, False: 22.9k]
  ------------------
 2321|  8.45k|        return 2;
 2322|  8.45k|    }
 2323|   420k|    return 1;
 2324|   428k|}
_ZN3scn2v34impl26calculate_valid_text_widthEDi:
 2327|   286k|{
 2328|   286k|    return calculate_text_width_for_fmt_v10(cp);
 2329|   286k|}
_ZN3scn2v34impl20calculate_text_widthEDi:
 2342|    214|{
 2343|    214|    return calculate_text_width_for_fmt_v10(cp);
 2344|    214|}
_ZN3scn2v34impl11char_to_intEc:
 3122|  20.2k|{
 3123|  20.2k|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3124|  20.2k|}
_ZN3scn2v34impl11char_to_intEw:
 3126|  9.55k|{
 3127|  9.55k|#if WCHAR_MIN < 0
 3128|  9.55k|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3128:9): [True: 9.55k, False: 0]
  |  Branch (3128:20): [True: 9.55k, False: 0]
  ------------------
 3129|       |#else
 3130|       |    if (ch <= 255) {
 3131|       |#endif
 3132|  9.55k|        return char_to_int(static_cast<char>(ch));
 3133|  9.55k|    }
 3134|      0|    return 255;
 3135|  9.55k|}
_ZN3scn2v34impl16make_regex_flagsENS0_6detail11regex_flagsE:
 4270|  63.1k|{
 4271|  63.1k|    std::regex_constants::syntax_option_type result{};
 4272|  63.1k|    if ((flags & detail::regex_flags::multiline) != detail::regex_flags::none) {
  ------------------
  |  Branch (4272:9): [True: 1.69k, False: 61.4k]
  ------------------
 4273|  1.69k|#if SCN_HAS_STD_REGEX_MULTILINE
 4274|  1.69k|        result |= std::regex_constants::multiline;
 4275|       |#else
 4276|       |        return unexpected_scan_error(
 4277|       |            scan_error::invalid_format_string,
 4278|       |            "/m flag for regex isn't supported by regex backend");
 4279|       |#endif
 4280|  1.69k|    }
 4281|  63.1k|    if ((flags & detail::regex_flags::singleline) !=
  ------------------
  |  Branch (4281:9): [True: 0, False: 63.1k]
  ------------------
 4282|  63.1k|        detail::regex_flags::none) {
 4283|      0|        return unexpected_scan_error(
 4284|      0|            scan_error::invalid_format_string,
 4285|      0|            "/s flag for regex isn't supported by regex backend");
 4286|      0|    }
 4287|  63.1k|    if ((flags & detail::regex_flags::nocase) != detail::regex_flags::none) {
  ------------------
  |  Branch (4287:9): [True: 10.7k, False: 52.3k]
  ------------------
 4288|  10.7k|        result |= std::regex_constants::icase;
 4289|  10.7k|    }
 4290|  63.1k|    if ((flags & detail::regex_flags::nocapture) != detail::regex_flags::none) {
  ------------------
  |  Branch (4290:9): [True: 24, False: 63.1k]
  ------------------
 4291|     24|        result |= std::regex_constants::nosubs;
 4292|     24|    }
 4293|  63.1k|    return result;
 4294|  63.1k|}
_ZN3scn2v34impl27get_unescaped_regex_patternENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4637|  5.60k|{
 4638|  5.60k|    std::string result{pattern};
 4639|  47.2k|    for (size_t n = 0; (n = result.find("\\/", n)) != std::string::npos;) {
  ------------------
  |  Branch (4639:24): [True: 41.5k, False: 5.60k]
  ------------------
 4640|  41.5k|        result.replace(n, 2, "/");
 4641|  41.5k|        ++n;
 4642|  41.5k|    }
 4643|  5.60k|    return result;
 4644|  5.60k|}
_ZN3scn2v34impl27get_unescaped_regex_patternENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEE:
 4646|    552|{
 4647|    552|    std::wstring result{pattern};
 4648|  2.90k|    for (size_t n = 0; (n = result.find(L"\\/", n)) != std::wstring::npos;) {
  ------------------
  |  Branch (4648:24): [True: 2.35k, False: 552]
  ------------------
 4649|  2.35k|        result.replace(n, 2, L"/");
 4650|  2.35k|        ++n;
 4651|  2.35k|    }
 4652|    552|    return result;
 4653|    552|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6007|  15.8k|{
 6008|  15.8k|    if (specs.width != 0) {
  ------------------
  |  Branch (6008:9): [True: 3.53k, False: 12.3k]
  ------------------
 6009|  3.53k|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6009:13): [True: 2.09k, False: 1.44k]
  ------------------
 6010|  2.09k|            return {scan_error::invalid_scanned_value,
 6011|  2.09k|                    "Scanned value too narrow, width did not exceed what "
 6012|  2.09k|                    "was specified in the format string"};
 6013|  2.09k|        }
 6014|  3.53k|    }
 6015|  13.7k|    if (specs.precision != 0) {
  ------------------
  |  Branch (6015:9): [True: 3.15k, False: 10.6k]
  ------------------
 6016|  3.15k|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6016:13): [True: 114, False: 3.03k]
  ------------------
 6017|    114|            return {scan_error::invalid_scanned_value,
 6018|    114|                    "Scanned value too wide, width exceeded the specified "
 6019|    114|                    "precision"};
 6020|    114|        }
 6021|  3.15k|    }
 6022|  13.6k|    return {};
 6023|  13.7k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|   103k|    {
  304|   103k|        ranges::advance(x, n);
  305|   103k|        return x;
  306|   103k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|   103k|    {
  268|   103k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   103k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|   269k|    {
  151|   269k|        i += n;
  152|   269k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   155k|    {
  108|   155k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   155k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   155k|    {
   87|   155k|        return s - i;
   88|   155k|    }
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  9.60k|    {
  304|  9.60k|        ranges::advance(x, n);
  305|  9.60k|        return x;
  306|  9.60k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  9.60k|    {
  268|  9.60k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  9.60k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  9.60k|    {
  151|  9.60k|        i += n;
  152|  9.60k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  6.99k|    {
  108|  6.99k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  6.99k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  6.99k|    {
   87|  6.99k|        return s - i;
   88|  6.99k|    }
_ZN3scn2v34impl16char_reader_baseIcE11check_specsERKNS0_6detail12format_specsE:
 5623|  16.5k|    {
 5624|  16.5k|        reader_error_handler eh{};
 5625|  16.5k|        if constexpr (std::is_same_v<ValueCharT, char32_t>) {
  ------------------
  |  Branch (5625:23): [Folded - Ignored]
  ------------------
 5626|  16.5k|            detail::check_code_point_type_specs(specs, eh);
 5627|  16.5k|        }
 5628|  16.5k|        else {
 5629|  16.5k|            detail::check_char_type_specs(specs, eh);
 5630|  16.5k|        }
 5631|  16.5k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  16.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 15.7k, False: 766]
  |  |  ------------------
  ------------------
 5632|  15.7k|            return {scan_error::invalid_format_string, eh.m_msg};
 5633|  15.7k|        }
 5634|    766|        return {};
 5635|  16.5k|    }
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  55.0k|    {
  763|  55.0k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  55.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  55.0k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  10.1k|    {
  754|  10.1k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  743|  16.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  16.4k|              cvref<T> obj = *get<T>(fn);
  745|  16.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  16.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  16.4k|              }
  748|  16.4k|              else {
  749|  16.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  16.4k|              }
  751|  16.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  16.4k|    {
  684|  16.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  16.4k|            return static_cast<T*>(s.m_cp);
  686|  16.4k|        }
  687|  16.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  16.4k|            return static_cast<T*>(s.m_p);
  689|  16.4k|        }
  690|  16.4k|        else {
  691|  16.4k|            return reinterpret_cast<T*>(s.m_fp);
  692|  16.4k|        }
  693|  16.4k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  661|  10.1k|        {
  662|  10.1k|        }
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|  3.47M|    {
  763|  3.47M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  3.47M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  3.47M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  89.6k|    {
  754|  89.6k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  743|  1.67M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.67M|              cvref<T> obj = *get<T>(fn);
  745|  1.67M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.67M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.67M|              }
  748|  1.67M|              else {
  749|  1.67M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.67M|              }
  751|  1.67M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  1.67M|    {
  684|  1.67M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.67M|            return static_cast<T*>(s.m_cp);
  686|  1.67M|        }
  687|  1.67M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.67M|            return static_cast<T*>(s.m_p);
  689|  1.67M|        }
  690|  1.67M|        else {
  691|  1.67M|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.67M|        }
  693|  1.67M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  661|  89.6k|        {
  662|  89.6k|        }
_ZNK3scn2v34impl16char_reader_baseIcE19skip_ws_before_readEv:
 5618|  2.21k|    {
 5619|  2.21k|        return false;
 5620|  2.21k|    }
_ZZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|  5.83k|    return [code, msg](parse_error err) {
  869|  5.83k|        return make_scan_error_from_parse_error(err, code, msg);
  870|  5.83k|    };
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1779|    154|    {
 1780|    154|        auto stdloc = loc.get<std::locale>();
 1781|    154|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|    154|        grouping = numpunct.grouping();
 1783|    154|        thousands_sep =
 1784|    154|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 154]
  ------------------
 1785|    154|        decimal_point = numpunct.decimal_point();
 1786|    154|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1716|    172|{
 1717|    172|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 172, False: 0]
  ------------------
 1718|    172|        return std::use_facet<Facet>(stdloc);
 1719|    172|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|    172|}
_ZN3scn2v34impl20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2348|  70.6k|{
 2349|  70.6k|    size_t count{0};
 2350|  70.6k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|  70.6k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|  70.6k|    });
 2353|  70.6k|    return count;
 2354|  70.6k|}
_ZN3scn2v34impl19for_each_code_pointIcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_12function_refIFvDiESA_EE:
 1445|  70.6k|{
 1446|       |    // TODO: Could be optimized by being eager
 1447|  70.6k|    auto it = input.begin();
 1448|   205k|    while (it != input.end()) {
  ------------------
  |  Branch (1448:12): [True: 134k, False: 70.6k]
  ------------------
 1449|   134k|        auto res = get_next_code_point(
 1450|   134k|            detail::make_string_view_from_iterators<CharT>(it, input.end()));
 1451|   134k|        cb(res.value);
 1452|   134k|        it = detail::make_string_view_iterator(input, res.iterator);
 1453|   134k|    }
 1454|  70.6k|}
_ZNK3scn2v34impl12function_refIFvDiES3_EclEDi:
  762|   142k|    {
  763|   142k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   142k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   142k|    }
_ZN3scn2v34impl12function_refIFvDiES3_EC2IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_LPv0EEEOS9_:
  753|  70.6k|    {
  754|  70.6k|    }
_ZZN3scn2v34impl12function_refIFvDiES3_EC1IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_LPv0EEEOS9_ENKUlNS1_12fnref_detail4base7storageEDiE_clESI_Di:
  743|   134k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   134k|              cvref<T> obj = *get<T>(fn);
  745|   134k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   134k|                  obj(static_cast<decltype(args)>(args)...);
  747|   134k|              }
  748|   134k|              else {
  749|   134k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   134k|              }
  751|   134k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEUlDiE_EEDaNS3_7storageE:
  683|   134k|    {
  684|   134k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   134k|            return static_cast<T*>(s.m_cp);
  686|   134k|        }
  687|   134k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   134k|            return static_cast<T*>(s.m_p);
  689|   134k|        }
  690|   134k|        else {
  691|   134k|            return reinterpret_cast<T*>(s.m_fp);
  692|   134k|        }
  693|   134k|    }
_ZZN3scn2v34impl20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEENKUlDiE_clEDi:
 2350|   134k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|   134k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|   134k|    });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_LPv0EEEPS9_:
  661|  70.6k|        {
  662|  70.6k|        }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1581|  6.13k|    {
 1582|  6.13k|        return m_view;
 1583|  6.13k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1571|  6.46k|    ~contiguous_range_factory() = default;
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E14multibyte_leftEv:
 2420|  3.41k|    {
 2421|  3.41k|        return m_multibyte_left;
 2422|  3.41k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EdeEv:
 2425|   741k|    {
 2426|   741k|        return *m_current;
 2427|   741k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EppEv:
 2434|   603k|    {
 2435|   603k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|   603k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   603k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2436|   603k|        _increment_current();
 2437|   603k|        return *this;
 2438|   603k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E18_increment_currentEv:
 2667|   603k|    {
 2668|   603k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2668:13): [True: 289k, False: 314k]
  ------------------
 2669|   289k|            auto cplen = _get_cp_length_at_current();
 2670|   289k|            m_multibyte_left = cplen - 1;
 2671|   289k|            m_count -= _get_width_at_current_cp_start(cplen);
 2672|   289k|        }
 2673|   314k|        else {
 2674|   314k|            --m_multibyte_left;
 2675|   314k|        }
 2676|       |
 2677|   603k|        ++m_current;
 2678|   603k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E25_get_cp_length_at_currentEv:
 2638|   289k|    {
 2639|   289k|        return static_cast<difference_type>(
 2640|   289k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2641|   289k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E30_get_width_at_current_cp_startEl:
 2644|   289k|    {
 2645|   289k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|   289k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.00k, False: 287k]
  |  |  ------------------
  ------------------
 2646|  2.00k|            return 0;
 2647|  2.00k|        }
 2648|       |
 2649|   287k|        if (cplen == 1) {
  ------------------
  |  Branch (2649:13): [True: 219k, False: 67.5k]
  ------------------
 2650|   219k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|   219k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   219k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2651|   219k|            auto cp = static_cast<char32_t>(*m_current);
 2652|   219k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2653|   219k|        }
 2654|       |
 2655|  67.5k|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2656|  67.5k|                                           cplen);
 2657|  67.5k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  67.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 904, False: 66.6k]
  |  |  ------------------
  ------------------
 2658|    904|            return 0;
 2659|    904|        }
 2660|       |
 2661|  66.6k|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2662|  66.6k|        return static_cast<difference_type>(
 2663|  66.6k|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2664|  67.5k|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1856|  69.8k|{
 1857|  69.8k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  69.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  69.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  69.8k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  69.8k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  69.8k|        if (sz < count) {
  ------------------
  |  Branch (1861:13): [True: 1.01k, False: 68.8k]
  ------------------
 1862|  1.01k|            return unexpected(eof_error::eof);
 1863|  1.01k|        }
 1864|       |
 1865|  68.8k|        return ranges::next(range.begin(), count);
 1866|  69.8k|    }
 1867|  69.8k|    else {
 1868|  69.8k|        auto it = range.begin();
 1869|  69.8k|        if (guaranteed_minimum_size(range) >= count) {
 1870|  69.8k|            return ranges::next(it, count);
 1871|  69.8k|        }
 1872|       |
 1873|  69.8k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1874|  69.8k|            if (it == range.end()) {
 1875|  69.8k|                return unexpected(eof_error::eof);
 1876|  69.8k|            }
 1877|  69.8k|        }
 1878|       |
 1879|  69.8k|        return it;
 1880|  69.8k|    }
 1881|  69.8k|}
_ZN3scn2v34impl27counted_width_iterator_implneIPKcS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2530|   330k|    {
 2531|   330k|        return !(a == b);
 2532|   330k|    }
_ZN3scn2v34impl27counted_width_iterator_impleqIPKcS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2522|   338k|    {
 2523|   338k|        return a.m_current == b.m_current;
 2524|   338k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EdeEv:
 2429|  11.9k|    {
 2430|  11.9k|        return *m_current;
 2431|  11.9k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeE:
  267|  2.46k|    {
  268|  2.46k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  2.46k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent22random_access_iteratorISE_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  160|  2.46k|    {
  161|  2.46k|        constexpr auto zero = iter_difference_t<I>{0};
  162|       |
  163|  2.46k|        if (n > zero) {
  ------------------
  |  Branch (163:13): [True: 0, False: 2.46k]
  ------------------
  164|      0|            while (n-- > zero) {
  ------------------
  |  Branch (164:20): [True: 0, False: 0]
  ------------------
  165|      0|                ++i;
  166|      0|            }
  167|      0|        }
  168|  2.46k|        else {
  169|  2.46k|            while (n++ < zero) {
  ------------------
  |  Branch (169:20): [True: 0, False: 2.46k]
  ------------------
  170|      0|                --i;
  171|      0|            }
  172|  2.46k|        }
  173|  2.46k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EEcE8is_validEv:
 1889|   230k|    {
 1890|   230k|        return !codepoint.empty();
 1891|   230k|    }
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EESB_EEEEDaOT_:
 1682|  3.37k|{
 1683|  3.37k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  3.37k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  3.37k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  3.37k|        return string_view_wrapper{SCN_FWD(range)};
 1687|  3.37k|    }
 1688|  3.37k|    else {
 1689|  3.37k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|  3.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1690|  3.37k|    }
 1691|  3.37k|}
_ZN3scn2v34impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EELPv0EEEOT_:
 1536|  3.37k|    {
 1537|  3.37k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  3.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1538|  3.37k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEvOT_:
 1620|  3.37k|    {
 1621|  3.37k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  3.37k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  3.37k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  3.37k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  3.37k|            m_storage.reset();
 1627|  3.37k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  3.37k|        }
 1629|  3.37k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  3.37k|                                          std::basic_string<CharT>>) {
 1631|  3.37k|            m_storage.emplace(SCN_FWD(range));
 1632|  3.37k|            m_view = string_view_type{*m_storage};
 1633|  3.37k|        }
 1634|  3.37k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|  3.37k|                                          typename detail::basic_scan_buffer<
 1636|  3.37k|                                              value_t>::forward_iterator> &&
 1637|  3.37k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|  3.37k|            auto beg_seg = range.begin().contiguous_segment();
 1639|  3.37k|            auto end_seg = range.end().contiguous_segment();
 1640|  3.37k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|  3.37k|                             detail::to_address(end_seg.end()))) {
 1642|  3.37k|                auto& str = m_storage.emplace();
 1643|  3.37k|                str.reserve(range.end().position() - range.begin().position());
 1644|  3.37k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  3.37k|                m_view = string_view_type{str};
 1646|  3.37k|                return;
 1647|  3.37k|            }
 1648|       |
 1649|  3.37k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  3.37k|                                                            end_seg.data());
 1651|  3.37k|            m_storage.reset();
 1652|  3.37k|        }
 1653|  3.37k|        else {
 1654|  3.37k|            auto& str = m_storage.emplace();
 1655|  3.37k|            if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1655:27): [Folded - Ignored]
  ------------------
 1656|  3.37k|                str.reserve(range.size());
 1657|  3.37k|            }
 1658|  3.37k|            if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1658:27): [Folded - Ignored]
  ------------------
 1659|  3.37k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  3.37k|                          std::back_inserter(str));
 1661|  3.37k|            }
 1662|  3.37k|            else {
 1663|  3.37k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  3.37k|                     ++it) {
 1665|  3.37k|                    str.push_back(*it);
 1666|  3.37k|                }
 1667|  3.37k|            }
 1668|  3.37k|            m_view = string_view_type{str};
 1669|  3.37k|        }
 1670|  3.37k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EC2ES5_S5_l:
 2381|  40.7k|    {
 2382|  40.7k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E4baseEv:
 2412|   629k|    {
 2413|   629k|        return m_current;
 2414|   629k|    }
_ZNK3scn2v34impl14_take_width_fnclINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEDTtlNS1_15take_width_viewEfp_fp0_EERKT_l:
 2831|  19.1k|    {
 2832|  19.1k|        return take_width_view{r, n};
 2833|  19.1k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2ERKS9_l:
 2800|  19.1k|    {
 2801|  19.1k|    }
_ZN3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEC2ERKS9_:
 2713|  19.1k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impl20reader_impl_for_charIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERcNSN_10locale_refE:
 5662|    504|    {
 5663|    504|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5663:13): [True: 470, False: 34]
  ------------------
 5664|    504|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5664:13): [True: 0, False: 34]
  ------------------
 5665|    470|            return read_default(range, value, loc);
 5666|    470|        }
 5667|       |
 5668|     34|        reader_impl_for_int<CharT> reader{};
 5669|     34|        signed char tmp_value{};
 5670|     34|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5671|     34|        value = static_cast<signed char>(value);
 5672|     34|        return ret;
 5673|    504|    }
_ZN3scn2v34impl20reader_impl_for_charIcE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RcNS0_6detail10locale_refE:
 5644|    470|    {
 5645|    470|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    470|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5646|    470|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (5646:23): [Folded - Ignored]
  ------------------
 5647|    470|            return code_unit_reader<char>{}.read(range, value);
 5648|    470|        }
 5649|    470|        else {
 5650|    470|            SCN_UNUSED(range);
 5651|    470|            SCN_EXPECT(false);
 5652|    470|            SCN_UNREACHABLE;
 5653|    470|        }
 5654|    470|    }
_ZN3scn2v34impl16code_unit_readerIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSH_Rc:
 5563|    470|    {
 5564|    470|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3672|    470|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    470|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    470|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    470|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 470]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    470|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    470|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5565|    470|        ch = *range.begin();
 5566|    470|        return it;
 5567|    470|    }
_ZN3scn2v34impl14read_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 1845|  3.43k|{
 1846|  3.43k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.43k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.43k]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|  3.43k|    return ranges::next(range.begin());
 1851|  3.43k|}
_ZN3scn2v34impl9eof_checkINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_9eof_errorET_:
  949|  3.43k|{
  950|  3.43k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  3.43k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.43k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  3.43k|    return eof_error::good;
  954|  3.43k|}
_ZN3scn2v34impl12is_range_eofINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEbT_:
  943|  3.43k|{
  944|  3.43k|    return is_range_eof(r.begin(), r.end());
  945|  3.43k|}
_ZN3scn2v34impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEbT_T0_:
  927|   234k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   234k|    {
  937|   234k|        return begin == end;
  938|   234k|    }
  939|   234k|}
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2769|   615k|        {
 2770|   615k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2770:21): [True: 3.41k, False: 611k]
  |  Branch (2770:39): [True: 1.02k, False: 2.38k]
  ------------------
 2771|   615k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2771:20): [True: 2.28k, False: 611k]
  ------------------
 2772|   615k|        }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE3endEv:
 2815|   457k|    {
 2816|   457k|        return sentinel<true>{m_base.get().end()};
 2817|   457k|    }
_ZNK3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvE3getEv:
 2716|   539k|    {
 2717|   539k|        return view;
 2718|   539k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE8sentinelILb1EEC2ES8_:
 2750|   457k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
  295|  3.46k|    {
  296|  3.46k|        ++x;
  297|  3.46k|        return x;
  298|  3.46k|    }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 2809|  40.7k|    {
 2810|  40.7k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2811|  40.7k|                                      m_count};
 2812|  40.7k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEaEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|     34|    {
 3539|     34|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|     34|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     34|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     34|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 34]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|     34|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     34|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|     34|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|     34|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 34]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|     34|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 34]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|     34|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|     34|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 34, False: 0]
  |  |  ------------------
  ------------------
 3565|     34|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|     34|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     34|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     34|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 34, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     34|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     34|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     34|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     34|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     34|    }                                                  \
  |  |  |  | 3671|     34|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESG_i:
 3325|  1.48k|{
 3326|  1.48k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3672|  1.48k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.48k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.48k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.48k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.48k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|  1.48k|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|  1.48k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|  1.48k|        parse_integer_base_prefix(
 3331|  1.48k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|  1.48k|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 0, False: 1.48k]
  ------------------
 3334|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 0, False: 0]
  |  Branch (3334:13): [True: 0, False: 0]
  ------------------
 3335|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 0, False: 0]
  ------------------
 3336|      0|            digits_begin_it = base_prefix_begin_it;
 3337|      0|        }
 3338|      0|        else {
 3339|      0|            parsed_zero = false;
 3340|      0|        }
 3341|      0|    }
 3342|  1.48k|    else {
 3343|  1.48k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3343:13): [True: 0, False: 1.48k]
  |  Branch (3343:13): [True: 1.48k, False: 0]
  ------------------
 3344|  1.48k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3344:13): [True: 1.48k, False: 0]
  ------------------
 3345|  1.48k|            digits_begin_it = base_prefix_begin_it;
 3346|  1.48k|        }
 3347|  1.48k|    }
 3348|       |
 3349|  1.48k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3349:9): [True: 1.48k, False: 0]
  ------------------
 3350|  1.48k|        sign = sign_type::plus_sign;
 3351|  1.48k|    }
 3352|  1.48k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3353|  1.48k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3354|  1.48k|}
_ZN3scn2v34impl18parse_numeric_signINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESG_:
 3140|  1.97k|{
 3141|  1.97k|    auto r = read_one_of_code_unit(range, "+-");
 3142|  1.97k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 1.97k, False: 0]
  ------------------
 3143|  1.97k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 1.97k, False: 0]
  ------------------
 3144|  1.97k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  1.97k|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|  1.97k|    }
 3148|       |
 3149|      0|    auto& it = *r;
 3150|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 0, False: 0]
  ------------------
 3151|      0|        return std::pair{it, sign_type::minus_sign};
 3152|      0|    }
 3153|      0|    return std::pair{it, sign_type::plus_sign};
 3154|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2271|  1.97k|{
 2272|  1.97k|    auto it = read_code_unit(range);
 2273|  1.97k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.97k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.97k]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|  3.94k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 3.94k, False: 1.97k]
  ------------------
 2278|  3.94k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 0, False: 3.94k]
  ------------------
 2279|      0|            return *it;
 2280|      0|        }
 2281|  3.94k|    }
 2282|       |
 2283|  1.97k|    return unexpected(parse_error::error);
 2284|  1.97k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_i:
 3292|  1.48k|{
 3293|  1.48k|    switch (base) {
 3294|     14|        case 2:
  ------------------
  |  Branch (3294:9): [True: 14, False: 1.46k]
  ------------------
 3295|       |            // allow 0b/0B
 3296|     14|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|     14|                    false};
 3298|       |
 3299|     14|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 14, False: 1.46k]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|     14|            bool zero_parsed = false;
 3302|     14|            auto it = apply_opt(
 3303|     14|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|     14|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|    480|        case 16:
  ------------------
  |  Branch (3307:9): [True: 480, False: 1.00k]
  ------------------
 3308|       |            // allow 0x/0X
 3309|    480|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|    480|                    false};
 3311|       |
 3312|     20|        case 0:
  ------------------
  |  Branch (3312:9): [True: 20, False: 1.46k]
  ------------------
 3313|       |            // detect base
 3314|     20|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|    952|        default:
  ------------------
  |  Branch (3316:9): [True: 952, False: 528]
  ------------------
 3317|       |            // no base prefix allowed
 3318|    952|            return {range.begin(), base, false};
 3319|  1.48k|    }
 3320|  1.48k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENS1_14parse_expectedESB_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEEE4typeEOSN_SP_:
 2290|    508|{
 2291|    508|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 508, False: 0]
  ------------------
 2292|    508|        return range.begin();
 2293|    508|    }
 2294|      0|    return *result;
 2295|    508|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3243|     34|{
 3244|     34|    return read_matching_string_classic_nocase(range, "0b");
 3245|     34|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEE:
 2230|  2.02k|{
 2231|  2.02k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  2.02k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  2.02k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  2.02k|        if (range.size() < str.size()) {
 2236|  2.02k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  2.02k|        }
 2238|  2.02k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  2.02k|            return unexpected(parse_error::error);
 2240|  2.02k|        }
 2241|  2.02k|        return ranges::next(range.begin(), str.size());
 2242|  2.02k|    }
 2243|  2.02k|    else {
 2244|  2.02k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  2.02k|            if (ch < 'A' || ch > 'Z') {
 2246|  2.02k|                return ch;
 2247|  2.02k|            }
 2248|  2.02k|            return static_cast<char_type>(ch +
 2249|  2.02k|                                          static_cast<char_type>('a' - 'A'));
 2250|  2.02k|        };
 2251|       |
 2252|  2.02k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  2.02k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.02k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.02k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 198, False: 1.82k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    198|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    198|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    198|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    198|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    198|    }                                                  \
  |  |  |  | 3671|  2.02k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.82k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  1.82k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  1.82k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  1.82k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  1.82k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.82k, False: 0]
  |  |  ------------------
  ------------------
 2257|  1.82k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  1.82k|                    return ascii_tolower(a) ==
 2259|  1.82k|                           static_cast<detail::char_t<Range>>(b);
 2260|  1.82k|                }))) {
 2261|  1.82k|            return unexpected(parse_error::error);
 2262|  1.82k|        }
 2263|       |
 2264|      0|        return it;
 2265|  1.82k|    }
 2266|  2.02k|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_l:
 1856|  3.64k|{
 1857|  3.64k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  3.64k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.64k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  3.64k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  3.64k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  3.64k|        if (sz < count) {
 1862|  3.64k|            return unexpected(eof_error::eof);
 1863|  3.64k|        }
 1864|       |
 1865|  3.64k|        return ranges::next(range.begin(), count);
 1866|  3.64k|    }
 1867|  3.64k|    else {
 1868|  3.64k|        auto it = range.begin();
 1869|  3.64k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 3.64k]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|  12.8k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 9.42k, False: 3.41k]
  ------------------
 1874|  9.42k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 228, False: 9.20k]
  ------------------
 1875|    228|                return unexpected(eof_error::eof);
 1876|    228|            }
 1877|  9.42k|        }
 1878|       |
 1879|  3.41k|        return it;
 1880|  3.64k|    }
 1881|  3.64k|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEmT_:
 1094|  3.64k|{
 1095|  3.64k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|  3.64k|        return r.size();
 1097|  3.64k|    }
 1098|  3.64k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|  3.64k|                           ranges::const_iterator_t<Range>,
 1100|  3.64k|                           typename detail::basic_scan_buffer<
 1101|  3.64k|                               detail::char_t<Range>>::forward_iterator>) {
 1102|  3.64k|        if constexpr (ranges::common_range<Range>) {
 1103|  3.64k|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|  3.64k|        }
 1105|  3.64k|        else {
 1106|  3.64k|            if (r.begin().stores_parent()) {
 1107|  3.64k|                return static_cast<size_t>(
 1108|  3.64k|                    r.begin().parent()->chars_available() -
 1109|  3.64k|                    r.begin().position());
 1110|  3.64k|            }
 1111|  3.64k|            return r.begin().contiguous_segment().size();
 1112|  3.64k|        }
 1113|  3.64k|    }
 1114|  3.64k|    else {
 1115|  3.64k|        return 0;
 1116|  3.64k|    }
 1117|  3.64k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlcE_clEc:
 2244|  1.82k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.82k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 46, False: 1.78k]
  |  Branch (2245:29): [True: 1.78k, False: 0]
  ------------------
 2246|  1.82k|                return ch;
 2247|  1.82k|            }
 2248|      0|            return static_cast<char_type>(ch +
 2249|      0|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.82k|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_Rb:
 3257|     34|{
 3258|     34|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 0, False: 34]
  ------------------
 3259|      0|        return *r;
 3260|      0|    }
 3261|       |
 3262|     34|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 0, False: 34]
  ------------------
 3263|      0|        zero_parsed = true;
 3264|      0|        return *r;
 3265|      0|    }
 3266|       |
 3267|     34|    return unexpected(parse_error::error);
 3268|     34|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NDTcl4implISL_EEE4typeE:
 2145|     34|{
 2146|     34|    auto it = read_code_unit(range);
 2147|     34|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 34]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|     34|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 0]
  |  |  ------------------
  ------------------
 2152|     34|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|     34|        return unexpected(parse_error::error);
 2154|     34|    }
 2155|       |
 2156|      0|    return *it;
 2157|     34|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 1845|     34|{
 1846|     34|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 34]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|     34|    return ranges::next(range.begin());
 1851|     34|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_9eof_errorET_:
  949|     34|{
  950|     34|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 34]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|     34|    return eof_error::good;
  954|     34|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEbT_:
  943|   230k|{
  944|   230k|    return is_range_eof(r.begin(), r.end());
  945|   230k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3250|    500|{
 3251|    500|    return read_matching_string_classic_nocase(range, "0x");
 3252|    500|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_:
 3273|     20|{
 3274|     20|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 0, False: 20]
  ------------------
 3275|      0|        return {*r, 16, false};
 3276|      0|    }
 3277|     20|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 0, False: 20]
  ------------------
 3278|      0|        return {*r, 2, false};
 3279|      0|    }
 3280|     20|    {
 3281|     20|        bool zero_parsed{false};
 3282|     20|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 0, False: 20]
  ------------------
 3283|      0|            return {*r, 8, zero_parsed};
 3284|      0|        }
 3285|     20|    }
 3286|     20|    return {range.begin(), 10, false};
 3287|     20|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_i:
 3359|  1.46k|{
 3360|  1.46k|    using char_type = detail::char_t<Range>;
 3361|       |
 3362|  1.46k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (3362:19): [Folded - Ignored]
  ------------------
 3363|  1.46k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3364|  1.46k|            return unexpected_scan_error(
 3365|  1.46k|                scan_error::invalid_scanned_value,
 3366|  1.46k|                "Failed to parse integer: No digits found");
 3367|  1.46k|        }
 3368|  1.46k|        return range.end();
 3369|  1.46k|    }
 3370|  1.46k|    else {
 3371|  1.46k|        return read_while1_code_unit(range,
 3372|  1.46k|                                     [&](char_type ch) noexcept {
 3373|  1.46k|                                         return char_to_int(ch) < base;
 3374|  1.46k|                                     })
 3375|  1.46k|            .transform_error(map_parse_error_to_scan_error(
 3376|  1.46k|                scan_error::invalid_scanned_value,
 3377|  1.46k|                "Failed to parse integer: No digits found"));
 3378|  1.46k|    }
 3379|  1.46k|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigISU_E8functionEEE:
 1995|  1.95k|{
 1996|  1.95k|    auto it = read_while_code_unit(range, pred);
 1997|  1.95k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 1.95k, False: 0]
  ------------------
 1998|  1.95k|        return unexpected(parse_error::error);
 1999|  1.95k|    }
 2000|      0|    return it;
 2001|  1.95k|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1975|  1.95k|{
 1976|  1.95k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  1.95k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1956|  1.95k|{
 1957|  1.95k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  1.95k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  1.95k|    }
 1960|  1.95k|    else {
 1961|  1.95k|        auto first = range.begin();
 1962|  1.95k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 1.95k, False: 0]
  ------------------
 1963|  1.95k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 1.95k, False: 0]
  ------------------
 1964|  1.95k|                return first;
 1965|  1.95k|            }
 1966|  1.95k|        }
 1967|      0|        return first;
 1968|  1.95k|    }
 1969|  1.95k|}
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2780|   348k|        {
 2781|   348k|            return !(y == x);
 2782|   348k|        }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_SV_LPv0EEEOSP_:
  753|  1.46k|    {
  754|  1.46k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_SV_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|  1.46k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.46k|              cvref<T> obj = *get<T>(fn);
  745|  1.46k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.46k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.46k|              }
  748|  1.46k|              else {
  749|  1.46k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.46k|              }
  751|  1.46k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSD_EENS1_15take_width_viewINS9_ISD_SD_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_iEUlcE_EEDaNS3_7storageE:
  683|  1.46k|    {
  684|  1.46k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.46k|            return static_cast<T*>(s.m_cp);
  686|  1.46k|        }
  687|  1.46k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.46k|            return static_cast<T*>(s.m_p);
  689|  1.46k|        }
  690|  1.46k|        else {
  691|  1.46k|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.46k|        }
  693|  1.46k|    }
_ZZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_iENKUlcE_clEc:
 3372|  1.46k|                                     [&](char_type ch) noexcept {
 3373|  1.46k|                                         return char_to_int(ch) < base;
 3374|  1.46k|                                     })
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_LPv0EEEPSP_:
  661|  1.46k|        {
  662|  1.46k|        }
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEENSJ_12basic_stringIT0_NSJ_11char_traitsISS_EENSJ_9allocatorISS_EEEENSR_IcNST_IcEENSV_IcEEEEEEEEESM_iRKNS1_35localized_number_formatting_optionsISS_EE:
 3389|     16|{
 3390|     16|    std::basic_string<CharT> output;
 3391|     16|    std::string thsep_indices;
 3392|     16|    auto it = range.begin();
 3393|     16|    bool digit_matched = false;
 3394|     16|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3394:12): [True: 16, False: 0]
  ------------------
 3395|     16|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3395:13): [True: 0, False: 16]
  ------------------
 3396|      0|            thsep_indices.push_back(
 3397|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3398|      0|        }
 3399|     16|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3399:18): [True: 16, False: 0]
  ------------------
 3400|     16|            break;
 3401|     16|        }
 3402|      0|        else {
 3403|      0|            output.push_back(*it);
 3404|      0|            digit_matched = true;
 3405|      0|        }
 3406|     16|    }
 3407|     16|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16, False: 0]
  |  |  ------------------
  ------------------
 3408|     16|        return unexpected_scan_error(
 3409|     16|            scan_error::invalid_scanned_value,
 3410|     16|            "Failed to parse integer: No digits found");
 3411|     16|    }
 3412|      0|    return std::tuple{it, output, thsep_indices};
 3413|     16|}
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E5countEv:
 2416|   618k|    {
 2417|   618k|        return m_count;
 2418|   618k|    }
_ZN3scn2v34impl20reader_impl_for_charIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERcNSL_10locale_refE:
 5662|    256|    {
 5663|    256|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5663:13): [True: 234, False: 22]
  ------------------
 5664|    256|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5664:13): [True: 0, False: 22]
  ------------------
 5665|    234|            return read_default(range, value, loc);
 5666|    234|        }
 5667|       |
 5668|     22|        reader_impl_for_int<CharT> reader{};
 5669|     22|        signed char tmp_value{};
 5670|     22|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5671|     22|        value = static_cast<signed char>(value);
 5672|     22|        return ret;
 5673|    256|    }
_ZN3scn2v34impl20reader_impl_for_charIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RcNS0_6detail10locale_refE:
 5644|    976|    {
 5645|    976|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    976|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5646|    976|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (5646:23): [Folded - Ignored]
  ------------------
 5647|    976|            return code_unit_reader<char>{}.read(range, value);
 5648|    976|        }
 5649|    976|        else {
 5650|    976|            SCN_UNUSED(range);
 5651|    976|            SCN_EXPECT(false);
 5652|    976|            SCN_UNREACHABLE;
 5653|    976|        }
 5654|    976|    }
_ZN3scn2v34impl16code_unit_readerIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_Rc:
 5563|    976|    {
 5564|    976|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3672|    976|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    976|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    976|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    976|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 976]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    976|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    976|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5565|    976|        ch = *range.begin();
 5566|    976|        return it;
 5567|    976|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|  7.29k|{
 1846|  7.29k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  7.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.29k]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|  7.29k|    return ranges::next(range.begin());
 1851|  7.29k|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|  24.8k|{
  950|  24.8k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  24.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 24.8k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  24.8k|    return eof_error::good;
  954|  24.8k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|  1.42M|{
  944|  1.42M|    return is_range_eof(r.begin(), r.end());
  945|  1.42M|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|  1.51M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  1.51M|    {
  937|  1.51M|        return begin == end;
  938|  1.51M|    }
  939|  1.51M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  78.7k|    {
  296|  78.7k|        ++x;
  297|  78.7k|        return x;
  298|  78.7k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|     22|    {
 3539|     22|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|     22|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|     22|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 22]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|     22|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 22]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|     22|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|     22|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 22, False: 0]
  |  |  ------------------
  ------------------
 3565|     22|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|     22|                    parse_integer_digits_without_thsep(
 3567|     22|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|     22|                        prefix_result.parsed_base));
 3569|       |
 3570|     22|            auto buf = make_contiguous_buffer(
 3571|     22|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|     22|            SCN_TRY(result_it,
  ------------------
  |  | 3672|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 22, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     22|    }                                                  \
  |  |  |  | 3671|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|     22|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3325|  3.08k|{
 3326|  3.08k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3672|  3.08k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  3.08k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  3.08k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 3.08k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  3.08k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.08k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|  3.08k|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|  3.08k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|  3.08k|        parse_integer_base_prefix(
 3331|  3.08k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|  3.08k|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 0, False: 3.08k]
  ------------------
 3334|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 0, False: 0]
  ------------------
 3335|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 0, False: 0]
  ------------------
 3336|      0|            digits_begin_it = base_prefix_begin_it;
 3337|      0|        }
 3338|      0|        else {
 3339|      0|            parsed_zero = false;
 3340|      0|        }
 3341|      0|    }
 3342|  3.08k|    else {
 3343|  3.08k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3343:13): [True: 0, False: 3.08k]
  ------------------
 3344|  3.08k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3344:13): [True: 3.08k, False: 0]
  ------------------
 3345|  3.08k|            digits_begin_it = base_prefix_begin_it;
 3346|  3.08k|        }
 3347|  3.08k|    }
 3348|       |
 3349|  3.08k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3349:9): [True: 3.08k, False: 0]
  ------------------
 3350|  3.08k|        sign = sign_type::plus_sign;
 3351|  3.08k|    }
 3352|  3.08k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3353|  3.08k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3354|  3.08k|}
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|  4.13k|{
 3141|  4.13k|    auto r = read_one_of_code_unit(range, "+-");
 3142|  4.13k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 4.13k, False: 0]
  ------------------
 3143|  4.13k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 4.13k, False: 0]
  ------------------
 3144|  4.13k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  4.13k|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|  4.13k|    }
 3148|       |
 3149|      0|    auto& it = *r;
 3150|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 0, False: 0]
  ------------------
 3151|      0|        return std::pair{it, sign_type::minus_sign};
 3152|      0|    }
 3153|      0|    return std::pair{it, sign_type::plus_sign};
 3154|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|  4.13k|{
 2272|  4.13k|    auto it = read_code_unit(range);
 2273|  4.13k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  4.13k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.13k]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|  8.27k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 8.27k, False: 4.13k]
  ------------------
 2278|  8.27k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 0, False: 8.27k]
  ------------------
 2279|      0|            return *it;
 2280|      0|        }
 2281|  8.27k|    }
 2282|       |
 2283|  4.13k|    return unexpected(parse_error::error);
 2284|  4.13k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3292|  3.08k|{
 3293|  3.08k|    switch (base) {
 3294|      6|        case 2:
  ------------------
  |  Branch (3294:9): [True: 6, False: 3.07k]
  ------------------
 3295|       |            // allow 0b/0B
 3296|      6|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|      6|                    false};
 3298|       |
 3299|     90|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 90, False: 2.99k]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|     90|            bool zero_parsed = false;
 3302|     90|            auto it = apply_opt(
 3303|     90|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|     90|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|    992|        case 16:
  ------------------
  |  Branch (3307:9): [True: 992, False: 2.09k]
  ------------------
 3308|       |            // allow 0x/0X
 3309|    992|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|    992|                    false};
 3311|       |
 3312|     12|        case 0:
  ------------------
  |  Branch (3312:9): [True: 12, False: 3.07k]
  ------------------
 3313|       |            // detect base
 3314|     12|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|  1.98k|        default:
  ------------------
  |  Branch (3316:9): [True: 1.98k, False: 1.10k]
  ------------------
 3317|       |            // no base prefix allowed
 3318|  1.98k|            return {range.begin(), base, false};
 3319|  3.08k|    }
 3320|  3.08k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2290|  1.08k|{
 2291|  1.08k|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 1.08k, False: 0]
  ------------------
 2292|  1.08k|        return range.begin();
 2293|  1.08k|    }
 2294|      0|    return *result;
 2295|  1.08k|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3243|     18|{
 3244|     18|    return read_matching_string_classic_nocase(range, "0b");
 3245|     18|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  4.26k|{
 2231|  4.26k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  4.26k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  4.26k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  4.26k|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2235:13): [True: 8, False: 4.25k]
  ------------------
 2236|      8|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|      8|        }
 2238|  4.25k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2238:13): [True: 4.25k, False: 0]
  ------------------
 2239|  4.25k|            return unexpected(parse_error::error);
 2240|  4.25k|        }
 2241|      0|        return ranges::next(range.begin(), str.size());
 2242|  4.25k|    }
 2243|  4.26k|    else {
 2244|  4.26k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  4.26k|            if (ch < 'A' || ch > 'Z') {
 2246|  4.26k|                return ch;
 2247|  4.26k|            }
 2248|  4.26k|            return static_cast<char_type>(ch +
 2249|  4.26k|                                          static_cast<char_type>('a' - 'A'));
 2250|  4.26k|        };
 2251|       |
 2252|  4.26k|        SCN_TRY(it, read_exactly_n_code_units(
 2253|  4.26k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  4.26k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  4.26k|        if (SCN_UNLIKELY(!std::equal(
 2257|  4.26k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  4.26k|                    return ascii_tolower(a) ==
 2259|  4.26k|                           static_cast<detail::char_t<Range>>(b);
 2260|  4.26k|                }))) {
 2261|  4.26k|            return unexpected(parse_error::error);
 2262|  4.26k|        }
 2263|       |
 2264|  4.26k|        return it;
 2265|  4.26k|    }
 2266|  4.26k|}
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3257|    102|{
 3258|    102|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 0, False: 102]
  ------------------
 3259|      0|        return *r;
 3260|      0|    }
 3261|       |
 3262|    102|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 0, False: 102]
  ------------------
 3263|      0|        zero_parsed = true;
 3264|      0|        return *r;
 3265|      0|    }
 3266|       |
 3267|    102|    return unexpected(parse_error::error);
 3268|    102|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|  2.18k|{
 2146|  2.18k|    auto it = read_code_unit(range);
 2147|  2.18k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.18k]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|  2.18k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  2.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.18k, False: 0]
  |  |  ------------------
  ------------------
 2152|  2.18k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  2.18k|        return unexpected(parse_error::error);
 2154|  2.18k|    }
 2155|       |
 2156|      0|    return *it;
 2157|  2.18k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3250|  1.00k|{
 3251|  1.00k|    return read_matching_string_classic_nocase(range, "0x");
 3252|  1.00k|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3273|     12|{
 3274|     12|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 0, False: 12]
  ------------------
 3275|      0|        return {*r, 16, false};
 3276|      0|    }
 3277|     12|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 0, False: 12]
  ------------------
 3278|      0|        return {*r, 2, false};
 3279|      0|    }
 3280|     12|    {
 3281|     12|        bool zero_parsed{false};
 3282|     12|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 0, False: 12]
  ------------------
 3283|      0|            return {*r, 8, zero_parsed};
 3284|      0|        }
 3285|     12|    }
 3286|     12|    return {range.begin(), 10, false};
 3287|     12|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3359|  2.99k|{
 3360|  2.99k|    using char_type = detail::char_t<Range>;
 3361|       |
 3362|  2.99k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (3362:19): [Folded - Ignored]
  ------------------
 3363|  2.99k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.99k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.99k]
  |  |  ------------------
  ------------------
 3364|      0|            return unexpected_scan_error(
 3365|      0|                scan_error::invalid_scanned_value,
 3366|      0|                "Failed to parse integer: No digits found");
 3367|      0|        }
 3368|  2.99k|        return range.end();
 3369|  2.99k|    }
 3370|  2.99k|    else {
 3371|  2.99k|        return read_while1_code_unit(range,
 3372|  2.99k|                                     [&](char_type ch) noexcept {
 3373|  2.99k|                                         return char_to_int(ch) < base;
 3374|  2.99k|                                     })
 3375|  2.99k|            .transform_error(map_parse_error_to_scan_error(
 3376|  2.99k|                scan_error::invalid_scanned_value,
 3377|  2.99k|                "Failed to parse integer: No digits found"));
 3378|  2.99k|    }
 3379|  2.99k|}
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3389|     84|{
 3390|     84|    std::basic_string<CharT> output;
 3391|     84|    std::string thsep_indices;
 3392|     84|    auto it = range.begin();
 3393|     84|    bool digit_matched = false;
 3394|     84|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3394:12): [True: 84, False: 0]
  ------------------
 3395|     84|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3395:13): [True: 0, False: 84]
  ------------------
 3396|      0|            thsep_indices.push_back(
 3397|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3398|      0|        }
 3399|     84|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3399:18): [True: 84, False: 0]
  ------------------
 3400|     84|            break;
 3401|     84|        }
 3402|      0|        else {
 3403|      0|            output.push_back(*it);
 3404|      0|            digit_matched = true;
 3405|      0|        }
 3406|     84|    }
 3407|     84|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     84|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 84, False: 0]
  |  |  ------------------
  ------------------
 3408|     84|        return unexpected_scan_error(
 3409|     84|            scan_error::invalid_scanned_value,
 3410|     84|            "Failed to parse integer: No digits found");
 3411|     84|    }
 3412|      0|    return std::tuple{it, output, thsep_indices};
 3413|     84|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|  20.5k|{
 1683|  20.5k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  20.5k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  20.5k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  20.5k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  20.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  20.5k|    }
 1688|  20.5k|    else {
 1689|  20.5k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  20.5k|    }
 1691|  20.5k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|  20.5k|    {
 1490|  20.5k|    }
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1502|  88.1k|    {
 1503|  88.1k|        return sv;
 1504|  88.1k|    }
_ZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEb:
 5950|  6.82k|{
 5951|  6.82k|    using char_type = detail::char_t<Range>;
 5952|  6.82k|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5953|       |
 5954|  6.82k|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5954:9): [True: 6.58k, False: 240]
  ------------------
 5955|  6.58k|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5956|  6.58k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5957|       |
 5958|  6.58k|        if (max_width == 0) {
  ------------------
  |  Branch (5958:13): [True: 6.44k, False: 146]
  ------------------
 5959|  6.44k|            auto it = read_while_code_unit(range, pred);
 5960|       |
 5961|  6.44k|            if (want_skipped_width) {
  ------------------
  |  Branch (5961:17): [True: 172, False: 6.26k]
  ------------------
 5962|    172|                auto prefix_width =
 5963|    172|                    static_cast<std::ptrdiff_t>(
 5964|    172|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5965|    172|                    ranges::distance(range.begin(), it);
 5966|    172|                return result_type{it, prefix_width};
 5967|    172|            }
 5968|  6.26k|            return result_type{it, 0};
 5969|  6.44k|        }
 5970|       |
 5971|    146|        auto max_width_view = take_width(range, max_width);
 5972|    146|        auto w_it = read_while_code_unit(max_width_view, pred);
 5973|       |
 5974|    146|        if (want_skipped_width) {
  ------------------
  |  Branch (5974:13): [True: 146, False: 0]
  ------------------
 5975|    146|            return result_type{w_it.base(), max_width - w_it.count()};
 5976|    146|        }
 5977|      0|        return result_type{w_it.base(), 0};
 5978|    146|    }
 5979|       |
 5980|    240|    const auto fill_chars = fill.template get_code_units<char_type>();
 5981|    240|    if (max_width == 0) {
  ------------------
  |  Branch (5981:9): [True: 132, False: 108]
  ------------------
 5982|    132|        auto it = read_while_code_units(range, fill_chars);
 5983|       |
 5984|    132|        if (want_skipped_width) {
  ------------------
  |  Branch (5984:13): [True: 52, False: 80]
  ------------------
 5985|     52|            auto prefix_width =
 5986|     52|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5987|     52|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5988|     52|            return result_type{it, prefix_width};
 5989|     52|        }
 5990|     80|        return result_type{it, 0};
 5991|    132|    }
 5992|       |
 5993|    108|    auto max_width_view = take_width(range, max_width);
 5994|    108|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5995|       |
 5996|    108|    if (want_skipped_width) {
  ------------------
  |  Branch (5996:9): [True: 108, False: 0]
  ------------------
 5997|    108|        return result_type{w_it.base(), max_width - w_it.count()};
 5998|    108|    }
 5999|      0|    return result_type{w_it.base(), 0};
 6000|    108|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|  6.65k|{
 1976|  6.65k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  6.65k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|  6.90k|{
 1957|  6.90k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  6.90k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  6.90k|    }
 1960|  6.90k|    else {
 1961|  6.90k|        auto first = range.begin();
 1962|  6.90k|        for (; first != range.end(); ++first) {
 1963|  6.90k|            if (pred(*first)) {
 1964|  6.90k|                return first;
 1965|  6.90k|            }
 1966|  6.90k|        }
 1967|  6.90k|        return first;
 1968|  6.90k|    }
 1969|  6.90k|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_SR_LPv0EEEOSH_:
  753|  6.58k|    {
  754|  6.58k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_SR_LPv0EEEOSH_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  7.01k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.01k|              cvref<T> obj = *get<T>(fn);
  745|  7.01k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  7.01k|                  obj(static_cast<decltype(args)>(args)...);
  747|  7.01k|              }
  748|  7.01k|              else {
  749|  7.01k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.01k|              }
  751|  7.01k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRT_EEEElEEEESG_lRKNS0_6detail9fill_typeEbEUlcE_EEDaNS3_7storageE:
  683|  7.01k|    {
  684|  7.01k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  7.01k|            return static_cast<T*>(s.m_cp);
  686|  7.01k|        }
  687|  7.01k|        else if constexpr (std::is_object_v<T>) {
  688|  7.01k|            return static_cast<T*>(s.m_p);
  689|  7.01k|        }
  690|  7.01k|        else {
  691|  7.01k|            return reinterpret_cast<T*>(s.m_fp);
  692|  7.01k|        }
  693|  7.01k|    }
_ZZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEbENKUlcE_clEc:
 5956|  7.01k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_LPv0EEEPKSH_:
  666|  6.58k|        {
  667|  6.58k|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1975|    500|{
 1976|    500|    return read_until_code_unit(range, std::not_fn(pred));
 1977|    500|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1956|  1.07k|{
 1957|  1.07k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  1.07k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  1.07k|    }
 1960|  1.07k|    else {
 1961|  1.07k|        auto first = range.begin();
 1962|  23.7k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 23.1k, False: 574]
  ------------------
 1963|  23.1k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 496, False: 22.6k]
  ------------------
 1964|    496|                return first;
 1965|    496|            }
 1966|  23.1k|        }
 1967|    574|        return first;
 1968|  1.07k|    }
 1969|  1.07k|}
_ZN3scn2v34impl21read_while_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEESG_RKT0_:
 2036|    132|{
 2037|    132|    static_assert(ranges::common_range<CodeUnits>);
 2038|       |
 2039|    132|    auto it = range.begin();
 2040|    168|    while (it != range.end()) {
  ------------------
  |  Branch (2040:12): [True: 168, False: 0]
  ------------------
 2041|    168|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2042|    168|                                           needle.size());
 2043|    168|        if (!r) {
  ------------------
  |  Branch (2043:13): [True: 6, False: 162]
  ------------------
 2044|      6|            return it;
 2045|      6|        }
 2046|    162|        static_assert(
 2047|    162|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2048|    162|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2048:13): [True: 126, False: 36]
  ------------------
 2049|    126|            return it;
 2050|    126|        }
 2051|     36|        it = *r;
 2052|     36|    }
 2053|      0|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2054|      0|    return it;
 2055|      0|}
_ZN3scn2v34impl21read_while_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEESI_RKT0_:
 2036|    108|{
 2037|    108|    static_assert(ranges::common_range<CodeUnits>);
 2038|       |
 2039|    108|    auto it = range.begin();
 2040|    156|    while (it != range.end()) {
  ------------------
  |  Branch (2040:12): [True: 126, False: 30]
  ------------------
 2041|    126|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2042|    126|                                           needle.size());
 2043|    126|        if (!r) {
  ------------------
  |  Branch (2043:13): [True: 30, False: 96]
  ------------------
 2044|     30|            return it;
 2045|     30|        }
 2046|     96|        static_assert(
 2047|     96|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2048|     96|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2048:13): [True: 48, False: 48]
  ------------------
 2049|     48|            return it;
 2050|     48|        }
 2051|     48|        it = *r;
 2052|     48|    }
 2053|     30|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  925|     30|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|     30|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2054|     30|    return it;
 2055|     30|}
_ZN3scn2v34impl23skip_classic_whitespaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_b:
 2950|  1.06k|{
 2951|  1.06k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 0, False: 1.06k]
  ------------------
 2952|      0|        auto it = read_while_classic_space(range);
 2953|      0|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|      0|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|      0|        return it;
 2959|      0|    }
 2960|       |
 2961|  1.06k|    return read_while_classic_space(range);
 2962|  1.06k|}
_ZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2116|  1.06k|{
 2117|  1.06k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  1.06k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  1.06k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  1.06k|        auto buf = make_contiguous_buffer(range);
 2121|  1.06k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  1.06k|        return ranges::next(range.begin(),
 2123|  1.06k|                            ranges::distance(buf.view().begin(), it));
 2124|  1.06k|    }
 2125|  1.06k|    else {
 2126|  1.06k|        auto it = range.begin();
 2127|       |
 2128|  1.06k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  1.06k|            auto seg = get_contiguous_beginning(range);
 2130|  1.06k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  1.06k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2131:17): [True: 0, False: 1.06k]
  ------------------
 2132|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|      0|            }
 2134|  1.06k|            ranges::advance(it, seg.size());
 2135|  1.06k|        }
 2136|       |
 2137|  1.06k|        return read_while_code_point(
 2138|  1.06k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  1.06k|    }
 2140|  1.06k|}
_ZN3scn2v34impl24get_contiguous_beginningINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDaT_:
 1038|  2.46k|{
 1039|  2.46k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1039:19): [Folded - Ignored]
  |  Branch (1039:19): [Folded - Ignored]
  ------------------
 1040|  2.46k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1040:19): [Folded - Ignored]
  ------------------
 1041|  2.46k|        return r;
 1042|  2.46k|    }
 1043|  2.46k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1043:24): [Folded - Ignored]
  ------------------
 1044|  2.46k|                           ranges::const_iterator_t<Range>,
 1045|  2.46k|                           typename detail::basic_scan_buffer<
 1046|  2.46k|                               detail::char_t<Range>>::forward_iterator>) {
 1047|  2.46k|        if constexpr (ranges::common_range<Range>) {
 1048|  2.46k|            auto seg = r.begin().contiguous_segment();
 1049|  2.46k|            auto dist =
 1050|  2.46k|                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|  2.46k|            return seg.substr(0, std::min(seg.size(), dist));
 1052|  2.46k|        }
 1053|  2.46k|        else {
 1054|  2.46k|            return r.begin().contiguous_segment();
 1055|  2.46k|        }
 1056|  2.46k|    }
 1057|  2.46k|    else {
 1058|  2.46k|        return std::basic_string_view<detail::char_t<Range>>{};
 1059|  2.46k|    }
 1060|  2.46k|}
_ZN3scn2v34impl21read_while_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2081|  2.10k|{
 2082|  2.10k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  2.10k|}
_ZN3scn2v34impl21read_until_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2060|  2.31k|{
 2061|  2.31k|    auto it = range.begin();
 2062|   197k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 197k, False: 698]
  ------------------
 2063|   197k|        const auto val =
 2064|   197k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   197k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   197k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 188k, False: 8.43k]
  |  |  ------------------
  ------------------
 2066|   188k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   188k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   188k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 1.61k, False: 187k]
  ------------------
 2069|  1.61k|                return it;
 2070|  1.61k|            }
 2071|   188k|        }
 2072|   195k|        it = val.iterator;
 2073|   195k|    }
 2074|       |
 2075|    698|    return it;
 2076|  2.31k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISL_EEE4typeEEESL_:
 1898|   230k|{
 1899|   230k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   230k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   230k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   230k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   230k|    auto it = range.begin();
 1903|   230k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   230k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   230k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.5k, False: 214k]
  |  |  ------------------
  ------------------
 1906|  16.5k|        ++it;
 1907|  16.5k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|  16.5k|        return {it, {}};
 1909|  16.5k|    }
 1910|       |
 1911|   214k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 195k, False: 19.0k]
  ------------------
 1912|   195k|        ++it;
 1913|   195k|        return {it, string_type(1, *range.begin())};
 1914|   195k|    }
 1915|       |
 1916|  19.0k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|  19.0k|    return {it, string_type{range.begin(), it}};
 1918|   214k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_:
 1154|  16.5k|{
 1155|  16.5k|    auto it = input.begin();
 1156|  31.0k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 30.7k, False: 276]
  ------------------
 1157|  30.7k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 16.3k, False: 14.4k]
  ------------------
 1158|  16.3k|            break;
 1159|  16.3k|        }
 1160|  30.7k|    }
 1161|  16.5k|    return it;
 1162|  16.5k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EENS1_20incrementable_traitsISL_E15difference_typeEE4typeERSL_SP_SM_:
  282|  19.0k|    {
  283|  19.0k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  19.0k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SL_EENS1_20incrementable_traitsISL_E15difference_typeEE4typeERSL_SP_SM_:
  226|  19.0k|    {
  227|  19.0k|        constexpr iter_difference_t<I> zero{0};
  228|  19.0k|        iter_difference_t<I> counter{0};
  229|       |
  230|  19.0k|        if (n < zero) {
  ------------------
  |  Branch (230:13): [True: 0, False: 19.0k]
  ------------------
  231|      0|            do {
  232|      0|                --i;
  233|      0|                --counter;  // Yes, really
  234|      0|            } while (++n < zero && i != bound);
  ------------------
  |  Branch (234:22): [True: 0, False: 0]
  |  Branch (234:36): [True: 0, False: 0]
  ------------------
  235|      0|        }
  236|  19.0k|        else {
  237|  60.8k|            while (n-- > zero && i != bound) {
  ------------------
  |  Branch (237:20): [True: 42.0k, False: 18.8k]
  |  Branch (237:34): [True: 41.7k, False: 252]
  ------------------
  238|  41.7k|                ++i;
  239|  41.7k|                ++counter;
  240|  41.7k|            }
  241|  19.0k|        }
  242|       |
  243|  19.0k|        return counter;
  244|  19.0k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_:
  753|  1.06k|    {
  754|  1.06k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESS_Di:
  743|  5.84k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.84k|              cvref<T> obj = *get<T>(fn);
  745|  5.84k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  5.84k|                  obj(static_cast<decltype(args)>(args)...);
  747|  5.84k|              }
  748|  5.84k|              else {
  749|  5.84k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.84k|              }
  751|  5.84k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  5.84k|    {
  684|  5.84k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  5.84k|            return static_cast<T*>(s.m_cp);
  686|  5.84k|        }
  687|  5.84k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  5.84k|            return static_cast<T*>(s.m_p);
  689|  5.84k|        }
  690|  5.84k|        else {
  691|  5.84k|            return reinterpret_cast<T*>(s.m_fp);
  692|  5.84k|        }
  693|  5.84k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2138|  5.84k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_LPv0EEEPSI_:
  661|  1.06k|        {
  662|  1.06k|        }
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|  8.21k|{
 2951|  8.21k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 7.86k, False: 350]
  ------------------
 2952|  7.86k|        auto it = read_while_classic_space(range);
 2953|  7.86k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  7.86k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  7.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.86k]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|  7.86k|        return it;
 2959|  7.86k|    }
 2960|       |
 2961|    350|    return read_while_classic_space(range);
 2962|  8.21k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|  17.8k|{
 2117|  17.8k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  17.8k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  17.8k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  17.8k|        auto buf = make_contiguous_buffer(range);
 2121|  17.8k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  17.8k|        return ranges::next(range.begin(),
 2123|  17.8k|                            ranges::distance(buf.view().begin(), it));
 2124|  17.8k|    }
 2125|  17.8k|    else {
 2126|  17.8k|        auto it = range.begin();
 2127|       |
 2128|  17.8k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|  17.8k|            auto seg = get_contiguous_beginning(range);
 2130|  17.8k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  17.8k|                seg_it != seg.end()) {
 2132|  17.8k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  17.8k|            }
 2134|  17.8k|            ranges::advance(it, seg.size());
 2135|  17.8k|        }
 2136|       |
 2137|  17.8k|        return read_while_code_point(
 2138|  17.8k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  17.8k|    }
 2140|  17.8k|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|  20.9k|{
 1683|  20.9k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  20.9k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  20.9k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  20.9k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  20.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  20.9k|    }
 1688|  20.9k|    else {
 1689|  20.9k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  20.9k|    }
 1691|  20.9k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|  20.9k|    {
 1490|  20.9k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  33.2k|    {
 3040|  33.2k|        reader_error_handler eh{};
 3041|  33.2k|        get_derived().check_specs_impl(specs, eh);
 3042|  33.2k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  33.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 31.5k, False: 1.63k]
  |  |  ------------------
  ------------------
 3043|  31.5k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  31.5k|        }
 3045|  1.63k|        return {};
 3046|  33.2k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE11get_derivedEv:
 3050|  33.2k|    {
 3051|  33.2k|        return static_cast<Derived&>(*this);
 3052|  33.2k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3484|  33.2k|    {
 3485|  33.2k|        detail::check_int_type_specs(specs, eh);
 3486|  33.2k|    }
_ZNK3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE19skip_ws_before_readEv:
 3034|  3.11k|    {
 3035|  3.11k|        return true;
 3036|  3.11k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEiEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    492|    {
 3539|    492|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    492|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    492|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    492|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    492|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 492]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    492|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    492|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    492|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    492|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 492]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    492|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 492]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    492|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    492|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 484, False: 8]
  |  |  ------------------
  ------------------
 3565|    484|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    484|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    484|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    484|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    484|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 484, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    484|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    484|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    484|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    484|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    484|    }                                                  \
  |  |  |  | 3671|    484|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      8|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      8|            localized_number_formatting_options<CharT>{loc};
 3586|      8|#endif
 3587|       |
 3588|      8|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      8|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      8|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      8|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      8|    }                                                  \
  |  |  |  | 3671|      8|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    298|    {
 3539|    298|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    298|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    298|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    298|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    298|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 298]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    298|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    298|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    298|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    298|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 298]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    298|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 298]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    298|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    298|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 256, False: 42]
  |  |  ------------------
  ------------------
 3565|    256|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    256|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    256|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    256|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    256|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 256]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    256|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    256|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    256|                    parse_integer_digits_without_thsep(
 3567|    256|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    256|                        prefix_result.parsed_base));
 3569|       |
 3570|    256|            auto buf = make_contiguous_buffer(
 3571|    256|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    256|            SCN_TRY(result_it,
  ------------------
  |  | 3672|    256|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    256|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    256|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    256|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 256, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    256|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    256|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    256|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    256|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    256|    }                                                  \
  |  |  |  | 3671|    256|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    256|        }
 3580|       |
 3581|     42|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     42|            localized_number_formatting_options<CharT>{loc};
 3586|     42|#endif
 3587|       |
 3588|     42|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     42|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     42|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     42|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     42|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 42, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     42|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     42|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     42|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     42|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     42|    }                                                  \
  |  |  |  | 3671|     42|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEjEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    492|    {
 3539|    492|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    492|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    492|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    492|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    492|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 492]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    492|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    492|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    492|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    492|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 492]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    492|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 492]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    492|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    492|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 484, False: 8]
  |  |  ------------------
  ------------------
 3565|    484|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    484|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    484|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    484|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    484|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 484, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    484|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    484|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    484|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    484|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    484|    }                                                  \
  |  |  |  | 3671|    484|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      8|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      8|            localized_number_formatting_options<CharT>{loc};
 3586|      8|#endif
 3587|       |
 3588|      8|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      8|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      8|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      8|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      8|    }                                                  \
  |  |  |  | 3671|      8|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    298|    {
 3539|    298|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    298|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    298|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    298|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    298|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 298]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    298|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    298|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    298|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    298|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 298]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    298|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 298]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    298|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    298|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 256, False: 42]
  |  |  ------------------
  ------------------
 3565|    256|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    256|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    256|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    256|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    256|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 256]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    256|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    256|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    256|                    parse_integer_digits_without_thsep(
 3567|    256|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    256|                        prefix_result.parsed_base));
 3569|       |
 3570|    256|            auto buf = make_contiguous_buffer(
 3571|    256|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    256|            SCN_TRY(result_it,
  ------------------
  |  | 3672|    256|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    256|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    256|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    256|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 256, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    256|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    256|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    256|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    256|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    256|    }                                                  \
  |  |  |  | 3671|    256|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    256|        }
 3580|       |
 3581|     42|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     42|            localized_number_formatting_options<CharT>{loc};
 3586|     42|#endif
 3587|       |
 3588|     42|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     42|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     42|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     42|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     42|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 42, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     42|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     42|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     42|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     42|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     42|    }                                                  \
  |  |  |  | 3671|     42|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEmEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    462|    {
 3539|    462|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    462|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    462|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    462|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    462|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 462]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    462|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    462|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    462|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    462|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 462]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    462|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 462]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    462|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    462|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 462, False: 0]
  |  |  ------------------
  ------------------
 3565|    462|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    462|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    462|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    462|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    462|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 462, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    462|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    462|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    462|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    462|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    462|    }                                                  \
  |  |  |  | 3671|    462|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEmEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    980|    {
 3539|    980|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    980|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    980|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    980|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    980|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 980]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    980|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    980|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    980|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    980|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 980]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    980|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 980]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    980|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    980|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 980, False: 0]
  |  |  ------------------
  ------------------
 3565|    980|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    980|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    980|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    980|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    980|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 980]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    980|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    980|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    980|                    parse_integer_digits_without_thsep(
 3567|    980|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    980|                        prefix_result.parsed_base));
 3569|       |
 3570|    980|            auto buf = make_contiguous_buffer(
 3571|    980|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    980|            SCN_TRY(result_it,
  ------------------
  |  | 3672|    980|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    980|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    980|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    980|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 980, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    980|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    980|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    980|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    980|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    980|    }                                                  \
  |  |  |  | 3671|    980|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    980|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  16.6k|    {
 3040|  16.6k|        reader_error_handler eh{};
 3041|  16.6k|        get_derived().check_specs_impl(specs, eh);
 3042|  16.6k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  16.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 15.7k, False: 830]
  |  |  ------------------
  ------------------
 3043|  15.7k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  15.7k|        }
 3045|    830|        return {};
 3046|  16.6k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3050|  16.6k|    {
 3051|  16.6k|        return static_cast<Derived&>(*this);
 3052|  16.6k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4144|  16.6k|    {
 4145|  16.6k|        detail::check_float_type_specs(specs, eh);
 4146|  16.6k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3034|  1.57k|    {
 3035|  1.57k|        return true;
 3036|  1.57k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4216|    804|    {
 4217|    804|        unsigned options{};
 4218|    804|        if (specs.localized) {
  ------------------
  |  Branch (4218:13): [True: 54, False: 750]
  ------------------
 4219|     54|            options |= float_reader_base::allow_thsep;
 4220|     54|        }
 4221|       |
 4222|    804|        SCN_GCC_COMPAT_PUSH
 4223|    804|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4224|       |
 4225|    804|        switch (specs.type) {
 4226|     32|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4226:13): [True: 32, False: 772]
  ------------------
 4227|     32|                return options | float_reader_base::allow_fixed;
 4228|       |
 4229|      6|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4229:13): [True: 6, False: 798]
  ------------------
 4230|      6|                return options | float_reader_base::allow_scientific;
 4231|       |
 4232|     52|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4232:13): [True: 52, False: 752]
  ------------------
 4233|     52|                return options | float_reader_base::allow_hex;
 4234|       |
 4235|      6|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4235:13): [True: 6, False: 798]
  ------------------
 4236|      6|                return options | float_reader_base::allow_scientific |
 4237|      6|                       float_reader_base::allow_fixed;
 4238|       |
 4239|    708|            case detail::presentation_type::none:
  ------------------
  |  Branch (4239:13): [True: 708, False: 96]
  ------------------
 4240|    708|                return options | float_reader_base::allow_scientific |
 4241|    708|                       float_reader_base::allow_fixed |
 4242|    708|                       float_reader_base::allow_hex;
 4243|       |
 4244|      0|            default:
  ------------------
  |  Branch (4244:13): [True: 0, False: 804]
  ------------------
 4245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4246|    804|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4247|    804|        }
 4248|       |
 4249|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4250|    804|    }
_ZN3scn2v34impl12float_readerIcEC2Ej:
 3659|    804|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2Ev:
 1770|  1.54k|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIcEC2Ev:
 1531|  3.09k|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIcE17handle_separatorsEv:
 4056|  1.02k|    {
 4057|  1.02k|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4057:13): [True: 1.02k, False: 0]
  ------------------
 4058|  1.02k|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4058:13): [True: 1.02k, False: 0]
  ------------------
 4059|  1.02k|            return;
 4060|  1.02k|        }
 4061|       |
 4062|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4063|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4063:13): [True: 0, False: 0]
  ------------------
 4064|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4064:27): [True: 0, False: 0]
  ------------------
 4065|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4065:21): [True: 0, False: 0]
  ------------------
 4066|      0|                    ch = CharT{'.'};
 4067|      0|                }
 4068|      0|            }
 4069|      0|        }
 4070|       |
 4071|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4071:13): [True: 0, False: 0]
  ------------------
 4072|      0|            return;
 4073|      0|        }
 4074|       |
 4075|      0|        auto first =
 4076|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4077|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4077:13): [True: 0, False: 0]
  ------------------
 4078|      0|            return;
 4079|      0|        }
 4080|       |
 4081|      0|        m_thsep_indices.push_back(
 4082|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4083|       |
 4084|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4084:31): [True: 0, False: 0]
  ------------------
 4085|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4085:17): [True: 0, False: 0]
  ------------------
 4086|      0|                *first++ = std::move(*it);
 4087|      0|            }
 4088|      0|            else {
 4089|      0|                m_thsep_indices.push_back(
 4090|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4091|      0|            }
 4092|      0|        }
 4093|       |
 4094|      0|        str.erase(first, str.end());
 4095|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1586|  1.41k|    {
 1587|  1.41k|        return m_storage.has_value();
 1588|  1.41k|    }
_ZNR3scn2v34impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1591|    706|    {
 1592|    706|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|    706|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    706|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|    706|        return *m_storage;
 1594|    706|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EclESC_SJ_SL_:
  762|    492|    {
  763|    492|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    492|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    492|    }
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3678|      8|    {
 3679|      8|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|      8|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|      8|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 8]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|      8|        return read_source_impl(range);
 3685|      8|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_:
 3704|    492|    {
 3705|    492|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|    492|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    492|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    492|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    492|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 492]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    492|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    492|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|    492|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|    492|        auto it = sign_result.first;
 3708|    492|        m_sign = sign_result.second;
 3709|       |
 3710|    492|        auto digits_begin = it;
 3711|    492|        auto r = ranges::subrange{it, range.end()};
 3712|    492|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|    492|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|    492|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3715|    492|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|    492|                SCN_TRY_ASSIGN(
 3717|    492|                    it,
 3718|    492|                    do_read_source_impl(
 3719|    492|                        r,
 3720|    492|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|    492|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|    492|            }
 3723|    492|            else {
 3724|    492|                auto cb = [&](const auto& rr)
 3725|    492|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|    492|                    auto res = read_all(rr);
 3727|    492|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|    492|                        return unexpected_scan_error(
 3729|    492|                            scan_error::invalid_scanned_value,
 3730|    492|                            "Invalid float value");
 3731|    492|                    }
 3732|    492|                    return res;
 3733|    492|                };
 3734|    492|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3735|    492|            }
 3736|    492|        }
 3737|    492|        else {
 3738|    492|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|    492|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    492|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    492|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 492, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    492|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    492|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    492|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    492|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    492|    }                                                  \
  |  | 3671|    492|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    492|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3739|      0|                it,
 3740|      0|                do_read_source_impl(
 3741|      0|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|      0|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|      0|        }
 3744|       |
 3745|      0|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|      0|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 0, False: 0]
  |  Branch (3747:48): [True: 0, False: 0]
  ------------------
 3748|      0|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 0, False: 0]
  ------------------
 3749|      0|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 0, False: 0]
  ------------------
 3750|      0|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|      0|        }
 3752|       |
 3753|      0|        handle_separators();
 3754|       |
 3755|      0|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 0]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|      0|        return it;
 3768|      0|    }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEZNS3_16read_source_implISG_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_EUlRKSO_E_ZNSK_ISG_EEST_SO_EUlSV_E0_EEST_SO_OT0_OT1_:
 3999|    492|    {
 4000|    492|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|    492|        const bool allowed_nonhex =
 4002|    492|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|    492|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|    492|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 492, False: 0]
  |  Branch (4005:45): [True: 0, False: 492]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|    492|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 492]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|    492|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 492, False: 0]
  |  Branch (4014:45): [True: 0, False: 492]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|    492|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 492]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|    492|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 474, False: 18]
  |  Branch (4021:28): [True: 6, False: 468]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|      6|            auto it = range.begin();
 4025|       |
 4026|      6|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 0, False: 6]
  ------------------
 4027|      0|                m_kind = float_kind::hex_with_prefix;
 4028|      0|                it = *r;
 4029|      0|            }
 4030|      6|            else {
 4031|      6|                m_kind = float_kind::hex_without_prefix;
 4032|      6|            }
 4033|       |
 4034|      6|            return read_hex(ranges::subrange{it, range.end()});
 4035|      6|        }
 4036|    486|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 18, False: 468]
  |  Branch (4036:29): [True: 18, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|     18|            m_kind = float_kind::generic;
 4040|     18|            return read_regular_float(range);
 4041|     18|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|    468|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    468|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 468]
  |  |  ------------------
  ------------------
 4047|      0|            m_kind = float_kind::hex_with_prefix;
 4048|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4049|      0|        }
 4050|       |
 4051|    468|        m_kind = float_kind::generic;
 4052|    468|        return read_regular(range);
 4053|    468|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3810|    492|    {
 3811|    492|        auto it = range.begin();
 3812|    492|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 492, False: 0]
  ------------------
 3813|    492|            return unexpected(r.error());
 3814|    492|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3833|    492|    {
 3834|    492|        auto it = range.begin();
 3835|    492|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 492, False: 0]
  ------------------
 3836|    492|            return r.transform_error(map_parse_error_to_scan_error(
 3837|    492|                scan_error::invalid_scanned_value,
 3838|    492|                "Invalid floating-point NaN value"));
 3839|    492|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3803|    474|    {
 3804|    474|        return read_matching_string_classic_nocase(range, "0x");
 3805|    474|    }
_ZN3scn2v34impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3903|      6|    {
 3904|      6|        auto it = range.begin();
 3905|       |
 3906|      6|        std::ptrdiff_t digits_count = 0;
 3907|      6|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3908|      6|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6, False: 0]
  |  |  ------------------
  ------------------
 3909|      6|            return r.transform_error(map_parse_error_to_scan_error(
 3910|      6|                scan_error::invalid_scanned_value,
 3911|      6|                "Invalid hexadecimal floating-point value"));
 3912|      6|        }
 3913|      0|        else {
 3914|      0|            digits_count += ranges::distance(it, *r);
 3915|      0|            it = *r;
 3916|      0|        }
 3917|       |
 3918|      0|        m_integral_part_length = digits_count;
 3919|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3919:18): [True: 0, False: 0]
  ------------------
 3920|      0|                                             m_locale_options.decimal_point)) {
 3921|      0|            it = *r;
 3922|      0|        }
 3923|       |
 3924|      0|        if (auto r =
  ------------------
  |  Branch (3924:18): [True: 0, False: 0]
  ------------------
 3925|      0|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3926|      0|            digits_count += ranges::distance(it, *r);
 3927|      0|            it = *r;
 3928|      0|        }
 3929|       |
 3930|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3931|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3932|      0|                                         "No significand digits in hexfloat");
 3933|      0|        }
 3934|       |
 3935|      0|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3936|       |
 3937|      0|        return it;
 3938|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3788|      6|    {
 3789|      6|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6]
  |  |  |  Branch (859:45): [True: 0, False: 6]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3790|      6|                         thsep_allowed)) {
 3791|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3792|      0|                return char_to_int(ch) < 16 ||
 3793|      0|                       ch == m_locale_options.thousands_sep;
 3794|      0|            });
 3795|      0|        }
 3796|       |
 3797|      6|        return read_while1_code_unit(
 3798|      6|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3799|      6|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_LPv0EEEOSR_:
  753|      6|    {
  754|      6|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEcE_clES12_c:
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|      6|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|      6|                  obj(static_cast<decltype(args)>(args)...);
  747|      6|              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlcE0_EEDaNS3_7storageE:
  683|      6|    {
  684|      6|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|      6|            return static_cast<T*>(s.m_cp);
  686|      6|        }
  687|      6|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|      6|            return static_cast<T*>(s.m_p);
  689|      6|        }
  690|      6|        else {
  691|      6|            return reinterpret_cast<T*>(s.m_fp);
  692|      6|        }
  693|      6|    }
_ZZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlcE0_clEc:
 3798|      6|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_LPv0EEEPSR_:
  661|      6|        {
  662|      6|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3943|    486|    {
 3944|    486|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|    486|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 472, False: 14]
  |  Branch (3945:50): [True: 0, False: 472]
  ------------------
 3946|       |
 3947|    486|        auto it = ranges::begin(range);
 3948|    486|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|    486|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|    486|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    486|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 486, False: 0]
  |  |  ------------------
  ------------------
 3952|    486|            return r.transform_error(
 3953|    486|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|    486|                                              "Invalid floating-point value"));
 3955|    486|        }
 3956|      0|        else {
 3957|      0|            digits_count += ranges::distance(it, *r);
 3958|      0|            it = *r;
 3959|      0|        }
 3960|       |
 3961|      0|        m_integral_part_length = digits_count;
 3962|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 0, False: 0]
  ------------------
 3963|      0|                                             m_locale_options.decimal_point)) {
 3964|      0|            it = *r;
 3965|      0|        }
 3966|       |
 3967|      0|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 0]
  ------------------
 3968|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|      0|        auto beg_exp_it = it;
 3979|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 0, False: 0]
  ------------------
 3980|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|      0|        }
 3982|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 0, False: 0]
  |  Branch (3982:29): [True: 0, False: 0]
  ------------------
 3983|      0|            return unexpected_scan_error(
 3984|      0|                scan_error::invalid_scanned_value,
 3985|      0|                "No exponent given to scientific float");
 3986|      0|        }
 3987|       |
 3988|      0|        m_kind =
 3989|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 0, False: 0]
  ------------------
 3990|       |
 3991|      0|        return it;
 3992|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3773|    486|    {
 3774|    486|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|    486|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 486]
  |  |  |  Branch (859:45): [True: 0, False: 486]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|    486|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|    486|        return read_while1_code_unit(
 3783|    486|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|    486|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_LPv0EEEOSR_:
  753|    486|    {
  754|    486|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEcE_clES12_c:
  743|    486|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    486|              cvref<T> obj = *get<T>(fn);
  745|    486|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    486|                  obj(static_cast<decltype(args)>(args)...);
  747|    486|              }
  748|    486|              else {
  749|    486|                  return obj(static_cast<decltype(args)>(args)...);
  750|    486|              }
  751|    486|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlcE0_EEDaNS3_7storageE:
  683|    486|    {
  684|    486|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    486|            return static_cast<T*>(s.m_cp);
  686|    486|        }
  687|    486|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    486|            return static_cast<T*>(s.m_p);
  689|    486|        }
  690|    486|        else {
  691|    486|            return reinterpret_cast<T*>(s.m_fp);
  692|    486|        }
  693|    486|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlcE0_clEc:
 3783|    486|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_LPv0EEEPSR_:
  661|    486|        {
  662|    486|        }
_ZN3scn2v34impl12float_readerIcE11read_sourceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3664|    484|    {
 3665|    484|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|    484|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 484]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|    484|        return read_source_impl(range);
 3671|    484|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|  1.05k|    {
  763|  1.05k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  1.05k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.05k|    }
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3678|     46|    {
 3679|     46|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|     46|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|     46|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 46]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|     46|        return read_source_impl(range);
 3685|     46|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3704|  1.05k|    {
 3705|  1.05k|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|  1.05k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.05k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.05k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.05k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.05k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.05k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|  1.05k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|  1.05k|        auto it = sign_result.first;
 3708|  1.05k|        m_sign = sign_result.second;
 3709|       |
 3710|  1.05k|        auto digits_begin = it;
 3711|  1.05k|        auto r = ranges::subrange{it, range.end()};
 3712|  1.05k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|  1.05k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|  1.05k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  2.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.05k]
  |  |  |  Branch (859:45): [True: 0, False: 1.05k]
  |  |  |  Branch (859:45): [True: 0, False: 1.05k]
  |  |  ------------------
  ------------------
 3715|  1.05k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|      0|    }                                                  \
  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3717|      0|                    it,
 3718|      0|                    do_read_source_impl(
 3719|      0|                        r,
 3720|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|      0|            }
 3723|  1.05k|            else {
 3724|  1.05k|                auto cb = [&](const auto& rr)
 3725|  1.05k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|  1.05k|                    auto res = read_all(rr);
 3727|  1.05k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|  1.05k|                        return unexpected_scan_error(
 3729|  1.05k|                            scan_error::invalid_scanned_value,
 3730|  1.05k|                            "Invalid float value");
 3731|  1.05k|                    }
 3732|  1.05k|                    return res;
 3733|  1.05k|                };
 3734|  1.05k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3667|  1.05k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  1.05k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  1.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 26, False: 1.02k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|     26|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|     26|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|     26|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|     26|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|     26|    }                                                  \
  |  | 3671|  1.05k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  1.05k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3735|  1.02k|            }
 3736|  1.05k|        }
 3737|  1.02k|        else {
 3738|  1.02k|            SCN_TRY_ASSIGN(
 3739|  1.02k|                it,
 3740|  1.02k|                do_read_source_impl(
 3741|  1.02k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|  1.02k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|  1.02k|        }
 3744|       |
 3745|  1.02k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.02k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|  1.02k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 1.02k, False: 0]
  |  Branch (3747:48): [True: 1.02k, False: 0]
  ------------------
 3748|  1.02k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 1.02k, False: 0]
  ------------------
 3749|  1.02k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 1.02k, False: 0]
  ------------------
 3750|  1.02k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|  1.02k|        }
 3752|       |
 3753|  1.02k|        handle_separators();
 3754|       |
 3755|  1.02k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 1.02k]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|  1.02k|        return it;
 3768|  1.02k|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3810|  1.05k|    {
 3811|  1.05k|        auto it = range.begin();
 3812|  1.05k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 1.05k, False: 0]
  ------------------
 3813|  1.05k|            return unexpected(r.error());
 3814|  1.05k|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|  1.05k|    {
 3834|  1.05k|        auto it = range.begin();
 3835|  1.05k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 1.05k, False: 0]
  ------------------
 3836|  1.05k|            return r.transform_error(map_parse_error_to_scan_error(
 3837|  1.05k|                scan_error::invalid_scanned_value,
 3838|  1.05k|                "Invalid floating-point NaN value"));
 3839|  1.05k|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3803|  1.02k|    {
 3804|  1.02k|        return read_matching_string_classic_nocase(range, "0x");
 3805|  1.02k|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|     26|{
 1996|     26|    auto it = read_while_code_unit(range, pred);
 1997|     26|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 26, False: 0]
  ------------------
 1998|     26|        return unexpected(parse_error::error);
 1999|     26|    }
 2000|      0|    return it;
 2001|     26|}
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3943|     26|    {
 3944|     26|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|     26|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 8, False: 18]
  |  Branch (3945:50): [True: 6, False: 2]
  ------------------
 3946|       |
 3947|     26|        auto it = ranges::begin(range);
 3948|     26|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|     26|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|     26|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26, False: 0]
  |  |  ------------------
  ------------------
 3952|     26|            return r.transform_error(
 3953|     26|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|     26|                                              "Invalid floating-point value"));
 3955|     26|        }
 3956|      0|        else {
 3957|      0|            digits_count += ranges::distance(it, *r);
 3958|      0|            it = *r;
 3959|      0|        }
 3960|       |
 3961|      0|        m_integral_part_length = digits_count;
 3962|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 0, False: 0]
  ------------------
 3963|      0|                                             m_locale_options.decimal_point)) {
 3964|      0|            it = *r;
 3965|      0|        }
 3966|       |
 3967|      0|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 0]
  ------------------
 3968|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|      0|        auto beg_exp_it = it;
 3979|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 0, False: 0]
  ------------------
 3980|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|      0|        }
 3982|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 0, False: 0]
  |  Branch (3982:29): [True: 0, False: 0]
  ------------------
 3983|      0|            return unexpected_scan_error(
 3984|      0|                scan_error::invalid_scanned_value,
 3985|      0|                "No exponent given to scientific float");
 3986|      0|        }
 3987|       |
 3988|      0|        m_kind =
 3989|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 0, False: 0]
  ------------------
 3990|       |
 3991|      0|        return it;
 3992|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3773|     26|    {
 3774|     26|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 26]
  |  |  |  Branch (859:45): [True: 0, False: 26]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|     26|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|     26|        return read_while1_code_unit(
 3783|     26|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|     26|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_:
  753|     26|    {
  754|     26|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESU_c:
  743|     26|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     26|              cvref<T> obj = *get<T>(fn);
  745|     26|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|     26|                  obj(static_cast<decltype(args)>(args)...);
  747|     26|              }
  748|     26|              else {
  749|     26|                  return obj(static_cast<decltype(args)>(args)...);
  750|     26|              }
  751|     26|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  683|     26|    {
  684|     26|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|     26|            return static_cast<T*>(s.m_cp);
  686|     26|        }
  687|     26|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|     26|            return static_cast<T*>(s.m_p);
  689|     26|        }
  690|     26|        else {
  691|     26|            return reinterpret_cast<T*>(s.m_fp);
  692|     26|        }
  693|     26|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3783|     26|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_LPv0EEEPSJ_:
  661|     26|        {
  662|     26|        }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3999|  1.05k|    {
 4000|  1.05k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|  1.05k|        const bool allowed_nonhex =
 4002|  1.05k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|  1.05k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|  1.05k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 1.05k, False: 0]
  |  Branch (4005:45): [True: 0, False: 1.05k]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|  1.05k|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 1.05k]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|  1.05k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 1.05k, False: 0]
  |  Branch (4014:45): [True: 0, False: 1.05k]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|  1.05k|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 1.05k]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|  1.05k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 1.02k, False: 26]
  |  Branch (4021:28): [True: 46, False: 982]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|     46|            auto it = range.begin();
 4025|       |
 4026|     46|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 0, False: 46]
  ------------------
 4027|      0|                m_kind = float_kind::hex_with_prefix;
 4028|      0|                it = *r;
 4029|      0|            }
 4030|     46|            else {
 4031|     46|                m_kind = float_kind::hex_without_prefix;
 4032|     46|            }
 4033|       |
 4034|     46|            return read_hex(ranges::subrange{it, range.end()});
 4035|     46|        }
 4036|  1.00k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 26, False: 982]
  |  Branch (4036:29): [True: 26, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|     26|            m_kind = float_kind::generic;
 4040|     26|            return read_regular_float(range);
 4041|     26|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|    982|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    982|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 982]
  |  |  ------------------
  ------------------
 4047|      0|            m_kind = float_kind::hex_with_prefix;
 4048|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4049|      0|        }
 4050|       |
 4051|    982|        m_kind = float_kind::generic;
 4052|    982|        return read_regular(range);
 4053|    982|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3725|  1.02k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|  1.02k|                    auto res = read_all(rr);
 3727|  1.02k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|  1.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.02k]
  |  |  ------------------
  ------------------
 3728|      0|                        return unexpected_scan_error(
 3729|      0|                            scan_error::invalid_scanned_value,
 3730|      0|                            "Invalid float value");
 3731|      0|                    }
 3732|  1.02k|                    return res;
 3733|  1.02k|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|  1.02k|{
 1839|  1.02k|    return ranges::next(range.begin(), range.end());
 1840|  1.02k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|  1.02k|    {
  313|  1.02k|        ranges::advance(x, bound);
  314|  1.02k|        return x;
  315|  1.02k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|  1.02k|    {
  275|  1.02k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|  1.02k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|  1.08k|    {
  190|  1.08k|        i = std::move(bound);
  191|  1.08k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEvOT_:
 1576|  1.02k|    {
 1577|  1.02k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  1.02k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  1.02k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1620|  1.02k|    {
 1621|  1.02k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  1.02k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  1.02k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  1.02k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  1.02k|            m_storage.reset();
 1627|  1.02k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  1.02k|        }
 1629|  1.02k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|  1.02k|                                          std::basic_string<CharT>>) {
 1631|  1.02k|            m_storage.emplace(SCN_FWD(range));
 1632|  1.02k|            m_view = string_view_type{*m_storage};
 1633|  1.02k|        }
 1634|  1.02k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|  1.02k|                                          typename detail::basic_scan_buffer<
 1636|  1.02k|                                              value_t>::forward_iterator> &&
 1637|  1.02k|                           ranges::common_range<Range>) {
 1638|  1.02k|            auto beg_seg = range.begin().contiguous_segment();
 1639|  1.02k|            auto end_seg = range.end().contiguous_segment();
 1640|  1.02k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|  1.02k|                             detail::to_address(end_seg.end()))) {
 1642|  1.02k|                auto& str = m_storage.emplace();
 1643|  1.02k|                str.reserve(range.end().position() - range.begin().position());
 1644|  1.02k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  1.02k|                m_view = string_view_type{str};
 1646|  1.02k|                return;
 1647|  1.02k|            }
 1648|       |
 1649|  1.02k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  1.02k|                                                            end_seg.data());
 1651|  1.02k|            m_storage.reset();
 1652|  1.02k|        }
 1653|  1.02k|        else {
 1654|  1.02k|            auto& str = m_storage.emplace();
 1655|  1.02k|            if constexpr (ranges::sized_range<Range>) {
 1656|  1.02k|                str.reserve(range.size());
 1657|  1.02k|            }
 1658|  1.02k|            if constexpr (ranges::common_range<Range>) {
 1659|  1.02k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  1.02k|                          std::back_inserter(str));
 1661|  1.02k|            }
 1662|  1.02k|            else {
 1663|  1.02k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  1.02k|                     ++it) {
 1665|  1.02k|                    str.push_back(*it);
 1666|  1.02k|                }
 1667|  1.02k|            }
 1668|  1.02k|            m_view = string_view_type{str};
 1669|  1.02k|        }
 1670|  1.02k|    }
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3664|  1.00k|    {
 3665|  1.00k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|  1.00k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.00k]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|  1.00k|        return read_source_impl(range);
 3671|  1.00k|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3690|  1.02k|    {
 3691|  1.02k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.02k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|  1.02k|        const std::ptrdiff_t sign_len =
 3694|  1.02k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 0, False: 1.02k]
  ------------------
 3695|       |
 3696|  1.02k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|  1.02k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.02k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.02k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.02k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.02k|    }                                                  \
  |  |  |  | 3671|  1.02k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|      0|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|  1.02k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 4169|    492|    {
 4170|    492|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|    492|#if !SCN_DISABLE_LOCALE
 4173|    492|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 8, False: 484]
  ------------------
 4174|      8|            return read_impl<Range>(
 4175|      8|                range, rd,
 4176|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4177|      8|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|      8|                },
 4179|      8|                value, loc);
 4180|      8|        }
 4181|    484|#endif
 4182|       |
 4183|    484|        return read_impl<Range>(
 4184|    484|            range, rd,
 4185|    484|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    484|                return r.read_source(SCN_FWD(args)...);
 4187|    484|            },
 4188|    484|            value);
 4189|    492|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNS1_12float_readerIcEENS1_12function_refIFSM_SP_SH_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|    492|    {
 4206|    492|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|    492|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    492|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 492, False: 0]
  |  |  ------------------
  ------------------
 4208|    492|            return unexpected(r.error());
 4209|    492|        }
 4210|       |
 4211|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|      0|        return ranges::next(range.begin(), n);
 4213|      0|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_LPv0EEEOSU_:
  753|      8|    {
  754|      8|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_LPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1D_SC_SJ_SL_:
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|      8|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|      8|                  obj(static_cast<decltype(args)>(args)...);
  747|      8|              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|      8|    {
  684|      8|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|      8|            return static_cast<T*>(s.m_cp);
  686|      8|        }
  687|      8|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|      8|            return static_cast<T*>(s.m_p);
  689|      8|        }
  690|      8|        else {
  691|      8|            return reinterpret_cast<T*>(s.m_fp);
  692|      8|        }
  693|      8|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSD_ST_EEEDaSW_SZ_:
 4176|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4177|      8|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|      8|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSL_:
  661|      8|        {
  662|      8|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_LPv0EEEOSU_:
  753|    484|    {
  754|    484|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_LPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1D_SC_SJ_SL_:
  743|    484|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    484|              cvref<T> obj = *get<T>(fn);
  745|    484|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    484|                  obj(static_cast<decltype(args)>(args)...);
  747|    484|              }
  748|    484|              else {
  749|    484|                  return obj(static_cast<decltype(args)>(args)...);
  750|    484|              }
  751|    484|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|    484|    {
  684|    484|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    484|            return static_cast<T*>(s.m_cp);
  686|    484|        }
  687|    484|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    484|            return static_cast<T*>(s.m_p);
  689|    484|        }
  690|    484|        else {
  691|    484|            return reinterpret_cast<T*>(s.m_fp);
  692|    484|        }
  693|    484|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSD_ST_EEEDaSW_SZ_:
 4185|    484|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    484|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    484|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|    484|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSL_:
  661|    484|        {
  662|    484|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|    312|    {
 4170|    312|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|    312|#if !SCN_DISABLE_LOCALE
 4173|    312|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 46, False: 266]
  ------------------
 4174|     46|            return read_impl<Range>(
 4175|     46|                range, rd,
 4176|     46|                [](float_reader<CharT>& r, auto&&... args) {
 4177|     46|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|     46|                },
 4179|     46|                value, loc);
 4180|     46|        }
 4181|    266|#endif
 4182|       |
 4183|    266|        return read_impl<Range>(
 4184|    266|            range, rd,
 4185|    266|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    266|                return r.read_source(SCN_FWD(args)...);
 4187|    266|            },
 4188|    266|            value);
 4189|    312|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|  1.05k|    {
 4206|  1.05k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|  1.05k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26, False: 1.02k]
  |  |  ------------------
  ------------------
 4208|     26|            return unexpected(r.error());
 4209|     26|        }
 4210|       |
 4211|  1.02k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|  1.02k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.02k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.02k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.02k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.02k|    }                                                  \
  |  |  |  | 3671|  1.02k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|      0|        return ranges::next(range.begin(), n);
 4213|  1.02k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|     46|    {
  754|     46|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|     46|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     46|              cvref<T> obj = *get<T>(fn);
  745|     46|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|     46|                  obj(static_cast<decltype(args)>(args)...);
  747|     46|              }
  748|     46|              else {
  749|     46|                  return obj(static_cast<decltype(args)>(args)...);
  750|     46|              }
  751|     46|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|     46|    {
  684|     46|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|     46|            return static_cast<T*>(s.m_cp);
  686|     46|        }
  687|     46|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|     46|            return static_cast<T*>(s.m_p);
  689|     46|        }
  690|     46|        else {
  691|     46|            return reinterpret_cast<T*>(s.m_fp);
  692|     46|        }
  693|     46|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|     46|                [](float_reader<CharT>& r, auto&&... args) {
 4177|     46|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|     46|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|     46|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|     46|        {
  662|     46|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|    266|    {
  754|    266|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|    266|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    266|              cvref<T> obj = *get<T>(fn);
  745|    266|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    266|                  obj(static_cast<decltype(args)>(args)...);
  747|    266|              }
  748|    266|              else {
  749|    266|                  return obj(static_cast<decltype(args)>(args)...);
  750|    266|              }
  751|    266|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|    266|    {
  684|    266|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    266|            return static_cast<T*>(s.m_cp);
  686|    266|        }
  687|    266|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    266|            return static_cast<T*>(s.m_p);
  689|    266|        }
  690|    266|        else {
  691|    266|            return reinterpret_cast<T*>(s.m_fp);
  692|    266|        }
  693|    266|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|    266|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    266|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    266|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|    266|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|    266|        {
  662|    266|        }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEcEEDav:
 5808|  17.2k|{
 5809|  17.2k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  17.2k|        return reader_impl_for_bool<CharT>{};
 5811|  17.2k|    }
 5812|  17.2k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  17.2k|        return reader_impl_for_char<CharT>{};
 5814|  17.2k|    }
 5815|  17.2k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  17.2k|        return reader_impl_for_wchar<CharT>{};
 5817|  17.2k|    }
 5818|  17.2k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  17.2k|        return reader_impl_for_code_point<CharT>{};
 5820|  17.2k|    }
 5821|  17.2k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  17.2k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  17.2k|        return reader_impl_for_string<CharT>{};
 5824|  17.2k|    }
 5825|  17.2k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5825:24): [Folded - Ignored]
  |  Branch (5825:24): [Folded - Ignored]
  ------------------
 5826|  17.2k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  17.2k|        return reader_impl_for_string<CharT>{};
 5828|  17.2k|    }
 5829|  17.2k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  17.2k|                       std::is_same_v<T, wregex_matches>) {
 5831|  17.2k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  17.2k|    }
 5833|  17.2k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  17.2k|        return reader_impl_for_voidptr<CharT>{};
 5835|  17.2k|    }
 5836|  17.2k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  17.2k|        return reader_impl_for_float<CharT>{};
 5838|  17.2k|    }
 5839|  17.2k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  17.2k|                       !std::is_same_v<T, wchar_t> &&
 5841|  17.2k|                       !std::is_same_v<T, char32_t> &&
 5842|  17.2k|                       !std::is_same_v<T, bool>) {
 5843|  17.2k|        return reader_impl_for_int<CharT>{};
 5844|  17.2k|    }
 5845|  17.2k|    else {
 5846|  17.2k|        return reader_impl_for_monostate<CharT>{};
 5847|  17.2k|    }
 5848|  17.2k|}
_ZN3scn2v34impl13string_readerIcEC2Ev:
 5205|  51.7k|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  49.5k|    {
 3040|  49.5k|        reader_error_handler eh{};
 3041|  49.5k|        get_derived().check_specs_impl(specs, eh);
 3042|  49.5k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  49.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 402, False: 49.1k]
  |  |  ------------------
  ------------------
 3043|    402|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|    402|        }
 3045|  49.1k|        return {};
 3046|  49.5k|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11get_derivedEv:
 3050|  49.5k|    {
 3051|  49.5k|        return static_cast<Derived&>(*this);
 3052|  49.5k|    }
_ZN3scn2v34impl13string_readerIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5209|  49.5k|    {
 5210|  49.5k|        detail::check_string_type_specs(specs, eh);
 5211|       |
 5212|  49.5k|        SCN_GCC_PUSH
 5213|  49.5k|        SCN_GCC_IGNORE("-Wswitch")
 5214|  49.5k|        SCN_GCC_IGNORE("-Wswitch-default")
 5215|       |
 5216|  49.5k|        SCN_CLANG_PUSH
 5217|  49.5k|        SCN_CLANG_IGNORE("-Wswitch")
 5218|  49.5k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5219|       |
 5220|  49.5k|        switch (specs.type) {
  ------------------
  |  Branch (5220:17): [True: 396, False: 49.1k]
  ------------------
 5221|  2.12k|            case detail::presentation_type::none:
  ------------------
  |  Branch (5221:13): [True: 2.12k, False: 47.3k]
  ------------------
 5222|  2.12k|                m_type = reader_type::word;
 5223|  2.12k|                break;
 5224|       |
 5225|    534|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5225:13): [True: 534, False: 48.9k]
  ------------------
 5226|    534|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5226:21): [True: 84, False: 450]
  ------------------
 5227|    534|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5227:21): [True: 228, False: 222]
  ------------------
 5228|    312|                    m_type = reader_type::custom_word;
 5229|    312|                }
 5230|    222|                else {
 5231|    222|                    m_type = reader_type::word;
 5232|    222|                }
 5233|    534|                break;
 5234|      0|            }
 5235|       |
 5236|    114|            case detail::presentation_type::character:
  ------------------
  |  Branch (5236:13): [True: 114, False: 49.3k]
  ------------------
 5237|    114|                m_type = reader_type::character;
 5238|    114|                break;
 5239|       |
 5240|  8.19k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5240:13): [True: 8.19k, False: 41.3k]
  ------------------
 5241|  8.19k|                m_type = reader_type::character_set;
 5242|  8.19k|                break;
 5243|       |
 5244|  32.5k|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5244:13): [True: 32.5k, False: 16.9k]
  ------------------
 5245|  32.5k|                m_type = reader_type::regex;
 5246|  32.5k|                break;
 5247|       |
 5248|  5.60k|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5248:13): [True: 5.60k, False: 43.9k]
  ------------------
 5249|  5.60k|                m_type = reader_type::regex_escaped;
 5250|  5.60k|                break;
 5251|  49.5k|        }
 5252|       |
 5253|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5254|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5255|  49.5k|    }
_ZNK3scn2v34impl13string_readerIcE19skip_ws_before_readEv:
 5258|  60.2k|    {
 5259|  60.2k|        return m_type == reader_type::word;
 5260|  60.2k|    }
_ZN3scn2v34impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|  19.3k|{
 1132|  19.3k|    auto it = src.begin();
 1133|  2.18M|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 2.17M, False: 15.5k]
  ------------------
 1134|  2.17M|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|  2.17M|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 2.31k, False: 2.16M]
  ------------------
 1136|  2.31k|            return false;
 1137|  2.31k|        }
 1138|  2.16M|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 288, False: 2.16M]
  ------------------
 1139|    288|            return false;
 1140|    288|        }
 1141|  2.16M|        const auto cp = detail::decode_code_point_exhaustive(
 1142|  2.16M|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|  2.16M|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 1.18k, False: 2.16M]
  ------------------
 1144|  1.18k|            return false;
 1145|  1.18k|        }
 1146|  2.16M|        it += len;
 1147|  2.16M|    }
 1148|  15.5k|    return true;
 1149|  19.3k|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|    706|{
 2993|    706|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|    706|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2994:13): [True: 706, False: 0]
  ------------------
 2995|    706|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|    706|    static_cast<    \
  |  |  929|    706|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2996|    706|        }
 2997|      0|        else {
 2998|      0|            dest.assign(source.view());
 2999|      0|        }
 3000|    706|    }
 3001|    706|    else {
 3002|    706|        return transcode_impl(source.view(), dest);
 3003|    706|    }
 3004|       |
 3005|    706|    return {};
 3006|    706|}
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helper15handle_nonasciiEv:
 5102|  8.16k|        {
 5103|  8.16k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5103:17): [True: 1.16k, False: 6.99k]
  ------------------
 5104|  1.16k|                return {};
 5105|  1.16k|            }
 5106|       |
 5107|  6.99k|            auto charset_string = specs.charset_string<SourceCharT>();
 5108|  6.99k|            auto it = detail::to_address(charset_string.begin());
 5109|  6.99k|            auto set = detail::parse_presentation_set(
 5110|  6.99k|                it, detail::to_address(charset_string.end()), nonascii);
 5111|  6.99k|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  859|  6.99k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.99k]
  |  |  ------------------
  ------------------
 5112|      0|                return nonascii.err;
 5113|      0|            }
 5114|  6.99k|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  925|  6.99k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.99k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5115|  6.99k|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  925|  6.99k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.99k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5116|       |
 5117|  6.99k|            std::sort(nonascii.extra_ranges.begin(),
 5118|  6.99k|                      nonascii.extra_ranges.end());
 5119|  6.99k|            return {};
 5120|  6.99k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE20read_source_callback28on_classic_with_extra_rangesEDi:
 5137|  1.57M|        {
 5138|  1.57M|            if (!is_ascii_char(cp)) {
  ------------------
  |  Branch (5138:17): [True: 179k, False: 1.39M]
  ------------------
 5139|   179k|                return helper.is_char_set_in_extra_literals(cp);
 5140|   179k|            }
 5141|       |
 5142|  1.39M|            return helper.is_char_set_in_literals(static_cast<char>(cp));
 5143|  1.57M|        }
_ZNK3scn2v34impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDi:
 5085|   179k|        {
 5086|       |            // TODO: binary search?
 5087|   179k|            if (nonascii.extra_ranges.empty()) {
  ------------------
  |  Branch (5087:17): [True: 0, False: 179k]
  ------------------
 5088|      0|                return false;
 5089|      0|            }
 5090|       |
 5091|   179k|            const auto cp_val = static_cast<uint32_t>(cp);
 5092|   179k|            return std::find_if(
 5093|   179k|                       nonascii.extra_ranges.begin(),
 5094|   179k|                       nonascii.extra_ranges.end(),
 5095|   179k|                       [cp_val](const auto& pair) noexcept {
 5096|   179k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
 5097|   179k|                                  static_cast<uint32_t>(pair.second) > cp_val;
 5098|   179k|                       }) != nonascii.extra_ranges.end();
 5099|   179k|        }
_ZZNK3scn2v34impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDiENKUlRKT_E_clINSt3__14pairIDiDiEEEEDaS7_:
 5095|  47.1M|                       [cp_val](const auto& pair) noexcept {
 5096|  47.1M|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
  ------------------
  |  Branch (5096:35): [True: 47.1M, False: 15.1k]
  ------------------
 5097|  47.1M|                                  static_cast<uint32_t>(pair.second) > cp_val;
  ------------------
  |  Branch (5097:35): [True: 177k, False: 46.9M]
  ------------------
 5098|  47.1M|                       }) != nonascii.extra_ranges.end();
_ZNK3scn2v34impl25character_set_reader_implIcE12specs_helper23is_char_set_in_literalsEc:
 5075|  1.41M|        {
 5076|  1.41M|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  924|  1.41M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.41M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5077|  1.41M|            const auto val =
 5078|  1.41M|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5079|  1.41M|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5080|  1.41M|                    (val % 8)) &
 5081|  1.41M|                   1u;
 5082|  1.41M|        }
_ZNK3scn2v34impl25character_set_reader_implIcE20read_source_callback13on_ascii_onlyEc:
 5128|  24.5k|        {
 5129|  24.5k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5129:17): [True: 7.96k, False: 16.5k]
  ------------------
 5130|  7.96k|                return false;
 5131|  7.96k|            }
 5132|       |
 5133|  16.5k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5134|  24.5k|        }
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helperC2ERKNS0_6detail12format_specsE:
 5072|  8.16k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v34impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5276|  1.94k|    {
 5277|  1.94k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  1.94k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  1.94k|        return read_impl(range, specs, value);
 5279|  1.94k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5294|  1.94k|    {
 5295|  1.94k|        SCN_CLANG_PUSH
 5296|  1.94k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  1.94k|        switch (m_type) {
 5299|    466|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 466, False: 1.47k]
  ------------------
 5300|    466|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     58|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 58, False: 1.88k]
  ------------------
 5303|     58|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     58|                                                                   value);
 5305|       |
 5306|     36|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 36, False: 1.90k]
  ------------------
 5307|     36|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    690|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 690, False: 1.25k]
  ------------------
 5310|    690|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    690|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      2|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 2, False: 1.94k]
  ------------------
 5315|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      2|                    range, specs.charset_string<SourceCharT>(),
 5317|      2|                    specs.regexp_flags, value);
 5318|       |
 5319|    690|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 690, False: 1.25k]
  ------------------
 5320|    690|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    690|                    range,
 5322|    690|                    get_unescaped_regex_pattern(
 5323|    690|                        specs.charset_string<SourceCharT>()),
 5324|    690|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 1.94k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  1.94k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  1.94k|        }
 5331|       |
 5332|  1.94k|        SCN_CLANG_POP
 5333|  1.94k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4819|    466|    {
 4820|    466|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    466|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4751|    560|{
 4752|    560|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    560|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    560|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 236, False: 324]
  ------------------
 4756|    236|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    236|                                     "Invalid encoding in scanned string");
 4758|    236|    }
 4759|    324|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    324|    static_cast<    \
  |  |  929|    324|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    324|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    324|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 324]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    324|    return SCN_MOVE(result);
  ------------------
  |  |  928|    324|    static_cast<    \
  |  |  929|    324|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    324|}
_ZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2087|  1.39k|{
 2088|  1.39k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  1.39k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  1.39k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  1.39k|        auto buf = make_contiguous_buffer(range);
 2092|  1.39k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  1.39k|        return ranges::next(range.begin(),
 2094|  1.39k|                            ranges::distance(buf.view().begin(), it));
 2095|  1.39k|    }
 2096|  1.39k|    else {
 2097|  1.39k|        auto it = range.begin();
 2098|       |
 2099|  1.39k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|  1.39k|            auto seg = get_contiguous_beginning(range);
 2101|  1.39k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  1.39k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2102:17): [True: 0, False: 1.39k]
  ------------------
 2103|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|      0|            }
 2105|  1.39k|            ranges::advance(it, seg.size());
 2106|  1.39k|        }
 2107|       |
 2108|  1.39k|        return read_until_code_point(
 2109|  1.39k|            ranges::subrange{it, range.end()},
 2110|  1.39k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  1.39k|    }
 2112|  1.39k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbDiESQ_EE:
 2060|  1.39k|{
 2061|  1.39k|    auto it = range.begin();
 2062|  34.4k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 33.5k, False: 924]
  ------------------
 2063|  33.5k|        const auto val =
 2064|  33.5k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  33.5k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  33.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 25.4k, False: 8.15k]
  |  |  ------------------
  ------------------
 2066|  25.4k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  25.4k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  25.4k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 474, False: 24.9k]
  ------------------
 2069|    474|                return it;
 2070|    474|            }
 2071|  25.4k|        }
 2072|  33.0k|        it = val.iterator;
 2073|  33.0k|    }
 2074|       |
 2075|    924|    return it;
 2076|  1.39k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_:
  753|  1.39k|    {
  754|  1.39k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESS_Di:
  743|  25.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  25.4k|              cvref<T> obj = *get<T>(fn);
  745|  25.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  25.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  25.4k|              }
  748|  25.4k|              else {
  749|  25.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  25.4k|              }
  751|  25.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  25.4k|    {
  684|  25.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  25.4k|            return static_cast<T*>(s.m_cp);
  686|  25.4k|        }
  687|  25.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  25.4k|            return static_cast<T*>(s.m_p);
  689|  25.4k|        }
  690|  25.4k|        else {
  691|  25.4k|            return reinterpret_cast<T*>(s.m_fp);
  692|  25.4k|        }
  693|  25.4k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2110|  25.4k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_LPv0EEEPSI_:
  661|  1.39k|        {
  662|  1.39k|        }
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4840|     58|    {
 4841|     58|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 34, False: 24]
  ------------------
 4842|     34|            return read_string_impl(
 4843|     34|                range,
 4844|     34|                read_until_code_unit(
 4845|     34|                    range,
 4846|     34|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     34|                        SourceCharT ch) { return ch == until; }),
 4848|     34|                value);
 4849|     34|        }
 4850|     24|        return read_string_impl(
 4851|     24|            range,
 4852|     24|            read_until_code_units(
 4853|     24|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|     24|            value);
 4855|     58|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_LPv0EEEOSL_:
  753|     34|    {
  754|     34|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES18_c:
  743|    782|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    782|              cvref<T> obj = *get<T>(fn);
  745|    782|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    782|                  obj(static_cast<decltype(args)>(args)...);
  747|    782|              }
  748|    782|              else {
  749|    782|                  return obj(static_cast<decltype(args)>(args)...);
  750|    782|              }
  751|    782|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|    782|    {
  684|    782|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    782|            return static_cast<T*>(s.m_cp);
  686|    782|        }
  687|    782|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    782|            return static_cast<T*>(s.m_p);
  689|    782|        }
  690|    782|        else {
  691|    782|            return reinterpret_cast<T*>(s.m_fp);
  692|    782|        }
  693|    782|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlcE_clEc:
 4847|    782|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_LPv0EEEPSL_:
  661|     34|        {
  662|     34|        }
_ZN3scn2v34impl21read_until_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEESI_RKT0_:
 2006|     72|{
 2007|     72|    static_assert(ranges::common_range<CodeUnits>);
 2008|       |
 2009|     72|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (2009:19): [Folded - Ignored]
  ------------------
 2010|     72|        return std::search(range.begin(), range.end(), needle.begin(),
 2011|     72|                           needle.end());
 2012|     72|    }
 2013|     72|    else {
 2014|     72|        auto first = range.begin();
 2015|    294|        while (true) {
  ------------------
  |  Branch (2015:16): [Folded - Ignored]
  ------------------
 2016|    294|            auto it = first;
 2017|    420|            for (auto needle_it = needle.begin();; ++it, (void)++needle_it) {
 2018|    420|                if (needle_it == needle.end()) {
  ------------------
  |  Branch (2018:21): [True: 36, False: 384]
  ------------------
 2019|     36|                    return first;
 2020|     36|                }
 2021|    384|                if (it == range.end()) {
  ------------------
  |  Branch (2021:21): [True: 36, False: 348]
  ------------------
 2022|     36|                    return it;
 2023|     36|                }
 2024|    348|                if (*it != *needle_it) {
  ------------------
  |  Branch (2024:21): [True: 222, False: 126]
  ------------------
 2025|    222|                    break;
 2026|    222|                }
 2027|    348|            }
 2028|    222|            ++first;
 2029|    222|        }
 2030|     72|    }
 2031|     72|}
_ZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4946|     36|    {
 4947|     36|        return read_impl(
 4948|     36|            range,
 4949|     36|            [&](const auto& rng) {
 4950|     36|                return read_string_impl(rng, read_all(rng), value);
 4951|     36|            },
 4952|     36|            detail::priority_tag<1>{});
 4953|     36|    }
_ZN3scn2v34impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     36|    {
 4974|     36|        return read_cb(range);
 4975|     36|    }
_ZZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4949|     36|            [&](const auto& rng) {
 4950|     36|                return read_string_impl(rng, read_all(rng), value);
 4951|     36|            },
_ZN3scn2v34impl8read_allINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 1838|    108|{
 1839|    108|    return ranges::next(range.begin(), range.end());
 1840|    108|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS1_6detail9subrange_8subrangeIS9_S9_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EESL_E4typeESL_SM_:
  312|    108|    {
  313|    108|        ranges::advance(x, bound);
  314|    108|        return x;
  315|    108|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EEvE4typeERSL_SM_:
  274|    108|    {
  275|    108|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|    108|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEvRT_T0_NS0_6detail12priority_tagILm0EEE:
  202|    108|    {
  203|  2.48k|        while (i != bound) {
  ------------------
  |  Branch (203:16): [True: 2.37k, False: 108]
  ------------------
  204|  2.37k|            ++i;
  205|  2.37k|        }
  206|    108|    }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5047|    690|    {
 5048|    690|        auto it = read_source_impl(range, {specs});
 5049|    690|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    690|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 22, False: 668]
  |  |  ------------------
  ------------------
 5050|     22|            return unexpected(it.error());
 5051|     22|        }
 5052|       |
 5053|    668|        return read_string_impl(range, *it, value);
 5054|    690|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperE:
 5152|  2.07k|    {
 5153|  2.07k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|  2.07k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|  2.07k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.07k]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|  2.07k|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|  2.07k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 1.24k, False: 822]
  ------------------
 5163|  1.24k|            const auto cb = [&](char32_t cp) {
 5164|  1.24k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|  1.24k|            };
 5166|       |
 5167|  1.24k|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 216, False: 1.03k]
  ------------------
 5168|    216|                auto it = read_until_code_point(range, cb);
 5169|    216|                return check_nonempty(it, range);
 5170|    216|            }
 5171|  1.03k|            auto it = read_while_code_point(range, cb);
 5172|  1.03k|            return check_nonempty(it, range);
 5173|  1.24k|        }
 5174|       |
 5175|    822|        const auto cb = [&](SourceCharT ch) {
 5176|    822|            return cb_wrapper.on_ascii_only(ch);
 5177|    822|        };
 5178|       |
 5179|    822|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 468, False: 354]
  ------------------
 5180|    468|            auto it = read_until_code_unit(range, cb);
 5181|    468|            return check_nonempty(it, range);
 5182|    468|        }
 5183|    354|        auto it = read_while_code_unit(range, cb);
 5184|    354|        return check_nonempty(it, range);
 5185|    822|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_LPv0EEEOSL_:
  753|  1.24k|    {
  754|  1.24k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   182k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   182k|              cvref<T> obj = *get<T>(fn);
  745|   182k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   182k|                  obj(static_cast<decltype(args)>(args)...);
  747|   182k|              }
  748|   182k|              else {
  749|   182k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   182k|              }
  751|   182k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|   182k|    {
  684|   182k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   182k|            return static_cast<T*>(s.m_cp);
  686|   182k|        }
  687|   182k|        else if constexpr (std::is_object_v<T>) {
  688|   182k|            return static_cast<T*>(s.m_p);
  689|   182k|        }
  690|   182k|        else {
  691|   182k|            return reinterpret_cast<T*>(s.m_fp);
  692|   182k|        }
  693|   182k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlDiE_clEDi:
 5163|   182k|            const auto cb = [&](char32_t cp) {
 5164|   182k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|   182k|            };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_LPv0EEEPKSL_:
  666|  1.24k|        {
  667|  1.24k|        }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEEEEENS0_13scan_expectedIT_EERKSI_T0_:
 5190|  2.07k|    {
 5191|  2.07k|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 66, False: 2.00k]
  ------------------
 5192|     66|            return unexpected_scan_error(
 5193|     66|                scan_error::invalid_scanned_value,
 5194|     66|                "No characters matched in [character set]");
 5195|     66|        }
 5196|       |
 5197|  2.00k|        return it;
 5198|  2.07k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_ST_LPv0EEEOSL_:
  753|    822|    {
  754|    822|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_ST_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clESZ_c:
  743|  20.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  20.4k|              cvref<T> obj = *get<T>(fn);
  745|  20.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  20.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  20.4k|              }
  748|  20.4k|              else {
  749|  20.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  20.4k|              }
  751|  20.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  20.4k|    {
  684|  20.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  20.4k|            return static_cast<T*>(s.m_cp);
  686|  20.4k|        }
  687|  20.4k|        else if constexpr (std::is_object_v<T>) {
  688|  20.4k|            return static_cast<T*>(s.m_p);
  689|  20.4k|        }
  690|  20.4k|        else {
  691|  20.4k|            return reinterpret_cast<T*>(s.m_fp);
  692|  20.4k|        }
  693|  20.4k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlcE_clEc:
 5175|  20.4k|        const auto cb = [&](SourceCharT ch) {
 5176|  20.4k|            return cb_wrapper.on_ascii_only(ch);
 5177|  20.4k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_LPv0EEEPKSL_:
  666|    822|        {
  667|    822|        }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4751|    668|{
 4752|    668|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    668|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    668|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 286, False: 382]
  ------------------
 4756|    286|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    286|                                     "Invalid encoding in scanned string");
 4758|    286|    }
 4759|    382|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    382|    static_cast<    \
  |  |  929|    382|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    382|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    382|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 382]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    382|    return SCN_MOVE(result);
  ------------------
  |  |  928|    382|    static_cast<    \
  |  |  929|    382|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    382|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4890|    692|    {
 4891|    692|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|    692|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    692|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    692|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    692|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 692, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    692|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    692|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    692|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    692|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    692|    }                                                  \
  |  |  |  | 3671|    692|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|      0|        return read_string_impl(range, it, value);
 4893|    692|    }
_ZN3scn2v34impl24regex_string_reader_implIcE4implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsE:
 4912|  2.07k|    {
 4913|  2.07k|        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|  4.15k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (4913:23): [Folded - Ignored]
  |  Branch (4913:23): [Folded - Ignored]
  ------------------
 4914|  2.07k|                      !std::is_same_v<SourceCharT, char>) {
  ------------------
  |  Branch (4914:23): [Folded - Ignored]
  ------------------
 4915|  2.07k|            return unexpected_scan_error(
 4916|  2.07k|                scan_error::invalid_scanned_value,
 4917|  2.07k|                "Regex backend doesn't support wide strings as input");
 4918|  2.07k|        }
 4919|  2.07k|        else {
 4920|  2.07k|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4920:17): [True: 2.07k, False: 0]
  ------------------
 4921|  2.07k|                return unexpected_scan_error(
 4922|  2.07k|                    scan_error::invalid_scanned_value,
 4923|  2.07k|                    "Cannot use regex with a non-contiguous source "
 4924|  2.07k|                    "range");
 4925|  2.07k|            }
 4926|       |
 4927|      0|            auto input = get_as_contiguous(range);
 4928|      0|            SCN_TRY(it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4929|      0|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4930|      0|            return ranges::next(range.begin(),
 4931|      0|                                ranges::distance(input.begin(), it));
 4932|      0|        }
 4933|  2.07k|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEbT_:
  958|  2.07k|{
  959|  2.07k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (959:19): [Folded - Ignored]
  |  Branch (959:19): [Folded - Ignored]
  ------------------
  960|  2.07k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (960:19): [Folded - Ignored]
  ------------------
  961|  2.07k|        return true;
  962|  2.07k|    }
  963|  2.07k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (963:24): [Folded - Ignored]
  ------------------
  964|  2.07k|                           ranges::const_iterator_t<Range>,
  965|  2.07k|                           typename detail::basic_scan_buffer<
  966|  2.07k|                               detail::char_t<Range>>::forward_iterator>) {
  967|  2.07k|        auto beg = r.begin();
  968|  2.07k|        if (!beg.stores_parent()) {
  969|  2.07k|            return true;
  970|  2.07k|        }
  971|  2.07k|        return beg.parent()->is_contiguous();
  972|  2.07k|    }
  973|  2.07k|    else {
  974|  2.07k|        return false;
  975|  2.07k|    }
  976|  2.07k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  14.3k|    {
 5277|  14.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  14.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  14.3k|        return read_impl(range, specs, value);
 5279|  14.3k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  14.3k|    {
 5295|  14.3k|        SCN_CLANG_PUSH
 5296|  14.3k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  14.3k|        switch (m_type) {
 5299|    298|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 298, False: 14.0k]
  ------------------
 5300|    298|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     46|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 46, False: 14.3k]
  ------------------
 5303|     46|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     46|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 14.3k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  2.03k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 2.03k, False: 12.3k]
  ------------------
 5310|  2.03k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  2.03k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  10.8k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 10.8k, False: 3.55k]
  ------------------
 5315|  10.8k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  10.8k|                    range, specs.charset_string<SourceCharT>(),
 5317|  10.8k|                    specs.regexp_flags, value);
 5318|       |
 5319|  1.17k|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 1.17k, False: 13.2k]
  ------------------
 5320|  1.17k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|  1.17k|                    range,
 5322|  1.17k|                    get_unescaped_regex_pattern(
 5323|  1.17k|                        specs.charset_string<SourceCharT>()),
 5324|  1.17k|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 14.3k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  14.3k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  14.3k|        }
 5331|       |
 5332|  14.3k|        SCN_CLANG_POP
 5333|  14.3k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|  1.04k|    {
 4820|  1.04k|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|  1.04k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|  1.08k|{
 4752|  1.08k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  1.08k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  1.08k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 424, False: 662]
  ------------------
 4756|    424|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    424|                                     "Invalid encoding in scanned string");
 4758|    424|    }
 4759|    662|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    662|    static_cast<    \
  |  |  929|    662|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    662|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    662|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 662]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    662|    return SCN_MOVE(result);
  ------------------
  |  |  928|    662|    static_cast<    \
  |  |  929|    662|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    662|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|  3.18k|{
 3012|  3.18k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|  3.18k|        dest.assign(source.view());
 3014|  3.18k|    }
 3015|  3.18k|    else {
 3016|  3.18k|        return transcode_impl(source.view(), dest);
 3017|  3.18k|    }
 3018|       |
 3019|  3.18k|    return {};
 3020|  3.18k|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2087|  3.12k|{
 2088|  3.12k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  3.12k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  3.12k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  3.12k|        auto buf = make_contiguous_buffer(range);
 2092|  3.12k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  3.12k|        return ranges::next(range.begin(),
 2094|  3.12k|                            ranges::distance(buf.view().begin(), it));
 2095|  3.12k|    }
 2096|  3.12k|    else {
 2097|  3.12k|        auto it = range.begin();
 2098|       |
 2099|  3.12k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2100|  3.12k|            auto seg = get_contiguous_beginning(range);
 2101|  3.12k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  3.12k|                seg_it != seg.end()) {
 2103|  3.12k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  3.12k|            }
 2105|  3.12k|            ranges::advance(it, seg.size());
 2106|  3.12k|        }
 2107|       |
 2108|  3.12k|        return read_until_code_point(
 2109|  3.12k|            ranges::subrange{it, range.end()},
 2110|  3.12k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  3.12k|    }
 2112|  3.12k|}
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4840|     46|    {
 4841|     46|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 32, False: 14]
  ------------------
 4842|     32|            return read_string_impl(
 4843|     32|                range,
 4844|     32|                read_until_code_unit(
 4845|     32|                    range,
 4846|     32|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     32|                        SourceCharT ch) { return ch == until; }),
 4848|     32|                value);
 4849|     32|        }
 4850|     14|        return read_string_impl(
 4851|     14|            range,
 4852|     14|            read_until_code_units(
 4853|     14|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|     14|            value);
 4855|     46|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_LPv0EEEOSJ_:
  753|     32|    {
  754|     32|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|    454|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    454|              cvref<T> obj = *get<T>(fn);
  745|    454|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    454|                  obj(static_cast<decltype(args)>(args)...);
  747|    454|              }
  748|    454|              else {
  749|    454|                  return obj(static_cast<decltype(args)>(args)...);
  750|    454|              }
  751|    454|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    454|    {
  684|    454|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    454|            return static_cast<T*>(s.m_cp);
  686|    454|        }
  687|    454|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    454|            return static_cast<T*>(s.m_p);
  689|    454|        }
  690|    454|        else {
  691|    454|            return reinterpret_cast<T*>(s.m_fp);
  692|    454|        }
  693|    454|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlcE_clEc:
 4847|    454|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_LPv0EEEPSJ_:
  661|     32|        {
  662|     32|        }
_ZN3scn2v34impl21read_until_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEESG_RKT0_:
 2006|     42|{
 2007|     42|    static_assert(ranges::common_range<CodeUnits>);
 2008|       |
 2009|     42|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (2009:19): [Folded - Ignored]
  ------------------
 2010|     42|        return std::search(range.begin(), range.end(), needle.begin(),
 2011|     42|                           needle.end());
 2012|     42|    }
 2013|     42|    else {
 2014|     42|        auto first = range.begin();
 2015|     42|        while (true) {
 2016|     42|            auto it = first;
 2017|     42|            for (auto needle_it = needle.begin();; ++it, (void)++needle_it) {
 2018|     42|                if (needle_it == needle.end()) {
 2019|     42|                    return first;
 2020|     42|                }
 2021|     42|                if (it == range.end()) {
 2022|     42|                    return it;
 2023|     42|                }
 2024|     42|                if (*it != *needle_it) {
 2025|     42|                    break;
 2026|     42|                }
 2027|     42|            }
 2028|     42|            ++first;
 2029|     42|        }
 2030|     42|    }
 2031|     42|}
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5047|  2.03k|    {
 5048|  2.03k|        auto it = read_source_impl(range, {specs});
 5049|  2.03k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 478, False: 1.55k]
  |  |  ------------------
  ------------------
 5050|    478|            return unexpected(it.error());
 5051|    478|        }
 5052|       |
 5053|  1.55k|        return read_string_impl(range, *it, value);
 5054|  2.03k|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5152|  6.09k|    {
 5153|  6.09k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|  6.09k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|  6.09k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.09k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.09k]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|  6.09k|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|  6.09k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 5.74k, False: 342]
  ------------------
 5163|  5.74k|            const auto cb = [&](char32_t cp) {
 5164|  5.74k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|  5.74k|            };
 5166|       |
 5167|  5.74k|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 372, False: 5.37k]
  ------------------
 5168|    372|                auto it = read_until_code_point(range, cb);
 5169|    372|                return check_nonempty(it, range);
 5170|    372|            }
 5171|  5.37k|            auto it = read_while_code_point(range, cb);
 5172|  5.37k|            return check_nonempty(it, range);
 5173|  5.74k|        }
 5174|       |
 5175|    342|        const auto cb = [&](SourceCharT ch) {
 5176|    342|            return cb_wrapper.on_ascii_only(ch);
 5177|    342|        };
 5178|       |
 5179|    342|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 150, False: 192]
  ------------------
 5180|    150|            auto it = read_until_code_unit(range, cb);
 5181|    150|            return check_nonempty(it, range);
 5182|    150|        }
 5183|    192|        auto it = read_while_code_unit(range, cb);
 5184|    192|        return check_nonempty(it, range);
 5185|    342|    }
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|  5.74k|{
 2061|  5.74k|    auto it = range.begin();
 2062|  1.39M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 1.39M, False: 390]
  ------------------
 2063|  1.39M|        const auto val =
 2064|  1.39M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  1.39M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  1.39M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.39M, False: 4.45k]
  |  |  ------------------
  ------------------
 2066|  1.39M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  1.39M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  1.39M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 5.35k, False: 1.38M]
  ------------------
 2069|  5.35k|                return it;
 2070|  5.35k|            }
 2071|  1.39M|        }
 2072|  1.39M|        it = val.iterator;
 2073|  1.39M|    }
 2074|       |
 2075|    390|    return it;
 2076|  5.74k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|  1.39M|{
 1899|  1.39M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  1.39M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.39M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  1.39M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  1.39M|    auto it = range.begin();
 1903|  1.39M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  1.39M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  1.39M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.45k, False: 1.39M]
  |  |  ------------------
  ------------------
 1906|  4.45k|        ++it;
 1907|  4.45k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|  4.45k|        return {it, {}};
 1909|  4.45k|    }
 1910|       |
 1911|  1.39M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 1.22M, False: 165k]
  ------------------
 1912|  1.22M|        ++it;
 1913|  1.22M|        return {it, string_type(1, *range.begin())};
 1914|  1.22M|    }
 1915|       |
 1916|   165k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|   165k|    return {it, string_type{range.begin(), it}};
 1918|  1.39M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1154|  4.45k|{
 1155|  4.45k|    auto it = input.begin();
 1156|  8.48k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 8.44k, False: 42]
  ------------------
 1157|  8.44k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 4.41k, False: 4.02k]
  ------------------
 1158|  4.41k|            break;
 1159|  4.41k|        }
 1160|  8.44k|    }
 1161|  4.45k|    return it;
 1162|  4.45k|}
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeERSA_SE_SB_:
  282|   165k|    {
  283|   165k|        return n - fn::impl_i_n_s(i, n, bound);
  284|   165k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeERSB_SE_SA_:
  211|   165k|    {
  212|   165k|        if (fn::abs(n) >= fn::abs(bound - i)) {
  ------------------
  |  Branch (212:13): [True: 60, False: 165k]
  ------------------
  213|     60|            auto dist = bound - i;
  214|     60|            fn::impl_i_s(i, bound, priority_tag<2>{});
  215|     60|            return dist;
  216|     60|        }
  217|   165k|        fn::impl_i_n(i, n, priority_tag<1>{});
  218|   165k|        return n;
  219|   165k|    }
_ZN3scn2v36ranges6detail8advance_2fn3absIlEET_S6_:
  131|   331k|    {
  132|   331k|        if (t < T{0}) {
  ------------------
  |  Branch (132:13): [True: 0, False: 331k]
  ------------------
  133|      0|            return -t;
  134|      0|        }
  135|   331k|        return t;
  136|   331k|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKccE8is_validEv:
 1889|  1.39M|    {
 1890|  1.39M|        return !codepoint.empty();
 1891|  1.39M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_LPv0EEEOSJ_:
  753|  5.74k|    {
  754|  5.74k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESX_Di:
  743|  1.39M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.39M|              cvref<T> obj = *get<T>(fn);
  745|  1.39M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.39M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.39M|              }
  748|  1.39M|              else {
  749|  1.39M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.39M|              }
  751|  1.39M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|  1.39M|    {
  684|  1.39M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.39M|            return static_cast<T*>(s.m_cp);
  686|  1.39M|        }
  687|  1.39M|        else if constexpr (std::is_object_v<T>) {
  688|  1.39M|            return static_cast<T*>(s.m_p);
  689|  1.39M|        }
  690|  1.39M|        else {
  691|  1.39M|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.39M|        }
  693|  1.39M|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlDiE_clEDi:
 5163|  1.39M|            const auto cb = [&](char32_t cp) {
 5164|  1.39M|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|  1.39M|            };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_LPv0EEEPKSJ_:
  666|  5.74k|        {
  667|  5.74k|        }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyIPKcNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5190|  6.09k|    {
 5191|  6.09k|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 1.43k, False: 4.65k]
  ------------------
 5192|  1.43k|            return unexpected_scan_error(
 5193|  1.43k|                scan_error::invalid_scanned_value,
 5194|  1.43k|                "No characters matched in [character set]");
 5195|  1.43k|        }
 5196|       |
 5197|  4.65k|        return it;
 5198|  6.09k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|  5.37k|{
 2082|  5.37k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  5.37k|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_LPv0EEEOSJ_:
  753|    342|    {
  754|    342|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  4.08k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.08k|              cvref<T> obj = *get<T>(fn);
  745|  4.08k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  4.08k|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.08k|              }
  748|  4.08k|              else {
  749|  4.08k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.08k|              }
  751|  4.08k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  4.08k|    {
  684|  4.08k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  4.08k|            return static_cast<T*>(s.m_cp);
  686|  4.08k|        }
  687|  4.08k|        else if constexpr (std::is_object_v<T>) {
  688|  4.08k|            return static_cast<T*>(s.m_p);
  689|  4.08k|        }
  690|  4.08k|        else {
  691|  4.08k|            return reinterpret_cast<T*>(s.m_fp);
  692|  4.08k|        }
  693|  4.08k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlcE_clEc:
 5175|  4.08k|        const auto cb = [&](SourceCharT ch) {
 5176|  4.08k|            return cb_wrapper.on_ascii_only(ch);
 5177|  4.08k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_LPv0EEEPKSJ_:
  666|    342|        {
  667|    342|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4751|  2.83k|{
 4752|  2.83k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  2.83k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  2.83k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 316, False: 2.52k]
  ------------------
 4756|    316|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    316|                                     "Invalid encoding in scanned string");
 4758|    316|    }
 4759|  2.52k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  2.52k|    static_cast<    \
  |  |  929|  2.52k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|  2.52k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.52k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.52k]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|  2.52k|    return SCN_MOVE(result);
  ------------------
  |  |  928|  2.52k|    static_cast<    \
  |  |  929|  2.52k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|  2.52k|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4890|  12.0k|    {
 4891|  12.0k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|  12.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10.7k, False: 1.28k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  10.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  10.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  10.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  10.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  10.7k|    }                                                  \
  |  |  |  | 3671|  12.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|  1.28k|        return read_string_impl(range, it, value);
 4893|  12.0k|    }
_ZN3scn2v34impl24regex_string_reader_implIcE4implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsE:
 4912|  36.0k|    {
 4913|  36.0k|        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|  72.1k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (4913:23): [Folded - Ignored]
  |  Branch (4913:23): [Folded - Ignored]
  ------------------
 4914|  36.0k|                      !std::is_same_v<SourceCharT, char>) {
  ------------------
  |  Branch (4914:23): [Folded - Ignored]
  ------------------
 4915|  36.0k|            return unexpected_scan_error(
 4916|  36.0k|                scan_error::invalid_scanned_value,
 4917|  36.0k|                "Regex backend doesn't support wide strings as input");
 4918|  36.0k|        }
 4919|  36.0k|        else {
 4920|  36.0k|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4920:17): [True: 0, False: 36.0k]
  ------------------
 4921|      0|                return unexpected_scan_error(
 4922|      0|                    scan_error::invalid_scanned_value,
 4923|      0|                    "Cannot use regex with a non-contiguous source "
 4924|      0|                    "range");
 4925|      0|            }
 4926|       |
 4927|  36.0k|            auto input = get_as_contiguous(range);
 4928|  36.0k|            SCN_TRY(it,
  ------------------
  |  | 3672|  36.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  36.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  36.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  36.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 32.2k, False: 3.85k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  32.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  32.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  32.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  32.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  32.2k|    }                                                  \
  |  |  |  | 3671|  36.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.85k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4929|  3.85k|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4930|  3.85k|            return ranges::next(range.begin(),
 4931|  3.85k|                                ranges::distance(input.begin(), it));
 4932|  36.0k|        }
 4933|  36.0k|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  958|  36.0k|{
  959|  36.0k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (959:19): [Folded - Ignored]
  |  Branch (959:19): [Folded - Ignored]
  ------------------
  960|  36.0k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (960:19): [Folded - Ignored]
  ------------------
  961|  36.0k|        return true;
  962|  36.0k|    }
  963|  36.0k|    else if constexpr (std::is_same_v<
  964|  36.0k|                           ranges::const_iterator_t<Range>,
  965|  36.0k|                           typename detail::basic_scan_buffer<
  966|  36.0k|                               detail::char_t<Range>>::forward_iterator>) {
  967|  36.0k|        auto beg = r.begin();
  968|  36.0k|        if (!beg.stores_parent()) {
  969|  36.0k|            return true;
  970|  36.0k|        }
  971|  36.0k|        return beg.parent()->is_contiguous();
  972|  36.0k|    }
  973|  36.0k|    else {
  974|  36.0k|        return false;
  975|  36.0k|    }
  976|  36.0k|}
_ZN3scn2v34impl17get_as_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaT_:
 1064|  36.0k|{
 1065|  36.0k|    SCN_EXPECT(is_segment_contiguous(r));
  ------------------
  |  |  924|  36.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  36.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1066|       |
 1067|  36.0k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1067:19): [Folded - Ignored]
  |  Branch (1067:19): [Folded - Ignored]
  ------------------
 1068|  36.0k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1068:19): [Folded - Ignored]
  ------------------
 1069|  36.0k|        return r;
 1070|  36.0k|    }
 1071|  36.0k|    else if constexpr (std::is_same_v<
 1072|  36.0k|                           ranges::const_iterator_t<Range>,
 1073|  36.0k|                           typename detail::basic_scan_buffer<
 1074|  36.0k|                               detail::char_t<Range>>::forward_iterator>) {
 1075|  36.0k|        if constexpr (ranges::common_range<Range>) {
 1076|  36.0k|            return detail::make_string_view_from_pointers(
 1077|  36.0k|                r.begin().to_contiguous_segment_iterator(),
 1078|  36.0k|                r.end().to_contiguous_segment_iterator());
 1079|  36.0k|        }
 1080|  36.0k|        else {
 1081|  36.0k|            return r.begin().contiguous_segment();
 1082|  36.0k|        }
 1083|  36.0k|    }
 1084|  36.0k|    else {
 1085|  36.0k|        SCN_EXPECT(false);
 1086|  36.0k|        SCN_UNREACHABLE;
 1087|       |        // for return type deduction
 1088|  36.0k|        return std::basic_string_view<detail::char_t<Range>>{};
 1089|  36.0k|    }
 1090|  36.0k|}
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  980|  36.0k|{
  981|  36.0k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|  36.0k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|  36.0k|        return true;
  984|  36.0k|    }
  985|  36.0k|    else if constexpr (std::is_same_v<
  986|  36.0k|                           ranges::const_iterator_t<Range>,
  987|  36.0k|                           typename detail::basic_scan_buffer<
  988|  36.0k|                               detail::char_t<Range>>::forward_iterator>) {
  989|  36.0k|        auto beg = r.begin();
  990|  36.0k|        if (beg.contiguous_segment().empty()) {
  991|  36.0k|            return false;
  992|  36.0k|        }
  993|  36.0k|        if constexpr (ranges::common_range<Range>) {
  994|  36.0k|            return beg.contiguous_segment().end() ==
  995|  36.0k|                   ranges::end(r).contiguous_segment().end();
  996|  36.0k|        }
  997|  36.0k|        else {
  998|  36.0k|            if (beg.stores_parent()) {
  999|  36.0k|                return beg.contiguous_segment().end() ==
 1000|  36.0k|                       beg.parent()->current_view().end();
 1001|  36.0k|            }
 1002|  36.0k|            return true;
 1003|  36.0k|        }
 1004|  36.0k|    }
 1005|  36.0k|    else {
 1006|  36.0k|        return false;
 1007|  36.0k|    }
 1008|  36.0k|}
_ZN3scn2v34impl22read_regex_string_implIcNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT0_EEEEEENSt3__117basic_string_viewIT_NSF_11char_traitsISH_EEEENS0_6detail11regex_flagsESB_:
 4345|  36.0k|{
 4346|  36.0k|    static_assert(ranges::contiguous_range<Input> &&
 4347|  36.0k|                  ranges::borrowed_range<Input> &&
 4348|  36.0k|                  std::is_same_v<ranges::range_value_t<Input>, CharT>);
 4349|       |
 4350|  36.0k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 4351|  36.0k|    std::basic_regex<CharT> re{};
 4352|  36.0k|    try {
 4353|  36.0k|        SCN_TRY(re_flags, make_regex_flags(flags));
  ------------------
  |  | 3672|  36.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  36.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  36.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  36.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 36.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  36.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  36.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4354|  36.0k|        re = std::basic_regex<CharT>{pattern.data(), pattern.size(),
 4355|  36.0k|                                     re_flags | std::regex_constants::nosubs};
 4356|  36.0k|    }
 4357|  36.0k|    catch (const std::regex_error& err) {
 4358|  23.9k|        return unexpected_scan_error(scan_error::invalid_format_string,
 4359|  23.9k|                                     "Invalid regex");
 4360|  23.9k|    }
 4361|       |
 4362|  12.0k|    std::match_results<const CharT*> matches{};
 4363|  12.0k|    try {
 4364|  12.0k|        bool found = std::regex_search(input.data(),
 4365|  12.0k|                                       input.data() + input.size(), matches, re,
 4366|  12.0k|                                       std::regex_constants::match_continuous);
 4367|  12.0k|        if (!found || matches.prefix().matched) {
  ------------------
  |  Branch (4367:13): [True: 8.24k, False: 3.85k]
  |  Branch (4367:23): [True: 0, False: 3.85k]
  ------------------
 4368|  7.63k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4369|  7.63k|                                         "Regular expression didn't match");
 4370|  7.63k|        }
 4371|  12.0k|    }
 4372|  12.0k|    catch (const std::regex_error& err) {
 4373|    612|        return unexpected_scan_error(scan_error::invalid_format_string,
 4374|    612|                                     "Regex matching failed with an error");
 4375|    612|    }
 4376|       |
 4377|  3.85k|    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4378|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_BOOST
 4379|       |    auto re =
 4380|       |#if SCN_REGEX_BOOST_USE_ICU
 4381|       |        boost::make_u32regex(pattern.data(), pattern.data() + pattern.size(),
 4382|       |                             make_regex_flags(flags) |
 4383|       |                                 boost::regex_constants::no_except |
 4384|       |                                 boost::regex_constants::nosubs);
 4385|       |#else
 4386|       |        boost::basic_regex<CharT>{pattern.data(), pattern.size(),
 4387|       |                                  make_regex_flags(flags) |
 4388|       |                                      boost::regex_constants::no_except |
 4389|       |                                      boost::regex_constants::nosubs};
 4390|       |#endif
 4391|       |    if (re.status() != 0) {
 4392|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4393|       |                                     "Invalid regex");
 4394|       |    }
 4395|       |
 4396|       |    boost::match_results<const CharT*> matches{};
 4397|       |    try {
 4398|       |        bool found =
 4399|       |#if SCN_REGEX_BOOST_USE_ICU
 4400|       |            boost::u32regex_search(input.data(), input.data() + input.size(),
 4401|       |                                   matches, re,
 4402|       |                                   boost::regex_constants::match_continuous);
 4403|       |#else
 4404|       |            boost::regex_search(input.data(), input.data() + input.size(),
 4405|       |                                matches, re,
 4406|       |                                boost::regex_constants::match_continuous);
 4407|       |#endif
 4408|       |        if (!found || matches.prefix().matched) {
 4409|       |            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4410|       |                                         "Regular expression didn't match");
 4411|       |        }
 4412|       |    }
 4413|       |    catch (const std::runtime_error& err) {
 4414|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4415|       |                                     "Regex matching failed with an error");
 4416|       |    }
 4417|       |
 4418|       |    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4419|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_RE2
 4420|       |    static_assert(std::is_same_v<CharT, char>);
 4421|       |    std::string flagged_pattern{};
 4422|       |    auto re = [&]() {
 4423|       |        auto [opts, flagstr] = make_regex_flags(flags);
 4424|       |        opts.set_never_capture(true);
 4425|       |        if (flagstr.empty()) {
 4426|       |            return re2::RE2{pattern, opts};
 4427|       |        }
 4428|       |        flagged_pattern.reserve(flagstr.size() + pattern.size());
 4429|       |        flagged_pattern.append(flagstr);
 4430|       |        flagged_pattern.append(pattern);
 4431|       |        return re2::RE2{flagged_pattern, opts};
 4432|       |    }();
 4433|       |    if (!re.ok()) {
 4434|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4435|       |                                     "Failed to parse regular expression");
 4436|       |    }
 4437|       |
 4438|       |    auto new_input = detail::make_string_view_from_pointers(
 4439|       |        detail::to_address(input.begin()), detail::to_address(input.end()));
 4440|       |    bool found = re2::RE2::Consume(&new_input, re);
 4441|       |    if (!found) {
 4442|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4443|       |                                     "Regular expression didn't match");
 4444|       |    }
 4445|       |    return input.begin() + ranges::distance(input.data(), new_input.data());
 4446|       |#endif  // SCN_REGEX_BACKEND == ...
 4447|  12.0k|}
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEcEEDav:
 5808|  17.2k|{
 5809|  17.2k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  17.2k|        return reader_impl_for_bool<CharT>{};
 5811|  17.2k|    }
 5812|  17.2k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  17.2k|        return reader_impl_for_char<CharT>{};
 5814|  17.2k|    }
 5815|  17.2k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  17.2k|        return reader_impl_for_wchar<CharT>{};
 5817|  17.2k|    }
 5818|  17.2k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  17.2k|        return reader_impl_for_code_point<CharT>{};
 5820|  17.2k|    }
 5821|  17.2k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  17.2k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  17.2k|        return reader_impl_for_string<CharT>{};
 5824|  17.2k|    }
 5825|  17.2k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5825:24): [Folded - Ignored]
  |  Branch (5825:24): [Folded - Ignored]
  ------------------
 5826|  17.2k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  17.2k|        return reader_impl_for_string<CharT>{};
 5828|  17.2k|    }
 5829|  17.2k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  17.2k|                       std::is_same_v<T, wregex_matches>) {
 5831|  17.2k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  17.2k|    }
 5833|  17.2k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  17.2k|        return reader_impl_for_voidptr<CharT>{};
 5835|  17.2k|    }
 5836|  17.2k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  17.2k|        return reader_impl_for_float<CharT>{};
 5838|  17.2k|    }
 5839|  17.2k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  17.2k|                       !std::is_same_v<T, wchar_t> &&
 5841|  17.2k|                       !std::is_same_v<T, char32_t> &&
 5842|  17.2k|                       !std::is_same_v<T, bool>) {
 5843|  17.2k|        return reader_impl_for_int<CharT>{};
 5844|  17.2k|    }
 5845|  17.2k|    else {
 5846|  17.2k|        return reader_impl_for_monostate<CharT>{};
 5847|  17.2k|    }
 5848|  17.2k|}
_ZN3scn2v34impl22transcode_if_necessaryIcwEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|    706|{
 2993|    706|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|    706|        if (source.stores_allocated_string()) {
 2995|    706|            dest.assign(SCN_MOVE(source.get_allocated_string()));
 2996|    706|        }
 2997|    706|        else {
 2998|    706|            dest.assign(source.view());
 2999|    706|        }
 3000|    706|    }
 3001|    706|    else {
 3002|    706|        return transcode_impl(source.view(), dest);
 3003|    706|    }
 3004|       |
 3005|      0|    return {};
 3006|    706|}
_ZN3scn2v34impl14transcode_implIcwEENS0_10scan_errorENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEERNS4_12basic_stringIT0_NS7_ISB_EENS4_9allocatorISB_EEEE:
 2967|  3.88k|{
 2968|  3.88k|    dst.clear();
 2969|  3.88k|    transcode_valid_to_string(src, dst);
 2970|  3.88k|    return {};
 2971|  3.88k|}
_ZN3scn2v34impl25transcode_valid_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1402|  3.88k|{
 1403|  3.88k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1404|       |
 1405|  3.88k|    SCN_EXPECT(validate_unicode(src));
  ------------------
  |  |  924|  3.88k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.88k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1406|  3.88k|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1406:19): [Folded - Ignored]
  ------------------
 1407|  3.88k|        if constexpr (sizeof(DestCharT) == 2) {
  ------------------
  |  Branch (1407:23): [Folded - Ignored]
  ------------------
 1408|       |            // TODO: Optimize, remove utf32-step, go direct utf8->utf16
 1409|  3.88k|            std::u32string tmp;
 1410|  3.88k|            transcode_valid_to_string_impl_to32(src, tmp);
 1411|  3.88k|            return transcode_to_string_impl_32to16<true>(
 1412|  3.88k|                std::u32string_view{tmp}, dest);
 1413|  3.88k|        }
 1414|  3.88k|        else if constexpr (sizeof(DestCharT) == 4) {
  ------------------
  |  Branch (1414:28): [Folded - Ignored]
  ------------------
 1415|  3.88k|            return transcode_valid_to_string_impl_to32(src, dest);
 1416|  3.88k|        }
 1417|  3.88k|    }
 1418|      0|    else if constexpr (sizeof(SourceCharT) == 2) {
 1419|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1420|      0|            std::u32string tmp;
 1421|      0|            transcode_valid_to_string_impl_to32(src, tmp);
 1422|      0|            return transcode_to_string_impl_32to8<true>(
 1423|      0|                std::u32string_view{tmp}, dest);
 1424|      0|        }
 1425|      0|        else if constexpr (sizeof(DestCharT) == 4) {
 1426|      0|            return trasncode_valid_to_string_impl_to32(src, dest);
 1427|      0|        }
 1428|      0|    }
 1429|      0|    else if constexpr (sizeof(SourceCharT) == 4) {
 1430|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1431|      0|            return transcode_to_string_impl_32to8<true>(src, dest);
 1432|      0|        }
 1433|      0|        else if constexpr (sizeof(DestCharT) == 2) {
 1434|      0|            return transcode_to_string_impl_32to16<true>(src, dest);
 1435|      0|        }
 1436|      0|    }
 1437|       |
 1438|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1439|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1440|      0|}
_ZN3scn2v34impl35transcode_valid_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1276|  3.88k|{
 1277|  3.88k|    static_assert(sizeof(DestCharT) == 4);
 1278|       |
 1279|  3.88k|    auto it = src.begin();
 1280|   528k|    while (it != src.end()) {
  ------------------
  |  Branch (1280:12): [True: 524k, False: 3.88k]
  ------------------
 1281|   524k|        auto res = get_next_code_point_valid(
 1282|   524k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1283|   524k|                                                                 src.end()));
 1284|   524k|        SCN_EXPECT(res.value < detail::invalid_code_point);
  ------------------
  |  |  924|   524k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   524k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1285|   524k|        dest.push_back(res.value);
 1286|   524k|        it = detail::make_string_view_iterator(src, res.iterator);
 1287|   524k|    }
 1288|  3.88k|}
_ZN3scn2v34impl25get_next_code_point_validIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1188|   524k|{
 1189|   524k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   524k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   524k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1190|       |
 1191|   524k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1192|   524k|    SCN_EXPECT(len <= input.size());
  ------------------
  |  |  924|   524k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   524k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1193|       |
 1194|   524k|    return {input.begin() + len,
 1195|   524k|            detail::decode_code_point_exhaustive_valid(input.substr(0, len))};
 1196|   524k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5276|  1.94k|    {
 5277|  1.94k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  1.94k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  1.94k|        return read_impl(range, specs, value);
 5279|  1.94k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5294|  1.94k|    {
 5295|  1.94k|        SCN_CLANG_PUSH
 5296|  1.94k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  1.94k|        switch (m_type) {
 5299|    466|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 466, False: 1.47k]
  ------------------
 5300|    466|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     58|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 58, False: 1.88k]
  ------------------
 5303|     58|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     58|                                                                   value);
 5305|       |
 5306|     36|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 36, False: 1.90k]
  ------------------
 5307|     36|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    690|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 690, False: 1.25k]
  ------------------
 5310|    690|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    690|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      2|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 2, False: 1.94k]
  ------------------
 5315|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      2|                    range, specs.charset_string<SourceCharT>(),
 5317|      2|                    specs.regexp_flags, value);
 5318|       |
 5319|    690|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 690, False: 1.25k]
  ------------------
 5320|    690|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    690|                    range,
 5322|    690|                    get_unescaped_regex_pattern(
 5323|    690|                        specs.charset_string<SourceCharT>()),
 5324|    690|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 1.94k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  1.94k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  1.94k|        }
 5331|       |
 5332|  1.94k|        SCN_CLANG_POP
 5333|  1.94k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4819|    466|    {
 4820|    466|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    466|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4751|    560|{
 4752|    560|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    560|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    560|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 236, False: 324]
  ------------------
 4756|    236|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    236|                                     "Invalid encoding in scanned string");
 4758|    236|    }
 4759|    324|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    324|    static_cast<    \
  |  |  929|    324|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    324|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    324|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 324]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    324|    return SCN_MOVE(result);
  ------------------
  |  |  928|    324|    static_cast<    \
  |  |  929|    324|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    324|}
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4840|     58|    {
 4841|     58|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 34, False: 24]
  ------------------
 4842|     34|            return read_string_impl(
 4843|     34|                range,
 4844|     34|                read_until_code_unit(
 4845|     34|                    range,
 4846|     34|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     34|                        SourceCharT ch) { return ch == until; }),
 4848|     34|                value);
 4849|     34|        }
 4850|     24|        return read_string_impl(
 4851|     24|            range,
 4852|     24|            read_until_code_units(
 4853|     24|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|     24|            value);
 4855|     58|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_LPv0EEEOSL_:
  753|     34|    {
  754|     34|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES18_c:
  743|    782|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    782|              cvref<T> obj = *get<T>(fn);
  745|    782|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    782|                  obj(static_cast<decltype(args)>(args)...);
  747|    782|              }
  748|    782|              else {
  749|    782|                  return obj(static_cast<decltype(args)>(args)...);
  750|    782|              }
  751|    782|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|    782|    {
  684|    782|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    782|            return static_cast<T*>(s.m_cp);
  686|    782|        }
  687|    782|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    782|            return static_cast<T*>(s.m_p);
  689|    782|        }
  690|    782|        else {
  691|    782|            return reinterpret_cast<T*>(s.m_fp);
  692|    782|        }
  693|    782|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlcE_clEc:
 4847|    782|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_LPv0EEEPSL_:
  661|     34|        {
  662|     34|        }
_ZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4946|     36|    {
 4947|     36|        return read_impl(
 4948|     36|            range,
 4949|     36|            [&](const auto& rng) {
 4950|     36|                return read_string_impl(rng, read_all(rng), value);
 4951|     36|            },
 4952|     36|            detail::priority_tag<1>{});
 4953|     36|    }
_ZN3scn2v34impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     36|    {
 4974|     36|        return read_cb(range);
 4975|     36|    }
_ZZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4949|     36|            [&](const auto& rng) {
 4950|     36|                return read_string_impl(rng, read_all(rng), value);
 4951|     36|            },
_ZN3scn2v34impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5047|    690|    {
 5048|    690|        auto it = read_source_impl(range, {specs});
 5049|    690|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    690|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 22, False: 668]
  |  |  ------------------
  ------------------
 5050|     22|            return unexpected(it.error());
 5051|     22|        }
 5052|       |
 5053|    668|        return read_string_impl(range, *it, value);
 5054|    690|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4751|    668|{
 4752|    668|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    668|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    668|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 286, False: 382]
  ------------------
 4756|    286|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    286|                                     "Invalid encoding in scanned string");
 4758|    286|    }
 4759|    382|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    382|    static_cast<    \
  |  |  929|    382|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    382|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    382|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 382]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    382|    return SCN_MOVE(result);
  ------------------
  |  |  928|    382|    static_cast<    \
  |  |  929|    382|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    382|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4890|    692|    {
 4891|    692|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|    692|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    692|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    692|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    692|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 692, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    692|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    692|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    692|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    692|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    692|    }                                                  \
  |  |  |  | 3671|    692|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|      0|        return read_string_impl(range, it, value);
 4893|    692|    }
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  14.3k|    {
 5277|  14.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  14.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  14.3k|        return read_impl(range, specs, value);
 5279|  14.3k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  14.3k|    {
 5295|  14.3k|        SCN_CLANG_PUSH
 5296|  14.3k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  14.3k|        switch (m_type) {
 5299|    298|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 298, False: 14.0k]
  ------------------
 5300|    298|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     46|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 46, False: 14.3k]
  ------------------
 5303|     46|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     46|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 14.3k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  2.03k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 2.03k, False: 12.3k]
  ------------------
 5310|  2.03k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  2.03k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  10.8k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 10.8k, False: 3.55k]
  ------------------
 5315|  10.8k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  10.8k|                    range, specs.charset_string<SourceCharT>(),
 5317|  10.8k|                    specs.regexp_flags, value);
 5318|       |
 5319|  1.17k|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 1.17k, False: 13.2k]
  ------------------
 5320|  1.17k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|  1.17k|                    range,
 5322|  1.17k|                    get_unescaped_regex_pattern(
 5323|  1.17k|                        specs.charset_string<SourceCharT>()),
 5324|  1.17k|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 14.3k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  14.3k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  14.3k|        }
 5331|       |
 5332|  14.3k|        SCN_CLANG_POP
 5333|  14.3k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|  1.04k|    {
 4820|  1.04k|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|  1.04k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|  1.08k|{
 4752|  1.08k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  1.08k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  1.08k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 424, False: 662]
  ------------------
 4756|    424|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    424|                                     "Invalid encoding in scanned string");
 4758|    424|    }
 4759|    662|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    662|    static_cast<    \
  |  |  929|    662|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    662|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    662|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 662]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    662|    return SCN_MOVE(result);
  ------------------
  |  |  928|    662|    static_cast<    \
  |  |  929|    662|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    662|}
_ZN3scn2v34impl22transcode_if_necessaryIcwEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|  3.18k|{
 3012|  3.18k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|  3.18k|        dest.assign(source.view());
 3014|  3.18k|    }
 3015|  3.18k|    else {
 3016|  3.18k|        return transcode_impl(source.view(), dest);
 3017|  3.18k|    }
 3018|       |
 3019|      0|    return {};
 3020|  3.18k|}
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4840|     46|    {
 4841|     46|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 32, False: 14]
  ------------------
 4842|     32|            return read_string_impl(
 4843|     32|                range,
 4844|     32|                read_until_code_unit(
 4845|     32|                    range,
 4846|     32|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     32|                        SourceCharT ch) { return ch == until; }),
 4848|     32|                value);
 4849|     32|        }
 4850|     14|        return read_string_impl(
 4851|     14|            range,
 4852|     14|            read_until_code_units(
 4853|     14|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|     14|            value);
 4855|     46|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_LPv0EEEOSJ_:
  753|     32|    {
  754|     32|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|    454|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    454|              cvref<T> obj = *get<T>(fn);
  745|    454|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    454|                  obj(static_cast<decltype(args)>(args)...);
  747|    454|              }
  748|    454|              else {
  749|    454|                  return obj(static_cast<decltype(args)>(args)...);
  750|    454|              }
  751|    454|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    454|    {
  684|    454|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    454|            return static_cast<T*>(s.m_cp);
  686|    454|        }
  687|    454|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    454|            return static_cast<T*>(s.m_p);
  689|    454|        }
  690|    454|        else {
  691|    454|            return reinterpret_cast<T*>(s.m_fp);
  692|    454|        }
  693|    454|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlcE_clEc:
 4847|    454|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_LPv0EEEPSJ_:
  661|     32|        {
  662|     32|        }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5047|  2.03k|    {
 5048|  2.03k|        auto it = read_source_impl(range, {specs});
 5049|  2.03k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 478, False: 1.55k]
  |  |  ------------------
  ------------------
 5050|    478|            return unexpected(it.error());
 5051|    478|        }
 5052|       |
 5053|  1.55k|        return read_string_impl(range, *it, value);
 5054|  2.03k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4751|  2.83k|{
 4752|  2.83k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  2.83k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  2.83k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 316, False: 2.52k]
  ------------------
 4756|    316|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    316|                                     "Invalid encoding in scanned string");
 4758|    316|    }
 4759|  2.52k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  2.52k|    static_cast<    \
  |  |  929|  2.52k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|  2.52k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.52k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.52k]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|  2.52k|    return SCN_MOVE(result);
  ------------------
  |  |  928|  2.52k|    static_cast<    \
  |  |  929|  2.52k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|  2.52k|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4890|  12.0k|    {
 4891|  12.0k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|  12.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10.7k, False: 1.28k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  10.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  10.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  10.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  10.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  10.7k|    }                                                  \
  |  |  |  | 3671|  12.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|  1.28k|        return read_string_impl(range, it, value);
 4893|  12.0k|    }
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEEDav:
 5808|  17.2k|{
 5809|  17.2k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  17.2k|        return reader_impl_for_bool<CharT>{};
 5811|  17.2k|    }
 5812|  17.2k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  17.2k|        return reader_impl_for_char<CharT>{};
 5814|  17.2k|    }
 5815|  17.2k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  17.2k|        return reader_impl_for_wchar<CharT>{};
 5817|  17.2k|    }
 5818|  17.2k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  17.2k|        return reader_impl_for_code_point<CharT>{};
 5820|  17.2k|    }
 5821|  17.2k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  17.2k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  17.2k|        return reader_impl_for_string<CharT>{};
 5824|  17.2k|    }
 5825|  17.2k|    else if constexpr (std::is_same_v<T, std::string> ||
 5826|  17.2k|                       std::is_same_v<T, std::wstring>) {
 5827|  17.2k|        return reader_impl_for_string<CharT>{};
 5828|  17.2k|    }
 5829|  17.2k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  17.2k|                       std::is_same_v<T, wregex_matches>) {
 5831|  17.2k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  17.2k|    }
 5833|  17.2k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  17.2k|        return reader_impl_for_voidptr<CharT>{};
 5835|  17.2k|    }
 5836|  17.2k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  17.2k|        return reader_impl_for_float<CharT>{};
 5838|  17.2k|    }
 5839|  17.2k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  17.2k|                       !std::is_same_v<T, wchar_t> &&
 5841|  17.2k|                       !std::is_same_v<T, char32_t> &&
 5842|  17.2k|                       !std::is_same_v<T, bool>) {
 5843|  17.2k|        return reader_impl_for_int<CharT>{};
 5844|  17.2k|    }
 5845|  17.2k|    else {
 5846|  17.2k|        return reader_impl_for_monostate<CharT>{};
 5847|  17.2k|    }
 5848|  17.2k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  1.94k|    {
 5277|  1.94k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  1.94k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  1.94k|        return read_impl(range, specs, value);
 5279|  1.94k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  1.94k|    {
 5295|  1.94k|        SCN_CLANG_PUSH
 5296|  1.94k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  1.94k|        switch (m_type) {
 5299|    466|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 466, False: 1.47k]
  ------------------
 5300|    466|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     58|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 58, False: 1.88k]
  ------------------
 5303|     58|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     58|                                                                   value);
 5305|       |
 5306|     36|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 36, False: 1.90k]
  ------------------
 5307|     36|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    690|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 690, False: 1.25k]
  ------------------
 5310|    690|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    690|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      2|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 2, False: 1.94k]
  ------------------
 5315|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      2|                    range, specs.charset_string<SourceCharT>(),
 5317|      2|                    specs.regexp_flags, value);
 5318|       |
 5319|    690|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 690, False: 1.25k]
  ------------------
 5320|    690|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    690|                    range,
 5322|    690|                    get_unescaped_regex_pattern(
 5323|    690|                        specs.charset_string<SourceCharT>()),
 5324|    690|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 1.94k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  1.94k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  1.94k|        }
 5331|       |
 5332|  1.94k|        SCN_CLANG_POP
 5333|  1.94k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4826|    466|    {
 4827|    466|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|    466|                                     value);
 4829|    466|    }
_ZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEE:
 4772|    560|{
 4773|    560|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    560|    auto src = [&]() {
 4776|    560|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    560|            return make_contiguous_buffer(
 4778|    560|                ranges::subrange{range.begin().base(), result.base()});
 4779|    560|        }
 4780|    560|        else {
 4781|    560|            return make_contiguous_buffer(
 4782|    560|                ranges::subrange{range.begin(), result});
 4783|    560|        }
 4784|    560|    }();
 4785|    560|    using src_type = decltype(src);
 4786|       |
 4787|    560|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|    560|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|    560|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|    560|                                     "Cannot read a string_view from "
 4796|    560|                                     "this source range (would require "
 4797|    560|                                     "transcoding)");
 4798|    560|    }
 4799|    560|    else {
 4800|    560|        const auto view = src.view();
 4801|    560|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    560|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 236, False: 324]
  ------------------
 4804|    236|            return unexpected_scan_error(
 4805|    236|                scan_error::invalid_scanned_value,
 4806|    236|                "Invalid encoding in scanned string_view");
 4807|    236|        }
 4808|       |
 4809|    324|        return SCN_MOVE(result);
  ------------------
  |  |  928|    324|    static_cast<    \
  |  |  929|    324|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    560|    }
 4811|    560|}
_ZZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEEENKUlvE_clEv:
 4775|    560|    auto src = [&]() {
 4776|    560|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|    560|            return make_contiguous_buffer(
 4778|    560|                ranges::subrange{range.begin().base(), result.base()});
 4779|    560|        }
 4780|    560|        else {
 4781|    560|            return make_contiguous_buffer(
 4782|    560|                ranges::subrange{range.begin(), result});
 4783|    560|        }
 4784|    560|    }();
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 4862|     58|    {
 4863|     58|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4863:13): [True: 34, False: 24]
  ------------------
 4864|     34|            return read_string_view_impl(
 4865|     34|                range,
 4866|     34|                read_until_code_unit(
 4867|     34|                    range,
 4868|     34|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4869|     34|                        SourceCharT ch) { return ch == until; }),
 4870|     34|                value);
 4871|     34|        }
 4872|     24|        return read_string_view_impl(
 4873|     24|            range,
 4874|     24|            read_until_code_units(
 4875|     24|                range, specs.fill.template get_code_units<SourceCharT>()),
 4876|     24|            value);
 4877|     58|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_S11_LPv0EEEOSL_:
  753|     34|    {
  754|     34|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_S11_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|    782|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    782|              cvref<T> obj = *get<T>(fn);
  745|    782|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    782|                  obj(static_cast<decltype(args)>(args)...);
  747|    782|              }
  748|    782|              else {
  749|    782|                  return obj(static_cast<decltype(args)>(args)...);
  750|    782|              }
  751|    782|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_17basic_string_viewIT0_NSI_11char_traitsISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|    782|    {
  684|    782|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    782|            return static_cast<T*>(s.m_cp);
  686|    782|        }
  687|    782|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    782|            return static_cast<T*>(s.m_p);
  689|    782|        }
  690|    782|        else {
  691|    782|            return reinterpret_cast<T*>(s.m_fp);
  692|    782|        }
  693|    782|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEEENKUlcE_clEc:
 4869|    782|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_LPv0EEEPSL_:
  661|     34|        {
  662|     34|        }
_ZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4958|     36|    {
 4959|     36|        return read_impl(
 4960|     36|            range,
 4961|     36|            [&](const auto& rng) {
 4962|     36|                return read_string_view_impl(rng, read_all(rng), value);
 4963|     36|            },
 4964|     36|            detail::priority_tag<1>{});
 4965|     36|    }
_ZN3scn2v34impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_17basic_string_viewIT0_NSG_11char_traitsISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSX_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     36|    {
 4974|     36|        return read_cb(range);
 4975|     36|    }
_ZZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEEENKUlRKSH_E_clISD_EEDaSU_:
 4961|     36|            [&](const auto& rng) {
 4962|     36|                return read_string_view_impl(rng, read_all(rng), value);
 4963|     36|            },
_ZN3scn2v34impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 5061|    690|    {
 5062|    690|        auto it = read_source_impl(range, {specs});
 5063|    690|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    690|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 22, False: 668]
  |  |  ------------------
  ------------------
 5064|     22|            return unexpected(it.error());
 5065|     22|        }
 5066|       |
 5067|    668|        return read_string_view_impl(range, *it, value);
 5068|    690|    }
_ZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEE:
 4772|    668|{
 4773|    668|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    668|    auto src = [&]() {
 4776|    668|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    668|            return make_contiguous_buffer(
 4778|    668|                ranges::subrange{range.begin().base(), result.base()});
 4779|    668|        }
 4780|    668|        else {
 4781|    668|            return make_contiguous_buffer(
 4782|    668|                ranges::subrange{range.begin(), result});
 4783|    668|        }
 4784|    668|    }();
 4785|    668|    using src_type = decltype(src);
 4786|       |
 4787|    668|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|    668|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|    668|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|    668|                                     "Cannot read a string_view from "
 4796|    668|                                     "this source range (would require "
 4797|    668|                                     "transcoding)");
 4798|    668|    }
 4799|    668|    else {
 4800|    668|        const auto view = src.view();
 4801|    668|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    668|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 286, False: 382]
  ------------------
 4804|    286|            return unexpected_scan_error(
 4805|    286|                scan_error::invalid_scanned_value,
 4806|    286|                "Invalid encoding in scanned string_view");
 4807|    286|        }
 4808|       |
 4809|    382|        return SCN_MOVE(result);
  ------------------
  |  |  928|    382|    static_cast<    \
  |  |  929|    382|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    668|    }
 4811|    668|}
_ZZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEEENKUlvE_clEv:
 4775|    668|    auto src = [&]() {
 4776|    668|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|    668|            return make_contiguous_buffer(
 4778|    668|                ranges::subrange{range.begin().base(), result.base()});
 4779|    668|        }
 4780|    668|        else {
 4781|    668|            return make_contiguous_buffer(
 4782|    668|                ranges::subrange{range.begin(), result});
 4783|    668|        }
 4784|    668|    }();
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSN_IT0_NSO_IST_EEEE:
 4901|    692|    {
 4902|    692|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|    692|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    692|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    692|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    692|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 692, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    692|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    692|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    692|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    692|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    692|    }                                                  \
  |  |  |  | 3671|    692|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4903|      0|        return read_string_view_impl(range, it, value);
 4904|    692|    }
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5276|  14.3k|    {
 5277|  14.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  14.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  14.3k|        return read_impl(range, specs, value);
 5279|  14.3k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5294|  14.3k|    {
 5295|  14.3k|        SCN_CLANG_PUSH
 5296|  14.3k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  14.3k|        switch (m_type) {
 5299|    298|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 298, False: 14.0k]
  ------------------
 5300|    298|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     46|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 46, False: 14.3k]
  ------------------
 5303|     46|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     46|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 14.3k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  2.03k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 2.03k, False: 12.3k]
  ------------------
 5310|  2.03k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  2.03k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  10.8k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 10.8k, False: 3.55k]
  ------------------
 5315|  10.8k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  10.8k|                    range, specs.charset_string<SourceCharT>(),
 5317|  10.8k|                    specs.regexp_flags, value);
 5318|       |
 5319|  1.17k|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 1.17k, False: 13.2k]
  ------------------
 5320|  1.17k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|  1.17k|                    range,
 5322|  1.17k|                    get_unescaped_regex_pattern(
 5323|  1.17k|                        specs.charset_string<SourceCharT>()),
 5324|  1.17k|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 14.3k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  14.3k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  14.3k|        }
 5331|       |
 5332|  14.3k|        SCN_CLANG_POP
 5333|  14.3k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4826|  1.04k|    {
 4827|  1.04k|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|  1.04k|                                     value);
 4829|  1.04k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4772|  1.08k|{
 4773|  1.08k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|  1.08k|    auto src = [&]() {
 4776|  1.08k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|  1.08k|            return make_contiguous_buffer(
 4778|  1.08k|                ranges::subrange{range.begin().base(), result.base()});
 4779|  1.08k|        }
 4780|  1.08k|        else {
 4781|  1.08k|            return make_contiguous_buffer(
 4782|  1.08k|                ranges::subrange{range.begin(), result});
 4783|  1.08k|        }
 4784|  1.08k|    }();
 4785|  1.08k|    using src_type = decltype(src);
 4786|       |
 4787|  1.08k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|  1.08k|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|  1.08k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|  1.08k|                                     "Cannot read a string_view from "
 4796|  1.08k|                                     "this source range (would require "
 4797|  1.08k|                                     "transcoding)");
 4798|  1.08k|    }
 4799|  1.08k|    else {
 4800|  1.08k|        const auto view = src.view();
 4801|  1.08k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|  1.08k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 424, False: 662]
  ------------------
 4804|    424|            return unexpected_scan_error(
 4805|    424|                scan_error::invalid_scanned_value,
 4806|    424|                "Invalid encoding in scanned string_view");
 4807|    424|        }
 4808|       |
 4809|    662|        return SCN_MOVE(result);
  ------------------
  |  |  928|    662|    static_cast<    \
  |  |  929|    662|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|  1.08k|    }
 4811|  1.08k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4775|  1.08k|    auto src = [&]() {
 4776|  1.08k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|  1.08k|            return make_contiguous_buffer(
 4778|  1.08k|                ranges::subrange{range.begin().base(), result.base()});
 4779|  1.08k|        }
 4780|  1.08k|        else {
 4781|  1.08k|            return make_contiguous_buffer(
 4782|  1.08k|                ranges::subrange{range.begin(), result});
 4783|  1.08k|        }
 4784|  1.08k|    }();
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 4862|     46|    {
 4863|     46|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4863:13): [True: 32, False: 14]
  ------------------
 4864|     32|            return read_string_view_impl(
 4865|     32|                range,
 4866|     32|                read_until_code_unit(
 4867|     32|                    range,
 4868|     32|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4869|     32|                        SourceCharT ch) { return ch == until; }),
 4870|     32|                value);
 4871|     32|        }
 4872|     14|        return read_string_view_impl(
 4873|     14|            range,
 4874|     14|            read_until_code_units(
 4875|     14|                range, specs.fill.template get_code_units<SourceCharT>()),
 4876|     14|            value);
 4877|     46|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_SZ_LPv0EEEOSJ_:
  753|     32|    {
  754|     32|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_SZ_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES14_c:
  743|    454|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    454|              cvref<T> obj = *get<T>(fn);
  745|    454|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    454|                  obj(static_cast<decltype(args)>(args)...);
  747|    454|              }
  748|    454|              else {
  749|    454|                  return obj(static_cast<decltype(args)>(args)...);
  750|    454|              }
  751|    454|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_17basic_string_viewIT0_NSG_11char_traitsIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    454|    {
  684|    454|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    454|            return static_cast<T*>(s.m_cp);
  686|    454|        }
  687|    454|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    454|            return static_cast<T*>(s.m_p);
  689|    454|        }
  690|    454|        else {
  691|    454|            return reinterpret_cast<T*>(s.m_fp);
  692|    454|        }
  693|    454|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEEENKUlcE_clEc:
 4869|    454|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_LPv0EEEPSJ_:
  661|     32|        {
  662|     32|        }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5061|  2.03k|    {
 5062|  2.03k|        auto it = read_source_impl(range, {specs});
 5063|  2.03k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 478, False: 1.55k]
  |  |  ------------------
  ------------------
 5064|    478|            return unexpected(it.error());
 5065|    478|        }
 5066|       |
 5067|  1.55k|        return read_string_view_impl(range, *it, value);
 5068|  2.03k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4772|  2.83k|{
 4773|  2.83k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|  2.83k|    auto src = [&]() {
 4776|  2.83k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|  2.83k|            return make_contiguous_buffer(
 4778|  2.83k|                ranges::subrange{range.begin().base(), result.base()});
 4779|  2.83k|        }
 4780|  2.83k|        else {
 4781|  2.83k|            return make_contiguous_buffer(
 4782|  2.83k|                ranges::subrange{range.begin(), result});
 4783|  2.83k|        }
 4784|  2.83k|    }();
 4785|  2.83k|    using src_type = decltype(src);
 4786|       |
 4787|  2.83k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|  2.83k|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|  2.83k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|  2.83k|                                     "Cannot read a string_view from "
 4796|  2.83k|                                     "this source range (would require "
 4797|  2.83k|                                     "transcoding)");
 4798|  2.83k|    }
 4799|  2.83k|    else {
 4800|  2.83k|        const auto view = src.view();
 4801|  2.83k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|  2.83k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 316, False: 2.52k]
  ------------------
 4804|    316|            return unexpected_scan_error(
 4805|    316|                scan_error::invalid_scanned_value,
 4806|    316|                "Invalid encoding in scanned string_view");
 4807|    316|        }
 4808|       |
 4809|  2.52k|        return SCN_MOVE(result);
  ------------------
  |  |  928|  2.52k|    static_cast<    \
  |  |  929|  2.52k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|  2.83k|    }
 4811|  2.83k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4775|  2.83k|    auto src = [&]() {
 4776|  2.83k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|  2.83k|            return make_contiguous_buffer(
 4778|  2.83k|                ranges::subrange{range.begin().base(), result.base()});
 4779|  2.83k|        }
 4780|  2.83k|        else {
 4781|  2.83k|            return make_contiguous_buffer(
 4782|  2.83k|                ranges::subrange{range.begin(), result});
 4783|  2.83k|        }
 4784|  2.83k|    }();
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSL_IT0_NSM_ISR_EEEE:
 4901|  12.0k|    {
 4902|  12.0k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|  12.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10.7k, False: 1.28k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  10.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  10.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  10.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  10.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  10.7k|    }                                                  \
  |  |  |  | 3671|  12.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4903|  1.28k|        return read_string_view_impl(range, it, value);
 4904|  12.0k|    }
_ZN3scn2v34impl16char_reader_baseIwE11check_specsERKNS0_6detail12format_specsE:
 5623|  10.3k|    {
 5624|  10.3k|        reader_error_handler eh{};
 5625|  10.3k|        if constexpr (std::is_same_v<ValueCharT, char32_t>) {
  ------------------
  |  Branch (5625:23): [Folded - Ignored]
  ------------------
 5626|  10.3k|            detail::check_code_point_type_specs(specs, eh);
 5627|  10.3k|        }
 5628|  10.3k|        else {
 5629|  10.3k|            detail::check_char_type_specs(specs, eh);
 5630|  10.3k|        }
 5631|  10.3k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  10.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.67k, False: 674]
  |  |  ------------------
  ------------------
 5632|  9.67k|            return {scan_error::invalid_format_string, eh.m_msg};
 5633|  9.67k|        }
 5634|    674|        return {};
 5635|  10.3k|    }
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|  11.6k|    {
  763|  11.6k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  11.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  11.6k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  2.03k|    {
  754|  2.03k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEwE_clESE_w:
  743|  3.58k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.58k|              cvref<T> obj = *get<T>(fn);
  745|  3.58k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  3.58k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.58k|              }
  748|  3.58k|              else {
  749|  3.58k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.58k|              }
  751|  3.58k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  3.58k|    {
  684|  3.58k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  3.58k|            return static_cast<T*>(s.m_cp);
  686|  3.58k|        }
  687|  3.58k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  3.58k|            return static_cast<T*>(s.m_p);
  689|  3.58k|        }
  690|  3.58k|        else {
  691|  3.58k|            return reinterpret_cast<T*>(s.m_fp);
  692|  3.58k|        }
  693|  3.58k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEELPv0EEEPT_:
  661|  2.03k|        {
  662|  2.03k|        }
_ZNK3scn2v34impl16char_reader_baseIwE19skip_ws_before_readEv:
 5618|  1.95k|    {
 5619|  1.95k|        return false;
 5620|  1.95k|    }
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1779|    140|    {
 1780|    140|        auto stdloc = loc.get<std::locale>();
 1781|    140|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|    140|        grouping = numpunct.grouping();
 1783|    140|        thousands_sep =
 1784|    140|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 140]
  ------------------
 1785|    140|        decimal_point = numpunct.decimal_point();
 1786|    140|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1716|    192|{
 1717|    192|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 192, False: 0]
  ------------------
 1718|    192|        return std::use_facet<Facet>(stdloc);
 1719|    192|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|    192|}
_ZN3scn2v34impl20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2348|  6.58k|{
 2349|  6.58k|    size_t count{0};
 2350|  6.58k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|  6.58k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|  6.58k|    });
 2353|  6.58k|    return count;
 2354|  6.58k|}
_ZN3scn2v34impl19for_each_code_pointIwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_12function_refIFvDiESA_EE:
 1445|  6.58k|{
 1446|       |    // TODO: Could be optimized by being eager
 1447|  6.58k|    auto it = input.begin();
 1448|  14.0k|    while (it != input.end()) {
  ------------------
  |  Branch (1448:12): [True: 7.49k, False: 6.58k]
  ------------------
 1449|  7.49k|        auto res = get_next_code_point(
 1450|  7.49k|            detail::make_string_view_from_iterators<CharT>(it, input.end()));
 1451|  7.49k|        cb(res.value);
 1452|  7.49k|        it = detail::make_string_view_iterator(input, res.iterator);
 1453|  7.49k|    }
 1454|  6.58k|}
_ZN3scn2v34impl19get_next_code_pointIwEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|   656k|{
 1169|   656k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   656k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   656k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|   656k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|   656k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   656k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 656k]
  |  |  ------------------
  ------------------
 1173|      0|        return {get_start_for_next_code_point(input),
 1174|      0|                detail::invalid_code_point};
 1175|      0|    }
 1176|   656k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|   656k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 656k]
  |  |  ------------------
  ------------------
 1177|      0|        return {input.end(), detail::invalid_code_point};
 1178|      0|    }
 1179|       |
 1180|   656k|    return {input.begin() + len,
 1181|   656k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|   656k|}
_ZN3scn2v34impl12function_refIFvDiES3_EC2IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_LPv0EEEOS9_:
  753|  6.58k|    {
  754|  6.58k|    }
_ZZN3scn2v34impl12function_refIFvDiES3_EC1IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_LPv0EEEOS9_ENKUlNS1_12fnref_detail4base7storageEDiE_clESI_Di:
  743|  7.49k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.49k|              cvref<T> obj = *get<T>(fn);
  745|  7.49k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  7.49k|                  obj(static_cast<decltype(args)>(args)...);
  747|  7.49k|              }
  748|  7.49k|              else {
  749|  7.49k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.49k|              }
  751|  7.49k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEUlDiE_EEDaNS3_7storageE:
  683|  7.49k|    {
  684|  7.49k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  7.49k|            return static_cast<T*>(s.m_cp);
  686|  7.49k|        }
  687|  7.49k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  7.49k|            return static_cast<T*>(s.m_p);
  689|  7.49k|        }
  690|  7.49k|        else {
  691|  7.49k|            return reinterpret_cast<T*>(s.m_fp);
  692|  7.49k|        }
  693|  7.49k|    }
_ZZN3scn2v34impl20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEENKUlDiE_clEDi:
 2350|  7.49k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|  7.49k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|  7.49k|    });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_LPv0EEEPS9_:
  661|  6.58k|        {
  662|  6.58k|        }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1581|  2.88k|    {
 1582|  2.88k|        return m_view;
 1583|  2.88k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1571|  3.27k|    ~contiguous_range_factory() = default;
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E14multibyte_leftEv:
 2420|    400|    {
 2421|    400|        return m_multibyte_left;
 2422|    400|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EdeEv:
 2425|  90.0k|    {
 2426|  90.0k|        return *m_current;
 2427|  90.0k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EppEv:
 2434|  60.0k|    {
 2435|  60.0k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  60.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  60.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2436|  60.0k|        _increment_current();
 2437|  60.0k|        return *this;
 2438|  60.0k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E18_increment_currentEv:
 2667|  60.0k|    {
 2668|  60.0k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2668:13): [True: 60.0k, False: 0]
  ------------------
 2669|  60.0k|            auto cplen = _get_cp_length_at_current();
 2670|  60.0k|            m_multibyte_left = cplen - 1;
 2671|  60.0k|            m_count -= _get_width_at_current_cp_start(cplen);
 2672|  60.0k|        }
 2673|      0|        else {
 2674|      0|            --m_multibyte_left;
 2675|      0|        }
 2676|       |
 2677|  60.0k|        ++m_current;
 2678|  60.0k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E25_get_cp_length_at_currentEv:
 2638|  60.0k|    {
 2639|  60.0k|        return static_cast<difference_type>(
 2640|  60.0k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2641|  60.0k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E30_get_width_at_current_cp_startEl:
 2644|  60.0k|    {
 2645|  60.0k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|  60.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 60.0k]
  |  |  ------------------
  ------------------
 2646|      0|            return 0;
 2647|      0|        }
 2648|       |
 2649|  60.0k|        if (cplen == 1) {
  ------------------
  |  Branch (2649:13): [True: 60.0k, False: 0]
  ------------------
 2650|  60.0k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  60.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  60.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2651|  60.0k|            auto cp = static_cast<char32_t>(*m_current);
 2652|  60.0k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2653|  60.0k|        }
 2654|       |
 2655|      0|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2656|      0|                                           cplen);
 2657|      0|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2658|      0|            return 0;
 2659|      0|        }
 2660|       |
 2661|      0|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2662|      0|        return static_cast<difference_type>(
 2663|      0|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2664|      0|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1856|  6.85k|{
 1857|  6.85k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  6.85k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.85k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  6.85k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  6.85k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  6.85k|        if (sz < count) {
  ------------------
  |  Branch (1861:13): [True: 138, False: 6.71k]
  ------------------
 1862|    138|            return unexpected(eof_error::eof);
 1863|    138|        }
 1864|       |
 1865|  6.71k|        return ranges::next(range.begin(), count);
 1866|  6.85k|    }
 1867|  6.85k|    else {
 1868|  6.85k|        auto it = range.begin();
 1869|  6.85k|        if (guaranteed_minimum_size(range) >= count) {
 1870|  6.85k|            return ranges::next(it, count);
 1871|  6.85k|        }
 1872|       |
 1873|  6.85k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1874|  6.85k|            if (it == range.end()) {
 1875|  6.85k|                return unexpected(eof_error::eof);
 1876|  6.85k|            }
 1877|  6.85k|        }
 1878|       |
 1879|  6.85k|        return it;
 1880|  6.85k|    }
 1881|  6.85k|}
_ZN3scn2v34impl27counted_width_iterator_implneIPKwS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2530|  22.2k|    {
 2531|  22.2k|        return !(a == b);
 2532|  22.2k|    }
_ZN3scn2v34impl27counted_width_iterator_impleqIPKwS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2522|  23.2k|    {
 2523|  23.2k|        return a.m_current == b.m_current;
 2524|  23.2k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EdeEv:
 2429|  3.30k|    {
 2430|  3.30k|        return *m_current;
 2431|  3.30k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EEwE8is_validEv:
 1889|  29.3k|    {
 1890|  29.3k|        return !codepoint.empty();
 1891|  29.3k|    }
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EESB_EEEEDaOT_:
 1682|    550|{
 1683|    550|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|    550|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|    550|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|    550|        return string_view_wrapper{SCN_FWD(range)};
 1687|    550|    }
 1688|    550|    else {
 1689|    550|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|    550|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1690|    550|    }
 1691|    550|}
_ZN3scn2v34impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EELPv0EEEOT_:
 1536|    550|    {
 1537|    550|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|    550|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1538|    550|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEvOT_:
 1620|    550|    {
 1621|    550|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|    550|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|    550|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|    550|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|    550|            m_storage.reset();
 1627|    550|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|    550|        }
 1629|    550|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|    550|                                          std::basic_string<CharT>>) {
 1631|    550|            m_storage.emplace(SCN_FWD(range));
 1632|    550|            m_view = string_view_type{*m_storage};
 1633|    550|        }
 1634|    550|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|    550|                                          typename detail::basic_scan_buffer<
 1636|    550|                                              value_t>::forward_iterator> &&
 1637|    550|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|    550|            auto beg_seg = range.begin().contiguous_segment();
 1639|    550|            auto end_seg = range.end().contiguous_segment();
 1640|    550|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|    550|                             detail::to_address(end_seg.end()))) {
 1642|    550|                auto& str = m_storage.emplace();
 1643|    550|                str.reserve(range.end().position() - range.begin().position());
 1644|    550|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|    550|                m_view = string_view_type{str};
 1646|    550|                return;
 1647|    550|            }
 1648|       |
 1649|    550|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|    550|                                                            end_seg.data());
 1651|    550|            m_storage.reset();
 1652|    550|        }
 1653|    550|        else {
 1654|    550|            auto& str = m_storage.emplace();
 1655|    550|            if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1655:27): [Folded - Ignored]
  ------------------
 1656|    550|                str.reserve(range.size());
 1657|    550|            }
 1658|    550|            if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1658:27): [Folded - Ignored]
  ------------------
 1659|    550|                std::copy(ranges::begin(range), ranges::end(range),
 1660|    550|                          std::back_inserter(str));
 1661|    550|            }
 1662|    550|            else {
 1663|    550|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|    550|                     ++it) {
 1665|    550|                    str.push_back(*it);
 1666|    550|                }
 1667|    550|            }
 1668|    550|            m_view = string_view_type{str};
 1669|    550|        }
 1670|    550|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EC2ES5_S5_l:
 2381|  13.7k|    {
 2382|  13.7k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E4baseEv:
 2412|  81.2k|    {
 2413|  81.2k|        return m_current;
 2414|  81.2k|    }
_ZN3scn2v34impl24read_while_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2116|  33.0k|{
 2117|  33.0k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  33.0k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  33.0k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  33.0k|        auto buf = make_contiguous_buffer(range);
 2121|  33.0k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  33.0k|        return ranges::next(range.begin(),
 2123|  33.0k|                            ranges::distance(buf.view().begin(), it));
 2124|  33.0k|    }
 2125|  33.0k|    else {
 2126|  33.0k|        auto it = range.begin();
 2127|       |
 2128|  33.0k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  33.0k|            auto seg = get_contiguous_beginning(range);
 2130|  33.0k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  33.0k|                seg_it != seg.end()) {
 2132|  33.0k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  33.0k|            }
 2134|  33.0k|            ranges::advance(it, seg.size());
 2135|  33.0k|        }
 2136|       |
 2137|  33.0k|        return read_while_code_point(
 2138|  33.0k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  33.0k|    }
 2140|  33.0k|}
_ZN3scn2v34impl21read_while_code_pointINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_NS1_12function_refIFbDiESG_EE:
 2081|  33.0k|{
 2082|  33.0k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  33.0k|}
_ZN3scn2v34impl21read_until_code_pointINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_NS1_12function_refIFbDiESG_EE:
 2060|  33.0k|{
 2061|  33.0k|    auto it = range.begin();
 2062|  45.3k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 44.0k, False: 1.27k]
  ------------------
 2063|  44.0k|        const auto val =
 2064|  44.0k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  44.0k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  44.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 44.0k, False: 0]
  |  |  ------------------
  ------------------
 2066|  44.0k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  44.0k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  44.0k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 31.7k, False: 12.3k]
  ------------------
 2069|  31.7k|                return it;
 2070|  31.7k|            }
 2071|  44.0k|        }
 2072|  12.3k|        it = val.iterator;
 2073|  12.3k|    }
 2074|       |
 2075|  1.27k|    return it;
 2076|  33.0k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|   158k|{
 1899|   158k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   158k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   158k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   158k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   158k|    auto it = range.begin();
 1903|   158k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   158k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   158k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 158k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|   158k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 158k, False: 0]
  ------------------
 1912|   158k|        ++it;
 1913|   158k|        return {it, string_type(1, *range.begin())};
 1914|   158k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|   158k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|   184k|{
  944|   184k|    return is_range_eof(r.begin(), r.end());
  945|   184k|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|   834k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   834k|    {
  937|   834k|        return begin == end;
  938|   834k|    }
  939|   834k|}
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|  1.10k|    {
  190|  1.10k|        i = std::move(bound);
  191|  1.10k|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1889|   158k|    {
 1890|   158k|        return !codepoint.empty();
 1891|   158k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_LPv0EEEOSE_:
  753|  33.0k|    {
  754|  33.0k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_LPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESO_Di:
  743|  44.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  44.0k|              cvref<T> obj = *get<T>(fn);
  745|  44.0k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  44.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  44.0k|              }
  748|  44.0k|              else {
  749|  44.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  44.0k|              }
  751|  44.0k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  683|  44.0k|    {
  684|  44.0k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  44.0k|            return static_cast<T*>(s.m_cp);
  686|  44.0k|        }
  687|  44.0k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  44.0k|            return static_cast<T*>(s.m_p);
  689|  44.0k|        }
  690|  44.0k|        else {
  691|  44.0k|            return reinterpret_cast<T*>(s.m_fp);
  692|  44.0k|        }
  693|  44.0k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2138|  44.0k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_LPv0EEEPSE_:
  661|  33.0k|        {
  662|  33.0k|        }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|  25.7k|{
  950|  25.7k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  25.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 25.7k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  25.7k|    return eof_error::good;
  954|  25.7k|}
_ZNK3scn2v34impl14_take_width_fnclINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEDTtlNS1_15take_width_viewEfp_fp0_EERKT_l:
 2831|  4.94k|    {
 2832|  4.94k|        return take_width_view{r, n};
 2833|  4.94k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2ERKS9_l:
 2800|  4.94k|    {
 2801|  4.94k|    }
_ZN3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEvEC2ERKS9_:
 2713|  4.94k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impl21reader_impl_for_wcharIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERwNSN_10locale_refE:
 5698|    226|    {
 5699|    226|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5699:13): [True: 194, False: 32]
  ------------------
 5700|    226|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5700:13): [True: 0, False: 32]
  ------------------
 5701|    194|            return read_default(range, value, loc);
 5702|    194|        }
 5703|       |
 5704|     32|        reader_impl_for_int<CharT> reader{};
 5705|     32|        using integer_type =
 5706|     32|            std::conditional_t<sizeof(wchar_t) == 2, int16_t, int32_t>;
 5707|     32|        integer_type tmp_value{};
 5708|     32|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5709|     32|        value = static_cast<integer_type>(value);
 5710|     32|        return ret;
 5711|    226|    }
_ZN3scn2v34impl21reader_impl_for_wcharIwE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RwNS0_6detail10locale_refE:
 5682|    194|    {
 5683|    194|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    194|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5684|    194|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (5684:23): [Folded - Ignored]
  ------------------
 5685|    194|            return code_point_reader<wchar_t>{}.read(range, value);
 5686|    194|        }
 5687|    194|        else {
 5688|    194|            return code_unit_reader<wchar_t>{}.read(range, value);
 5689|    194|        }
 5690|    194|    }
_ZN3scn2v34impl16code_unit_readerIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSH_Rw:
 5563|    194|    {
 5564|    194|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3672|    194|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    194|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    194|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    194|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 194]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    194|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    194|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5565|    194|        ch = *range.begin();
 5566|    194|        return it;
 5567|    194|    }
_ZN3scn2v34impl14read_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 1845|  1.66k|{
 1846|  1.66k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.66k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.66k]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|  1.66k|    return ranges::next(range.begin());
 1851|  1.66k|}
_ZN3scn2v34impl9eof_checkINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_9eof_errorET_:
  949|  1.66k|{
  950|  1.66k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.66k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.66k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  1.66k|    return eof_error::good;
  954|  1.66k|}
_ZN3scn2v34impl12is_range_eofINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEbT_:
  943|  1.66k|{
  944|  1.66k|    return is_range_eof(r.begin(), r.end());
  945|  1.66k|}
_ZN3scn2v34impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEbT_T0_:
  927|  31.0k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  31.0k|    {
  937|  31.0k|        return begin == end;
  938|  31.0k|    }
  939|  31.0k|}
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2769|  77.9k|        {
 2770|  77.9k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2770:21): [True: 400, False: 77.5k]
  |  Branch (2770:39): [True: 400, False: 0]
  ------------------
 2771|  77.9k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2771:20): [True: 492, False: 77.0k]
  ------------------
 2772|  77.9k|        }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE3endEv:
 2815|  17.2k|    {
 2816|  17.2k|        return sentinel<true>{m_base.get().end()};
 2817|  17.2k|    }
_ZNK3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEvE3getEv:
 2716|  44.7k|    {
 2717|  44.7k|        return view;
 2718|  44.7k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE8sentinelILb1EEC2ES8_:
 2750|  17.2k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
  295|  1.70k|    {
  296|  1.70k|        ++x;
  297|  1.70k|        return x;
  298|  1.70k|    }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 2809|  13.7k|    {
 2810|  13.7k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2811|  13.7k|                                      m_count};
 2812|  13.7k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEiEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    280|    {
 3539|    280|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    280|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    280|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    280|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    280|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 280]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    280|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    280|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    280|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    280|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 280]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    280|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 280]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    280|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    280|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 258, False: 22]
  |  |  ------------------
  ------------------
 3565|    258|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    258|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    258|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    258|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    258|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 258, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    258|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    258|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    258|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    258|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    258|    }                                                  \
  |  |  |  | 3671|    258|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|     22|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     22|            localized_number_formatting_options<CharT>{loc};
 3586|     22|#endif
 3587|       |
 3588|     22|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 22, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     22|    }                                                  \
  |  |  |  | 3671|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESG_i:
 3325|    726|{
 3326|    726|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3672|    726|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    726|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    726|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    726|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 726]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    726|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    726|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|    726|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|    726|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|    726|        parse_integer_base_prefix(
 3331|    726|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|    726|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 0, False: 726]
  ------------------
 3334|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 0, False: 0]
  |  Branch (3334:13): [True: 0, False: 0]
  ------------------
 3335|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 0, False: 0]
  ------------------
 3336|      0|            digits_begin_it = base_prefix_begin_it;
 3337|      0|        }
 3338|      0|        else {
 3339|      0|            parsed_zero = false;
 3340|      0|        }
 3341|      0|    }
 3342|    726|    else {
 3343|    726|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3343:13): [True: 0, False: 726]
  |  Branch (3343:13): [True: 726, False: 0]
  ------------------
 3344|    726|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3344:13): [True: 726, False: 0]
  ------------------
 3345|    726|            digits_begin_it = base_prefix_begin_it;
 3346|    726|        }
 3347|    726|    }
 3348|       |
 3349|    726|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3349:9): [True: 726, False: 0]
  ------------------
 3350|    726|        sign = sign_type::plus_sign;
 3351|    726|    }
 3352|    726|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3353|    726|        digits_begin_it, parsed_base, sign, parsed_zero};
 3354|    726|}
_ZN3scn2v34impl18parse_numeric_signINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESG_:
 3140|    974|{
 3141|    974|    auto r = read_one_of_code_unit(range, "+-");
 3142|    974|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 974, False: 0]
  ------------------
 3143|    974|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 974, False: 0]
  ------------------
 3144|    974|            return std::pair{range.begin(), sign_type::default_sign};
 3145|    974|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|    974|    }
 3148|       |
 3149|      0|    auto& it = *r;
 3150|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 0, False: 0]
  ------------------
 3151|      0|        return std::pair{it, sign_type::minus_sign};
 3152|      0|    }
 3153|      0|    return std::pair{it, sign_type::plus_sign};
 3154|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2271|    974|{
 2272|    974|    auto it = read_code_unit(range);
 2273|    974|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    974|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 974]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|  1.94k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 1.94k, False: 974]
  ------------------
 2278|  1.94k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 0, False: 1.94k]
  ------------------
 2279|      0|            return *it;
 2280|      0|        }
 2281|  1.94k|    }
 2282|       |
 2283|    974|    return unexpected(parse_error::error);
 2284|    974|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_i:
 3292|    726|{
 3293|    726|    switch (base) {
 3294|      6|        case 2:
  ------------------
  |  Branch (3294:9): [True: 6, False: 720]
  ------------------
 3295|       |            // allow 0b/0B
 3296|      6|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|      6|                    false};
 3298|       |
 3299|     30|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 30, False: 696]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|     30|            bool zero_parsed = false;
 3302|     30|            auto it = apply_opt(
 3303|     30|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|     30|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|    204|        case 16:
  ------------------
  |  Branch (3307:9): [True: 204, False: 522]
  ------------------
 3308|       |            // allow 0x/0X
 3309|    204|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|    204|                    false};
 3311|       |
 3312|     12|        case 0:
  ------------------
  |  Branch (3312:9): [True: 12, False: 714]
  ------------------
 3313|       |            // detect base
 3314|     12|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|    474|        default:
  ------------------
  |  Branch (3316:9): [True: 474, False: 252]
  ------------------
 3317|       |            // no base prefix allowed
 3318|    474|            return {range.begin(), base, false};
 3319|    726|    }
 3320|    726|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENS1_14parse_expectedESB_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEEE4typeEOSN_SP_:
 2290|    240|{
 2291|    240|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 240, False: 0]
  ------------------
 2292|    240|        return range.begin();
 2293|    240|    }
 2294|      0|    return *result;
 2295|    240|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3243|     18|{
 3244|     18|    return read_matching_string_classic_nocase(range, "0b");
 3245|     18|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEE:
 2230|  1.00k|{
 2231|  1.00k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  1.00k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  1.00k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  1.00k|        if (range.size() < str.size()) {
 2236|  1.00k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  1.00k|        }
 2238|  1.00k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  1.00k|            return unexpected(parse_error::error);
 2240|  1.00k|        }
 2241|  1.00k|        return ranges::next(range.begin(), str.size());
 2242|  1.00k|    }
 2243|  1.00k|    else {
 2244|  1.00k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.00k|            if (ch < 'A' || ch > 'Z') {
 2246|  1.00k|                return ch;
 2247|  1.00k|            }
 2248|  1.00k|            return static_cast<char_type>(ch +
 2249|  1.00k|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.00k|        };
 2251|       |
 2252|  1.00k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  1.00k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.00k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.00k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.00k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 82, False: 918]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     82|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     82|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     82|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     82|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     82|    }                                                  \
  |  |  |  | 3671|  1.00k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    918|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|    918|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|    918|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|    918|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|    918|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 918, False: 0]
  |  |  ------------------
  ------------------
 2257|    918|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|    918|                    return ascii_tolower(a) ==
 2259|    918|                           static_cast<detail::char_t<Range>>(b);
 2260|    918|                }))) {
 2261|    918|            return unexpected(parse_error::error);
 2262|    918|        }
 2263|       |
 2264|      0|        return it;
 2265|    918|    }
 2266|  1.00k|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_l:
 1856|  1.00k|{
 1857|  1.00k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  1.00k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.00k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  1.00k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  1.00k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  1.00k|        if (sz < count) {
 1862|  1.00k|            return unexpected(eof_error::eof);
 1863|  1.00k|        }
 1864|       |
 1865|  1.00k|        return ranges::next(range.begin(), count);
 1866|  1.00k|    }
 1867|  1.00k|    else {
 1868|  1.00k|        auto it = range.begin();
 1869|  1.00k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 1.00k]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|  3.39k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 2.48k, False: 918]
  ------------------
 1874|  2.48k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 82, False: 2.39k]
  ------------------
 1875|     82|                return unexpected(eof_error::eof);
 1876|     82|            }
 1877|  2.48k|        }
 1878|       |
 1879|    918|        return it;
 1880|  1.00k|    }
 1881|  1.00k|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEmT_:
 1094|  1.00k|{
 1095|  1.00k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|  1.00k|        return r.size();
 1097|  1.00k|    }
 1098|  1.00k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|  1.00k|                           ranges::const_iterator_t<Range>,
 1100|  1.00k|                           typename detail::basic_scan_buffer<
 1101|  1.00k|                               detail::char_t<Range>>::forward_iterator>) {
 1102|  1.00k|        if constexpr (ranges::common_range<Range>) {
 1103|  1.00k|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|  1.00k|        }
 1105|  1.00k|        else {
 1106|  1.00k|            if (r.begin().stores_parent()) {
 1107|  1.00k|                return static_cast<size_t>(
 1108|  1.00k|                    r.begin().parent()->chars_available() -
 1109|  1.00k|                    r.begin().position());
 1110|  1.00k|            }
 1111|  1.00k|            return r.begin().contiguous_segment().size();
 1112|  1.00k|        }
 1113|  1.00k|    }
 1114|  1.00k|    else {
 1115|  1.00k|        return 0;
 1116|  1.00k|    }
 1117|  1.00k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlwE_clEw:
 2244|    918|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|    918|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 22, False: 896]
  |  Branch (2245:29): [True: 896, False: 0]
  ------------------
 2246|    918|                return ch;
 2247|    918|            }
 2248|      0|            return static_cast<char_type>(ch +
 2249|      0|                                          static_cast<char_type>('a' - 'A'));
 2250|    918|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_Rb:
 3257|     42|{
 3258|     42|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 0, False: 42]
  ------------------
 3259|      0|        return *r;
 3260|      0|    }
 3261|       |
 3262|     42|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 0, False: 42]
  ------------------
 3263|      0|        zero_parsed = true;
 3264|      0|        return *r;
 3265|      0|    }
 3266|       |
 3267|     42|    return unexpected(parse_error::error);
 3268|     42|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NDTcl4implISL_EEE4typeE:
 2145|     42|{
 2146|     42|    auto it = read_code_unit(range);
 2147|     42|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|     42|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 42]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|     42|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|     42|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 0]
  |  |  ------------------
  ------------------
 2152|     42|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|     42|        return unexpected(parse_error::error);
 2154|     42|    }
 2155|       |
 2156|      0|    return *it;
 2157|     42|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 1845|     42|{
 1846|     42|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     42|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 42]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|     42|    return ranges::next(range.begin());
 1851|     42|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_9eof_errorET_:
  949|     42|{
  950|     42|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|     42|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 42]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|     42|    return eof_error::good;
  954|     42|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEbT_:
  943|  29.4k|{
  944|  29.4k|    return is_range_eof(r.begin(), r.end());
  945|  29.4k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3250|    216|{
 3251|    216|    return read_matching_string_classic_nocase(range, "0x");
 3252|    216|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_:
 3273|     12|{
 3274|     12|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 0, False: 12]
  ------------------
 3275|      0|        return {*r, 16, false};
 3276|      0|    }
 3277|     12|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 0, False: 12]
  ------------------
 3278|      0|        return {*r, 2, false};
 3279|      0|    }
 3280|     12|    {
 3281|     12|        bool zero_parsed{false};
 3282|     12|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 0, False: 12]
  ------------------
 3283|      0|            return {*r, 8, zero_parsed};
 3284|      0|        }
 3285|     12|    }
 3286|     12|    return {range.begin(), 10, false};
 3287|     12|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_i:
 3359|    682|{
 3360|    682|    using char_type = detail::char_t<Range>;
 3361|       |
 3362|    682|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (3362:19): [Folded - Ignored]
  ------------------
 3363|    682|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3364|    682|            return unexpected_scan_error(
 3365|    682|                scan_error::invalid_scanned_value,
 3366|    682|                "Failed to parse integer: No digits found");
 3367|    682|        }
 3368|    682|        return range.end();
 3369|    682|    }
 3370|    682|    else {
 3371|    682|        return read_while1_code_unit(range,
 3372|    682|                                     [&](char_type ch) noexcept {
 3373|    682|                                         return char_to_int(ch) < base;
 3374|    682|                                     })
 3375|    682|            .transform_error(map_parse_error_to_scan_error(
 3376|    682|                scan_error::invalid_scanned_value,
 3377|    682|                "Failed to parse integer: No digits found"));
 3378|    682|    }
 3379|    682|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigISU_E8functionEEE:
 1995|    930|{
 1996|    930|    auto it = read_while_code_unit(range, pred);
 1997|    930|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 930, False: 0]
  ------------------
 1998|    930|        return unexpected(parse_error::error);
 1999|    930|    }
 2000|      0|    return it;
 2001|    930|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1975|    930|{
 1976|    930|    return read_until_code_unit(range, std::not_fn(pred));
 1977|    930|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1956|    930|{
 1957|    930|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|    930|        return std::find_if(range.begin(), range.end(), pred);
 1959|    930|    }
 1960|    930|    else {
 1961|    930|        auto first = range.begin();
 1962|    930|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 930, False: 0]
  ------------------
 1963|    930|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 930, False: 0]
  ------------------
 1964|    930|                return first;
 1965|    930|            }
 1966|    930|        }
 1967|      0|        return first;
 1968|    930|    }
 1969|    930|}
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2780|  36.3k|        {
 2781|  36.3k|            return !(y == x);
 2782|  36.3k|        }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_SV_LPv0EEEOSP_:
  753|    682|    {
  754|    682|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_SV_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageEwE_clES10_w:
  743|    682|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    682|              cvref<T> obj = *get<T>(fn);
  745|    682|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    682|                  obj(static_cast<decltype(args)>(args)...);
  747|    682|              }
  748|    682|              else {
  749|    682|                  return obj(static_cast<decltype(args)>(args)...);
  750|    682|              }
  751|    682|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSD_EENS1_15take_width_viewINS9_ISD_SD_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_iEUlwE_EEDaNS3_7storageE:
  683|    682|    {
  684|    682|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    682|            return static_cast<T*>(s.m_cp);
  686|    682|        }
  687|    682|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    682|            return static_cast<T*>(s.m_p);
  689|    682|        }
  690|    682|        else {
  691|    682|            return reinterpret_cast<T*>(s.m_fp);
  692|    682|        }
  693|    682|    }
_ZZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_iENKUlwE_clEw:
 3372|    682|                                     [&](char_type ch) noexcept {
 3373|    682|                                         return char_to_int(ch) < base;
 3374|    682|                                     })
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_LPv0EEEPSP_:
  661|    682|        {
  662|    682|        }
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEENSJ_12basic_stringIT0_NSJ_11char_traitsISS_EENSJ_9allocatorISS_EEEENSR_IcNST_IcEENSV_IcEEEEEEEEESM_iRKNS1_35localized_number_formatting_optionsISS_EE:
 3389|     44|{
 3390|     44|    std::basic_string<CharT> output;
 3391|     44|    std::string thsep_indices;
 3392|     44|    auto it = range.begin();
 3393|     44|    bool digit_matched = false;
 3394|     44|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3394:12): [True: 44, False: 0]
  ------------------
 3395|     44|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3395:13): [True: 0, False: 44]
  ------------------
 3396|      0|            thsep_indices.push_back(
 3397|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3398|      0|        }
 3399|     44|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3399:18): [True: 44, False: 0]
  ------------------
 3400|     44|            break;
 3401|     44|        }
 3402|      0|        else {
 3403|      0|            output.push_back(*it);
 3404|      0|            digit_matched = true;
 3405|      0|        }
 3406|     44|    }
 3407|     44|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     44|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 44, False: 0]
  |  |  ------------------
  ------------------
 3408|     44|        return unexpected_scan_error(
 3409|     44|            scan_error::invalid_scanned_value,
 3410|     44|            "Failed to parse integer: No digits found");
 3411|     44|    }
 3412|      0|    return std::tuple{it, output, thsep_indices};
 3413|     44|}
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E5countEv:
 2416|  78.7k|    {
 2417|  78.7k|        return m_count;
 2418|  78.7k|    }
_ZN3scn2v34impl21reader_impl_for_wcharIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERwNSL_10locale_refE:
 5698|    446|    {
 5699|    446|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5699:13): [True: 428, False: 18]
  ------------------
 5700|    446|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5700:13): [True: 0, False: 18]
  ------------------
 5701|    428|            return read_default(range, value, loc);
 5702|    428|        }
 5703|       |
 5704|     18|        reader_impl_for_int<CharT> reader{};
 5705|     18|        using integer_type =
 5706|     18|            std::conditional_t<sizeof(wchar_t) == 2, int16_t, int32_t>;
 5707|     18|        integer_type tmp_value{};
 5708|     18|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5709|     18|        value = static_cast<integer_type>(value);
 5710|     18|        return ret;
 5711|    446|    }
_ZN3scn2v34impl21reader_impl_for_wcharIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RwNS0_6detail10locale_refE:
 5682|  1.08k|    {
 5683|  1.08k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  1.08k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5684|  1.08k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (5684:23): [Folded - Ignored]
  ------------------
 5685|  1.08k|            return code_point_reader<wchar_t>{}.read(range, value);
 5686|  1.08k|        }
 5687|  1.08k|        else {
 5688|  1.08k|            return code_unit_reader<wchar_t>{}.read(range, value);
 5689|  1.08k|        }
 5690|  1.08k|    }
_ZN3scn2v34impl16code_unit_readerIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_Rw:
 5563|  1.08k|    {
 5564|  1.08k|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3672|  1.08k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.08k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.08k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.08k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.08k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.08k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5565|  1.08k|        ch = *range.begin();
 5566|  1.08k|        return it;
 5567|  1.08k|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|  7.86k|{
 1846|  7.86k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  7.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.86k]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|  7.86k|    return ranges::next(range.begin());
 1851|  7.86k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   425k|    {
  296|   425k|        ++x;
  297|   425k|        return x;
  298|   425k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    496|    {
 3539|    496|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    496|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    496|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    496|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    496|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 496]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    496|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    496|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    496|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    496|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 496]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    496|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 496]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    496|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    496|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 464, False: 32]
  |  |  ------------------
  ------------------
 3565|    464|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    464|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    464|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    464|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    464|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 464]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    464|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    464|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    464|                    parse_integer_digits_without_thsep(
 3567|    464|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    464|                        prefix_result.parsed_base));
 3569|       |
 3570|    464|            auto buf = make_contiguous_buffer(
 3571|    464|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    464|            SCN_TRY(result_it,
  ------------------
  |  | 3672|    464|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    464|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    464|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    464|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 464, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    464|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    464|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    464|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    464|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    464|    }                                                  \
  |  |  |  | 3671|    464|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    464|        }
 3580|       |
 3581|     32|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     32|            localized_number_formatting_options<CharT>{loc};
 3586|     32|#endif
 3587|       |
 3588|     32|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     32|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     32|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     32|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 32, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     32|    }                                                  \
  |  |  |  | 3671|     32|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3325|  3.37k|{
 3326|  3.37k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3672|  3.37k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  3.37k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  3.37k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 3.37k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  3.37k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|  3.37k|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|  3.37k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|  3.37k|        parse_integer_base_prefix(
 3331|  3.37k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|  3.37k|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 0, False: 3.37k]
  ------------------
 3334|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 0, False: 0]
  ------------------
 3335|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 0, False: 0]
  ------------------
 3336|      0|            digits_begin_it = base_prefix_begin_it;
 3337|      0|        }
 3338|      0|        else {
 3339|      0|            parsed_zero = false;
 3340|      0|        }
 3341|      0|    }
 3342|  3.37k|    else {
 3343|  3.37k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3343:13): [True: 0, False: 3.37k]
  ------------------
 3344|  3.37k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3344:13): [True: 3.37k, False: 0]
  ------------------
 3345|  3.37k|            digits_begin_it = base_prefix_begin_it;
 3346|  3.37k|        }
 3347|  3.37k|    }
 3348|       |
 3349|  3.37k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3349:9): [True: 3.37k, False: 0]
  ------------------
 3350|  3.37k|        sign = sign_type::plus_sign;
 3351|  3.37k|    }
 3352|  3.37k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3353|  3.37k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3354|  3.37k|}
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|  4.48k|{
 3141|  4.48k|    auto r = read_one_of_code_unit(range, "+-");
 3142|  4.48k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 4.48k, False: 0]
  ------------------
 3143|  4.48k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 4.48k, False: 0]
  ------------------
 3144|  4.48k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  4.48k|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|  4.48k|    }
 3148|       |
 3149|      0|    auto& it = *r;
 3150|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 0, False: 0]
  ------------------
 3151|      0|        return std::pair{it, sign_type::minus_sign};
 3152|      0|    }
 3153|      0|    return std::pair{it, sign_type::plus_sign};
 3154|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|  4.48k|{
 2272|  4.48k|    auto it = read_code_unit(range);
 2273|  4.48k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  4.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.48k]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|  8.97k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 8.97k, False: 4.48k]
  ------------------
 2278|  8.97k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 0, False: 8.97k]
  ------------------
 2279|      0|            return *it;
 2280|      0|        }
 2281|  8.97k|    }
 2282|       |
 2283|  4.48k|    return unexpected(parse_error::error);
 2284|  4.48k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3292|  3.37k|{
 3293|  3.37k|    switch (base) {
 3294|     12|        case 2:
  ------------------
  |  Branch (3294:9): [True: 12, False: 3.36k]
  ------------------
 3295|       |            // allow 0b/0B
 3296|     12|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|     12|                    false};
 3298|       |
 3299|     10|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 10, False: 3.36k]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|     10|            bool zero_parsed = false;
 3302|     10|            auto it = apply_opt(
 3303|     10|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|     10|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|  1.12k|        case 16:
  ------------------
  |  Branch (3307:9): [True: 1.12k, False: 2.24k]
  ------------------
 3308|       |            // allow 0x/0X
 3309|  1.12k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|  1.12k|                    false};
 3311|       |
 3312|     16|        case 0:
  ------------------
  |  Branch (3312:9): [True: 16, False: 3.35k]
  ------------------
 3313|       |            // detect base
 3314|     16|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|  2.20k|        default:
  ------------------
  |  Branch (3316:9): [True: 2.20k, False: 1.16k]
  ------------------
 3317|       |            // no base prefix allowed
 3318|  2.20k|            return {range.begin(), base, false};
 3319|  3.37k|    }
 3320|  3.37k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2290|  1.15k|{
 2291|  1.15k|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 1.15k, False: 0]
  ------------------
 2292|  1.15k|        return range.begin();
 2293|  1.15k|    }
 2294|      0|    return *result;
 2295|  1.15k|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3243|     28|{
 3244|     28|    return read_matching_string_classic_nocase(range, "0b");
 3245|     28|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  4.53k|{
 2231|  4.53k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  4.53k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  4.53k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  4.53k|        if (range.size() < str.size()) {
 2236|  4.53k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  4.53k|        }
 2238|  4.53k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  4.53k|            return unexpected(parse_error::error);
 2240|  4.53k|        }
 2241|  4.53k|        return ranges::next(range.begin(), str.size());
 2242|  4.53k|    }
 2243|  4.53k|    else {
 2244|  4.53k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  4.53k|            if (ch < 'A' || ch > 'Z') {
 2246|  4.53k|                return ch;
 2247|  4.53k|            }
 2248|  4.53k|            return static_cast<char_type>(ch +
 2249|  4.53k|                                          static_cast<char_type>('a' - 'A'));
 2250|  4.53k|        };
 2251|       |
 2252|  4.53k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  4.53k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  4.53k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  4.53k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.53k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4, False: 4.52k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      4|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      4|    }                                                  \
  |  |  |  | 3671|  4.53k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.52k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  4.52k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  4.52k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  4.52k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  4.52k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.52k, False: 0]
  |  |  ------------------
  ------------------
 2257|  4.52k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  4.52k|                    return ascii_tolower(a) ==
 2259|  4.52k|                           static_cast<detail::char_t<Range>>(b);
 2260|  4.52k|                }))) {
 2261|  4.52k|            return unexpected(parse_error::error);
 2262|  4.52k|        }
 2263|       |
 2264|      0|        return it;
 2265|  4.52k|    }
 2266|  4.53k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2244|  4.52k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  4.52k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 38, False: 4.48k]
  |  Branch (2245:29): [True: 4.48k, False: 0]
  ------------------
 2246|  4.52k|                return ch;
 2247|  4.52k|            }
 2248|      0|            return static_cast<char_type>(ch +
 2249|      0|                                          static_cast<char_type>('a' - 'A'));
 2250|  4.52k|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3257|     26|{
 3258|     26|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 0, False: 26]
  ------------------
 3259|      0|        return *r;
 3260|      0|    }
 3261|       |
 3262|     26|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 0, False: 26]
  ------------------
 3263|      0|        zero_parsed = true;
 3264|      0|        return *r;
 3265|      0|    }
 3266|       |
 3267|     26|    return unexpected(parse_error::error);
 3268|     26|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|  2.29k|{
 2146|  2.29k|    auto it = read_code_unit(range);
 2147|  2.29k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.29k]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|  2.29k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  2.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.29k, False: 0]
  |  |  ------------------
  ------------------
 2152|  2.29k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  2.29k|        return unexpected(parse_error::error);
 2154|  2.29k|    }
 2155|       |
 2156|      0|    return *it;
 2157|  2.29k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3250|  1.14k|{
 3251|  1.14k|    return read_matching_string_classic_nocase(range, "0x");
 3252|  1.14k|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3273|     16|{
 3274|     16|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 0, False: 16]
  ------------------
 3275|      0|        return {*r, 16, false};
 3276|      0|    }
 3277|     16|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 0, False: 16]
  ------------------
 3278|      0|        return {*r, 2, false};
 3279|      0|    }
 3280|     16|    {
 3281|     16|        bool zero_parsed{false};
 3282|     16|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 0, False: 16]
  ------------------
 3283|      0|            return {*r, 8, zero_parsed};
 3284|      0|        }
 3285|     16|    }
 3286|     16|    return {range.begin(), 10, false};
 3287|     16|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3359|  3.30k|{
 3360|  3.30k|    using char_type = detail::char_t<Range>;
 3361|       |
 3362|  3.30k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (3362:19): [Folded - Ignored]
  ------------------
 3363|  3.30k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.30k]
  |  |  ------------------
  ------------------
 3364|      0|            return unexpected_scan_error(
 3365|      0|                scan_error::invalid_scanned_value,
 3366|      0|                "Failed to parse integer: No digits found");
 3367|      0|        }
 3368|  3.30k|        return range.end();
 3369|  3.30k|    }
 3370|  3.30k|    else {
 3371|  3.30k|        return read_while1_code_unit(range,
 3372|  3.30k|                                     [&](char_type ch) noexcept {
 3373|  3.30k|                                         return char_to_int(ch) < base;
 3374|  3.30k|                                     })
 3375|  3.30k|            .transform_error(map_parse_error_to_scan_error(
 3376|  3.30k|                scan_error::invalid_scanned_value,
 3377|  3.30k|                "Failed to parse integer: No digits found"));
 3378|  3.30k|    }
 3379|  3.30k|}
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3389|     64|{
 3390|     64|    std::basic_string<CharT> output;
 3391|     64|    std::string thsep_indices;
 3392|     64|    auto it = range.begin();
 3393|     64|    bool digit_matched = false;
 3394|     64|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3394:12): [True: 64, False: 0]
  ------------------
 3395|     64|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3395:13): [True: 0, False: 64]
  ------------------
 3396|      0|            thsep_indices.push_back(
 3397|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3398|      0|        }
 3399|     64|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3399:18): [True: 64, False: 0]
  ------------------
 3400|     64|            break;
 3401|     64|        }
 3402|      0|        else {
 3403|      0|            output.push_back(*it);
 3404|      0|            digit_matched = true;
 3405|      0|        }
 3406|     64|    }
 3407|     64|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     64|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 64, False: 0]
  |  |  ------------------
  ------------------
 3408|     64|        return unexpected_scan_error(
 3409|     64|            scan_error::invalid_scanned_value,
 3410|     64|            "Failed to parse integer: No digits found");
 3411|     64|    }
 3412|      0|    return std::tuple{it, output, thsep_indices};
 3413|     64|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1682|  17.5k|{
 1683|  17.5k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  17.5k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  17.5k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  17.5k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  17.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  17.5k|    }
 1688|  17.5k|    else {
 1689|  17.5k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  17.5k|    }
 1691|  17.5k|}
_ZN3scn2v34impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_:
 1489|  17.5k|    {
 1490|  17.5k|    }
_ZNK3scn2v34impl19string_view_wrapperIwE4viewEv:
 1502|  20.7k|    {
 1503|  20.7k|        return sv;
 1504|  20.7k|    }
_ZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEb:
 5950|    476|{
 5951|    476|    using char_type = detail::char_t<Range>;
 5952|    476|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5953|       |
 5954|    476|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5954:9): [True: 476, False: 0]
  ------------------
 5955|    476|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5956|    476|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5957|       |
 5958|    476|        if (max_width == 0) {
  ------------------
  |  Branch (5958:13): [True: 412, False: 64]
  ------------------
 5959|    412|            auto it = read_while_code_unit(range, pred);
 5960|       |
 5961|    412|            if (want_skipped_width) {
  ------------------
  |  Branch (5961:17): [True: 42, False: 370]
  ------------------
 5962|     42|                auto prefix_width =
 5963|     42|                    static_cast<std::ptrdiff_t>(
 5964|     42|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5965|     42|                    ranges::distance(range.begin(), it);
 5966|     42|                return result_type{it, prefix_width};
 5967|     42|            }
 5968|    370|            return result_type{it, 0};
 5969|    412|        }
 5970|       |
 5971|     64|        auto max_width_view = take_width(range, max_width);
 5972|     64|        auto w_it = read_while_code_unit(max_width_view, pred);
 5973|       |
 5974|     64|        if (want_skipped_width) {
  ------------------
  |  Branch (5974:13): [True: 64, False: 0]
  ------------------
 5975|     64|            return result_type{w_it.base(), max_width - w_it.count()};
 5976|     64|        }
 5977|      0|        return result_type{w_it.base(), 0};
 5978|     64|    }
 5979|       |
 5980|      0|    const auto fill_chars = fill.template get_code_units<char_type>();
 5981|      0|    if (max_width == 0) {
  ------------------
  |  Branch (5981:9): [True: 0, False: 0]
  ------------------
 5982|      0|        auto it = read_while_code_units(range, fill_chars);
 5983|       |
 5984|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (5984:13): [True: 0, False: 0]
  ------------------
 5985|      0|            auto prefix_width =
 5986|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5987|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5988|      0|            return result_type{it, prefix_width};
 5989|      0|        }
 5990|      0|        return result_type{it, 0};
 5991|      0|    }
 5992|       |
 5993|      0|    auto max_width_view = take_width(range, max_width);
 5994|      0|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5995|       |
 5996|      0|    if (want_skipped_width) {
  ------------------
  |  Branch (5996:9): [True: 0, False: 0]
  ------------------
 5997|      0|        return result_type{w_it.base(), max_width - w_it.count()};
 5998|      0|    }
 5999|      0|    return result_type{w_it.base(), 0};
 6000|      0|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|    614|{
 1976|    614|    return read_until_code_unit(range, std::not_fn(pred));
 1977|    614|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|    950|{
 1957|    950|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|    950|        return std::find_if(range.begin(), range.end(), pred);
 1959|    950|    }
 1960|    950|    else {
 1961|    950|        auto first = range.begin();
 1962|    950|        for (; first != range.end(); ++first) {
 1963|    950|            if (pred(*first)) {
 1964|    950|                return first;
 1965|    950|            }
 1966|    950|        }
 1967|    950|        return first;
 1968|    950|    }
 1969|    950|}
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_SR_LPv0EEEOSH_:
  753|    476|    {
  754|    476|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_SR_LPv0EEEOSH_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|    600|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    600|              cvref<T> obj = *get<T>(fn);
  745|    600|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    600|                  obj(static_cast<decltype(args)>(args)...);
  747|    600|              }
  748|    600|              else {
  749|    600|                  return obj(static_cast<decltype(args)>(args)...);
  750|    600|              }
  751|    600|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRT_EEEElEEEESG_lRKNS0_6detail9fill_typeEbEUlwE_EEDaNS3_7storageE:
  683|    600|    {
  684|    600|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    600|            return static_cast<T*>(s.m_cp);
  686|    600|        }
  687|    600|        else if constexpr (std::is_object_v<T>) {
  688|    600|            return static_cast<T*>(s.m_p);
  689|    600|        }
  690|    600|        else {
  691|    600|            return reinterpret_cast<T*>(s.m_fp);
  692|    600|        }
  693|    600|    }
_ZZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEbENKUlwE_clEw:
 5956|    600|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_LPv0EEEPKSH_:
  666|    476|        {
  667|    476|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1975|     64|{
 1976|     64|    return read_until_code_unit(range, std::not_fn(pred));
 1977|     64|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1956|    178|{
 1957|    178|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|    178|        return std::find_if(range.begin(), range.end(), pred);
 1959|    178|    }
 1960|    178|    else {
 1961|    178|        auto first = range.begin();
 1962|  1.32k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 1.21k, False: 116]
  ------------------
 1963|  1.21k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 62, False: 1.15k]
  ------------------
 1964|     62|                return first;
 1965|     62|            }
 1966|  1.21k|        }
 1967|    116|        return first;
 1968|    178|    }
 1969|    178|}
_ZN3scn2v34impl23skip_classic_whitespaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_b:
 2950|    168|{
 2951|    168|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 0, False: 168]
  ------------------
 2952|      0|        auto it = read_while_classic_space(range);
 2953|      0|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|      0|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|      0|        return it;
 2959|      0|    }
 2960|       |
 2961|    168|    return read_while_classic_space(range);
 2962|    168|}
_ZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2116|    168|{
 2117|    168|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|    168|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|    168|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|    168|        auto buf = make_contiguous_buffer(range);
 2121|    168|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|    168|        return ranges::next(range.begin(),
 2123|    168|                            ranges::distance(buf.view().begin(), it));
 2124|    168|    }
 2125|    168|    else {
 2126|    168|        auto it = range.begin();
 2127|       |
 2128|    168|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|    168|            auto seg = get_contiguous_beginning(range);
 2130|    168|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|    168|                seg_it != seg.end()) {
 2132|    168|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|    168|            }
 2134|    168|            ranges::advance(it, seg.size());
 2135|    168|        }
 2136|       |
 2137|    168|        return read_while_code_point(
 2138|    168|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|    168|    }
 2140|    168|}
_ZN3scn2v34impl21read_while_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2081|    168|{
 2082|    168|    return read_until_code_point(range, std::not_fn(pred));
 2083|    168|}
_ZN3scn2v34impl21read_until_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2060|    168|{
 2061|    168|    auto it = range.begin();
 2062|    168|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 168, False: 0]
  ------------------
 2063|    168|        const auto val =
 2064|    168|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|    168|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|    168|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 168, False: 0]
  |  |  ------------------
  ------------------
 2066|    168|            const auto cp = detail::decode_code_point_exhaustive(
 2067|    168|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|    168|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 168, False: 0]
  ------------------
 2069|    168|                return it;
 2070|    168|            }
 2071|    168|        }
 2072|      0|        it = val.iterator;
 2073|      0|    }
 2074|       |
 2075|      0|    return it;
 2076|    168|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISL_EEE4typeEEESL_:
 1898|  29.3k|{
 1899|  29.3k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  29.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  29.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  29.3k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  29.3k|    auto it = range.begin();
 1903|  29.3k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  29.3k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  29.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 29.3k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|  29.3k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 29.3k, False: 0]
  ------------------
 1912|  29.3k|        ++it;
 1913|  29.3k|        return {it, string_type(1, *range.begin())};
 1914|  29.3k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|  29.3k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_:
  753|    168|    {
  754|    168|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESS_Di:
  743|    168|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    168|              cvref<T> obj = *get<T>(fn);
  745|    168|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    168|                  obj(static_cast<decltype(args)>(args)...);
  747|    168|              }
  748|    168|              else {
  749|    168|                  return obj(static_cast<decltype(args)>(args)...);
  750|    168|              }
  751|    168|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|    168|    {
  684|    168|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    168|            return static_cast<T*>(s.m_cp);
  686|    168|        }
  687|    168|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    168|            return static_cast<T*>(s.m_p);
  689|    168|        }
  690|    168|        else {
  691|    168|            return reinterpret_cast<T*>(s.m_fp);
  692|    168|        }
  693|    168|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2138|    168|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_LPv0EEEPSI_:
  661|    168|        {
  662|    168|        }
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|  10.0k|{
 2951|  10.0k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 8.62k, False: 1.42k]
  ------------------
 2952|  8.62k|        auto it = read_while_classic_space(range);
 2953|  8.62k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  8.62k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  8.62k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.62k]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|  8.62k|        return it;
 2959|  8.62k|    }
 2960|       |
 2961|  1.42k|    return read_while_classic_space(range);
 2962|  10.0k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|  43.1k|{
 2117|  43.1k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  43.1k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  43.1k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  43.1k|        auto buf = make_contiguous_buffer(range);
 2121|  43.1k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  43.1k|        return ranges::next(range.begin(),
 2123|  43.1k|                            ranges::distance(buf.view().begin(), it));
 2124|  43.1k|    }
 2125|  43.1k|    else {
 2126|  43.1k|        auto it = range.begin();
 2127|       |
 2128|  43.1k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  43.1k|            auto seg = get_contiguous_beginning(range);
 2130|  43.1k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  43.1k|                seg_it != seg.end()) {
 2132|  43.1k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  43.1k|            }
 2134|  43.1k|            ranges::advance(it, seg.size());
 2135|  43.1k|        }
 2136|       |
 2137|  43.1k|        return read_while_code_point(
 2138|  43.1k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  43.1k|    }
 2140|  43.1k|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|  43.7k|{
 2082|  43.7k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  43.7k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|  47.2k|{
 2061|  47.2k|    auto it = range.begin();
 2062|   118k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 114k, False: 3.49k]
  ------------------
 2063|   114k|        const auto val =
 2064|   114k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   114k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   114k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 114k, False: 0]
  |  |  ------------------
  ------------------
 2066|   114k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   114k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   114k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 43.7k, False: 71.0k]
  ------------------
 2069|  43.7k|                return it;
 2070|  43.7k|            }
 2071|   114k|        }
 2072|  71.0k|        it = val.iterator;
 2073|  71.0k|    }
 2074|       |
 2075|  3.49k|    return it;
 2076|  47.2k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|  43.1k|    {
  754|  43.1k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|  46.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  46.0k|              cvref<T> obj = *get<T>(fn);
  745|  46.0k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  46.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  46.0k|              }
  748|  46.0k|              else {
  749|  46.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  46.0k|              }
  751|  46.0k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  46.0k|    {
  684|  46.0k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  46.0k|            return static_cast<T*>(s.m_cp);
  686|  46.0k|        }
  687|  46.0k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  46.0k|            return static_cast<T*>(s.m_p);
  689|  46.0k|        }
  690|  46.0k|        else {
  691|  46.0k|            return reinterpret_cast<T*>(s.m_fp);
  692|  46.0k|        }
  693|  46.0k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2138|  46.0k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|  43.1k|        {
  662|  43.1k|        }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|  20.8k|    {
 3040|  20.8k|        reader_error_handler eh{};
 3041|  20.8k|        get_derived().check_specs_impl(specs, eh);
 3042|  20.8k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  20.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.4k, False: 1.45k]
  |  |  ------------------
  ------------------
 3043|  19.4k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  19.4k|        }
 3045|  1.45k|        return {};
 3046|  20.8k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE11get_derivedEv:
 3050|  20.8k|    {
 3051|  20.8k|        return static_cast<Derived&>(*this);
 3052|  20.8k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3484|  20.8k|    {
 3485|  20.8k|        detail::check_int_type_specs(specs, eh);
 3486|  20.8k|    }
_ZNK3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE19skip_ws_before_readEv:
 3034|  2.76k|    {
 3035|  2.76k|        return true;
 3036|  2.76k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEjEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    248|    {
 3539|    248|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    248|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    248|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    248|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    248|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 248]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    248|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    248|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    248|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    248|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 248]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    248|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 248]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    248|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    248|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 226, False: 22]
  |  |  ------------------
  ------------------
 3565|    226|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    226|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    226|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    226|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    226|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 226, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    226|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    226|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    226|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    226|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    226|    }                                                  \
  |  |  |  | 3671|    226|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|     22|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     22|            localized_number_formatting_options<CharT>{loc};
 3586|     22|#endif
 3587|       |
 3588|     22|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 22, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     22|    }                                                  \
  |  |  |  | 3671|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    478|    {
 3539|    478|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    478|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    478|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    478|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    478|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 478]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    478|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    478|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    478|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    478|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 478]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    478|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 478]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    478|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    478|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 446, False: 32]
  |  |  ------------------
  ------------------
 3565|    446|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    446|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    446|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    446|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    446|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 446]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    446|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    446|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    446|                    parse_integer_digits_without_thsep(
 3567|    446|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    446|                        prefix_result.parsed_base));
 3569|       |
 3570|    446|            auto buf = make_contiguous_buffer(
 3571|    446|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    446|            SCN_TRY(result_it,
  ------------------
  |  | 3672|    446|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    446|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    446|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    446|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 446, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    446|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    446|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    446|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    446|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    446|    }                                                  \
  |  |  |  | 3671|    446|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    446|        }
 3580|       |
 3581|     32|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     32|            localized_number_formatting_options<CharT>{loc};
 3586|     32|#endif
 3587|       |
 3588|     32|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     32|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     32|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     32|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 32, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     32|    }                                                  \
  |  |  |  | 3671|     32|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEmEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    198|    {
 3539|    198|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    198|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    198|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    198|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    198|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 198]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    198|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    198|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    198|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    198|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 198]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    198|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 198]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    198|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    198|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 198, False: 0]
  |  |  ------------------
  ------------------
 3565|    198|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    198|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    198|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    198|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    198|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 198, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    198|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    198|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    198|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    198|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    198|    }                                                  \
  |  |  |  | 3671|    198|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEmEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|  1.08k|    {
 3539|  1.08k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|  1.08k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.08k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.08k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.08k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.08k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.08k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|  1.08k|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|  1.08k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 1.08k]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|  1.08k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 1.08k]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|  1.08k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  1.08k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.08k, False: 0]
  |  |  ------------------
  ------------------
 3565|  1.08k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|  1.08k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.08k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.08k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.08k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.08k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.08k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|  1.08k|                    parse_integer_digits_without_thsep(
 3567|  1.08k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|  1.08k|                        prefix_result.parsed_base));
 3569|       |
 3570|  1.08k|            auto buf = make_contiguous_buffer(
 3571|  1.08k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|  1.08k|            SCN_TRY(result_it,
  ------------------
  |  | 3672|  1.08k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.08k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.08k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.08k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.08k|    }                                                  \
  |  |  |  | 3671|  1.08k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|  1.08k|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|  10.4k|    {
 3040|  10.4k|        reader_error_handler eh{};
 3041|  10.4k|        get_derived().check_specs_impl(specs, eh);
 3042|  10.4k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  10.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.72k, False: 712]
  |  |  ------------------
  ------------------
 3043|  9.72k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  9.72k|        }
 3045|    712|        return {};
 3046|  10.4k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3050|  10.4k|    {
 3051|  10.4k|        return static_cast<Derived&>(*this);
 3052|  10.4k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4144|  10.4k|    {
 4145|  10.4k|        detail::check_float_type_specs(specs, eh);
 4146|  10.4k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3034|  1.36k|    {
 3035|  1.36k|        return true;
 3036|  1.36k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4216|    706|    {
 4217|    706|        unsigned options{};
 4218|    706|        if (specs.localized) {
  ------------------
  |  Branch (4218:13): [True: 32, False: 674]
  ------------------
 4219|     32|            options |= float_reader_base::allow_thsep;
 4220|     32|        }
 4221|       |
 4222|    706|        SCN_GCC_COMPAT_PUSH
 4223|    706|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4224|       |
 4225|    706|        switch (specs.type) {
 4226|     16|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4226:13): [True: 16, False: 690]
  ------------------
 4227|     16|                return options | float_reader_base::allow_fixed;
 4228|       |
 4229|     14|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4229:13): [True: 14, False: 692]
  ------------------
 4230|     14|                return options | float_reader_base::allow_scientific;
 4231|       |
 4232|     26|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4232:13): [True: 26, False: 680]
  ------------------
 4233|     26|                return options | float_reader_base::allow_hex;
 4234|       |
 4235|      0|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4235:13): [True: 0, False: 706]
  ------------------
 4236|      0|                return options | float_reader_base::allow_scientific |
 4237|      0|                       float_reader_base::allow_fixed;
 4238|       |
 4239|    650|            case detail::presentation_type::none:
  ------------------
  |  Branch (4239:13): [True: 650, False: 56]
  ------------------
 4240|    650|                return options | float_reader_base::allow_scientific |
 4241|    650|                       float_reader_base::allow_fixed |
 4242|    650|                       float_reader_base::allow_hex;
 4243|       |
 4244|      0|            default:
  ------------------
  |  Branch (4244:13): [True: 0, False: 706]
  ------------------
 4245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4246|    706|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4247|    706|        }
 4248|       |
 4249|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4250|    706|    }
_ZN3scn2v34impl12float_readerIwEC2Ej:
 3659|    706|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2Ev:
 1770|  1.36k|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIwEC2Ev:
 1531|  2.72k|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIwE17handle_separatorsEv:
 4056|  1.10k|    {
 4057|  1.10k|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4057:13): [True: 1.10k, False: 0]
  ------------------
 4058|  1.10k|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4058:13): [True: 1.10k, False: 0]
  ------------------
 4059|  1.10k|            return;
 4060|  1.10k|        }
 4061|       |
 4062|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4063|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4063:13): [True: 0, False: 0]
  ------------------
 4064|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4064:27): [True: 0, False: 0]
  ------------------
 4065|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4065:21): [True: 0, False: 0]
  ------------------
 4066|      0|                    ch = CharT{'.'};
 4067|      0|                }
 4068|      0|            }
 4069|      0|        }
 4070|       |
 4071|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4071:13): [True: 0, False: 0]
  ------------------
 4072|      0|            return;
 4073|      0|        }
 4074|       |
 4075|      0|        auto first =
 4076|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4077|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4077:13): [True: 0, False: 0]
  ------------------
 4078|      0|            return;
 4079|      0|        }
 4080|       |
 4081|      0|        m_thsep_indices.push_back(
 4082|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4083|       |
 4084|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4084:31): [True: 0, False: 0]
  ------------------
 4085|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4085:17): [True: 0, False: 0]
  ------------------
 4086|      0|                *first++ = std::move(*it);
 4087|      0|            }
 4088|      0|            else {
 4089|      0|                m_thsep_indices.push_back(
 4090|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4091|      0|            }
 4092|      0|        }
 4093|       |
 4094|      0|        str.erase(first, str.end());
 4095|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1586|    248|    {
 1587|    248|        return m_storage.has_value();
 1588|    248|    }
_ZNR3scn2v34impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1591|    124|    {
 1592|    124|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|    124|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    124|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|    124|        return *m_storage;
 1594|    124|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EclESC_SJ_SL_:
  762|    248|    {
  763|    248|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    248|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    248|    }
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3678|     22|    {
 3679|     22|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|     22|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|     22|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 22]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|     22|        return read_source_impl(range);
 3685|     22|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_:
 3704|    248|    {
 3705|    248|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|    248|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    248|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    248|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    248|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 248]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    248|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    248|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|    248|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|    248|        auto it = sign_result.first;
 3708|    248|        m_sign = sign_result.second;
 3709|       |
 3710|    248|        auto digits_begin = it;
 3711|    248|        auto r = ranges::subrange{it, range.end()};
 3712|    248|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|    248|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|    248|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3715|    248|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|    248|                SCN_TRY_ASSIGN(
 3717|    248|                    it,
 3718|    248|                    do_read_source_impl(
 3719|    248|                        r,
 3720|    248|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|    248|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|    248|            }
 3723|    248|            else {
 3724|    248|                auto cb = [&](const auto& rr)
 3725|    248|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|    248|                    auto res = read_all(rr);
 3727|    248|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|    248|                        return unexpected_scan_error(
 3729|    248|                            scan_error::invalid_scanned_value,
 3730|    248|                            "Invalid float value");
 3731|    248|                    }
 3732|    248|                    return res;
 3733|    248|                };
 3734|    248|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3735|    248|            }
 3736|    248|        }
 3737|    248|        else {
 3738|    248|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|    248|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    248|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    248|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 248, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    248|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    248|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    248|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    248|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    248|    }                                                  \
  |  | 3671|    248|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    248|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3739|      0|                it,
 3740|      0|                do_read_source_impl(
 3741|      0|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|      0|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|      0|        }
 3744|       |
 3745|      0|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|      0|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 0, False: 0]
  |  Branch (3747:48): [True: 0, False: 0]
  ------------------
 3748|      0|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 0, False: 0]
  ------------------
 3749|      0|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 0, False: 0]
  ------------------
 3750|      0|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|      0|        }
 3752|       |
 3753|      0|        handle_separators();
 3754|       |
 3755|      0|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 0]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|      0|        return it;
 3768|      0|    }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEZNS3_16read_source_implISG_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_EUlRKSO_E_ZNSK_ISG_EEST_SO_EUlSV_E0_EEST_SO_OT0_OT1_:
 3999|    248|    {
 4000|    248|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|    248|        const bool allowed_nonhex =
 4002|    248|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|    248|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|    248|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 248, False: 0]
  |  Branch (4005:45): [True: 0, False: 248]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|    248|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 248]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|    248|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 248, False: 0]
  |  Branch (4014:45): [True: 0, False: 248]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|    248|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 248]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|    248|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 228, False: 20]
  |  Branch (4021:28): [True: 12, False: 216]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|     12|            auto it = range.begin();
 4025|       |
 4026|     12|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 0, False: 12]
  ------------------
 4027|      0|                m_kind = float_kind::hex_with_prefix;
 4028|      0|                it = *r;
 4029|      0|            }
 4030|     12|            else {
 4031|     12|                m_kind = float_kind::hex_without_prefix;
 4032|     12|            }
 4033|       |
 4034|     12|            return read_hex(ranges::subrange{it, range.end()});
 4035|     12|        }
 4036|    236|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 20, False: 216]
  |  Branch (4036:29): [True: 20, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|     20|            m_kind = float_kind::generic;
 4040|     20|            return read_regular_float(range);
 4041|     20|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|    216|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    216|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 216]
  |  |  ------------------
  ------------------
 4047|      0|            m_kind = float_kind::hex_with_prefix;
 4048|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4049|      0|        }
 4050|       |
 4051|    216|        m_kind = float_kind::generic;
 4052|    216|        return read_regular(range);
 4053|    216|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3810|    248|    {
 3811|    248|        auto it = range.begin();
 3812|    248|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 248, False: 0]
  ------------------
 3813|    248|            return unexpected(r.error());
 3814|    248|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3833|    248|    {
 3834|    248|        auto it = range.begin();
 3835|    248|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 248, False: 0]
  ------------------
 3836|    248|            return r.transform_error(map_parse_error_to_scan_error(
 3837|    248|                scan_error::invalid_scanned_value,
 3838|    248|                "Invalid floating-point NaN value"));
 3839|    248|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3803|    228|    {
 3804|    228|        return read_matching_string_classic_nocase(range, "0x");
 3805|    228|    }
_ZN3scn2v34impl12float_readerIwE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3903|     12|    {
 3904|     12|        auto it = range.begin();
 3905|       |
 3906|     12|        std::ptrdiff_t digits_count = 0;
 3907|     12|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3908|     12|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 0]
  |  |  ------------------
  ------------------
 3909|     12|            return r.transform_error(map_parse_error_to_scan_error(
 3910|     12|                scan_error::invalid_scanned_value,
 3911|     12|                "Invalid hexadecimal floating-point value"));
 3912|     12|        }
 3913|      0|        else {
 3914|      0|            digits_count += ranges::distance(it, *r);
 3915|      0|            it = *r;
 3916|      0|        }
 3917|       |
 3918|      0|        m_integral_part_length = digits_count;
 3919|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3919:18): [True: 0, False: 0]
  ------------------
 3920|      0|                                             m_locale_options.decimal_point)) {
 3921|      0|            it = *r;
 3922|      0|        }
 3923|       |
 3924|      0|        if (auto r =
  ------------------
  |  Branch (3924:18): [True: 0, False: 0]
  ------------------
 3925|      0|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3926|      0|            digits_count += ranges::distance(it, *r);
 3927|      0|            it = *r;
 3928|      0|        }
 3929|       |
 3930|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3931|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3932|      0|                                         "No significand digits in hexfloat");
 3933|      0|        }
 3934|       |
 3935|      0|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3936|       |
 3937|      0|        return it;
 3938|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3788|     12|    {
 3789|     12|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12]
  |  |  |  Branch (859:45): [True: 0, False: 12]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3790|     12|                         thsep_allowed)) {
 3791|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3792|      0|                return char_to_int(ch) < 16 ||
 3793|      0|                       ch == m_locale_options.thousands_sep;
 3794|      0|            });
 3795|      0|        }
 3796|       |
 3797|     12|        return read_while1_code_unit(
 3798|     12|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3799|     12|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_LPv0EEEOSR_:
  753|     12|    {
  754|     12|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEwE_clES12_w:
  743|     12|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     12|              cvref<T> obj = *get<T>(fn);
  745|     12|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|     12|                  obj(static_cast<decltype(args)>(args)...);
  747|     12|              }
  748|     12|              else {
  749|     12|                  return obj(static_cast<decltype(args)>(args)...);
  750|     12|              }
  751|     12|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlwE0_EEDaNS3_7storageE:
  683|     12|    {
  684|     12|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|     12|            return static_cast<T*>(s.m_cp);
  686|     12|        }
  687|     12|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|     12|            return static_cast<T*>(s.m_p);
  689|     12|        }
  690|     12|        else {
  691|     12|            return reinterpret_cast<T*>(s.m_fp);
  692|     12|        }
  693|     12|    }
_ZZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlwE0_clEw:
 3798|     12|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_LPv0EEEPSR_:
  661|     12|        {
  662|     12|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3943|    236|    {
 3944|    236|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|    236|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 228, False: 8]
  |  Branch (3945:50): [True: 12, False: 216]
  ------------------
 3946|       |
 3947|    236|        auto it = ranges::begin(range);
 3948|    236|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|    236|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|    236|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    236|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 236, False: 0]
  |  |  ------------------
  ------------------
 3952|    236|            return r.transform_error(
 3953|    236|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|    236|                                              "Invalid floating-point value"));
 3955|    236|        }
 3956|      0|        else {
 3957|      0|            digits_count += ranges::distance(it, *r);
 3958|      0|            it = *r;
 3959|      0|        }
 3960|       |
 3961|      0|        m_integral_part_length = digits_count;
 3962|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 0, False: 0]
  ------------------
 3963|      0|                                             m_locale_options.decimal_point)) {
 3964|      0|            it = *r;
 3965|      0|        }
 3966|       |
 3967|      0|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 0]
  ------------------
 3968|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|      0|        auto beg_exp_it = it;
 3979|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 0, False: 0]
  ------------------
 3980|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|      0|        }
 3982|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 0, False: 0]
  |  Branch (3982:29): [True: 0, False: 0]
  ------------------
 3983|      0|            return unexpected_scan_error(
 3984|      0|                scan_error::invalid_scanned_value,
 3985|      0|                "No exponent given to scientific float");
 3986|      0|        }
 3987|       |
 3988|      0|        m_kind =
 3989|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 0, False: 0]
  ------------------
 3990|       |
 3991|      0|        return it;
 3992|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3773|    236|    {
 3774|    236|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|    236|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 236]
  |  |  |  Branch (859:45): [True: 0, False: 236]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|    236|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|    236|        return read_while1_code_unit(
 3783|    236|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|    236|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_LPv0EEEOSR_:
  753|    236|    {
  754|    236|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEwE_clES12_w:
  743|    236|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    236|              cvref<T> obj = *get<T>(fn);
  745|    236|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    236|                  obj(static_cast<decltype(args)>(args)...);
  747|    236|              }
  748|    236|              else {
  749|    236|                  return obj(static_cast<decltype(args)>(args)...);
  750|    236|              }
  751|    236|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlwE0_EEDaNS3_7storageE:
  683|    236|    {
  684|    236|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    236|            return static_cast<T*>(s.m_cp);
  686|    236|        }
  687|    236|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    236|            return static_cast<T*>(s.m_p);
  689|    236|        }
  690|    236|        else {
  691|    236|            return reinterpret_cast<T*>(s.m_fp);
  692|    236|        }
  693|    236|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlwE0_clEw:
 3783|    236|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_LPv0EEEPSR_:
  661|    236|        {
  662|    236|        }
_ZN3scn2v34impl12float_readerIwE11read_sourceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3664|    226|    {
 3665|    226|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|    226|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 226]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|    226|        return read_source_impl(range);
 3671|    226|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|  1.11k|    {
  763|  1.11k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  1.11k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.11k|    }
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3678|     10|    {
 3679|     10|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|     10|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|     10|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 10]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|     10|        return read_source_impl(range);
 3685|     10|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3704|  1.11k|    {
 3705|  1.11k|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|  1.11k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.11k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.11k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.11k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.11k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.11k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|  1.11k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|  1.11k|        auto it = sign_result.first;
 3708|  1.11k|        m_sign = sign_result.second;
 3709|       |
 3710|  1.11k|        auto digits_begin = it;
 3711|  1.11k|        auto r = ranges::subrange{it, range.end()};
 3712|  1.11k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|  1.11k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|  1.11k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  2.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.11k]
  |  |  |  Branch (859:45): [True: 0, False: 1.11k]
  |  |  |  Branch (859:45): [True: 0, False: 1.11k]
  |  |  ------------------
  ------------------
 3715|  1.11k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|      0|    }                                                  \
  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3717|      0|                    it,
 3718|      0|                    do_read_source_impl(
 3719|      0|                        r,
 3720|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|      0|            }
 3723|  1.11k|            else {
 3724|  1.11k|                auto cb = [&](const auto& rr)
 3725|  1.11k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|  1.11k|                    auto res = read_all(rr);
 3727|  1.11k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|  1.11k|                        return unexpected_scan_error(
 3729|  1.11k|                            scan_error::invalid_scanned_value,
 3730|  1.11k|                            "Invalid float value");
 3731|  1.11k|                    }
 3732|  1.11k|                    return res;
 3733|  1.11k|                };
 3734|  1.11k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3667|  1.11k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  1.11k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  1.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 10, False: 1.10k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|     10|    }                                                  \
  |  | 3671|  1.11k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  1.11k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3735|  1.10k|            }
 3736|  1.11k|        }
 3737|  1.10k|        else {
 3738|  1.10k|            SCN_TRY_ASSIGN(
 3739|  1.10k|                it,
 3740|  1.10k|                do_read_source_impl(
 3741|  1.10k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|  1.10k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|  1.10k|        }
 3744|       |
 3745|  1.10k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.10k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.10k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|  1.10k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 1.10k, False: 0]
  |  Branch (3747:48): [True: 1.10k, False: 0]
  ------------------
 3748|  1.10k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 1.10k, False: 0]
  ------------------
 3749|  1.10k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 1.10k, False: 0]
  ------------------
 3750|  1.10k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|  1.10k|        }
 3752|       |
 3753|  1.10k|        handle_separators();
 3754|       |
 3755|  1.10k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 1.10k]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|  1.10k|        return it;
 3768|  1.10k|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3810|  1.11k|    {
 3811|  1.11k|        auto it = range.begin();
 3812|  1.11k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 1.11k, False: 0]
  ------------------
 3813|  1.11k|            return unexpected(r.error());
 3814|  1.11k|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|  1.11k|    {
 3834|  1.11k|        auto it = range.begin();
 3835|  1.11k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 1.11k, False: 0]
  ------------------
 3836|  1.11k|            return r.transform_error(map_parse_error_to_scan_error(
 3837|  1.11k|                scan_error::invalid_scanned_value,
 3838|  1.11k|                "Invalid floating-point NaN value"));
 3839|  1.11k|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3803|  1.10k|    {
 3804|  1.10k|        return read_matching_string_classic_nocase(range, "0x");
 3805|  1.10k|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|     10|{
 1996|     10|    auto it = read_while_code_unit(range, pred);
 1997|     10|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 10, False: 0]
  ------------------
 1998|     10|        return unexpected(parse_error::error);
 1999|     10|    }
 2000|      0|    return it;
 2001|     10|}
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3943|     10|    {
 3944|     10|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|     10|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 2, False: 8]
  |  Branch (3945:50): [True: 2, False: 0]
  ------------------
 3946|       |
 3947|     10|        auto it = ranges::begin(range);
 3948|     10|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|     10|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|     10|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10, False: 0]
  |  |  ------------------
  ------------------
 3952|     10|            return r.transform_error(
 3953|     10|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|     10|                                              "Invalid floating-point value"));
 3955|     10|        }
 3956|      0|        else {
 3957|      0|            digits_count += ranges::distance(it, *r);
 3958|      0|            it = *r;
 3959|      0|        }
 3960|       |
 3961|      0|        m_integral_part_length = digits_count;
 3962|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 0, False: 0]
  ------------------
 3963|      0|                                             m_locale_options.decimal_point)) {
 3964|      0|            it = *r;
 3965|      0|        }
 3966|       |
 3967|      0|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 0]
  ------------------
 3968|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|      0|        auto beg_exp_it = it;
 3979|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 0, False: 0]
  ------------------
 3980|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|      0|        }
 3982|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 0, False: 0]
  |  Branch (3982:29): [True: 0, False: 0]
  ------------------
 3983|      0|            return unexpected_scan_error(
 3984|      0|                scan_error::invalid_scanned_value,
 3985|      0|                "No exponent given to scientific float");
 3986|      0|        }
 3987|       |
 3988|      0|        m_kind =
 3989|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 0, False: 0]
  ------------------
 3990|       |
 3991|      0|        return it;
 3992|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3773|     10|    {
 3774|     10|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 10]
  |  |  |  Branch (859:45): [True: 0, False: 10]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|     10|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|     10|        return read_while1_code_unit(
 3783|     10|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|     10|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_:
  753|     10|    {
  754|     10|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clESU_w:
  743|     10|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     10|              cvref<T> obj = *get<T>(fn);
  745|     10|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|     10|                  obj(static_cast<decltype(args)>(args)...);
  747|     10|              }
  748|     10|              else {
  749|     10|                  return obj(static_cast<decltype(args)>(args)...);
  750|     10|              }
  751|     10|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  683|     10|    {
  684|     10|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|     10|            return static_cast<T*>(s.m_cp);
  686|     10|        }
  687|     10|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|     10|            return static_cast<T*>(s.m_p);
  689|     10|        }
  690|     10|        else {
  691|     10|            return reinterpret_cast<T*>(s.m_fp);
  692|     10|        }
  693|     10|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3783|     10|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_LPv0EEEPSJ_:
  661|     10|        {
  662|     10|        }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3999|  1.11k|    {
 4000|  1.11k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|  1.11k|        const bool allowed_nonhex =
 4002|  1.11k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|  1.11k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|  1.11k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 1.11k, False: 0]
  |  Branch (4005:45): [True: 0, False: 1.11k]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|  1.11k|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 1.11k]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|  1.11k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 1.11k, False: 0]
  |  Branch (4014:45): [True: 0, False: 1.11k]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|  1.11k|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 1.11k]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|  1.11k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 1.10k, False: 10]
  |  Branch (4021:28): [True: 14, False: 1.09k]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|     14|            auto it = range.begin();
 4025|       |
 4026|     14|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 0, False: 14]
  ------------------
 4027|      0|                m_kind = float_kind::hex_with_prefix;
 4028|      0|                it = *r;
 4029|      0|            }
 4030|     14|            else {
 4031|     14|                m_kind = float_kind::hex_without_prefix;
 4032|     14|            }
 4033|       |
 4034|     14|            return read_hex(ranges::subrange{it, range.end()});
 4035|     14|        }
 4036|  1.10k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 10, False: 1.09k]
  |  Branch (4036:29): [True: 10, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|     10|            m_kind = float_kind::generic;
 4040|     10|            return read_regular_float(range);
 4041|     10|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|  1.09k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|  1.09k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.09k]
  |  |  ------------------
  ------------------
 4047|      0|            m_kind = float_kind::hex_with_prefix;
 4048|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4049|      0|        }
 4050|       |
 4051|  1.09k|        m_kind = float_kind::generic;
 4052|  1.09k|        return read_regular(range);
 4053|  1.09k|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3725|  1.10k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|  1.10k|                    auto res = read_all(rr);
 3727|  1.10k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|  1.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.10k]
  |  |  ------------------
  ------------------
 3728|      0|                        return unexpected_scan_error(
 3729|      0|                            scan_error::invalid_scanned_value,
 3730|      0|                            "Invalid float value");
 3731|      0|                    }
 3732|  1.10k|                    return res;
 3733|  1.10k|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|  1.10k|{
 1839|  1.10k|    return ranges::next(range.begin(), range.end());
 1840|  1.10k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|  1.10k|    {
  313|  1.10k|        ranges::advance(x, bound);
  314|  1.10k|        return x;
  315|  1.10k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|  1.10k|    {
  275|  1.10k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|  1.10k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEvOT_:
 1576|  1.10k|    {
 1577|  1.10k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  1.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  1.10k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1620|  1.10k|    {
 1621|  1.10k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  1.10k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  1.10k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  1.10k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  1.10k|            m_storage.reset();
 1627|  1.10k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  1.10k|        }
 1629|  1.10k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|  1.10k|                                          std::basic_string<CharT>>) {
 1631|  1.10k|            m_storage.emplace(SCN_FWD(range));
 1632|  1.10k|            m_view = string_view_type{*m_storage};
 1633|  1.10k|        }
 1634|  1.10k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|  1.10k|                                          typename detail::basic_scan_buffer<
 1636|  1.10k|                                              value_t>::forward_iterator> &&
 1637|  1.10k|                           ranges::common_range<Range>) {
 1638|  1.10k|            auto beg_seg = range.begin().contiguous_segment();
 1639|  1.10k|            auto end_seg = range.end().contiguous_segment();
 1640|  1.10k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|  1.10k|                             detail::to_address(end_seg.end()))) {
 1642|  1.10k|                auto& str = m_storage.emplace();
 1643|  1.10k|                str.reserve(range.end().position() - range.begin().position());
 1644|  1.10k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  1.10k|                m_view = string_view_type{str};
 1646|  1.10k|                return;
 1647|  1.10k|            }
 1648|       |
 1649|  1.10k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  1.10k|                                                            end_seg.data());
 1651|  1.10k|            m_storage.reset();
 1652|  1.10k|        }
 1653|  1.10k|        else {
 1654|  1.10k|            auto& str = m_storage.emplace();
 1655|  1.10k|            if constexpr (ranges::sized_range<Range>) {
 1656|  1.10k|                str.reserve(range.size());
 1657|  1.10k|            }
 1658|  1.10k|            if constexpr (ranges::common_range<Range>) {
 1659|  1.10k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  1.10k|                          std::back_inserter(str));
 1661|  1.10k|            }
 1662|  1.10k|            else {
 1663|  1.10k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  1.10k|                     ++it) {
 1665|  1.10k|                    str.push_back(*it);
 1666|  1.10k|                }
 1667|  1.10k|            }
 1668|  1.10k|            m_view = string_view_type{str};
 1669|  1.10k|        }
 1670|  1.10k|    }
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3664|  1.10k|    {
 3665|  1.10k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|  1.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.10k]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|  1.10k|        return read_source_impl(range);
 3671|  1.10k|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3690|  1.10k|    {
 3691|  1.10k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.10k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.10k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|  1.10k|        const std::ptrdiff_t sign_len =
 3694|  1.10k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 0, False: 1.10k]
  ------------------
 3695|       |
 3696|  1.10k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|  1.10k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.10k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.10k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.10k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.10k|    }                                                  \
  |  |  |  | 3671|  1.10k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|      0|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|  1.10k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 4169|    248|    {
 4170|    248|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|    248|#if !SCN_DISABLE_LOCALE
 4173|    248|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 22, False: 226]
  ------------------
 4174|     22|            return read_impl<Range>(
 4175|     22|                range, rd,
 4176|     22|                [](float_reader<CharT>& r, auto&&... args) {
 4177|     22|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|     22|                },
 4179|     22|                value, loc);
 4180|     22|        }
 4181|    226|#endif
 4182|       |
 4183|    226|        return read_impl<Range>(
 4184|    226|            range, rd,
 4185|    226|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    226|                return r.read_source(SCN_FWD(args)...);
 4187|    226|            },
 4188|    226|            value);
 4189|    248|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNS1_12float_readerIwEENS1_12function_refIFSM_SP_SH_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|    248|    {
 4206|    248|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|    248|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    248|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 248, False: 0]
  |  |  ------------------
  ------------------
 4208|    248|            return unexpected(r.error());
 4209|    248|        }
 4210|       |
 4211|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|      0|        return ranges::next(range.begin(), n);
 4213|      0|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_LPv0EEEOSU_:
  753|     22|    {
  754|     22|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_LPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1D_SC_SJ_SL_:
  743|     22|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     22|              cvref<T> obj = *get<T>(fn);
  745|     22|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|     22|                  obj(static_cast<decltype(args)>(args)...);
  747|     22|              }
  748|     22|              else {
  749|     22|                  return obj(static_cast<decltype(args)>(args)...);
  750|     22|              }
  751|     22|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|     22|    {
  684|     22|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|     22|            return static_cast<T*>(s.m_cp);
  686|     22|        }
  687|     22|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|     22|            return static_cast<T*>(s.m_p);
  689|     22|        }
  690|     22|        else {
  691|     22|            return reinterpret_cast<T*>(s.m_fp);
  692|     22|        }
  693|     22|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSD_ST_EEEDaSW_SZ_:
 4176|     22|                [](float_reader<CharT>& r, auto&&... args) {
 4177|     22|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|     22|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSL_:
  661|     22|        {
  662|     22|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_LPv0EEEOSU_:
  753|    226|    {
  754|    226|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_LPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1D_SC_SJ_SL_:
  743|    226|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    226|              cvref<T> obj = *get<T>(fn);
  745|    226|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    226|                  obj(static_cast<decltype(args)>(args)...);
  747|    226|              }
  748|    226|              else {
  749|    226|                  return obj(static_cast<decltype(args)>(args)...);
  750|    226|              }
  751|    226|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|    226|    {
  684|    226|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    226|            return static_cast<T*>(s.m_cp);
  686|    226|        }
  687|    226|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    226|            return static_cast<T*>(s.m_p);
  689|    226|        }
  690|    226|        else {
  691|    226|            return reinterpret_cast<T*>(s.m_fp);
  692|    226|        }
  693|    226|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSD_ST_EEEDaSW_SZ_:
 4185|    226|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    226|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    226|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|    226|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSL_:
  661|    226|        {
  662|    226|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|    458|    {
 4170|    458|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|    458|#if !SCN_DISABLE_LOCALE
 4173|    458|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 10, False: 448]
  ------------------
 4174|     10|            return read_impl<Range>(
 4175|     10|                range, rd,
 4176|     10|                [](float_reader<CharT>& r, auto&&... args) {
 4177|     10|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|     10|                },
 4179|     10|                value, loc);
 4180|     10|        }
 4181|    448|#endif
 4182|       |
 4183|    448|        return read_impl<Range>(
 4184|    448|            range, rd,
 4185|    448|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    448|                return r.read_source(SCN_FWD(args)...);
 4187|    448|            },
 4188|    448|            value);
 4189|    458|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|  1.11k|    {
 4206|  1.11k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|  1.11k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10, False: 1.10k]
  |  |  ------------------
  ------------------
 4208|     10|            return unexpected(r.error());
 4209|     10|        }
 4210|       |
 4211|  1.10k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|  1.10k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.10k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.10k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.10k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.10k|    }                                                  \
  |  |  |  | 3671|  1.10k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|      0|        return ranges::next(range.begin(), n);
 4213|  1.10k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|     10|    {
  754|     10|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|     10|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     10|              cvref<T> obj = *get<T>(fn);
  745|     10|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|     10|                  obj(static_cast<decltype(args)>(args)...);
  747|     10|              }
  748|     10|              else {
  749|     10|                  return obj(static_cast<decltype(args)>(args)...);
  750|     10|              }
  751|     10|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|     10|    {
  684|     10|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|     10|            return static_cast<T*>(s.m_cp);
  686|     10|        }
  687|     10|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|     10|            return static_cast<T*>(s.m_p);
  689|     10|        }
  690|     10|        else {
  691|     10|            return reinterpret_cast<T*>(s.m_fp);
  692|     10|        }
  693|     10|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|     10|                [](float_reader<CharT>& r, auto&&... args) {
 4177|     10|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|     10|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|     10|        {
  662|     10|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|    448|    {
  754|    448|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|    448|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    448|              cvref<T> obj = *get<T>(fn);
  745|    448|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    448|                  obj(static_cast<decltype(args)>(args)...);
  747|    448|              }
  748|    448|              else {
  749|    448|                  return obj(static_cast<decltype(args)>(args)...);
  750|    448|              }
  751|    448|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|    448|    {
  684|    448|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    448|            return static_cast<T*>(s.m_cp);
  686|    448|        }
  687|    448|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    448|            return static_cast<T*>(s.m_p);
  689|    448|        }
  690|    448|        else {
  691|    448|            return reinterpret_cast<T*>(s.m_fp);
  692|    448|        }
  693|    448|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|    448|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    448|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    448|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|    448|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|    448|        {
  662|    448|        }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEwEEDav:
 5808|  11.0k|{
 5809|  11.0k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  11.0k|        return reader_impl_for_bool<CharT>{};
 5811|  11.0k|    }
 5812|  11.0k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  11.0k|        return reader_impl_for_char<CharT>{};
 5814|  11.0k|    }
 5815|  11.0k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  11.0k|        return reader_impl_for_wchar<CharT>{};
 5817|  11.0k|    }
 5818|  11.0k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  11.0k|        return reader_impl_for_code_point<CharT>{};
 5820|  11.0k|    }
 5821|  11.0k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  11.0k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  11.0k|        return reader_impl_for_string<CharT>{};
 5824|  11.0k|    }
 5825|  11.0k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5825:24): [Folded - Ignored]
  |  Branch (5825:24): [Folded - Ignored]
  ------------------
 5826|  11.0k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  11.0k|        return reader_impl_for_string<CharT>{};
 5828|  11.0k|    }
 5829|  11.0k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  11.0k|                       std::is_same_v<T, wregex_matches>) {
 5831|  11.0k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  11.0k|    }
 5833|  11.0k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  11.0k|        return reader_impl_for_voidptr<CharT>{};
 5835|  11.0k|    }
 5836|  11.0k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  11.0k|        return reader_impl_for_float<CharT>{};
 5838|  11.0k|    }
 5839|  11.0k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  11.0k|                       !std::is_same_v<T, wchar_t> &&
 5841|  11.0k|                       !std::is_same_v<T, char32_t> &&
 5842|  11.0k|                       !std::is_same_v<T, bool>) {
 5843|  11.0k|        return reader_impl_for_int<CharT>{};
 5844|  11.0k|    }
 5845|  11.0k|    else {
 5846|  11.0k|        return reader_impl_for_monostate<CharT>{};
 5847|  11.0k|    }
 5848|  11.0k|}
_ZN3scn2v34impl13string_readerIwEC2Ev:
 5205|  33.0k|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|  31.0k|    {
 3040|  31.0k|        reader_error_handler eh{};
 3041|  31.0k|        get_derived().check_specs_impl(specs, eh);
 3042|  31.0k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  31.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 342, False: 30.7k]
  |  |  ------------------
  ------------------
 3043|    342|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|    342|        }
 3045|  30.7k|        return {};
 3046|  31.0k|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11get_derivedEv:
 3050|  31.0k|    {
 3051|  31.0k|        return static_cast<Derived&>(*this);
 3052|  31.0k|    }
_ZN3scn2v34impl13string_readerIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5209|  31.0k|    {
 5210|  31.0k|        detail::check_string_type_specs(specs, eh);
 5211|       |
 5212|  31.0k|        SCN_GCC_PUSH
 5213|  31.0k|        SCN_GCC_IGNORE("-Wswitch")
 5214|  31.0k|        SCN_GCC_IGNORE("-Wswitch-default")
 5215|       |
 5216|  31.0k|        SCN_CLANG_PUSH
 5217|  31.0k|        SCN_CLANG_IGNORE("-Wswitch")
 5218|  31.0k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5219|       |
 5220|  31.0k|        switch (specs.type) {
  ------------------
  |  Branch (5220:17): [True: 336, False: 30.7k]
  ------------------
 5221|  1.87k|            case detail::presentation_type::none:
  ------------------
  |  Branch (5221:13): [True: 1.87k, False: 29.1k]
  ------------------
 5222|  1.87k|                m_type = reader_type::word;
 5223|  1.87k|                break;
 5224|       |
 5225|    276|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5225:13): [True: 276, False: 30.7k]
  ------------------
 5226|    276|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5226:21): [True: 120, False: 156]
  ------------------
 5227|    276|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5227:21): [True: 102, False: 54]
  ------------------
 5228|    222|                    m_type = reader_type::custom_word;
 5229|    222|                }
 5230|     54|                else {
 5231|     54|                    m_type = reader_type::word;
 5232|     54|                }
 5233|    276|                break;
 5234|      0|            }
 5235|       |
 5236|     84|            case detail::presentation_type::character:
  ------------------
  |  Branch (5236:13): [True: 84, False: 30.9k]
  ------------------
 5237|     84|                m_type = reader_type::character;
 5238|     84|                break;
 5239|       |
 5240|  1.31k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5240:13): [True: 1.31k, False: 29.7k]
  ------------------
 5241|  1.31k|                m_type = reader_type::character_set;
 5242|  1.31k|                break;
 5243|       |
 5244|  26.6k|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5244:13): [True: 26.6k, False: 4.43k]
  ------------------
 5245|  26.6k|                m_type = reader_type::regex;
 5246|  26.6k|                break;
 5247|       |
 5248|    552|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5248:13): [True: 552, False: 30.5k]
  ------------------
 5249|    552|                m_type = reader_type::regex_escaped;
 5250|    552|                break;
 5251|  31.0k|        }
 5252|       |
 5253|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5254|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5255|  31.0k|    }
_ZNK3scn2v34impl13string_readerIwE19skip_ws_before_readEv:
 5258|  35.7k|    {
 5259|  35.7k|        return m_type == reader_type::word;
 5260|  35.7k|    }
_ZN3scn2v34impl16validate_unicodeIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|  9.85k|{
 1132|  9.85k|    auto it = src.begin();
 1133|  79.8k|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 73.0k, False: 6.81k]
  ------------------
 1134|  73.0k|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|  73.0k|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 0, False: 73.0k]
  ------------------
 1136|      0|            return false;
 1137|      0|        }
 1138|  73.0k|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 0, False: 73.0k]
  ------------------
 1139|      0|            return false;
 1140|      0|        }
 1141|  73.0k|        const auto cp = detail::decode_code_point_exhaustive(
 1142|  73.0k|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|  73.0k|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 3.04k, False: 70.0k]
  ------------------
 1144|  3.04k|            return false;
 1145|  3.04k|        }
 1146|  70.0k|        it += len;
 1147|  70.0k|    }
 1148|  6.81k|    return true;
 1149|  9.85k|}
_ZN3scn2v34impl22transcode_if_necessaryIwcEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|    124|{
 2993|    124|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|    124|        if (source.stores_allocated_string()) {
 2995|    124|            dest.assign(SCN_MOVE(source.get_allocated_string()));
 2996|    124|        }
 2997|    124|        else {
 2998|    124|            dest.assign(source.view());
 2999|    124|        }
 3000|    124|    }
 3001|    124|    else {
 3002|    124|        return transcode_impl(source.view(), dest);
 3003|    124|    }
 3004|       |
 3005|      0|    return {};
 3006|    124|}
_ZN3scn2v34impl14transcode_implIwcEENS0_10scan_errorENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEERNS4_12basic_stringIT0_NS7_ISB_EENS4_9allocatorISB_EEEE:
 2967|  1.70k|{
 2968|  1.70k|    dst.clear();
 2969|  1.70k|    transcode_valid_to_string(src, dst);
 2970|  1.70k|    return {};
 2971|  1.70k|}
_ZN3scn2v34impl25transcode_valid_to_stringIwcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1402|  1.70k|{
 1403|  1.70k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1404|       |
 1405|  1.70k|    SCN_EXPECT(validate_unicode(src));
  ------------------
  |  |  924|  1.70k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.70k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1406|  1.70k|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1406:19): [Folded - Ignored]
  ------------------
 1407|  1.70k|        if constexpr (sizeof(DestCharT) == 2) {
 1408|       |            // TODO: Optimize, remove utf32-step, go direct utf8->utf16
 1409|  1.70k|            std::u32string tmp;
 1410|  1.70k|            transcode_valid_to_string_impl_to32(src, tmp);
 1411|  1.70k|            return transcode_to_string_impl_32to16<true>(
 1412|  1.70k|                std::u32string_view{tmp}, dest);
 1413|  1.70k|        }
 1414|  1.70k|        else if constexpr (sizeof(DestCharT) == 4) {
 1415|  1.70k|            return transcode_valid_to_string_impl_to32(src, dest);
 1416|  1.70k|        }
 1417|  1.70k|    }
 1418|  1.70k|    else if constexpr (sizeof(SourceCharT) == 2) {
  ------------------
  |  Branch (1418:24): [Folded - Ignored]
  ------------------
 1419|  1.70k|        if constexpr (sizeof(DestCharT) == 1) {
 1420|  1.70k|            std::u32string tmp;
 1421|  1.70k|            transcode_valid_to_string_impl_to32(src, tmp);
 1422|  1.70k|            return transcode_to_string_impl_32to8<true>(
 1423|  1.70k|                std::u32string_view{tmp}, dest);
 1424|  1.70k|        }
 1425|  1.70k|        else if constexpr (sizeof(DestCharT) == 4) {
 1426|  1.70k|            return trasncode_valid_to_string_impl_to32(src, dest);
 1427|  1.70k|        }
 1428|  1.70k|    }
 1429|  1.70k|    else if constexpr (sizeof(SourceCharT) == 4) {
  ------------------
  |  Branch (1429:24): [Folded - Ignored]
  ------------------
 1430|  1.70k|        if constexpr (sizeof(DestCharT) == 1) {
  ------------------
  |  Branch (1430:23): [Folded - Ignored]
  ------------------
 1431|  1.70k|            return transcode_to_string_impl_32to8<true>(src, dest);
 1432|  1.70k|        }
 1433|  1.70k|        else if constexpr (sizeof(DestCharT) == 2) {
 1434|  1.70k|            return transcode_to_string_impl_32to16<true>(src, dest);
 1435|  1.70k|        }
 1436|  1.70k|    }
 1437|       |
 1438|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1439|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1440|      0|}
_ZN3scn2v34impl30transcode_to_string_impl_32to8ILb1EwcEEvNSt3__117basic_string_viewIT0_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT1_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1293|  1.70k|{
 1294|  1.70k|    static_assert(sizeof(SourceCharT) == 4);
 1295|  1.70k|    static_assert(sizeof(DestCharT) == 1);
 1296|       |
 1297|  13.2k|    for (auto cp : src) {
  ------------------
  |  Branch (1297:18): [True: 13.2k, False: 1.70k]
  ------------------
 1298|  13.2k|        const auto u32cp = static_cast<uint32_t>(cp);
 1299|  13.2k|        if (SCN_UNLIKELY(!VerifiedValid && cp >= detail::invalid_code_point)) {
  ------------------
  |  |  859|  13.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [Folded - Ignored]
  |  |  |  Branch (859:45): [Folded - Ignored]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1300|       |            // Replacement character
 1301|      0|            dest.push_back(static_cast<char>(0xef));
 1302|      0|            dest.push_back(static_cast<char>(0xbf));
 1303|      0|            dest.push_back(static_cast<char>(0xbd));
 1304|      0|        }
 1305|  13.2k|        else if (cp < 128) {
  ------------------
  |  Branch (1305:18): [True: 11.1k, False: 2.04k]
  ------------------
 1306|  11.1k|            dest.push_back(static_cast<char>(cp));
 1307|  11.1k|        }
 1308|  2.04k|        else if (cp < 2048) {
  ------------------
  |  Branch (1308:18): [True: 658, False: 1.38k]
  ------------------
 1309|    658|            dest.push_back(
 1310|    658|                static_cast<char>(0xc0 | (static_cast<char>(u32cp >> 6))));
 1311|    658|            dest.push_back(
 1312|    658|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1313|    658|        }
 1314|  1.38k|        else if (cp < 65536) {
  ------------------
  |  Branch (1314:18): [True: 652, False: 736]
  ------------------
 1315|    652|            dest.push_back(
 1316|    652|                static_cast<char>(0xe0 | (static_cast<char>(u32cp >> 12))));
 1317|    652|            dest.push_back(static_cast<char>(
 1318|    652|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1319|    652|            dest.push_back(
 1320|    652|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1321|    652|        }
 1322|    736|        else {
 1323|    736|            dest.push_back(
 1324|    736|                static_cast<char>(0xf0 | (static_cast<char>(u32cp >> 18))));
 1325|    736|            dest.push_back(static_cast<char>(
 1326|    736|                0x80 | (static_cast<char>(u32cp >> 12) & 0x3f)));
 1327|    736|            dest.push_back(static_cast<char>(
 1328|    736|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1329|    736|            dest.push_back(
 1330|    736|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1331|    736|        }
 1332|  13.2k|    }
 1333|  1.70k|}
_ZN3scn2v34impl25character_set_reader_implIwE12specs_helper15handle_nonasciiEv:
 5102|  1.31k|        {
 5103|  1.31k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5103:17): [True: 426, False: 888]
  ------------------
 5104|    426|                return {};
 5105|    426|            }
 5106|       |
 5107|    888|            auto charset_string = specs.charset_string<SourceCharT>();
 5108|    888|            auto it = detail::to_address(charset_string.begin());
 5109|    888|            auto set = detail::parse_presentation_set(
 5110|    888|                it, detail::to_address(charset_string.end()), nonascii);
 5111|    888|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  859|    888|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 888]
  |  |  ------------------
  ------------------
 5112|      0|                return nonascii.err;
 5113|      0|            }
 5114|    888|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  925|    888|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|    888|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5115|    888|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  925|    888|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|    888|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5116|       |
 5117|    888|            std::sort(nonascii.extra_ranges.begin(),
 5118|    888|                      nonascii.extra_ranges.end());
 5119|    888|            return {};
 5120|    888|        }
_ZNK3scn2v34impl25character_set_reader_implIwE20read_source_callback28on_classic_with_extra_rangesEDi:
 5137|  14.1k|        {
 5138|  14.1k|            if (!is_ascii_char(cp)) {
  ------------------
  |  Branch (5138:17): [True: 2.20k, False: 11.9k]
  ------------------
 5139|  2.20k|                return helper.is_char_set_in_extra_literals(cp);
 5140|  2.20k|            }
 5141|       |
 5142|  11.9k|            return helper.is_char_set_in_literals(static_cast<char>(cp));
 5143|  14.1k|        }
_ZNK3scn2v34impl25character_set_reader_implIwE12specs_helper29is_char_set_in_extra_literalsEDi:
 5085|  2.20k|        {
 5086|       |            // TODO: binary search?
 5087|  2.20k|            if (nonascii.extra_ranges.empty()) {
  ------------------
  |  Branch (5087:17): [True: 0, False: 2.20k]
  ------------------
 5088|      0|                return false;
 5089|      0|            }
 5090|       |
 5091|  2.20k|            const auto cp_val = static_cast<uint32_t>(cp);
 5092|  2.20k|            return std::find_if(
 5093|  2.20k|                       nonascii.extra_ranges.begin(),
 5094|  2.20k|                       nonascii.extra_ranges.end(),
 5095|  2.20k|                       [cp_val](const auto& pair) noexcept {
 5096|  2.20k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
 5097|  2.20k|                                  static_cast<uint32_t>(pair.second) > cp_val;
 5098|  2.20k|                       }) != nonascii.extra_ranges.end();
 5099|  2.20k|        }
_ZZNK3scn2v34impl25character_set_reader_implIwE12specs_helper29is_char_set_in_extra_literalsEDiENKUlRKT_E_clINSt3__14pairIDiDiEEEEDaS7_:
 5095|  8.70k|                       [cp_val](const auto& pair) noexcept {
 5096|  8.70k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
  ------------------
  |  Branch (5096:35): [True: 8.70k, False: 0]
  ------------------
 5097|  8.70k|                                  static_cast<uint32_t>(pair.second) > cp_val;
  ------------------
  |  Branch (5097:35): [True: 2.18k, False: 6.52k]
  ------------------
 5098|  8.70k|                       }) != nonascii.extra_ranges.end();
_ZNK3scn2v34impl25character_set_reader_implIwE12specs_helper23is_char_set_in_literalsEc:
 5075|  14.4k|        {
 5076|  14.4k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  924|  14.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5077|  14.4k|            const auto val =
 5078|  14.4k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5079|  14.4k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5080|  14.4k|                    (val % 8)) &
 5081|  14.4k|                   1u;
 5082|  14.4k|        }
_ZNK3scn2v34impl25character_set_reader_implIwE20read_source_callback13on_ascii_onlyEw:
 5128|  2.46k|        {
 5129|  2.46k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5129:17): [True: 24, False: 2.44k]
  ------------------
 5130|     24|                return false;
 5131|     24|            }
 5132|       |
 5133|  2.44k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5134|  2.46k|        }
_ZN3scn2v34impl25character_set_reader_implIwE12specs_helperC2ERKNS0_6detail12format_specsE:
 5072|  1.31k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v34impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5276|    290|    {
 5277|    290|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    290|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|    290|        return read_impl(range, specs, value);
 5279|    290|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5294|    290|    {
 5295|    290|        SCN_CLANG_PUSH
 5296|    290|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|    290|        switch (m_type) {
 5299|    198|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 198, False: 92]
  ------------------
 5300|    198|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     38|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 38, False: 252]
  ------------------
 5303|     38|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     38|                                                                   value);
 5305|       |
 5306|     26|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 26, False: 264]
  ------------------
 5307|     26|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|      0|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 0, False: 290]
  ------------------
 5310|      0|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|      0|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|     10|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 10, False: 280]
  ------------------
 5315|     10|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|     10|                    range, specs.charset_string<SourceCharT>(),
 5317|     10|                    specs.regexp_flags, value);
 5318|       |
 5319|     18|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 18, False: 272]
  ------------------
 5320|     18|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|     18|                    range,
 5322|     18|                    get_unescaped_regex_pattern(
 5323|     18|                        specs.charset_string<SourceCharT>()),
 5324|     18|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 290]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|    290|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|    290|        }
 5331|       |
 5332|    290|        SCN_CLANG_POP
 5333|    290|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4819|    198|    {
 4820|    198|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    198|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4751|    262|{
 4752|    262|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    262|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    262|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 138, False: 124]
  ------------------
 4756|    138|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    138|                                     "Invalid encoding in scanned string");
 4758|    138|    }
 4759|    124|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    124|    static_cast<    \
  |  |  929|    124|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    124|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    124|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 124]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    124|    return SCN_MOVE(result);
  ------------------
  |  |  928|    124|    static_cast<    \
  |  |  929|    124|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    124|}
_ZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2087|    594|{
 2088|    594|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|    594|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|    594|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|    594|        auto buf = make_contiguous_buffer(range);
 2092|    594|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|    594|        return ranges::next(range.begin(),
 2094|    594|                            ranges::distance(buf.view().begin(), it));
 2095|    594|    }
 2096|    594|    else {
 2097|    594|        auto it = range.begin();
 2098|       |
 2099|    594|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|    594|            auto seg = get_contiguous_beginning(range);
 2101|    594|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|    594|                seg_it != seg.end()) {
 2103|    594|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|    594|            }
 2105|    594|            ranges::advance(it, seg.size());
 2106|    594|        }
 2107|       |
 2108|    594|        return read_until_code_point(
 2109|    594|            ranges::subrange{it, range.end()},
 2110|    594|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|    594|    }
 2112|    594|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbDiESQ_EE:
 2060|    594|{
 2061|    594|    auto it = range.begin();
 2062|  29.7k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 29.1k, False: 534]
  ------------------
 2063|  29.1k|        const auto val =
 2064|  29.1k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  29.1k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  29.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 29.1k, False: 0]
  |  |  ------------------
  ------------------
 2066|  29.1k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  29.1k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  29.1k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 60, False: 29.1k]
  ------------------
 2069|     60|                return it;
 2070|     60|            }
 2071|  29.1k|        }
 2072|  29.1k|        it = val.iterator;
 2073|  29.1k|    }
 2074|       |
 2075|    534|    return it;
 2076|    594|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_:
  753|    594|    {
  754|    594|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESS_Di:
  743|  29.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  29.1k|              cvref<T> obj = *get<T>(fn);
  745|  29.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  29.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  29.1k|              }
  748|  29.1k|              else {
  749|  29.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  29.1k|              }
  751|  29.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  29.1k|    {
  684|  29.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  29.1k|            return static_cast<T*>(s.m_cp);
  686|  29.1k|        }
  687|  29.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  29.1k|            return static_cast<T*>(s.m_p);
  689|  29.1k|        }
  690|  29.1k|        else {
  691|  29.1k|            return reinterpret_cast<T*>(s.m_fp);
  692|  29.1k|        }
  693|  29.1k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2110|  29.1k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_LPv0EEEPSI_:
  661|    594|        {
  662|    594|        }
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4840|     38|    {
 4841|     38|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 38, False: 0]
  ------------------
 4842|     38|            return read_string_impl(
 4843|     38|                range,
 4844|     38|                read_until_code_unit(
 4845|     38|                    range,
 4846|     38|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     38|                        SourceCharT ch) { return ch == until; }),
 4848|     38|                value);
 4849|     38|        }
 4850|      0|        return read_string_impl(
 4851|      0|            range,
 4852|      0|            read_until_code_units(
 4853|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|      0|            value);
 4855|     38|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_LPv0EEEOSL_:
  753|     38|    {
  754|     38|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES18_w:
  743|    374|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    374|              cvref<T> obj = *get<T>(fn);
  745|    374|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    374|                  obj(static_cast<decltype(args)>(args)...);
  747|    374|              }
  748|    374|              else {
  749|    374|                  return obj(static_cast<decltype(args)>(args)...);
  750|    374|              }
  751|    374|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlwE_EEDaNS3_7storageE:
  683|    374|    {
  684|    374|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    374|            return static_cast<T*>(s.m_cp);
  686|    374|        }
  687|    374|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    374|            return static_cast<T*>(s.m_p);
  689|    374|        }
  690|    374|        else {
  691|    374|            return reinterpret_cast<T*>(s.m_fp);
  692|    374|        }
  693|    374|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlwE_clEw:
 4847|    374|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_LPv0EEEPSL_:
  661|     38|        {
  662|     38|        }
_ZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4946|     26|    {
 4947|     26|        return read_impl(
 4948|     26|            range,
 4949|     26|            [&](const auto& rng) {
 4950|     26|                return read_string_impl(rng, read_all(rng), value);
 4951|     26|            },
 4952|     26|            detail::priority_tag<1>{});
 4953|     26|    }
_ZN3scn2v34impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     26|    {
 4974|     26|        return read_cb(range);
 4975|     26|    }
_ZZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4949|     26|            [&](const auto& rng) {
 4950|     26|                return read_string_impl(rng, read_all(rng), value);
 4951|     26|            },
_ZN3scn2v34impl8read_allINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 1838|     78|{
 1839|     78|    return ranges::next(range.begin(), range.end());
 1840|     78|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS1_6detail9subrange_8subrangeIS9_S9_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EESL_E4typeESL_SM_:
  312|     78|    {
  313|     78|        ranges::advance(x, bound);
  314|     78|        return x;
  315|     78|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EEvE4typeERSL_SM_:
  274|     78|    {
  275|     78|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|     78|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEvRT_T0_NS0_6detail12priority_tagILm0EEE:
  202|     78|    {
  203|    882|        while (i != bound) {
  ------------------
  |  Branch (203:16): [True: 804, False: 78]
  ------------------
  204|    804|            ++i;
  205|    804|        }
  206|     78|    }
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4890|     28|    {
 4891|     28|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|     28|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     28|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     28|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     28|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 28, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     28|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     28|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     28|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     28|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     28|    }                                                  \
  |  |  |  | 3671|     28|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|      0|        return read_string_impl(range, it, value);
 4893|     28|    }
_ZN3scn2v34impl24regex_string_reader_implIwE4implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsE:
 4912|     84|    {
 4913|     84|        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|    168|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (4913:23): [Folded - Ignored]
  |  Branch (4913:23): [Folded - Ignored]
  ------------------
 4914|     84|                      !std::is_same_v<SourceCharT, char>) {
  ------------------
  |  Branch (4914:23): [Folded - Ignored]
  ------------------
 4915|     84|            return unexpected_scan_error(
 4916|     84|                scan_error::invalid_scanned_value,
 4917|     84|                "Regex backend doesn't support wide strings as input");
 4918|     84|        }
 4919|     84|        else {
 4920|     84|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4920:17): [True: 84, False: 0]
  ------------------
 4921|     84|                return unexpected_scan_error(
 4922|     84|                    scan_error::invalid_scanned_value,
 4923|     84|                    "Cannot use regex with a non-contiguous source "
 4924|     84|                    "range");
 4925|     84|            }
 4926|       |
 4927|      0|            auto input = get_as_contiguous(range);
 4928|      0|            SCN_TRY(it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4929|      0|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4930|      0|            return ranges::next(range.begin(),
 4931|      0|                                ranges::distance(input.begin(), it));
 4932|      0|        }
 4933|     84|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEbT_:
  958|     84|{
  959|     84|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (959:19): [Folded - Ignored]
  |  Branch (959:19): [Folded - Ignored]
  ------------------
  960|     84|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (960:19): [Folded - Ignored]
  ------------------
  961|     84|        return true;
  962|     84|    }
  963|     84|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (963:24): [Folded - Ignored]
  ------------------
  964|     84|                           ranges::const_iterator_t<Range>,
  965|     84|                           typename detail::basic_scan_buffer<
  966|     84|                               detail::char_t<Range>>::forward_iterator>) {
  967|     84|        auto beg = r.begin();
  968|     84|        if (!beg.stores_parent()) {
  969|     84|            return true;
  970|     84|        }
  971|     84|        return beg.parent()->is_contiguous();
  972|     84|    }
  973|     84|    else {
  974|     84|        return false;
  975|     84|    }
  976|     84|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  9.93k|    {
 5277|  9.93k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  9.93k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  9.93k|        return read_impl(range, specs, value);
 5279|  9.93k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  9.93k|    {
 5295|  9.93k|        SCN_CLANG_PUSH
 5296|  9.93k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  9.93k|        switch (m_type) {
 5299|    442|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 442, False: 9.49k]
  ------------------
 5300|    442|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     34|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 34, False: 9.90k]
  ------------------
 5303|     34|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     34|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 9.93k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    438|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 438, False: 9.49k]
  ------------------
 5310|    438|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    438|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  8.85k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 8.85k, False: 1.08k]
  ------------------
 5315|  8.85k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  8.85k|                    range, specs.charset_string<SourceCharT>(),
 5317|  8.85k|                    specs.regexp_flags, value);
 5318|       |
 5319|    166|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 166, False: 9.76k]
  ------------------
 5320|    166|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    166|                    range,
 5322|    166|                    get_unescaped_regex_pattern(
 5323|    166|                        specs.charset_string<SourceCharT>()),
 5324|    166|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 9.93k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  9.93k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  9.93k|        }
 5331|       |
 5332|  9.93k|        SCN_CLANG_POP
 5333|  9.93k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|  1.09k|    {
 4820|  1.09k|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|  1.09k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|  1.13k|{
 4752|  1.13k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  1.13k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  1.13k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 358, False: 774]
  ------------------
 4756|    358|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    358|                                     "Invalid encoding in scanned string");
 4758|    358|    }
 4759|    774|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    774|    static_cast<    \
  |  |  929|    774|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    774|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    774|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 774]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    774|    return SCN_MOVE(result);
  ------------------
  |  |  928|    774|    static_cast<    \
  |  |  929|    774|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    774|}
_ZN3scn2v34impl22transcode_if_necessaryIwcEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|  1.58k|{
 3012|  1.58k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|  1.58k|        dest.assign(source.view());
 3014|  1.58k|    }
 3015|  1.58k|    else {
 3016|  1.58k|        return transcode_impl(source.view(), dest);
 3017|  1.58k|    }
 3018|       |
 3019|      0|    return {};
 3020|  1.58k|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2087|  3.29k|{
 2088|  3.29k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  3.29k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  3.29k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  3.29k|        auto buf = make_contiguous_buffer(range);
 2092|  3.29k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  3.29k|        return ranges::next(range.begin(),
 2094|  3.29k|                            ranges::distance(buf.view().begin(), it));
 2095|  3.29k|    }
 2096|  3.29k|    else {
 2097|  3.29k|        auto it = range.begin();
 2098|       |
 2099|  3.29k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|  3.29k|            auto seg = get_contiguous_beginning(range);
 2101|  3.29k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  3.29k|                seg_it != seg.end()) {
 2103|  3.29k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  3.29k|            }
 2105|  3.29k|            ranges::advance(it, seg.size());
 2106|  3.29k|        }
 2107|       |
 2108|  3.29k|        return read_until_code_point(
 2109|  3.29k|            ranges::subrange{it, range.end()},
 2110|  3.29k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  3.29k|    }
 2112|  3.29k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|  3.29k|    {
  754|  3.29k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|  54.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  54.5k|              cvref<T> obj = *get<T>(fn);
  745|  54.5k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  54.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  54.5k|              }
  748|  54.5k|              else {
  749|  54.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  54.5k|              }
  751|  54.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  54.5k|    {
  684|  54.5k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  54.5k|            return static_cast<T*>(s.m_cp);
  686|  54.5k|        }
  687|  54.5k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  54.5k|            return static_cast<T*>(s.m_p);
  689|  54.5k|        }
  690|  54.5k|        else {
  691|  54.5k|            return reinterpret_cast<T*>(s.m_fp);
  692|  54.5k|        }
  693|  54.5k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2110|  54.5k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|  3.29k|        {
  662|  3.29k|        }
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4840|     34|    {
 4841|     34|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 34, False: 0]
  ------------------
 4842|     34|            return read_string_impl(
 4843|     34|                range,
 4844|     34|                read_until_code_unit(
 4845|     34|                    range,
 4846|     34|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     34|                        SourceCharT ch) { return ch == until; }),
 4848|     34|                value);
 4849|     34|        }
 4850|      0|        return read_string_impl(
 4851|      0|            range,
 4852|      0|            read_until_code_units(
 4853|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|      0|            value);
 4855|     34|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_LPv0EEEOSJ_:
  753|     34|    {
  754|     34|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  743|    806|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    806|              cvref<T> obj = *get<T>(fn);
  745|    806|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    806|                  obj(static_cast<decltype(args)>(args)...);
  747|    806|              }
  748|    806|              else {
  749|    806|                  return obj(static_cast<decltype(args)>(args)...);
  750|    806|              }
  751|    806|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    806|    {
  684|    806|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    806|            return static_cast<T*>(s.m_cp);
  686|    806|        }
  687|    806|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    806|            return static_cast<T*>(s.m_p);
  689|    806|        }
  690|    806|        else {
  691|    806|            return reinterpret_cast<T*>(s.m_fp);
  692|    806|        }
  693|    806|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlwE_clEw:
 4847|    806|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_LPv0EEEPSJ_:
  661|     34|        {
  662|     34|        }
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5047|    438|    {
 5048|    438|        auto it = read_source_impl(range, {specs});
 5049|    438|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    438|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 78, False: 360]
  |  |  ------------------
  ------------------
 5050|     78|            return unexpected(it.error());
 5051|     78|        }
 5052|       |
 5053|    360|        return read_string_impl(range, *it, value);
 5054|    438|    }
_ZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5152|  1.31k|    {
 5153|  1.31k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|  1.31k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|  1.31k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.31k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.31k]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|  1.31k|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|  1.31k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 888, False: 426]
  ------------------
 5163|    888|            const auto cb = [&](char32_t cp) {
 5164|    888|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|    888|            };
 5166|       |
 5167|    888|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 210, False: 678]
  ------------------
 5168|    210|                auto it = read_until_code_point(range, cb);
 5169|    210|                return check_nonempty(it, range);
 5170|    210|            }
 5171|    678|            auto it = read_while_code_point(range, cb);
 5172|    678|            return check_nonempty(it, range);
 5173|    888|        }
 5174|       |
 5175|    426|        const auto cb = [&](SourceCharT ch) {
 5176|    426|            return cb_wrapper.on_ascii_only(ch);
 5177|    426|        };
 5178|       |
 5179|    426|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 234, False: 192]
  ------------------
 5180|    234|            auto it = read_until_code_unit(range, cb);
 5181|    234|            return check_nonempty(it, range);
 5182|    234|        }
 5183|    192|        auto it = read_while_code_unit(range, cb);
 5184|    192|        return check_nonempty(it, range);
 5185|    426|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_LPv0EEEOSJ_:
  753|    888|    {
  754|    888|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESX_Di:
  743|  14.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  14.1k|              cvref<T> obj = *get<T>(fn);
  745|  14.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  14.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  14.1k|              }
  748|  14.1k|              else {
  749|  14.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  14.1k|              }
  751|  14.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|  14.1k|    {
  684|  14.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  14.1k|            return static_cast<T*>(s.m_cp);
  686|  14.1k|        }
  687|  14.1k|        else if constexpr (std::is_object_v<T>) {
  688|  14.1k|            return static_cast<T*>(s.m_p);
  689|  14.1k|        }
  690|  14.1k|        else {
  691|  14.1k|            return reinterpret_cast<T*>(s.m_fp);
  692|  14.1k|        }
  693|  14.1k|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlDiE_clEDi:
 5163|  14.1k|            const auto cb = [&](char32_t cp) {
 5164|  14.1k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|  14.1k|            };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_LPv0EEEPKSJ_:
  666|    888|        {
  667|    888|        }
_ZN3scn2v34impl25character_set_reader_implIwE14check_nonemptyIPKwNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5190|  1.31k|    {
 5191|  1.31k|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 234, False: 1.08k]
  ------------------
 5192|    234|            return unexpected_scan_error(
 5193|    234|                scan_error::invalid_scanned_value,
 5194|    234|                "No characters matched in [character set]");
 5195|    234|        }
 5196|       |
 5197|  1.08k|        return it;
 5198|  1.31k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_LPv0EEEOSJ_:
  753|    426|    {
  754|    426|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|  2.46k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.46k|              cvref<T> obj = *get<T>(fn);
  745|  2.46k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  2.46k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.46k|              }
  748|  2.46k|              else {
  749|  2.46k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.46k|              }
  751|  2.46k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  2.46k|    {
  684|  2.46k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  2.46k|            return static_cast<T*>(s.m_cp);
  686|  2.46k|        }
  687|  2.46k|        else if constexpr (std::is_object_v<T>) {
  688|  2.46k|            return static_cast<T*>(s.m_p);
  689|  2.46k|        }
  690|  2.46k|        else {
  691|  2.46k|            return reinterpret_cast<T*>(s.m_fp);
  692|  2.46k|        }
  693|  2.46k|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlwE_clEw:
 5175|  2.46k|        const auto cb = [&](SourceCharT ch) {
 5176|  2.46k|            return cb_wrapper.on_ascii_only(ch);
 5177|  2.46k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_LPv0EEEPKSJ_:
  666|    426|        {
  667|    426|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4751|  1.32k|{
 4752|  1.32k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  1.32k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  1.32k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 518, False: 806]
  ------------------
 4756|    518|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    518|                                     "Invalid encoding in scanned string");
 4758|    518|    }
 4759|    806|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    806|    static_cast<    \
  |  |  929|    806|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    806|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    806|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 806]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    806|    return SCN_MOVE(result);
  ------------------
  |  |  928|    806|    static_cast<    \
  |  |  929|    806|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    806|}
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4890|  9.02k|    {
 4891|  9.02k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|  9.02k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  9.02k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  9.02k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  9.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8.05k, False: 964]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  8.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  8.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  8.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  8.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  8.05k|    }                                                  \
  |  |  |  | 3671|  9.02k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    964|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|    964|        return read_string_impl(range, it, value);
 4893|  9.02k|    }
_ZN3scn2v34impl24regex_string_reader_implIwE4implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsE:
 4912|  27.0k|    {
 4913|  27.0k|        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|  54.1k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (4913:23): [Folded - Ignored]
  |  Branch (4913:23): [Folded - Ignored]
  ------------------
 4914|  27.0k|                      !std::is_same_v<SourceCharT, char>) {
  ------------------
  |  Branch (4914:23): [Folded - Ignored]
  ------------------
 4915|  27.0k|            return unexpected_scan_error(
 4916|  27.0k|                scan_error::invalid_scanned_value,
 4917|  27.0k|                "Regex backend doesn't support wide strings as input");
 4918|  27.0k|        }
 4919|  27.0k|        else {
 4920|  27.0k|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4920:17): [True: 0, False: 27.0k]
  ------------------
 4921|      0|                return unexpected_scan_error(
 4922|      0|                    scan_error::invalid_scanned_value,
 4923|      0|                    "Cannot use regex with a non-contiguous source "
 4924|      0|                    "range");
 4925|      0|            }
 4926|       |
 4927|  27.0k|            auto input = get_as_contiguous(range);
 4928|  27.0k|            SCN_TRY(it,
  ------------------
  |  | 3672|  27.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  27.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  27.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  27.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 24.1k, False: 2.89k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  24.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  24.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  24.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  24.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  24.1k|    }                                                  \
  |  |  |  | 3671|  27.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.89k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4929|  2.89k|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4930|  2.89k|            return ranges::next(range.begin(),
 4931|  2.89k|                                ranges::distance(input.begin(), it));
 4932|  27.0k|        }
 4933|  27.0k|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  958|  27.0k|{
  959|  27.0k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (959:19): [Folded - Ignored]
  |  Branch (959:19): [Folded - Ignored]
  ------------------
  960|  27.0k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (960:19): [Folded - Ignored]
  ------------------
  961|  27.0k|        return true;
  962|  27.0k|    }
  963|  27.0k|    else if constexpr (std::is_same_v<
  964|  27.0k|                           ranges::const_iterator_t<Range>,
  965|  27.0k|                           typename detail::basic_scan_buffer<
  966|  27.0k|                               detail::char_t<Range>>::forward_iterator>) {
  967|  27.0k|        auto beg = r.begin();
  968|  27.0k|        if (!beg.stores_parent()) {
  969|  27.0k|            return true;
  970|  27.0k|        }
  971|  27.0k|        return beg.parent()->is_contiguous();
  972|  27.0k|    }
  973|  27.0k|    else {
  974|  27.0k|        return false;
  975|  27.0k|    }
  976|  27.0k|}
_ZN3scn2v34impl17get_as_contiguousINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaT_:
 1064|  27.0k|{
 1065|  27.0k|    SCN_EXPECT(is_segment_contiguous(r));
  ------------------
  |  |  924|  27.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  27.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1066|       |
 1067|  27.0k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1067:19): [Folded - Ignored]
  |  Branch (1067:19): [Folded - Ignored]
  ------------------
 1068|  27.0k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1068:19): [Folded - Ignored]
  ------------------
 1069|  27.0k|        return r;
 1070|  27.0k|    }
 1071|  27.0k|    else if constexpr (std::is_same_v<
 1072|  27.0k|                           ranges::const_iterator_t<Range>,
 1073|  27.0k|                           typename detail::basic_scan_buffer<
 1074|  27.0k|                               detail::char_t<Range>>::forward_iterator>) {
 1075|  27.0k|        if constexpr (ranges::common_range<Range>) {
 1076|  27.0k|            return detail::make_string_view_from_pointers(
 1077|  27.0k|                r.begin().to_contiguous_segment_iterator(),
 1078|  27.0k|                r.end().to_contiguous_segment_iterator());
 1079|  27.0k|        }
 1080|  27.0k|        else {
 1081|  27.0k|            return r.begin().contiguous_segment();
 1082|  27.0k|        }
 1083|  27.0k|    }
 1084|  27.0k|    else {
 1085|  27.0k|        SCN_EXPECT(false);
 1086|  27.0k|        SCN_UNREACHABLE;
 1087|       |        // for return type deduction
 1088|  27.0k|        return std::basic_string_view<detail::char_t<Range>>{};
 1089|  27.0k|    }
 1090|  27.0k|}
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  980|  27.0k|{
  981|  27.0k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|  27.0k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|  27.0k|        return true;
  984|  27.0k|    }
  985|  27.0k|    else if constexpr (std::is_same_v<
  986|  27.0k|                           ranges::const_iterator_t<Range>,
  987|  27.0k|                           typename detail::basic_scan_buffer<
  988|  27.0k|                               detail::char_t<Range>>::forward_iterator>) {
  989|  27.0k|        auto beg = r.begin();
  990|  27.0k|        if (beg.contiguous_segment().empty()) {
  991|  27.0k|            return false;
  992|  27.0k|        }
  993|  27.0k|        if constexpr (ranges::common_range<Range>) {
  994|  27.0k|            return beg.contiguous_segment().end() ==
  995|  27.0k|                   ranges::end(r).contiguous_segment().end();
  996|  27.0k|        }
  997|  27.0k|        else {
  998|  27.0k|            if (beg.stores_parent()) {
  999|  27.0k|                return beg.contiguous_segment().end() ==
 1000|  27.0k|                       beg.parent()->current_view().end();
 1001|  27.0k|            }
 1002|  27.0k|            return true;
 1003|  27.0k|        }
 1004|  27.0k|    }
 1005|  27.0k|    else {
 1006|  27.0k|        return false;
 1007|  27.0k|    }
 1008|  27.0k|}
_ZN3scn2v34impl22read_regex_string_implIwNS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT0_EEEEEENSt3__117basic_string_viewIT_NSF_11char_traitsISH_EEEENS0_6detail11regex_flagsESB_:
 4345|  27.0k|{
 4346|  27.0k|    static_assert(ranges::contiguous_range<Input> &&
 4347|  27.0k|                  ranges::borrowed_range<Input> &&
 4348|  27.0k|                  std::is_same_v<ranges::range_value_t<Input>, CharT>);
 4349|       |
 4350|  27.0k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 4351|  27.0k|    std::basic_regex<CharT> re{};
 4352|  27.0k|    try {
 4353|  27.0k|        SCN_TRY(re_flags, make_regex_flags(flags));
  ------------------
  |  | 3672|  27.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  27.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  27.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  27.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 27.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  27.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  27.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4354|  27.0k|        re = std::basic_regex<CharT>{pattern.data(), pattern.size(),
 4355|  27.0k|                                     re_flags | std::regex_constants::nosubs};
 4356|  27.0k|    }
 4357|  27.0k|    catch (const std::regex_error& err) {
 4358|  11.0k|        return unexpected_scan_error(scan_error::invalid_format_string,
 4359|  11.0k|                                     "Invalid regex");
 4360|  11.0k|    }
 4361|       |
 4362|  15.9k|    std::match_results<const CharT*> matches{};
 4363|  15.9k|    try {
 4364|  15.9k|        bool found = std::regex_search(input.data(),
 4365|  15.9k|                                       input.data() + input.size(), matches, re,
 4366|  15.9k|                                       std::regex_constants::match_continuous);
 4367|  15.9k|        if (!found || matches.prefix().matched) {
  ------------------
  |  Branch (4367:13): [True: 13.0k, False: 2.89k]
  |  Branch (4367:23): [True: 0, False: 2.89k]
  ------------------
 4368|  13.0k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4369|  13.0k|                                         "Regular expression didn't match");
 4370|  13.0k|        }
 4371|  15.9k|    }
 4372|  15.9k|    catch (const std::regex_error& err) {
 4373|     18|        return unexpected_scan_error(scan_error::invalid_format_string,
 4374|     18|                                     "Regex matching failed with an error");
 4375|     18|    }
 4376|       |
 4377|  2.89k|    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4378|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_BOOST
 4379|       |    auto re =
 4380|       |#if SCN_REGEX_BOOST_USE_ICU
 4381|       |        boost::make_u32regex(pattern.data(), pattern.data() + pattern.size(),
 4382|       |                             make_regex_flags(flags) |
 4383|       |                                 boost::regex_constants::no_except |
 4384|       |                                 boost::regex_constants::nosubs);
 4385|       |#else
 4386|       |        boost::basic_regex<CharT>{pattern.data(), pattern.size(),
 4387|       |                                  make_regex_flags(flags) |
 4388|       |                                      boost::regex_constants::no_except |
 4389|       |                                      boost::regex_constants::nosubs};
 4390|       |#endif
 4391|       |    if (re.status() != 0) {
 4392|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4393|       |                                     "Invalid regex");
 4394|       |    }
 4395|       |
 4396|       |    boost::match_results<const CharT*> matches{};
 4397|       |    try {
 4398|       |        bool found =
 4399|       |#if SCN_REGEX_BOOST_USE_ICU
 4400|       |            boost::u32regex_search(input.data(), input.data() + input.size(),
 4401|       |                                   matches, re,
 4402|       |                                   boost::regex_constants::match_continuous);
 4403|       |#else
 4404|       |            boost::regex_search(input.data(), input.data() + input.size(),
 4405|       |                                matches, re,
 4406|       |                                boost::regex_constants::match_continuous);
 4407|       |#endif
 4408|       |        if (!found || matches.prefix().matched) {
 4409|       |            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4410|       |                                         "Regular expression didn't match");
 4411|       |        }
 4412|       |    }
 4413|       |    catch (const std::runtime_error& err) {
 4414|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4415|       |                                     "Regex matching failed with an error");
 4416|       |    }
 4417|       |
 4418|       |    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4419|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_RE2
 4420|       |    static_assert(std::is_same_v<CharT, char>);
 4421|       |    std::string flagged_pattern{};
 4422|       |    auto re = [&]() {
 4423|       |        auto [opts, flagstr] = make_regex_flags(flags);
 4424|       |        opts.set_never_capture(true);
 4425|       |        if (flagstr.empty()) {
 4426|       |            return re2::RE2{pattern, opts};
 4427|       |        }
 4428|       |        flagged_pattern.reserve(flagstr.size() + pattern.size());
 4429|       |        flagged_pattern.append(flagstr);
 4430|       |        flagged_pattern.append(pattern);
 4431|       |        return re2::RE2{flagged_pattern, opts};
 4432|       |    }();
 4433|       |    if (!re.ok()) {
 4434|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4435|       |                                     "Failed to parse regular expression");
 4436|       |    }
 4437|       |
 4438|       |    auto new_input = detail::make_string_view_from_pointers(
 4439|       |        detail::to_address(input.begin()), detail::to_address(input.end()));
 4440|       |    bool found = re2::RE2::Consume(&new_input, re);
 4441|       |    if (!found) {
 4442|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4443|       |                                     "Regular expression didn't match");
 4444|       |    }
 4445|       |    return input.begin() + ranges::distance(input.data(), new_input.data());
 4446|       |#endif  // SCN_REGEX_BACKEND == ...
 4447|  15.9k|}
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEwEEDav:
 5808|  11.0k|{
 5809|  11.0k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  11.0k|        return reader_impl_for_bool<CharT>{};
 5811|  11.0k|    }
 5812|  11.0k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  11.0k|        return reader_impl_for_char<CharT>{};
 5814|  11.0k|    }
 5815|  11.0k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  11.0k|        return reader_impl_for_wchar<CharT>{};
 5817|  11.0k|    }
 5818|  11.0k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  11.0k|        return reader_impl_for_code_point<CharT>{};
 5820|  11.0k|    }
 5821|  11.0k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  11.0k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  11.0k|        return reader_impl_for_string<CharT>{};
 5824|  11.0k|    }
 5825|  11.0k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5825:24): [Folded - Ignored]
  |  Branch (5825:24): [Folded - Ignored]
  ------------------
 5826|  11.0k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  11.0k|        return reader_impl_for_string<CharT>{};
 5828|  11.0k|    }
 5829|  11.0k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  11.0k|                       std::is_same_v<T, wregex_matches>) {
 5831|  11.0k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  11.0k|    }
 5833|  11.0k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  11.0k|        return reader_impl_for_voidptr<CharT>{};
 5835|  11.0k|    }
 5836|  11.0k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  11.0k|        return reader_impl_for_float<CharT>{};
 5838|  11.0k|    }
 5839|  11.0k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  11.0k|                       !std::is_same_v<T, wchar_t> &&
 5841|  11.0k|                       !std::is_same_v<T, char32_t> &&
 5842|  11.0k|                       !std::is_same_v<T, bool>) {
 5843|  11.0k|        return reader_impl_for_int<CharT>{};
 5844|  11.0k|    }
 5845|  11.0k|    else {
 5846|  11.0k|        return reader_impl_for_monostate<CharT>{};
 5847|  11.0k|    }
 5848|  11.0k|}
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|    124|{
 2993|    124|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|    124|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2994:13): [True: 124, False: 0]
  ------------------
 2995|    124|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|    124|    static_cast<    \
  |  |  929|    124|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2996|    124|        }
 2997|      0|        else {
 2998|      0|            dest.assign(source.view());
 2999|      0|        }
 3000|    124|    }
 3001|    124|    else {
 3002|    124|        return transcode_impl(source.view(), dest);
 3003|    124|    }
 3004|       |
 3005|    124|    return {};
 3006|    124|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5276|    290|    {
 5277|    290|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    290|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|    290|        return read_impl(range, specs, value);
 5279|    290|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5294|    290|    {
 5295|    290|        SCN_CLANG_PUSH
 5296|    290|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|    290|        switch (m_type) {
 5299|    198|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 198, False: 92]
  ------------------
 5300|    198|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     38|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 38, False: 252]
  ------------------
 5303|     38|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     38|                                                                   value);
 5305|       |
 5306|     26|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 26, False: 264]
  ------------------
 5307|     26|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|      0|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 0, False: 290]
  ------------------
 5310|      0|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|      0|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|     10|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 10, False: 280]
  ------------------
 5315|     10|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|     10|                    range, specs.charset_string<SourceCharT>(),
 5317|     10|                    specs.regexp_flags, value);
 5318|       |
 5319|     18|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 18, False: 272]
  ------------------
 5320|     18|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|     18|                    range,
 5322|     18|                    get_unescaped_regex_pattern(
 5323|     18|                        specs.charset_string<SourceCharT>()),
 5324|     18|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 290]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|    290|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|    290|        }
 5331|       |
 5332|    290|        SCN_CLANG_POP
 5333|    290|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4819|    198|    {
 4820|    198|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    198|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4751|    262|{
 4752|    262|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    262|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    262|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 138, False: 124]
  ------------------
 4756|    138|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    138|                                     "Invalid encoding in scanned string");
 4758|    138|    }
 4759|    124|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    124|    static_cast<    \
  |  |  929|    124|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    124|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    124|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 124]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    124|    return SCN_MOVE(result);
  ------------------
  |  |  928|    124|    static_cast<    \
  |  |  929|    124|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    124|}
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4840|     38|    {
 4841|     38|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 38, False: 0]
  ------------------
 4842|     38|            return read_string_impl(
 4843|     38|                range,
 4844|     38|                read_until_code_unit(
 4845|     38|                    range,
 4846|     38|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     38|                        SourceCharT ch) { return ch == until; }),
 4848|     38|                value);
 4849|     38|        }
 4850|      0|        return read_string_impl(
 4851|      0|            range,
 4852|      0|            read_until_code_units(
 4853|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|      0|            value);
 4855|     38|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_LPv0EEEOSL_:
  753|     38|    {
  754|     38|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES18_w:
  743|    374|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    374|              cvref<T> obj = *get<T>(fn);
  745|    374|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    374|                  obj(static_cast<decltype(args)>(args)...);
  747|    374|              }
  748|    374|              else {
  749|    374|                  return obj(static_cast<decltype(args)>(args)...);
  750|    374|              }
  751|    374|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlwE_EEDaNS3_7storageE:
  683|    374|    {
  684|    374|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    374|            return static_cast<T*>(s.m_cp);
  686|    374|        }
  687|    374|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    374|            return static_cast<T*>(s.m_p);
  689|    374|        }
  690|    374|        else {
  691|    374|            return reinterpret_cast<T*>(s.m_fp);
  692|    374|        }
  693|    374|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlwE_clEw:
 4847|    374|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_LPv0EEEPSL_:
  661|     38|        {
  662|     38|        }
_ZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4946|     26|    {
 4947|     26|        return read_impl(
 4948|     26|            range,
 4949|     26|            [&](const auto& rng) {
 4950|     26|                return read_string_impl(rng, read_all(rng), value);
 4951|     26|            },
 4952|     26|            detail::priority_tag<1>{});
 4953|     26|    }
_ZN3scn2v34impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     26|    {
 4974|     26|        return read_cb(range);
 4975|     26|    }
_ZZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4949|     26|            [&](const auto& rng) {
 4950|     26|                return read_string_impl(rng, read_all(rng), value);
 4951|     26|            },
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4890|     28|    {
 4891|     28|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|     28|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     28|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     28|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     28|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 28, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     28|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     28|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     28|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     28|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     28|    }                                                  \
  |  |  |  | 3671|     28|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|      0|        return read_string_impl(range, it, value);
 4893|     28|    }
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  9.93k|    {
 5277|  9.93k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  9.93k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  9.93k|        return read_impl(range, specs, value);
 5279|  9.93k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  9.93k|    {
 5295|  9.93k|        SCN_CLANG_PUSH
 5296|  9.93k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  9.93k|        switch (m_type) {
 5299|    442|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 442, False: 9.49k]
  ------------------
 5300|    442|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     34|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 34, False: 9.90k]
  ------------------
 5303|     34|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     34|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 9.93k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    438|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 438, False: 9.49k]
  ------------------
 5310|    438|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    438|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  8.85k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 8.85k, False: 1.08k]
  ------------------
 5315|  8.85k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  8.85k|                    range, specs.charset_string<SourceCharT>(),
 5317|  8.85k|                    specs.regexp_flags, value);
 5318|       |
 5319|    166|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 166, False: 9.76k]
  ------------------
 5320|    166|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    166|                    range,
 5322|    166|                    get_unescaped_regex_pattern(
 5323|    166|                        specs.charset_string<SourceCharT>()),
 5324|    166|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 9.93k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  9.93k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  9.93k|        }
 5331|       |
 5332|  9.93k|        SCN_CLANG_POP
 5333|  9.93k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|  1.09k|    {
 4820|  1.09k|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|  1.09k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|  1.13k|{
 4752|  1.13k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  1.13k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  1.13k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 358, False: 774]
  ------------------
 4756|    358|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    358|                                     "Invalid encoding in scanned string");
 4758|    358|    }
 4759|    774|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    774|    static_cast<    \
  |  |  929|    774|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    774|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    774|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 774]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    774|    return SCN_MOVE(result);
  ------------------
  |  |  928|    774|    static_cast<    \
  |  |  929|    774|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    774|}
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|  1.58k|{
 3012|  1.58k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|  1.58k|        dest.assign(source.view());
 3014|  1.58k|    }
 3015|  1.58k|    else {
 3016|  1.58k|        return transcode_impl(source.view(), dest);
 3017|  1.58k|    }
 3018|       |
 3019|  1.58k|    return {};
 3020|  1.58k|}
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4840|     34|    {
 4841|     34|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 34, False: 0]
  ------------------
 4842|     34|            return read_string_impl(
 4843|     34|                range,
 4844|     34|                read_until_code_unit(
 4845|     34|                    range,
 4846|     34|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     34|                        SourceCharT ch) { return ch == until; }),
 4848|     34|                value);
 4849|     34|        }
 4850|      0|        return read_string_impl(
 4851|      0|            range,
 4852|      0|            read_until_code_units(
 4853|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|      0|            value);
 4855|     34|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_LPv0EEEOSJ_:
  753|     34|    {
  754|     34|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  743|    806|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    806|              cvref<T> obj = *get<T>(fn);
  745|    806|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    806|                  obj(static_cast<decltype(args)>(args)...);
  747|    806|              }
  748|    806|              else {
  749|    806|                  return obj(static_cast<decltype(args)>(args)...);
  750|    806|              }
  751|    806|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    806|    {
  684|    806|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    806|            return static_cast<T*>(s.m_cp);
  686|    806|        }
  687|    806|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    806|            return static_cast<T*>(s.m_p);
  689|    806|        }
  690|    806|        else {
  691|    806|            return reinterpret_cast<T*>(s.m_fp);
  692|    806|        }
  693|    806|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlwE_clEw:
 4847|    806|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_LPv0EEEPSJ_:
  661|     34|        {
  662|     34|        }
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5047|    438|    {
 5048|    438|        auto it = read_source_impl(range, {specs});
 5049|    438|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    438|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 78, False: 360]
  |  |  ------------------
  ------------------
 5050|     78|            return unexpected(it.error());
 5051|     78|        }
 5052|       |
 5053|    360|        return read_string_impl(range, *it, value);
 5054|    438|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4751|  1.32k|{
 4752|  1.32k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  1.32k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  1.32k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 518, False: 806]
  ------------------
 4756|    518|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    518|                                     "Invalid encoding in scanned string");
 4758|    518|    }
 4759|    806|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    806|    static_cast<    \
  |  |  929|    806|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    806|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    806|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 806]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    806|    return SCN_MOVE(result);
  ------------------
  |  |  928|    806|    static_cast<    \
  |  |  929|    806|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    806|}
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4890|  9.02k|    {
 4891|  9.02k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|  9.02k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  9.02k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  9.02k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  9.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8.05k, False: 964]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  8.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  8.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  8.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  8.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  8.05k|    }                                                  \
  |  |  |  | 3671|  9.02k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    964|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|    964|        return read_string_impl(range, it, value);
 4893|  9.02k|    }
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEEDav:
 5808|  11.0k|{
 5809|  11.0k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  11.0k|        return reader_impl_for_bool<CharT>{};
 5811|  11.0k|    }
 5812|  11.0k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  11.0k|        return reader_impl_for_char<CharT>{};
 5814|  11.0k|    }
 5815|  11.0k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  11.0k|        return reader_impl_for_wchar<CharT>{};
 5817|  11.0k|    }
 5818|  11.0k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  11.0k|        return reader_impl_for_code_point<CharT>{};
 5820|  11.0k|    }
 5821|  11.0k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  11.0k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  11.0k|        return reader_impl_for_string<CharT>{};
 5824|  11.0k|    }
 5825|  11.0k|    else if constexpr (std::is_same_v<T, std::string> ||
 5826|  11.0k|                       std::is_same_v<T, std::wstring>) {
 5827|  11.0k|        return reader_impl_for_string<CharT>{};
 5828|  11.0k|    }
 5829|  11.0k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  11.0k|                       std::is_same_v<T, wregex_matches>) {
 5831|  11.0k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  11.0k|    }
 5833|  11.0k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  11.0k|        return reader_impl_for_voidptr<CharT>{};
 5835|  11.0k|    }
 5836|  11.0k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  11.0k|        return reader_impl_for_float<CharT>{};
 5838|  11.0k|    }
 5839|  11.0k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  11.0k|                       !std::is_same_v<T, wchar_t> &&
 5841|  11.0k|                       !std::is_same_v<T, char32_t> &&
 5842|  11.0k|                       !std::is_same_v<T, bool>) {
 5843|  11.0k|        return reader_impl_for_int<CharT>{};
 5844|  11.0k|    }
 5845|  11.0k|    else {
 5846|  11.0k|        return reader_impl_for_monostate<CharT>{};
 5847|  11.0k|    }
 5848|  11.0k|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|    290|    {
 5277|    290|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    290|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|    290|        return read_impl(range, specs, value);
 5279|    290|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|    290|    {
 5295|    290|        SCN_CLANG_PUSH
 5296|    290|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|    290|        switch (m_type) {
 5299|    198|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 198, False: 92]
  ------------------
 5300|    198|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     38|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 38, False: 252]
  ------------------
 5303|     38|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     38|                                                                   value);
 5305|       |
 5306|     26|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 26, False: 264]
  ------------------
 5307|     26|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|      0|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 0, False: 290]
  ------------------
 5310|      0|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|      0|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|     10|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 10, False: 280]
  ------------------
 5315|     10|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|     10|                    range, specs.charset_string<SourceCharT>(),
 5317|     10|                    specs.regexp_flags, value);
 5318|       |
 5319|     18|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 18, False: 272]
  ------------------
 5320|     18|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|     18|                    range,
 5322|     18|                    get_unescaped_regex_pattern(
 5323|     18|                        specs.charset_string<SourceCharT>()),
 5324|     18|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 290]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|    290|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|    290|        }
 5331|       |
 5332|    290|        SCN_CLANG_POP
 5333|    290|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4826|    198|    {
 4827|    198|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|    198|                                     value);
 4829|    198|    }
_ZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEE:
 4772|    262|{
 4773|    262|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    262|    auto src = [&]() {
 4776|    262|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    262|            return make_contiguous_buffer(
 4778|    262|                ranges::subrange{range.begin().base(), result.base()});
 4779|    262|        }
 4780|    262|        else {
 4781|    262|            return make_contiguous_buffer(
 4782|    262|                ranges::subrange{range.begin(), result});
 4783|    262|        }
 4784|    262|    }();
 4785|    262|    using src_type = decltype(src);
 4786|       |
 4787|    262|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|    262|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|    262|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|    262|                                     "Cannot read a string_view from "
 4796|    262|                                     "this source range (would require "
 4797|    262|                                     "transcoding)");
 4798|    262|    }
 4799|    262|    else {
 4800|    262|        const auto view = src.view();
 4801|    262|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    262|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 138, False: 124]
  ------------------
 4804|    138|            return unexpected_scan_error(
 4805|    138|                scan_error::invalid_scanned_value,
 4806|    138|                "Invalid encoding in scanned string_view");
 4807|    138|        }
 4808|       |
 4809|    124|        return SCN_MOVE(result);
  ------------------
  |  |  928|    124|    static_cast<    \
  |  |  929|    124|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    262|    }
 4811|    262|}
_ZZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEEENKUlvE_clEv:
 4775|    262|    auto src = [&]() {
 4776|    262|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|    262|            return make_contiguous_buffer(
 4778|    262|                ranges::subrange{range.begin().base(), result.base()});
 4779|    262|        }
 4780|    262|        else {
 4781|    262|            return make_contiguous_buffer(
 4782|    262|                ranges::subrange{range.begin(), result});
 4783|    262|        }
 4784|    262|    }();
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 4862|     38|    {
 4863|     38|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4863:13): [True: 38, False: 0]
  ------------------
 4864|     38|            return read_string_view_impl(
 4865|     38|                range,
 4866|     38|                read_until_code_unit(
 4867|     38|                    range,
 4868|     38|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4869|     38|                        SourceCharT ch) { return ch == until; }),
 4870|     38|                value);
 4871|     38|        }
 4872|      0|        return read_string_view_impl(
 4873|      0|            range,
 4874|      0|            read_until_code_units(
 4875|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4876|      0|            value);
 4877|     38|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlwE_S11_LPv0EEEOSL_:
  753|     38|    {
  754|     38|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlwE_S11_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  743|    374|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    374|              cvref<T> obj = *get<T>(fn);
  745|    374|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    374|                  obj(static_cast<decltype(args)>(args)...);
  747|    374|              }
  748|    374|              else {
  749|    374|                  return obj(static_cast<decltype(args)>(args)...);
  750|    374|              }
  751|    374|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_17basic_string_viewIT0_NSI_11char_traitsISV_EEEEEUlwE_EEDaNS3_7storageE:
  683|    374|    {
  684|    374|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    374|            return static_cast<T*>(s.m_cp);
  686|    374|        }
  687|    374|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    374|            return static_cast<T*>(s.m_p);
  689|    374|        }
  690|    374|        else {
  691|    374|            return reinterpret_cast<T*>(s.m_fp);
  692|    374|        }
  693|    374|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEEENKUlwE_clEw:
 4869|    374|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlwE_LPv0EEEPSL_:
  661|     38|        {
  662|     38|        }
_ZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4958|     26|    {
 4959|     26|        return read_impl(
 4960|     26|            range,
 4961|     26|            [&](const auto& rng) {
 4962|     26|                return read_string_view_impl(rng, read_all(rng), value);
 4963|     26|            },
 4964|     26|            detail::priority_tag<1>{});
 4965|     26|    }
_ZN3scn2v34impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_17basic_string_viewIT0_NSG_11char_traitsISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSX_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     26|    {
 4974|     26|        return read_cb(range);
 4975|     26|    }
_ZZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEEENKUlRKSH_E_clISD_EEDaSU_:
 4961|     26|            [&](const auto& rng) {
 4962|     26|                return read_string_view_impl(rng, read_all(rng), value);
 4963|     26|            },
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsERNSN_IT0_NSO_IST_EEEE:
 4901|     28|    {
 4902|     28|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|     28|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     28|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     28|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     28|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 28, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     28|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     28|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     28|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     28|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     28|    }                                                  \
  |  |  |  | 3671|     28|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4903|      0|        return read_string_view_impl(range, it, value);
 4904|     28|    }
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5276|  9.93k|    {
 5277|  9.93k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  9.93k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  9.93k|        return read_impl(range, specs, value);
 5279|  9.93k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5294|  9.93k|    {
 5295|  9.93k|        SCN_CLANG_PUSH
 5296|  9.93k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  9.93k|        switch (m_type) {
 5299|    442|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 442, False: 9.49k]
  ------------------
 5300|    442|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     34|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 34, False: 9.90k]
  ------------------
 5303|     34|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     34|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 9.93k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    438|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 438, False: 9.49k]
  ------------------
 5310|    438|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    438|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  8.85k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 8.85k, False: 1.08k]
  ------------------
 5315|  8.85k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  8.85k|                    range, specs.charset_string<SourceCharT>(),
 5317|  8.85k|                    specs.regexp_flags, value);
 5318|       |
 5319|    166|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 166, False: 9.76k]
  ------------------
 5320|    166|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    166|                    range,
 5322|    166|                    get_unescaped_regex_pattern(
 5323|    166|                        specs.charset_string<SourceCharT>()),
 5324|    166|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 9.93k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  9.93k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  9.93k|        }
 5331|       |
 5332|  9.93k|        SCN_CLANG_POP
 5333|  9.93k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4826|  1.09k|    {
 4827|  1.09k|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|  1.09k|                                     value);
 4829|  1.09k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4772|  1.13k|{
 4773|  1.13k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|  1.13k|    auto src = [&]() {
 4776|  1.13k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|  1.13k|            return make_contiguous_buffer(
 4778|  1.13k|                ranges::subrange{range.begin().base(), result.base()});
 4779|  1.13k|        }
 4780|  1.13k|        else {
 4781|  1.13k|            return make_contiguous_buffer(
 4782|  1.13k|                ranges::subrange{range.begin(), result});
 4783|  1.13k|        }
 4784|  1.13k|    }();
 4785|  1.13k|    using src_type = decltype(src);
 4786|       |
 4787|  1.13k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|  1.13k|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|  1.13k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|  1.13k|                                     "Cannot read a string_view from "
 4796|  1.13k|                                     "this source range (would require "
 4797|  1.13k|                                     "transcoding)");
 4798|  1.13k|    }
 4799|  1.13k|    else {
 4800|  1.13k|        const auto view = src.view();
 4801|  1.13k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|  1.13k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 358, False: 774]
  ------------------
 4804|    358|            return unexpected_scan_error(
 4805|    358|                scan_error::invalid_scanned_value,
 4806|    358|                "Invalid encoding in scanned string_view");
 4807|    358|        }
 4808|       |
 4809|    774|        return SCN_MOVE(result);
  ------------------
  |  |  928|    774|    static_cast<    \
  |  |  929|    774|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|  1.13k|    }
 4811|  1.13k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4775|  1.13k|    auto src = [&]() {
 4776|  1.13k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|  1.13k|            return make_contiguous_buffer(
 4778|  1.13k|                ranges::subrange{range.begin().base(), result.base()});
 4779|  1.13k|        }
 4780|  1.13k|        else {
 4781|  1.13k|            return make_contiguous_buffer(
 4782|  1.13k|                ranges::subrange{range.begin(), result});
 4783|  1.13k|        }
 4784|  1.13k|    }();
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 4862|     34|    {
 4863|     34|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4863:13): [True: 34, False: 0]
  ------------------
 4864|     34|            return read_string_view_impl(
 4865|     34|                range,
 4866|     34|                read_until_code_unit(
 4867|     34|                    range,
 4868|     34|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4869|     34|                        SourceCharT ch) { return ch == until; }),
 4870|     34|                value);
 4871|     34|        }
 4872|      0|        return read_string_view_impl(
 4873|      0|            range,
 4874|      0|            read_until_code_units(
 4875|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4876|      0|            value);
 4877|     34|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_SZ_LPv0EEEOSJ_:
  753|     34|    {
  754|     34|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_SZ_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES14_w:
  743|    806|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    806|              cvref<T> obj = *get<T>(fn);
  745|    806|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    806|                  obj(static_cast<decltype(args)>(args)...);
  747|    806|              }
  748|    806|              else {
  749|    806|                  return obj(static_cast<decltype(args)>(args)...);
  750|    806|              }
  751|    806|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_17basic_string_viewIT0_NSG_11char_traitsIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    806|    {
  684|    806|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    806|            return static_cast<T*>(s.m_cp);
  686|    806|        }
  687|    806|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    806|            return static_cast<T*>(s.m_p);
  689|    806|        }
  690|    806|        else {
  691|    806|            return reinterpret_cast<T*>(s.m_fp);
  692|    806|        }
  693|    806|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEEENKUlwE_clEw:
 4869|    806|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_LPv0EEEPSJ_:
  661|     34|        {
  662|     34|        }
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5061|    438|    {
 5062|    438|        auto it = read_source_impl(range, {specs});
 5063|    438|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    438|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 78, False: 360]
  |  |  ------------------
  ------------------
 5064|     78|            return unexpected(it.error());
 5065|     78|        }
 5066|       |
 5067|    360|        return read_string_view_impl(range, *it, value);
 5068|    438|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4772|  1.32k|{
 4773|  1.32k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|  1.32k|    auto src = [&]() {
 4776|  1.32k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|  1.32k|            return make_contiguous_buffer(
 4778|  1.32k|                ranges::subrange{range.begin().base(), result.base()});
 4779|  1.32k|        }
 4780|  1.32k|        else {
 4781|  1.32k|            return make_contiguous_buffer(
 4782|  1.32k|                ranges::subrange{range.begin(), result});
 4783|  1.32k|        }
 4784|  1.32k|    }();
 4785|  1.32k|    using src_type = decltype(src);
 4786|       |
 4787|  1.32k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|  1.32k|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|  1.32k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|  1.32k|                                     "Cannot read a string_view from "
 4796|  1.32k|                                     "this source range (would require "
 4797|  1.32k|                                     "transcoding)");
 4798|  1.32k|    }
 4799|  1.32k|    else {
 4800|  1.32k|        const auto view = src.view();
 4801|  1.32k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|  1.32k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 518, False: 806]
  ------------------
 4804|    518|            return unexpected_scan_error(
 4805|    518|                scan_error::invalid_scanned_value,
 4806|    518|                "Invalid encoding in scanned string_view");
 4807|    518|        }
 4808|       |
 4809|    806|        return SCN_MOVE(result);
  ------------------
  |  |  928|    806|    static_cast<    \
  |  |  929|    806|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|  1.32k|    }
 4811|  1.32k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4775|  1.32k|    auto src = [&]() {
 4776|  1.32k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|  1.32k|            return make_contiguous_buffer(
 4778|  1.32k|                ranges::subrange{range.begin().base(), result.base()});
 4779|  1.32k|        }
 4780|  1.32k|        else {
 4781|  1.32k|            return make_contiguous_buffer(
 4782|  1.32k|                ranges::subrange{range.begin(), result});
 4783|  1.32k|        }
 4784|  1.32k|    }();
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsERNSL_IT0_NSM_ISR_EEEE:
 4901|  9.02k|    {
 4902|  9.02k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|  9.02k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  9.02k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  9.02k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  9.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8.05k, False: 964]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  8.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  8.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  8.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  8.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  8.05k|    }                                                  \
  |  |  |  | 3671|  9.02k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    964|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4903|    964|        return read_string_view_impl(range, it, value);
 4904|  9.02k|    }
_ZN3scn2v34impl22make_contiguous_bufferIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 1682|  9.62k|{
 1683|  9.62k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  9.62k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  9.62k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  9.62k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  9.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  9.62k|    }
 1688|  9.62k|    else {
 1689|  9.62k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  9.62k|    }
 1691|  9.62k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEELPv0EEEOT_:
 1489|  9.62k|    {
 1490|  9.62k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIdEET_S5_:
 4099|  1.02k|    {
 4100|  1.02k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 0, False: 1.02k]
  ------------------
 4101|      0|            return std::copysign(value, T{-1.0});
 4102|      0|        }
 4103|  1.02k|        return std::copysign(value, T{1.0});
 4104|  1.02k|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIdEET_S5_:
 4099|  1.10k|    {
 4100|  1.10k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 0, False: 1.10k]
  ------------------
 4101|      0|            return std::copysign(value, T{-1.0});
 4102|      0|        }
 4103|  1.10k|        return std::copysign(value, T{1.0});
 4104|  1.10k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|  6.67k|{
 5795|  6.67k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.67k]
  |  |  ------------------
  ------------------
 5796|      0|        return unexpected(e);
 5797|      0|    }
 5798|       |
 5799|  6.67k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 742, False: 5.93k]
  ------------------
 5800|    742|        return range.begin();
 5801|    742|    }
 5802|       |
 5803|  5.93k|    return skip_classic_whitespace(range);
 5804|  6.67k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
 5870|    742|    {
 5871|    742|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    742|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    742|                          basic_contiguous_scan_context<char_type>>) {
 5875|    742|            auto rd = make_reader<T, char_type>();
 5876|    742|            return impl(rd, range, value);
 5877|    742|        }
 5878|    742|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    742|            auto rd = make_reader<T, char_type>();
 5880|    742|            if (!is_segment_contiguous(range)) {
 5881|    742|                return impl(rd, range, value);
 5882|    742|            }
 5883|    742|            auto crange = get_as_contiguous(range);
 5884|    742|            SCN_TRY(it, impl(rd, crange, value));
 5885|    742|            return ranges::next(range.begin(),
 5886|    742|                                ranges::distance(crange.begin(), it));
 5887|    742|        }
 5888|    742|        else {
 5889|    742|            SCN_EXPECT(false);
 5890|    742|            SCN_UNREACHABLE;
 5891|    742|        }
 5892|    742|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    742|    {
 5863|    742|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    742|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    742|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    742|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    742|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 742]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    742|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    742|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    742|                        .transform_error(make_eof_scan_error));
 5865|    742|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    742|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|    742|    {
 3528|    742|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    742|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|    742|        return read_default_with_base(range, value, 10);
 3530|    742|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
 5870|    742|    {
 5871|    742|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    742|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    742|                          basic_contiguous_scan_context<char_type>>) {
 5875|    742|            auto rd = make_reader<T, char_type>();
 5876|    742|            return impl(rd, range, value);
 5877|    742|        }
 5878|    742|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    742|            auto rd = make_reader<T, char_type>();
 5880|    742|            if (!is_segment_contiguous(range)) {
 5881|    742|                return impl(rd, range, value);
 5882|    742|            }
 5883|    742|            auto crange = get_as_contiguous(range);
 5884|    742|            SCN_TRY(it, impl(rd, crange, value));
 5885|    742|            return ranges::next(range.begin(),
 5886|    742|                                ranges::distance(crange.begin(), it));
 5887|    742|        }
 5888|    742|        else {
 5889|    742|            SCN_EXPECT(false);
 5890|    742|            SCN_UNREACHABLE;
 5891|    742|        }
 5892|    742|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    742|    {
 5863|    742|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    742|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    742|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    742|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    742|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 742]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    742|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    742|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    742|                        .transform_error(make_eof_scan_error));
 5865|    742|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    742|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|    742|    {
 3528|    742|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    742|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|    742|        return read_default_with_base(range, value, 10);
 3530|    742|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIPvEENS0_13scan_expectedIPKcEERT_:
 5870|    742|    {
 5871|    742|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    742|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    742|                          basic_contiguous_scan_context<char_type>>) {
 5875|    742|            auto rd = make_reader<T, char_type>();
 5876|    742|            return impl(rd, range, value);
 5877|    742|        }
 5878|    742|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    742|            auto rd = make_reader<T, char_type>();
 5880|    742|            if (!is_segment_contiguous(range)) {
 5881|    742|                return impl(rd, range, value);
 5882|    742|            }
 5883|    742|            auto crange = get_as_contiguous(range);
 5884|    742|            SCN_TRY(it, impl(rd, crange, value));
 5885|    742|            return ranges::next(range.begin(),
 5886|    742|                                ranges::distance(crange.begin(), it));
 5887|    742|        }
 5888|    742|        else {
 5889|    742|            SCN_EXPECT(false);
 5890|    742|            SCN_UNREACHABLE;
 5891|    742|        }
 5892|    742|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_23reader_impl_for_voidptrIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 5862|    742|    {
 5863|    742|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    742|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    742|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    742|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    742|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 742]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    742|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    742|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    742|                        .transform_error(make_eof_scan_error));
 5865|    742|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    742|    }
_ZNK3scn2v34impl23reader_impl_for_voidptrIcE19skip_ws_before_readEv:
 5747|  1.45k|    {
 5748|  1.45k|        return true;
 5749|  1.45k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RPvNS0_6detail10locale_refE:
 5764|    980|    {
 5765|    980|        detail::format_specs specs{};
 5766|    980|        specs.type = detail::presentation_type::int_hex;
 5767|       |
 5768|    980|        std::uintptr_t intvalue{};
 5769|    980|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3672|    980|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    980|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    980|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    980|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 980, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    980|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    980|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    980|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    980|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    980|    }                                                  \
  |  |  |  | 3671|    980|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5770|      0|                                                                intvalue, loc));
 5771|      0|        value = reinterpret_cast<void*>(intvalue);
 5772|      0|        return result;
 5773|    980|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIbEENS0_13scan_expectedIPKcEERT_:
 5870|    742|    {
 5871|    742|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    742|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    742|                          basic_contiguous_scan_context<char_type>>) {
 5875|    742|            auto rd = make_reader<T, char_type>();
 5876|    742|            return impl(rd, range, value);
 5877|    742|        }
 5878|    742|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    742|            auto rd = make_reader<T, char_type>();
 5880|    742|            if (!is_segment_contiguous(range)) {
 5881|    742|                return impl(rd, range, value);
 5882|    742|            }
 5883|    742|            auto crange = get_as_contiguous(range);
 5884|    742|            SCN_TRY(it, impl(rd, crange, value));
 5885|    742|            return ranges::next(range.begin(),
 5886|    742|                                ranges::distance(crange.begin(), it));
 5887|    742|        }
 5888|    742|        else {
 5889|    742|            SCN_EXPECT(false);
 5890|    742|            SCN_UNREACHABLE;
 5891|    742|        }
 5892|    742|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_boolIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    742|    {
 5863|    742|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    742|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    742|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    742|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    742|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 742]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    742|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    742|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    742|                        .transform_error(make_eof_scan_error));
 5865|    742|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    742|    }
_ZNK3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIcEEcE19skip_ws_before_readEv:
 3034|  1.74k|    {
 3035|  1.74k|        return true;
 3036|  1.74k|    }
_ZNK3scn2v34impl20reader_impl_for_boolIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNS0_6detail10locale_refE:
 5503|    742|    {
 5504|    742|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    742|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5505|       |
 5506|    742|        return bool_reader<CharT>{}.read_classic(range, value);
 5507|    742|    }
_ZN3scn2v34impl16bool_reader_baseC2Ev:
 5348|  1.39k|    constexpr bool_reader_base() = default;
_ZNK3scn2v34impl16bool_reader_base12read_classicINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5354|  1.10k|    {
 5355|  1.10k|        scan_error err{scan_error::invalid_scanned_value,
 5356|  1.10k|                       "Failed to read boolean"};
 5357|       |
 5358|  1.10k|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5358:13): [True: 998, False: 110]
  ------------------
 5359|    998|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5359:22): [True: 0, False: 998]
  ------------------
 5360|      0|                return *r;
 5361|      0|            }
 5362|    998|            else {
 5363|    998|                err = r.error();
 5364|    998|            }
 5365|    998|        }
 5366|       |
 5367|  1.10k|        if (m_options & allow_text) {
  ------------------
  |  Branch (5367:13): [True: 1.08k, False: 22]
  ------------------
 5368|  1.08k|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5368:22): [True: 0, False: 1.08k]
  ------------------
 5369|      0|                return *r;
 5370|      0|            }
 5371|  1.08k|            else {
 5372|  1.08k|                err = r.error();
 5373|  1.08k|            }
 5374|  1.08k|        }
 5375|       |
 5376|  1.10k|        return unexpected(err);
 5377|  1.10k|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5383|  1.04k|    {
 5384|  1.04k|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5384:18): [True: 0, False: 1.04k]
  ------------------
 5385|      0|            value = false;
 5386|      0|            return *r;
 5387|      0|        }
 5388|  1.04k|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5388:18): [True: 0, False: 1.04k]
  ------------------
 5389|      0|            value = true;
 5390|      0|            return *r;
 5391|      0|        }
 5392|       |
 5393|  1.04k|        return unexpected_scan_error(
 5394|  1.04k|            scan_error::invalid_scanned_value,
 5395|  1.04k|            "Failed to read numeric boolean value: No match");
 5396|  1.04k|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5401|  1.08k|    {
 5402|  1.08k|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5402:18): [True: 0, False: 1.08k]
  ------------------
 5403|      0|            value = true;
 5404|      0|            return *r;
 5405|      0|        }
 5406|  1.08k|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5406:18): [True: 0, False: 1.08k]
  ------------------
 5407|      0|            value = false;
 5408|      0|            return *r;
 5409|      0|        }
 5410|       |
 5411|  1.08k|        return unexpected_scan_error(
 5412|  1.08k|            scan_error::invalid_scanned_value,
 5413|  1.08k|            "Failed to read textual boolean value: No match");
 5414|  1.08k|    }
_ZN3scn2v34impl28read_matching_string_classicINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2193|  2.17k|{
 2194|  2.17k|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  2.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 100, False: 2.07k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    100|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    100|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    100|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    100|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    100|    }                                                  \
  |  |  |  | 3671|  2.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.07k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2195|  2.07k|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2196|  2.07k|                    .transform_error(make_eof_parse_error));
 2197|       |
 2198|  2.07k|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2198:19): [Folded - Ignored]
  ------------------
 2199|  2.07k|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2200|  2.07k|        if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|  2.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.07k, False: 0]
  |  |  ------------------
  ------------------
 2201|  2.07k|            return unexpected(parse_error::error);
 2202|  2.07k|        }
 2203|      0|        return it;
 2204|  2.07k|    }
 2205|  2.07k|    else {
 2206|  2.07k|        auto range_it = range.begin();
 2207|  2.07k|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
 2208|  2.07k|            if (SCN_UNLIKELY(*range_it !=
 2209|  2.07k|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2210|  2.07k|                return unexpected(parse_error::error);
 2211|  2.07k|            }
 2212|  2.07k|        }
 2213|  2.07k|        return it;
 2214|  2.07k|    }
 2215|  2.07k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIcEENS0_13scan_expectedIPKcEERT_:
 5870|    742|    {
 5871|    742|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    742|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    742|                          basic_contiguous_scan_context<char_type>>) {
 5875|    742|            auto rd = make_reader<T, char_type>();
 5876|    742|            return impl(rd, range, value);
 5877|    742|        }
 5878|    742|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    742|            auto rd = make_reader<T, char_type>();
 5880|    742|            if (!is_segment_contiguous(range)) {
 5881|    742|                return impl(rd, range, value);
 5882|    742|            }
 5883|    742|            auto crange = get_as_contiguous(range);
 5884|    742|            SCN_TRY(it, impl(rd, crange, value));
 5885|    742|            return ranges::next(range.begin(),
 5886|    742|                                ranges::distance(crange.begin(), it));
 5887|    742|        }
 5888|    742|        else {
 5889|    742|            SCN_EXPECT(false);
 5890|    742|            SCN_UNREACHABLE;
 5891|    742|        }
 5892|    742|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_charIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    742|    {
 5863|    742|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    742|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    742|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    742|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    742|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 742]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    742|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    742|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    742|                        .transform_error(make_eof_scan_error));
 5865|    742|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    742|    }
_ZN3scn2v34impl12float_readerIcEC2Ev:
 3657|    742|    constexpr float_reader() = default;
_ZN3scn2v34impl17float_reader_baseC2Ev:
 3643|  1.39k|    constexpr float_reader_base() = default;
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 5870|    742|    {
 5871|    742|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    742|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    742|                          basic_contiguous_scan_context<char_type>>) {
 5875|    742|            auto rd = make_reader<T, char_type>();
 5876|    742|            return impl(rd, range, value);
 5877|    742|        }
 5878|    742|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    742|            auto rd = make_reader<T, char_type>();
 5880|    742|            if (!is_segment_contiguous(range)) {
 5881|    742|                return impl(rd, range, value);
 5882|    742|            }
 5883|    742|            auto crange = get_as_contiguous(range);
 5884|    742|            SCN_TRY(it, impl(rd, crange, value));
 5885|    742|            return ranges::next(range.begin(),
 5886|    742|                                ranges::distance(crange.begin(), it));
 5887|    742|        }
 5888|    742|        else {
 5889|    742|            SCN_EXPECT(false);
 5890|    742|            SCN_UNREACHABLE;
 5891|    742|        }
 5892|    742|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    742|    {
 5863|    742|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    742|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    742|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    742|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    742|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 742]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    742|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    742|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    742|                        .transform_error(make_eof_scan_error));
 5865|    742|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    742|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|    742|    {
 4152|    742|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    742|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|    742|        float_reader<CharT> rd{};
 4155|    742|        return read_impl<Range>(
 4156|    742|            range, rd,
 4157|    742|            [](float_reader<CharT>& r, auto&&... args) {
 4158|    742|                return r.read_source(SCN_FWD(args)...);
 4159|    742|            },
 4160|    742|            value);
 4161|    742|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|    742|    {
  754|    742|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|    742|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    742|              cvref<T> obj = *get<T>(fn);
  745|    742|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    742|                  obj(static_cast<decltype(args)>(args)...);
  747|    742|              }
  748|    742|              else {
  749|    742|                  return obj(static_cast<decltype(args)>(args)...);
  750|    742|              }
  751|    742|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|    742|    {
  684|    742|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    742|            return static_cast<T*>(s.m_cp);
  686|    742|        }
  687|    742|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    742|            return static_cast<T*>(s.m_p);
  689|    742|        }
  690|    742|        else {
  691|    742|            return reinterpret_cast<T*>(s.m_fp);
  692|    742|        }
  693|    742|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|    742|            [](float_reader<CharT>& r, auto&&... args) {
 4158|    742|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    742|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|    742|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|    742|        {
  662|    742|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5870|    742|    {
 5871|    742|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    742|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    742|                          basic_contiguous_scan_context<char_type>>) {
 5875|    742|            auto rd = make_reader<T, char_type>();
 5876|    742|            return impl(rd, range, value);
 5877|    742|        }
 5878|    742|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    742|            auto rd = make_reader<T, char_type>();
 5880|    742|            if (!is_segment_contiguous(range)) {
 5881|    742|                return impl(rd, range, value);
 5882|    742|            }
 5883|    742|            auto crange = get_as_contiguous(range);
 5884|    742|            SCN_TRY(it, impl(rd, crange, value));
 5885|    742|            return ranges::next(range.begin(),
 5886|    742|                                ranges::distance(crange.begin(), it));
 5887|    742|        }
 5888|    742|        else {
 5889|    742|            SCN_EXPECT(false);
 5890|    742|            SCN_UNREACHABLE;
 5891|    742|        }
 5892|    742|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5862|    742|    {
 5863|    742|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    742|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    742|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    742|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    742|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 742]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    742|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    742|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    742|                        .transform_error(make_eof_scan_error));
 5865|    742|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    742|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5265|    742|    {
 5266|    742|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    742|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    742|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    742|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5870|    742|    {
 5871|    742|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    742|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    742|                          basic_contiguous_scan_context<char_type>>) {
 5875|    742|            auto rd = make_reader<T, char_type>();
 5876|    742|            return impl(rd, range, value);
 5877|    742|        }
 5878|    742|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    742|            auto rd = make_reader<T, char_type>();
 5880|    742|            if (!is_segment_contiguous(range)) {
 5881|    742|                return impl(rd, range, value);
 5882|    742|            }
 5883|    742|            auto crange = get_as_contiguous(range);
 5884|    742|            SCN_TRY(it, impl(rd, crange, value));
 5885|    742|            return ranges::next(range.begin(),
 5886|    742|                                ranges::distance(crange.begin(), it));
 5887|    742|        }
 5888|    742|        else {
 5889|    742|            SCN_EXPECT(false);
 5890|    742|            SCN_UNREACHABLE;
 5891|    742|        }
 5892|    742|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|    742|    {
 5863|    742|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    742|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    742|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    742|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    742|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 742]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    742|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    742|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    742|                        .transform_error(make_eof_scan_error));
 5865|    742|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    742|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|    742|    {
 5266|    742|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    742|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    742|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    742|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKcEERT_:
 5870|    742|    {
 5871|    742|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    742|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    742|                          basic_contiguous_scan_context<char_type>>) {
 5875|    742|            auto rd = make_reader<T, char_type>();
 5876|    742|            return impl(rd, range, value);
 5877|    742|        }
 5878|    742|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    742|            auto rd = make_reader<T, char_type>();
 5880|    742|            if (!is_segment_contiguous(range)) {
 5881|    742|                return impl(rd, range, value);
 5882|    742|            }
 5883|    742|            auto crange = get_as_contiguous(range);
 5884|    742|            SCN_TRY(it, impl(rd, crange, value));
 5885|    742|            return ranges::next(range.begin(),
 5886|    742|                                ranges::distance(crange.begin(), it));
 5887|    742|        }
 5888|    742|        else {
 5889|    742|            SCN_EXPECT(false);
 5890|    742|            SCN_UNREACHABLE;
 5891|    742|        }
 5892|    742|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|    742|    {
 5863|    742|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    742|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    742|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    742|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    742|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 742]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    742|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    742|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    742|                        .transform_error(make_eof_scan_error));
 5865|    742|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    742|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|    742|    {
 5266|    742|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    742|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    742|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    742|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2878|   267k|    {
 2879|   267k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2882|   528k|    {
 2883|   528k|        return m_current;
 2884|   528k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2887|   350k|    {
 2888|   350k|        return m_range.end();
 2889|   350k|    }
_ZN3scn2v34impl19is_first_char_spaceIcEENS1_26is_first_char_space_resultIT_EENSt3__117basic_string_viewIS4_NS6_11char_traitsIS4_EEEE:
 1220|  89.8k|{
 1221|       |    // TODO: optimize
 1222|  89.8k|    SCN_EXPECT(!str.empty());
  ------------------
  |  |  924|  89.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  89.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1223|  89.8k|    auto res = get_next_code_point(str);
 1224|  89.8k|    return {res.iterator, res.value, is_cp_space(res.value)};
 1225|  89.8k|}
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2902|  93.4k|    {
 2903|  93.4k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|  93.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  93.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|  93.4k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|  93.4k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 93.4k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|  93.4k|        }
 2909|  93.4k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  93.4k|    static_cast<    \
  |  |  929|  93.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|  93.4k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2892|   165k|    {
 2893|   165k|        return ranges::subrange{begin(), end()};
 2894|   165k|    }
_ZN3scn2v34impl24read_while_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2116|  9.62k|{
 2117|  9.62k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  9.62k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  9.62k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  9.62k|        auto buf = make_contiguous_buffer(range);
 2121|  9.62k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  9.62k|        return ranges::next(range.begin(),
 2123|  9.62k|                            ranges::distance(buf.view().begin(), it));
 2124|  9.62k|    }
 2125|  9.62k|    else {
 2126|  9.62k|        auto it = range.begin();
 2127|       |
 2128|  9.62k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|  9.62k|            auto seg = get_contiguous_beginning(range);
 2130|  9.62k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  9.62k|                seg_it != seg.end()) {
 2132|  9.62k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  9.62k|            }
 2134|  9.62k|            ranges::advance(it, seg.size());
 2135|  9.62k|        }
 2136|       |
 2137|  9.62k|        return read_while_code_point(
 2138|  9.62k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  9.62k|    }
 2140|  9.62k|}
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_b:
 6036|  9.04k|    {
 6037|  9.04k|        const bool need_skipped_width =
 6038|  9.04k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 184, False: 8.86k]
  |  Branch (6038:33): [True: 8.86k, False: 0]
  ------------------
 6039|  9.04k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  9.04k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 772, False: 8.27k]
  ------------------
 6043|  9.04k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 540, False: 7.73k]
  ------------------
 6044|  1.31k|            return skip_fill(rng, specs.precision, specs.fill,
 6045|  1.31k|                             need_skipped_width);
 6046|  1.31k|        }
 6047|  7.73k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 7.34k, False: 388]
  |  Branch (6047:56): [True: 3.62k, False: 3.72k]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  3.62k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 3.62k, False: 0]
  ------------------
 6051|  3.62k|                auto max_width_view = take_width(rng, specs.precision);
 6052|  3.62k|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|  3.62k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  3.62k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  3.62k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.62k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 134, False: 3.49k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    134|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    134|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    134|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    134|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    134|    }                                                  \
  |  |  |  | 3671|  3.62k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|  3.49k|                                  .transform_error(make_eof_scan_error));
 6054|  3.49k|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|  3.62k|            }
 6056|      0|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|      0|                            make_eof_scan_error));
 6058|       |
 6059|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 0]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|      0|            return result_type{it, 0};
 6067|      0|        }
 6068|       |
 6069|  4.10k|        return result_type{rng.begin(), 0};
 6070|  7.73k|    }
_ZN3scn2v34impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEb:
 5950|  1.31k|{
 5951|  1.31k|    using char_type = detail::char_t<Range>;
 5952|  1.31k|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5953|       |
 5954|  1.31k|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5954:9): [True: 1.06k, False: 248]
  ------------------
 5955|  1.06k|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5956|  1.06k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5957|       |
 5958|  1.06k|        if (max_width == 0) {
  ------------------
  |  Branch (5958:13): [True: 0, False: 1.06k]
  ------------------
 5959|      0|            auto it = read_while_code_unit(range, pred);
 5960|       |
 5961|      0|            if (want_skipped_width) {
  ------------------
  |  Branch (5961:17): [True: 0, False: 0]
  ------------------
 5962|      0|                auto prefix_width =
 5963|      0|                    static_cast<std::ptrdiff_t>(
 5964|      0|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5965|      0|                    ranges::distance(range.begin(), it);
 5966|      0|                return result_type{it, prefix_width};
 5967|      0|            }
 5968|      0|            return result_type{it, 0};
 5969|      0|        }
 5970|       |
 5971|  1.06k|        auto max_width_view = take_width(range, max_width);
 5972|  1.06k|        auto w_it = read_while_code_unit(max_width_view, pred);
 5973|       |
 5974|  1.06k|        if (want_skipped_width) {
  ------------------
  |  Branch (5974:13): [True: 1.06k, False: 0]
  ------------------
 5975|  1.06k|            return result_type{w_it.base(), max_width - w_it.count()};
 5976|  1.06k|        }
 5977|      0|        return result_type{w_it.base(), 0};
 5978|  1.06k|    }
 5979|       |
 5980|    248|    const auto fill_chars = fill.template get_code_units<char_type>();
 5981|    248|    if (max_width == 0) {
  ------------------
  |  Branch (5981:9): [True: 0, False: 248]
  ------------------
 5982|      0|        auto it = read_while_code_units(range, fill_chars);
 5983|       |
 5984|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (5984:13): [True: 0, False: 0]
  ------------------
 5985|      0|            auto prefix_width =
 5986|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5987|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5988|      0|            return result_type{it, prefix_width};
 5989|      0|        }
 5990|      0|        return result_type{it, 0};
 5991|      0|    }
 5992|       |
 5993|    248|    auto max_width_view = take_width(range, max_width);
 5994|    248|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5995|       |
 5996|    248|    if (want_skipped_width) {
  ------------------
  |  Branch (5996:9): [True: 248, False: 0]
  ------------------
 5997|    248|        return result_type{w_it.base(), max_width - w_it.count()};
 5998|    248|    }
 5999|      0|    return result_type{w_it.base(), 0};
 6000|    248|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_ST_LPv0EEEOSJ_:
  753|  1.06k|    {
  754|  1.06k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_ST_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESZ_c:
  743|  1.37k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.37k|              cvref<T> obj = *get<T>(fn);
  745|  1.37k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.37k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.37k|              }
  748|  1.37k|              else {
  749|  1.37k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.37k|              }
  751|  1.37k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESI_lRKNS0_6detail9fill_typeEbEUlcE_EEDaNS3_7storageE:
  683|  1.37k|    {
  684|  1.37k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.37k|            return static_cast<T*>(s.m_cp);
  686|  1.37k|        }
  687|  1.37k|        else if constexpr (std::is_object_v<T>) {
  688|  1.37k|            return static_cast<T*>(s.m_p);
  689|  1.37k|        }
  690|  1.37k|        else {
  691|  1.37k|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.37k|        }
  693|  1.37k|    }
_ZZN3scn2v34impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEbENKUlcE_clEc:
 5956|  1.37k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_LPv0EEEPKSJ_:
  666|  1.06k|        {
  667|  1.06k|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|  1.06k|{
 1976|  1.06k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  1.06k|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|  1.06k|{
 1957|  1.06k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  1.06k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  1.06k|    }
 1960|  1.06k|    else {
 1961|  1.06k|        auto first = range.begin();
 1962|  1.46k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 1.37k, False: 84]
  ------------------
 1963|  1.37k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 980, False: 398]
  ------------------
 1964|    980|                return first;
 1965|    980|            }
 1966|  1.37k|        }
 1967|     84|        return first;
 1968|  1.06k|    }
 1969|  1.06k|}
_ZNK3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE5beginEv:
 2809|  8.56k|    {
 2810|  8.56k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2811|  8.56k|                                      m_count};
 2812|  8.56k|    }
_ZNK3scn2v34impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEvE3getEv:
 2716|  32.4k|    {
 2717|  32.4k|        return view;
 2718|  32.4k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEC2ES6_SF_l:
 2381|  8.56k|    {
 2382|  8.56k|    }
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2780|  7.88k|        {
 2781|  7.88k|            return !(y == x);
 2782|  7.88k|        }
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2769|  17.1k|        {
 2770|  17.1k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2770:21): [True: 674, False: 16.4k]
  |  Branch (2770:39): [True: 438, False: 236]
  ------------------
 2771|  17.1k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2771:20): [True: 0, False: 16.6k]
  ------------------
 2772|  17.1k|        }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE14multibyte_leftEv:
 2420|    674|    {
 2421|    674|        return m_multibyte_left;
 2422|    674|    }
_ZNK3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE3endEv:
 2815|  15.3k|    {
 2816|  15.3k|        return sentinel<true>{m_base.get().end()};
 2817|  15.3k|    }
_ZN3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE8sentinelILb1EEC2ENSA_8sentinelILb1EEE:
 2750|  15.3k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEdeEv:
 2425|  11.9k|    {
 2426|  11.9k|        return *m_current;
 2427|  11.9k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEppEv:
 2434|  9.13k|    {
 2435|  9.13k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  9.13k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.13k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2436|  9.13k|        _increment_current();
 2437|  9.13k|        return *this;
 2438|  9.13k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE18_increment_currentEv:
 2667|  9.13k|    {
 2668|  9.13k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2668:13): [True: 6.72k, False: 2.41k]
  ------------------
 2669|  6.72k|            auto cplen = _get_cp_length_at_current();
 2670|  6.72k|            m_multibyte_left = cplen - 1;
 2671|  6.72k|            m_count -= _get_width_at_current_cp_start(cplen);
 2672|  6.72k|        }
 2673|  2.41k|        else {
 2674|  2.41k|            --m_multibyte_left;
 2675|  2.41k|        }
 2676|       |
 2677|  9.13k|        ++m_current;
 2678|  9.13k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE25_get_cp_length_at_currentEv:
 2638|  6.72k|    {
 2639|  6.72k|        return static_cast<difference_type>(
 2640|  6.72k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2641|  6.72k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE30_get_width_at_current_cp_startEl:
 2644|  6.72k|    {
 2645|  6.72k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|  6.72k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.72k]
  |  |  ------------------
  ------------------
 2646|      0|            return 0;
 2647|      0|        }
 2648|       |
 2649|  6.72k|        if (cplen == 1) {
  ------------------
  |  Branch (2649:13): [True: 5.23k, False: 1.49k]
  ------------------
 2650|  5.23k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  5.23k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.23k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2651|  5.23k|            auto cp = static_cast<char32_t>(*m_current);
 2652|  5.23k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2653|  5.23k|        }
 2654|       |
 2655|  1.49k|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2656|  1.49k|                                           cplen);
 2657|  1.49k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.49k]
  |  |  ------------------
  ------------------
 2658|      0|            return 0;
 2659|      0|        }
 2660|       |
 2661|  1.49k|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2662|  1.49k|        return static_cast<difference_type>(
 2663|  1.49k|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2664|  1.49k|    }
_ZN3scn2v34impl21read_while_code_unitsINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENSt3__117basic_string_viewIcNSD_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEESJ_RKT0_:
 2036|    248|{
 2037|    248|    static_assert(ranges::common_range<CodeUnits>);
 2038|       |
 2039|    248|    auto it = range.begin();
 2040|    248|    while (it != range.end()) {
  ------------------
  |  Branch (2040:12): [True: 248, False: 0]
  ------------------
 2041|    248|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2042|    248|                                           needle.size());
 2043|    248|        if (!r) {
  ------------------
  |  Branch (2043:13): [True: 86, False: 162]
  ------------------
 2044|     86|            return it;
 2045|     86|        }
 2046|    162|        static_assert(
 2047|    162|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2048|    162|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2048:13): [True: 162, False: 0]
  ------------------
 2049|    162|            return it;
 2050|    162|        }
 2051|      0|        it = *r;
 2052|      0|    }
 2053|      0|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2054|      0|    return it;
 2055|      0|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_l:
 1856|    248|{
 1857|    248|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|    248|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    248|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|    248|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|    248|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|    248|        if (sz < count) {
 1862|    248|            return unexpected(eof_error::eof);
 1863|    248|        }
 1864|       |
 1865|    248|        return ranges::next(range.begin(), count);
 1866|    248|    }
 1867|    248|    else {
 1868|    248|        auto it = range.begin();
 1869|    248|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 248]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|    970|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 808, False: 162]
  ------------------
 1874|    808|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 86, False: 722]
  ------------------
 1875|     86|                return unexpected(eof_error::eof);
 1876|     86|            }
 1877|    808|        }
 1878|       |
 1879|    162|        return it;
 1880|    248|    }
 1881|    248|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEmT_:
 1094|    248|{
 1095|    248|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|    248|        return r.size();
 1097|    248|    }
 1098|    248|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|    248|                           ranges::const_iterator_t<Range>,
 1100|    248|                           typename detail::basic_scan_buffer<
 1101|    248|                               detail::char_t<Range>>::forward_iterator>) {
 1102|    248|        if constexpr (ranges::common_range<Range>) {
 1103|    248|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|    248|        }
 1105|    248|        else {
 1106|    248|            if (r.begin().stores_parent()) {
 1107|    248|                return static_cast<size_t>(
 1108|    248|                    r.begin().parent()->chars_available() -
 1109|    248|                    r.begin().position());
 1110|    248|            }
 1111|    248|            return r.begin().contiguous_segment().size();
 1112|    248|        }
 1113|    248|    }
 1114|    248|    else {
 1115|    248|        return 0;
 1116|    248|    }
 1117|    248|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSM_NS1_20incrementable_traitsISM_E15difference_typeE:
  267|  3.62k|    {
  268|  3.62k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  3.62k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent22random_access_iteratorISM_EEvE4typeERSM_NS1_20incrementable_traitsISM_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  160|  3.62k|    {
  161|  3.62k|        constexpr auto zero = iter_difference_t<I>{0};
  162|       |
  163|  3.62k|        if (n > zero) {
  ------------------
  |  Branch (163:13): [True: 0, False: 3.62k]
  ------------------
  164|      0|            while (n-- > zero) {
  ------------------
  |  Branch (164:20): [True: 0, False: 0]
  ------------------
  165|      0|                ++i;
  166|      0|            }
  167|      0|        }
  168|  3.62k|        else {
  169|  3.62k|            while (n++ < zero) {
  ------------------
  |  Branch (169:20): [True: 0, False: 3.62k]
  ------------------
  170|      0|                --i;
  171|      0|            }
  172|  3.62k|        }
  173|  3.62k|    }
_ZN3scn2v34impl27counted_width_iterator_implneINS2_22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEDTeqclscPFRKS7_vELDnEEclscPFRKT_vELDnEEERKNS4_IS7_SG_EERKNS4_ISL_T0_EE:
 2530|  3.51k|    {
 2531|  3.51k|        return !(a == b);
 2532|  3.51k|    }
_ZN3scn2v34impl27counted_width_iterator_impleqINS2_22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEDTeqclscPFRKS7_vELDnEEclscPFRKT_vELDnEEERKNS4_IS7_SG_EERKNS4_ISL_T0_EE:
 2522|  3.51k|    {
 2523|  3.51k|        return a.m_current == b.m_current;
 2524|  3.51k|    }
_ZNK3scn2v34impl14_take_width_fnclINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEEDTtlS4_fp_fp0_EERKT_l:
 2831|  4.93k|    {
 2832|  4.93k|        return take_width_view{r, n};
 2833|  4.93k|    }
_ZN3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEEC2ERKSA_l:
 2800|  4.93k|    {
 2801|  4.93k|    }
_ZN3scn2v34impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEvEC2ERKSB_:
 2713|  4.93k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impl23skip_classic_whitespaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|  3.62k|{
 2951|  3.62k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 3.62k, False: 0]
  ------------------
 2952|  3.62k|        auto it = read_while_classic_space(range);
 2953|  3.62k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  3.62k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.62k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 134, False: 3.49k]
  |  |  ------------------
  ------------------
 2955|    134|            return unexpected(e);
 2956|    134|        }
 2957|       |
 2958|  3.49k|        return it;
 2959|  3.62k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  3.62k|}
_ZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|  3.62k|{
 2117|  3.62k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  3.62k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  3.62k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  3.62k|        auto buf = make_contiguous_buffer(range);
 2121|  3.62k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  3.62k|        return ranges::next(range.begin(),
 2123|  3.62k|                            ranges::distance(buf.view().begin(), it));
 2124|  3.62k|    }
 2125|  3.62k|    else {
 2126|  3.62k|        auto it = range.begin();
 2127|       |
 2128|  3.62k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  3.62k|            auto seg = get_contiguous_beginning(range);
 2130|  3.62k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  3.62k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2131:17): [True: 0, False: 3.62k]
  ------------------
 2132|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|      0|            }
 2134|  3.62k|            ranges::advance(it, seg.size());
 2135|  3.62k|        }
 2136|       |
 2137|  3.62k|        return read_while_code_point(
 2138|  3.62k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  3.62k|    }
 2140|  3.62k|}
_ZN3scn2v34impl24get_contiguous_beginningINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDaT_:
 1038|  3.62k|{
 1039|  3.62k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1039:19): [Folded - Ignored]
  |  Branch (1039:19): [Folded - Ignored]
  ------------------
 1040|  3.62k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1040:19): [Folded - Ignored]
  ------------------
 1041|  3.62k|        return r;
 1042|  3.62k|    }
 1043|  3.62k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1043:24): [Folded - Ignored]
  ------------------
 1044|  3.62k|                           ranges::const_iterator_t<Range>,
 1045|  3.62k|                           typename detail::basic_scan_buffer<
 1046|  3.62k|                               detail::char_t<Range>>::forward_iterator>) {
 1047|  3.62k|        if constexpr (ranges::common_range<Range>) {
 1048|  3.62k|            auto seg = r.begin().contiguous_segment();
 1049|  3.62k|            auto dist =
 1050|  3.62k|                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|  3.62k|            return seg.substr(0, std::min(seg.size(), dist));
 1052|  3.62k|        }
 1053|  3.62k|        else {
 1054|  3.62k|            return r.begin().contiguous_segment();
 1055|  3.62k|        }
 1056|  3.62k|    }
 1057|  3.62k|    else {
 1058|  3.62k|        return std::basic_string_view<detail::char_t<Range>>{};
 1059|  3.62k|    }
 1060|  3.62k|}
_ZN3scn2v34impl21read_while_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|  3.62k|{
 2082|  3.62k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  3.62k|}
_ZN3scn2v34impl21read_until_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|  3.62k|{
 2061|  3.62k|    auto it = range.begin();
 2062|  4.95k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 4.81k, False: 134]
  ------------------
 2063|  4.81k|        const auto val =
 2064|  4.81k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  4.81k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  4.81k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 4.81k, False: 0]
  |  |  ------------------
  ------------------
 2066|  4.81k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  4.81k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  4.81k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 3.49k, False: 1.32k]
  ------------------
 2069|  3.49k|                return it;
 2070|  3.49k|            }
 2071|  4.81k|        }
 2072|  1.32k|        it = val.iterator;
 2073|  1.32k|    }
 2074|       |
 2075|    134|    return it;
 2076|  3.62k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISP_EEE4typeEEESP_:
 1898|  4.81k|{
 1899|  4.81k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  4.81k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.81k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  4.81k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  4.81k|    auto it = range.begin();
 1903|  4.81k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  4.81k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  4.81k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.81k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|  4.81k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 4.36k, False: 456]
  ------------------
 1912|  4.36k|        ++it;
 1913|  4.36k|        return {it, string_type(1, *range.begin())};
 1914|  4.36k|    }
 1915|       |
 1916|    456|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|    456|    return {it, string_type{range.begin(), it}};
 1918|  4.81k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEbT_:
  943|  8.44k|{
  944|  8.44k|    return is_range_eof(r.begin(), r.end());
  945|  8.44k|}
_ZN3scn2v34impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS8_ISE_E8sentinelILb1EEEEEbT_T0_:
  927|  8.44k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  8.44k|    {
  937|  8.44k|        return begin == end;
  938|  8.44k|    }
  939|  8.44k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSC_ISG_E8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SP_EENS1_20incrementable_traitsISP_E15difference_typeEE4typeERSP_ST_SQ_:
  282|    456|    {
  283|    456|        return n - fn::impl_i_n_s(i, n, bound);
  284|    456|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSC_ISG_E8sentinelILb1EEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SP_EENS1_20incrementable_traitsISP_E15difference_typeEE4typeERSP_ST_SQ_:
  226|    456|    {
  227|    456|        constexpr iter_difference_t<I> zero{0};
  228|    456|        iter_difference_t<I> counter{0};
  229|       |
  230|    456|        if (n < zero) {
  ------------------
  |  Branch (230:13): [True: 0, False: 456]
  ------------------
  231|      0|            do {
  232|      0|                --i;
  233|      0|                --counter;  // Yes, really
  234|      0|            } while (++n < zero && i != bound);
  ------------------
  |  Branch (234:22): [True: 0, False: 0]
  |  Branch (234:36): [True: 0, False: 0]
  ------------------
  235|      0|        }
  236|    456|        else {
  237|  1.67k|            while (n-- > zero && i != bound) {
  ------------------
  |  Branch (237:20): [True: 1.21k, False: 456]
  |  Branch (237:34): [True: 1.21k, False: 0]
  ------------------
  238|  1.21k|                ++i;
  239|  1.21k|                ++counter;
  240|  1.21k|            }
  241|    456|        }
  242|       |
  243|    456|        return counter;
  244|    456|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEcE8is_validEv:
 1889|  4.81k|    {
 1890|  4.81k|        return !codepoint.empty();
 1891|  4.81k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|  3.62k|    {
  754|  3.62k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|  4.81k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.81k|              cvref<T> obj = *get<T>(fn);
  745|  4.81k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  4.81k|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.81k|              }
  748|  4.81k|              else {
  749|  4.81k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.81k|              }
  751|  4.81k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS6_INS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  4.81k|    {
  684|  4.81k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  4.81k|            return static_cast<T*>(s.m_cp);
  686|  4.81k|        }
  687|  4.81k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  4.81k|            return static_cast<T*>(s.m_p);
  689|  4.81k|        }
  690|  4.81k|        else {
  691|  4.81k|            return reinterpret_cast<T*>(s.m_fp);
  692|  4.81k|        }
  693|  4.81k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|  4.81k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|  3.62k|        {
  662|  3.62k|        }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_9eof_errorET_:
  949|  3.62k|{
  950|  3.62k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  3.62k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 134, False: 3.49k]
  |  |  ------------------
  ------------------
  951|    134|        return eof_error::eof;
  952|    134|    }
  953|  3.49k|    return eof_error::good;
  954|  3.62k|}
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE4baseEv:
 2412|  21.4k|    {
 2413|  21.4k|        return m_current;
 2414|  21.4k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE5countEv:
 2416|  21.9k|    {
 2417|  21.9k|        return m_count;
 2418|  21.9k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|  45.0k|    {
 6037|  45.0k|        const bool need_skipped_width =
 6038|  45.0k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 2.05k, False: 42.9k]
  |  Branch (6038:33): [True: 0, False: 42.9k]
  ------------------
 6039|  45.0k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  45.0k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 296, False: 44.7k]
  ------------------
 6043|  45.0k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 6.07k, False: 38.6k]
  ------------------
 6044|  6.37k|            return skip_fill(rng, specs.precision, specs.fill,
 6045|  6.37k|                             need_skipped_width);
 6046|  6.37k|        }
 6047|  38.6k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 38.2k, False: 402]
  |  Branch (6047:56): [True: 1.92k, False: 36.3k]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  1.92k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 1.92k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  3.85k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|  1.92k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.92k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.92k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.92k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.92k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  3.85k|                            make_eof_scan_error));
 6058|       |
 6059|  3.85k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 1.14k, False: 780]
  ------------------
 6060|  1.14k|                return result_type{
 6061|  1.14k|                    it,
 6062|  1.14k|                    calculate_text_width(make_contiguous_buffer(
 6063|  1.14k|                                             ranges::subrange{rng.begin(), it})
 6064|  1.14k|                                             .view())};
 6065|  1.14k|            }
 6066|    780|            return result_type{it, 0};
 6067|  3.85k|        }
 6068|       |
 6069|  36.7k|        return result_type{rng.begin(), 0};
 6070|  38.6k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|  9.59k|    {
 6079|  9.59k|        const bool need_skipped_width =
 6080|  9.59k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 590, False: 9.00k]
  |  Branch (6080:33): [True: 2.24k, False: 6.76k]
  ------------------
 6081|  9.59k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  9.59k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 202, False: 9.39k]
  ------------------
 6084|  9.59k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 344, False: 9.05k]
  ------------------
 6085|    546|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 246, False: 300]
  ------------------
 6086|    546|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 90, False: 156]
  ------------------
 6087|     90|                return result_type{rng.begin(), 0};
 6088|     90|            }
 6089|    456|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|    456|                             specs.fill, need_skipped_width);
 6091|    546|        }
 6092|  9.05k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 8.67k, False: 378]
  ------------------
 6093|  9.05k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 8.06k, False: 612]
  ------------------
 6094|  9.05k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 390, False: 7.67k]
  |  Branch (6094:35): [True: 354, False: 36]
  ------------------
 6095|  8.06k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 1.17k, False: 6.53k]
  ------------------
 6096|  7.70k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 1.06k, False: 106]
  ------------------
 6097|  1.41k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 1.06k, False: 350]
  ------------------
 6098|  1.06k|                const auto initial_width =
 6099|  1.06k|                    specs.precision - prefix_width - value_width;
 6100|  1.06k|                auto max_width_view = take_width(rng, initial_width);
 6101|  1.06k|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|  1.06k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.06k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.06k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.06k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.06k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.06k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.06k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|  1.06k|                                  .transform_error(make_eof_scan_error));
 6103|  1.06k|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|  1.06k|            }
 6105|    700|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|    350|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    350|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    350|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    350|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 350]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    350|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    350|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|    700|                            make_eof_scan_error));
 6107|       |
 6108|    700|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 350, False: 0]
  ------------------
 6109|    350|                return result_type{
 6110|    350|                    it,
 6111|    350|                    calculate_text_width(make_contiguous_buffer(
 6112|    350|                                             ranges::subrange{rng.begin(), it})
 6113|    350|                                             .view())};
 6114|    350|            }
 6115|      0|            return result_type{it, 0};
 6116|    700|        }
 6117|  7.63k|        return result_type{rng.begin(), 0};
 6118|  9.05k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
 6192|  16.6k|    {
 6193|  16.6k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  16.6k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  16.6k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  16.6k|            auto rd = make_reader<T, char_type>();
 6198|  16.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  16.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 15.7k, False: 816]
  |  |  ------------------
  ------------------
 6199|  15.7k|                return unexpected(e);
 6200|  15.7k|            }
 6201|       |
 6202|    816|            return impl(rd, range, value);
 6203|  16.6k|        }
 6204|  16.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  16.6k|            auto rd = make_reader<T, char_type>();
 6206|  16.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  16.6k|                return unexpected(e);
 6208|  16.6k|            }
 6209|       |
 6210|  16.6k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  16.6k|                specs.width != 0) {
 6212|  16.6k|                return impl(rd, range, value);
 6213|  16.6k|            }
 6214|       |
 6215|  16.6k|            auto crange = get_as_contiguous(range);
 6216|  16.6k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  16.6k|            return ranges::next(range.begin(),
 6218|  16.6k|                                ranges::distance(crange.begin(), it));
 6219|  16.6k|        }
 6220|  16.6k|        else {
 6221|  16.6k|            SCN_EXPECT(false);
 6222|  16.6k|            SCN_UNREACHABLE;
 6223|  16.6k|        }
 6224|  16.6k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    816|    {
 6124|    816|        const bool need_skipped_width =
 6125|    816|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 182, False: 634]
  |  Branch (6125:33): [True: 512, False: 122]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    816|        auto it = rng.begin();
 6129|    816|        std::ptrdiff_t prefix_width = 0;
 6130|    816|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 518, False: 298]
  ------------------
 6131|    518|            auto max_width_view = take_width(rng, specs.precision);
 6132|    518|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    518|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    518|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    518|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    518|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 498]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     20|    }                                                  \
  |  |  |  | 3671|    518|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    498|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    498|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    498|            it = prefix_result.first.base();
 6135|    498|            prefix_width = prefix_result.second;
 6136|    498|        }
 6137|    298|        else {
 6138|    298|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    298|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    298|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    298|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    298|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 298]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    298|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    298|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    298|            std::tie(it, prefix_width) = prefix_result;
 6140|    298|        }
 6141|    796|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    796|        std::ptrdiff_t value_width = 0;
 6145|    796|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 498, False: 298]
  ------------------
 6146|    498|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 492]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|    492|            const auto initial_width = specs.precision - prefix_width;
 6154|    492|            auto max_width_view =
 6155|    492|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    492|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    492|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    492|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    492|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    492|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 492, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    492|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    492|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    492|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    492|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    492|    }                                                  \
  |  |  |  | 3671|    492|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    298|        else {
 6161|    298|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    298|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    298|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    298|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 298, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    298|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    298|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    298|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    298|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    298|    }                                                  \
  |  | 3671|    298|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    298|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
 6192|  16.6k|    {
 6193|  16.6k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  16.6k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  16.6k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  16.6k|            auto rd = make_reader<T, char_type>();
 6198|  16.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  16.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 15.7k, False: 816]
  |  |  ------------------
  ------------------
 6199|  15.7k|                return unexpected(e);
 6200|  15.7k|            }
 6201|       |
 6202|    816|            return impl(rd, range, value);
 6203|  16.6k|        }
 6204|  16.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  16.6k|            auto rd = make_reader<T, char_type>();
 6206|  16.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  16.6k|                return unexpected(e);
 6208|  16.6k|            }
 6209|       |
 6210|  16.6k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  16.6k|                specs.width != 0) {
 6212|  16.6k|                return impl(rd, range, value);
 6213|  16.6k|            }
 6214|       |
 6215|  16.6k|            auto crange = get_as_contiguous(range);
 6216|  16.6k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  16.6k|            return ranges::next(range.begin(),
 6218|  16.6k|                                ranges::distance(crange.begin(), it));
 6219|  16.6k|        }
 6220|  16.6k|        else {
 6221|  16.6k|            SCN_EXPECT(false);
 6222|  16.6k|            SCN_UNREACHABLE;
 6223|  16.6k|        }
 6224|  16.6k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    816|    {
 6124|    816|        const bool need_skipped_width =
 6125|    816|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 182, False: 634]
  |  Branch (6125:33): [True: 512, False: 122]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    816|        auto it = rng.begin();
 6129|    816|        std::ptrdiff_t prefix_width = 0;
 6130|    816|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 518, False: 298]
  ------------------
 6131|    518|            auto max_width_view = take_width(rng, specs.precision);
 6132|    518|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    518|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    518|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    518|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    518|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 498]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     20|    }                                                  \
  |  |  |  | 3671|    518|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    498|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    498|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    498|            it = prefix_result.first.base();
 6135|    498|            prefix_width = prefix_result.second;
 6136|    498|        }
 6137|    298|        else {
 6138|    298|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    298|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    298|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    298|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    298|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 298]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    298|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    298|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    298|            std::tie(it, prefix_width) = prefix_result;
 6140|    298|        }
 6141|    796|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    796|        std::ptrdiff_t value_width = 0;
 6145|    796|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 498, False: 298]
  ------------------
 6146|    498|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 492]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|    492|            const auto initial_width = specs.precision - prefix_width;
 6154|    492|            auto max_width_view =
 6155|    492|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    492|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    492|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    492|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    492|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    492|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 492, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    492|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    492|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    492|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    492|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    492|    }                                                  \
  |  |  |  | 3671|    492|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    298|        else {
 6161|    298|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    298|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    298|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    298|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 298, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    298|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    298|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    298|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    298|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    298|    }                                                  \
  |  | 3671|    298|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    298|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIPvEENS0_13scan_expectedIPKcEERT_:
 6192|  16.5k|    {
 6193|  16.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  16.5k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  16.5k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  16.5k|            auto rd = make_reader<T, char_type>();
 6198|  16.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  16.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 15.7k, False: 714]
  |  |  ------------------
  ------------------
 6199|  15.7k|                return unexpected(e);
 6200|  15.7k|            }
 6201|       |
 6202|    714|            return impl(rd, range, value);
 6203|  16.5k|        }
 6204|  16.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  16.5k|            auto rd = make_reader<T, char_type>();
 6206|  16.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  16.5k|                return unexpected(e);
 6208|  16.5k|            }
 6209|       |
 6210|  16.5k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  16.5k|                specs.width != 0) {
 6212|  16.5k|                return impl(rd, range, value);
 6213|  16.5k|            }
 6214|       |
 6215|  16.5k|            auto crange = get_as_contiguous(range);
 6216|  16.5k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  16.5k|            return ranges::next(range.begin(),
 6218|  16.5k|                                ranges::distance(crange.begin(), it));
 6219|  16.5k|        }
 6220|  16.5k|        else {
 6221|  16.5k|            SCN_EXPECT(false);
 6222|  16.5k|            SCN_UNREACHABLE;
 6223|  16.5k|        }
 6224|  16.5k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE11check_specsERKNS0_6detail12format_specsE:
 5752|  16.5k|    {
 5753|  16.5k|        reader_error_handler eh{};
 5754|  16.5k|        detail::check_pointer_type_specs(specs, eh);
 5755|  16.5k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  16.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 15.7k, False: 714]
  |  |  ------------------
  ------------------
 5756|  15.7k|            return {scan_error::invalid_format_string, eh.m_msg};
 5757|  15.7k|        }
 5758|    714|        return {};
 5759|  16.5k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_23reader_impl_for_voidptrIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 6123|    714|    {
 6124|    714|        const bool need_skipped_width =
 6125|    714|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 178, False: 536]
  |  Branch (6125:33): [True: 470, False: 66]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    714|        auto it = rng.begin();
 6129|    714|        std::ptrdiff_t prefix_width = 0;
 6130|    714|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 476, False: 238]
  ------------------
 6131|    476|            auto max_width_view = take_width(rng, specs.precision);
 6132|    476|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    476|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    476|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    476|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    476|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 466]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     10|    }                                                  \
  |  |  |  | 3671|    476|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    466|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    466|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    466|            it = prefix_result.first.base();
 6135|    466|            prefix_width = prefix_result.second;
 6136|    466|        }
 6137|    238|        else {
 6138|    238|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    238|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    238|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    238|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    238|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 238]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    238|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    238|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    238|            std::tie(it, prefix_width) = prefix_result;
 6140|    238|        }
 6141|    704|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    704|        std::ptrdiff_t value_width = 0;
 6145|    704|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 466, False: 238]
  ------------------
 6146|    466|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 4, False: 462]
  ------------------
 6147|      4|                return unexpected_scan_error(
 6148|      4|                    scan_error::invalid_scanned_value,
 6149|      4|                    "Too many fill characters before value, "
 6150|      4|                    "precision exceeded before reading value");
 6151|      4|            }
 6152|       |
 6153|    462|            const auto initial_width = specs.precision - prefix_width;
 6154|    462|            auto max_width_view =
 6155|    462|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    462|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    462|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    462|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    462|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    462|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 462, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    462|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    462|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    462|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    462|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    462|    }                                                  \
  |  |  |  | 3671|    462|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    238|        else {
 6161|    238|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    238|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    238|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    238|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 238, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    238|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    238|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    238|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    238|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    238|    }                                                  \
  |  | 3671|    238|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    238|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERPvNSN_10locale_refE:
 5781|    462|    {
 5782|    462|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    462|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5783|    462|        return read_default(range, value, loc);
 5784|    462|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RPvNS0_6detail10locale_refE:
 5764|    462|    {
 5765|    462|        detail::format_specs specs{};
 5766|    462|        specs.type = detail::presentation_type::int_hex;
 5767|       |
 5768|    462|        std::uintptr_t intvalue{};
 5769|    462|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3672|    462|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    462|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    462|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    462|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 462, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    462|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    462|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    462|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    462|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    462|    }                                                  \
  |  |  |  | 3671|    462|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5770|      0|                                                                intvalue, loc));
 5771|      0|        value = reinterpret_cast<void*>(intvalue);
 5772|      0|        return result;
 5773|    462|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERPvNSL_10locale_refE:
 5781|    238|    {
 5782|    238|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    238|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5783|    238|        return read_default(range, value, loc);
 5784|    238|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIbEENS0_13scan_expectedIPKcEERT_:
 6192|  16.6k|    {
 6193|  16.6k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  16.6k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  16.6k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  16.6k|            auto rd = make_reader<T, char_type>();
 6198|  16.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  16.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 15.5k, False: 1.00k]
  |  |  ------------------
  ------------------
 6199|  15.5k|                return unexpected(e);
 6200|  15.5k|            }
 6201|       |
 6202|  1.00k|            return impl(rd, range, value);
 6203|  16.6k|        }
 6204|  16.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  16.6k|            auto rd = make_reader<T, char_type>();
 6206|  16.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  16.6k|                return unexpected(e);
 6208|  16.6k|            }
 6209|       |
 6210|  16.6k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  16.6k|                specs.width != 0) {
 6212|  16.6k|                return impl(rd, range, value);
 6213|  16.6k|            }
 6214|       |
 6215|  16.6k|            auto crange = get_as_contiguous(range);
 6216|  16.6k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  16.6k|            return ranges::next(range.begin(),
 6218|  16.6k|                                ranges::distance(crange.begin(), it));
 6219|  16.6k|        }
 6220|  16.6k|        else {
 6221|  16.6k|            SCN_EXPECT(false);
 6222|  16.6k|            SCN_UNREACHABLE;
 6223|  16.6k|        }
 6224|  16.6k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  16.6k|    {
 3040|  16.6k|        reader_error_handler eh{};
 3041|  16.6k|        get_derived().check_specs_impl(specs, eh);
 3042|  16.6k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  16.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 15.5k, False: 1.00k]
  |  |  ------------------
  ------------------
 3043|  15.5k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  15.5k|        }
 3045|  1.00k|        return {};
 3046|  16.6k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIcEEcE11get_derivedEv:
 3050|  16.6k|    {
 3051|  16.6k|        return static_cast<Derived&>(*this);
 3052|  16.6k|    }
_ZN3scn2v34impl20reader_impl_for_boolIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5496|  16.6k|    {
 5497|  16.6k|        detail::check_bool_type_specs(specs, eh);
 5498|  16.6k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_boolIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|  1.00k|    {
 6124|  1.00k|        const bool need_skipped_width =
 6125|  1.00k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 192, False: 810]
  |  Branch (6125:33): [True: 582, False: 228]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  1.00k|        auto it = rng.begin();
 6129|  1.00k|        std::ptrdiff_t prefix_width = 0;
 6130|  1.00k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 590, False: 412]
  ------------------
 6131|    590|            auto max_width_view = take_width(rng, specs.precision);
 6132|    590|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    590|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    590|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    590|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    590|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 24, False: 566]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     24|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     24|    }                                                  \
  |  |  |  | 3671|    590|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    566|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    566|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    566|            it = prefix_result.first.base();
 6135|    566|            prefix_width = prefix_result.second;
 6136|    566|        }
 6137|    412|        else {
 6138|    412|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    412|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    412|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    412|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    412|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 412]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    412|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    412|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    412|            std::tie(it, prefix_width) = prefix_result;
 6140|    412|        }
 6141|    978|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    978|        std::ptrdiff_t value_width = 0;
 6145|    978|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 566, False: 412]
  ------------------
 6146|    566|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 560]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|    560|            const auto initial_width = specs.precision - prefix_width;
 6154|    560|            auto max_width_view =
 6155|    560|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    560|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    560|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    560|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    560|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    560|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 560, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    560|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    560|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    560|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    560|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    560|    }                                                  \
  |  |  |  | 3671|    560|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    412|        else {
 6161|    412|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    412|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    412|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    412|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 412, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    412|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    412|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    412|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    412|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    412|    }                                                  \
  |  | 3671|    412|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    412|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZNK3scn2v34impl20reader_impl_for_boolIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERbNSN_10locale_refE:
 5515|    560|    {
 5516|    560|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5517|       |
 5518|    560|#if !SCN_DISABLE_LOCALE
 5519|    560|        if (specs.localized) {
  ------------------
  |  Branch (5519:13): [True: 12, False: 548]
  ------------------
 5520|     12|            return rd.read_localized(range, loc, value);
 5521|     12|        }
 5522|    548|#endif
 5523|       |
 5524|    548|        return rd.read_classic(range, value);
 5525|    560|    }
_ZN3scn2v34impl20reader_impl_for_boolIcE11get_optionsERKNS0_6detail12format_specsE:
 5528|    972|    {
 5529|    972|        SCN_GCC_COMPAT_PUSH
 5530|    972|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 5531|       |
 5532|    972|        switch (specs.type) {
 5533|    178|            case detail::presentation_type::string:
  ------------------
  |  Branch (5533:13): [True: 178, False: 794]
  ------------------
 5534|    178|                return bool_reader_base::allow_text;
 5535|       |
 5536|     10|            case detail::presentation_type::int_generic:
  ------------------
  |  Branch (5536:13): [True: 10, False: 962]
  ------------------
 5537|     20|            case detail::presentation_type::int_binary:
  ------------------
  |  Branch (5537:13): [True: 10, False: 962]
  ------------------
 5538|     26|            case detail::presentation_type::int_decimal:
  ------------------
  |  Branch (5538:13): [True: 6, False: 966]
  ------------------
 5539|     36|            case detail::presentation_type::int_hex:
  ------------------
  |  Branch (5539:13): [True: 10, False: 962]
  ------------------
 5540|     82|            case detail::presentation_type::int_octal:
  ------------------
  |  Branch (5540:13): [True: 46, False: 926]
  ------------------
 5541|     86|            case detail::presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (5541:13): [True: 4, False: 968]
  ------------------
 5542|     86|                return bool_reader_base::allow_numeric;
 5543|       |
 5544|    708|            default:
  ------------------
  |  Branch (5544:13): [True: 708, False: 264]
  ------------------
 5545|    708|                return bool_reader_base::allow_text |
 5546|    708|                       bool_reader_base::allow_numeric;
 5547|    972|        }
 5548|       |
 5549|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 5550|    972|    }
_ZNK3scn2v34impl11bool_readerIcE14read_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refERb:
 5427|     12|    {
 5428|     12|        scan_error err{scan_error::invalid_scanned_value,
 5429|     12|                       "Failed to read boolean"};
 5430|       |
 5431|     12|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5431:13): [True: 10, False: 2]
  ------------------
 5432|     10|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5432:22): [True: 0, False: 10]
  ------------------
 5433|      0|                return *r;
 5434|      0|            }
 5435|     10|            else {
 5436|     10|                err = r.error();
 5437|     10|            }
 5438|     10|        }
 5439|       |
 5440|     12|        if (m_options & allow_text) {
  ------------------
  |  Branch (5440:13): [True: 10, False: 2]
  ------------------
 5441|     10|            auto stdloc = loc.get<std::locale>();
 5442|     10|            const auto& numpunct =
 5443|     10|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5444|     10|            const auto truename = numpunct.truename();
 5445|     10|            const auto falsename = numpunct.falsename();
 5446|       |
 5447|     10|            if (auto r =
  ------------------
  |  Branch (5447:22): [True: 0, False: 10]
  ------------------
 5448|     10|                    read_textual_custom(range, value, truename, falsename)) {
 5449|      0|                return *r;
 5450|      0|            }
 5451|     10|            else {
 5452|     10|                err = r.error();
 5453|     10|            }
 5454|     10|        }
 5455|       |
 5456|     12|        return unexpected(err);
 5457|     12|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5383|    494|    {
 5384|    494|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5384:18): [True: 0, False: 494]
  ------------------
 5385|      0|            value = false;
 5386|      0|            return *r;
 5387|      0|        }
 5388|    494|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5388:18): [True: 0, False: 494]
  ------------------
 5389|      0|            value = true;
 5390|      0|            return *r;
 5391|      0|        }
 5392|       |
 5393|    494|        return unexpected_scan_error(
 5394|    494|            scan_error::invalid_scanned_value,
 5395|    494|            "Failed to read numeric boolean value: No match");
 5396|    494|    }
_ZN3scn2v34impl23read_matching_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NDTcl4implISF_EEE4typeE:
 2145|    988|{
 2146|    988|    auto it = read_code_unit(range);
 2147|    988|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    988|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 988]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|    988|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|    988|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 988, False: 0]
  |  |  ------------------
  ------------------
 2152|    988|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|    988|        return unexpected(parse_error::error);
 2154|    988|    }
 2155|       |
 2156|      0|    return *it;
 2157|    988|}
_ZNK3scn2v34impl11bool_readerIcE19read_textual_customINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RbNSF_17basic_string_viewIcNSF_11char_traitsIcEEEESR_:
 5467|     10|    {
 5468|     10|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5469|     10|        const auto shorter = std::pair{
 5470|     10|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5470:13): [True: 10, False: 0]
  ------------------
 5471|     10|        const auto longer = std::pair{
 5472|     10|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5472:13): [True: 0, False: 10]
  ------------------
 5473|       |
 5474|     10|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5474:18): [True: 0, False: 10]
  ------------------
 5475|      0|            value = shorter.second;
 5476|      0|            return *r;
 5477|      0|        }
 5478|     10|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5478:18): [True: 0, False: 10]
  ------------------
 5479|      0|            value = longer.second;
 5480|      0|            return *r;
 5481|      0|        }
 5482|       |
 5483|     10|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5484|     10|                                     "read_textual: No match");
 5485|     10|    }
_ZN3scn2v34impl20read_matching_stringINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewINDTcl4implISF_EEE4typeENSD_11char_traitsISN_EEEE:
 2178|     20|{
 2179|     20|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     12|    }                                                  \
  |  |  |  | 3671|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2180|      8|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2181|      8|                    .transform_error(make_eof_parse_error));
 2182|       |
 2183|      8|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2184|      8|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 0]
  |  |  ------------------
  ------------------
 2185|      8|        return unexpected(parse_error::error);
 2186|      8|    }
 2187|      0|    return it;
 2188|      8|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_l:
 1856|  1.06k|{
 1857|  1.06k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  1.06k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.06k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  1.06k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  1.06k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  1.06k|        if (sz < count) {
 1862|  1.06k|            return unexpected(eof_error::eof);
 1863|  1.06k|        }
 1864|       |
 1865|  1.06k|        return ranges::next(range.begin(), count);
 1866|  1.06k|    }
 1867|  1.06k|    else {
 1868|  1.06k|        auto it = range.begin();
 1869|  1.06k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 1.06k]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|  5.48k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 4.56k, False: 918]
  ------------------
 1874|  4.56k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 150, False: 4.41k]
  ------------------
 1875|    150|                return unexpected(eof_error::eof);
 1876|    150|            }
 1877|  4.56k|        }
 1878|       |
 1879|    918|        return it;
 1880|  1.06k|    }
 1881|  1.06k|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEmT_:
 1094|  1.06k|{
 1095|  1.06k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|  1.06k|        return r.size();
 1097|  1.06k|    }
 1098|  1.06k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|  1.06k|                           ranges::const_iterator_t<Range>,
 1100|  1.06k|                           typename detail::basic_scan_buffer<
 1101|  1.06k|                               detail::char_t<Range>>::forward_iterator>) {
 1102|  1.06k|        if constexpr (ranges::common_range<Range>) {
 1103|  1.06k|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|  1.06k|        }
 1105|  1.06k|        else {
 1106|  1.06k|            if (r.begin().stores_parent()) {
 1107|  1.06k|                return static_cast<size_t>(
 1108|  1.06k|                    r.begin().parent()->chars_available() -
 1109|  1.06k|                    r.begin().position());
 1110|  1.06k|            }
 1111|  1.06k|            return r.begin().contiguous_segment().size();
 1112|  1.06k|        }
 1113|  1.06k|    }
 1114|  1.06k|    else {
 1115|  1.06k|        return 0;
 1116|  1.06k|    }
 1117|  1.06k|}
_ZNK3scn2v34impl16bool_reader_base12read_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5354|    548|    {
 5355|    548|        scan_error err{scan_error::invalid_scanned_value,
 5356|    548|                       "Failed to read boolean"};
 5357|       |
 5358|    548|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5358:13): [True: 484, False: 64]
  ------------------
 5359|    484|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5359:22): [True: 0, False: 484]
  ------------------
 5360|      0|                return *r;
 5361|      0|            }
 5362|    484|            else {
 5363|    484|                err = r.error();
 5364|    484|            }
 5365|    484|        }
 5366|       |
 5367|    548|        if (m_options & allow_text) {
  ------------------
  |  Branch (5367:13): [True: 524, False: 24]
  ------------------
 5368|    524|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5368:22): [True: 0, False: 524]
  ------------------
 5369|      0|                return *r;
 5370|      0|            }
 5371|    524|            else {
 5372|    524|                err = r.error();
 5373|    524|            }
 5374|    524|        }
 5375|       |
 5376|    548|        return unexpected(err);
 5377|    548|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5401|    524|    {
 5402|    524|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5402:18): [True: 0, False: 524]
  ------------------
 5403|      0|            value = true;
 5404|      0|            return *r;
 5405|      0|        }
 5406|    524|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5406:18): [True: 0, False: 524]
  ------------------
 5407|      0|            value = false;
 5408|      0|            return *r;
 5409|      0|        }
 5410|       |
 5411|    524|        return unexpected_scan_error(
 5412|    524|            scan_error::invalid_scanned_value,
 5413|    524|            "Failed to read textual boolean value: No match");
 5414|    524|    }
_ZN3scn2v34impl28read_matching_string_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2193|  1.04k|{
 2194|  1.04k|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  1.04k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.04k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.04k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 138, False: 910]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    138|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    138|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    138|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    138|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    138|    }                                                  \
  |  |  |  | 3671|  1.04k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    910|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2195|    910|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2196|    910|                    .transform_error(make_eof_parse_error));
 2197|       |
 2198|    910|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2198:19): [Folded - Ignored]
  ------------------
 2199|    910|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2200|    910|        if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|    910|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 910, False: 0]
  |  |  ------------------
  ------------------
 2201|    910|            return unexpected(parse_error::error);
 2202|    910|        }
 2203|      0|        return it;
 2204|    910|    }
 2205|    910|    else {
 2206|    910|        auto range_it = range.begin();
 2207|    910|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
 2208|    910|            if (SCN_UNLIKELY(*range_it !=
 2209|    910|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2210|    910|                return unexpected(parse_error::error);
 2211|    910|            }
 2212|    910|        }
 2213|    910|        return it;
 2214|    910|    }
 2215|    910|}
_ZNK3scn2v34impl20reader_impl_for_boolIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERbNSL_10locale_refE:
 5515|    412|    {
 5516|    412|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5517|       |
 5518|    412|#if !SCN_DISABLE_LOCALE
 5519|    412|        if (specs.localized) {
  ------------------
  |  Branch (5519:13): [True: 46, False: 366]
  ------------------
 5520|     46|            return rd.read_localized(range, loc, value);
 5521|     46|        }
 5522|    366|#endif
 5523|       |
 5524|    366|        return rd.read_classic(range, value);
 5525|    412|    }
_ZNK3scn2v34impl11bool_readerIcE14read_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refERb:
 5427|     46|    {
 5428|     46|        scan_error err{scan_error::invalid_scanned_value,
 5429|     46|                       "Failed to read boolean"};
 5430|       |
 5431|     46|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5431:13): [True: 44, False: 2]
  ------------------
 5432|     44|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5432:22): [True: 0, False: 44]
  ------------------
 5433|      0|                return *r;
 5434|      0|            }
 5435|     44|            else {
 5436|     44|                err = r.error();
 5437|     44|            }
 5438|     44|        }
 5439|       |
 5440|     46|        if (m_options & allow_text) {
  ------------------
  |  Branch (5440:13): [True: 8, False: 38]
  ------------------
 5441|      8|            auto stdloc = loc.get<std::locale>();
 5442|      8|            const auto& numpunct =
 5443|      8|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5444|      8|            const auto truename = numpunct.truename();
 5445|      8|            const auto falsename = numpunct.falsename();
 5446|       |
 5447|      8|            if (auto r =
  ------------------
  |  Branch (5447:22): [True: 0, False: 8]
  ------------------
 5448|      8|                    read_textual_custom(range, value, truename, falsename)) {
 5449|      0|                return *r;
 5450|      0|            }
 5451|      8|            else {
 5452|      8|                err = r.error();
 5453|      8|            }
 5454|      8|        }
 5455|       |
 5456|     46|        return unexpected(err);
 5457|     46|    }
_ZNK3scn2v34impl11bool_readerIcE19read_textual_customINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNSD_17basic_string_viewIcNSD_11char_traitsIcEEEESP_:
 5467|      8|    {
 5468|      8|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5469|      8|        const auto shorter = std::pair{
 5470|      8|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5470:13): [True: 8, False: 0]
  ------------------
 5471|      8|        const auto longer = std::pair{
 5472|      8|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5472:13): [True: 0, False: 8]
  ------------------
 5473|       |
 5474|      8|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5474:18): [True: 0, False: 8]
  ------------------
 5475|      0|            value = shorter.second;
 5476|      0|            return *r;
 5477|      0|        }
 5478|      8|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5478:18): [True: 0, False: 8]
  ------------------
 5479|      0|            value = longer.second;
 5480|      0|            return *r;
 5481|      0|        }
 5482|       |
 5483|      8|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5484|      8|                                     "read_textual: No match");
 5485|      8|    }
_ZN3scn2v34impl20read_matching_stringINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewINDTcl4implISD_EEE4typeENSB_11char_traitsISL_EEEE:
 2178|     16|{
 2179|     16|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2, False: 14]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      2|    }                                                  \
  |  |  |  | 3671|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     14|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2180|     14|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2181|     14|                    .transform_error(make_eof_parse_error));
 2182|       |
 2183|     14|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2184|     14|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14, False: 0]
  |  |  ------------------
  ------------------
 2185|     14|        return unexpected(parse_error::error);
 2186|     14|    }
 2187|      0|    return it;
 2188|     14|}
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIcEENS0_13scan_expectedIPKcEERT_:
 6192|  16.5k|    {
 6193|  16.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  16.5k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  16.5k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  16.5k|            auto rd = make_reader<T, char_type>();
 6198|  16.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  16.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 15.7k, False: 766]
  |  |  ------------------
  ------------------
 6199|  15.7k|                return unexpected(e);
 6200|  15.7k|            }
 6201|       |
 6202|    766|            return impl(rd, range, value);
 6203|  16.5k|        }
 6204|  16.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  16.5k|            auto rd = make_reader<T, char_type>();
 6206|  16.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  16.5k|                return unexpected(e);
 6208|  16.5k|            }
 6209|       |
 6210|  16.5k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  16.5k|                specs.width != 0) {
 6212|  16.5k|                return impl(rd, range, value);
 6213|  16.5k|            }
 6214|       |
 6215|  16.5k|            auto crange = get_as_contiguous(range);
 6216|  16.5k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  16.5k|            return ranges::next(range.begin(),
 6218|  16.5k|                                ranges::distance(crange.begin(), it));
 6219|  16.5k|        }
 6220|  16.5k|        else {
 6221|  16.5k|            SCN_EXPECT(false);
 6222|  16.5k|            SCN_UNREACHABLE;
 6223|  16.5k|        }
 6224|  16.5k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_charIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    766|    {
 6124|    766|        const bool need_skipped_width =
 6125|    766|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 180, False: 586]
  |  Branch (6125:33): [True: 504, False: 82]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    766|        auto it = rng.begin();
 6129|    766|        std::ptrdiff_t prefix_width = 0;
 6130|    766|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 510, False: 256]
  ------------------
 6131|    510|            auto max_width_view = take_width(rng, specs.precision);
 6132|    510|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    510|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    510|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    510|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    510|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 510]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    510|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    510|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    510|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    510|            it = prefix_result.first.base();
 6135|    510|            prefix_width = prefix_result.second;
 6136|    510|        }
 6137|    256|        else {
 6138|    256|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    256|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    256|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    256|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    256|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 256]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    256|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    256|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    256|            std::tie(it, prefix_width) = prefix_result;
 6140|    256|        }
 6141|    766|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    766|        std::ptrdiff_t value_width = 0;
 6145|    766|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 510, False: 256]
  ------------------
 6146|    510|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 504]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|    504|            const auto initial_width = specs.precision - prefix_width;
 6154|    504|            auto max_width_view =
 6155|    504|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    504|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    504|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    504|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    504|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    504|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 34, False: 470]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     34|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     34|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     34|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     34|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     34|    }                                                  \
  |  |  |  | 3671|    504|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    470|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    470|            it = w_it.base();
 6158|    470|            value_width = initial_width - w_it.count();
 6159|    470|        }
 6160|    256|        else {
 6161|    256|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    256|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    256|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    256|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 22, False: 234]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|     22|    }                                                  \
  |  | 3671|    256|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    256|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|    234|                                             specs, value, loc));
 6163|       |
 6164|    234|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 170, False: 64]
  ------------------
 6165|    170|                value_width = calculate_text_width(
 6166|    170|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    170|                        .view());
 6168|    170|            }
 6169|    234|        }
 6170|       |
 6171|       |        // Read postfix
 6172|    704|        std::ptrdiff_t postfix_width = 0;
 6173|    704|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 704, False: 0]
  ------------------
 6174|    704|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|    704|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    704|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    704|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    704|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 704]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    704|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    704|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|    704|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|    704|                                 rd.skip_ws_before_read(), prefix_width,
 6177|    704|                                 value_width));
 6178|    704|            std::tie(it, postfix_width) = postfix_result;
 6179|    704|        }
 6180|       |
 6181|    704|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|    704|                                                 value_width, postfix_width);
 6183|    704|            !e) {
  ------------------
  |  Branch (6183:13): [True: 158, False: 546]
  ------------------
 6184|    158|            return unexpected(e);
 6185|    158|        }
 6186|       |
 6187|    546|        return it;
 6188|    704|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 6192|  16.6k|    {
 6193|  16.6k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  16.6k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  16.6k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  16.6k|            auto rd = make_reader<T, char_type>();
 6198|  16.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  16.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 15.7k, False: 830]
  |  |  ------------------
  ------------------
 6199|  15.7k|                return unexpected(e);
 6200|  15.7k|            }
 6201|       |
 6202|    830|            return impl(rd, range, value);
 6203|  16.6k|        }
 6204|  16.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  16.6k|            auto rd = make_reader<T, char_type>();
 6206|  16.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  16.6k|                return unexpected(e);
 6208|  16.6k|            }
 6209|       |
 6210|  16.6k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  16.6k|                specs.width != 0) {
 6212|  16.6k|                return impl(rd, range, value);
 6213|  16.6k|            }
 6214|       |
 6215|  16.6k|            auto crange = get_as_contiguous(range);
 6216|  16.6k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  16.6k|            return ranges::next(range.begin(),
 6218|  16.6k|                                ranges::distance(crange.begin(), it));
 6219|  16.6k|        }
 6220|  16.6k|        else {
 6221|  16.6k|            SCN_EXPECT(false);
 6222|  16.6k|            SCN_UNREACHABLE;
 6223|  16.6k|        }
 6224|  16.6k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    830|    {
 6124|    830|        const bool need_skipped_width =
 6125|    830|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 188, False: 642]
  |  Branch (6125:33): [True: 510, False: 132]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    830|        auto it = rng.begin();
 6129|    830|        std::ptrdiff_t prefix_width = 0;
 6130|    830|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 518, False: 312]
  ------------------
 6131|    518|            auto max_width_view = take_width(rng, specs.precision);
 6132|    518|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    518|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    518|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    518|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    518|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 18, False: 500]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     18|    }                                                  \
  |  |  |  | 3671|    518|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    500|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    500|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    500|            it = prefix_result.first.base();
 6135|    500|            prefix_width = prefix_result.second;
 6136|    500|        }
 6137|    312|        else {
 6138|    312|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    312|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    312|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    312|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    312|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 312]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    312|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    312|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    312|            std::tie(it, prefix_width) = prefix_result;
 6140|    312|        }
 6141|    812|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    812|        std::ptrdiff_t value_width = 0;
 6145|    812|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 500, False: 312]
  ------------------
 6146|    500|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 8, False: 492]
  ------------------
 6147|      8|                return unexpected_scan_error(
 6148|      8|                    scan_error::invalid_scanned_value,
 6149|      8|                    "Too many fill characters before value, "
 6150|      8|                    "precision exceeded before reading value");
 6151|      8|            }
 6152|       |
 6153|    492|            const auto initial_width = specs.precision - prefix_width;
 6154|    492|            auto max_width_view =
 6155|    492|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    492|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    492|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    492|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    492|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    492|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 492, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    492|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    492|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    492|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    492|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    492|    }                                                  \
  |  |  |  | 3671|    492|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    312|        else {
 6161|    312|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    312|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    312|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    312|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 312, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    312|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    312|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    312|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    312|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    312|    }                                                  \
  |  | 3671|    312|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    312|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6192|  16.5k|    {
 6193|  16.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  16.5k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  16.5k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  16.5k|            auto rd = make_reader<T, char_type>();
 6198|  16.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  16.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 134, False: 16.3k]
  |  |  ------------------
  ------------------
 6199|    134|                return unexpected(e);
 6200|    134|            }
 6201|       |
 6202|  16.3k|            return impl(rd, range, value);
 6203|  16.5k|        }
 6204|  16.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  16.5k|            auto rd = make_reader<T, char_type>();
 6206|  16.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  16.5k|                return unexpected(e);
 6208|  16.5k|            }
 6209|       |
 6210|  16.5k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  16.5k|                specs.width != 0) {
 6212|  16.5k|                return impl(rd, range, value);
 6213|  16.5k|            }
 6214|       |
 6215|  16.5k|            auto crange = get_as_contiguous(range);
 6216|  16.5k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  16.5k|            return ranges::next(range.begin(),
 6218|  16.5k|                                ranges::distance(crange.begin(), it));
 6219|  16.5k|        }
 6220|  16.5k|        else {
 6221|  16.5k|            SCN_EXPECT(false);
 6222|  16.5k|            SCN_UNREACHABLE;
 6223|  16.5k|        }
 6224|  16.5k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6123|  16.3k|    {
 6124|  16.3k|        const bool need_skipped_width =
 6125|  16.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 378, False: 15.9k]
  |  Branch (6125:33): [True: 1.92k, False: 14.0k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  16.3k|        auto it = rng.begin();
 6129|  16.3k|        std::ptrdiff_t prefix_width = 0;
 6130|  16.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 1.97k, False: 14.3k]
  ------------------
 6131|  1.97k|            auto max_width_view = take_width(rng, specs.precision);
 6132|  1.97k|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|  1.97k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.97k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.97k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.97k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14, False: 1.95k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     14|    }                                                  \
  |  |  |  | 3671|  1.97k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.95k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|  1.95k|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|  1.95k|            it = prefix_result.first.base();
 6135|  1.95k|            prefix_width = prefix_result.second;
 6136|  1.95k|        }
 6137|  14.3k|        else {
 6138|  14.3k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  14.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  14.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  14.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 14.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  14.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  14.3k|            std::tie(it, prefix_width) = prefix_result;
 6140|  14.3k|        }
 6141|  16.3k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  16.3k|        std::ptrdiff_t value_width = 0;
 6145|  16.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 1.95k, False: 14.3k]
  ------------------
 6146|  1.95k|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 16, False: 1.94k]
  ------------------
 6147|     16|                return unexpected_scan_error(
 6148|     16|                    scan_error::invalid_scanned_value,
 6149|     16|                    "Too many fill characters before value, "
 6150|     16|                    "precision exceeded before reading value");
 6151|     16|            }
 6152|       |
 6153|  1.94k|            const auto initial_width = specs.precision - prefix_width;
 6154|  1.94k|            auto max_width_view =
 6155|  1.94k|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|  1.94k|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|  1.94k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.94k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.94k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.94k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.23k, False: 706]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.23k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.23k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.23k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.23k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.23k|    }                                                  \
  |  |  |  | 3671|  1.94k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    706|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    706|            it = w_it.base();
 6158|    706|            value_width = initial_width - w_it.count();
 6159|    706|        }
 6160|  14.3k|        else {
 6161|  14.3k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  14.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  14.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 11.6k, False: 2.78k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  11.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  11.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  11.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  11.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  11.6k|    }                                                  \
  |  | 3671|  14.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  2.78k|                                             specs, value, loc));
 6163|       |
 6164|  2.78k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 278, False: 2.51k]
  ------------------
 6165|    278|                value_width = calculate_text_width(
 6166|    278|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    278|                        .view());
 6168|    278|            }
 6169|  2.78k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  3.49k|        std::ptrdiff_t postfix_width = 0;
 6173|  3.49k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 2.96k, False: 530]
  ------------------
 6174|  2.96k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  2.96k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.96k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.96k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.96k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.96k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  2.96k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  2.96k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  2.96k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  2.96k|                                 value_width));
 6178|  2.96k|            std::tie(it, postfix_width) = postfix_result;
 6179|  2.96k|        }
 6180|       |
 6181|  3.49k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  3.49k|                                                 value_width, postfix_width);
 6183|  3.49k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 166, False: 3.32k]
  ------------------
 6184|    166|            return unexpected(e);
 6185|    166|        }
 6186|       |
 6187|  3.32k|        return it;
 6188|  3.49k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6192|  16.5k|    {
 6193|  16.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  16.5k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  16.5k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  16.5k|            auto rd = make_reader<T, char_type>();
 6198|  16.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  16.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 134, False: 16.3k]
  |  |  ------------------
  ------------------
 6199|    134|                return unexpected(e);
 6200|    134|            }
 6201|       |
 6202|  16.3k|            return impl(rd, range, value);
 6203|  16.5k|        }
 6204|  16.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  16.5k|            auto rd = make_reader<T, char_type>();
 6206|  16.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  16.5k|                return unexpected(e);
 6208|  16.5k|            }
 6209|       |
 6210|  16.5k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  16.5k|                specs.width != 0) {
 6212|  16.5k|                return impl(rd, range, value);
 6213|  16.5k|            }
 6214|       |
 6215|  16.5k|            auto crange = get_as_contiguous(range);
 6216|  16.5k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  16.5k|            return ranges::next(range.begin(),
 6218|  16.5k|                                ranges::distance(crange.begin(), it));
 6219|  16.5k|        }
 6220|  16.5k|        else {
 6221|  16.5k|            SCN_EXPECT(false);
 6222|  16.5k|            SCN_UNREACHABLE;
 6223|  16.5k|        }
 6224|  16.5k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6123|  16.3k|    {
 6124|  16.3k|        const bool need_skipped_width =
 6125|  16.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 378, False: 15.9k]
  |  Branch (6125:33): [True: 1.92k, False: 14.0k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  16.3k|        auto it = rng.begin();
 6129|  16.3k|        std::ptrdiff_t prefix_width = 0;
 6130|  16.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 1.97k, False: 14.3k]
  ------------------
 6131|  1.97k|            auto max_width_view = take_width(rng, specs.precision);
 6132|  1.97k|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|  1.97k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.97k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.97k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.97k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14, False: 1.95k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     14|    }                                                  \
  |  |  |  | 3671|  1.97k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.95k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|  1.95k|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|  1.95k|            it = prefix_result.first.base();
 6135|  1.95k|            prefix_width = prefix_result.second;
 6136|  1.95k|        }
 6137|  14.3k|        else {
 6138|  14.3k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  14.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  14.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  14.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 14.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  14.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  14.3k|            std::tie(it, prefix_width) = prefix_result;
 6140|  14.3k|        }
 6141|  16.3k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  16.3k|        std::ptrdiff_t value_width = 0;
 6145|  16.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 1.95k, False: 14.3k]
  ------------------
 6146|  1.95k|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 16, False: 1.94k]
  ------------------
 6147|     16|                return unexpected_scan_error(
 6148|     16|                    scan_error::invalid_scanned_value,
 6149|     16|                    "Too many fill characters before value, "
 6150|     16|                    "precision exceeded before reading value");
 6151|     16|            }
 6152|       |
 6153|  1.94k|            const auto initial_width = specs.precision - prefix_width;
 6154|  1.94k|            auto max_width_view =
 6155|  1.94k|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|  1.94k|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|  1.94k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.94k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.94k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.94k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.23k, False: 706]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.23k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.23k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.23k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.23k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.23k|    }                                                  \
  |  |  |  | 3671|  1.94k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    706|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    706|            it = w_it.base();
 6158|    706|            value_width = initial_width - w_it.count();
 6159|    706|        }
 6160|  14.3k|        else {
 6161|  14.3k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  14.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  14.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 11.6k, False: 2.78k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  11.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  11.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  11.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  11.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  11.6k|    }                                                  \
  |  | 3671|  14.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  2.78k|                                             specs, value, loc));
 6163|       |
 6164|  2.78k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 278, False: 2.51k]
  ------------------
 6165|    278|                value_width = calculate_text_width(
 6166|    278|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    278|                        .view());
 6168|    278|            }
 6169|  2.78k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  3.49k|        std::ptrdiff_t postfix_width = 0;
 6173|  3.49k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 2.96k, False: 530]
  ------------------
 6174|  2.96k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  2.96k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.96k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.96k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.96k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.96k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  2.96k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  2.96k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  2.96k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  2.96k|                                 value_width));
 6178|  2.96k|            std::tie(it, postfix_width) = postfix_result;
 6179|  2.96k|        }
 6180|       |
 6181|  3.49k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  3.49k|                                                 value_width, postfix_width);
 6183|  3.49k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 166, False: 3.32k]
  ------------------
 6184|    166|            return unexpected(e);
 6185|    166|        }
 6186|       |
 6187|  3.32k|        return it;
 6188|  3.49k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKcEERT_:
 6192|  16.5k|    {
 6193|  16.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  16.5k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  16.5k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  16.5k|            auto rd = make_reader<T, char_type>();
 6198|  16.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  16.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 134, False: 16.3k]
  |  |  ------------------
  ------------------
 6199|    134|                return unexpected(e);
 6200|    134|            }
 6201|       |
 6202|  16.3k|            return impl(rd, range, value);
 6203|  16.5k|        }
 6204|  16.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  16.5k|            auto rd = make_reader<T, char_type>();
 6206|  16.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  16.5k|                return unexpected(e);
 6208|  16.5k|            }
 6209|       |
 6210|  16.5k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  16.5k|                specs.width != 0) {
 6212|  16.5k|                return impl(rd, range, value);
 6213|  16.5k|            }
 6214|       |
 6215|  16.5k|            auto crange = get_as_contiguous(range);
 6216|  16.5k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  16.5k|            return ranges::next(range.begin(),
 6218|  16.5k|                                ranges::distance(crange.begin(), it));
 6219|  16.5k|        }
 6220|  16.5k|        else {
 6221|  16.5k|            SCN_EXPECT(false);
 6222|  16.5k|            SCN_UNREACHABLE;
 6223|  16.5k|        }
 6224|  16.5k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6123|  16.3k|    {
 6124|  16.3k|        const bool need_skipped_width =
 6125|  16.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 378, False: 15.9k]
  |  Branch (6125:33): [True: 1.92k, False: 14.0k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  16.3k|        auto it = rng.begin();
 6129|  16.3k|        std::ptrdiff_t prefix_width = 0;
 6130|  16.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 1.97k, False: 14.3k]
  ------------------
 6131|  1.97k|            auto max_width_view = take_width(rng, specs.precision);
 6132|  1.97k|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|  1.97k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.97k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.97k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.97k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14, False: 1.95k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     14|    }                                                  \
  |  |  |  | 3671|  1.97k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.95k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|  1.95k|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|  1.95k|            it = prefix_result.first.base();
 6135|  1.95k|            prefix_width = prefix_result.second;
 6136|  1.95k|        }
 6137|  14.3k|        else {
 6138|  14.3k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  14.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  14.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  14.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 14.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  14.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  14.3k|            std::tie(it, prefix_width) = prefix_result;
 6140|  14.3k|        }
 6141|  16.3k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  16.3k|        std::ptrdiff_t value_width = 0;
 6145|  16.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 1.95k, False: 14.3k]
  ------------------
 6146|  1.95k|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 16, False: 1.94k]
  ------------------
 6147|     16|                return unexpected_scan_error(
 6148|     16|                    scan_error::invalid_scanned_value,
 6149|     16|                    "Too many fill characters before value, "
 6150|     16|                    "precision exceeded before reading value");
 6151|     16|            }
 6152|       |
 6153|  1.94k|            const auto initial_width = specs.precision - prefix_width;
 6154|  1.94k|            auto max_width_view =
 6155|  1.94k|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|  1.94k|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|  1.94k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.94k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.94k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.94k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.23k, False: 706]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.23k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.23k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.23k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.23k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.23k|    }                                                  \
  |  |  |  | 3671|  1.94k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    706|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    706|            it = w_it.base();
 6158|    706|            value_width = initial_width - w_it.count();
 6159|    706|        }
 6160|  14.3k|        else {
 6161|  14.3k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  14.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  14.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 11.6k, False: 2.78k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  11.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  11.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  11.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  11.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  11.6k|    }                                                  \
  |  | 3671|  14.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  2.78k|                                             specs, value, loc));
 6163|       |
 6164|  2.78k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 278, False: 2.51k]
  ------------------
 6165|    278|                value_width = calculate_text_width(
 6166|    278|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    278|                        .view());
 6168|    278|            }
 6169|  2.78k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  3.49k|        std::ptrdiff_t postfix_width = 0;
 6173|  3.49k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 2.96k, False: 530]
  ------------------
 6174|  2.96k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  2.96k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.96k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.96k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.96k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.96k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  2.96k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  2.96k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  2.96k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  2.96k|                                 value_width));
 6178|  2.96k|            std::tie(it, postfix_width) = postfix_result;
 6179|  2.96k|        }
 6180|       |
 6181|  3.49k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  3.49k|                                                 value_width, postfix_width);
 6183|  3.49k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 166, False: 3.32k]
  ------------------
 6184|    166|            return unexpected(e);
 6185|    166|        }
 6186|       |
 6187|  3.32k|        return it;
 6188|  3.49k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|  5.90k|{
 5795|  5.90k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.90k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.90k]
  |  |  ------------------
  ------------------
 5796|      0|        return unexpected(e);
 5797|      0|    }
 5798|       |
 5799|  5.90k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 656, False: 5.24k]
  ------------------
 5800|    656|        return range.begin();
 5801|    656|    }
 5802|       |
 5803|  5.24k|    return skip_classic_whitespace(range);
 5804|  5.90k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
 5870|    656|    {
 5871|    656|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    656|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    656|                          basic_contiguous_scan_context<char_type>>) {
 5875|    656|            auto rd = make_reader<T, char_type>();
 5876|    656|            return impl(rd, range, value);
 5877|    656|        }
 5878|    656|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    656|            auto rd = make_reader<T, char_type>();
 5880|    656|            if (!is_segment_contiguous(range)) {
 5881|    656|                return impl(rd, range, value);
 5882|    656|            }
 5883|    656|            auto crange = get_as_contiguous(range);
 5884|    656|            SCN_TRY(it, impl(rd, crange, value));
 5885|    656|            return ranges::next(range.begin(),
 5886|    656|                                ranges::distance(crange.begin(), it));
 5887|    656|        }
 5888|    656|        else {
 5889|    656|            SCN_EXPECT(false);
 5890|    656|            SCN_UNREACHABLE;
 5891|    656|        }
 5892|    656|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    656|    {
 5863|    656|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    656|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    656|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    656|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    656|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 656]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    656|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    656|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    656|                        .transform_error(make_eof_scan_error));
 5865|    656|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    656|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|    656|    {
 3528|    656|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    656|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|    656|        return read_default_with_base(range, value, 10);
 3530|    656|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|    656|    {
 3492|    656|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3672|    656|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    656|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    656|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    656|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 656]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    656|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    656|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|    656|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|    656|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|    656|            if (prefix_result.sign == sign_type::minus_sign) {
 3497|    656|                return unexpected_scan_error(
 3498|    656|                    scan_error::invalid_scanned_value,
 3499|    656|                    "Unexpected '-' sign when parsing an "
 3500|    656|                    "unsigned value");
 3501|    656|            }
 3502|    656|        }
 3503|       |
 3504|    656|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 656]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  1.31k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    656|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    656|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    656|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    656|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 656]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    656|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    656|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  1.31k|                parse_integer_digits_without_thsep(
 3511|  1.31k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  1.31k|                    prefix_result.parsed_base));
 3513|       |
 3514|  1.31k|        auto buf = make_contiguous_buffer(
 3515|  1.31k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  1.31k|        SCN_TRY(result_it,
  ------------------
  |  | 3672|    656|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    656|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    656|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    656|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 656, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    656|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    656|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    656|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    656|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    656|    }                                                  \
  |  |  |  | 3671|    656|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|      0|                                    prefix_result.parsed_base));
 3519|       |
 3520|      0|        return ranges::next(prefix_result.iterator,
 3521|      0|                            ranges::distance(buf.view().begin(), result_it));
 3522|  1.31k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
 5870|    656|    {
 5871|    656|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    656|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    656|                          basic_contiguous_scan_context<char_type>>) {
 5875|    656|            auto rd = make_reader<T, char_type>();
 5876|    656|            return impl(rd, range, value);
 5877|    656|        }
 5878|    656|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    656|            auto rd = make_reader<T, char_type>();
 5880|    656|            if (!is_segment_contiguous(range)) {
 5881|    656|                return impl(rd, range, value);
 5882|    656|            }
 5883|    656|            auto crange = get_as_contiguous(range);
 5884|    656|            SCN_TRY(it, impl(rd, crange, value));
 5885|    656|            return ranges::next(range.begin(),
 5886|    656|                                ranges::distance(crange.begin(), it));
 5887|    656|        }
 5888|    656|        else {
 5889|    656|            SCN_EXPECT(false);
 5890|    656|            SCN_UNREACHABLE;
 5891|    656|        }
 5892|    656|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    656|    {
 5863|    656|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    656|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    656|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    656|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    656|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 656]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    656|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    656|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    656|                        .transform_error(make_eof_scan_error));
 5865|    656|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    656|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|    656|    {
 3528|    656|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    656|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|    656|        return read_default_with_base(range, value, 10);
 3530|    656|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|    656|    {
 3492|    656|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3672|    656|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    656|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    656|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    656|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 656]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    656|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    656|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|    656|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|    656|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|    656|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3496:17): [True: 0, False: 656]
  ------------------
 3497|      0|                return unexpected_scan_error(
 3498|      0|                    scan_error::invalid_scanned_value,
 3499|      0|                    "Unexpected '-' sign when parsing an "
 3500|      0|                    "unsigned value");
 3501|      0|            }
 3502|    656|        }
 3503|       |
 3504|    656|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 656]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  1.31k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    656|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    656|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    656|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    656|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 656]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    656|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    656|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  1.31k|                parse_integer_digits_without_thsep(
 3511|  1.31k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  1.31k|                    prefix_result.parsed_base));
 3513|       |
 3514|  1.31k|        auto buf = make_contiguous_buffer(
 3515|  1.31k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  1.31k|        SCN_TRY(result_it,
  ------------------
  |  | 3672|    656|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    656|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    656|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    656|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 656, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    656|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    656|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    656|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    656|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    656|    }                                                  \
  |  |  |  | 3671|    656|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|      0|                                    prefix_result.parsed_base));
 3519|       |
 3520|      0|        return ranges::next(prefix_result.iterator,
 3521|      0|                            ranges::distance(buf.view().begin(), result_it));
 3522|  1.31k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIPvEENS0_13scan_expectedIPKwEERT_:
 5870|    656|    {
 5871|    656|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    656|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    656|                          basic_contiguous_scan_context<char_type>>) {
 5875|    656|            auto rd = make_reader<T, char_type>();
 5876|    656|            return impl(rd, range, value);
 5877|    656|        }
 5878|    656|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    656|            auto rd = make_reader<T, char_type>();
 5880|    656|            if (!is_segment_contiguous(range)) {
 5881|    656|                return impl(rd, range, value);
 5882|    656|            }
 5883|    656|            auto crange = get_as_contiguous(range);
 5884|    656|            SCN_TRY(it, impl(rd, crange, value));
 5885|    656|            return ranges::next(range.begin(),
 5886|    656|                                ranges::distance(crange.begin(), it));
 5887|    656|        }
 5888|    656|        else {
 5889|    656|            SCN_EXPECT(false);
 5890|    656|            SCN_UNREACHABLE;
 5891|    656|        }
 5892|    656|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_23reader_impl_for_voidptrIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 5862|    656|    {
 5863|    656|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    656|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    656|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    656|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    656|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 656]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    656|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    656|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    656|                        .transform_error(make_eof_scan_error));
 5865|    656|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    656|    }
_ZNK3scn2v34impl23reader_impl_for_voidptrIwE19skip_ws_before_readEv:
 5747|  1.28k|    {
 5748|  1.28k|        return true;
 5749|  1.28k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RPvNS0_6detail10locale_refE:
 5764|  1.08k|    {
 5765|  1.08k|        detail::format_specs specs{};
 5766|  1.08k|        specs.type = detail::presentation_type::int_hex;
 5767|       |
 5768|  1.08k|        std::uintptr_t intvalue{};
 5769|  1.08k|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3672|  1.08k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.08k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.08k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.08k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.08k|    }                                                  \
  |  |  |  | 3671|  1.08k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5770|      0|                                                                intvalue, loc));
 5771|      0|        value = reinterpret_cast<void*>(intvalue);
 5772|      0|        return result;
 5773|  1.08k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIbEENS0_13scan_expectedIPKwEERT_:
 5870|    656|    {
 5871|    656|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    656|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    656|                          basic_contiguous_scan_context<char_type>>) {
 5875|    656|            auto rd = make_reader<T, char_type>();
 5876|    656|            return impl(rd, range, value);
 5877|    656|        }
 5878|    656|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    656|            auto rd = make_reader<T, char_type>();
 5880|    656|            if (!is_segment_contiguous(range)) {
 5881|    656|                return impl(rd, range, value);
 5882|    656|            }
 5883|    656|            auto crange = get_as_contiguous(range);
 5884|    656|            SCN_TRY(it, impl(rd, crange, value));
 5885|    656|            return ranges::next(range.begin(),
 5886|    656|                                ranges::distance(crange.begin(), it));
 5887|    656|        }
 5888|    656|        else {
 5889|    656|            SCN_EXPECT(false);
 5890|    656|            SCN_UNREACHABLE;
 5891|    656|        }
 5892|    656|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_20reader_impl_for_boolIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    656|    {
 5863|    656|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    656|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    656|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    656|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    656|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 656]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    656|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    656|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    656|                        .transform_error(make_eof_scan_error));
 5865|    656|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    656|    }
_ZNK3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIwEEwE19skip_ws_before_readEv:
 3034|  1.50k|    {
 3035|  1.50k|        return true;
 3036|  1.50k|    }
_ZNK3scn2v34impl20reader_impl_for_boolIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNS0_6detail10locale_refE:
 5503|    656|    {
 5504|    656|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    656|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5505|       |
 5506|    656|        return bool_reader<CharT>{}.read_classic(range, value);
 5507|    656|    }
_ZNK3scn2v34impl16bool_reader_base12read_classicINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5354|  1.15k|    {
 5355|  1.15k|        scan_error err{scan_error::invalid_scanned_value,
 5356|  1.15k|                       "Failed to read boolean"};
 5357|       |
 5358|  1.15k|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5358:13): [True: 1.10k, False: 48]
  ------------------
 5359|  1.10k|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5359:22): [True: 0, False: 1.10k]
  ------------------
 5360|      0|                return *r;
 5361|      0|            }
 5362|  1.10k|            else {
 5363|  1.10k|                err = r.error();
 5364|  1.10k|            }
 5365|  1.10k|        }
 5366|       |
 5367|  1.15k|        if (m_options & allow_text) {
  ------------------
  |  Branch (5367:13): [True: 1.13k, False: 18]
  ------------------
 5368|  1.13k|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5368:22): [True: 0, False: 1.13k]
  ------------------
 5369|      0|                return *r;
 5370|      0|            }
 5371|  1.13k|            else {
 5372|  1.13k|                err = r.error();
 5373|  1.13k|            }
 5374|  1.13k|        }
 5375|       |
 5376|  1.15k|        return unexpected(err);
 5377|  1.15k|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5383|  1.13k|    {
 5384|  1.13k|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5384:18): [True: 0, False: 1.13k]
  ------------------
 5385|      0|            value = false;
 5386|      0|            return *r;
 5387|      0|        }
 5388|  1.13k|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5388:18): [True: 0, False: 1.13k]
  ------------------
 5389|      0|            value = true;
 5390|      0|            return *r;
 5391|      0|        }
 5392|       |
 5393|  1.13k|        return unexpected_scan_error(
 5394|  1.13k|            scan_error::invalid_scanned_value,
 5395|  1.13k|            "Failed to read numeric boolean value: No match");
 5396|  1.13k|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5401|  1.13k|    {
 5402|  1.13k|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5402:18): [True: 0, False: 1.13k]
  ------------------
 5403|      0|            value = true;
 5404|      0|            return *r;
 5405|      0|        }
 5406|  1.13k|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5406:18): [True: 0, False: 1.13k]
  ------------------
 5407|      0|            value = false;
 5408|      0|            return *r;
 5409|      0|        }
 5410|       |
 5411|  1.13k|        return unexpected_scan_error(
 5412|  1.13k|            scan_error::invalid_scanned_value,
 5413|  1.13k|            "Failed to read textual boolean value: No match");
 5414|  1.13k|    }
_ZN3scn2v34impl28read_matching_string_classicINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2193|  2.26k|{
 2194|  2.26k|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  2.26k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.26k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.26k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 132, False: 2.13k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    132|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    132|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    132|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    132|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    132|    }                                                  \
  |  |  |  | 3671|  2.26k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.13k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2195|  2.13k|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2196|  2.13k|                    .transform_error(make_eof_parse_error));
 2197|       |
 2198|  2.13k|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2198:19): [Folded - Ignored]
  ------------------
 2199|  2.13k|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2200|  2.13k|        if (SCN_UNLIKELY(sv.view() != str)) {
 2201|  2.13k|            return unexpected(parse_error::error);
 2202|  2.13k|        }
 2203|  2.13k|        return it;
 2204|  2.13k|    }
 2205|  2.13k|    else {
 2206|  2.13k|        auto range_it = range.begin();
 2207|  2.13k|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
  ------------------
  |  Branch (2207:28): [True: 2.13k, False: 0]
  ------------------
 2208|  2.13k|            if (SCN_UNLIKELY(*range_it !=
  ------------------
  |  |  859|  2.13k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.13k, False: 0]
  |  |  ------------------
  ------------------
 2209|  2.13k|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2210|  2.13k|                return unexpected(parse_error::error);
 2211|  2.13k|            }
 2212|  2.13k|        }
 2213|      0|        return it;
 2214|  2.13k|    }
 2215|  2.13k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIwEENS0_13scan_expectedIPKwEERT_:
 5870|    656|    {
 5871|    656|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    656|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    656|                          basic_contiguous_scan_context<char_type>>) {
 5875|    656|            auto rd = make_reader<T, char_type>();
 5876|    656|            return impl(rd, range, value);
 5877|    656|        }
 5878|    656|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    656|            auto rd = make_reader<T, char_type>();
 5880|    656|            if (!is_segment_contiguous(range)) {
 5881|    656|                return impl(rd, range, value);
 5882|    656|            }
 5883|    656|            auto crange = get_as_contiguous(range);
 5884|    656|            SCN_TRY(it, impl(rd, crange, value));
 5885|    656|            return ranges::next(range.begin(),
 5886|    656|                                ranges::distance(crange.begin(), it));
 5887|    656|        }
 5888|    656|        else {
 5889|    656|            SCN_EXPECT(false);
 5890|    656|            SCN_UNREACHABLE;
 5891|    656|        }
 5892|    656|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_wcharIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    656|    {
 5863|    656|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    656|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    656|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    656|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    656|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 656]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    656|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    656|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    656|                        .transform_error(make_eof_scan_error));
 5865|    656|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    656|    }
_ZN3scn2v34impl12float_readerIwEC2Ev:
 3657|    656|    constexpr float_reader() = default;
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 5870|    656|    {
 5871|    656|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    656|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    656|                          basic_contiguous_scan_context<char_type>>) {
 5875|    656|            auto rd = make_reader<T, char_type>();
 5876|    656|            return impl(rd, range, value);
 5877|    656|        }
 5878|    656|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    656|            auto rd = make_reader<T, char_type>();
 5880|    656|            if (!is_segment_contiguous(range)) {
 5881|    656|                return impl(rd, range, value);
 5882|    656|            }
 5883|    656|            auto crange = get_as_contiguous(range);
 5884|    656|            SCN_TRY(it, impl(rd, crange, value));
 5885|    656|            return ranges::next(range.begin(),
 5886|    656|                                ranges::distance(crange.begin(), it));
 5887|    656|        }
 5888|    656|        else {
 5889|    656|            SCN_EXPECT(false);
 5890|    656|            SCN_UNREACHABLE;
 5891|    656|        }
 5892|    656|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    656|    {
 5863|    656|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    656|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    656|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    656|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    656|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 656]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    656|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    656|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    656|                        .transform_error(make_eof_scan_error));
 5865|    656|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    656|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|    656|    {
 4152|    656|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    656|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|    656|        float_reader<CharT> rd{};
 4155|    656|        return read_impl<Range>(
 4156|    656|            range, rd,
 4157|    656|            [](float_reader<CharT>& r, auto&&... args) {
 4158|    656|                return r.read_source(SCN_FWD(args)...);
 4159|    656|            },
 4160|    656|            value);
 4161|    656|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|    656|    {
  754|    656|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|    656|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    656|              cvref<T> obj = *get<T>(fn);
  745|    656|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    656|                  obj(static_cast<decltype(args)>(args)...);
  747|    656|              }
  748|    656|              else {
  749|    656|                  return obj(static_cast<decltype(args)>(args)...);
  750|    656|              }
  751|    656|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|    656|    {
  684|    656|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    656|            return static_cast<T*>(s.m_cp);
  686|    656|        }
  687|    656|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    656|            return static_cast<T*>(s.m_p);
  689|    656|        }
  690|    656|        else {
  691|    656|            return reinterpret_cast<T*>(s.m_fp);
  692|    656|        }
  693|    656|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|    656|            [](float_reader<CharT>& r, auto&&... args) {
 4158|    656|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    656|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|    656|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|    656|        {
  662|    656|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKwEERT_:
 5870|    656|    {
 5871|    656|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    656|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    656|                          basic_contiguous_scan_context<char_type>>) {
 5875|    656|            auto rd = make_reader<T, char_type>();
 5876|    656|            return impl(rd, range, value);
 5877|    656|        }
 5878|    656|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    656|            auto rd = make_reader<T, char_type>();
 5880|    656|            if (!is_segment_contiguous(range)) {
 5881|    656|                return impl(rd, range, value);
 5882|    656|            }
 5883|    656|            auto crange = get_as_contiguous(range);
 5884|    656|            SCN_TRY(it, impl(rd, crange, value));
 5885|    656|            return ranges::next(range.begin(),
 5886|    656|                                ranges::distance(crange.begin(), it));
 5887|    656|        }
 5888|    656|        else {
 5889|    656|            SCN_EXPECT(false);
 5890|    656|            SCN_UNREACHABLE;
 5891|    656|        }
 5892|    656|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|    656|    {
 5863|    656|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    656|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    656|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    656|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    656|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 656]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    656|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    656|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    656|                        .transform_error(make_eof_scan_error));
 5865|    656|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    656|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|    656|    {
 5266|    656|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    656|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    656|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    656|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5870|    656|    {
 5871|    656|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    656|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    656|                          basic_contiguous_scan_context<char_type>>) {
 5875|    656|            auto rd = make_reader<T, char_type>();
 5876|    656|            return impl(rd, range, value);
 5877|    656|        }
 5878|    656|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    656|            auto rd = make_reader<T, char_type>();
 5880|    656|            if (!is_segment_contiguous(range)) {
 5881|    656|                return impl(rd, range, value);
 5882|    656|            }
 5883|    656|            auto crange = get_as_contiguous(range);
 5884|    656|            SCN_TRY(it, impl(rd, crange, value));
 5885|    656|            return ranges::next(range.begin(),
 5886|    656|                                ranges::distance(crange.begin(), it));
 5887|    656|        }
 5888|    656|        else {
 5889|    656|            SCN_EXPECT(false);
 5890|    656|            SCN_UNREACHABLE;
 5891|    656|        }
 5892|    656|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5862|    656|    {
 5863|    656|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    656|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    656|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    656|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    656|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 656]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    656|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    656|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    656|                        .transform_error(make_eof_scan_error));
 5865|    656|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    656|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5265|    656|    {
 5266|    656|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    656|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    656|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    656|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5870|    656|    {
 5871|    656|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    656|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    656|                          basic_contiguous_scan_context<char_type>>) {
 5875|    656|            auto rd = make_reader<T, char_type>();
 5876|    656|            return impl(rd, range, value);
 5877|    656|        }
 5878|    656|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    656|            auto rd = make_reader<T, char_type>();
 5880|    656|            if (!is_segment_contiguous(range)) {
 5881|    656|                return impl(rd, range, value);
 5882|    656|            }
 5883|    656|            auto crange = get_as_contiguous(range);
 5884|    656|            SCN_TRY(it, impl(rd, crange, value));
 5885|    656|            return ranges::next(range.begin(),
 5886|    656|                                ranges::distance(crange.begin(), it));
 5887|    656|        }
 5888|    656|        else {
 5889|    656|            SCN_EXPECT(false);
 5890|    656|            SCN_UNREACHABLE;
 5891|    656|        }
 5892|    656|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|    656|    {
 5863|    656|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    656|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    656|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    656|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    656|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 656]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    656|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    656|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    656|                        .transform_error(make_eof_scan_error));
 5865|    656|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    656|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|    656|    {
 5266|    656|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    656|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    656|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    656|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2878|   534k|    {
 2879|   534k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2882|  1.31M|    {
 2883|  1.31M|        return m_current;
 2884|  1.31M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2887|  1.23M|    {
 2888|  1.23M|        return m_range.end();
 2889|  1.23M|    }
_ZN3scn2v34impl19is_first_char_spaceIwEENS1_26is_first_char_space_resultIT_EENSt3__117basic_string_viewIS4_NS6_11char_traitsIS4_EEEE:
 1220|   648k|{
 1221|       |    // TODO: optimize
 1222|   648k|    SCN_EXPECT(!str.empty());
  ------------------
  |  |  924|   648k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   648k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1223|   648k|    auto res = get_next_code_point(str);
 1224|   648k|    return {res.iterator, res.value, is_cp_space(res.value)};
 1225|   648k|}
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2902|   455k|    {
 2903|   455k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   455k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   455k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|   455k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|   455k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 455k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|   455k|        }
 2909|   455k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   455k|    static_cast<    \
  |  |  929|   455k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|   455k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2892|   133k|    {
 2893|   133k|        return ranges::subrange{begin(), end()};
 2894|   133k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_b:
 6036|  2.38k|    {
 6037|  2.38k|        const bool need_skipped_width =
 6038|  2.38k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 124, False: 2.26k]
  |  Branch (6038:33): [True: 2.26k, False: 0]
  ------------------
 6039|  2.38k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  2.38k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 90, False: 2.29k]
  ------------------
 6043|  2.38k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 338, False: 1.96k]
  ------------------
 6044|    428|            return skip_fill(rng, specs.precision, specs.fill,
 6045|    428|                             need_skipped_width);
 6046|    428|        }
 6047|  1.96k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 1.83k, False: 126]
  |  Branch (6047:56): [True: 1.51k, False: 318]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  1.51k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 1.51k, False: 0]
  ------------------
 6051|  1.51k|                auto max_width_view = take_width(rng, specs.precision);
 6052|  1.51k|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|  1.51k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.51k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.51k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.51k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.51k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.51k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.51k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|  1.51k|                                  .transform_error(make_eof_scan_error));
 6054|  1.51k|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|  1.51k|            }
 6056|      0|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|      0|                            make_eof_scan_error));
 6058|       |
 6059|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 0]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|      0|            return result_type{it, 0};
 6067|      0|        }
 6068|       |
 6069|    444|        return result_type{rng.begin(), 0};
 6070|  1.96k|    }
_ZN3scn2v34impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEb:
 5950|    428|{
 5951|    428|    using char_type = detail::char_t<Range>;
 5952|    428|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5953|       |
 5954|    428|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5954:9): [True: 428, False: 0]
  ------------------
 5955|    428|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5956|    428|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5957|       |
 5958|    428|        if (max_width == 0) {
  ------------------
  |  Branch (5958:13): [True: 0, False: 428]
  ------------------
 5959|      0|            auto it = read_while_code_unit(range, pred);
 5960|       |
 5961|      0|            if (want_skipped_width) {
  ------------------
  |  Branch (5961:17): [True: 0, False: 0]
  ------------------
 5962|      0|                auto prefix_width =
 5963|      0|                    static_cast<std::ptrdiff_t>(
 5964|      0|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5965|      0|                    ranges::distance(range.begin(), it);
 5966|      0|                return result_type{it, prefix_width};
 5967|      0|            }
 5968|      0|            return result_type{it, 0};
 5969|      0|        }
 5970|       |
 5971|    428|        auto max_width_view = take_width(range, max_width);
 5972|    428|        auto w_it = read_while_code_unit(max_width_view, pred);
 5973|       |
 5974|    428|        if (want_skipped_width) {
  ------------------
  |  Branch (5974:13): [True: 428, False: 0]
  ------------------
 5975|    428|            return result_type{w_it.base(), max_width - w_it.count()};
 5976|    428|        }
 5977|      0|        return result_type{w_it.base(), 0};
 5978|    428|    }
 5979|       |
 5980|      0|    const auto fill_chars = fill.template get_code_units<char_type>();
 5981|      0|    if (max_width == 0) {
  ------------------
  |  Branch (5981:9): [True: 0, False: 0]
  ------------------
 5982|      0|        auto it = read_while_code_units(range, fill_chars);
 5983|       |
 5984|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (5984:13): [True: 0, False: 0]
  ------------------
 5985|      0|            auto prefix_width =
 5986|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5987|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5988|      0|            return result_type{it, prefix_width};
 5989|      0|        }
 5990|      0|        return result_type{it, 0};
 5991|      0|    }
 5992|       |
 5993|      0|    auto max_width_view = take_width(range, max_width);
 5994|      0|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5995|       |
 5996|      0|    if (want_skipped_width) {
  ------------------
  |  Branch (5996:9): [True: 0, False: 0]
  ------------------
 5997|      0|        return result_type{w_it.base(), max_width - w_it.count()};
 5998|      0|    }
 5999|      0|    return result_type{w_it.base(), 0};
 6000|      0|}
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_ST_LPv0EEEOSJ_:
  753|    428|    {
  754|    428|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_ST_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clESZ_w:
  743|    502|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    502|              cvref<T> obj = *get<T>(fn);
  745|    502|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    502|                  obj(static_cast<decltype(args)>(args)...);
  747|    502|              }
  748|    502|              else {
  749|    502|                  return obj(static_cast<decltype(args)>(args)...);
  750|    502|              }
  751|    502|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESI_lRKNS0_6detail9fill_typeEbEUlwE_EEDaNS3_7storageE:
  683|    502|    {
  684|    502|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    502|            return static_cast<T*>(s.m_cp);
  686|    502|        }
  687|    502|        else if constexpr (std::is_object_v<T>) {
  688|    502|            return static_cast<T*>(s.m_p);
  689|    502|        }
  690|    502|        else {
  691|    502|            return reinterpret_cast<T*>(s.m_fp);
  692|    502|        }
  693|    502|    }
_ZZN3scn2v34impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEbENKUlwE_clEw:
 5956|    502|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_LPv0EEEPKSJ_:
  666|    428|        {
  667|    428|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|    428|{
 1976|    428|    return read_until_code_unit(range, std::not_fn(pred));
 1977|    428|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|    428|{
 1957|    428|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|    428|        return std::find_if(range.begin(), range.end(), pred);
 1959|    428|    }
 1960|    428|    else {
 1961|    428|        auto first = range.begin();
 1962|    562|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 502, False: 60]
  ------------------
 1963|    502|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 368, False: 134]
  ------------------
 1964|    368|                return first;
 1965|    368|            }
 1966|    502|        }
 1967|     60|        return first;
 1968|    428|    }
 1969|    428|}
_ZNK3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE5beginEv:
 2809|  3.46k|    {
 2810|  3.46k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2811|  3.46k|                                      m_count};
 2812|  3.46k|    }
_ZNK3scn2v34impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEvE3getEv:
 2716|  12.0k|    {
 2717|  12.0k|        return view;
 2718|  12.0k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEC2ES6_SF_l:
 2381|  3.46k|    {
 2382|  3.46k|    }
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2780|  2.07k|        {
 2781|  2.07k|            return !(y == x);
 2782|  2.07k|        }
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2769|  5.11k|        {
 2770|  5.11k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2770:21): [True: 60, False: 5.05k]
  |  Branch (2770:39): [True: 60, False: 0]
  ------------------
 2771|  5.11k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2771:20): [True: 0, False: 5.05k]
  ------------------
 2772|  5.11k|        }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE14multibyte_leftEv:
 2420|     60|    {
 2421|     60|        return m_multibyte_left;
 2422|     60|    }
_ZNK3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE3endEv:
 2815|  5.11k|    {
 2816|  5.11k|        return sentinel<true>{m_base.get().end()};
 2817|  5.11k|    }
_ZN3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE8sentinelILb1EEC2ENSA_8sentinelILb1EEE:
 2750|  5.11k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEdeEv:
 2425|  3.53k|    {
 2426|  3.53k|        return *m_current;
 2427|  3.53k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEppEv:
 2434|  1.65k|    {
 2435|  1.65k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  1.65k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.65k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2436|  1.65k|        _increment_current();
 2437|  1.65k|        return *this;
 2438|  1.65k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE18_increment_currentEv:
 2667|  1.65k|    {
 2668|  1.65k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2668:13): [True: 1.65k, False: 0]
  ------------------
 2669|  1.65k|            auto cplen = _get_cp_length_at_current();
 2670|  1.65k|            m_multibyte_left = cplen - 1;
 2671|  1.65k|            m_count -= _get_width_at_current_cp_start(cplen);
 2672|  1.65k|        }
 2673|      0|        else {
 2674|      0|            --m_multibyte_left;
 2675|      0|        }
 2676|       |
 2677|  1.65k|        ++m_current;
 2678|  1.65k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE25_get_cp_length_at_currentEv:
 2638|  1.65k|    {
 2639|  1.65k|        return static_cast<difference_type>(
 2640|  1.65k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2641|  1.65k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE30_get_width_at_current_cp_startEl:
 2644|  1.65k|    {
 2645|  1.65k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|  1.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.65k]
  |  |  ------------------
  ------------------
 2646|      0|            return 0;
 2647|      0|        }
 2648|       |
 2649|  1.65k|        if (cplen == 1) {
  ------------------
  |  Branch (2649:13): [True: 1.65k, False: 0]
  ------------------
 2650|  1.65k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  1.65k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.65k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2651|  1.65k|            auto cp = static_cast<char32_t>(*m_current);
 2652|  1.65k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2653|  1.65k|        }
 2654|       |
 2655|      0|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2656|      0|                                           cplen);
 2657|      0|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2658|      0|            return 0;
 2659|      0|        }
 2660|       |
 2661|      0|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2662|      0|        return static_cast<difference_type>(
 2663|      0|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2664|      0|    }
_ZNK3scn2v34impl14_take_width_fnclINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEEDTtlS4_fp_fp0_EERKT_l:
 2831|  1.94k|    {
 2832|  1.94k|        return take_width_view{r, n};
 2833|  1.94k|    }
_ZN3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEEC2ERKSA_l:
 2800|  1.94k|    {
 2801|  1.94k|    }
_ZN3scn2v34impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEvEC2ERKSB_:
 2713|  1.94k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impl23skip_classic_whitespaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|  1.51k|{
 2951|  1.51k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 1.51k, False: 0]
  ------------------
 2952|  1.51k|        auto it = read_while_classic_space(range);
 2953|  1.51k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  1.51k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.51k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.51k]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|  1.51k|        return it;
 2959|  1.51k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  1.51k|}
_ZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|  1.51k|{
 2117|  1.51k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  1.51k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  1.51k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  1.51k|        auto buf = make_contiguous_buffer(range);
 2121|  1.51k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  1.51k|        return ranges::next(range.begin(),
 2123|  1.51k|                            ranges::distance(buf.view().begin(), it));
 2124|  1.51k|    }
 2125|  1.51k|    else {
 2126|  1.51k|        auto it = range.begin();
 2127|       |
 2128|  1.51k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  1.51k|            auto seg = get_contiguous_beginning(range);
 2130|  1.51k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  1.51k|                seg_it != seg.end()) {
 2132|  1.51k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  1.51k|            }
 2134|  1.51k|            ranges::advance(it, seg.size());
 2135|  1.51k|        }
 2136|       |
 2137|  1.51k|        return read_while_code_point(
 2138|  1.51k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  1.51k|    }
 2140|  1.51k|}
_ZN3scn2v34impl21read_while_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|  1.51k|{
 2082|  1.51k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  1.51k|}
_ZN3scn2v34impl21read_until_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|  1.51k|{
 2061|  1.51k|    auto it = range.begin();
 2062|  1.51k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 1.51k, False: 0]
  ------------------
 2063|  1.51k|        const auto val =
 2064|  1.51k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  1.51k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  1.51k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.51k, False: 0]
  |  |  ------------------
  ------------------
 2066|  1.51k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  1.51k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  1.51k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 1.51k, False: 0]
  ------------------
 2069|  1.51k|                return it;
 2070|  1.51k|            }
 2071|  1.51k|        }
 2072|      0|        it = val.iterator;
 2073|      0|    }
 2074|       |
 2075|      0|    return it;
 2076|  1.51k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISP_EEE4typeEEESP_:
 1898|  1.51k|{
 1899|  1.51k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  1.51k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.51k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  1.51k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  1.51k|    auto it = range.begin();
 1903|  1.51k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  1.51k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  1.51k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.51k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|  1.51k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 1.51k, False: 0]
  ------------------
 1912|  1.51k|        ++it;
 1913|  1.51k|        return {it, string_type(1, *range.begin())};
 1914|  1.51k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|  1.51k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEbT_:
  943|  3.03k|{
  944|  3.03k|    return is_range_eof(r.begin(), r.end());
  945|  3.03k|}
_ZN3scn2v34impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS8_ISE_E8sentinelILb1EEEEEbT_T0_:
  927|  3.03k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  3.03k|    {
  937|  3.03k|        return begin == end;
  938|  3.03k|    }
  939|  3.03k|}
_ZNK3scn2v34impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEwE8is_validEv:
 1889|  1.51k|    {
 1890|  1.51k|        return !codepoint.empty();
 1891|  1.51k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|  1.51k|    {
  754|  1.51k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|  1.51k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.51k|              cvref<T> obj = *get<T>(fn);
  745|  1.51k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.51k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.51k|              }
  748|  1.51k|              else {
  749|  1.51k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.51k|              }
  751|  1.51k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS6_INS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  1.51k|    {
  684|  1.51k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.51k|            return static_cast<T*>(s.m_cp);
  686|  1.51k|        }
  687|  1.51k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.51k|            return static_cast<T*>(s.m_p);
  689|  1.51k|        }
  690|  1.51k|        else {
  691|  1.51k|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.51k|        }
  693|  1.51k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|  1.51k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|  1.51k|        {
  662|  1.51k|        }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_9eof_errorET_:
  949|  1.51k|{
  950|  1.51k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.51k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.51k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  1.51k|    return eof_error::good;
  954|  1.51k|}
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE4baseEv:
 2412|  6.99k|    {
 2413|  6.99k|        return m_current;
 2414|  6.99k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE5countEv:
 2416|  7.05k|    {
 2417|  7.05k|        return m_count;
 2418|  7.05k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|  32.6k|    {
 6037|  32.6k|        const bool need_skipped_width =
 6038|  32.6k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 26.2k, False: 6.39k]
  |  Branch (6038:33): [True: 0, False: 6.39k]
  ------------------
 6039|  32.6k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  32.6k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 72, False: 32.5k]
  ------------------
 6043|  32.6k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 264, False: 32.3k]
  ------------------
 6044|    336|            return skip_fill(rng, specs.precision, specs.fill,
 6045|    336|                             need_skipped_width);
 6046|    336|        }
 6047|  32.3k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 31.4k, False: 872]
  |  Branch (6047:56): [True: 3.37k, False: 28.0k]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  3.37k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 3.37k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  6.74k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|  3.37k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  3.37k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  3.37k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 3.37k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  3.37k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  6.74k|                            make_eof_scan_error));
 6058|       |
 6059|  6.74k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 2.73k, False: 636]
  ------------------
 6060|  2.73k|                return result_type{
 6061|  2.73k|                    it,
 6062|  2.73k|                    calculate_text_width(make_contiguous_buffer(
 6063|  2.73k|                                             ranges::subrange{rng.begin(), it})
 6064|  2.73k|                                             .view())};
 6065|  2.73k|            }
 6066|    636|            return result_type{it, 0};
 6067|  6.74k|        }
 6068|       |
 6069|  28.9k|        return result_type{rng.begin(), 0};
 6070|  32.3k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|  3.68k|    {
 6079|  3.68k|        const bool need_skipped_width =
 6080|  3.68k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 1.79k, False: 1.88k]
  |  Branch (6080:33): [True: 368, False: 1.51k]
  ------------------
 6081|  3.68k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  3.68k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 82, False: 3.60k]
  ------------------
 6084|  3.68k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 120, False: 3.48k]
  ------------------
 6085|    202|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 108, False: 94]
  ------------------
 6086|    202|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 62, False: 46]
  ------------------
 6087|     62|                return result_type{rng.begin(), 0};
 6088|     62|            }
 6089|    140|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|    140|                             specs.fill, need_skipped_width);
 6091|    202|        }
 6092|  3.48k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 3.45k, False: 24]
  ------------------
 6093|  3.48k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 3.01k, False: 444]
  ------------------
 6094|  3.48k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 1.45k, False: 1.55k]
  |  Branch (6094:35): [True: 1.42k, False: 32]
  ------------------
 6095|  3.01k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 206, False: 1.38k]
  ------------------
 6096|  1.59k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 168, False: 38]
  ------------------
 6097|  1.59k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 168, False: 1.42k]
  ------------------
 6098|    168|                const auto initial_width =
 6099|    168|                    specs.precision - prefix_width - value_width;
 6100|    168|                auto max_width_view = take_width(rng, initial_width);
 6101|    168|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|    168|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    168|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    168|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    168|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 168]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    168|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    168|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|    168|                                  .transform_error(make_eof_scan_error));
 6103|    168|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|    168|            }
 6105|  2.84k|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|  1.42k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.42k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.42k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.42k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.42k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.42k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|  2.84k|                            make_eof_scan_error));
 6107|       |
 6108|  2.84k|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 1.42k, False: 0]
  ------------------
 6109|  1.42k|                return result_type{
 6110|  1.42k|                    it,
 6111|  1.42k|                    calculate_text_width(make_contiguous_buffer(
 6112|  1.42k|                                             ranges::subrange{rng.begin(), it})
 6113|  1.42k|                                             .view())};
 6114|  1.42k|            }
 6115|      0|            return result_type{it, 0};
 6116|  2.84k|        }
 6117|  1.89k|        return result_type{rng.begin(), 0};
 6118|  3.48k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
 6192|  10.4k|    {
 6193|  10.4k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  10.4k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  10.4k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  10.4k|            auto rd = make_reader<T, char_type>();
 6198|  10.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  10.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.70k, False: 728]
  |  |  ------------------
  ------------------
 6199|  9.70k|                return unexpected(e);
 6200|  9.70k|            }
 6201|       |
 6202|    728|            return impl(rd, range, value);
 6203|  10.4k|        }
 6204|  10.4k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  10.4k|            auto rd = make_reader<T, char_type>();
 6206|  10.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  10.4k|                return unexpected(e);
 6208|  10.4k|            }
 6209|       |
 6210|  10.4k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  10.4k|                specs.width != 0) {
 6212|  10.4k|                return impl(rd, range, value);
 6213|  10.4k|            }
 6214|       |
 6215|  10.4k|            auto crange = get_as_contiguous(range);
 6216|  10.4k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  10.4k|            return ranges::next(range.begin(),
 6218|  10.4k|                                ranges::distance(crange.begin(), it));
 6219|  10.4k|        }
 6220|  10.4k|        else {
 6221|  10.4k|            SCN_EXPECT(false);
 6222|  10.4k|            SCN_UNREACHABLE;
 6223|  10.4k|        }
 6224|  10.4k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    728|    {
 6124|    728|        const bool need_skipped_width =
 6125|    728|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 358, False: 370]
  |  Branch (6125:33): [True: 238, False: 132]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    728|        auto it = rng.begin();
 6129|    728|        std::ptrdiff_t prefix_width = 0;
 6130|    728|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 250, False: 478]
  ------------------
 6131|    250|            auto max_width_view = take_width(rng, specs.precision);
 6132|    250|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    250|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    250|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    250|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    250|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 250]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    250|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    250|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    250|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    250|            it = prefix_result.first.base();
 6135|    250|            prefix_width = prefix_result.second;
 6136|    250|        }
 6137|    478|        else {
 6138|    478|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    478|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    478|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    478|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    478|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 478]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    478|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    478|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    478|            std::tie(it, prefix_width) = prefix_result;
 6140|    478|        }
 6141|    728|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    728|        std::ptrdiff_t value_width = 0;
 6145|    728|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 250, False: 478]
  ------------------
 6146|    250|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 2, False: 248]
  ------------------
 6147|      2|                return unexpected_scan_error(
 6148|      2|                    scan_error::invalid_scanned_value,
 6149|      2|                    "Too many fill characters before value, "
 6150|      2|                    "precision exceeded before reading value");
 6151|      2|            }
 6152|       |
 6153|    248|            const auto initial_width = specs.precision - prefix_width;
 6154|    248|            auto max_width_view =
 6155|    248|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    248|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    248|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    248|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    248|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    248|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 248, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    248|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    248|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    248|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    248|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    248|    }                                                  \
  |  |  |  | 3671|    248|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    478|        else {
 6161|    478|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    478|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    478|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    478|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 478, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    478|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    478|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    478|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    478|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    478|    }                                                  \
  |  | 3671|    478|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    478|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
 6192|  10.4k|    {
 6193|  10.4k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  10.4k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  10.4k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  10.4k|            auto rd = make_reader<T, char_type>();
 6198|  10.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  10.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.70k, False: 728]
  |  |  ------------------
  ------------------
 6199|  9.70k|                return unexpected(e);
 6200|  9.70k|            }
 6201|       |
 6202|    728|            return impl(rd, range, value);
 6203|  10.4k|        }
 6204|  10.4k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  10.4k|            auto rd = make_reader<T, char_type>();
 6206|  10.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  10.4k|                return unexpected(e);
 6208|  10.4k|            }
 6209|       |
 6210|  10.4k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  10.4k|                specs.width != 0) {
 6212|  10.4k|                return impl(rd, range, value);
 6213|  10.4k|            }
 6214|       |
 6215|  10.4k|            auto crange = get_as_contiguous(range);
 6216|  10.4k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  10.4k|            return ranges::next(range.begin(),
 6218|  10.4k|                                ranges::distance(crange.begin(), it));
 6219|  10.4k|        }
 6220|  10.4k|        else {
 6221|  10.4k|            SCN_EXPECT(false);
 6222|  10.4k|            SCN_UNREACHABLE;
 6223|  10.4k|        }
 6224|  10.4k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    728|    {
 6124|    728|        const bool need_skipped_width =
 6125|    728|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 358, False: 370]
  |  Branch (6125:33): [True: 238, False: 132]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    728|        auto it = rng.begin();
 6129|    728|        std::ptrdiff_t prefix_width = 0;
 6130|    728|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 250, False: 478]
  ------------------
 6131|    250|            auto max_width_view = take_width(rng, specs.precision);
 6132|    250|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    250|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    250|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    250|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    250|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 250]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    250|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    250|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    250|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    250|            it = prefix_result.first.base();
 6135|    250|            prefix_width = prefix_result.second;
 6136|    250|        }
 6137|    478|        else {
 6138|    478|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    478|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    478|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    478|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    478|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 478]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    478|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    478|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    478|            std::tie(it, prefix_width) = prefix_result;
 6140|    478|        }
 6141|    728|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    728|        std::ptrdiff_t value_width = 0;
 6145|    728|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 250, False: 478]
  ------------------
 6146|    250|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 2, False: 248]
  ------------------
 6147|      2|                return unexpected_scan_error(
 6148|      2|                    scan_error::invalid_scanned_value,
 6149|      2|                    "Too many fill characters before value, "
 6150|      2|                    "precision exceeded before reading value");
 6151|      2|            }
 6152|       |
 6153|    248|            const auto initial_width = specs.precision - prefix_width;
 6154|    248|            auto max_width_view =
 6155|    248|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    248|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    248|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    248|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    248|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    248|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 248, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    248|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    248|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    248|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    248|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    248|    }                                                  \
  |  |  |  | 3671|    248|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    478|        else {
 6161|    478|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    478|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    478|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    478|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 478, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    478|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    478|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    478|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    478|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    478|    }                                                  \
  |  | 3671|    478|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    478|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIPvEENS0_13scan_expectedIPKwEERT_:
 6192|  10.3k|    {
 6193|  10.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  10.3k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  10.3k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  10.3k|            auto rd = make_reader<T, char_type>();
 6198|  10.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  10.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.72k, False: 630]
  |  |  ------------------
  ------------------
 6199|  9.72k|                return unexpected(e);
 6200|  9.72k|            }
 6201|       |
 6202|    630|            return impl(rd, range, value);
 6203|  10.3k|        }
 6204|  10.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  10.3k|            auto rd = make_reader<T, char_type>();
 6206|  10.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  10.3k|                return unexpected(e);
 6208|  10.3k|            }
 6209|       |
 6210|  10.3k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  10.3k|                specs.width != 0) {
 6212|  10.3k|                return impl(rd, range, value);
 6213|  10.3k|            }
 6214|       |
 6215|  10.3k|            auto crange = get_as_contiguous(range);
 6216|  10.3k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  10.3k|            return ranges::next(range.begin(),
 6218|  10.3k|                                ranges::distance(crange.begin(), it));
 6219|  10.3k|        }
 6220|  10.3k|        else {
 6221|  10.3k|            SCN_EXPECT(false);
 6222|  10.3k|            SCN_UNREACHABLE;
 6223|  10.3k|        }
 6224|  10.3k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE11check_specsERKNS0_6detail12format_specsE:
 5752|  10.3k|    {
 5753|  10.3k|        reader_error_handler eh{};
 5754|  10.3k|        detail::check_pointer_type_specs(specs, eh);
 5755|  10.3k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  10.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.72k, False: 630]
  |  |  ------------------
  ------------------
 5756|  9.72k|            return {scan_error::invalid_format_string, eh.m_msg};
 5757|  9.72k|        }
 5758|    630|        return {};
 5759|  10.3k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_23reader_impl_for_voidptrIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 6123|    630|    {
 6124|    630|        const bool need_skipped_width =
 6125|    630|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 356, False: 274]
  |  Branch (6125:33): [True: 188, False: 86]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    630|        auto it = rng.begin();
 6129|    630|        std::ptrdiff_t prefix_width = 0;
 6130|    630|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 200, False: 430]
  ------------------
 6131|    200|            auto max_width_view = take_width(rng, specs.precision);
 6132|    200|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    200|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    200|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    200|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    200|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 200]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    200|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    200|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    200|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    200|            it = prefix_result.first.base();
 6135|    200|            prefix_width = prefix_result.second;
 6136|    200|        }
 6137|    430|        else {
 6138|    430|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    430|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    430|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    430|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    430|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 430]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    430|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    430|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    430|            std::tie(it, prefix_width) = prefix_result;
 6140|    430|        }
 6141|    630|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    630|        std::ptrdiff_t value_width = 0;
 6145|    630|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 200, False: 430]
  ------------------
 6146|    200|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 2, False: 198]
  ------------------
 6147|      2|                return unexpected_scan_error(
 6148|      2|                    scan_error::invalid_scanned_value,
 6149|      2|                    "Too many fill characters before value, "
 6150|      2|                    "precision exceeded before reading value");
 6151|      2|            }
 6152|       |
 6153|    198|            const auto initial_width = specs.precision - prefix_width;
 6154|    198|            auto max_width_view =
 6155|    198|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    198|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    198|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    198|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    198|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    198|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 198, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    198|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    198|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    198|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    198|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    198|    }                                                  \
  |  |  |  | 3671|    198|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    430|        else {
 6161|    430|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    430|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    430|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    430|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 430, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    430|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    430|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    430|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    430|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    430|    }                                                  \
  |  | 3671|    430|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    430|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERPvNSN_10locale_refE:
 5781|    198|    {
 5782|    198|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    198|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5783|    198|        return read_default(range, value, loc);
 5784|    198|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RPvNS0_6detail10locale_refE:
 5764|    198|    {
 5765|    198|        detail::format_specs specs{};
 5766|    198|        specs.type = detail::presentation_type::int_hex;
 5767|       |
 5768|    198|        std::uintptr_t intvalue{};
 5769|    198|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3672|    198|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    198|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    198|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    198|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 198, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    198|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    198|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    198|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    198|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    198|    }                                                  \
  |  |  |  | 3671|    198|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5770|      0|                                                                intvalue, loc));
 5771|      0|        value = reinterpret_cast<void*>(intvalue);
 5772|      0|        return result;
 5773|    198|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERPvNSL_10locale_refE:
 5781|    430|    {
 5782|    430|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    430|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5783|    430|        return read_default(range, value, loc);
 5784|    430|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIbEENS0_13scan_expectedIPKwEERT_:
 6192|  10.4k|    {
 6193|  10.4k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  10.4k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  10.4k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  10.4k|            auto rd = make_reader<T, char_type>();
 6198|  10.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  10.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.59k, False: 846]
  |  |  ------------------
  ------------------
 6199|  9.59k|                return unexpected(e);
 6200|  9.59k|            }
 6201|       |
 6202|    846|            return impl(rd, range, value);
 6203|  10.4k|        }
 6204|  10.4k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  10.4k|            auto rd = make_reader<T, char_type>();
 6206|  10.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  10.4k|                return unexpected(e);
 6208|  10.4k|            }
 6209|       |
 6210|  10.4k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  10.4k|                specs.width != 0) {
 6212|  10.4k|                return impl(rd, range, value);
 6213|  10.4k|            }
 6214|       |
 6215|  10.4k|            auto crange = get_as_contiguous(range);
 6216|  10.4k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  10.4k|            return ranges::next(range.begin(),
 6218|  10.4k|                                ranges::distance(crange.begin(), it));
 6219|  10.4k|        }
 6220|  10.4k|        else {
 6221|  10.4k|            SCN_EXPECT(false);
 6222|  10.4k|            SCN_UNREACHABLE;
 6223|  10.4k|        }
 6224|  10.4k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|  10.4k|    {
 3040|  10.4k|        reader_error_handler eh{};
 3041|  10.4k|        get_derived().check_specs_impl(specs, eh);
 3042|  10.4k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  10.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.59k, False: 846]
  |  |  ------------------
  ------------------
 3043|  9.59k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  9.59k|        }
 3045|    846|        return {};
 3046|  10.4k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIwEEwE11get_derivedEv:
 3050|  10.4k|    {
 3051|  10.4k|        return static_cast<Derived&>(*this);
 3052|  10.4k|    }
_ZN3scn2v34impl20reader_impl_for_boolIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5496|  10.4k|    {
 5497|  10.4k|        detail::check_bool_type_specs(specs, eh);
 5498|  10.4k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_20reader_impl_for_boolIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    846|    {
 6124|    846|        const bool need_skipped_width =
 6125|    846|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 370, False: 476]
  |  Branch (6125:33): [True: 280, False: 196]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    846|        auto it = rng.begin();
 6129|    846|        std::ptrdiff_t prefix_width = 0;
 6130|    846|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 294, False: 552]
  ------------------
 6131|    294|            auto max_width_view = take_width(rng, specs.precision);
 6132|    294|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    294|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    294|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    294|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    294|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 294]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    294|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    294|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    294|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    294|            it = prefix_result.first.base();
 6135|    294|            prefix_width = prefix_result.second;
 6136|    294|        }
 6137|    552|        else {
 6138|    552|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    552|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    552|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    552|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    552|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 552]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    552|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    552|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    552|            std::tie(it, prefix_width) = prefix_result;
 6140|    552|        }
 6141|    846|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    846|        std::ptrdiff_t value_width = 0;
 6145|    846|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 294, False: 552]
  ------------------
 6146|    294|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 4, False: 290]
  ------------------
 6147|      4|                return unexpected_scan_error(
 6148|      4|                    scan_error::invalid_scanned_value,
 6149|      4|                    "Too many fill characters before value, "
 6150|      4|                    "precision exceeded before reading value");
 6151|      4|            }
 6152|       |
 6153|    290|            const auto initial_width = specs.precision - prefix_width;
 6154|    290|            auto max_width_view =
 6155|    290|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    290|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    290|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    290|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    290|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    290|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 290, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    290|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    290|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    290|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    290|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    290|    }                                                  \
  |  |  |  | 3671|    290|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    552|        else {
 6161|    552|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    552|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    552|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    552|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 552, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    552|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    552|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    552|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    552|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    552|    }                                                  \
  |  | 3671|    552|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    552|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZNK3scn2v34impl20reader_impl_for_boolIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERbNSN_10locale_refE:
 5515|    290|    {
 5516|    290|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5517|       |
 5518|    290|#if !SCN_DISABLE_LOCALE
 5519|    290|        if (specs.localized) {
  ------------------
  |  Branch (5519:13): [True: 22, False: 268]
  ------------------
 5520|     22|            return rd.read_localized(range, loc, value);
 5521|     22|        }
 5522|    268|#endif
 5523|       |
 5524|    268|        return rd.read_classic(range, value);
 5525|    290|    }
_ZN3scn2v34impl20reader_impl_for_boolIwE11get_optionsERKNS0_6detail12format_specsE:
 5528|    842|    {
 5529|    842|        SCN_GCC_COMPAT_PUSH
 5530|    842|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 5531|       |
 5532|    842|        switch (specs.type) {
 5533|    114|            case detail::presentation_type::string:
  ------------------
  |  Branch (5533:13): [True: 114, False: 728]
  ------------------
 5534|    114|                return bool_reader_base::allow_text;
 5535|       |
 5536|     10|            case detail::presentation_type::int_generic:
  ------------------
  |  Branch (5536:13): [True: 10, False: 832]
  ------------------
 5537|     18|            case detail::presentation_type::int_binary:
  ------------------
  |  Branch (5537:13): [True: 8, False: 834]
  ------------------
 5538|     24|            case detail::presentation_type::int_decimal:
  ------------------
  |  Branch (5538:13): [True: 6, False: 836]
  ------------------
 5539|     46|            case detail::presentation_type::int_hex:
  ------------------
  |  Branch (5539:13): [True: 22, False: 820]
  ------------------
 5540|     60|            case detail::presentation_type::int_octal:
  ------------------
  |  Branch (5540:13): [True: 14, False: 828]
  ------------------
 5541|     78|            case detail::presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (5541:13): [True: 18, False: 824]
  ------------------
 5542|     78|                return bool_reader_base::allow_numeric;
 5543|       |
 5544|    650|            default:
  ------------------
  |  Branch (5544:13): [True: 650, False: 192]
  ------------------
 5545|    650|                return bool_reader_base::allow_text |
 5546|    650|                       bool_reader_base::allow_numeric;
 5547|    842|        }
 5548|       |
 5549|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 5550|    842|    }
_ZNK3scn2v34impl11bool_readerIwE14read_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refERb:
 5427|     22|    {
 5428|     22|        scan_error err{scan_error::invalid_scanned_value,
 5429|     22|                       "Failed to read boolean"};
 5430|       |
 5431|     22|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5431:13): [True: 22, False: 0]
  ------------------
 5432|     22|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5432:22): [True: 0, False: 22]
  ------------------
 5433|      0|                return *r;
 5434|      0|            }
 5435|     22|            else {
 5436|     22|                err = r.error();
 5437|     22|            }
 5438|     22|        }
 5439|       |
 5440|     22|        if (m_options & allow_text) {
  ------------------
  |  Branch (5440:13): [True: 22, False: 0]
  ------------------
 5441|     22|            auto stdloc = loc.get<std::locale>();
 5442|     22|            const auto& numpunct =
 5443|     22|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5444|     22|            const auto truename = numpunct.truename();
 5445|     22|            const auto falsename = numpunct.falsename();
 5446|       |
 5447|     22|            if (auto r =
  ------------------
  |  Branch (5447:22): [True: 0, False: 22]
  ------------------
 5448|     22|                    read_textual_custom(range, value, truename, falsename)) {
 5449|      0|                return *r;
 5450|      0|            }
 5451|     22|            else {
 5452|     22|                err = r.error();
 5453|     22|            }
 5454|     22|        }
 5455|       |
 5456|     22|        return unexpected(err);
 5457|     22|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5383|    248|    {
 5384|    248|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5384:18): [True: 0, False: 248]
  ------------------
 5385|      0|            value = false;
 5386|      0|            return *r;
 5387|      0|        }
 5388|    248|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5388:18): [True: 0, False: 248]
  ------------------
 5389|      0|            value = true;
 5390|      0|            return *r;
 5391|      0|        }
 5392|       |
 5393|    248|        return unexpected_scan_error(
 5394|    248|            scan_error::invalid_scanned_value,
 5395|    248|            "Failed to read numeric boolean value: No match");
 5396|    248|    }
_ZN3scn2v34impl23read_matching_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NDTcl4implISF_EEE4typeE:
 2145|    496|{
 2146|    496|    auto it = read_code_unit(range);
 2147|    496|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    496|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 496]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|    496|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|    496|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 496, False: 0]
  |  |  ------------------
  ------------------
 2152|    496|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|    496|        return unexpected(parse_error::error);
 2154|    496|    }
 2155|       |
 2156|      0|    return *it;
 2157|    496|}
_ZNK3scn2v34impl11bool_readerIwE19read_textual_customINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RbNSF_17basic_string_viewIwNSF_11char_traitsIwEEEESR_:
 5467|     22|    {
 5468|     22|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5469|     22|        const auto shorter = std::pair{
 5470|     22|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5470:13): [True: 22, False: 0]
  ------------------
 5471|     22|        const auto longer = std::pair{
 5472|     22|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5472:13): [True: 0, False: 22]
  ------------------
 5473|       |
 5474|     22|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5474:18): [True: 0, False: 22]
  ------------------
 5475|      0|            value = shorter.second;
 5476|      0|            return *r;
 5477|      0|        }
 5478|     22|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5478:18): [True: 0, False: 22]
  ------------------
 5479|      0|            value = longer.second;
 5480|      0|            return *r;
 5481|      0|        }
 5482|       |
 5483|     22|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5484|     22|                                     "read_textual: No match");
 5485|     22|    }
_ZN3scn2v34impl20read_matching_stringINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewINDTcl4implISF_EEE4typeENSD_11char_traitsISN_EEEE:
 2178|     44|{
 2179|     44|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|     44|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     44|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     44|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     44|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 18, False: 26]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     18|    }                                                  \
  |  |  |  | 3671|     44|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     26|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2180|     26|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2181|     26|                    .transform_error(make_eof_parse_error));
 2182|       |
 2183|     26|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2184|     26|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26, False: 0]
  |  |  ------------------
  ------------------
 2185|     26|        return unexpected(parse_error::error);
 2186|     26|    }
 2187|      0|    return it;
 2188|     26|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_l:
 1856|    516|{
 1857|    516|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|    516|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    516|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|    516|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|    516|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|    516|        if (sz < count) {
 1862|    516|            return unexpected(eof_error::eof);
 1863|    516|        }
 1864|       |
 1865|    516|        return ranges::next(range.begin(), count);
 1866|    516|    }
 1867|    516|    else {
 1868|    516|        auto it = range.begin();
 1869|    516|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 516]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|  2.65k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 2.21k, False: 434]
  ------------------
 1874|  2.21k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 82, False: 2.13k]
  ------------------
 1875|     82|                return unexpected(eof_error::eof);
 1876|     82|            }
 1877|  2.21k|        }
 1878|       |
 1879|    434|        return it;
 1880|    516|    }
 1881|    516|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEmT_:
 1094|    516|{
 1095|    516|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|    516|        return r.size();
 1097|    516|    }
 1098|    516|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|    516|                           ranges::const_iterator_t<Range>,
 1100|    516|                           typename detail::basic_scan_buffer<
 1101|    516|                               detail::char_t<Range>>::forward_iterator>) {
 1102|    516|        if constexpr (ranges::common_range<Range>) {
 1103|    516|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|    516|        }
 1105|    516|        else {
 1106|    516|            if (r.begin().stores_parent()) {
 1107|    516|                return static_cast<size_t>(
 1108|    516|                    r.begin().parent()->chars_available() -
 1109|    516|                    r.begin().position());
 1110|    516|            }
 1111|    516|            return r.begin().contiguous_segment().size();
 1112|    516|        }
 1113|    516|    }
 1114|    516|    else {
 1115|    516|        return 0;
 1116|    516|    }
 1117|    516|}
_ZNK3scn2v34impl16bool_reader_base12read_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5354|    268|    {
 5355|    268|        scan_error err{scan_error::invalid_scanned_value,
 5356|    268|                       "Failed to read boolean"};
 5357|       |
 5358|    268|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5358:13): [True: 226, False: 42]
  ------------------
 5359|    226|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5359:22): [True: 0, False: 226]
  ------------------
 5360|      0|                return *r;
 5361|      0|            }
 5362|    226|            else {
 5363|    226|                err = r.error();
 5364|    226|            }
 5365|    226|        }
 5366|       |
 5367|    268|        if (m_options & allow_text) {
  ------------------
  |  Branch (5367:13): [True: 236, False: 32]
  ------------------
 5368|    236|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5368:22): [True: 0, False: 236]
  ------------------
 5369|      0|                return *r;
 5370|      0|            }
 5371|    236|            else {
 5372|    236|                err = r.error();
 5373|    236|            }
 5374|    236|        }
 5375|       |
 5376|    268|        return unexpected(err);
 5377|    268|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5401|    236|    {
 5402|    236|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5402:18): [True: 0, False: 236]
  ------------------
 5403|      0|            value = true;
 5404|      0|            return *r;
 5405|      0|        }
 5406|    236|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5406:18): [True: 0, False: 236]
  ------------------
 5407|      0|            value = false;
 5408|      0|            return *r;
 5409|      0|        }
 5410|       |
 5411|    236|        return unexpected_scan_error(
 5412|    236|            scan_error::invalid_scanned_value,
 5413|    236|            "Failed to read textual boolean value: No match");
 5414|    236|    }
_ZN3scn2v34impl28read_matching_string_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2193|    472|{
 2194|    472|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|    472|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    472|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    472|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    472|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 64, False: 408]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     64|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     64|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     64|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     64|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     64|    }                                                  \
  |  |  |  | 3671|    472|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    408|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2195|    408|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2196|    408|                    .transform_error(make_eof_parse_error));
 2197|       |
 2198|    408|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2198:19): [Folded - Ignored]
  ------------------
 2199|    408|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2200|    408|        if (SCN_UNLIKELY(sv.view() != str)) {
 2201|    408|            return unexpected(parse_error::error);
 2202|    408|        }
 2203|    408|        return it;
 2204|    408|    }
 2205|    408|    else {
 2206|    408|        auto range_it = range.begin();
 2207|    408|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
  ------------------
  |  Branch (2207:28): [True: 408, False: 0]
  ------------------
 2208|    408|            if (SCN_UNLIKELY(*range_it !=
  ------------------
  |  |  859|    408|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 408, False: 0]
  |  |  ------------------
  ------------------
 2209|    408|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2210|    408|                return unexpected(parse_error::error);
 2211|    408|            }
 2212|    408|        }
 2213|      0|        return it;
 2214|    408|    }
 2215|    408|}
_ZNK3scn2v34impl20reader_impl_for_boolIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERbNSL_10locale_refE:
 5515|    552|    {
 5516|    552|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5517|       |
 5518|    552|#if !SCN_DISABLE_LOCALE
 5519|    552|        if (specs.localized) {
  ------------------
  |  Branch (5519:13): [True: 58, False: 494]
  ------------------
 5520|     58|            return rd.read_localized(range, loc, value);
 5521|     58|        }
 5522|    494|#endif
 5523|       |
 5524|    494|        return rd.read_classic(range, value);
 5525|    552|    }
_ZNK3scn2v34impl11bool_readerIwE14read_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refERb:
 5427|     58|    {
 5428|     58|        scan_error err{scan_error::invalid_scanned_value,
 5429|     58|                       "Failed to read boolean"};
 5430|       |
 5431|     58|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5431:13): [True: 34, False: 24]
  ------------------
 5432|     34|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5432:22): [True: 0, False: 34]
  ------------------
 5433|      0|                return *r;
 5434|      0|            }
 5435|     34|            else {
 5436|     34|                err = r.error();
 5437|     34|            }
 5438|     34|        }
 5439|       |
 5440|     58|        if (m_options & allow_text) {
  ------------------
  |  Branch (5440:13): [True: 30, False: 28]
  ------------------
 5441|     30|            auto stdloc = loc.get<std::locale>();
 5442|     30|            const auto& numpunct =
 5443|     30|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5444|     30|            const auto truename = numpunct.truename();
 5445|     30|            const auto falsename = numpunct.falsename();
 5446|       |
 5447|     30|            if (auto r =
  ------------------
  |  Branch (5447:22): [True: 0, False: 30]
  ------------------
 5448|     30|                    read_textual_custom(range, value, truename, falsename)) {
 5449|      0|                return *r;
 5450|      0|            }
 5451|     30|            else {
 5452|     30|                err = r.error();
 5453|     30|            }
 5454|     30|        }
 5455|       |
 5456|     58|        return unexpected(err);
 5457|     58|    }
_ZNK3scn2v34impl11bool_readerIwE19read_textual_customINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNSD_17basic_string_viewIwNSD_11char_traitsIwEEEESP_:
 5467|     30|    {
 5468|     30|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5469|     30|        const auto shorter = std::pair{
 5470|     30|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5470:13): [True: 30, False: 0]
  ------------------
 5471|     30|        const auto longer = std::pair{
 5472|     30|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5472:13): [True: 0, False: 30]
  ------------------
 5473|       |
 5474|     30|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5474:18): [True: 0, False: 30]
  ------------------
 5475|      0|            value = shorter.second;
 5476|      0|            return *r;
 5477|      0|        }
 5478|     30|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5478:18): [True: 0, False: 30]
  ------------------
 5479|      0|            value = longer.second;
 5480|      0|            return *r;
 5481|      0|        }
 5482|       |
 5483|     30|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5484|     30|                                     "read_textual: No match");
 5485|     30|    }
_ZN3scn2v34impl20read_matching_stringINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewINDTcl4implISD_EEE4typeENSB_11char_traitsISL_EEEE:
 2178|     60|{
 2179|     60|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|     60|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     60|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     60|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     60|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2, False: 58]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      2|    }                                                  \
  |  |  |  | 3671|     60|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     58|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2180|     58|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2181|     58|                    .transform_error(make_eof_parse_error));
 2182|       |
 2183|     58|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2184|     58|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|     58|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 58, False: 0]
  |  |  ------------------
  ------------------
 2185|     58|        return unexpected(parse_error::error);
 2186|     58|    }
 2187|      0|    return it;
 2188|     58|}
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIwEENS0_13scan_expectedIPKwEERT_:
 6192|  10.3k|    {
 6193|  10.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  10.3k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  10.3k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  10.3k|            auto rd = make_reader<T, char_type>();
 6198|  10.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  10.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.67k, False: 674]
  |  |  ------------------
  ------------------
 6199|  9.67k|                return unexpected(e);
 6200|  9.67k|            }
 6201|       |
 6202|    674|            return impl(rd, range, value);
 6203|  10.3k|        }
 6204|  10.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  10.3k|            auto rd = make_reader<T, char_type>();
 6206|  10.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  10.3k|                return unexpected(e);
 6208|  10.3k|            }
 6209|       |
 6210|  10.3k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  10.3k|                specs.width != 0) {
 6212|  10.3k|                return impl(rd, range, value);
 6213|  10.3k|            }
 6214|       |
 6215|  10.3k|            auto crange = get_as_contiguous(range);
 6216|  10.3k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  10.3k|            return ranges::next(range.begin(),
 6218|  10.3k|                                ranges::distance(crange.begin(), it));
 6219|  10.3k|        }
 6220|  10.3k|        else {
 6221|  10.3k|            SCN_EXPECT(false);
 6222|  10.3k|            SCN_UNREACHABLE;
 6223|  10.3k|        }
 6224|  10.3k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_wcharIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    674|    {
 6124|    674|        const bool need_skipped_width =
 6125|    674|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 358, False: 316]
  |  Branch (6125:33): [True: 216, False: 100]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    674|        auto it = rng.begin();
 6129|    674|        std::ptrdiff_t prefix_width = 0;
 6130|    674|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 228, False: 446]
  ------------------
 6131|    228|            auto max_width_view = take_width(rng, specs.precision);
 6132|    228|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    228|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    228|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    228|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    228|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 228]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    228|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    228|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    228|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    228|            it = prefix_result.first.base();
 6135|    228|            prefix_width = prefix_result.second;
 6136|    228|        }
 6137|    446|        else {
 6138|    446|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    446|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    446|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    446|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    446|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 446]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    446|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    446|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    446|            std::tie(it, prefix_width) = prefix_result;
 6140|    446|        }
 6141|    674|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    674|        std::ptrdiff_t value_width = 0;
 6145|    674|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 228, False: 446]
  ------------------
 6146|    228|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 2, False: 226]
  ------------------
 6147|      2|                return unexpected_scan_error(
 6148|      2|                    scan_error::invalid_scanned_value,
 6149|      2|                    "Too many fill characters before value, "
 6150|      2|                    "precision exceeded before reading value");
 6151|      2|            }
 6152|       |
 6153|    226|            const auto initial_width = specs.precision - prefix_width;
 6154|    226|            auto max_width_view =
 6155|    226|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    226|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    226|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    226|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    226|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    226|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 32, False: 194]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     32|    }                                                  \
  |  |  |  | 3671|    226|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    194|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    194|            it = w_it.base();
 6158|    194|            value_width = initial_width - w_it.count();
 6159|    194|        }
 6160|    446|        else {
 6161|    446|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    446|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    446|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    446|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 18, False: 428]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|     18|    }                                                  \
  |  | 3671|    446|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    446|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|    428|                                             specs, value, loc));
 6163|       |
 6164|    428|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 344, False: 84]
  ------------------
 6165|    344|                value_width = calculate_text_width(
 6166|    344|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    344|                        .view());
 6168|    344|            }
 6169|    428|        }
 6170|       |
 6171|       |        // Read postfix
 6172|    622|        std::ptrdiff_t postfix_width = 0;
 6173|    622|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 622, False: 0]
  ------------------
 6174|    622|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|    622|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    622|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    622|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    622|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 622]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    622|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    622|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|    622|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|    622|                                 rd.skip_ws_before_read(), prefix_width,
 6177|    622|                                 value_width));
 6178|    622|            std::tie(it, postfix_width) = postfix_result;
 6179|    622|        }
 6180|       |
 6181|    622|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|    622|                                                 value_width, postfix_width);
 6183|    622|            !e) {
  ------------------
  |  Branch (6183:13): [True: 342, False: 280]
  ------------------
 6184|    342|            return unexpected(e);
 6185|    342|        }
 6186|       |
 6187|    280|        return it;
 6188|    622|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 6192|  10.4k|    {
 6193|  10.4k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  10.4k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  10.4k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  10.4k|            auto rd = make_reader<T, char_type>();
 6198|  10.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  10.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.72k, False: 712]
  |  |  ------------------
  ------------------
 6199|  9.72k|                return unexpected(e);
 6200|  9.72k|            }
 6201|       |
 6202|    712|            return impl(rd, range, value);
 6203|  10.4k|        }
 6204|  10.4k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  10.4k|            auto rd = make_reader<T, char_type>();
 6206|  10.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  10.4k|                return unexpected(e);
 6208|  10.4k|            }
 6209|       |
 6210|  10.4k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  10.4k|                specs.width != 0) {
 6212|  10.4k|                return impl(rd, range, value);
 6213|  10.4k|            }
 6214|       |
 6215|  10.4k|            auto crange = get_as_contiguous(range);
 6216|  10.4k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  10.4k|            return ranges::next(range.begin(),
 6218|  10.4k|                                ranges::distance(crange.begin(), it));
 6219|  10.4k|        }
 6220|  10.4k|        else {
 6221|  10.4k|            SCN_EXPECT(false);
 6222|  10.4k|            SCN_UNREACHABLE;
 6223|  10.4k|        }
 6224|  10.4k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    712|    {
 6124|    712|        const bool need_skipped_width =
 6125|    712|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 362, False: 350]
  |  Branch (6125:33): [True: 240, False: 110]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    712|        auto it = rng.begin();
 6129|    712|        std::ptrdiff_t prefix_width = 0;
 6130|    712|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 254, False: 458]
  ------------------
 6131|    254|            auto max_width_view = take_width(rng, specs.precision);
 6132|    254|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    254|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    254|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    254|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    254|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 254]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    254|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    254|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    254|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    254|            it = prefix_result.first.base();
 6135|    254|            prefix_width = prefix_result.second;
 6136|    254|        }
 6137|    458|        else {
 6138|    458|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    458|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    458|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    458|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    458|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 458]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    458|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    458|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    458|            std::tie(it, prefix_width) = prefix_result;
 6140|    458|        }
 6141|    712|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    712|        std::ptrdiff_t value_width = 0;
 6145|    712|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 254, False: 458]
  ------------------
 6146|    254|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 248]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|    248|            const auto initial_width = specs.precision - prefix_width;
 6154|    248|            auto max_width_view =
 6155|    248|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    248|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    248|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    248|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    248|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    248|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 248, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    248|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    248|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    248|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    248|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    248|    }                                                  \
  |  |  |  | 3671|    248|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    458|        else {
 6161|    458|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    458|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    458|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    458|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 458, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    458|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    458|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    458|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    458|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    458|    }                                                  \
  |  | 3671|    458|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    458|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKwEERT_:
 6192|  10.3k|    {
 6193|  10.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  10.3k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  10.3k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  10.3k|            auto rd = make_reader<T, char_type>();
 6198|  10.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  10.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 114, False: 10.2k]
  |  |  ------------------
  ------------------
 6199|    114|                return unexpected(e);
 6200|    114|            }
 6201|       |
 6202|  10.2k|            return impl(rd, range, value);
 6203|  10.3k|        }
 6204|  10.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  10.3k|            auto rd = make_reader<T, char_type>();
 6206|  10.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  10.3k|                return unexpected(e);
 6208|  10.3k|            }
 6209|       |
 6210|  10.3k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  10.3k|                specs.width != 0) {
 6212|  10.3k|                return impl(rd, range, value);
 6213|  10.3k|            }
 6214|       |
 6215|  10.3k|            auto crange = get_as_contiguous(range);
 6216|  10.3k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  10.3k|            return ranges::next(range.begin(),
 6218|  10.3k|                                ranges::distance(crange.begin(), it));
 6219|  10.3k|        }
 6220|  10.3k|        else {
 6221|  10.3k|            SCN_EXPECT(false);
 6222|  10.3k|            SCN_UNREACHABLE;
 6223|  10.3k|        }
 6224|  10.3k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6123|  10.2k|    {
 6124|  10.2k|        const bool need_skipped_width =
 6125|  10.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 8.07k, False: 2.16k]
  |  Branch (6125:33): [True: 288, False: 1.88k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  10.2k|        auto it = rng.begin();
 6129|  10.2k|        std::ptrdiff_t prefix_width = 0;
 6130|  10.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 304, False: 9.93k]
  ------------------
 6131|    304|            auto max_width_view = take_width(rng, specs.precision);
 6132|    304|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    304|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    304|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    304|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    304|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 304]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    304|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    304|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    304|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    304|            it = prefix_result.first.base();
 6135|    304|            prefix_width = prefix_result.second;
 6136|    304|        }
 6137|  9.93k|        else {
 6138|  9.93k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  9.93k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  9.93k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  9.93k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  9.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 9.93k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  9.93k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  9.93k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  9.93k|            std::tie(it, prefix_width) = prefix_result;
 6140|  9.93k|        }
 6141|  10.2k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  10.2k|        std::ptrdiff_t value_width = 0;
 6145|  10.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 304, False: 9.93k]
  ------------------
 6146|    304|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 14, False: 290]
  ------------------
 6147|     14|                return unexpected_scan_error(
 6148|     14|                    scan_error::invalid_scanned_value,
 6149|     14|                    "Too many fill characters before value, "
 6150|     14|                    "precision exceeded before reading value");
 6151|     14|            }
 6152|       |
 6153|    290|            const auto initial_width = specs.precision - prefix_width;
 6154|    290|            auto max_width_view =
 6155|    290|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    290|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    290|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    290|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    290|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    290|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 166, False: 124]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    166|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    166|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    166|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    166|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    166|    }                                                  \
  |  |  |  | 3671|    290|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    124|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    124|            it = w_it.base();
 6158|    124|            value_width = initial_width - w_it.count();
 6159|    124|        }
 6160|  9.93k|        else {
 6161|  9.93k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  9.93k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  9.93k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  9.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 8.71k, False: 1.22k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  8.71k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  8.71k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  8.71k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  8.71k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  8.71k|    }                                                  \
  |  | 3671|  9.93k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  9.93k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  1.22k|                                             specs, value, loc));
 6163|       |
 6164|  1.22k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 694, False: 528]
  ------------------
 6165|    694|                value_width = calculate_text_width(
 6166|    694|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    694|                        .view());
 6168|    694|            }
 6169|  1.22k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  1.34k|        std::ptrdiff_t postfix_width = 0;
 6173|  1.34k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 1.02k, False: 326]
  ------------------
 6174|  1.02k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  1.02k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.02k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.02k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.02k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.02k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.02k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  1.02k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  1.02k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  1.02k|                                 value_width));
 6178|  1.02k|            std::tie(it, postfix_width) = postfix_result;
 6179|  1.02k|        }
 6180|       |
 6181|  1.34k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  1.34k|                                                 value_width, postfix_width);
 6183|  1.34k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 402, False: 944]
  ------------------
 6184|    402|            return unexpected(e);
 6185|    402|        }
 6186|       |
 6187|    944|        return it;
 6188|  1.34k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6192|  10.3k|    {
 6193|  10.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  10.3k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  10.3k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  10.3k|            auto rd = make_reader<T, char_type>();
 6198|  10.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  10.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 114, False: 10.2k]
  |  |  ------------------
  ------------------
 6199|    114|                return unexpected(e);
 6200|    114|            }
 6201|       |
 6202|  10.2k|            return impl(rd, range, value);
 6203|  10.3k|        }
 6204|  10.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  10.3k|            auto rd = make_reader<T, char_type>();
 6206|  10.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  10.3k|                return unexpected(e);
 6208|  10.3k|            }
 6209|       |
 6210|  10.3k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  10.3k|                specs.width != 0) {
 6212|  10.3k|                return impl(rd, range, value);
 6213|  10.3k|            }
 6214|       |
 6215|  10.3k|            auto crange = get_as_contiguous(range);
 6216|  10.3k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  10.3k|            return ranges::next(range.begin(),
 6218|  10.3k|                                ranges::distance(crange.begin(), it));
 6219|  10.3k|        }
 6220|  10.3k|        else {
 6221|  10.3k|            SCN_EXPECT(false);
 6222|  10.3k|            SCN_UNREACHABLE;
 6223|  10.3k|        }
 6224|  10.3k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6123|  10.2k|    {
 6124|  10.2k|        const bool need_skipped_width =
 6125|  10.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 8.07k, False: 2.16k]
  |  Branch (6125:33): [True: 288, False: 1.88k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  10.2k|        auto it = rng.begin();
 6129|  10.2k|        std::ptrdiff_t prefix_width = 0;
 6130|  10.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 304, False: 9.93k]
  ------------------
 6131|    304|            auto max_width_view = take_width(rng, specs.precision);
 6132|    304|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    304|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    304|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    304|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    304|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 304]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    304|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    304|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    304|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    304|            it = prefix_result.first.base();
 6135|    304|            prefix_width = prefix_result.second;
 6136|    304|        }
 6137|  9.93k|        else {
 6138|  9.93k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  9.93k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  9.93k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  9.93k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  9.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 9.93k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  9.93k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  9.93k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  9.93k|            std::tie(it, prefix_width) = prefix_result;
 6140|  9.93k|        }
 6141|  10.2k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  10.2k|        std::ptrdiff_t value_width = 0;
 6145|  10.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 304, False: 9.93k]
  ------------------
 6146|    304|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 14, False: 290]
  ------------------
 6147|     14|                return unexpected_scan_error(
 6148|     14|                    scan_error::invalid_scanned_value,
 6149|     14|                    "Too many fill characters before value, "
 6150|     14|                    "precision exceeded before reading value");
 6151|     14|            }
 6152|       |
 6153|    290|            const auto initial_width = specs.precision - prefix_width;
 6154|    290|            auto max_width_view =
 6155|    290|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    290|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    290|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    290|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    290|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    290|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 166, False: 124]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    166|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    166|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    166|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    166|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    166|    }                                                  \
  |  |  |  | 3671|    290|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    124|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    124|            it = w_it.base();
 6158|    124|            value_width = initial_width - w_it.count();
 6159|    124|        }
 6160|  9.93k|        else {
 6161|  9.93k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  9.93k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  9.93k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  9.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 8.71k, False: 1.22k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  8.71k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  8.71k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  8.71k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  8.71k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  8.71k|    }                                                  \
  |  | 3671|  9.93k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  9.93k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  1.22k|                                             specs, value, loc));
 6163|       |
 6164|  1.22k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 694, False: 528]
  ------------------
 6165|    694|                value_width = calculate_text_width(
 6166|    694|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    694|                        .view());
 6168|    694|            }
 6169|  1.22k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  1.34k|        std::ptrdiff_t postfix_width = 0;
 6173|  1.34k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 1.02k, False: 326]
  ------------------
 6174|  1.02k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  1.02k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.02k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.02k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.02k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.02k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.02k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  1.02k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  1.02k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  1.02k|                                 value_width));
 6178|  1.02k|            std::tie(it, postfix_width) = postfix_result;
 6179|  1.02k|        }
 6180|       |
 6181|  1.34k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  1.34k|                                                 value_width, postfix_width);
 6183|  1.34k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 402, False: 944]
  ------------------
 6184|    402|            return unexpected(e);
 6185|    402|        }
 6186|       |
 6187|    944|        return it;
 6188|  1.34k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6192|  10.3k|    {
 6193|  10.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  10.3k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  10.3k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  10.3k|            auto rd = make_reader<T, char_type>();
 6198|  10.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  10.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 114, False: 10.2k]
  |  |  ------------------
  ------------------
 6199|    114|                return unexpected(e);
 6200|    114|            }
 6201|       |
 6202|  10.2k|            return impl(rd, range, value);
 6203|  10.3k|        }
 6204|  10.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  10.3k|            auto rd = make_reader<T, char_type>();
 6206|  10.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  10.3k|                return unexpected(e);
 6208|  10.3k|            }
 6209|       |
 6210|  10.3k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  10.3k|                specs.width != 0) {
 6212|  10.3k|                return impl(rd, range, value);
 6213|  10.3k|            }
 6214|       |
 6215|  10.3k|            auto crange = get_as_contiguous(range);
 6216|  10.3k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  10.3k|            return ranges::next(range.begin(),
 6218|  10.3k|                                ranges::distance(crange.begin(), it));
 6219|  10.3k|        }
 6220|  10.3k|        else {
 6221|  10.3k|            SCN_EXPECT(false);
 6222|  10.3k|            SCN_UNREACHABLE;
 6223|  10.3k|        }
 6224|  10.3k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6123|  10.2k|    {
 6124|  10.2k|        const bool need_skipped_width =
 6125|  10.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 8.07k, False: 2.16k]
  |  Branch (6125:33): [True: 288, False: 1.88k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  10.2k|        auto it = rng.begin();
 6129|  10.2k|        std::ptrdiff_t prefix_width = 0;
 6130|  10.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 304, False: 9.93k]
  ------------------
 6131|    304|            auto max_width_view = take_width(rng, specs.precision);
 6132|    304|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    304|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    304|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    304|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    304|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 304]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    304|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    304|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    304|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    304|            it = prefix_result.first.base();
 6135|    304|            prefix_width = prefix_result.second;
 6136|    304|        }
 6137|  9.93k|        else {
 6138|  9.93k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  9.93k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  9.93k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  9.93k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  9.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 9.93k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  9.93k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  9.93k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  9.93k|            std::tie(it, prefix_width) = prefix_result;
 6140|  9.93k|        }
 6141|  10.2k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  10.2k|        std::ptrdiff_t value_width = 0;
 6145|  10.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 304, False: 9.93k]
  ------------------
 6146|    304|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 14, False: 290]
  ------------------
 6147|     14|                return unexpected_scan_error(
 6148|     14|                    scan_error::invalid_scanned_value,
 6149|     14|                    "Too many fill characters before value, "
 6150|     14|                    "precision exceeded before reading value");
 6151|     14|            }
 6152|       |
 6153|    290|            const auto initial_width = specs.precision - prefix_width;
 6154|    290|            auto max_width_view =
 6155|    290|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    290|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    290|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    290|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    290|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    290|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 166, False: 124]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    166|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    166|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    166|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    166|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    166|    }                                                  \
  |  |  |  | 3671|    290|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    124|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    124|            it = w_it.base();
 6158|    124|            value_width = initial_width - w_it.count();
 6159|    124|        }
 6160|  9.93k|        else {
 6161|  9.93k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  9.93k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  9.93k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  9.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 8.71k, False: 1.22k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  8.71k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  8.71k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  8.71k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  8.71k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  8.71k|    }                                                  \
  |  | 3671|  9.93k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  9.93k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  1.22k|                                             specs, value, loc));
 6163|       |
 6164|  1.22k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 694, False: 528]
  ------------------
 6165|    694|                value_width = calculate_text_width(
 6166|    694|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    694|                        .view());
 6168|    694|            }
 6169|  1.22k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  1.34k|        std::ptrdiff_t postfix_width = 0;
 6173|  1.34k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 1.02k, False: 326]
  ------------------
 6174|  1.02k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  1.02k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.02k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.02k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.02k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.02k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.02k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  1.02k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  1.02k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  1.02k|                                 value_width));
 6178|  1.02k|            std::tie(it, postfix_width) = postfix_result;
 6179|  1.02k|        }
 6180|       |
 6181|  1.34k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  1.34k|                                                 value_width, postfix_width);
 6183|  1.34k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 402, False: 944]
  ------------------
 6184|    402|            return unexpected(e);
 6185|    402|        }
 6186|       |
 6187|    944|        return it;
 6188|  1.34k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|    742|    {
 3492|    742|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3672|    742|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    742|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    742|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    742|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 742]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    742|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    742|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|    742|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|    742|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|    742|            if (prefix_result.sign == sign_type::minus_sign) {
 3497|    742|                return unexpected_scan_error(
 3498|    742|                    scan_error::invalid_scanned_value,
 3499|    742|                    "Unexpected '-' sign when parsing an "
 3500|    742|                    "unsigned value");
 3501|    742|            }
 3502|    742|        }
 3503|       |
 3504|    742|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 742]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  1.48k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    742|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    742|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    742|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    742|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 742]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    742|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    742|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  1.48k|                parse_integer_digits_without_thsep(
 3511|  1.48k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  1.48k|                    prefix_result.parsed_base));
 3513|       |
 3514|  1.48k|        auto buf = make_contiguous_buffer(
 3515|  1.48k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  1.48k|        SCN_TRY(result_it,
  ------------------
  |  | 3672|    742|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    742|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    742|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    742|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 742, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    742|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    742|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    742|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    742|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    742|    }                                                  \
  |  |  |  | 3671|    742|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|      0|                                    prefix_result.parsed_base));
 3519|       |
 3520|      0|        return ranges::next(prefix_result.iterator,
 3521|      0|                            ranges::distance(buf.view().begin(), result_it));
 3522|  1.48k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|    742|    {
 3492|    742|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3672|    742|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    742|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    742|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    742|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 742]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    742|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    742|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|    742|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|    742|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|    742|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3496:17): [True: 0, False: 742]
  ------------------
 3497|      0|                return unexpected_scan_error(
 3498|      0|                    scan_error::invalid_scanned_value,
 3499|      0|                    "Unexpected '-' sign when parsing an "
 3500|      0|                    "unsigned value");
 3501|      0|            }
 3502|    742|        }
 3503|       |
 3504|    742|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 742]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  1.48k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    742|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    742|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    742|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    742|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 742]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    742|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    742|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  1.48k|                parse_integer_digits_without_thsep(
 3511|  1.48k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  1.48k|                    prefix_result.parsed_base));
 3513|       |
 3514|  1.48k|        auto buf = make_contiguous_buffer(
 3515|  1.48k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  1.48k|        SCN_TRY(result_it,
  ------------------
  |  | 3672|    742|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    742|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    742|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    742|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 742, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    742|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    742|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    742|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    742|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    742|    }                                                  \
  |  |  |  | 3671|    742|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|      0|                                    prefix_result.parsed_base));
 3519|       |
 3520|      0|        return ranges::next(prefix_result.iterator,
 3521|      0|                            ranges::distance(buf.view().begin(), result_it));
 3522|  1.48k|    }

LLVMFuzzerTestOneInput:
   68|  14.8k|{
   69|  14.8k|    scn::fuzz::run(data, size);
   70|  14.8k|    return 0;
   71|  14.8k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   51|  14.8k|{
   52|  14.8k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (52:9): [True: 0, False: 14.8k]
  |  Branch (52:35): [True: 0, False: 14.8k]
  ------------------
   53|      0|        return;
   54|      0|    }
   55|       |
   56|  14.8k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   57|       |
   58|  14.8k|    run_for_source(sv);
   59|  14.8k|    run_for_source(wsv_reinterpret);
   60|  14.8k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (60:9): [True: 14.8k, False: 0]
  ------------------
   61|  14.8k|        run_for_source(wsv_transcode);
   62|  14.8k|    }
   63|  14.8k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_114run_for_sourceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT_:
   36|  14.8k|{
   37|  14.8k|    using char_type = ranges::range_value_t<Source>;
   38|       |
   39|  14.8k|    run_for_type<char_type>(source);
   40|  14.8k|    run_for_type<int>(source);
   41|  14.8k|    run_for_type<unsigned>(source);
   42|  14.8k|    run_for_type<double>(source);
   43|  14.8k|    run_for_type<bool>(source);
   44|  14.8k|    run_for_type<void*>(source);
   45|  14.8k|    run_for_type<std::string>(source);
   46|  14.8k|    run_for_type<std::wstring>(source);
   47|  14.8k|    run_for_type<std::basic_string_view<char_type>>(source);
   48|  14.8k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIcNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  14.8k|{
   25|  14.8k|    {
   26|  14.8k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  14.8k|    }
   28|  14.8k|    {
   29|  14.8k|        auto _ =
   30|  14.8k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  14.8k|    }
   32|  14.8k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIiNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  14.8k|{
   25|  14.8k|    {
   26|  14.8k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  14.8k|    }
   28|  14.8k|    {
   29|  14.8k|        auto _ =
   30|  14.8k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  14.8k|    }
   32|  14.8k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIjNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  14.8k|{
   25|  14.8k|    {
   26|  14.8k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  14.8k|    }
   28|  14.8k|    {
   29|  14.8k|        auto _ =
   30|  14.8k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  14.8k|    }
   32|  14.8k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIdNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  14.8k|{
   25|  14.8k|    {
   26|  14.8k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  14.8k|    }
   28|  14.8k|    {
   29|  14.8k|        auto _ =
   30|  14.8k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  14.8k|    }
   32|  14.8k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIbNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  14.8k|{
   25|  14.8k|    {
   26|  14.8k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  14.8k|    }
   28|  14.8k|    {
   29|  14.8k|        auto _ =
   30|  14.8k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  14.8k|    }
   32|  14.8k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIPvNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEvRT0_:
   24|  14.8k|{
   25|  14.8k|    {
   26|  14.8k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  14.8k|    }
   28|  14.8k|    {
   29|  14.8k|        auto _ =
   30|  14.8k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  14.8k|    }
   32|  14.8k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_17basic_string_viewIcS6_EEEEvRT0_:
   24|  14.8k|{
   25|  14.8k|    {
   26|  14.8k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  14.8k|    }
   28|  14.8k|    {
   29|  14.8k|        auto _ =
   30|  14.8k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  14.8k|    }
   32|  14.8k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS3_17basic_string_viewIcNS5_IcEEEEEEvRT0_:
   24|  14.8k|{
   25|  14.8k|    {
   26|  14.8k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  14.8k|    }
   28|  14.8k|    {
   29|  14.8k|        auto _ =
   30|  14.8k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  14.8k|    }
   32|  14.8k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEES7_EEvRT0_:
   24|  14.8k|{
   25|  14.8k|    {
   26|  14.8k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  14.8k|    }
   28|  14.8k|    {
   29|  14.8k|        auto _ =
   30|  14.8k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  14.8k|    }
   32|  14.8k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_114run_for_sourceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT_:
   36|  29.7k|{
   37|  29.7k|    using char_type = ranges::range_value_t<Source>;
   38|       |
   39|  29.7k|    run_for_type<char_type>(source);
   40|  29.7k|    run_for_type<int>(source);
   41|  29.7k|    run_for_type<unsigned>(source);
   42|  29.7k|    run_for_type<double>(source);
   43|  29.7k|    run_for_type<bool>(source);
   44|  29.7k|    run_for_type<void*>(source);
   45|  29.7k|    run_for_type<std::string>(source);
   46|  29.7k|    run_for_type<std::wstring>(source);
   47|  29.7k|    run_for_type<std::basic_string_view<char_type>>(source);
   48|  29.7k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIwNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  29.7k|{
   25|  29.7k|    {
   26|  29.7k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  29.7k|    }
   28|  29.7k|    {
   29|  29.7k|        auto _ =
   30|  29.7k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  29.7k|    }
   32|  29.7k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIiNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  29.7k|{
   25|  29.7k|    {
   26|  29.7k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  29.7k|    }
   28|  29.7k|    {
   29|  29.7k|        auto _ =
   30|  29.7k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  29.7k|    }
   32|  29.7k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIjNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  29.7k|{
   25|  29.7k|    {
   26|  29.7k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  29.7k|    }
   28|  29.7k|    {
   29|  29.7k|        auto _ =
   30|  29.7k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  29.7k|    }
   32|  29.7k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIdNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  29.7k|{
   25|  29.7k|    {
   26|  29.7k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  29.7k|    }
   28|  29.7k|    {
   29|  29.7k|        auto _ =
   30|  29.7k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  29.7k|    }
   32|  29.7k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIbNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  29.7k|{
   25|  29.7k|    {
   26|  29.7k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  29.7k|    }
   28|  29.7k|    {
   29|  29.7k|        auto _ =
   30|  29.7k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  29.7k|    }
   32|  29.7k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIPvNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEvRT0_:
   24|  29.7k|{
   25|  29.7k|    {
   26|  29.7k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  29.7k|    }
   28|  29.7k|    {
   29|  29.7k|        auto _ =
   30|  29.7k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  29.7k|    }
   32|  29.7k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_17basic_string_viewIwNS5_IwEEEEEEvRT0_:
   24|  29.7k|{
   25|  29.7k|    {
   26|  29.7k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  29.7k|    }
   28|  29.7k|    {
   29|  29.7k|        auto _ =
   30|  29.7k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  29.7k|    }
   32|  29.7k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS3_17basic_string_viewIwS6_EEEEvRT0_:
   24|  29.7k|{
   25|  29.7k|    {
   26|  29.7k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  29.7k|    }
   28|  29.7k|    {
   29|  29.7k|        auto _ =
   30|  29.7k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  29.7k|    }
   32|  29.7k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEES7_EEvRT0_:
   24|  29.7k|{
   25|  29.7k|    {
   26|  29.7k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  29.7k|    }
   28|  29.7k|    {
   29|  29.7k|        auto _ =
   30|  29.7k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  29.7k|    }
   32|  29.7k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|  14.8k|{
   52|  14.8k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|  14.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  14.8k|    string_buffer.resize(size);
   56|  14.8k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|  14.8k|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|  14.8k|    const auto wsv_reinterpret_size =
   61|  14.8k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 94, False: 14.7k]
  ------------------
   62|  14.8k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|  14.8k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|  14.8k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|  14.8k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|  14.8k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|  14.8k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|  14.8k|}

