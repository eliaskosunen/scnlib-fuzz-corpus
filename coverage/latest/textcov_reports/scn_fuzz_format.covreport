_ZN10fast_float10is_integerIDiEEbT_:
   34|     70|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   35|     70|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (35:12): [True: 26, False: 44]
  |  Branch (35:27): [True: 0, False: 44]
  ------------------
   36|     70|}
_ZN10fast_float19parse_number_stringILb0EDiEENS_22parsed_number_string_tIT0_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  285|     44|                    parse_options_t<UC> options) noexcept {
  286|     44|  chars_format const fmt = detail::adjust_for_feature_macros(options.format);
  287|     44|  UC const decimal_point = options.decimal_point;
  288|       |
  289|     44|  parsed_number_string_t<UC> answer;
  290|     44|  answer.valid = false;
  291|     44|  answer.too_many_digits = false;
  292|       |  // assume p < pend, so dereference without checks;
  293|     44|  answer.negative = (*p == UC('-'));
  294|       |  // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  295|     44|  if ((*p == UC('-')) || (uint64_t(fmt & chars_format::allow_leading_plus) &&
  ------------------
  |  Branch (295:7): [True: 0, False: 44]
  |  Branch (295:27): [True: 0, False: 44]
  ------------------
  296|     44|                          !basic_json_fmt && *p == UC('+'))) {
  ------------------
  |  Branch (296:27): [Folded - Ignored]
  |  Branch (296:46): [True: 0, False: 0]
  ------------------
  297|      0|    ++p;
  298|      0|    if (p == pend) {
  ------------------
  |  Branch (298:9): [True: 0, False: 0]
  ------------------
  299|      0|      return report_parse_error<UC>(
  300|      0|          p, parse_error::missing_integer_or_dot_after_sign);
  301|      0|    }
  302|      0|    FASTFLOAT_IF_CONSTEXPR17(basic_json_fmt) {
  ------------------
  |  |   31|      0|#define FASTFLOAT_IF_CONSTEXPR17(x) if constexpr (x)
  ------------------
  303|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  304|      0|        return report_parse_error<UC>(p,
  305|      0|                                      parse_error::missing_integer_after_sign);
  306|      0|      }
  307|      0|    }
  308|      0|    else {
  309|      0|      if (!is_integer(*p) &&
  ------------------
  |  Branch (309:11): [True: 0, False: 0]
  ------------------
  310|      0|          (*p !=
  ------------------
  |  Branch (310:11): [True: 0, False: 0]
  ------------------
  311|      0|           decimal_point)) { // a sign must be followed by an integer or the dot
  312|      0|        return report_parse_error<UC>(
  313|      0|            p, parse_error::missing_integer_or_dot_after_sign);
  314|      0|      }
  315|      0|    }
  316|      0|  }
  317|     44|  UC const *const start_digits = p;
  318|       |
  319|     44|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  320|       |
  321|     88|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (321:10): [True: 70, False: 18]
  |  Branch (321:25): [True: 44, False: 26]
  ------------------
  322|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  323|       |    // multiplication
  324|     44|    i = 10 * i +
  325|     44|        uint64_t(*p -
  326|     44|                 UC('0')); // might overflow, we will handle the overflow later
  327|     44|    ++p;
  328|     44|  }
  329|     44|  UC const *const end_of_integer_part = p;
  330|     44|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  331|     44|  answer.integer = span<UC const>(start_digits, size_t(digit_count));
  332|     44|  FASTFLOAT_IF_CONSTEXPR17(basic_json_fmt) {
  ------------------
  |  |   31|     44|#define FASTFLOAT_IF_CONSTEXPR17(x) if constexpr (x)
  ------------------
  333|       |    // at least 1 digit in integer part, without leading zeros
  334|       |    if (digit_count == 0) {
  335|       |      return report_parse_error<UC>(p, parse_error::no_digits_in_integer_part);
  336|       |    }
  337|       |    if ((start_digits[0] == UC('0') && digit_count > 1)) {
  338|       |      return report_parse_error<UC>(start_digits,
  339|       |                                    parse_error::leading_zeros_in_integer_part);
  340|       |    }
  341|       |  }
  342|       |
  343|     44|  int64_t exponent = 0;
  344|     44|  bool const has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (344:34): [True: 26, False: 18]
  |  Branch (344:49): [True: 0, False: 26]
  ------------------
  345|     44|  if (has_decimal_point) {
  ------------------
  |  Branch (345:7): [True: 0, False: 44]
  ------------------
  346|      0|    ++p;
  347|      0|    UC const *before = p;
  348|       |    // can occur at most twice without overflowing, but let it occur more, since
  349|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  350|      0|    loop_parse_if_eight_digits(p, pend, i);
  351|       |
  352|      0|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (352:12): [True: 0, False: 0]
  |  Branch (352:27): [True: 0, False: 0]
  ------------------
  353|      0|      uint8_t digit = uint8_t(*p - UC('0'));
  354|      0|      ++p;
  355|      0|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  356|      0|    }
  357|      0|    exponent = before - p;
  358|      0|    answer.fraction = span<UC const>(before, size_t(p - before));
  359|      0|    digit_count -= exponent;
  360|      0|  }
  361|     44|  FASTFLOAT_IF_CONSTEXPR17(basic_json_fmt) {
  ------------------
  |  |   31|     44|#define FASTFLOAT_IF_CONSTEXPR17(x) if constexpr (x)
  ------------------
  362|       |    // at least 1 digit in fractional part
  363|       |    if (has_decimal_point && exponent == 0) {
  364|       |      return report_parse_error<UC>(p,
  365|       |                                    parse_error::no_digits_in_fractional_part);
  366|       |    }
  367|       |  }
  368|     44|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (368:12): [True: 0, False: 44]
  ------------------
  369|      0|    return report_parse_error<UC>(p, parse_error::no_digits_in_mantissa);
  370|      0|  }
  371|     44|  int64_t exp_number = 0; // explicit exponential part
  372|     44|  if ((uint64_t(fmt & chars_format::scientific) && (p != pend) &&
  ------------------
  |  Branch (372:8): [True: 40, False: 4]
  |  Branch (372:52): [True: 26, False: 14]
  ------------------
  373|     44|       ((UC('e') == *p) || (UC('E') == *p))) ||
  ------------------
  |  Branch (373:9): [True: 0, False: 26]
  |  Branch (373:28): [True: 0, False: 26]
  ------------------
  374|     44|      (uint64_t(fmt & detail::basic_fortran_fmt) && (p != pend) &&
  ------------------
  |  Branch (374:8): [True: 0, False: 44]
  |  Branch (374:53): [True: 0, False: 0]
  ------------------
  375|     44|       ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) ||
  ------------------
  |  Branch (375:9): [True: 0, False: 0]
  |  Branch (375:28): [True: 0, False: 0]
  |  Branch (375:47): [True: 0, False: 0]
  ------------------
  376|      0|        (UC('D') == *p)))) {
  ------------------
  |  Branch (376:9): [True: 0, False: 0]
  ------------------
  377|      0|    UC const *location_of_e = p;
  378|      0|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) ||
  ------------------
  |  Branch (378:9): [True: 0, False: 0]
  |  Branch (378:28): [True: 0, False: 0]
  |  Branch (378:47): [True: 0, False: 0]
  ------------------
  379|      0|        (UC('D') == *p)) {
  ------------------
  |  Branch (379:9): [True: 0, False: 0]
  ------------------
  380|      0|      ++p;
  381|      0|    }
  382|      0|    bool neg_exp = false;
  383|      0|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (383:9): [True: 0, False: 0]
  |  Branch (383:24): [True: 0, False: 0]
  ------------------
  384|      0|      neg_exp = true;
  385|      0|      ++p;
  386|      0|    } else if ((p != pend) &&
  ------------------
  |  Branch (386:16): [True: 0, False: 0]
  ------------------
  387|      0|               (UC('+') ==
  ------------------
  |  Branch (387:16): [True: 0, False: 0]
  ------------------
  388|      0|                *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  389|      0|      ++p;
  390|      0|    }
  391|      0|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (391:9): [True: 0, False: 0]
  |  Branch (391:24): [True: 0, False: 0]
  ------------------
  392|      0|      if (!uint64_t(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (392:11): [True: 0, False: 0]
  ------------------
  393|       |        // The exponential part is invalid for scientific notation, so it must
  394|       |        // be a trailing token for fixed notation. However, fixed notation is
  395|       |        // disabled, so report a scientific notation error.
  396|      0|        return report_parse_error<UC>(p, parse_error::missing_exponential_part);
  397|      0|      }
  398|       |      // Otherwise, we will be ignoring the 'e'.
  399|      0|      p = location_of_e;
  400|      0|    } else {
  401|      0|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (401:14): [True: 0, False: 0]
  |  Branch (401:29): [True: 0, False: 0]
  ------------------
  402|      0|        uint8_t digit = uint8_t(*p - UC('0'));
  403|      0|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (403:13): [True: 0, False: 0]
  ------------------
  404|      0|          exp_number = 10 * exp_number + digit;
  405|      0|        }
  406|      0|        ++p;
  407|      0|      }
  408|      0|      if (neg_exp) {
  ------------------
  |  Branch (408:11): [True: 0, False: 0]
  ------------------
  409|      0|        exp_number = -exp_number;
  410|      0|      }
  411|      0|      exponent += exp_number;
  412|      0|    }
  413|     44|  } else {
  414|       |    // If it scientific and not fixed, we have to bail out.
  415|     44|    if (uint64_t(fmt & chars_format::scientific) &&
  ------------------
  |  Branch (415:9): [True: 40, False: 4]
  ------------------
  416|     44|        !uint64_t(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (416:9): [True: 0, False: 40]
  ------------------
  417|      0|      return report_parse_error<UC>(p, parse_error::missing_exponential_part);
  418|      0|    }
  419|     44|  }
  420|     44|  answer.lastmatch = p;
  421|     44|  answer.valid = true;
  422|       |
  423|       |  // If we frequently had to deal with long strings of digits,
  424|       |  // we could extend our code by using a 128-bit integer instead
  425|       |  // of a 64-bit integer. However, this is uncommon.
  426|       |  //
  427|       |  // We can deal with up to 19 digits.
  428|     44|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (428:7): [True: 0, False: 44]
  ------------------
  429|       |    // It is possible that the integer had an overflow.
  430|       |    // We have to handle the case where we have 0.0000somenumber.
  431|       |    // We need to be mindful of the case where we only have zeroes...
  432|       |    // E.g., 0.000000000...000.
  433|      0|    UC const *start = start_digits;
  434|      0|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (434:12): [True: 0, False: 0]
  |  Branch (434:32): [True: 0, False: 0]
  |  Branch (434:53): [True: 0, False: 0]
  ------------------
  435|      0|      if (*start == UC('0')) {
  ------------------
  |  Branch (435:11): [True: 0, False: 0]
  ------------------
  436|      0|        digit_count--;
  437|      0|      }
  438|      0|      start++;
  439|      0|    }
  440|       |
  441|      0|    if (digit_count > 19) {
  ------------------
  |  Branch (441:9): [True: 0, False: 0]
  ------------------
  442|      0|      answer.too_many_digits = true;
  443|       |      // Let us start again, this time, avoiding overflows.
  444|       |      // We don't need to check if is_integer, since we use the
  445|       |      // pre-tokenized spans from above.
  446|      0|      i = 0;
  447|      0|      p = answer.integer.ptr;
  448|      0|      UC const *int_end = p + answer.integer.len();
  449|      0|      uint64_t const minimal_nineteen_digit_integer{1000000000000000000};
  450|      0|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (450:14): [True: 0, False: 0]
  |  Branch (450:54): [True: 0, False: 0]
  ------------------
  451|      0|        i = i * 10 + uint64_t(*p - UC('0'));
  452|      0|        ++p;
  453|      0|      }
  454|      0|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (454:11): [True: 0, False: 0]
  ------------------
  455|      0|        exponent = end_of_integer_part - p + exp_number;
  456|      0|      } else { // We have a value with a fractional component.
  457|      0|        p = answer.fraction.ptr;
  458|      0|        UC const *frac_end = p + answer.fraction.len();
  459|      0|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (459:16): [True: 0, False: 0]
  |  Branch (459:56): [True: 0, False: 0]
  ------------------
  460|      0|          i = i * 10 + uint64_t(*p - UC('0'));
  461|      0|          ++p;
  462|      0|        }
  463|      0|        exponent = answer.fraction.ptr - p + exp_number;
  464|      0|      }
  465|       |      // We have now corrected both exponent and i, to a truncated value
  466|      0|    }
  467|      0|  }
  468|     44|  answer.exponent = exponent;
  469|     44|  answer.mantissa = i;
  470|     44|  return answer;
  471|     44|}

_ZN10fast_float6detail25adjust_for_feature_macrosENS_12chars_formatE:
 1226|     88|constexpr chars_format adjust_for_feature_macros(chars_format fmt) {
 1227|     88|  return fmt
 1228|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS
 1229|       |         | chars_format::allow_leading_plus
 1230|       |#endif
 1231|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE
 1232|       |         | chars_format::skip_white_space
 1233|       |#endif
 1234|     88|      ;
 1235|     88|}
_ZN10fast_floatanENS_12chars_formatES0_:
 1191|    304|constexpr chars_format operator&(chars_format lhs, chars_format rhs) noexcept {
 1192|    304|  using int_type = std::underlying_type<chars_format>::type;
 1193|    304|  return static_cast<chars_format>(static_cast<int_type>(lhs) &
 1194|    304|                                   static_cast<int_type>(rhs));
 1195|    304|}
_ZN10fast_float4spanIKDiEC2Ev:
  289|     88|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKDiEC2EPS1_m:
  287|     44|  constexpr span(T const *_ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZN10fast_float15parse_options_tIDiEC2ENS_12chars_formatEDii:
   68|     44|      : format(fmt), decimal_point(dot), base(b) {}
_ZN10fast_float13binary_formatIdE22min_exponent_fast_pathEv:
  546|     44|inline constexpr int binary_format<double>::min_exponent_fast_path() {
  547|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  548|       |  return 0;
  549|       |#else
  550|     44|  return -22;
  551|     44|#endif
  552|     44|}
_ZN10fast_float13binary_formatIdE22max_exponent_fast_pathEv:
  618|     44|inline constexpr int binary_format<double>::max_exponent_fast_path() {
  619|     44|  return 22;
  620|     44|}
_ZN10fast_float13binary_formatIdE22max_mantissa_fast_pathEv:
  628|     44|inline constexpr uint64_t binary_format<double>::max_mantissa_fast_path() {
  629|     44|  return uint64_t(2) << mantissa_explicit_bits();
  630|     44|}
_ZN10fast_float13binary_formatIdE22mantissa_explicit_bitsEv:
  564|     44|inline constexpr int binary_format<double>::mantissa_explicit_bits() {
  565|     44|  return 52;
  566|     44|}
_ZN10fast_float13binary_formatIdE18exact_power_of_tenEl:
  908|     44|binary_format<double>::exact_power_of_ten(int64_t power) {
  909|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  910|     44|  return (void)powers_of_ten[0], powers_of_ten[power];
  911|     44|}

_ZN10fast_float6detail17rounds_to_nearestEv:
   78|     44|fastfloat_really_inline bool rounds_to_nearest() noexcept {
   79|       |  // https://lemire.me/blog/2020/06/26/gcc-not-nearest/
   80|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
   81|       |  return false;
   82|       |#endif
   83|       |  // See
   84|       |  // A fast function to check your floating-point rounding mode
   85|       |  // https://lemire.me/blog/2022/11/16/a-fast-function-to-check-your-floating-point-rounding-mode/
   86|       |  //
   87|       |  // This function is meant to be equivalent to :
   88|       |  // prior: #include <cfenv>
   89|       |  //  return fegetround() == FE_TONEAREST;
   90|       |  // However, it is expected to be much faster than the fegetround()
   91|       |  // function call.
   92|       |  //
   93|       |  // The volatile keyword prevents the compiler from computing the function
   94|       |  // at compile-time.
   95|       |  // There might be other ways to prevent compile-time optimizations (e.g.,
   96|       |  // asm). The value does not need to be std::numeric_limits<float>::min(), any
   97|       |  // small value so that 1 + x should round to 1 would do (after accounting for
   98|       |  // excess precision, as in 387 instructions).
   99|     44|  static float volatile fmin = std::numeric_limits<float>::min();
  100|     44|  float fmini = fmin; // we copy it so that it gets loaded at most once.
  101|       |//
  102|       |// Explanation:
  103|       |// Only when fegetround() == FE_TONEAREST do we have that
  104|       |// fmin + 1.0f == 1.0f - fmin.
  105|       |//
  106|       |// FE_UPWARD:
  107|       |//  fmin + 1.0f > 1
  108|       |//  1.0f - fmin == 1
  109|       |//
  110|       |// FE_DOWNWARD or  FE_TOWARDZERO:
  111|       |//  fmin + 1.0f == 1
  112|       |//  1.0f - fmin < 1
  113|       |//
  114|       |// Note: This may fail to be accurate if fast-math has been
  115|       |// enabled, as rounding conventions may not apply.
  116|       |#ifdef FASTFLOAT_VISUAL_STUDIO
  117|       |#pragma warning(push)
  118|       |//  todo: is there a VS warning?
  119|       |//  see
  120|       |//  https://stackoverflow.com/questions/46079446/is-there-a-warning-for-floating-point-equality-checking-in-visual-studio-2013
  121|       |#elif defined(__clang__)
  122|       |#pragma clang diagnostic push
  123|     44|#pragma clang diagnostic ignored "-Wfloat-equal"
  124|       |#elif defined(__GNUC__)
  125|       |#pragma GCC diagnostic push
  126|       |#pragma GCC diagnostic ignored "-Wfloat-equal"
  127|       |#endif
  128|     44|  return (fmini + 1.0f == 1.0f - fmini);
  129|       |#ifdef FASTFLOAT_VISUAL_STUDIO
  130|       |#pragma warning(pop)
  131|       |#elif defined(__clang__)
  132|       |#pragma clang diagnostic pop
  133|       |#elif defined(__GNUC__)
  134|       |#pragma GCC diagnostic pop
  135|       |#endif
  136|     44|}
_ZN10fast_float10from_charsIdDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|     44|           chars_format fmt /*= chars_format::general*/) noexcept {
  187|     44|  return from_chars_caller<T>::call(first, last, value,
  188|     44|                                    parse_options_t<UC>(fmt));
  189|     44|}
_ZN10fast_float17from_chars_callerIdE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  144|     44|       parse_options_t<UC> options) noexcept {
  145|     44|    return from_chars_advanced(first, last, value, options);
  146|     44|  }
_ZN10fast_float19from_chars_advancedIdDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  392|     44|                    parse_options_t<UC> options) noexcept {
  393|     44|  return from_chars_advanced_caller<
  394|     44|      size_t(is_supported_float_type<T>::value) +
  395|     44|      2 * size_t(is_supported_integer_type<T>::value)>::call(first, last, value,
  396|     44|                                                             options);
  397|     44|}
_ZN10fast_float26from_chars_advanced_callerILm1EE4callIdDiEENS_19from_chars_result_tIT0_EEPKS4_S7_RT_NS_15parse_options_tIS4_EE:
  375|     44|       parse_options_t<UC> options) noexcept {
  376|     44|    return from_chars_float_advanced(first, last, value, options);
  377|     44|  }
_ZN10fast_float25from_chars_float_advancedIdDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  287|     44|                          parse_options_t<UC> options) noexcept {
  288|       |
  289|     44|  static_assert(is_supported_float_type<T>::value,
  290|     44|                "only some floating-point types are supported");
  291|     44|  static_assert(is_supported_char_type<UC>::value,
  292|     44|                "only char, wchar_t, char16_t and char32_t are supported");
  293|       |
  294|     44|  chars_format const fmt = detail::adjust_for_feature_macros(options.format);
  295|       |
  296|     44|  from_chars_result_t<UC> answer;
  297|     44|  if (uint64_t(fmt & chars_format::skip_white_space)) {
  ------------------
  |  Branch (297:7): [True: 0, False: 44]
  ------------------
  298|      0|    while ((first != last) && fast_float::is_space(*first)) {
  ------------------
  |  Branch (298:12): [True: 0, False: 0]
  |  Branch (298:31): [True: 0, False: 0]
  ------------------
  299|      0|      first++;
  300|      0|    }
  301|      0|  }
  302|     44|  if (first == last) {
  ------------------
  |  Branch (302:7): [True: 0, False: 44]
  ------------------
  303|      0|    answer.ec = std::errc::invalid_argument;
  304|      0|    answer.ptr = first;
  305|      0|    return answer;
  306|      0|  }
  307|     44|  parsed_number_string_t<UC> pns =
  308|     44|      uint64_t(fmt & detail::basic_json_fmt)
  ------------------
  |  Branch (308:7): [True: 0, False: 44]
  ------------------
  309|     44|          ? parse_number_string<true, UC>(first, last, options)
  310|     44|          : parse_number_string<false, UC>(first, last, options);
  311|     44|  if (!pns.valid) {
  ------------------
  |  Branch (311:7): [True: 0, False: 44]
  ------------------
  312|      0|    if (uint64_t(fmt & chars_format::no_infnan)) {
  ------------------
  |  Branch (312:9): [True: 0, False: 0]
  ------------------
  313|      0|      answer.ec = std::errc::invalid_argument;
  314|      0|      answer.ptr = first;
  315|      0|      return answer;
  316|      0|    } else {
  317|      0|      return detail::parse_infnan(first, last, value, fmt);
  318|      0|    }
  319|      0|  }
  320|       |
  321|       |  // call overload that takes parsed_number_string_t directly.
  322|     44|  return from_chars_advanced(pns, value);
  323|     44|}
_ZN10fast_float19from_chars_advancedIdDiEENS_19from_chars_result_tIT0_EERNS_22parsed_number_string_tIS2_EERT_:
  198|     44|from_chars_advanced(parsed_number_string_t<UC> &pns, T &value) noexcept {
  199|       |
  200|     44|  static_assert(is_supported_float_type<T>::value,
  201|     44|                "only some floating-point types are supported");
  202|     44|  static_assert(is_supported_char_type<UC>::value,
  203|     44|                "only char, wchar_t, char16_t and char32_t are supported");
  204|       |
  205|     44|  from_chars_result_t<UC> answer;
  206|       |
  207|     44|  answer.ec = std::errc(); // be optimistic
  208|     44|  answer.ptr = pns.lastmatch;
  209|       |  // The implementation of the Clinger's fast path is convoluted because
  210|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  211|       |  // selected on the thread.
  212|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest()
  213|       |  // returns true.
  214|     44|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent &&
  ------------------
  |  Branch (214:7): [True: 44, False: 0]
  ------------------
  215|     44|      pns.exponent <= binary_format<T>::max_exponent_fast_path() &&
  ------------------
  |  Branch (215:7): [True: 44, False: 0]
  ------------------
  216|     44|      !pns.too_many_digits) {
  ------------------
  |  Branch (216:7): [True: 44, False: 0]
  ------------------
  217|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  218|       |    // when the system rounds to the nearest float.
  219|       |    //
  220|       |    // We expect the next branch to almost always be selected.
  221|       |    // We could check it first (before the previous branch), but
  222|       |    // there might be performance advantages at having the check
  223|       |    // be last.
  224|     44|    if (!cpp20_and_in_constexpr() && detail::rounds_to_nearest()) {
  ------------------
  |  Branch (224:9): [Folded - Ignored]
  |  Branch (224:38): [True: 44, False: 0]
  ------------------
  225|       |      // We have that fegetround() == FE_TONEAREST.
  226|       |      // Next is Clinger's fast path.
  227|     44|      if (pns.mantissa <= binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (227:11): [True: 44, False: 0]
  ------------------
  228|     44|        value = T(pns.mantissa);
  229|     44|        if (pns.exponent < 0) {
  ------------------
  |  Branch (229:13): [True: 0, False: 44]
  ------------------
  230|      0|          value = value / binary_format<T>::exact_power_of_ten(-pns.exponent);
  231|     44|        } else {
  232|     44|          value = value * binary_format<T>::exact_power_of_ten(pns.exponent);
  233|     44|        }
  234|     44|        if (pns.negative) {
  ------------------
  |  Branch (234:13): [True: 0, False: 44]
  ------------------
  235|      0|          value = -value;
  236|      0|        }
  237|     44|        return answer;
  238|     44|      }
  239|     44|    } else {
  240|       |      // We do not have that fegetround() == FE_TONEAREST.
  241|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's
  242|       |      // proposal
  243|      0|      if (pns.exponent >= 0 &&
  ------------------
  |  Branch (243:11): [True: 0, False: 0]
  ------------------
  244|      0|          pns.mantissa <=
  ------------------
  |  Branch (244:11): [True: 0, False: 0]
  ------------------
  245|      0|              binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  246|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  247|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  248|      0|        if (pns.mantissa == 0) {
  ------------------
  |  Branch (248:13): [True: 0, False: 0]
  ------------------
  249|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (249:19): [True: 0, False: 0]
  ------------------
  250|      0|          return answer;
  251|      0|        }
  252|      0|#endif
  253|      0|        value = T(pns.mantissa) *
  254|      0|                binary_format<T>::exact_power_of_ten(pns.exponent);
  255|      0|        if (pns.negative) {
  ------------------
  |  Branch (255:13): [True: 0, False: 0]
  ------------------
  256|      0|          value = -value;
  257|      0|        }
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|     44|  }
  262|      0|  adjusted_mantissa am =
  263|      0|      compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  264|      0|  if (pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (264:7): [True: 0, False: 0]
  |  Branch (264:30): [True: 0, False: 0]
  ------------------
  265|      0|    if (am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (265:9): [True: 0, False: 0]
  ------------------
  266|      0|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  267|      0|    }
  268|      0|  }
  269|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa)
  270|       |  // and we have an invalid power (am.power2 < 0), then we need to go the long
  271|       |  // way around again. This is very uncommon.
  272|      0|  if (am.power2 < 0) {
  ------------------
  |  Branch (272:7): [True: 0, False: 0]
  ------------------
  273|      0|    am = digit_comp<T>(pns, am);
  274|      0|  }
  275|      0|  to_float(pns.negative, am, value);
  276|       |  // Test for over/underflow.
  277|      0|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) ||
  ------------------
  |  Branch (277:8): [True: 0, False: 0]
  |  Branch (277:29): [True: 0, False: 0]
  |  Branch (277:49): [True: 0, False: 0]
  ------------------
  278|      0|      am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (278:7): [True: 0, False: 0]
  ------------------
  279|      0|    answer.ec = std::errc::result_out_of_range;
  280|      0|  }
  281|      0|  return answer;
  282|     44|}

_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSL_T0_E_clIccEEDaSL_SV_:
  986|  1.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSL_T0_E_clIwcEEDaSL_SV_:
  986|    882|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  986|  30.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v46detail39code_point_length_by_starting_code_unitIcEEmT_:
 4066|  4.99M|{
 4067|  4.99M|    if constexpr (sizeof(U) == 1) {
 4068|  4.99M|        return utf8_code_point_length_by_starting_code_unit(ch);
 4069|       |    }
 4070|       |    else if constexpr (sizeof(U) == 2) {
 4071|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4072|       |    }
 4073|       |    else {
 4074|       |        // utf-32
 4075|       |        static_assert(sizeof(U) == 4);
 4076|       |        SCN_UNUSED(ch);
 4077|       |        return 1;
 4078|       |    }
 4079|  4.99M|}
_ZN3scn2v46detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 4030|  4.99M|{
 4031|  4.99M|    static_assert(sizeof(U8) == 1);
 4032|       |
 4033|  4.99M|    SCN_GCC_COMPAT_PUSH
 4034|  4.99M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 4035|  4.99M|    constexpr char lengths[] =
 4036|  4.99M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 4037|  4.99M|        "\1\1\1\1\1\1\1\1"
 4038|  4.99M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 4039|       |                            // byte
 4040|  4.99M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 4041|  4.99M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 4042|  4.99M|        "\4";               // highest bits 11110 -> 4-byte cp
 4043|  4.99M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 4044|  4.99M|    SCN_GCC_COMPAT_POP
 4045|  4.99M|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4272|  4.64M|{
 4273|  4.64M|    if constexpr (sizeof(CharT) == 1) {
 4274|  4.64M|        return decode_utf8_code_point_exhaustive(input);
 4275|       |    }
 4276|       |    else if constexpr (sizeof(CharT) == 2) {
 4277|       |        return decode_utf16_code_point_exhaustive(input);
 4278|       |    }
 4279|       |    else {
 4280|       |        SCN_EXPECT(input.size() == 1);
 4281|       |        auto cp = static_cast<char32_t>(input.front());
 4282|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4283|       |            return invalid_code_point;
 4284|       |        }
 4285|       |        return cp;
 4286|       |    }
 4287|  4.64M|}
_ZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4085|  4.64M|{
 4086|  4.64M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  | 1051|  4.64M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  4.64M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4087|       |
 4088|  4.64M|    const auto is_trailing_code_unit = [](char ch) {
 4089|  4.64M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4090|  4.64M|    };
 4091|       |
 4092|  4.64M|    if (input.size() == 1) {
  ------------------
  |  Branch (4092:9): [True: 3.83M, False: 809k]
  ------------------
 4093|  3.83M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (4093:13): [True: 132, False: 3.83M]
  ------------------
 4094|    132|            SCN_UNLIKELY_ATTR
 4095|    132|            return invalid_code_point;
 4096|    132|        }
 4097|  3.83M|        return static_cast<char32_t>(input[0]);
 4098|  3.83M|    }
 4099|       |
 4100|   809k|    if (input.size() == 2) {
  ------------------
  |  Branch (4100:9): [True: 757k, False: 51.5k]
  ------------------
 4101|   757k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (4101:13): [True: 18, False: 757k]
  ------------------
 4102|     18|            SCN_UNLIKELY_ATTR
 4103|     18|            return invalid_code_point;
 4104|     18|        }
 4105|   757k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (4105:13): [True: 4.53k, False: 752k]
  ------------------
 4106|  4.53k|            SCN_UNLIKELY_ATTR
 4107|  4.53k|            return invalid_code_point;
 4108|  4.53k|        }
 4109|       |
 4110|   752k|        char32_t cp{};
 4111|   752k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 4112|   752k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 4113|   752k|        return cp;
 4114|   757k|    }
 4115|       |
 4116|  51.5k|    if (input.size() == 3) {
  ------------------
  |  Branch (4116:9): [True: 46.0k, False: 5.55k]
  ------------------
 4117|  46.0k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (4117:13): [True: 18, False: 46.0k]
  ------------------
 4118|     18|            SCN_UNLIKELY_ATTR
 4119|     18|            return invalid_code_point;
 4120|     18|        }
 4121|  46.0k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4121:13): [True: 1.34k, False: 44.6k]
  ------------------
 4122|  46.0k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (4122:13): [True: 331, False: 44.3k]
  ------------------
 4123|  1.67k|            SCN_UNLIKELY_ATTR
 4124|  1.67k|            return invalid_code_point;
 4125|  1.67k|        }
 4126|       |
 4127|  44.3k|        char32_t cp{};
 4128|  44.3k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 4129|  44.3k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 4130|  44.3k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 4131|  44.3k|        return cp;
 4132|  46.0k|    }
 4133|       |
 4134|  5.55k|    if (input.size() == 4) {
  ------------------
  |  Branch (4134:9): [True: 5.55k, False: 0]
  ------------------
 4135|  5.55k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (4135:13): [True: 0, False: 5.55k]
  ------------------
 4136|      0|            SCN_UNLIKELY_ATTR
 4137|      0|            return invalid_code_point;
 4138|      0|        }
 4139|  5.55k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (4139:13): [True: 345, False: 5.20k]
  ------------------
 4140|    345|            SCN_UNLIKELY_ATTR
 4141|    345|            return invalid_code_point;
 4142|    345|        }
 4143|  5.20k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4143:13): [True: 856, False: 4.34k]
  ------------------
 4144|  5.20k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (4144:13): [True: 291, False: 4.05k]
  ------------------
 4145|  5.20k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (4145:13): [True: 589, False: 3.46k]
  ------------------
 4146|  1.73k|            SCN_UNLIKELY_ATTR
 4147|  1.73k|            return invalid_code_point;
 4148|  1.73k|        }
 4149|       |
 4150|  3.46k|        char32_t cp{};
 4151|  3.46k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 4152|  3.46k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 4153|  3.46k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 4154|  3.46k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 4155|  3.46k|        return cp;
 4156|  5.20k|    }
 4157|       |
 4158|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 4159|       |    // gcc 7 thinks we'll get here, even when we won't
 4160|      0|    SCN_EXPECT(false);
  ------------------
  |  | 1051|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4161|      0|#endif
 4162|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4163|      0|}
_ZZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 4088|   861k|    const auto is_trailing_code_unit = [](char ch) {
 4089|   861k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4090|   861k|    };
_ZN3scn2v46detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3958|  1.35M|{
 3959|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3960|       |                                          decltype(first), decltype(last)> &&
 3961|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3962|       |        return {first, last};
 3963|       |    }
 3964|  1.35M|    else {
 3965|  1.35M|        return {to_address(first), static_cast<size_t>(std::distance(
 3966|  1.35M|                                       to_address(first), to_address(last)))};
 3967|  1.35M|    }
 3968|  1.35M|}
_ZN3scn2v46detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  4.12M|{
  316|  4.12M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1057|  4.12M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  4.12M|}
_ZN3scn2v46detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  293|  4.29M|{
  294|  4.29M|    return p;
  295|  4.29M|}
_ZN3scn2v46detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3989|   549k|{
 3990|       |    if constexpr (std::is_constructible_v<
 3991|       |                      typename std::basic_string_view<CharT>::iterator,
 3992|       |                      decltype(it)> &&
 3993|   549k|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3994|   549k|        SCN_UNUSED(sv);
  ------------------
  |  | 1036|   549k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3995|   549k|        return it;
 3996|       |    }
 3997|       |    else {
 3998|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3999|       |    }
 4000|   549k|}
_ZN3scn2v44scanIJcERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 9760|  3.32k|{
 9761|  3.32k|    auto result = make_scan_result<Source, Args...>();
 9762|  3.32k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  3.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9763|  3.32k|                                   make_scan_args(result->values())));
 9764|  3.32k|    return result;
 9765|  3.32k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEEDav:
 9716|  6.65k|{
 9717|  6.65k|    return scan_result_type<Source, Args...>();
 9718|  6.65k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEC2Ev:
 1550|  6.65k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2Ev:
  426|  6.65k|        : m_value(T{}), m_has_value(true)
  427|  6.65k|    {
  428|  6.65k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJcEEC2Ev:
 6623|  6.65k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2Ev:
 6466|  59.9k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2Ev:
 3458|  59.9k|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJcEEC2Ev:
 6397|  6.65k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9701|  6.65k|{
 9702|  6.65k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|  6.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 6.37k, False: 278]
  |  |  ------------------
  ------------------
 9703|  6.37k|        out = unexpected(in.error());
 9704|  6.37k|    }
 9705|    278|    else {
 9706|    278|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|    278|    static_cast<    \
  |  | 1056|    278|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|    278|    }
 9708|  6.65k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1738|  59.9k|    {
 1739|  59.9k|        return has_value();
 1740|  59.9k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   119k|    {
  490|   119k|        return m_has_value;
  491|   119k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1744|  57.2k|    {
 1745|  57.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  57.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  57.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|  57.2k|        return this->get_unexpected().error();
 1747|  57.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  57.2k|    {
  473|  57.2k|        return m_unexpected;
  474|  57.2k|    }
_ZNR3scn2v410unexpectedINS0_10scan_errorEE5errorEv:
  364|  1.78M|    {
  365|  1.78M|        return m_unexpected;
  366|  1.78M|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  349|   844k|        : m_unexpected(std::forward<Err>(e))
  350|   844k|    {
  351|   844k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1036|   844k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|   844k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1614|  6.37k|        : base(unexpect, std::move(e.error())),
 1615|  6.37k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  6.37k|    {
 1617|  6.37k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  6.37k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  6.37k|          m_has_value(false)
  451|  6.37k|    {
  452|  6.37k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  358|  1.06M|        : m_unexpected(std::forward<Args>(args)...)
  359|  1.06M|    {
  360|  1.06M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1036|  1.06M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  1.06M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  6.37k|    {
 1315|  6.37k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEaSEOSC_:
 1555|  6.37k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorEvEaSEOSD_:
  901|  6.37k|    {
  902|  6.37k|        assign_common(std::move(other));
  903|  6.37k|        return *this;
  904|  6.37k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  948|  6.37k|    {
  949|  6.37k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 6.37k, False: 0]
  ------------------
  950|  6.37k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 6.37k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  6.37k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  6.37k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  19.6k|    {
  490|  19.6k|        return m_has_value;
  491|  19.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  6.93k|    {
  456|  6.93k|        return m_value;
  457|  6.93k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1044|  6.37k|    {
 1045|  6.37k|        this->destroy_value();
 1046|  6.37k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  6.37k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  6.37k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  6.37k|    {
  504|  6.37k|        scn::detail::construct_at(&get_unexpected(),
  505|  6.37k|                                  std::forward<Args>(args)...);
  506|  6.37k|        m_has_value = false;
  507|  6.37k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJS5_EEEPT_S7_DpOT0_:
  395|   174k|{
  396|   174k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   174k|        T(std::forward<Args>(args)...);
  398|   174k|}
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  6.37k|    {
  473|  6.37k|        return m_unexpected;
  474|  6.37k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  6.37k|    {
  481|  6.37k|        return std::move(m_unexpected);
  482|  6.37k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE9set_rangeIS9_EEvOT_:
 6497|  2.61k|    {
 6498|  2.61k|        m_range = std::forward<Other>(r);
 6499|  2.61k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1793|  2.61k|    {
 1794|  2.61k|        return value();
 1795|  2.61k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1767|  2.61k|    {
 1768|  2.61k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  2.61k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  2.61k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  2.61k|        return this->get_value();
 1770|  2.61k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  2.61k|    {
  456|  2.61k|        return m_value;
  457|  2.61k|    }
_ZN3scn2v45vscanIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESE_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEEEOSA_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextINSF_16buffer_range_tagEcEEEE:
 9522|  29.9k|{
 9523|  29.9k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  | 1057|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9524|  29.9k|}
_ZN3scn2v46detail13vscan_genericIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS1_22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEEOSB_NS4_IT0_NS5_ISN_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESN_EEEE:
 9459|  29.9k|{
 9460|  29.9k|    auto buffer = make_scan_buffer(range);
 9461|       |
 9462|  29.9k|    auto result = vscan_impl(buffer, format, args);
 9463|  29.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  986|  29.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 28.6k, False: 1.30k]
  |  |  ------------------
  ------------------
 9464|  28.6k|        return unexpected(result.error());
 9465|  28.6k|    }
 9466|  1.30k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1057|  1.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9467|  29.9k|}
_ZN3scn2v46detail16make_scan_bufferINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaRKT_:
 5379|  59.9k|{
 5380|  59.9k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5381|       |
 5382|  59.9k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5383|  59.9k|                  "\n"
 5384|  59.9k|                  "Unsupported range type given as input to a scanning "
 5385|  59.9k|                  "function.\n"
 5386|  59.9k|                  "A range needs to have a character type (value type) "
 5387|  59.9k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5388|  59.9k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5389|  59.9k|                  "to be included.\n"
 5390|  59.9k|                  "See the scnlib documentation for more details.");
 5391|  59.9k|    static_assert(
 5392|  59.9k|        !std::is_same_v<T, custom_char_traits>,
 5393|  59.9k|        "\n"
 5394|  59.9k|        "Unsupported range type given as input to a scanning "
 5395|  59.9k|        "function.\n"
 5396|  59.9k|        "String types (std::basic_string, and std::basic_string_view) "
 5397|  59.9k|        "need to use std::char_traits. Strings with custom Traits are "
 5398|  59.9k|        "not supported.");
 5399|  59.9k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5400|  59.9k|                  "\n"
 5401|  59.9k|                  "Unsupported range type given as input to a scanning "
 5402|  59.9k|                  "function.\n"
 5403|  59.9k|                  "file_marker_found cannot be used as an "
 5404|  59.9k|                  "source range type to scn::scan.\n"
 5405|  59.9k|                  "To read from stdin, use scn::input or scn::prompt, "
 5406|  59.9k|                  "and do not provide an explicit source range, "
 5407|  59.9k|                  "or use scn::scan with a FILE* directly.");
 5408|  59.9k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5409|  59.9k|                  "\n"
 5410|  59.9k|                  "Unsupported range type given as input to a scanning "
 5411|  59.9k|                  "function.\n"
 5412|  59.9k|                  "In order to be scannable, a range needs to satisfy "
 5413|  59.9k|                  "`forward_range`. `input_range` is not sufficient.");
 5414|  59.9k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5415|  59.9k|                  "\n"
 5416|  59.9k|                  "Unsupported range type given as input to a scanning "
 5417|  59.9k|                  "function.\n"
 5418|  59.9k|                  "A range needs to model forward_range and have a valid "
 5419|  59.9k|                  "character type (char or wchar_t) to be scannable.\n"
 5420|  59.9k|                  "Examples of scannable ranges are std::string, "
 5421|  59.9k|                  "std::string_view, "
 5422|  59.9k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5423|  59.9k|                  "See the scnlib documentation for more details.");
 5424|       |
 5425|  59.9k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5426|  59.9k|}
_ZN3scn2v46detail17_make_scan_buffer4implIcEEDaNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEENS1_12priority_tagILm3EEE:
 5271|  59.9k|{
 5272|  59.9k|    if constexpr (is_valid_char_type<CharT>) {
 5273|  59.9k|        return r;
 5274|       |        // return make_string_scan_buffer(r);
 5275|       |    }
 5276|       |    else {
 5277|       |        return invalid_char_type{};
 5278|       |    }
 5279|  59.9k|}
_ZNK3scn2v48expectedIlNS0_10scan_errorEEcvbEv:
 1738|   205k|    {
 1739|   205k|        return has_value();
 1740|   205k|    }
_ZNK3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  489|   419k|    {
  490|   419k|        return m_has_value;
  491|   419k|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5errorEv:
 1744|   208k|    {
 1745|   208k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|   208k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   208k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|   208k|        return this->get_unexpected().error();
 1747|   208k|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   208k|    {
  473|   208k|        return m_unexpected;
  474|   208k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1614|  57.2k|        : base(unexpect, std::move(e.error())),
 1615|  57.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  57.2k|    {
 1617|  57.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|  57.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  57.2k|          m_has_value(false)
  451|  57.2k|    {
  452|  57.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  59.9k|    {
 1315|  59.9k|    }
_ZN3scn2v46detail23make_vscan_result_rangeIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_l:
 6727|  2.61k|{
 6728|       |    if constexpr (ranges::random_access_iterator<
 6729|  2.61k|                      ranges::iterator_t<SourceRange>>) {
 6730|  2.61k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6731|       |    }
 6732|       |    else {
 6733|       |        auto it = ranges::begin(source);
 6734|       |        while (n > 0) {
 6735|       |            --n;
 6736|       |            ++it;
 6737|       |        }
 6738|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6739|       |    }
 6740|  2.61k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|  2.61k|    {
 2868|  2.61k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|  2.61k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|  2.61k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|  2.61k|    {
 2849|  2.61k|        return decay_copy(t.begin());
 2850|  2.61k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 2092|   161k|{
 2093|   161k|    return SCN_FWD(t);
  ------------------
  |  | 1057|   161k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2094|   161k|}
_ZN3scn2v46detail27make_vscan_result_range_endINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaRT_:
 6714|  2.61k|{
 6715|  2.61k|    return ranges::end(source);
 6716|  2.61k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2924|  2.61k|    {
 2925|  2.61k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|  2.61k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2926|  2.61k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2906|  2.61k|    {
 2907|  2.61k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1057|  2.61k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2908|  2.61k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3463|   805k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|   805k|    static_cast<    \
  |  | 1056|   805k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|   805k|    static_cast<    \
  |  | 1056|   805k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3464|   805k|    {
 3465|   805k|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1793|  4.73k|    {
 1794|  4.73k|        return value();
 1795|  4.73k|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1767|  4.93k|    {
 1768|  4.93k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  4.93k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  4.93k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  4.93k|        return this->get_value();
 1770|  4.93k|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  455|  4.93k|    {
  456|  4.93k|        return m_value;
  457|  4.93k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1568|  2.61k|        : base(std::in_place, std::forward<U>(val)),
 1569|  2.61k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  2.61k|    {
 1571|  2.61k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|  2.61k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.61k|    {
  442|  2.61k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEcvS6_Ev:
 8797|  6.65k|    {
 8798|  6.65k|        return m_str;
 8799|  6.65k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJcEEEDaRNSt3__15tupleIJDpT0_EEE:
 6126|  6.65k|{
 6127|  6.65k|    detail::check_scan_arg_types<Args...>();
 6128|  6.65k|    return detail::scan_arg_store<Context, Args...>(values);
 6129|  6.65k|}
_ZN3scn2v46detail20check_scan_arg_typesIJcEEEbv:
 5841|  6.65k|{
 5842|  6.65k|    constexpr bool default_constructible_constraint =
 5843|  6.65k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5844|  6.65k|    static_assert(default_constructible_constraint,
 5845|  6.65k|                  "Scan argument types must be default constructible");
 5846|       |
 5847|  6.65k|    constexpr bool destructible_constraint =
 5848|  6.65k|        std::conjunction_v<std::is_destructible<Args>...>;
 5849|  6.65k|    static_assert(destructible_constraint,
 5850|  6.65k|                  "Scan argument types must be Destructible");
 5851|       |
 5852|  6.65k|    constexpr bool non_reference_constraint =
 5853|  6.65k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5854|  6.65k|    static_assert(non_reference_constraint,
 5855|  6.65k|                  "Scan argument types must not be references");
 5856|       |
 5857|  6.65k|    constexpr bool movable_constraint =
 5858|  6.65k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5859|  6.65k|    static_assert(movable_constraint,
 5860|  6.65k|                  "Scan argument types must be move constructible");
 5861|       |
 5862|  6.65k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5862:12): [Folded - Ignored]
  |  Branch (5862:48): [Folded - Ignored]
  ------------------
 5863|  6.65k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5863:12): [Folded - Ignored]
  |  Branch (5863:40): [Folded - Ignored]
  ------------------
 5864|  6.65k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJcEEC2ERNSt3__15tupleIJcEEE:
 6102|  6.65k|        : args(std::apply(make_argptrs<Args...>, args))
 6103|  6.65k|    {
 6104|  6.65k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJcEE12make_argptrsIJcEEENSt3__15arrayIPvLm1EEEDpRT_:
 6111|  6.65k|    {
 6112|  6.65k|        return {detail::make_arg<
 6113|  6.65k|            kind, Context,
 6114|  6.65k|            mapped_type_constant<remove_cvref_t<A>,
 6115|  6.65k|                                 typename Context::char_type>::value>(args)...};
 6116|  6.65k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE14EcvEEPvRT2_:
 5891|  6.65k|{
 5892|  6.65k|    return make_value<Context>(value).ref_value;
 5893|  6.65k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEcEEDaRT0_:
 5826|  6.65k|{
 5827|  6.65k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5828|       |
 5829|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5830|  6.65k|                                  needs_context_tag>) {
 5831|  6.65k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1057|  6.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5832|       |    }
 5833|       |    else {
 5834|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5835|       |            value, context_tag<Context>{}));
 5836|       |    }
 5837|  6.65k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERc:
 5695|  6.65k|    {
 5696|       |        if constexpr (std::is_same_v<char_type, char> &&
 5697|  6.65k|                      !is_type_disabled<char_type>) {
 5698|  6.65k|            return val;
 5699|       |        }
 5700|       |        else if constexpr (is_type_disabled<char_type>) {
 5701|       |            return unscannable_disabled{val};
 5702|       |        }
 5703|       |        else {
 5704|       |            SCN_UNUSED(val);
 5705|       |            return unscannable_char{};
 5706|       |        }
 5707|  6.65k|    }
_ZN3scn2v46detail15make_value_implIcRcEEDaOT0_:
 5795|  6.65k|{
 5796|  6.65k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5797|  6.65k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5798|       |
 5799|  6.65k|    constexpr bool scannable_char =
 5800|  6.65k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5801|  6.65k|    static_assert(scannable_char,
 5802|  6.65k|                  "Cannot scan an argument of an unsupported character "
 5803|  6.65k|                  "type (i.e. char from a wchar_t source)");
 5804|       |
 5805|  6.65k|    constexpr bool scannable_const =
 5806|  6.65k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5807|  6.65k|    static_assert(scannable_const, "Cannot scan a const argument");
 5808|       |
 5809|  6.65k|    constexpr bool scannable_disabled =
 5810|  6.65k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5811|  6.65k|    static_assert(scannable_disabled,
 5812|  6.65k|                  "Cannot scan an argument that has been disabled by "
 5813|  6.65k|                  "flag (SCN_DISABLE_TYPE_*)");
 5814|       |
 5815|  6.65k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5816|  6.65k|    static_assert(
 5817|  6.65k|        scannable,
 5818|  6.65k|        "Cannot scan an argument. To make a type T scannable, provide "
 5819|  6.65k|        "a scn::scanner<T, CharT> specialization.");
 5820|       |
 5821|  6.65k|    return arg_value{arg};
 5822|  6.65k|}
_ZN3scn2v46detail9arg_valueC2IcEERT_:
 5603|  6.65k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5604|  6.65k|    {
 5605|  6.65k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEptEv:
 1813|  6.93k|    {
 1814|  6.93k|        return &value();
 1815|  6.93k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1767|  6.93k|    {
 1768|  6.93k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  6.93k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  6.93k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  6.93k|        return this->get_value();
 1770|  6.93k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJcEE6valuesEv:
 6406|  6.65k|    {
 6407|  6.65k|        return m_values;
 6408|  6.65k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJcEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6152|  6.65k|        : basic_scan_args(store.desc, store.args.data())
 6153|  6.65k|    {
 6154|  6.65k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2EmPKPv:
 6204|  59.9k|        : m_desc(desc), m_builtin_values(data)
 6205|  59.9k|    {
 6206|  59.9k|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 8458|  59.9k|{
 8459|  59.9k|    return s;
 8460|  59.9k|}
_ZN3scn2v46detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 8435|  59.9k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8792|  6.65k|        : m_str(r.str)
 8793|  6.65k|    {
 8794|  6.65k|    }
_ZN3scn2v44scanIJcENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 9829|  3.32k|{
 9830|  3.32k|    auto result = make_scan_result<Source, Args...>();
 9831|  3.32k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  3.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9832|  3.32k|                                   make_scan_args(result->values())));
 9833|  3.32k|    return result;
 9834|  3.32k|}
_ZN3scn2v45vscanIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS2_6localeEvEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEERKT0_OSB_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextINSG_16buffer_range_tagEcEEEE:
 9540|  29.9k|{
 9541|  29.9k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  | 1057|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9542|  29.9k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS1_22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT_OSC_NS5_IT1_NS6_ISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESR_EEEE:
 9475|  29.9k|{
 9476|  29.9k|#if !SCN_DISABLE_LOCALE
 9477|  29.9k|    auto buffer = detail::make_scan_buffer(range);
 9478|       |
 9479|  29.9k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9480|  29.9k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9481|  29.9k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9482|       |
 9483|  29.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  986|  29.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 28.6k, False: 1.30k]
  |  |  ------------------
  ------------------
 9484|  28.6k|        return unexpected(result.error());
 9485|  28.6k|    }
 9486|  1.30k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1057|  1.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9487|       |#else
 9488|       |    static_assert(dependent_false<Locale>::value,
 9489|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9490|       |
 9491|       |    return {};
 9492|       |#endif
 9493|  29.9k|}
_ZN3scn2v44scanIJiERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 9760|  3.32k|{
 9761|  3.32k|    auto result = make_scan_result<Source, Args...>();
 9762|  3.32k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  3.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9763|  3.32k|                                   make_scan_args(result->values())));
 9764|  3.32k|    return result;
 9765|  3.32k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEEDav:
 9716|  6.65k|{
 9717|  6.65k|    return scan_result_type<Source, Args...>();
 9718|  6.65k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2Ev:
 1550|  6.65k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2Ev:
  426|  6.65k|        : m_value(T{}), m_has_value(true)
  427|  6.65k|    {
  428|  6.65k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEC2Ev:
 6623|  6.65k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJiEEC2Ev:
 6397|  19.9k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9701|  6.65k|{
 9702|  6.65k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|  6.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 6.65k, False: 0]
  |  |  ------------------
  ------------------
 9703|  6.65k|        out = unexpected(in.error());
 9704|  6.65k|    }
 9705|      0|    else {
 9706|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|      0|    static_cast<    \
  |  | 1056|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|      0|    }
 9708|  6.65k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1614|  6.65k|        : base(unexpect, std::move(e.error())),
 1615|  6.65k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  6.65k|    {
 1617|  6.65k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  6.65k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  6.65k|          m_has_value(false)
  451|  6.65k|    {
  452|  6.65k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  6.65k|    {
 1315|  6.65k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEaSEOSC_:
 1555|  6.65k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorEvEaSEOSD_:
  901|  6.65k|    {
  902|  6.65k|        assign_common(std::move(other));
  903|  6.65k|        return *this;
  904|  6.65k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  948|  6.65k|    {
  949|  6.65k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 6.65k, False: 0]
  ------------------
  950|  6.65k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 6.65k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  6.65k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  6.65k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  19.9k|    {
  490|  19.9k|        return m_has_value;
  491|  19.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  6.65k|    {
  456|  6.65k|        return m_value;
  457|  6.65k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1044|  6.65k|    {
 1045|  6.65k|        this->destroy_value();
 1046|  6.65k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  6.65k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  6.65k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  6.65k|    {
  504|  6.65k|        scn::detail::construct_at(&get_unexpected(),
  505|  6.65k|                                  std::forward<Args>(args)...);
  506|  6.65k|        m_has_value = false;
  507|  6.65k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  6.65k|    {
  473|  6.65k|        return m_unexpected;
  474|  6.65k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  6.65k|    {
  481|  6.65k|        return std::move(m_unexpected);
  482|  6.65k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEcvS6_Ev:
 8797|  6.65k|    {
 8798|  6.65k|        return m_str;
 8799|  6.65k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJiEEEDaRNSt3__15tupleIJDpT0_EEE:
 6126|  6.65k|{
 6127|  6.65k|    detail::check_scan_arg_types<Args...>();
 6128|  6.65k|    return detail::scan_arg_store<Context, Args...>(values);
 6129|  6.65k|}
_ZN3scn2v46detail20check_scan_arg_typesIJiEEEbv:
 5841|  19.9k|{
 5842|  19.9k|    constexpr bool default_constructible_constraint =
 5843|  19.9k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5844|  19.9k|    static_assert(default_constructible_constraint,
 5845|  19.9k|                  "Scan argument types must be default constructible");
 5846|       |
 5847|  19.9k|    constexpr bool destructible_constraint =
 5848|  19.9k|        std::conjunction_v<std::is_destructible<Args>...>;
 5849|  19.9k|    static_assert(destructible_constraint,
 5850|  19.9k|                  "Scan argument types must be Destructible");
 5851|       |
 5852|  19.9k|    constexpr bool non_reference_constraint =
 5853|  19.9k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5854|  19.9k|    static_assert(non_reference_constraint,
 5855|  19.9k|                  "Scan argument types must not be references");
 5856|       |
 5857|  19.9k|    constexpr bool movable_constraint =
 5858|  19.9k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5859|  19.9k|    static_assert(movable_constraint,
 5860|  19.9k|                  "Scan argument types must be move constructible");
 5861|       |
 5862|  19.9k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5862:12): [Folded - Ignored]
  |  Branch (5862:48): [Folded - Ignored]
  ------------------
 5863|  19.9k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5863:12): [Folded - Ignored]
  |  Branch (5863:40): [Folded - Ignored]
  ------------------
 5864|  19.9k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJiEEC2ERNSt3__15tupleIJiEEE:
 6102|  6.65k|        : args(std::apply(make_argptrs<Args...>, args))
 6103|  6.65k|    {
 6104|  6.65k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 6111|  6.65k|    {
 6112|  6.65k|        return {detail::make_arg<
 6113|  6.65k|            kind, Context,
 6114|  6.65k|            mapped_type_constant<remove_cvref_t<A>,
 6115|  6.65k|                                 typename Context::char_type>::value>(args)...};
 6116|  6.65k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE3EivEEPvRT2_:
 5891|  6.65k|{
 5892|  6.65k|    return make_value<Context>(value).ref_value;
 5893|  6.65k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEiEEDaRT0_:
 5826|  6.65k|{
 5827|  6.65k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5828|       |
 5829|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5830|  6.65k|                                  needs_context_tag>) {
 5831|  6.65k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1057|  6.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5832|       |    }
 5833|       |    else {
 5834|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5835|       |            value, context_tag<Context>{}));
 5836|       |    }
 5837|  6.65k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERi:
 5660|  6.65k|    {                                                                        \
 5661|  6.65k|        return val;                                                          \
 5662|  6.65k|    }
_ZN3scn2v46detail15make_value_implIiRiEEDaOT0_:
 5795|  19.9k|{
 5796|  19.9k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5797|  19.9k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5798|       |
 5799|  19.9k|    constexpr bool scannable_char =
 5800|  19.9k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5801|  19.9k|    static_assert(scannable_char,
 5802|  19.9k|                  "Cannot scan an argument of an unsupported character "
 5803|  19.9k|                  "type (i.e. char from a wchar_t source)");
 5804|       |
 5805|  19.9k|    constexpr bool scannable_const =
 5806|  19.9k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5807|  19.9k|    static_assert(scannable_const, "Cannot scan a const argument");
 5808|       |
 5809|  19.9k|    constexpr bool scannable_disabled =
 5810|  19.9k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5811|  19.9k|    static_assert(scannable_disabled,
 5812|  19.9k|                  "Cannot scan an argument that has been disabled by "
 5813|  19.9k|                  "flag (SCN_DISABLE_TYPE_*)");
 5814|       |
 5815|  19.9k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5816|  19.9k|    static_assert(
 5817|  19.9k|        scannable,
 5818|  19.9k|        "Cannot scan an argument. To make a type T scannable, provide "
 5819|  19.9k|        "a scn::scanner<T, CharT> specialization.");
 5820|       |
 5821|  19.9k|    return arg_value{arg};
 5822|  19.9k|}
_ZN3scn2v46detail9arg_valueC2IiEERT_:
 5603|  19.9k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5604|  19.9k|    {
 5605|  19.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEptEv:
 1813|  6.65k|    {
 1814|  6.65k|        return &value();
 1815|  6.65k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1767|  6.65k|    {
 1768|  6.65k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  6.65k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  6.65k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  6.65k|        return this->get_value();
 1770|  6.65k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJiEE6valuesEv:
 6406|  19.9k|    {
 6407|  19.9k|        return m_values;
 6408|  19.9k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJiEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6152|  6.65k|        : basic_scan_args(store.desc, store.args.data())
 6153|  6.65k|    {
 6154|  6.65k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8792|  6.65k|        : m_str(r.str)
 8793|  6.65k|    {
 8794|  6.65k|    }
_ZN3scn2v44scanIJiENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 9829|  3.32k|{
 9830|  3.32k|    auto result = make_scan_result<Source, Args...>();
 9831|  3.32k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  3.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9832|  3.32k|                                   make_scan_args(result->values())));
 9833|  3.32k|    return result;
 9834|  3.32k|}
_ZN3scn2v44scanIJjERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 9760|  3.32k|{
 9761|  3.32k|    auto result = make_scan_result<Source, Args...>();
 9762|  3.32k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  3.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9763|  3.32k|                                   make_scan_args(result->values())));
 9764|  3.32k|    return result;
 9765|  3.32k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEEDav:
 9716|  6.65k|{
 9717|  6.65k|    return scan_result_type<Source, Args...>();
 9718|  6.65k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2Ev:
 1550|  6.65k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2Ev:
  426|  6.65k|        : m_value(T{}), m_has_value(true)
  427|  6.65k|    {
  428|  6.65k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEC2Ev:
 6623|  6.65k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJjEEC2Ev:
 6397|  19.9k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9701|  6.65k|{
 9702|  6.65k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|  6.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 6.65k, False: 0]
  |  |  ------------------
  ------------------
 9703|  6.65k|        out = unexpected(in.error());
 9704|  6.65k|    }
 9705|      0|    else {
 9706|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|      0|    static_cast<    \
  |  | 1056|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|      0|    }
 9708|  6.65k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1614|  6.65k|        : base(unexpect, std::move(e.error())),
 1615|  6.65k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  6.65k|    {
 1617|  6.65k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  6.65k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  6.65k|          m_has_value(false)
  451|  6.65k|    {
  452|  6.65k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  6.65k|    {
 1315|  6.65k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEaSEOSC_:
 1555|  6.65k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorEvEaSEOSD_:
  901|  6.65k|    {
  902|  6.65k|        assign_common(std::move(other));
  903|  6.65k|        return *this;
  904|  6.65k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  948|  6.65k|    {
  949|  6.65k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 6.65k, False: 0]
  ------------------
  950|  6.65k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 6.65k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  6.65k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  6.65k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  19.9k|    {
  490|  19.9k|        return m_has_value;
  491|  19.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  6.65k|    {
  456|  6.65k|        return m_value;
  457|  6.65k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1044|  6.65k|    {
 1045|  6.65k|        this->destroy_value();
 1046|  6.65k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  6.65k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  6.65k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  6.65k|    {
  504|  6.65k|        scn::detail::construct_at(&get_unexpected(),
  505|  6.65k|                                  std::forward<Args>(args)...);
  506|  6.65k|        m_has_value = false;
  507|  6.65k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  6.65k|    {
  473|  6.65k|        return m_unexpected;
  474|  6.65k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  6.65k|    {
  481|  6.65k|        return std::move(m_unexpected);
  482|  6.65k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEcvS6_Ev:
 8797|  6.65k|    {
 8798|  6.65k|        return m_str;
 8799|  6.65k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJjEEEDaRNSt3__15tupleIJDpT0_EEE:
 6126|  6.65k|{
 6127|  6.65k|    detail::check_scan_arg_types<Args...>();
 6128|  6.65k|    return detail::scan_arg_store<Context, Args...>(values);
 6129|  6.65k|}
_ZN3scn2v46detail20check_scan_arg_typesIJjEEEbv:
 5841|  19.9k|{
 5842|  19.9k|    constexpr bool default_constructible_constraint =
 5843|  19.9k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5844|  19.9k|    static_assert(default_constructible_constraint,
 5845|  19.9k|                  "Scan argument types must be default constructible");
 5846|       |
 5847|  19.9k|    constexpr bool destructible_constraint =
 5848|  19.9k|        std::conjunction_v<std::is_destructible<Args>...>;
 5849|  19.9k|    static_assert(destructible_constraint,
 5850|  19.9k|                  "Scan argument types must be Destructible");
 5851|       |
 5852|  19.9k|    constexpr bool non_reference_constraint =
 5853|  19.9k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5854|  19.9k|    static_assert(non_reference_constraint,
 5855|  19.9k|                  "Scan argument types must not be references");
 5856|       |
 5857|  19.9k|    constexpr bool movable_constraint =
 5858|  19.9k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5859|  19.9k|    static_assert(movable_constraint,
 5860|  19.9k|                  "Scan argument types must be move constructible");
 5861|       |
 5862|  19.9k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5862:12): [Folded - Ignored]
  |  Branch (5862:48): [Folded - Ignored]
  ------------------
 5863|  19.9k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5863:12): [Folded - Ignored]
  |  Branch (5863:40): [Folded - Ignored]
  ------------------
 5864|  19.9k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJjEEC2ERNSt3__15tupleIJjEEE:
 6102|  6.65k|        : args(std::apply(make_argptrs<Args...>, args))
 6103|  6.65k|    {
 6104|  6.65k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 6111|  6.65k|    {
 6112|  6.65k|        return {detail::make_arg<
 6113|  6.65k|            kind, Context,
 6114|  6.65k|            mapped_type_constant<remove_cvref_t<A>,
 6115|  6.65k|                                 typename Context::char_type>::value>(args)...};
 6116|  6.65k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE9EjvEEPvRT2_:
 5891|  6.65k|{
 5892|  6.65k|    return make_value<Context>(value).ref_value;
 5893|  6.65k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEjEEDaRT0_:
 5826|  6.65k|{
 5827|  6.65k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5828|       |
 5829|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5830|  6.65k|                                  needs_context_tag>) {
 5831|  6.65k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1057|  6.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5832|       |    }
 5833|       |    else {
 5834|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5835|       |            value, context_tag<Context>{}));
 5836|       |    }
 5837|  6.65k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERj:
 5660|  6.65k|    {                                                                        \
 5661|  6.65k|        return val;                                                          \
 5662|  6.65k|    }
_ZN3scn2v46detail15make_value_implIjRjEEDaOT0_:
 5795|  19.9k|{
 5796|  19.9k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5797|  19.9k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5798|       |
 5799|  19.9k|    constexpr bool scannable_char =
 5800|  19.9k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5801|  19.9k|    static_assert(scannable_char,
 5802|  19.9k|                  "Cannot scan an argument of an unsupported character "
 5803|  19.9k|                  "type (i.e. char from a wchar_t source)");
 5804|       |
 5805|  19.9k|    constexpr bool scannable_const =
 5806|  19.9k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5807|  19.9k|    static_assert(scannable_const, "Cannot scan a const argument");
 5808|       |
 5809|  19.9k|    constexpr bool scannable_disabled =
 5810|  19.9k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5811|  19.9k|    static_assert(scannable_disabled,
 5812|  19.9k|                  "Cannot scan an argument that has been disabled by "
 5813|  19.9k|                  "flag (SCN_DISABLE_TYPE_*)");
 5814|       |
 5815|  19.9k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5816|  19.9k|    static_assert(
 5817|  19.9k|        scannable,
 5818|  19.9k|        "Cannot scan an argument. To make a type T scannable, provide "
 5819|  19.9k|        "a scn::scanner<T, CharT> specialization.");
 5820|       |
 5821|  19.9k|    return arg_value{arg};
 5822|  19.9k|}
_ZN3scn2v46detail9arg_valueC2IjEERT_:
 5603|  19.9k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5604|  19.9k|    {
 5605|  19.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEptEv:
 1813|  6.65k|    {
 1814|  6.65k|        return &value();
 1815|  6.65k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1767|  6.65k|    {
 1768|  6.65k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  6.65k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  6.65k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  6.65k|        return this->get_value();
 1770|  6.65k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJjEE6valuesEv:
 6406|  19.9k|    {
 6407|  19.9k|        return m_values;
 6408|  19.9k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJjEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6152|  6.65k|        : basic_scan_args(store.desc, store.args.data())
 6153|  6.65k|    {
 6154|  6.65k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8792|  6.65k|        : m_str(r.str)
 8793|  6.65k|    {
 8794|  6.65k|    }
_ZN3scn2v44scanIJjENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 9829|  3.32k|{
 9830|  3.32k|    auto result = make_scan_result<Source, Args...>();
 9831|  3.32k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  3.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9832|  3.32k|                                   make_scan_args(result->values())));
 9833|  3.32k|    return result;
 9834|  3.32k|}
_ZN3scn2v44scanIJdERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 9760|  3.32k|{
 9761|  3.32k|    auto result = make_scan_result<Source, Args...>();
 9762|  3.32k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  3.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9763|  3.32k|                                   make_scan_args(result->values())));
 9764|  3.32k|    return result;
 9765|  3.32k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEEDav:
 9716|  6.65k|{
 9717|  6.65k|    return scan_result_type<Source, Args...>();
 9718|  6.65k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2Ev:
 1550|  6.65k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  426|  6.65k|        : m_value(T{}), m_has_value(true)
  427|  6.65k|    {
  428|  6.65k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2Ev:
 6623|  6.65k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJdEEC2Ev:
 6397|  19.9k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9701|  6.65k|{
 9702|  6.65k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|  6.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 6.65k, False: 0]
  |  |  ------------------
  ------------------
 9703|  6.65k|        out = unexpected(in.error());
 9704|  6.65k|    }
 9705|      0|    else {
 9706|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|      0|    static_cast<    \
  |  | 1056|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|      0|    }
 9708|  6.65k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1614|  6.65k|        : base(unexpect, std::move(e.error())),
 1615|  6.65k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  6.65k|    {
 1617|  6.65k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  6.65k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  6.65k|          m_has_value(false)
  451|  6.65k|    {
  452|  6.65k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  6.65k|    {
 1315|  6.65k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEaSEOSC_:
 1555|  6.65k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorEvEaSEOSD_:
  901|  6.65k|    {
  902|  6.65k|        assign_common(std::move(other));
  903|  6.65k|        return *this;
  904|  6.65k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  948|  6.65k|    {
  949|  6.65k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 6.65k, False: 0]
  ------------------
  950|  6.65k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 6.65k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  6.65k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  6.65k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  19.9k|    {
  490|  19.9k|        return m_has_value;
  491|  19.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  6.65k|    {
  456|  6.65k|        return m_value;
  457|  6.65k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1044|  6.65k|    {
 1045|  6.65k|        this->destroy_value();
 1046|  6.65k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  6.65k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  6.65k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  6.65k|    {
  504|  6.65k|        scn::detail::construct_at(&get_unexpected(),
  505|  6.65k|                                  std::forward<Args>(args)...);
  506|  6.65k|        m_has_value = false;
  507|  6.65k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  6.65k|    {
  473|  6.65k|        return m_unexpected;
  474|  6.65k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  6.65k|    {
  481|  6.65k|        return std::move(m_unexpected);
  482|  6.65k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEcvS6_Ev:
 8797|  6.65k|    {
 8798|  6.65k|        return m_str;
 8799|  6.65k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJdEEEDaRNSt3__15tupleIJDpT0_EEE:
 6126|  6.65k|{
 6127|  6.65k|    detail::check_scan_arg_types<Args...>();
 6128|  6.65k|    return detail::scan_arg_store<Context, Args...>(values);
 6129|  6.65k|}
_ZN3scn2v46detail20check_scan_arg_typesIJdEEEbv:
 5841|  19.9k|{
 5842|  19.9k|    constexpr bool default_constructible_constraint =
 5843|  19.9k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5844|  19.9k|    static_assert(default_constructible_constraint,
 5845|  19.9k|                  "Scan argument types must be default constructible");
 5846|       |
 5847|  19.9k|    constexpr bool destructible_constraint =
 5848|  19.9k|        std::conjunction_v<std::is_destructible<Args>...>;
 5849|  19.9k|    static_assert(destructible_constraint,
 5850|  19.9k|                  "Scan argument types must be Destructible");
 5851|       |
 5852|  19.9k|    constexpr bool non_reference_constraint =
 5853|  19.9k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5854|  19.9k|    static_assert(non_reference_constraint,
 5855|  19.9k|                  "Scan argument types must not be references");
 5856|       |
 5857|  19.9k|    constexpr bool movable_constraint =
 5858|  19.9k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5859|  19.9k|    static_assert(movable_constraint,
 5860|  19.9k|                  "Scan argument types must be move constructible");
 5861|       |
 5862|  19.9k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5862:12): [Folded - Ignored]
  |  Branch (5862:48): [Folded - Ignored]
  ------------------
 5863|  19.9k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5863:12): [Folded - Ignored]
  |  Branch (5863:40): [Folded - Ignored]
  ------------------
 5864|  19.9k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJdEEC2ERNSt3__15tupleIJdEEE:
 6102|  6.65k|        : args(std::apply(make_argptrs<Args...>, args))
 6103|  6.65k|    {
 6104|  6.65k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 6111|  6.65k|    {
 6112|  6.65k|        return {detail::make_arg<
 6113|  6.65k|            kind, Context,
 6114|  6.65k|            mapped_type_constant<remove_cvref_t<A>,
 6115|  6.65k|                                 typename Context::char_type>::value>(args)...};
 6116|  6.65k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE19EdvEEPvRT2_:
 5891|  6.65k|{
 5892|  6.65k|    return make_value<Context>(value).ref_value;
 5893|  6.65k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEdEEDaRT0_:
 5826|  6.65k|{
 5827|  6.65k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5828|       |
 5829|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5830|  6.65k|                                  needs_context_tag>) {
 5831|  6.65k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1057|  6.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5832|       |    }
 5833|       |    else {
 5834|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5835|       |            value, context_tag<Context>{}));
 5836|       |    }
 5837|  6.65k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERd:
 5660|  6.65k|    {                                                                        \
 5661|  6.65k|        return val;                                                          \
 5662|  6.65k|    }
_ZN3scn2v46detail15make_value_implIdRdEEDaOT0_:
 5795|  19.9k|{
 5796|  19.9k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5797|  19.9k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5798|       |
 5799|  19.9k|    constexpr bool scannable_char =
 5800|  19.9k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5801|  19.9k|    static_assert(scannable_char,
 5802|  19.9k|                  "Cannot scan an argument of an unsupported character "
 5803|  19.9k|                  "type (i.e. char from a wchar_t source)");
 5804|       |
 5805|  19.9k|    constexpr bool scannable_const =
 5806|  19.9k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5807|  19.9k|    static_assert(scannable_const, "Cannot scan a const argument");
 5808|       |
 5809|  19.9k|    constexpr bool scannable_disabled =
 5810|  19.9k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5811|  19.9k|    static_assert(scannable_disabled,
 5812|  19.9k|                  "Cannot scan an argument that has been disabled by "
 5813|  19.9k|                  "flag (SCN_DISABLE_TYPE_*)");
 5814|       |
 5815|  19.9k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5816|  19.9k|    static_assert(
 5817|  19.9k|        scannable,
 5818|  19.9k|        "Cannot scan an argument. To make a type T scannable, provide "
 5819|  19.9k|        "a scn::scanner<T, CharT> specialization.");
 5820|       |
 5821|  19.9k|    return arg_value{arg};
 5822|  19.9k|}
_ZN3scn2v46detail9arg_valueC2IdEERT_:
 5603|  19.9k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5604|  19.9k|    {
 5605|  19.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEptEv:
 1813|  6.65k|    {
 1814|  6.65k|        return &value();
 1815|  6.65k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1767|  6.65k|    {
 1768|  6.65k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  6.65k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  6.65k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  6.65k|        return this->get_value();
 1770|  6.65k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJdEE6valuesEv:
 6406|  19.9k|    {
 6407|  19.9k|        return m_values;
 6408|  19.9k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJdEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6152|  6.65k|        : basic_scan_args(store.desc, store.args.data())
 6153|  6.65k|    {
 6154|  6.65k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8792|  6.65k|        : m_str(r.str)
 8793|  6.65k|    {
 8794|  6.65k|    }
_ZN3scn2v44scanIJdENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 9829|  3.32k|{
 9830|  3.32k|    auto result = make_scan_result<Source, Args...>();
 9831|  3.32k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  3.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9832|  3.32k|                                   make_scan_args(result->values())));
 9833|  3.32k|    return result;
 9834|  3.32k|}
_ZN3scn2v44scanIJbERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 9760|  3.32k|{
 9761|  3.32k|    auto result = make_scan_result<Source, Args...>();
 9762|  3.32k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  3.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9763|  3.32k|                                   make_scan_args(result->values())));
 9764|  3.32k|    return result;
 9765|  3.32k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEEDav:
 9716|  6.65k|{
 9717|  6.65k|    return scan_result_type<Source, Args...>();
 9718|  6.65k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEEC2Ev:
 1550|  6.65k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2Ev:
  426|  6.65k|        : m_value(T{}), m_has_value(true)
  427|  6.65k|    {
  428|  6.65k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJbEEC2Ev:
 6623|  6.65k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJbEEC2Ev:
 6397|  19.9k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9701|  6.65k|{
 9702|  6.65k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|  6.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 6.65k, False: 0]
  |  |  ------------------
  ------------------
 9703|  6.65k|        out = unexpected(in.error());
 9704|  6.65k|    }
 9705|      0|    else {
 9706|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|      0|    static_cast<    \
  |  | 1056|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|      0|    }
 9708|  6.65k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1614|  6.65k|        : base(unexpect, std::move(e.error())),
 1615|  6.65k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  6.65k|    {
 1617|  6.65k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  6.65k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  6.65k|          m_has_value(false)
  451|  6.65k|    {
  452|  6.65k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  6.65k|    {
 1315|  6.65k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEEaSEOSC_:
 1555|  6.65k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorEvEaSEOSD_:
  901|  6.65k|    {
  902|  6.65k|        assign_common(std::move(other));
  903|  6.65k|        return *this;
  904|  6.65k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  948|  6.65k|    {
  949|  6.65k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 6.65k, False: 0]
  ------------------
  950|  6.65k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 6.65k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  6.65k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  6.65k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  19.9k|    {
  490|  19.9k|        return m_has_value;
  491|  19.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  6.65k|    {
  456|  6.65k|        return m_value;
  457|  6.65k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1044|  6.65k|    {
 1045|  6.65k|        this->destroy_value();
 1046|  6.65k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  6.65k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  6.65k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  6.65k|    {
  504|  6.65k|        scn::detail::construct_at(&get_unexpected(),
  505|  6.65k|                                  std::forward<Args>(args)...);
  506|  6.65k|        m_has_value = false;
  507|  6.65k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  6.65k|    {
  473|  6.65k|        return m_unexpected;
  474|  6.65k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  6.65k|    {
  481|  6.65k|        return std::move(m_unexpected);
  482|  6.65k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEcvS6_Ev:
 8797|  6.65k|    {
 8798|  6.65k|        return m_str;
 8799|  6.65k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJbEEEDaRNSt3__15tupleIJDpT0_EEE:
 6126|  6.65k|{
 6127|  6.65k|    detail::check_scan_arg_types<Args...>();
 6128|  6.65k|    return detail::scan_arg_store<Context, Args...>(values);
 6129|  6.65k|}
_ZN3scn2v46detail20check_scan_arg_typesIJbEEEbv:
 5841|  19.9k|{
 5842|  19.9k|    constexpr bool default_constructible_constraint =
 5843|  19.9k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5844|  19.9k|    static_assert(default_constructible_constraint,
 5845|  19.9k|                  "Scan argument types must be default constructible");
 5846|       |
 5847|  19.9k|    constexpr bool destructible_constraint =
 5848|  19.9k|        std::conjunction_v<std::is_destructible<Args>...>;
 5849|  19.9k|    static_assert(destructible_constraint,
 5850|  19.9k|                  "Scan argument types must be Destructible");
 5851|       |
 5852|  19.9k|    constexpr bool non_reference_constraint =
 5853|  19.9k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5854|  19.9k|    static_assert(non_reference_constraint,
 5855|  19.9k|                  "Scan argument types must not be references");
 5856|       |
 5857|  19.9k|    constexpr bool movable_constraint =
 5858|  19.9k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5859|  19.9k|    static_assert(movable_constraint,
 5860|  19.9k|                  "Scan argument types must be move constructible");
 5861|       |
 5862|  19.9k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5862:12): [Folded - Ignored]
  |  Branch (5862:48): [Folded - Ignored]
  ------------------
 5863|  19.9k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5863:12): [Folded - Ignored]
  |  Branch (5863:40): [Folded - Ignored]
  ------------------
 5864|  19.9k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJbEEC2ERNSt3__15tupleIJbEEE:
 6102|  6.65k|        : args(std::apply(make_argptrs<Args...>, args))
 6103|  6.65k|    {
 6104|  6.65k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJbEE12make_argptrsIJbEEENSt3__15arrayIPvLm1EEEDpRT_:
 6111|  6.65k|    {
 6112|  6.65k|        return {detail::make_arg<
 6113|  6.65k|            kind, Context,
 6114|  6.65k|            mapped_type_constant<remove_cvref_t<A>,
 6115|  6.65k|                                 typename Context::char_type>::value>(args)...};
 6116|  6.65k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE13EbvEEPvRT2_:
 5891|  6.65k|{
 5892|  6.65k|    return make_value<Context>(value).ref_value;
 5893|  6.65k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEbEEDaRT0_:
 5826|  6.65k|{
 5827|  6.65k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5828|       |
 5829|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5830|  6.65k|                                  needs_context_tag>) {
 5831|  6.65k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1057|  6.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5832|       |    }
 5833|       |    else {
 5834|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5835|       |            value, context_tag<Context>{}));
 5836|       |    }
 5837|  6.65k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERb:
 5660|  6.65k|    {                                                                        \
 5661|  6.65k|        return val;                                                          \
 5662|  6.65k|    }
_ZN3scn2v46detail15make_value_implIbRbEEDaOT0_:
 5795|  19.9k|{
 5796|  19.9k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5797|  19.9k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5798|       |
 5799|  19.9k|    constexpr bool scannable_char =
 5800|  19.9k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5801|  19.9k|    static_assert(scannable_char,
 5802|  19.9k|                  "Cannot scan an argument of an unsupported character "
 5803|  19.9k|                  "type (i.e. char from a wchar_t source)");
 5804|       |
 5805|  19.9k|    constexpr bool scannable_const =
 5806|  19.9k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5807|  19.9k|    static_assert(scannable_const, "Cannot scan a const argument");
 5808|       |
 5809|  19.9k|    constexpr bool scannable_disabled =
 5810|  19.9k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5811|  19.9k|    static_assert(scannable_disabled,
 5812|  19.9k|                  "Cannot scan an argument that has been disabled by "
 5813|  19.9k|                  "flag (SCN_DISABLE_TYPE_*)");
 5814|       |
 5815|  19.9k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5816|  19.9k|    static_assert(
 5817|  19.9k|        scannable,
 5818|  19.9k|        "Cannot scan an argument. To make a type T scannable, provide "
 5819|  19.9k|        "a scn::scanner<T, CharT> specialization.");
 5820|       |
 5821|  19.9k|    return arg_value{arg};
 5822|  19.9k|}
_ZN3scn2v46detail9arg_valueC2IbEERT_:
 5603|  19.9k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5604|  19.9k|    {
 5605|  19.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEEptEv:
 1813|  6.65k|    {
 1814|  6.65k|        return &value();
 1815|  6.65k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1767|  6.65k|    {
 1768|  6.65k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  6.65k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  6.65k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  6.65k|        return this->get_value();
 1770|  6.65k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJbEE6valuesEv:
 6406|  19.9k|    {
 6407|  19.9k|        return m_values;
 6408|  19.9k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJbEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6152|  6.65k|        : basic_scan_args(store.desc, store.args.data())
 6153|  6.65k|    {
 6154|  6.65k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8792|  6.65k|        : m_str(r.str)
 8793|  6.65k|    {
 8794|  6.65k|    }
_ZN3scn2v44scanIJbENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 9829|  3.32k|{
 9830|  3.32k|    auto result = make_scan_result<Source, Args...>();
 9831|  3.32k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  3.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9832|  3.32k|                                   make_scan_args(result->values())));
 9833|  3.32k|    return result;
 9834|  3.32k|}
_ZN3scn2v44scanIJPvERNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
 9760|  3.32k|{
 9761|  3.32k|    auto result = make_scan_result<Source, Args...>();
 9762|  3.32k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  3.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9763|  3.32k|                                   make_scan_args(result->values())));
 9764|  3.32k|    return result;
 9765|  3.32k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEEDav:
 9716|  6.65k|{
 9717|  6.65k|    return scan_result_type<Source, Args...>();
 9718|  6.65k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEEC2Ev:
 1550|  6.65k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2Ev:
  426|  6.65k|        : m_value(T{}), m_has_value(true)
  427|  6.65k|    {
  428|  6.65k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJPvEEC2Ev:
 6623|  6.65k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJPvEEC2Ev:
 6397|  19.9k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELSA_0EEEvRNS0_13scan_expectedISG_EEONSR_ISM_EE:
 9701|  6.65k|{
 9702|  6.65k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|  6.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 6.65k, False: 0]
  |  |  ------------------
  ------------------
 9703|  6.65k|        out = unexpected(in.error());
 9704|  6.65k|    }
 9705|      0|    else {
 9706|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|      0|    static_cast<    \
  |  | 1056|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|      0|    }
 9708|  6.65k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELSA_0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSA_0EEEONS0_10unexpectedISH_EE:
 1614|  6.65k|        : base(unexpect, std::move(e.error())),
 1615|  6.65k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  6.65k|    {
 1617|  6.65k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  449|  6.65k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  6.65k|          m_has_value(false)
  451|  6.65k|    {
  452|  6.65k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  6.65k|    {
 1315|  6.65k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEEaSEOSD_:
 1555|  6.65k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorEvEaSEOSE_:
  901|  6.65k|    {
  902|  6.65k|        assign_common(std::move(other));
  903|  6.65k|        return *this;
  904|  6.65k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  948|  6.65k|    {
  949|  6.65k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 6.65k, False: 0]
  ------------------
  950|  6.65k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 6.65k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  6.65k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  6.65k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  19.9k|    {
  490|  19.9k|        return m_has_value;
  491|  19.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  6.65k|    {
  456|  6.65k|        return m_value;
  457|  6.65k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1044|  6.65k|    {
 1045|  6.65k|        this->destroy_value();
 1046|  6.65k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  6.65k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  6.65k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  503|  6.65k|    {
  504|  6.65k|        scn::detail::construct_at(&get_unexpected(),
  505|  6.65k|                                  std::forward<Args>(args)...);
  506|  6.65k|        m_has_value = false;
  507|  6.65k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  6.65k|    {
  473|  6.65k|        return m_unexpected;
  474|  6.65k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  6.65k|    {
  481|  6.65k|        return std::move(m_unexpected);
  482|  6.65k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEcvS6_Ev:
 8797|  6.65k|    {
 8798|  6.65k|        return m_str;
 8799|  6.65k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJPvEEEDaRNSt3__15tupleIJDpT0_EEE:
 6126|  6.65k|{
 6127|  6.65k|    detail::check_scan_arg_types<Args...>();
 6128|  6.65k|    return detail::scan_arg_store<Context, Args...>(values);
 6129|  6.65k|}
_ZN3scn2v46detail20check_scan_arg_typesIJPvEEEbv:
 5841|  19.9k|{
 5842|  19.9k|    constexpr bool default_constructible_constraint =
 5843|  19.9k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5844|  19.9k|    static_assert(default_constructible_constraint,
 5845|  19.9k|                  "Scan argument types must be default constructible");
 5846|       |
 5847|  19.9k|    constexpr bool destructible_constraint =
 5848|  19.9k|        std::conjunction_v<std::is_destructible<Args>...>;
 5849|  19.9k|    static_assert(destructible_constraint,
 5850|  19.9k|                  "Scan argument types must be Destructible");
 5851|       |
 5852|  19.9k|    constexpr bool non_reference_constraint =
 5853|  19.9k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5854|  19.9k|    static_assert(non_reference_constraint,
 5855|  19.9k|                  "Scan argument types must not be references");
 5856|       |
 5857|  19.9k|    constexpr bool movable_constraint =
 5858|  19.9k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5859|  19.9k|    static_assert(movable_constraint,
 5860|  19.9k|                  "Scan argument types must be move constructible");
 5861|       |
 5862|  19.9k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5862:12): [Folded - Ignored]
  |  Branch (5862:48): [Folded - Ignored]
  ------------------
 5863|  19.9k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5863:12): [Folded - Ignored]
  |  Branch (5863:40): [Folded - Ignored]
  ------------------
 5864|  19.9k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJPvEEC2ERNSt3__15tupleIJS6_EEE:
 6102|  6.65k|        : args(std::apply(make_argptrs<Args...>, args))
 6103|  6.65k|    {
 6104|  6.65k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJPvEE12make_argptrsIJS6_EEENSt3__15arrayIS6_Lm1EEEDpRT_:
 6111|  6.65k|    {
 6112|  6.65k|        return {detail::make_arg<
 6113|  6.65k|            kind, Context,
 6114|  6.65k|            mapped_type_constant<remove_cvref_t<A>,
 6115|  6.65k|                                 typename Context::char_type>::value>(args)...};
 6116|  6.65k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE17EPvvEES8_RT2_:
 5891|  6.65k|{
 5892|  6.65k|    return make_value<Context>(value).ref_value;
 5893|  6.65k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEPvEEDaRT0_:
 5826|  6.65k|{
 5827|  6.65k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5828|       |
 5829|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5830|  6.65k|                                  needs_context_tag>) {
 5831|  6.65k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1057|  6.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5832|       |    }
 5833|       |    else {
 5834|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5835|       |            value, context_tag<Context>{}));
 5836|       |    }
 5837|  6.65k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERPv:
 5660|  6.65k|    {                                                                        \
 5661|  6.65k|        return val;                                                          \
 5662|  6.65k|    }
_ZN3scn2v46detail15make_value_implIPvRS3_EEDaOT0_:
 5795|  19.9k|{
 5796|  19.9k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5797|  19.9k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5798|       |
 5799|  19.9k|    constexpr bool scannable_char =
 5800|  19.9k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5801|  19.9k|    static_assert(scannable_char,
 5802|  19.9k|                  "Cannot scan an argument of an unsupported character "
 5803|  19.9k|                  "type (i.e. char from a wchar_t source)");
 5804|       |
 5805|  19.9k|    constexpr bool scannable_const =
 5806|  19.9k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5807|  19.9k|    static_assert(scannable_const, "Cannot scan a const argument");
 5808|       |
 5809|  19.9k|    constexpr bool scannable_disabled =
 5810|  19.9k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5811|  19.9k|    static_assert(scannable_disabled,
 5812|  19.9k|                  "Cannot scan an argument that has been disabled by "
 5813|  19.9k|                  "flag (SCN_DISABLE_TYPE_*)");
 5814|       |
 5815|  19.9k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5816|  19.9k|    static_assert(
 5817|  19.9k|        scannable,
 5818|  19.9k|        "Cannot scan an argument. To make a type T scannable, provide "
 5819|  19.9k|        "a scn::scanner<T, CharT> specialization.");
 5820|       |
 5821|  19.9k|    return arg_value{arg};
 5822|  19.9k|}
_ZN3scn2v46detail9arg_valueC2IPvEERT_:
 5603|  19.9k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5604|  19.9k|    {
 5605|  19.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEEptEv:
 1813|  6.65k|    {
 1814|  6.65k|        return &value();
 1815|  6.65k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELSA_0EEERSH_v:
 1767|  6.65k|    {
 1768|  6.65k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  6.65k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  6.65k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  6.65k|        return this->get_value();
 1770|  6.65k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJPvEE6valuesEv:
 6406|  19.9k|    {
 6407|  19.9k|        return m_values;
 6408|  19.9k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJPvEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6152|  6.65k|        : basic_scan_args(store.desc, store.args.data())
 6153|  6.65k|    {
 6154|  6.65k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8792|  6.65k|        : m_str(r.str)
 8793|  6.65k|    {
 8794|  6.65k|    }
_ZN3scn2v44scanIJPvENSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
 9829|  3.32k|{
 9830|  3.32k|    auto result = make_scan_result<Source, Args...>();
 9831|  3.32k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  3.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9832|  3.32k|                                   make_scan_args(result->values())));
 9833|  3.32k|    return result;
 9834|  3.32k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEERNS2_17basic_string_viewIcS5_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEEOSF_NS0_24basic_scan_format_stringIcNSK_13type_identityISF_E4typeEJDpNSW_ISQ_E4typeEEEE:
 9760|  3.32k|{
 9761|  3.32k|    auto result = make_scan_result<Source, Args...>();
 9762|  3.32k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  3.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9763|  3.32k|                                   make_scan_args(result->values())));
 9764|  3.32k|    return result;
 9765|  3.32k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEEDav:
 9716|  6.65k|{
 9717|  6.65k|    return scan_result_type<Source, Args...>();
 9718|  6.65k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2Ev:
 1550|  6.65k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2Ev:
  611|  6.65k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  6.65k|    {
  613|  6.65k|        construct();
  614|  6.65k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  6.65k|    {
  694|  6.65k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  6.65k|        m_has_value = true;
  696|  6.65k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJEEEPT_SK_DpOT0_:
  395|  6.65k|{
  396|  6.65k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  6.65k|        T(std::forward<Args>(args)...);
  398|  6.65k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2Ev:
 6623|  6.65k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEC2Ev:
 6397|  19.9k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|  20.7k|    {
  718|  20.7k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1021|  20.7k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|  20.7k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9701|  6.65k|{
 9702|  6.65k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|  6.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 5.87k, False: 778]
  |  |  ------------------
  ------------------
 9703|  5.87k|        out = unexpected(in.error());
 9704|  5.87k|    }
 9705|    778|    else {
 9706|    778|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|    778|    static_cast<    \
  |  | 1056|    778|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|    778|    }
 9708|  6.65k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1614|  5.87k|        : base(unexpect, std::move(e.error())),
 1615|  5.87k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  5.87k|    {
 1617|  5.87k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  5.87k|        : m_has_value(false)
  637|  5.87k|    {
  638|  5.87k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  5.87k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  700|  5.87k|    {
  701|  5.87k|        scn::detail::construct_at(unexpected_ptr(),
  702|  5.87k|                                  std::forward<Args>(args)...);
  703|  5.87k|        m_has_value = false;
  704|  5.87k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  395|  37.3k|{
  396|  37.3k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  37.3k|        T(std::forward<Args>(args)...);
  398|  37.3k|}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  29.3k|    {
  730|  29.3k|        return reinterpret_cast<unexpected<E>*>(
  731|  29.3k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1021|  29.3k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  29.3k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  5.87k|    {
 1315|  5.87k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEaSEOSJ_:
 1555|  5.87k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvEaSEOSK_:
  901|  5.87k|    {
  902|  5.87k|        assign_common(std::move(other));
  903|  5.87k|        return *this;
  904|  5.87k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  948|  5.87k|    {
  949|  5.87k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 5.87k, False: 0]
  ------------------
  950|  5.87k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 5.87k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  5.87k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  5.87k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|  31.7k|    {
  687|  31.7k|        return m_has_value;
  688|  31.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  7.43k|    {
  653|  7.43k|        return *value_ptr();
  654|  7.43k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1044|  5.87k|    {
 1045|  5.87k|        this->destroy_value();
 1046|  5.87k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  5.87k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  6.65k|    {
  708|  6.65k|        scn::detail::destroy_at(value_ptr());
  709|  6.65k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  401|  6.65k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  6.65k|    else {
  408|  6.65k|        p->~T();
  409|  6.65k|    }
  410|  6.65k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 6630|  6.65k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  5.87k|    {
  701|  5.87k|        scn::detail::construct_at(unexpected_ptr(),
  702|  5.87k|                                  std::forward<Args>(args)...);
  703|  5.87k|        m_has_value = false;
  704|  5.87k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  5.87k|    {
  678|  5.87k|        return std::move(*unexpected_ptr());
  679|  5.87k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  11.7k|    {
  712|  11.7k|        scn::detail::destroy_at(unexpected_ptr());
  713|  11.7k|    }
_ZN3scn2v46detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  401|  74.6k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  74.6k|    else {
  408|  74.6k|        p->~T();
  409|  74.6k|    }
  410|  74.6k|}
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEcvS6_Ev:
 8797|  6.65k|    {
 8798|  6.65k|        return m_str;
 8799|  6.65k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6126|  6.65k|{
 6127|  6.65k|    detail::check_scan_arg_types<Args...>();
 6128|  6.65k|    return detail::scan_arg_store<Context, Args...>(values);
 6129|  6.65k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEbv:
 5841|  19.9k|{
 5842|  19.9k|    constexpr bool default_constructible_constraint =
 5843|  19.9k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5844|  19.9k|    static_assert(default_constructible_constraint,
 5845|  19.9k|                  "Scan argument types must be default constructible");
 5846|       |
 5847|  19.9k|    constexpr bool destructible_constraint =
 5848|  19.9k|        std::conjunction_v<std::is_destructible<Args>...>;
 5849|  19.9k|    static_assert(destructible_constraint,
 5850|  19.9k|                  "Scan argument types must be Destructible");
 5851|       |
 5852|  19.9k|    constexpr bool non_reference_constraint =
 5853|  19.9k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5854|  19.9k|    static_assert(non_reference_constraint,
 5855|  19.9k|                  "Scan argument types must not be references");
 5856|       |
 5857|  19.9k|    constexpr bool movable_constraint =
 5858|  19.9k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5859|  19.9k|    static_assert(movable_constraint,
 5860|  19.9k|                  "Scan argument types must be move constructible");
 5861|       |
 5862|  19.9k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5862:12): [Folded - Ignored]
  |  Branch (5862:48): [Folded - Ignored]
  ------------------
 5863|  19.9k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5863:12): [Folded - Ignored]
  |  Branch (5863:40): [Folded - Ignored]
  ------------------
 5864|  19.9k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ERNS6_5tupleIJSC_EEE:
 6102|  6.65k|        : args(std::apply(make_argptrs<Args...>, args))
 6103|  6.65k|    {
 6104|  6.65k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEE12make_argptrsIJSC_EEENS6_5arrayIPvLm1EEEDpRT_:
 6111|  6.65k|    {
 6112|  6.65k|        return {detail::make_arg<
 6113|  6.65k|            kind, Context,
 6114|  6.65k|            mapped_type_constant<remove_cvref_t<A>,
 6115|  6.65k|                                 typename Context::char_type>::value>(args)...};
 6116|  6.65k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE23ENSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEvEEPvRT2_:
 5891|  6.65k|{
 5892|  6.65k|    return make_value<Context>(value).ref_value;
 5893|  6.65k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDaRT0_:
 5826|  6.65k|{
 5827|  6.65k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5828|       |
 5829|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5830|  6.65k|                                  needs_context_tag>) {
 5831|  6.65k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1057|  6.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5832|       |    }
 5833|       |    else {
 5834|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5835|       |            value, context_tag<Context>{}));
 5836|       |    }
 5837|  6.65k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 5660|  6.65k|    {                                                                        \
 5661|  6.65k|        return val;                                                          \
 5662|  6.65k|    }
_ZN3scn2v46detail15make_value_implINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERS9_EEDaOT0_:
 5795|  19.9k|{
 5796|  19.9k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5797|  19.9k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5798|       |
 5799|  19.9k|    constexpr bool scannable_char =
 5800|  19.9k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5801|  19.9k|    static_assert(scannable_char,
 5802|  19.9k|                  "Cannot scan an argument of an unsupported character "
 5803|  19.9k|                  "type (i.e. char from a wchar_t source)");
 5804|       |
 5805|  19.9k|    constexpr bool scannable_const =
 5806|  19.9k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5807|  19.9k|    static_assert(scannable_const, "Cannot scan a const argument");
 5808|       |
 5809|  19.9k|    constexpr bool scannable_disabled =
 5810|  19.9k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5811|  19.9k|    static_assert(scannable_disabled,
 5812|  19.9k|                  "Cannot scan an argument that has been disabled by "
 5813|  19.9k|                  "flag (SCN_DISABLE_TYPE_*)");
 5814|       |
 5815|  19.9k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5816|  19.9k|    static_assert(
 5817|  19.9k|        scannable,
 5818|  19.9k|        "Cannot scan an argument. To make a type T scannable, provide "
 5819|  19.9k|        "a scn::scanner<T, CharT> specialization.");
 5820|       |
 5821|  19.9k|    return arg_value{arg};
 5822|  19.9k|}
_ZN3scn2v46detail9arg_valueC2INSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERT_:
 5603|  19.9k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5604|  19.9k|    {
 5605|  19.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1813|  7.43k|    {
 1814|  7.43k|        return &value();
 1815|  7.43k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1767|  7.43k|    {
 1768|  7.43k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  7.43k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  7.43k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  7.43k|        return this->get_value();
 1770|  7.43k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE6valuesEv:
 6406|  19.9k|    {
 6407|  19.9k|        return m_values;
 6408|  19.9k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6152|  6.65k|        : basic_scan_args(store.desc, store.args.data())
 6153|  6.65k|    {
 6154|  6.65k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8792|  6.65k|        : m_str(r.str)
 8793|  6.65k|    {
 8794|  6.65k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|  12.5k|    {
  643|  12.5k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 778, False: 11.7k]
  ------------------
  644|    778|            destroy_value();
  645|    778|        }
  646|  11.7k|        else {
  647|  11.7k|            destroy_unexpected();
  648|  11.7k|        }
  649|  12.5k|    }
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeERNS2_17basic_string_viewIcS5_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEERKT0_OSG_NS0_24basic_scan_format_stringIcNSL_13type_identityISG_E4typeEJDpNS10_ISR_E4typeEEEE:
 9829|  3.32k|{
 9830|  3.32k|    auto result = make_scan_result<Source, Args...>();
 9831|  3.32k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  3.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9832|  3.32k|                                   make_scan_args(result->values())));
 9833|  3.32k|    return result;
 9834|  3.32k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEERNS2_17basic_string_viewIcNS4_IcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNSL_13type_identityISG_E4typeEJDpNSX_ISR_E4typeEEEE:
 9760|  3.32k|{
 9761|  3.32k|    auto result = make_scan_result<Source, Args...>();
 9762|  3.32k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  3.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9763|  3.32k|                                   make_scan_args(result->values())));
 9764|  3.32k|    return result;
 9765|  3.32k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEEDav:
 9716|  6.65k|{
 9717|  6.65k|    return scan_result_type<Source, Args...>();
 9718|  6.65k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2Ev:
 1550|  6.65k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2Ev:
  611|  6.65k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  6.65k|    {
  613|  6.65k|        construct();
  614|  6.65k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  6.65k|    {
  694|  6.65k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  6.65k|        m_has_value = true;
  696|  6.65k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJEEEPT_SK_DpOT0_:
  395|  6.65k|{
  396|  6.65k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  6.65k|        T(std::forward<Args>(args)...);
  398|  6.65k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2Ev:
 6623|  6.65k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEC2Ev:
 6397|  19.9k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|  20.7k|    {
  718|  20.7k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1021|  20.7k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|  20.7k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9701|  6.65k|{
 9702|  6.65k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|  6.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 5.87k, False: 778]
  |  |  ------------------
  ------------------
 9703|  5.87k|        out = unexpected(in.error());
 9704|  5.87k|    }
 9705|    778|    else {
 9706|    778|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|    778|    static_cast<    \
  |  | 1056|    778|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|    778|    }
 9708|  6.65k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1614|  5.87k|        : base(unexpect, std::move(e.error())),
 1615|  5.87k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  5.87k|    {
 1617|  5.87k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  5.87k|        : m_has_value(false)
  637|  5.87k|    {
  638|  5.87k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  5.87k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  700|  5.87k|    {
  701|  5.87k|        scn::detail::construct_at(unexpected_ptr(),
  702|  5.87k|                                  std::forward<Args>(args)...);
  703|  5.87k|        m_has_value = false;
  704|  5.87k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  29.3k|    {
  730|  29.3k|        return reinterpret_cast<unexpected<E>*>(
  731|  29.3k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1021|  29.3k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  29.3k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  5.87k|    {
 1315|  5.87k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEaSEOSJ_:
 1555|  5.87k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvEaSEOSK_:
  901|  5.87k|    {
  902|  5.87k|        assign_common(std::move(other));
  903|  5.87k|        return *this;
  904|  5.87k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  948|  5.87k|    {
  949|  5.87k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 5.87k, False: 0]
  ------------------
  950|  5.87k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 5.87k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  5.87k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  5.87k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|  31.7k|    {
  687|  31.7k|        return m_has_value;
  688|  31.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  7.43k|    {
  653|  7.43k|        return *value_ptr();
  654|  7.43k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1044|  5.87k|    {
 1045|  5.87k|        this->destroy_value();
 1046|  5.87k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  5.87k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  6.65k|    {
  708|  6.65k|        scn::detail::destroy_at(value_ptr());
  709|  6.65k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  401|  6.65k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  6.65k|    else {
  408|  6.65k|        p->~T();
  409|  6.65k|    }
  410|  6.65k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 6630|  6.65k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  5.87k|    {
  701|  5.87k|        scn::detail::construct_at(unexpected_ptr(),
  702|  5.87k|                                  std::forward<Args>(args)...);
  703|  5.87k|        m_has_value = false;
  704|  5.87k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  5.87k|    {
  678|  5.87k|        return std::move(*unexpected_ptr());
  679|  5.87k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  11.7k|    {
  712|  11.7k|        scn::detail::destroy_at(unexpected_ptr());
  713|  11.7k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEcvS6_Ev:
 8797|  6.65k|    {
 8798|  6.65k|        return m_str;
 8799|  6.65k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6126|  6.65k|{
 6127|  6.65k|    detail::check_scan_arg_types<Args...>();
 6128|  6.65k|    return detail::scan_arg_store<Context, Args...>(values);
 6129|  6.65k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEEbv:
 5841|  19.9k|{
 5842|  19.9k|    constexpr bool default_constructible_constraint =
 5843|  19.9k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5844|  19.9k|    static_assert(default_constructible_constraint,
 5845|  19.9k|                  "Scan argument types must be default constructible");
 5846|       |
 5847|  19.9k|    constexpr bool destructible_constraint =
 5848|  19.9k|        std::conjunction_v<std::is_destructible<Args>...>;
 5849|  19.9k|    static_assert(destructible_constraint,
 5850|  19.9k|                  "Scan argument types must be Destructible");
 5851|       |
 5852|  19.9k|    constexpr bool non_reference_constraint =
 5853|  19.9k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5854|  19.9k|    static_assert(non_reference_constraint,
 5855|  19.9k|                  "Scan argument types must not be references");
 5856|       |
 5857|  19.9k|    constexpr bool movable_constraint =
 5858|  19.9k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5859|  19.9k|    static_assert(movable_constraint,
 5860|  19.9k|                  "Scan argument types must be move constructible");
 5861|       |
 5862|  19.9k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5862:12): [Folded - Ignored]
  |  Branch (5862:48): [Folded - Ignored]
  ------------------
 5863|  19.9k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5863:12): [Folded - Ignored]
  |  Branch (5863:40): [Folded - Ignored]
  ------------------
 5864|  19.9k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ERNS6_5tupleIJSC_EEE:
 6102|  6.65k|        : args(std::apply(make_argptrs<Args...>, args))
 6103|  6.65k|    {
 6104|  6.65k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEE12make_argptrsIJSC_EEENS6_5arrayIPvLm1EEEDpRT_:
 6111|  6.65k|    {
 6112|  6.65k|        return {detail::make_arg<
 6113|  6.65k|            kind, Context,
 6114|  6.65k|            mapped_type_constant<remove_cvref_t<A>,
 6115|  6.65k|                                 typename Context::char_type>::value>(args)...};
 6116|  6.65k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE24ENSt3__112basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEvEEPvRT2_:
 5891|  6.65k|{
 5892|  6.65k|    return make_value<Context>(value).ref_value;
 5893|  6.65k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEDaRT0_:
 5826|  6.65k|{
 5827|  6.65k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5828|       |
 5829|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5830|  6.65k|                                  needs_context_tag>) {
 5831|  6.65k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1057|  6.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5832|       |    }
 5833|       |    else {
 5834|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5835|       |            value, context_tag<Context>{}));
 5836|       |    }
 5837|  6.65k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 5660|  6.65k|    {                                                                        \
 5661|  6.65k|        return val;                                                          \
 5662|  6.65k|    }
_ZN3scn2v46detail15make_value_implINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEERS9_EEDaOT0_:
 5795|  19.9k|{
 5796|  19.9k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5797|  19.9k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5798|       |
 5799|  19.9k|    constexpr bool scannable_char =
 5800|  19.9k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5801|  19.9k|    static_assert(scannable_char,
 5802|  19.9k|                  "Cannot scan an argument of an unsupported character "
 5803|  19.9k|                  "type (i.e. char from a wchar_t source)");
 5804|       |
 5805|  19.9k|    constexpr bool scannable_const =
 5806|  19.9k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5807|  19.9k|    static_assert(scannable_const, "Cannot scan a const argument");
 5808|       |
 5809|  19.9k|    constexpr bool scannable_disabled =
 5810|  19.9k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5811|  19.9k|    static_assert(scannable_disabled,
 5812|  19.9k|                  "Cannot scan an argument that has been disabled by "
 5813|  19.9k|                  "flag (SCN_DISABLE_TYPE_*)");
 5814|       |
 5815|  19.9k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5816|  19.9k|    static_assert(
 5817|  19.9k|        scannable,
 5818|  19.9k|        "Cannot scan an argument. To make a type T scannable, provide "
 5819|  19.9k|        "a scn::scanner<T, CharT> specialization.");
 5820|       |
 5821|  19.9k|    return arg_value{arg};
 5822|  19.9k|}
_ZN3scn2v46detail9arg_valueC2INSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEERT_:
 5603|  19.9k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5604|  19.9k|    {
 5605|  19.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1813|  7.43k|    {
 1814|  7.43k|        return &value();
 1815|  7.43k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1767|  7.43k|    {
 1768|  7.43k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  7.43k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  7.43k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  7.43k|        return this->get_value();
 1770|  7.43k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEE6valuesEv:
 6406|  19.9k|    {
 6407|  19.9k|        return m_values;
 6408|  19.9k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNSt3__112basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6152|  6.65k|        : basic_scan_args(store.desc, store.args.data())
 6153|  6.65k|    {
 6154|  6.65k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8792|  6.65k|        : m_str(r.str)
 8793|  6.65k|    {
 8794|  6.65k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|  12.5k|    {
  643|  12.5k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 778, False: 11.7k]
  ------------------
  644|    778|            destroy_value();
  645|    778|        }
  646|  11.7k|        else {
  647|  11.7k|            destroy_unexpected();
  648|  11.7k|        }
  649|  12.5k|    }
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeERNS2_17basic_string_viewIcNS4_IcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNSM_13type_identityISH_E4typeEJDpNS11_ISS_E4typeEEEE:
 9829|  3.32k|{
 9830|  3.32k|    auto result = make_scan_result<Source, Args...>();
 9831|  3.32k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  3.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9832|  3.32k|                                   make_scan_args(result->values())));
 9833|  3.32k|    return result;
 9834|  3.32k|}
_ZN3scn2v44scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEERS6_vEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 9760|  3.32k|{
 9761|  3.32k|    auto result = make_scan_result<Source, Args...>();
 9762|  3.32k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  3.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9763|  3.32k|                                   make_scan_args(result->values())));
 9764|  3.32k|    return result;
 9765|  3.32k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEEDav:
 9716|  6.65k|{
 9717|  6.65k|    return scan_result_type<Source, Args...>();
 9718|  6.65k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2Ev:
 1550|  6.65k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2Ev:
  426|  6.65k|        : m_value(T{}), m_has_value(true)
  427|  6.65k|    {
  428|  6.65k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2Ev:
 6623|  6.65k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEC2Ev:
 6397|  6.65k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSJ_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISJ_EEONSV_ISP_EE:
 9701|  6.65k|{
 9702|  6.65k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|  6.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 5.87k, False: 778]
  |  |  ------------------
  ------------------
 9703|  5.87k|        out = unexpected(in.error());
 9704|  5.87k|    }
 9705|    778|    else {
 9706|    778|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|    778|    static_cast<    \
  |  | 1056|    778|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|    778|    }
 9708|  6.65k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISG_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1614|  5.87k|        : base(unexpect, std::move(e.error())),
 1615|  5.87k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  5.87k|    {
 1617|  5.87k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  449|  5.87k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  5.87k|          m_has_value(false)
  451|  5.87k|    {
  452|  5.87k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  5.87k|    {
 1315|  5.87k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEaSEOSH_:
 1555|  5.87k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEvEaSEOSI_:
  901|  5.87k|    {
  902|  5.87k|        assign_common(std::move(other));
  903|  5.87k|        return *this;
  904|  5.87k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEvE13assign_commonISI_EEvOT_:
  948|  5.87k|    {
  949|  5.87k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 5.87k, False: 0]
  ------------------
  950|  5.87k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 5.87k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  5.87k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  5.87k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  19.1k|    {
  490|  19.1k|        return m_has_value;
  491|  19.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  7.43k|    {
  456|  7.43k|        return m_value;
  457|  7.43k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISI_EEvOT_:
 1044|  5.87k|    {
 1045|  5.87k|        this->destroy_value();
 1046|  5.87k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  5.87k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  5.87k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISH_EEEEEvDpOT_:
  503|  5.87k|    {
  504|  5.87k|        scn::detail::construct_at(&get_unexpected(),
  505|  5.87k|                                  std::forward<Args>(args)...);
  506|  5.87k|        m_has_value = false;
  507|  5.87k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  5.87k|    {
  473|  5.87k|        return m_unexpected;
  474|  5.87k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  5.87k|    {
  481|  5.87k|        return std::move(m_unexpected);
  482|  5.87k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEcvS6_Ev:
 8797|  6.65k|    {
 8798|  6.65k|        return m_str;
 8799|  6.65k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6126|  6.65k|{
 6127|  6.65k|    detail::check_scan_arg_types<Args...>();
 6128|  6.65k|    return detail::scan_arg_store<Context, Args...>(values);
 6129|  6.65k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEEbv:
 5841|  6.65k|{
 5842|  6.65k|    constexpr bool default_constructible_constraint =
 5843|  6.65k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5844|  6.65k|    static_assert(default_constructible_constraint,
 5845|  6.65k|                  "Scan argument types must be default constructible");
 5846|       |
 5847|  6.65k|    constexpr bool destructible_constraint =
 5848|  6.65k|        std::conjunction_v<std::is_destructible<Args>...>;
 5849|  6.65k|    static_assert(destructible_constraint,
 5850|  6.65k|                  "Scan argument types must be Destructible");
 5851|       |
 5852|  6.65k|    constexpr bool non_reference_constraint =
 5853|  6.65k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5854|  6.65k|    static_assert(non_reference_constraint,
 5855|  6.65k|                  "Scan argument types must not be references");
 5856|       |
 5857|  6.65k|    constexpr bool movable_constraint =
 5858|  6.65k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5859|  6.65k|    static_assert(movable_constraint,
 5860|  6.65k|                  "Scan argument types must be move constructible");
 5861|       |
 5862|  6.65k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5862:12): [Folded - Ignored]
  |  Branch (5862:48): [Folded - Ignored]
  ------------------
 5863|  6.65k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5863:12): [Folded - Ignored]
  |  Branch (5863:40): [Folded - Ignored]
  ------------------
 5864|  6.65k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEC2ERNS6_5tupleIJSA_EEE:
 6102|  6.65k|        : args(std::apply(make_argptrs<Args...>, args))
 6103|  6.65k|    {
 6104|  6.65k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEE12make_argptrsIJSA_EEENS6_5arrayIPvLm1EEEDpRT_:
 6111|  6.65k|    {
 6112|  6.65k|        return {detail::make_arg<
 6113|  6.65k|            kind, Context,
 6114|  6.65k|            mapped_type_constant<remove_cvref_t<A>,
 6115|  6.65k|                                 typename Context::char_type>::value>(args)...};
 6116|  6.65k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE21ENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEvEEPvRT2_:
 5891|  6.65k|{
 5892|  6.65k|    return make_value<Context>(value).ref_value;
 5893|  6.65k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDaRT0_:
 5826|  6.65k|{
 5827|  6.65k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5828|       |
 5829|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5830|  6.65k|                                  needs_context_tag>) {
 5831|  6.65k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1057|  6.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5832|       |    }
 5833|       |    else {
 5834|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5835|       |            value, context_tag<Context>{}));
 5836|       |    }
 5837|  6.65k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 5660|  6.65k|    {                                                                        \
 5661|  6.65k|        return val;                                                          \
 5662|  6.65k|    }
_ZN3scn2v46detail15make_value_implINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEERS7_EEDaOT0_:
 5795|  6.65k|{
 5796|  6.65k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5797|  6.65k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5798|       |
 5799|  6.65k|    constexpr bool scannable_char =
 5800|  6.65k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5801|  6.65k|    static_assert(scannable_char,
 5802|  6.65k|                  "Cannot scan an argument of an unsupported character "
 5803|  6.65k|                  "type (i.e. char from a wchar_t source)");
 5804|       |
 5805|  6.65k|    constexpr bool scannable_const =
 5806|  6.65k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5807|  6.65k|    static_assert(scannable_const, "Cannot scan a const argument");
 5808|       |
 5809|  6.65k|    constexpr bool scannable_disabled =
 5810|  6.65k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5811|  6.65k|    static_assert(scannable_disabled,
 5812|  6.65k|                  "Cannot scan an argument that has been disabled by "
 5813|  6.65k|                  "flag (SCN_DISABLE_TYPE_*)");
 5814|       |
 5815|  6.65k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5816|  6.65k|    static_assert(
 5817|  6.65k|        scannable,
 5818|  6.65k|        "Cannot scan an argument. To make a type T scannable, provide "
 5819|  6.65k|        "a scn::scanner<T, CharT> specialization.");
 5820|       |
 5821|  6.65k|    return arg_value{arg};
 5822|  6.65k|}
_ZN3scn2v46detail9arg_valueC2INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEERT_:
 5603|  6.65k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5604|  6.65k|    {
 5605|  6.65k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEptEv:
 1813|  7.43k|    {
 1814|  7.43k|        return &value();
 1815|  7.43k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEE5valueISF_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1767|  7.43k|    {
 1768|  7.43k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  7.43k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  7.43k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  7.43k|        return this->get_value();
 1770|  7.43k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEE6valuesEv:
 6406|  6.65k|    {
 6407|  6.65k|        return m_values;
 6408|  6.65k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6152|  6.65k|        : basic_scan_args(store.desc, store.args.data())
 6153|  6.65k|    {
 6154|  6.65k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8792|  6.65k|        : m_str(r.str)
 8793|  6.65k|    {
 8794|  6.65k|    }
_ZN3scn2v44scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS2_6localeERS6_vvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 9829|  3.32k|{
 9830|  3.32k|    auto result = make_scan_result<Source, Args...>();
 9831|  3.32k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  3.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9832|  3.32k|                                   make_scan_args(result->values())));
 9833|  3.32k|    return result;
 9834|  3.32k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEEDav:
 9716|  13.3k|{
 9717|  13.3k|    return scan_result_type<Source, Args...>();
 9718|  13.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEC2Ev:
 1550|  13.3k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2Ev:
  426|  13.3k|        : m_value(T{}), m_has_value(true)
  427|  13.3k|    {
  428|  13.3k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJwEEC2Ev:
 6623|  13.3k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2Ev:
 6466|   119k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2Ev:
 3458|   119k|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJwEEC2Ev:
 6397|  13.3k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9701|  13.3k|{
 9702|  13.3k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|  13.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 13.0k, False: 256]
  |  |  ------------------
  ------------------
 9703|  13.0k|        out = unexpected(in.error());
 9704|  13.0k|    }
 9705|    256|    else {
 9706|    256|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|    256|    static_cast<    \
  |  | 1056|    256|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|    256|    }
 9708|  13.3k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1738|   119k|    {
 1739|   119k|        return has_value();
 1740|   119k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   239k|    {
  490|   239k|        return m_has_value;
  491|   239k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1744|   117k|    {
 1745|   117k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|   117k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   117k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|   117k|        return this->get_unexpected().error();
 1747|   117k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   117k|    {
  473|   117k|        return m_unexpected;
  474|   117k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1614|  13.0k|        : base(unexpect, std::move(e.error())),
 1615|  13.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  13.0k|    {
 1617|  13.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  13.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  13.0k|          m_has_value(false)
  451|  13.0k|    {
  452|  13.0k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  13.0k|    {
 1315|  13.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEaSEOSC_:
 1555|  13.0k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorEvEaSEOSD_:
  901|  13.0k|    {
  902|  13.0k|        assign_common(std::move(other));
  903|  13.0k|        return *this;
  904|  13.0k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  948|  13.0k|    {
  949|  13.0k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 13.0k, False: 0]
  ------------------
  950|  13.0k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 13.0k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  13.0k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  13.0k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  39.6k|    {
  490|  39.6k|        return m_has_value;
  491|  39.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  13.5k|    {
  456|  13.5k|        return m_value;
  457|  13.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1044|  13.0k|    {
 1045|  13.0k|        this->destroy_value();
 1046|  13.0k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  13.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  13.0k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  13.0k|    {
  504|  13.0k|        scn::detail::construct_at(&get_unexpected(),
  505|  13.0k|                                  std::forward<Args>(args)...);
  506|  13.0k|        m_has_value = false;
  507|  13.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  13.0k|    {
  473|  13.0k|        return m_unexpected;
  474|  13.0k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  13.0k|    {
  481|  13.0k|        return std::move(m_unexpected);
  482|  13.0k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE9set_rangeIS9_EEvOT_:
 6497|  2.12k|    {
 6498|  2.12k|        m_range = std::forward<Other>(r);
 6499|  2.12k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1793|  2.12k|    {
 1794|  2.12k|        return value();
 1795|  2.12k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1767|  2.12k|    {
 1768|  2.12k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  2.12k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  2.12k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  2.12k|        return this->get_value();
 1770|  2.12k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  2.12k|    {
  456|  2.12k|        return m_value;
  457|  2.12k|    }
_ZN3scn2v46detail13vscan_genericIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS1_22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEEOSB_NS4_IT0_NS5_ISN_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESN_EEEE:
 9459|  59.9k|{
 9460|  59.9k|    auto buffer = make_scan_buffer(range);
 9461|       |
 9462|  59.9k|    auto result = vscan_impl(buffer, format, args);
 9463|  59.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  986|  59.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 58.8k, False: 1.06k]
  |  |  ------------------
  ------------------
 9464|  58.8k|        return unexpected(result.error());
 9465|  58.8k|    }
 9466|  1.06k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1057|  1.06k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9467|  59.9k|}
_ZN3scn2v46detail16make_scan_bufferINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaRKT_:
 5379|   119k|{
 5380|   119k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5381|       |
 5382|   119k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5383|   119k|                  "\n"
 5384|   119k|                  "Unsupported range type given as input to a scanning "
 5385|   119k|                  "function.\n"
 5386|   119k|                  "A range needs to have a character type (value type) "
 5387|   119k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5388|   119k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5389|   119k|                  "to be included.\n"
 5390|   119k|                  "See the scnlib documentation for more details.");
 5391|   119k|    static_assert(
 5392|   119k|        !std::is_same_v<T, custom_char_traits>,
 5393|   119k|        "\n"
 5394|   119k|        "Unsupported range type given as input to a scanning "
 5395|   119k|        "function.\n"
 5396|   119k|        "String types (std::basic_string, and std::basic_string_view) "
 5397|   119k|        "need to use std::char_traits. Strings with custom Traits are "
 5398|   119k|        "not supported.");
 5399|   119k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5400|   119k|                  "\n"
 5401|   119k|                  "Unsupported range type given as input to a scanning "
 5402|   119k|                  "function.\n"
 5403|   119k|                  "file_marker_found cannot be used as an "
 5404|   119k|                  "source range type to scn::scan.\n"
 5405|   119k|                  "To read from stdin, use scn::input or scn::prompt, "
 5406|   119k|                  "and do not provide an explicit source range, "
 5407|   119k|                  "or use scn::scan with a FILE* directly.");
 5408|   119k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5409|   119k|                  "\n"
 5410|   119k|                  "Unsupported range type given as input to a scanning "
 5411|   119k|                  "function.\n"
 5412|   119k|                  "In order to be scannable, a range needs to satisfy "
 5413|   119k|                  "`forward_range`. `input_range` is not sufficient.");
 5414|   119k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5415|   119k|                  "\n"
 5416|   119k|                  "Unsupported range type given as input to a scanning "
 5417|   119k|                  "function.\n"
 5418|   119k|                  "A range needs to model forward_range and have a valid "
 5419|   119k|                  "character type (char or wchar_t) to be scannable.\n"
 5420|   119k|                  "Examples of scannable ranges are std::string, "
 5421|   119k|                  "std::string_view, "
 5422|   119k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5423|   119k|                  "See the scnlib documentation for more details.");
 5424|       |
 5425|   119k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5426|   119k|}
_ZN3scn2v46detail17_make_scan_buffer4implIwEEDaNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEENS1_12priority_tagILm3EEE:
 5271|   119k|{
 5272|   119k|    if constexpr (is_valid_char_type<CharT>) {
 5273|   119k|        return r;
 5274|       |        // return make_string_scan_buffer(r);
 5275|       |    }
 5276|       |    else {
 5277|       |        return invalid_char_type{};
 5278|       |    }
 5279|   119k|}
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1614|   117k|        : base(unexpect, std::move(e.error())),
 1615|   117k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|   117k|    {
 1617|   117k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|   117k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   117k|          m_has_value(false)
  451|   117k|    {
  452|   117k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   119k|    {
 1315|   119k|    }
_ZN3scn2v46detail23make_vscan_result_rangeIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_l:
 6727|  2.12k|{
 6728|       |    if constexpr (ranges::random_access_iterator<
 6729|  2.12k|                      ranges::iterator_t<SourceRange>>) {
 6730|  2.12k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6731|       |    }
 6732|       |    else {
 6733|       |        auto it = ranges::begin(source);
 6734|       |        while (n > 0) {
 6735|       |            --n;
 6736|       |            ++it;
 6737|       |        }
 6738|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6739|       |    }
 6740|  2.12k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|  2.12k|    {
 2868|  2.12k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|  2.12k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|  2.12k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|  2.12k|    {
 2849|  2.12k|        return decay_copy(t.begin());
 2850|  2.12k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 2092|   301k|{
 2093|   301k|    return SCN_FWD(t);
  ------------------
  |  | 1057|   301k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2094|   301k|}
_ZN3scn2v46detail27make_vscan_result_range_endINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaRT_:
 6714|  2.12k|{
 6715|  2.12k|    return ranges::end(source);
 6716|  2.12k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2924|  2.12k|    {
 2925|  2.12k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|  2.12k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2926|  2.12k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2906|  2.12k|    {
 2907|  2.12k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1057|  2.12k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2908|  2.12k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3463|  1.41M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|  1.41M|    static_cast<    \
  |  | 1056|  1.41M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|  1.41M|    static_cast<    \
  |  | 1056|  1.41M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3464|  1.41M|    {
 3465|  1.41M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1568|  2.12k|        : base(std::in_place, std::forward<U>(val)),
 1569|  2.12k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  2.12k|    {
 1571|  2.12k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|  2.12k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.12k|    {
  442|  2.12k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEcvS6_Ev:
 8797|  13.3k|    {
 8798|  13.3k|        return m_str;
 8799|  13.3k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJwEEEDaRNSt3__15tupleIJDpT0_EEE:
 6126|  13.3k|{
 6127|  13.3k|    detail::check_scan_arg_types<Args...>();
 6128|  13.3k|    return detail::scan_arg_store<Context, Args...>(values);
 6129|  13.3k|}
_ZN3scn2v46detail20check_scan_arg_typesIJwEEEbv:
 5841|  13.3k|{
 5842|  13.3k|    constexpr bool default_constructible_constraint =
 5843|  13.3k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5844|  13.3k|    static_assert(default_constructible_constraint,
 5845|  13.3k|                  "Scan argument types must be default constructible");
 5846|       |
 5847|  13.3k|    constexpr bool destructible_constraint =
 5848|  13.3k|        std::conjunction_v<std::is_destructible<Args>...>;
 5849|  13.3k|    static_assert(destructible_constraint,
 5850|  13.3k|                  "Scan argument types must be Destructible");
 5851|       |
 5852|  13.3k|    constexpr bool non_reference_constraint =
 5853|  13.3k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5854|  13.3k|    static_assert(non_reference_constraint,
 5855|  13.3k|                  "Scan argument types must not be references");
 5856|       |
 5857|  13.3k|    constexpr bool movable_constraint =
 5858|  13.3k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5859|  13.3k|    static_assert(movable_constraint,
 5860|  13.3k|                  "Scan argument types must be move constructible");
 5861|       |
 5862|  13.3k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5862:12): [Folded - Ignored]
  |  Branch (5862:48): [Folded - Ignored]
  ------------------
 5863|  13.3k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5863:12): [Folded - Ignored]
  |  Branch (5863:40): [Folded - Ignored]
  ------------------
 5864|  13.3k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJwEEC2ERNSt3__15tupleIJwEEE:
 6102|  13.3k|        : args(std::apply(make_argptrs<Args...>, args))
 6103|  13.3k|    {
 6104|  13.3k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJwEE12make_argptrsIJwEEENSt3__15arrayIPvLm1EEEDpRT_:
 6111|  13.3k|    {
 6112|  13.3k|        return {detail::make_arg<
 6113|  13.3k|            kind, Context,
 6114|  13.3k|            mapped_type_constant<remove_cvref_t<A>,
 6115|  13.3k|                                 typename Context::char_type>::value>(args)...};
 6116|  13.3k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE15EwvEEPvRT2_:
 5891|  13.3k|{
 5892|  13.3k|    return make_value<Context>(value).ref_value;
 5893|  13.3k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEwEEDaRT0_:
 5826|  13.3k|{
 5827|  13.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5828|       |
 5829|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5830|  13.3k|                                  needs_context_tag>) {
 5831|  13.3k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1057|  13.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5832|       |    }
 5833|       |    else {
 5834|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5835|       |            value, context_tag<Context>{}));
 5836|       |    }
 5837|  13.3k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERw:
 5660|  13.3k|    {                                                                        \
 5661|  13.3k|        return val;                                                          \
 5662|  13.3k|    }
_ZN3scn2v46detail15make_value_implIwRwEEDaOT0_:
 5795|  13.3k|{
 5796|  13.3k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5797|  13.3k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5798|       |
 5799|  13.3k|    constexpr bool scannable_char =
 5800|  13.3k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5801|  13.3k|    static_assert(scannable_char,
 5802|  13.3k|                  "Cannot scan an argument of an unsupported character "
 5803|  13.3k|                  "type (i.e. char from a wchar_t source)");
 5804|       |
 5805|  13.3k|    constexpr bool scannable_const =
 5806|  13.3k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5807|  13.3k|    static_assert(scannable_const, "Cannot scan a const argument");
 5808|       |
 5809|  13.3k|    constexpr bool scannable_disabled =
 5810|  13.3k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5811|  13.3k|    static_assert(scannable_disabled,
 5812|  13.3k|                  "Cannot scan an argument that has been disabled by "
 5813|  13.3k|                  "flag (SCN_DISABLE_TYPE_*)");
 5814|       |
 5815|  13.3k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5816|  13.3k|    static_assert(
 5817|  13.3k|        scannable,
 5818|  13.3k|        "Cannot scan an argument. To make a type T scannable, provide "
 5819|  13.3k|        "a scn::scanner<T, CharT> specialization.");
 5820|       |
 5821|  13.3k|    return arg_value{arg};
 5822|  13.3k|}
_ZN3scn2v46detail9arg_valueC2IwEERT_:
 5603|  13.3k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5604|  13.3k|    {
 5605|  13.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEptEv:
 1813|  13.5k|    {
 1814|  13.5k|        return &value();
 1815|  13.5k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1767|  13.5k|    {
 1768|  13.5k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  13.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  13.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  13.5k|        return this->get_value();
 1770|  13.5k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJwEE6valuesEv:
 6406|  13.3k|    {
 6407|  13.3k|        return m_values;
 6408|  13.3k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJwEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6152|  13.3k|        : basic_scan_args(store.desc, store.args.data())
 6153|  13.3k|    {
 6154|  13.3k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2EmPKPv:
 6204|   119k|        : m_desc(desc), m_builtin_values(data)
 6205|   119k|    {
 6206|   119k|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 8463|   119k|{
 8464|   119k|    return s;
 8465|   119k|}
_ZN3scn2v46detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 8435|   119k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8792|  13.3k|        : m_str(r.str)
 8793|  13.3k|    {
 8794|  13.3k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS1_22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT_OSC_NS5_IT1_NS6_ISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESR_EEEE:
 9475|  59.9k|{
 9476|  59.9k|#if !SCN_DISABLE_LOCALE
 9477|  59.9k|    auto buffer = detail::make_scan_buffer(range);
 9478|       |
 9479|  59.9k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9480|  59.9k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9481|  59.9k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9482|       |
 9483|  59.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  986|  59.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 58.8k, False: 1.06k]
  |  |  ------------------
  ------------------
 9484|  58.8k|        return unexpected(result.error());
 9485|  58.8k|    }
 9486|  1.06k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1057|  1.06k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9487|       |#else
 9488|       |    static_assert(dependent_false<Locale>::value,
 9489|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9490|       |
 9491|       |    return {};
 9492|       |#endif
 9493|  59.9k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEEDav:
 9716|  13.3k|{
 9717|  13.3k|    return scan_result_type<Source, Args...>();
 9718|  13.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2Ev:
 1550|  13.3k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2Ev:
  426|  13.3k|        : m_value(T{}), m_has_value(true)
  427|  13.3k|    {
  428|  13.3k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEC2Ev:
 6623|  13.3k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9701|  13.3k|{
 9702|  13.3k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|  13.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 13.2k, False: 40]
  |  |  ------------------
  ------------------
 9703|  13.2k|        out = unexpected(in.error());
 9704|  13.2k|    }
 9705|     40|    else {
 9706|     40|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|     40|    static_cast<    \
  |  | 1056|     40|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|     40|    }
 9708|  13.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1614|  13.2k|        : base(unexpect, std::move(e.error())),
 1615|  13.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  13.2k|    {
 1617|  13.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  13.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  13.2k|          m_has_value(false)
  451|  13.2k|    {
  452|  13.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  13.2k|    {
 1315|  13.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEaSEOSC_:
 1555|  13.2k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorEvEaSEOSD_:
  901|  13.2k|    {
  902|  13.2k|        assign_common(std::move(other));
  903|  13.2k|        return *this;
  904|  13.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  948|  13.2k|    {
  949|  13.2k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 13.2k, False: 0]
  ------------------
  950|  13.2k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 13.2k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  13.2k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  13.2k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  39.8k|    {
  490|  39.8k|        return m_has_value;
  491|  39.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  13.3k|    {
  456|  13.3k|        return m_value;
  457|  13.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1044|  13.2k|    {
 1045|  13.2k|        this->destroy_value();
 1046|  13.2k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  13.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  13.2k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  13.2k|    {
  504|  13.2k|        scn::detail::construct_at(&get_unexpected(),
  505|  13.2k|                                  std::forward<Args>(args)...);
  506|  13.2k|        m_has_value = false;
  507|  13.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  13.2k|    {
  473|  13.2k|        return m_unexpected;
  474|  13.2k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  13.2k|    {
  481|  13.2k|        return std::move(m_unexpected);
  482|  13.2k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEcvS6_Ev:
 8797|  13.3k|    {
 8798|  13.3k|        return m_str;
 8799|  13.3k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJiEEEDaRNSt3__15tupleIJDpT0_EEE:
 6126|  13.3k|{
 6127|  13.3k|    detail::check_scan_arg_types<Args...>();
 6128|  13.3k|    return detail::scan_arg_store<Context, Args...>(values);
 6129|  13.3k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJiEEC2ERNSt3__15tupleIJiEEE:
 6102|  13.3k|        : args(std::apply(make_argptrs<Args...>, args))
 6103|  13.3k|    {
 6104|  13.3k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 6111|  13.3k|    {
 6112|  13.3k|        return {detail::make_arg<
 6113|  13.3k|            kind, Context,
 6114|  13.3k|            mapped_type_constant<remove_cvref_t<A>,
 6115|  13.3k|                                 typename Context::char_type>::value>(args)...};
 6116|  13.3k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE3EivEEPvRT2_:
 5891|  13.3k|{
 5892|  13.3k|    return make_value<Context>(value).ref_value;
 5893|  13.3k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEiEEDaRT0_:
 5826|  13.3k|{
 5827|  13.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5828|       |
 5829|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5830|  13.3k|                                  needs_context_tag>) {
 5831|  13.3k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1057|  13.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5832|       |    }
 5833|       |    else {
 5834|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5835|       |            value, context_tag<Context>{}));
 5836|       |    }
 5837|  13.3k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERi:
 5660|  13.3k|    {                                                                        \
 5661|  13.3k|        return val;                                                          \
 5662|  13.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEptEv:
 1813|  13.3k|    {
 1814|  13.3k|        return &value();
 1815|  13.3k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1767|  13.3k|    {
 1768|  13.3k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  13.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  13.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  13.3k|        return this->get_value();
 1770|  13.3k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJiEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6152|  13.3k|        : basic_scan_args(store.desc, store.args.data())
 6153|  13.3k|    {
 6154|  13.3k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8792|  13.3k|        : m_str(r.str)
 8793|  13.3k|    {
 8794|  13.3k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEEDav:
 9716|  13.3k|{
 9717|  13.3k|    return scan_result_type<Source, Args...>();
 9718|  13.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2Ev:
 1550|  13.3k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2Ev:
  426|  13.3k|        : m_value(T{}), m_has_value(true)
  427|  13.3k|    {
  428|  13.3k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEC2Ev:
 6623|  13.3k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9701|  13.3k|{
 9702|  13.3k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|  13.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 13.2k, False: 40]
  |  |  ------------------
  ------------------
 9703|  13.2k|        out = unexpected(in.error());
 9704|  13.2k|    }
 9705|     40|    else {
 9706|     40|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|     40|    static_cast<    \
  |  | 1056|     40|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|     40|    }
 9708|  13.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1614|  13.2k|        : base(unexpect, std::move(e.error())),
 1615|  13.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  13.2k|    {
 1617|  13.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  13.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  13.2k|          m_has_value(false)
  451|  13.2k|    {
  452|  13.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  13.2k|    {
 1315|  13.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEaSEOSC_:
 1555|  13.2k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorEvEaSEOSD_:
  901|  13.2k|    {
  902|  13.2k|        assign_common(std::move(other));
  903|  13.2k|        return *this;
  904|  13.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  948|  13.2k|    {
  949|  13.2k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 13.2k, False: 0]
  ------------------
  950|  13.2k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 13.2k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  13.2k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  13.2k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  39.8k|    {
  490|  39.8k|        return m_has_value;
  491|  39.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  13.3k|    {
  456|  13.3k|        return m_value;
  457|  13.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1044|  13.2k|    {
 1045|  13.2k|        this->destroy_value();
 1046|  13.2k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  13.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  13.2k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  13.2k|    {
  504|  13.2k|        scn::detail::construct_at(&get_unexpected(),
  505|  13.2k|                                  std::forward<Args>(args)...);
  506|  13.2k|        m_has_value = false;
  507|  13.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  13.2k|    {
  473|  13.2k|        return m_unexpected;
  474|  13.2k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  13.2k|    {
  481|  13.2k|        return std::move(m_unexpected);
  482|  13.2k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEcvS6_Ev:
 8797|  13.3k|    {
 8798|  13.3k|        return m_str;
 8799|  13.3k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJjEEEDaRNSt3__15tupleIJDpT0_EEE:
 6126|  13.3k|{
 6127|  13.3k|    detail::check_scan_arg_types<Args...>();
 6128|  13.3k|    return detail::scan_arg_store<Context, Args...>(values);
 6129|  13.3k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJjEEC2ERNSt3__15tupleIJjEEE:
 6102|  13.3k|        : args(std::apply(make_argptrs<Args...>, args))
 6103|  13.3k|    {
 6104|  13.3k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 6111|  13.3k|    {
 6112|  13.3k|        return {detail::make_arg<
 6113|  13.3k|            kind, Context,
 6114|  13.3k|            mapped_type_constant<remove_cvref_t<A>,
 6115|  13.3k|                                 typename Context::char_type>::value>(args)...};
 6116|  13.3k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE9EjvEEPvRT2_:
 5891|  13.3k|{
 5892|  13.3k|    return make_value<Context>(value).ref_value;
 5893|  13.3k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEjEEDaRT0_:
 5826|  13.3k|{
 5827|  13.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5828|       |
 5829|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5830|  13.3k|                                  needs_context_tag>) {
 5831|  13.3k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1057|  13.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5832|       |    }
 5833|       |    else {
 5834|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5835|       |            value, context_tag<Context>{}));
 5836|       |    }
 5837|  13.3k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERj:
 5660|  13.3k|    {                                                                        \
 5661|  13.3k|        return val;                                                          \
 5662|  13.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEptEv:
 1813|  13.3k|    {
 1814|  13.3k|        return &value();
 1815|  13.3k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1767|  13.3k|    {
 1768|  13.3k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  13.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  13.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  13.3k|        return this->get_value();
 1770|  13.3k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJjEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6152|  13.3k|        : basic_scan_args(store.desc, store.args.data())
 6153|  13.3k|    {
 6154|  13.3k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8792|  13.3k|        : m_str(r.str)
 8793|  13.3k|    {
 8794|  13.3k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEEDav:
 9716|  13.3k|{
 9717|  13.3k|    return scan_result_type<Source, Args...>();
 9718|  13.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2Ev:
 1550|  13.3k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  426|  13.3k|        : m_value(T{}), m_has_value(true)
  427|  13.3k|    {
  428|  13.3k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2Ev:
 6623|  13.3k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9701|  13.3k|{
 9702|  13.3k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|  13.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 13.2k, False: 42]
  |  |  ------------------
  ------------------
 9703|  13.2k|        out = unexpected(in.error());
 9704|  13.2k|    }
 9705|     42|    else {
 9706|     42|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|     42|    static_cast<    \
  |  | 1056|     42|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|     42|    }
 9708|  13.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1614|  13.2k|        : base(unexpect, std::move(e.error())),
 1615|  13.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  13.2k|    {
 1617|  13.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  13.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  13.2k|          m_has_value(false)
  451|  13.2k|    {
  452|  13.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  13.2k|    {
 1315|  13.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEaSEOSC_:
 1555|  13.2k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorEvEaSEOSD_:
  901|  13.2k|    {
  902|  13.2k|        assign_common(std::move(other));
  903|  13.2k|        return *this;
  904|  13.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  948|  13.2k|    {
  949|  13.2k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 13.2k, False: 0]
  ------------------
  950|  13.2k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 13.2k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  13.2k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  13.2k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  39.8k|    {
  490|  39.8k|        return m_has_value;
  491|  39.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  13.3k|    {
  456|  13.3k|        return m_value;
  457|  13.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1044|  13.2k|    {
 1045|  13.2k|        this->destroy_value();
 1046|  13.2k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  13.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  13.2k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  13.2k|    {
  504|  13.2k|        scn::detail::construct_at(&get_unexpected(),
  505|  13.2k|                                  std::forward<Args>(args)...);
  506|  13.2k|        m_has_value = false;
  507|  13.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  13.2k|    {
  473|  13.2k|        return m_unexpected;
  474|  13.2k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  13.2k|    {
  481|  13.2k|        return std::move(m_unexpected);
  482|  13.2k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEcvS6_Ev:
 8797|  13.3k|    {
 8798|  13.3k|        return m_str;
 8799|  13.3k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJdEEEDaRNSt3__15tupleIJDpT0_EEE:
 6126|  13.3k|{
 6127|  13.3k|    detail::check_scan_arg_types<Args...>();
 6128|  13.3k|    return detail::scan_arg_store<Context, Args...>(values);
 6129|  13.3k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJdEEC2ERNSt3__15tupleIJdEEE:
 6102|  13.3k|        : args(std::apply(make_argptrs<Args...>, args))
 6103|  13.3k|    {
 6104|  13.3k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 6111|  13.3k|    {
 6112|  13.3k|        return {detail::make_arg<
 6113|  13.3k|            kind, Context,
 6114|  13.3k|            mapped_type_constant<remove_cvref_t<A>,
 6115|  13.3k|                                 typename Context::char_type>::value>(args)...};
 6116|  13.3k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE19EdvEEPvRT2_:
 5891|  13.3k|{
 5892|  13.3k|    return make_value<Context>(value).ref_value;
 5893|  13.3k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEdEEDaRT0_:
 5826|  13.3k|{
 5827|  13.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5828|       |
 5829|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5830|  13.3k|                                  needs_context_tag>) {
 5831|  13.3k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1057|  13.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5832|       |    }
 5833|       |    else {
 5834|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5835|       |            value, context_tag<Context>{}));
 5836|       |    }
 5837|  13.3k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERd:
 5660|  13.3k|    {                                                                        \
 5661|  13.3k|        return val;                                                          \
 5662|  13.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEptEv:
 1813|  13.3k|    {
 1814|  13.3k|        return &value();
 1815|  13.3k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1767|  13.3k|    {
 1768|  13.3k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  13.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  13.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  13.3k|        return this->get_value();
 1770|  13.3k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJdEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6152|  13.3k|        : basic_scan_args(store.desc, store.args.data())
 6153|  13.3k|    {
 6154|  13.3k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8792|  13.3k|        : m_str(r.str)
 8793|  13.3k|    {
 8794|  13.3k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEEDav:
 9716|  13.3k|{
 9717|  13.3k|    return scan_result_type<Source, Args...>();
 9718|  13.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEEC2Ev:
 1550|  13.3k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2Ev:
  426|  13.3k|        : m_value(T{}), m_has_value(true)
  427|  13.3k|    {
  428|  13.3k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJbEEC2Ev:
 6623|  13.3k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9701|  13.3k|{
 9702|  13.3k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|  13.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 13.2k, False: 40]
  |  |  ------------------
  ------------------
 9703|  13.2k|        out = unexpected(in.error());
 9704|  13.2k|    }
 9705|     40|    else {
 9706|     40|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|     40|    static_cast<    \
  |  | 1056|     40|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|     40|    }
 9708|  13.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1614|  13.2k|        : base(unexpect, std::move(e.error())),
 1615|  13.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  13.2k|    {
 1617|  13.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  13.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  13.2k|          m_has_value(false)
  451|  13.2k|    {
  452|  13.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  13.2k|    {
 1315|  13.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEEaSEOSC_:
 1555|  13.2k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorEvEaSEOSD_:
  901|  13.2k|    {
  902|  13.2k|        assign_common(std::move(other));
  903|  13.2k|        return *this;
  904|  13.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  948|  13.2k|    {
  949|  13.2k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 13.2k, False: 0]
  ------------------
  950|  13.2k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 13.2k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  13.2k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  13.2k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  39.8k|    {
  490|  39.8k|        return m_has_value;
  491|  39.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  13.3k|    {
  456|  13.3k|        return m_value;
  457|  13.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1044|  13.2k|    {
 1045|  13.2k|        this->destroy_value();
 1046|  13.2k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  13.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  13.2k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  13.2k|    {
  504|  13.2k|        scn::detail::construct_at(&get_unexpected(),
  505|  13.2k|                                  std::forward<Args>(args)...);
  506|  13.2k|        m_has_value = false;
  507|  13.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  13.2k|    {
  473|  13.2k|        return m_unexpected;
  474|  13.2k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  13.2k|    {
  481|  13.2k|        return std::move(m_unexpected);
  482|  13.2k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEcvS6_Ev:
 8797|  13.3k|    {
 8798|  13.3k|        return m_str;
 8799|  13.3k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJbEEEDaRNSt3__15tupleIJDpT0_EEE:
 6126|  13.3k|{
 6127|  13.3k|    detail::check_scan_arg_types<Args...>();
 6128|  13.3k|    return detail::scan_arg_store<Context, Args...>(values);
 6129|  13.3k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJbEEC2ERNSt3__15tupleIJbEEE:
 6102|  13.3k|        : args(std::apply(make_argptrs<Args...>, args))
 6103|  13.3k|    {
 6104|  13.3k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJbEE12make_argptrsIJbEEENSt3__15arrayIPvLm1EEEDpRT_:
 6111|  13.3k|    {
 6112|  13.3k|        return {detail::make_arg<
 6113|  13.3k|            kind, Context,
 6114|  13.3k|            mapped_type_constant<remove_cvref_t<A>,
 6115|  13.3k|                                 typename Context::char_type>::value>(args)...};
 6116|  13.3k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE13EbvEEPvRT2_:
 5891|  13.3k|{
 5892|  13.3k|    return make_value<Context>(value).ref_value;
 5893|  13.3k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEbEEDaRT0_:
 5826|  13.3k|{
 5827|  13.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5828|       |
 5829|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5830|  13.3k|                                  needs_context_tag>) {
 5831|  13.3k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1057|  13.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5832|       |    }
 5833|       |    else {
 5834|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5835|       |            value, context_tag<Context>{}));
 5836|       |    }
 5837|  13.3k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERb:
 5660|  13.3k|    {                                                                        \
 5661|  13.3k|        return val;                                                          \
 5662|  13.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEEptEv:
 1813|  13.3k|    {
 1814|  13.3k|        return &value();
 1815|  13.3k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1767|  13.3k|    {
 1768|  13.3k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  13.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  13.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  13.3k|        return this->get_value();
 1770|  13.3k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJbEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6152|  13.3k|        : basic_scan_args(store.desc, store.args.data())
 6153|  13.3k|    {
 6154|  13.3k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8792|  13.3k|        : m_str(r.str)
 8793|  13.3k|    {
 8794|  13.3k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEEDav:
 9716|  13.3k|{
 9717|  13.3k|    return scan_result_type<Source, Args...>();
 9718|  13.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEEC2Ev:
 1550|  13.3k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2Ev:
  426|  13.3k|        : m_value(T{}), m_has_value(true)
  427|  13.3k|    {
  428|  13.3k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJPvEEC2Ev:
 6623|  13.3k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELSA_0EEEvRNS0_13scan_expectedISG_EEONSR_ISM_EE:
 9701|  13.3k|{
 9702|  13.3k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|  13.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 13.2k, False: 18]
  |  |  ------------------
  ------------------
 9703|  13.2k|        out = unexpected(in.error());
 9704|  13.2k|    }
 9705|     18|    else {
 9706|     18|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|     18|    static_cast<    \
  |  | 1056|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|     18|    }
 9708|  13.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELSA_0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSA_0EEEONS0_10unexpectedISH_EE:
 1614|  13.2k|        : base(unexpect, std::move(e.error())),
 1615|  13.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  13.2k|    {
 1617|  13.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  449|  13.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  13.2k|          m_has_value(false)
  451|  13.2k|    {
  452|  13.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  13.2k|    {
 1315|  13.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEEaSEOSD_:
 1555|  13.2k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorEvEaSEOSE_:
  901|  13.2k|    {
  902|  13.2k|        assign_common(std::move(other));
  903|  13.2k|        return *this;
  904|  13.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  948|  13.2k|    {
  949|  13.2k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 13.2k, False: 0]
  ------------------
  950|  13.2k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 13.2k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  13.2k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  13.2k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  39.9k|    {
  490|  39.9k|        return m_has_value;
  491|  39.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  13.3k|    {
  456|  13.3k|        return m_value;
  457|  13.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1044|  13.2k|    {
 1045|  13.2k|        this->destroy_value();
 1046|  13.2k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  13.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  13.2k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  503|  13.2k|    {
  504|  13.2k|        scn::detail::construct_at(&get_unexpected(),
  505|  13.2k|                                  std::forward<Args>(args)...);
  506|  13.2k|        m_has_value = false;
  507|  13.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  13.2k|    {
  473|  13.2k|        return m_unexpected;
  474|  13.2k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  13.2k|    {
  481|  13.2k|        return std::move(m_unexpected);
  482|  13.2k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEcvS6_Ev:
 8797|  13.3k|    {
 8798|  13.3k|        return m_str;
 8799|  13.3k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJPvEEEDaRNSt3__15tupleIJDpT0_EEE:
 6126|  13.3k|{
 6127|  13.3k|    detail::check_scan_arg_types<Args...>();
 6128|  13.3k|    return detail::scan_arg_store<Context, Args...>(values);
 6129|  13.3k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJPvEEC2ERNSt3__15tupleIJS6_EEE:
 6102|  13.3k|        : args(std::apply(make_argptrs<Args...>, args))
 6103|  13.3k|    {
 6104|  13.3k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJPvEE12make_argptrsIJS6_EEENSt3__15arrayIS6_Lm1EEEDpRT_:
 6111|  13.3k|    {
 6112|  13.3k|        return {detail::make_arg<
 6113|  13.3k|            kind, Context,
 6114|  13.3k|            mapped_type_constant<remove_cvref_t<A>,
 6115|  13.3k|                                 typename Context::char_type>::value>(args)...};
 6116|  13.3k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE17EPvvEES8_RT2_:
 5891|  13.3k|{
 5892|  13.3k|    return make_value<Context>(value).ref_value;
 5893|  13.3k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEPvEEDaRT0_:
 5826|  13.3k|{
 5827|  13.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5828|       |
 5829|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5830|  13.3k|                                  needs_context_tag>) {
 5831|  13.3k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1057|  13.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5832|       |    }
 5833|       |    else {
 5834|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5835|       |            value, context_tag<Context>{}));
 5836|       |    }
 5837|  13.3k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERPv:
 5660|  13.3k|    {                                                                        \
 5661|  13.3k|        return val;                                                          \
 5662|  13.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEEptEv:
 1813|  13.3k|    {
 1814|  13.3k|        return &value();
 1815|  13.3k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELSA_0EEERSH_v:
 1767|  13.3k|    {
 1768|  13.3k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  13.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  13.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  13.3k|        return this->get_value();
 1770|  13.3k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJPvEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6152|  13.3k|        : basic_scan_args(store.desc, store.args.data())
 6153|  13.3k|    {
 6154|  13.3k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8792|  13.3k|        : m_str(r.str)
 8793|  13.3k|    {
 8794|  13.3k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEEDav:
 9716|  13.3k|{
 9717|  13.3k|    return scan_result_type<Source, Args...>();
 9718|  13.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2Ev:
 1550|  13.3k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2Ev:
  611|  13.3k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  13.3k|    {
  613|  13.3k|        construct();
  614|  13.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  13.3k|    {
  694|  13.3k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  13.3k|        m_has_value = true;
  696|  13.3k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJEEEPT_SK_DpOT0_:
  395|  13.3k|{
  396|  13.3k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  13.3k|        T(std::forward<Args>(args)...);
  398|  13.3k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2Ev:
 6623|  13.3k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|  40.4k|    {
  718|  40.4k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1021|  40.4k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|  40.4k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9701|  13.3k|{
 9702|  13.3k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|  13.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 12.7k, False: 562]
  |  |  ------------------
  ------------------
 9703|  12.7k|        out = unexpected(in.error());
 9704|  12.7k|    }
 9705|    562|    else {
 9706|    562|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|    562|    static_cast<    \
  |  | 1056|    562|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|    562|    }
 9708|  13.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1614|  12.7k|        : base(unexpect, std::move(e.error())),
 1615|  12.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  12.7k|    {
 1617|  12.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  12.7k|        : m_has_value(false)
  637|  12.7k|    {
  638|  12.7k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  12.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  700|  12.7k|    {
  701|  12.7k|        scn::detail::construct_at(unexpected_ptr(),
  702|  12.7k|                                  std::forward<Args>(args)...);
  703|  12.7k|        m_has_value = false;
  704|  12.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  63.7k|    {
  730|  63.7k|        return reinterpret_cast<unexpected<E>*>(
  731|  63.7k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1021|  63.7k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  63.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  12.7k|    {
 1315|  12.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEaSEOSJ_:
 1555|  12.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvEaSEOSK_:
  901|  12.7k|    {
  902|  12.7k|        assign_common(std::move(other));
  903|  12.7k|        return *this;
  904|  12.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  948|  12.7k|    {
  949|  12.7k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 12.7k, False: 0]
  ------------------
  950|  12.7k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 12.7k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  12.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  12.7k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|  65.4k|    {
  687|  65.4k|        return m_has_value;
  688|  65.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  13.8k|    {
  653|  13.8k|        return *value_ptr();
  654|  13.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1044|  12.7k|    {
 1045|  12.7k|        this->destroy_value();
 1046|  12.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  12.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  13.3k|    {
  708|  13.3k|        scn::detail::destroy_at(value_ptr());
  709|  13.3k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  401|  13.3k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  13.3k|    else {
  408|  13.3k|        p->~T();
  409|  13.3k|    }
  410|  13.3k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 6630|  13.3k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  12.7k|    {
  701|  12.7k|        scn::detail::construct_at(unexpected_ptr(),
  702|  12.7k|                                  std::forward<Args>(args)...);
  703|  12.7k|        m_has_value = false;
  704|  12.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  12.7k|    {
  678|  12.7k|        return std::move(*unexpected_ptr());
  679|  12.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  25.5k|    {
  712|  25.5k|        scn::detail::destroy_at(unexpected_ptr());
  713|  25.5k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEcvS6_Ev:
 8797|  13.3k|    {
 8798|  13.3k|        return m_str;
 8799|  13.3k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6126|  13.3k|{
 6127|  13.3k|    detail::check_scan_arg_types<Args...>();
 6128|  13.3k|    return detail::scan_arg_store<Context, Args...>(values);
 6129|  13.3k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ERNS6_5tupleIJSC_EEE:
 6102|  13.3k|        : args(std::apply(make_argptrs<Args...>, args))
 6103|  13.3k|    {
 6104|  13.3k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEE12make_argptrsIJSC_EEENS6_5arrayIPvLm1EEEDpRT_:
 6111|  13.3k|    {
 6112|  13.3k|        return {detail::make_arg<
 6113|  13.3k|            kind, Context,
 6114|  13.3k|            mapped_type_constant<remove_cvref_t<A>,
 6115|  13.3k|                                 typename Context::char_type>::value>(args)...};
 6116|  13.3k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE23ENSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEvEEPvRT2_:
 5891|  13.3k|{
 5892|  13.3k|    return make_value<Context>(value).ref_value;
 5893|  13.3k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDaRT0_:
 5826|  13.3k|{
 5827|  13.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5828|       |
 5829|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5830|  13.3k|                                  needs_context_tag>) {
 5831|  13.3k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1057|  13.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5832|       |    }
 5833|       |    else {
 5834|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5835|       |            value, context_tag<Context>{}));
 5836|       |    }
 5837|  13.3k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 5660|  13.3k|    {                                                                        \
 5661|  13.3k|        return val;                                                          \
 5662|  13.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1813|  13.8k|    {
 1814|  13.8k|        return &value();
 1815|  13.8k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1767|  13.8k|    {
 1768|  13.8k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  13.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  13.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  13.8k|        return this->get_value();
 1770|  13.8k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6152|  13.3k|        : basic_scan_args(store.desc, store.args.data())
 6153|  13.3k|    {
 6154|  13.3k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8792|  13.3k|        : m_str(r.str)
 8793|  13.3k|    {
 8794|  13.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|  26.0k|    {
  643|  26.0k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 562, False: 25.5k]
  ------------------
  644|    562|            destroy_value();
  645|    562|        }
  646|  25.5k|        else {
  647|  25.5k|            destroy_unexpected();
  648|  25.5k|        }
  649|  26.0k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEEDav:
 9716|  13.3k|{
 9717|  13.3k|    return scan_result_type<Source, Args...>();
 9718|  13.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2Ev:
 1550|  13.3k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2Ev:
  611|  13.3k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  13.3k|    {
  613|  13.3k|        construct();
  614|  13.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  13.3k|    {
  694|  13.3k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  13.3k|        m_has_value = true;
  696|  13.3k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJEEEPT_SK_DpOT0_:
  395|  13.3k|{
  396|  13.3k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  13.3k|        T(std::forward<Args>(args)...);
  398|  13.3k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2Ev:
 6623|  13.3k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|  40.4k|    {
  718|  40.4k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1021|  40.4k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|  40.4k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9701|  13.3k|{
 9702|  13.3k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|  13.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 12.7k, False: 562]
  |  |  ------------------
  ------------------
 9703|  12.7k|        out = unexpected(in.error());
 9704|  12.7k|    }
 9705|    562|    else {
 9706|    562|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|    562|    static_cast<    \
  |  | 1056|    562|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|    562|    }
 9708|  13.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1614|  12.7k|        : base(unexpect, std::move(e.error())),
 1615|  12.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  12.7k|    {
 1617|  12.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  12.7k|        : m_has_value(false)
  637|  12.7k|    {
  638|  12.7k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  12.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  700|  12.7k|    {
  701|  12.7k|        scn::detail::construct_at(unexpected_ptr(),
  702|  12.7k|                                  std::forward<Args>(args)...);
  703|  12.7k|        m_has_value = false;
  704|  12.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  63.7k|    {
  730|  63.7k|        return reinterpret_cast<unexpected<E>*>(
  731|  63.7k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1021|  63.7k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  63.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  12.7k|    {
 1315|  12.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEaSEOSJ_:
 1555|  12.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvEaSEOSK_:
  901|  12.7k|    {
  902|  12.7k|        assign_common(std::move(other));
  903|  12.7k|        return *this;
  904|  12.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  948|  12.7k|    {
  949|  12.7k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 12.7k, False: 0]
  ------------------
  950|  12.7k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 12.7k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  12.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  12.7k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|  65.4k|    {
  687|  65.4k|        return m_has_value;
  688|  65.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  13.8k|    {
  653|  13.8k|        return *value_ptr();
  654|  13.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1044|  12.7k|    {
 1045|  12.7k|        this->destroy_value();
 1046|  12.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  12.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  13.3k|    {
  708|  13.3k|        scn::detail::destroy_at(value_ptr());
  709|  13.3k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  401|  13.3k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  13.3k|    else {
  408|  13.3k|        p->~T();
  409|  13.3k|    }
  410|  13.3k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 6630|  13.3k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  12.7k|    {
  701|  12.7k|        scn::detail::construct_at(unexpected_ptr(),
  702|  12.7k|                                  std::forward<Args>(args)...);
  703|  12.7k|        m_has_value = false;
  704|  12.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  12.7k|    {
  678|  12.7k|        return std::move(*unexpected_ptr());
  679|  12.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  25.5k|    {
  712|  25.5k|        scn::detail::destroy_at(unexpected_ptr());
  713|  25.5k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEcvS6_Ev:
 8797|  13.3k|    {
 8798|  13.3k|        return m_str;
 8799|  13.3k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6126|  13.3k|{
 6127|  13.3k|    detail::check_scan_arg_types<Args...>();
 6128|  13.3k|    return detail::scan_arg_store<Context, Args...>(values);
 6129|  13.3k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ERNS6_5tupleIJSC_EEE:
 6102|  13.3k|        : args(std::apply(make_argptrs<Args...>, args))
 6103|  13.3k|    {
 6104|  13.3k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEE12make_argptrsIJSC_EEENS6_5arrayIPvLm1EEEDpRT_:
 6111|  13.3k|    {
 6112|  13.3k|        return {detail::make_arg<
 6113|  13.3k|            kind, Context,
 6114|  13.3k|            mapped_type_constant<remove_cvref_t<A>,
 6115|  13.3k|                                 typename Context::char_type>::value>(args)...};
 6116|  13.3k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE24ENSt3__112basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEvEEPvRT2_:
 5891|  13.3k|{
 5892|  13.3k|    return make_value<Context>(value).ref_value;
 5893|  13.3k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEDaRT0_:
 5826|  13.3k|{
 5827|  13.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5828|       |
 5829|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5830|  13.3k|                                  needs_context_tag>) {
 5831|  13.3k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1057|  13.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5832|       |    }
 5833|       |    else {
 5834|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5835|       |            value, context_tag<Context>{}));
 5836|       |    }
 5837|  13.3k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 5660|  13.3k|    {                                                                        \
 5661|  13.3k|        return val;                                                          \
 5662|  13.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1813|  13.8k|    {
 1814|  13.8k|        return &value();
 1815|  13.8k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1767|  13.8k|    {
 1768|  13.8k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  13.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  13.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  13.8k|        return this->get_value();
 1770|  13.8k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNSt3__112basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6152|  13.3k|        : basic_scan_args(store.desc, store.args.data())
 6153|  13.3k|    {
 6154|  13.3k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8792|  13.3k|        : m_str(r.str)
 8793|  13.3k|    {
 8794|  13.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|  26.0k|    {
  643|  26.0k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 562, False: 25.5k]
  ------------------
  644|    562|            destroy_value();
  645|    562|        }
  646|  25.5k|        else {
  647|  25.5k|            destroy_unexpected();
  648|  25.5k|        }
  649|  26.0k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEEDav:
 9716|  13.3k|{
 9717|  13.3k|    return scan_result_type<Source, Args...>();
 9718|  13.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2Ev:
 1550|  13.3k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2Ev:
  426|  13.3k|        : m_value(T{}), m_has_value(true)
  427|  13.3k|    {
  428|  13.3k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2Ev:
 6623|  13.3k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEC2Ev:
 6397|  13.3k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSJ_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISJ_EEONSV_ISP_EE:
 9701|  13.3k|{
 9702|  13.3k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|  13.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 12.7k, False: 562]
  |  |  ------------------
  ------------------
 9703|  12.7k|        out = unexpected(in.error());
 9704|  12.7k|    }
 9705|    562|    else {
 9706|    562|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|    562|    static_cast<    \
  |  | 1056|    562|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|    562|    }
 9708|  13.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISG_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1614|  12.7k|        : base(unexpect, std::move(e.error())),
 1615|  12.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  12.7k|    {
 1617|  12.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  449|  12.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  12.7k|          m_has_value(false)
  451|  12.7k|    {
  452|  12.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  12.7k|    {
 1315|  12.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEaSEOSH_:
 1555|  12.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEvEaSEOSI_:
  901|  12.7k|    {
  902|  12.7k|        assign_common(std::move(other));
  903|  12.7k|        return *this;
  904|  12.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEvE13assign_commonISI_EEvOT_:
  948|  12.7k|    {
  949|  12.7k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 12.7k, False: 0]
  ------------------
  950|  12.7k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 12.7k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  12.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  12.7k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  39.3k|    {
  490|  39.3k|        return m_has_value;
  491|  39.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  13.8k|    {
  456|  13.8k|        return m_value;
  457|  13.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISI_EEvOT_:
 1044|  12.7k|    {
 1045|  12.7k|        this->destroy_value();
 1046|  12.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  12.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  12.7k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISH_EEEEEvDpOT_:
  503|  12.7k|    {
  504|  12.7k|        scn::detail::construct_at(&get_unexpected(),
  505|  12.7k|                                  std::forward<Args>(args)...);
  506|  12.7k|        m_has_value = false;
  507|  12.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  12.7k|    {
  473|  12.7k|        return m_unexpected;
  474|  12.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  12.7k|    {
  481|  12.7k|        return std::move(m_unexpected);
  482|  12.7k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEcvS6_Ev:
 8797|  13.3k|    {
 8798|  13.3k|        return m_str;
 8799|  13.3k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6126|  13.3k|{
 6127|  13.3k|    detail::check_scan_arg_types<Args...>();
 6128|  13.3k|    return detail::scan_arg_store<Context, Args...>(values);
 6129|  13.3k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEEbv:
 5841|  13.3k|{
 5842|  13.3k|    constexpr bool default_constructible_constraint =
 5843|  13.3k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5844|  13.3k|    static_assert(default_constructible_constraint,
 5845|  13.3k|                  "Scan argument types must be default constructible");
 5846|       |
 5847|  13.3k|    constexpr bool destructible_constraint =
 5848|  13.3k|        std::conjunction_v<std::is_destructible<Args>...>;
 5849|  13.3k|    static_assert(destructible_constraint,
 5850|  13.3k|                  "Scan argument types must be Destructible");
 5851|       |
 5852|  13.3k|    constexpr bool non_reference_constraint =
 5853|  13.3k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5854|  13.3k|    static_assert(non_reference_constraint,
 5855|  13.3k|                  "Scan argument types must not be references");
 5856|       |
 5857|  13.3k|    constexpr bool movable_constraint =
 5858|  13.3k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5859|  13.3k|    static_assert(movable_constraint,
 5860|  13.3k|                  "Scan argument types must be move constructible");
 5861|       |
 5862|  13.3k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5862:12): [Folded - Ignored]
  |  Branch (5862:48): [Folded - Ignored]
  ------------------
 5863|  13.3k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5863:12): [Folded - Ignored]
  |  Branch (5863:40): [Folded - Ignored]
  ------------------
 5864|  13.3k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEC2ERNS6_5tupleIJSA_EEE:
 6102|  13.3k|        : args(std::apply(make_argptrs<Args...>, args))
 6103|  13.3k|    {
 6104|  13.3k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEE12make_argptrsIJSA_EEENS6_5arrayIPvLm1EEEDpRT_:
 6111|  13.3k|    {
 6112|  13.3k|        return {detail::make_arg<
 6113|  13.3k|            kind, Context,
 6114|  13.3k|            mapped_type_constant<remove_cvref_t<A>,
 6115|  13.3k|                                 typename Context::char_type>::value>(args)...};
 6116|  13.3k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE22ENSt3__117basic_string_viewIwNS8_11char_traitsIwEEEEvEEPvRT2_:
 5891|  13.3k|{
 5892|  13.3k|    return make_value<Context>(value).ref_value;
 5893|  13.3k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDaRT0_:
 5826|  13.3k|{
 5827|  13.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5828|       |
 5829|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5830|  13.3k|                                  needs_context_tag>) {
 5831|  13.3k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1057|  13.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5832|       |    }
 5833|       |    else {
 5834|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5835|       |            value, context_tag<Context>{}));
 5836|       |    }
 5837|  13.3k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 5660|  13.3k|    {                                                                        \
 5661|  13.3k|        return val;                                                          \
 5662|  13.3k|    }
_ZN3scn2v46detail15make_value_implINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEERS7_EEDaOT0_:
 5795|  13.3k|{
 5796|  13.3k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5797|  13.3k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5798|       |
 5799|  13.3k|    constexpr bool scannable_char =
 5800|  13.3k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5801|  13.3k|    static_assert(scannable_char,
 5802|  13.3k|                  "Cannot scan an argument of an unsupported character "
 5803|  13.3k|                  "type (i.e. char from a wchar_t source)");
 5804|       |
 5805|  13.3k|    constexpr bool scannable_const =
 5806|  13.3k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5807|  13.3k|    static_assert(scannable_const, "Cannot scan a const argument");
 5808|       |
 5809|  13.3k|    constexpr bool scannable_disabled =
 5810|  13.3k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5811|  13.3k|    static_assert(scannable_disabled,
 5812|  13.3k|                  "Cannot scan an argument that has been disabled by "
 5813|  13.3k|                  "flag (SCN_DISABLE_TYPE_*)");
 5814|       |
 5815|  13.3k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5816|  13.3k|    static_assert(
 5817|  13.3k|        scannable,
 5818|  13.3k|        "Cannot scan an argument. To make a type T scannable, provide "
 5819|  13.3k|        "a scn::scanner<T, CharT> specialization.");
 5820|       |
 5821|  13.3k|    return arg_value{arg};
 5822|  13.3k|}
_ZN3scn2v46detail9arg_valueC2INSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEERT_:
 5603|  13.3k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5604|  13.3k|    {
 5605|  13.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEptEv:
 1813|  13.8k|    {
 1814|  13.8k|        return &value();
 1815|  13.8k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEE5valueISF_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1767|  13.8k|    {
 1768|  13.8k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  13.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  13.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  13.8k|        return this->get_value();
 1770|  13.8k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEE6valuesEv:
 6406|  13.3k|    {
 6407|  13.3k|        return m_values;
 6408|  13.3k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNSt3__117basic_string_viewIwNS8_11char_traitsIwEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6152|  13.3k|        : basic_scan_args(store.desc, store.args.data())
 6153|  13.3k|    {
 6154|  13.3k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8792|  13.3k|        : m_str(r.str)
 8793|  13.3k|    {
 8794|  13.3k|    }
_ZN3scn2v410scan_errorC2ENS1_4codeEPKc:
 3739|   367k|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3740|   367k|    {
 3741|   367k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  | 1036|   367k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3742|   367k|    }
_ZNK3scn2v410scan_error4codeEv:
 3751|  16.9k|    {
 3752|  16.9k|        return m_code;
 3753|  16.9k|    }
_ZN3scn2v46detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3974|  84.5k|{
 3975|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3976|       |                                          const CharT*, const CharT*>) {
 3977|       |        return {first, last};
 3978|       |    }
 3979|  84.5k|    else {
 3980|  84.5k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3981|  84.5k|    }
 3982|  84.5k|}
_ZNK3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE9has_valueEv:
  571|  3.70M|    {
  572|  3.70M|        return m_has_value;
  573|  3.70M|    }
_ZNR3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE14get_unexpectedEv:
  554|   206k|    {
  555|   206k|        return m_unexpected;
  556|   206k|    }
_ZNR3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1744|   195k|    {
 1745|   195k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|   195k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   195k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|   195k|        return this->get_unexpected().error();
 1747|   195k|    }
_ZNK3scn2v46detail9fill_type4sizeEv:
 6948|  4.80k|    {
 6949|  4.80k|        return m_size;
 6950|  4.80k|    }
_ZNK3scn2v46detail12format_specs8get_baseEv:
 6989|  11.9k|    {
 6990|  11.9k|        SCN_GCC_COMPAT_PUSH
 6991|  11.9k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 6992|  11.9k|        switch (type) {
 6993|  2.44k|            case presentation_type::none:
  ------------------
  |  Branch (6993:13): [True: 2.44k, False: 9.49k]
  ------------------
 6994|  2.44k|                return 10;
 6995|    112|            case presentation_type::int_generic:
  ------------------
  |  Branch (6995:13): [True: 112, False: 11.8k]
  ------------------
 6996|    112|                return 0;
 6997|      0|            case presentation_type::int_arbitrary_base:
  ------------------
  |  Branch (6997:13): [True: 0, False: 11.9k]
  ------------------
 6998|      0|                return arbitrary_base;
 6999|       |
 7000|     88|            case presentation_type::int_binary:
  ------------------
  |  Branch (7000:13): [True: 88, False: 11.8k]
  ------------------
 7001|     88|                return 2;
 7002|    102|            case presentation_type::int_octal:
  ------------------
  |  Branch (7002:13): [True: 102, False: 11.8k]
  ------------------
 7003|    102|                return 8;
 7004|     40|            case presentation_type::int_decimal:
  ------------------
  |  Branch (7004:13): [True: 40, False: 11.9k]
  ------------------
 7005|    110|            case presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (7005:13): [True: 70, False: 11.8k]
  ------------------
 7006|    110|                return 10;
 7007|  9.08k|            case presentation_type::int_hex:
  ------------------
  |  Branch (7007:13): [True: 9.08k, False: 2.86k]
  ------------------
 7008|  9.08k|                return 16;
 7009|       |
 7010|      0|            default:
  ------------------
  |  Branch (7010:13): [True: 0, False: 11.9k]
  ------------------
 7011|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1051|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7012|      0|                SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7013|  11.9k|        }
 7014|  11.9k|        SCN_GCC_COMPAT_POP
 7015|  11.9k|    }
_ZN3scn2v46detail12specs_setterC2ERNS1_12format_specsE:
 7027|  46.1k|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v46detail12specs_setter8on_alignENS1_10align_typeE:
 7030|  8.03k|    {
 7031|  8.03k|        m_specs.align = align;
 7032|  8.03k|    }
_ZN3scn2v46detail12specs_setter8on_widthEi:
 7050|  8.38k|    {
 7051|  8.38k|        if (m_specs.precision != 0 && width > m_specs.precision) {
  ------------------
  |  Branch (7051:13): [True: 0, False: 8.38k]
  |  Branch (7051:39): [True: 0, False: 0]
  ------------------
 7052|       |            // clang-format off
 7053|      0|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 7054|       |            // clang-format on
 7055|      0|        }
 7056|       |
 7057|  8.38k|        m_specs.width = width;
 7058|  8.38k|    }
_ZN3scn2v46detail12specs_setter12on_precisionEi:
 7060|  16.7k|    {
 7061|  16.7k|        if (m_specs.width > prec) {
  ------------------
  |  Branch (7061:13): [True: 68, False: 16.6k]
  ------------------
 7062|       |            // clang-format off
 7063|     68|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 7064|       |            // clang-format on
 7065|     68|        }
 7066|       |
 7067|  16.6k|        m_specs.precision = prec;
 7068|  16.6k|    }
_ZN3scn2v46detail12specs_setter7on_typeENS1_17presentation_typeE:
 7071|  52.5k|    {
 7072|  52.5k|        m_specs.type = type;
 7073|  52.5k|    }
_ZN3scn2v46detail12specs_setter17on_charset_singleEDi:
 7076|  2.14M|    {
 7077|  2.14M|        const auto cp_value = static_cast<unsigned>(cp);
 7078|  2.14M|        if (SCN_LIKELY(cp_value <= 127)) {
  ------------------
  |  |  985|  2.14M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 1.76M, False: 385k]
  |  |  ------------------
  ------------------
 7079|  1.76M|            m_specs.charset_literals[cp_value / 8] |=
 7080|  1.76M|                static_cast<unsigned char>(1ul << (cp_value % 8));
 7081|  1.76M|        }
 7082|   385k|        else {
 7083|   385k|            m_specs.charset_has_nonascii = true;
 7084|   385k|        }
 7085|  2.14M|    }
_ZN3scn2v46detail12specs_setter16on_charset_rangeEDiDi:
 7088|  15.3k|    {
 7089|  15.3k|        const auto begin_value = static_cast<unsigned>(begin);
 7090|  15.3k|        const auto end_value = static_cast<unsigned>(end);
 7091|  15.3k|        SCN_EXPECT(begin_value < end_value);
  ------------------
  |  | 1051|  15.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  15.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7092|       |
 7093|  15.3k|        if (SCN_LIKELY(end_value <= 127)) {
  ------------------
  |  |  985|  15.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 7.67k, False: 7.66k]
  |  |  ------------------
  ------------------
 7094|       |            // No need to bit-twiddle with a mask, because with the
 7095|       |            // SCN_ASSUME, -O3 will optimize this to a single operation
 7096|  7.67k|            SCN_ASSUME(begin_value < end_value);
  ------------------
  |  | 1005|  7.67k|#define SCN_ASSUME(x) __builtin_assume(x)
  ------------------
 7097|   498k|            for (auto v = begin_value; v != end_value; ++v) {
  ------------------
  |  Branch (7097:40): [True: 491k, False: 7.67k]
  ------------------
 7098|   491k|                m_specs.charset_literals[v / 8] |=
 7099|   491k|                    static_cast<unsigned char>(1ul << (v % 8));
 7100|   491k|            }
 7101|  7.67k|        }
 7102|  7.66k|        else {
 7103|  7.66k|            m_specs.charset_has_nonascii = true;
 7104|  7.66k|        }
 7105|  15.3k|    }
_ZN3scn2v46detail12specs_setter19on_charset_invertedEv:
 7108|  4.72k|    {
 7109|  4.72k|        m_specs.charset_is_inverted = true;
 7110|  4.72k|    }
_ZN3scn2v46detail12specs_setter14on_regex_flagsENS1_11regex_flagsE:
 7127|  3.65k|    {
 7128|  3.65k|        m_specs.regexp_flags = flags;
 7129|  3.65k|    }
_ZN3scn2v46detail12specs_setter8on_errorEPKc:
 7133|  10.6k|    {
 7134|  10.6k|        SCN_UNLIKELY_ATTR
 7135|  10.6k|        m_error = unexpected_scan_error(scan_error::invalid_format_string, msg);
 7136|  10.6k|    }
_ZNK3scn2v46detail12specs_setter9get_errorEv:
 7144|  2.22M|    {
 7145|  2.22M|        return m_error;
 7146|  2.22M|    }
_ZN3scn2v46detail21unexpected_scan_errorENS0_10scan_error4codeEPKc:
 3916|   207k|{
 3917|   207k|    return unexpected(scan_error{c, m});
 3918|   207k|}
_ZN3scn2v46detail39decode_utf8_code_point_exhaustive_validENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4167|   196k|{
 4168|   196k|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  | 1051|   196k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   196k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4169|       |
 4170|   196k|    const auto is_trailing_code_unit = [](char ch) {
 4171|   196k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4172|   196k|    };
 4173|       |
 4174|   196k|    if (input.size() == 1) {
  ------------------
  |  Branch (4174:9): [True: 164k, False: 32.1k]
  ------------------
 4175|   164k|        SCN_EXPECT(static_cast<unsigned char>(input[0]) < 0x80);
  ------------------
  |  | 1051|   164k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   164k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4176|   164k|        return static_cast<char32_t>(input[0]);
 4177|   164k|    }
 4178|       |
 4179|  32.1k|    if (input.size() == 2) {
  ------------------
  |  Branch (4179:9): [True: 31.0k, False: 1.04k]
  ------------------
 4180|  31.0k|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xe0) == 0xc0);
  ------------------
  |  | 1051|  31.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  31.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4181|  31.0k|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  | 1051|  31.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  31.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4182|       |
 4183|  31.0k|        char32_t cp{};
 4184|  31.0k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 4185|  31.0k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 4186|  31.0k|        return cp;
 4187|  31.0k|    }
 4188|       |
 4189|  1.04k|    if (input.size() == 3) {
  ------------------
  |  Branch (4189:9): [True: 886, False: 154]
  ------------------
 4190|    886|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xf0) == 0xe0);
  ------------------
  |  | 1051|    886|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    886|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4191|    886|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  | 1051|    886|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    886|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4192|    886|        SCN_EXPECT(is_trailing_code_unit(input[2]));
  ------------------
  |  | 1051|    886|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    886|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4193|       |
 4194|    886|        char32_t cp{};
 4195|    886|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 4196|    886|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 4197|    886|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 4198|    886|        return cp;
 4199|    886|    }
 4200|       |
 4201|    154|    if (input.size() == 4) {
  ------------------
  |  Branch (4201:9): [True: 154, False: 0]
  ------------------
 4202|    154|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xf8) == 0xf0);
  ------------------
  |  | 1051|    154|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    154|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4203|    154|        SCN_EXPECT(static_cast<unsigned char>(input[0]) <= 0xf4);
  ------------------
  |  | 1051|    154|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    154|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4204|    154|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  | 1051|    154|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    154|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4205|    154|        SCN_EXPECT(is_trailing_code_unit(input[2]));
  ------------------
  |  | 1051|    154|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    154|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4206|    154|        SCN_EXPECT(is_trailing_code_unit(input[3]));
  ------------------
  |  | 1051|    154|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    154|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4207|       |
 4208|    154|        char32_t cp{};
 4209|    154|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 4210|    154|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 4211|    154|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 4212|    154|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 4213|    154|        return cp;
 4214|    154|    }
 4215|       |
 4216|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 4217|       |    // gcc 7 thinks we'll get here, even when we won't
 4218|      0|    SCN_EXPECT(false);
  ------------------
  |  | 1051|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4219|      0|#endif
 4220|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4221|      0|}
_ZN3scn2v46detail11is_cp_spaceEDi:
 4306|   246M|{
 4307|       |    // Pattern_White_Space property
 4308|   246M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4308:13): [True: 1.09M, False: 245M]
  |  Branch (4308:27): [True: 134k, False: 961k]
  ------------------
 4309|   246M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4309:12): [True: 153k, False: 246M]
  ------------------
 4310|   246M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4310:12): [True: 10.2k, False: 246M]
  ------------------
 4311|   246M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4311:12): [True: 4.69k, False: 246M]
  ------------------
 4312|   246M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4312:12): [True: 5.52k, False: 246M]
  ------------------
 4313|   246M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4313:12): [True: 5.79k, False: 246M]
  ------------------
 4314|   246M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4314:12): [True: 508, False: 246M]
  ------------------
 4315|   246M|}
_ZN3scn2v46detailanENS1_11regex_flagsES2_:
 6878|  1.98k|{
 6879|  1.98k|    return static_cast<regex_flags>(static_cast<unsigned>(a) &
 6880|  1.98k|                                    static_cast<unsigned>(b));
 6881|  1.98k|}
_ZN3scn2v46detailorENS1_11regex_flagsES2_:
 6883|    222|{
 6884|    222|    return static_cast<regex_flags>(static_cast<unsigned>(a) |
 6885|    222|                                    static_cast<unsigned>(b));
 6886|    222|}
_ZN3scn2v46detailoRERNS1_11regex_flagsES2_:
 6898|    222|{
 6899|    222|    return a = a | b;
 6900|    222|}
_ZN3scn2v46detail25get_category_for_arg_typeENS1_8arg_typeE:
 7827|  1.29k|{
 7828|  1.29k|    switch (type) {
 7829|    154|        case arg_type::none_type:
  ------------------
  |  Branch (7829:9): [True: 154, False: 1.14k]
  ------------------
 7830|    154|            return arg_type_category::none;
 7831|       |
 7832|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7832:9): [True: 0, False: 1.29k]
  ------------------
 7833|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7833:9): [True: 0, False: 1.29k]
  ------------------
 7834|    128|        case arg_type::int_type:
  ------------------
  |  Branch (7834:9): [True: 128, False: 1.16k]
  ------------------
 7835|    128|        case arg_type::long_type:
  ------------------
  |  Branch (7835:9): [True: 0, False: 1.29k]
  ------------------
 7836|    128|        case arg_type::llong_type:
  ------------------
  |  Branch (7836:9): [True: 0, False: 1.29k]
  ------------------
 7837|    128|        case arg_type::int128_type:
  ------------------
  |  Branch (7837:9): [True: 0, False: 1.29k]
  ------------------
 7838|    128|            return arg_type_category::integer;
 7839|       |
 7840|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7840:9): [True: 0, False: 1.29k]
  ------------------
 7841|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7841:9): [True: 0, False: 1.29k]
  ------------------
 7842|    128|        case arg_type::uint_type:
  ------------------
  |  Branch (7842:9): [True: 128, False: 1.16k]
  ------------------
 7843|    128|        case arg_type::ulong_type:
  ------------------
  |  Branch (7843:9): [True: 0, False: 1.29k]
  ------------------
 7844|    128|        case arg_type::ullong_type:
  ------------------
  |  Branch (7844:9): [True: 0, False: 1.29k]
  ------------------
 7845|    128|        case arg_type::uint128_type:
  ------------------
  |  Branch (7845:9): [True: 0, False: 1.29k]
  ------------------
 7846|    128|            return arg_type_category::unsigned_integer;
 7847|       |
 7848|    126|        case arg_type::pointer_type:
  ------------------
  |  Branch (7848:9): [True: 126, False: 1.17k]
  ------------------
 7849|    126|            return arg_type_category::pointer;
 7850|    128|        case arg_type::bool_type:
  ------------------
  |  Branch (7850:9): [True: 128, False: 1.16k]
  ------------------
 7851|    128|            return arg_type_category::boolean;
 7852|     58|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7852:9): [True: 58, False: 1.23k]
  ------------------
 7853|    126|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7853:9): [True: 68, False: 1.22k]
  ------------------
 7854|    126|        case arg_type::code_point_type:
  ------------------
  |  Branch (7854:9): [True: 0, False: 1.29k]
  ------------------
 7855|    126|            return arg_type_category::character;
 7856|       |
 7857|      0|        case arg_type::float_type:
  ------------------
  |  Branch (7857:9): [True: 0, False: 1.29k]
  ------------------
 7858|    128|        case arg_type::double_type:
  ------------------
  |  Branch (7858:9): [True: 128, False: 1.16k]
  ------------------
 7859|    128|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7859:9): [True: 0, False: 1.29k]
  ------------------
 7860|    128|            return arg_type_category::floating;
 7861|       |
 7862|     58|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7862:9): [True: 58, False: 1.23k]
  ------------------
 7863|    184|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7863:9): [True: 126, False: 1.17k]
  ------------------
 7864|    252|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7864:9): [True: 68, False: 1.22k]
  ------------------
 7865|    378|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7865:9): [True: 126, False: 1.17k]
  ------------------
 7866|    378|            return arg_type_category::string;
 7867|       |
 7868|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7868:9): [True: 0, False: 1.29k]
  ------------------
 7869|      0|            return arg_type_category::custom;
 7870|       |
 7871|      0|            SCN_CLANG_PUSH
 7872|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7873|      0|        default:
  ------------------
  |  Branch (7873:9): [True: 0, False: 1.29k]
  ------------------
 7874|      0|            SCN_ENSURE(false);
  ------------------
  |  | 1052|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7875|  1.29k|            SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7876|  1.29k|            SCN_CLANG_POP
 7877|  1.29k|    }
 7878|       |
 7879|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7880|  1.29k|}
_ZNO3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1754|  11.6k|    {
 1755|  11.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  11.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  11.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1756|  11.6k|        return std::move(this->get_unexpected().error());
 1757|  11.6k|    }
_ZN3scn2v46detail20check_int_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7915|  8.88k|{
 7916|  8.88k|    if (SCN_UNLIKELY(specs.type > presentation_type::int_hex)) {
  ------------------
  |  |  986|  8.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 5.96k, False: 2.91k]
  |  |  ------------------
  ------------------
 7917|  5.96k|        return handler.on_error("Invalid type specifier for integer type");
 7918|  5.96k|    }
 7919|  2.91k|    if (specs.localized) {
  ------------------
  |  Branch (7919:9): [True: 176, False: 2.74k]
  ------------------
 7920|    176|        if (SCN_UNLIKELY(specs.type == presentation_type::int_binary)) {
  ------------------
  |  |  986|    176|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 16, False: 160]
  |  |  ------------------
  ------------------
 7921|       |            // clang-format off
 7922|     16|            handler.on_error("'b'/'B' specifier not supported for localized integers");
 7923|       |            // clang-format on
 7924|     16|            return;
 7925|     16|        }
 7926|    160|        if (SCN_UNLIKELY(specs.type == presentation_type::int_arbitrary_base)) {
  ------------------
  |  |  986|    160|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 160]
  |  |  ------------------
  ------------------
 7927|       |            // clang-format off
 7928|      0|            return handler.on_error("Arbitrary bases not supported for localized integers");
 7929|       |            // clang-format on
 7930|      0|        }
 7931|    160|    }
 7932|  2.91k|}
_ZN3scn2v46ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 2092|   179k|{
 2093|   179k|    return SCN_FWD(t);
  ------------------
  |  | 1057|   179k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2094|   179k|}
_ZN3scn2v46ranges6detail5size_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3039|    100|    {
 3040|    100|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1057|    100|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3041|    100|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSE_:
 3073|    100|    {
 3074|    100|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3075|    100|    }
_ZN3scn2v46ranges6detail6ssize_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISE_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSE_:
 3096|    100|    {
 3097|    100|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 3098|    100|    }
_ZNK3scn2v46ranges6detail6ssize_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSE_:
 3105|    100|    {
 3106|    100|        return fn::impl(std::forward<T>(t));
 3107|    100|    }
_ZN3scn2v46detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7959|  4.44k|{
 7960|  4.44k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7960:9): [True: 3.17k, False: 1.26k]
  ------------------
 7961|  4.44k|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (7961:10): [True: 194, False: 2.98k]
  ------------------
 7962|  3.17k|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (7962:10): [True: 2.77k, False: 214]
  ------------------
 7963|  2.96k|        SCN_UNLIKELY_ATTR
 7964|  2.96k|        return handler.on_error("Invalid type specifier for float type");
 7965|  2.96k|    }
 7966|  4.44k|}
_ZNK3scn2v48expectedIvNS0_10scan_errorEEcvbEv:
 1738|  3.49M|    {
 1739|  3.49M|        return has_value();
 1740|  3.49M|    }
_ZN3scn2v46detail23check_string_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7971|  12.9k|{
 7972|  12.9k|    if (specs.type == presentation_type::none ||
  ------------------
  |  Branch (7972:9): [True: 3.64k, False: 9.34k]
  ------------------
 7973|  12.9k|        specs.type == presentation_type::string ||
  ------------------
  |  Branch (7973:9): [True: 1.01k, False: 8.33k]
  ------------------
 7974|  12.9k|        specs.type == presentation_type::string_set ||
  ------------------
  |  Branch (7974:9): [True: 5.73k, False: 2.60k]
  ------------------
 7975|  12.9k|        specs.type == presentation_type::regex ||
  ------------------
  |  Branch (7975:9): [True: 102, False: 2.50k]
  ------------------
 7976|  12.9k|        specs.type == presentation_type::regex_escaped) {
  ------------------
  |  Branch (7976:9): [True: 1.09k, False: 1.41k]
  ------------------
 7977|  11.5k|        return;
 7978|  11.5k|    }
 7979|  1.41k|    if (specs.type == presentation_type::character) {
  ------------------
  |  Branch (7979:9): [True: 270, False: 1.14k]
  ------------------
 7980|    270|        if (SCN_UNLIKELY(specs.precision == 0)) {
  ------------------
  |  |  986|    270|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 12, False: 258]
  |  |  ------------------
  ------------------
 7981|       |            // clang-format off
 7982|     12|            return handler.on_error("'c' type specifier for strings requires the field precision to be specified");
 7983|       |            // clang-format on
 7984|     12|        }
 7985|    258|        return;
 7986|    270|    }
 7987|  1.14k|    SCN_UNLIKELY_ATTR
 7988|  1.14k|    handler.on_error("Invalid type specifier for string");
 7989|  1.14k|}
_ZN3scn2v46detail21check_bool_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 8005|  4.44k|{
 8006|  4.44k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (8006:9): [True: 3.17k, False: 1.26k]
  ------------------
 8007|  4.44k|        specs.type != presentation_type::string &&
  ------------------
  |  Branch (8007:9): [True: 2.82k, False: 356]
  ------------------
 8008|  4.44k|        specs.type != presentation_type::int_generic &&
  ------------------
  |  Branch (8008:9): [True: 2.77k, False: 46]
  ------------------
 8009|  4.44k|        specs.type != presentation_type::int_hex &&
  ------------------
  |  Branch (8009:9): [True: 2.75k, False: 26]
  ------------------
 8010|  4.44k|        specs.type != presentation_type::int_binary &&
  ------------------
  |  Branch (8010:9): [True: 2.71k, False: 40]
  ------------------
 8011|  4.44k|        specs.type != presentation_type::int_unsigned_decimal &&
  ------------------
  |  Branch (8011:9): [True: 2.68k, False: 26]
  ------------------
 8012|  4.44k|        specs.type != presentation_type::int_octal &&
  ------------------
  |  Branch (8012:9): [True: 2.64k, False: 40]
  ------------------
 8013|  4.44k|        specs.type != presentation_type::int_decimal) {
  ------------------
  |  Branch (8013:9): [True: 2.62k, False: 16]
  ------------------
 8014|  2.62k|        SCN_UNLIKELY_ATTR
 8015|  2.62k|        return handler.on_error("Invalid type specifier for boolean");
 8016|  2.62k|    }
 8017|  4.44k|}
_ZN3scn2v46detail21check_char_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7937|  4.33k|{
 7938|  4.33k|    if (specs.type > presentation_type::int_hex ||
  ------------------
  |  Branch (7938:9): [True: 2.96k, False: 1.37k]
  ------------------
 7939|  4.33k|        specs.type == presentation_type::int_arbitrary_base) {
  ------------------
  |  Branch (7939:9): [True: 0, False: 1.37k]
  ------------------
 7940|  2.96k|        SCN_UNLIKELY_ATTR
 7941|  2.96k|        return handler.on_error("Invalid type specifier for character type");
 7942|  2.96k|    }
 7943|  4.33k|}
_ZN3scn2v46detail24check_pointer_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7994|  4.33k|{
 7995|  4.33k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7995:9): [True: 3.11k, False: 1.21k]
  ------------------
 7996|  4.33k|        specs.type != presentation_type::pointer) {
  ------------------
  |  Branch (7996:9): [True: 3.10k, False: 16]
  ------------------
 7997|  3.10k|        SCN_UNLIKELY_ATTR
 7998|  3.10k|        return handler.on_error("Invalid type specifier for pointer");
 7999|  3.10k|    }
 8000|  4.33k|}
_ZN3scn2v46detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3974|   246M|{
 3975|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3976|       |                                          const CharT*, const CharT*>) {
 3977|       |        return {first, last};
 3978|       |    }
 3979|   246M|    else {
 3980|   246M|        return {first, static_cast<size_t>(std::distance(first, last))};
 3981|   246M|    }
 3982|   246M|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3478|  2.05M|    {
 3479|  2.05M|        return m_iterator;
 3480|  2.05M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3482|  2.13M|    {
 3483|  2.13M|        return m_sentinel;
 3484|  2.13M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3478|  3.49M|    {
 3479|  3.49M|        return m_iterator;
 3480|  3.49M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3482|   494M|    {
 3483|   494M|        return m_sentinel;
 3484|   494M|    }
_ZN3scn2v46detail10locale_refC2Ev:
 8813|   104k|    constexpr locale_ref() = default;
_ZN3scn2v46detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1348|    354|{
 1349|    354|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1350|    354|}
_ZNR3scn2v410unexpectedINS0_4impl9eof_errorEE5errorEv:
  364|  3.53k|    {
  365|  3.53k|        return m_unexpected;
  366|  3.53k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  349|   208k|        : m_unexpected(std::forward<Err>(e))
  350|   208k|    {
  351|   208k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1036|   208k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|   208k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1614|   191k|        : base(unexpect, std::move(e.error())),
 1615|   191k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|   191k|    {
 1617|   191k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  449|   191k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   191k|          m_has_value(false)
  451|   191k|    {
  452|   191k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   196k|    {
 1315|   196k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1614|  36.8k|        : base(unexpect, std::move(e.error())),
 1615|  36.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  36.8k|    {
 1617|  36.8k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|  37.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  37.8k|          m_has_value(false)
  451|  37.8k|    {
  452|  37.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  63.7k|    {
 1315|  63.7k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1568|  23.5k|        : base(std::in_place, std::forward<U>(val)),
 1569|  23.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  23.5k|    {
 1571|  23.5k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  23.5k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  23.5k|    {
  442|  23.5k|    }
_ZNK3scn2v48expectedIPKcNS0_10scan_errorEEcvbEv:
 1738|  64.6k|    {
 1739|  64.6k|        return has_value();
 1740|  64.6k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  489|   126k|    {
  490|   126k|        return m_has_value;
  491|   126k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5errorEv:
 1744|  36.8k|    {
 1745|  36.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  36.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  36.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|  36.8k|        return this->get_unexpected().error();
 1747|  36.8k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  36.8k|    {
  473|  36.8k|        return m_unexpected;
  474|  36.8k|    }
_ZNO3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1803|  15.9k|    {
 1804|  15.9k|        return std::move(value());
 1805|  15.9k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1767|  24.9k|    {
 1768|  24.9k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  24.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  24.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  24.9k|        return this->get_value();
 1770|  24.9k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  455|  24.9k|    {
  456|  24.9k|        return m_value;
  457|  24.9k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1614|  94.0k|        : base(unexpect, std::move(e.error())),
 1615|  94.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  94.0k|    {
 1617|  94.0k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|   101k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   101k|          m_has_value(false)
  451|   101k|    {
  452|   101k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   249k|    {
 1315|   249k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1568|   147k|        : base(std::in_place, std::forward<U>(val)),
 1569|   147k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|   147k|    {
 1571|   147k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|   147k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   147k|    {
  442|   147k|    }
_ZNK3scn2v48expectedIPKwNS0_10scan_errorEEcvbEv:
 1738|   257k|    {
 1739|   257k|        return has_value();
 1740|   257k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  489|   492k|    {
  490|   492k|        return m_has_value;
  491|   492k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5errorEv:
 1744|  94.0k|    {
 1745|  94.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  94.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  94.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|  94.0k|        return this->get_unexpected().error();
 1747|  94.0k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  94.0k|    {
  473|  94.0k|        return m_unexpected;
  474|  94.0k|    }
_ZNO3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1803|   108k|    {
 1804|   108k|        return std::move(value());
 1805|   108k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1767|   140k|    {
 1768|   140k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   140k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   140k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   140k|        return this->get_value();
 1770|   140k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  455|   140k|    {
  456|   140k|        return m_value;
  457|   140k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1977|  8.48k|    {
 1978|  8.48k|        return detail::transform_error_impl(std::move(*this),
 1979|  8.48k|                                            std::forward<F>(f));
 1980|  8.48k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1460|  8.48k|{
 1461|       |    if constexpr (std::is_void_v<Ret>) {
 1462|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1463|       |        if (SCN_LIKELY(exp.has_value())) {
 1464|       |            return result(*std::forward<Exp>(exp));
 1465|       |        }
 1466|       |
 1467|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1468|       |        return result(unexpect, monostate{});
 1469|       |    }
 1470|  8.48k|    else {
 1471|  8.48k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1472|  8.48k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  985|  8.48k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 8.48k, False: 0]
  |  |  ------------------
  ------------------
 1473|  8.48k|                   ? result(*std::forward<Exp>(exp))
 1474|  8.48k|                   : result(unexpect,
 1475|      0|                            trivial_invoke(std::forward<F>(f),
 1476|      0|                                           std::forward<Exp>(exp).error()));
 1477|  8.48k|    }
 1478|  8.48k|}
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  98.4k|    {
  490|  98.4k|        return m_has_value;
  491|  98.4k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1803|  10.4k|    {
 1804|  10.4k|        return std::move(value());
 1805|  10.4k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1767|  46.2k|    {
 1768|  46.2k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  46.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  46.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  46.2k|        return this->get_value();
 1770|  46.2k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  46.2k|    {
  456|  46.2k|        return m_value;
  457|  46.2k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1754|    102|    {
 1755|    102|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|    102|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    102|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1756|    102|        return std::move(this->get_unexpected().error());
 1757|    102|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|    102|    {
  473|    102|        return m_unexpected;
  474|    102|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1624|    952|        : base(unexpect, std::forward<Args>(args)...),
 1625|    952|          ctor_base(detail::non_default_ctor_tag_t{})
 1626|    952|    {
 1627|    952|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE4argsEv:
 8866|  5.93k|    {
 8867|  5.93k|        return m_args;
 8868|  5.93k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE6localeEv:
 8871|  32.9k|    {
 8872|  32.9k|        return m_locale;
 8873|  32.9k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2ES7_NS1_10locale_refE:
 8877|  59.8k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1055|  59.8k|    static_cast<    \
  |  | 1056|  59.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1055|  59.8k|    static_cast<    \
  |  | 1056|  59.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8878|  59.8k|    {
 8879|  59.8k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2998|  8.27k|    {
 2999|  8.27k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1057|  8.27k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3000|  8.27k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2979|  8.27k|    {
 2980|  8.27k|        return t.data();
 2981|  8.27k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE4argsEv:
 8866|  64.8k|    {
 8867|  64.8k|        return m_args;
 8868|  64.8k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE6localeEv:
 8871|  77.6k|    {
 8872|  77.6k|        return m_locale;
 8873|  77.6k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2ES7_NS1_10locale_refE:
 8877|   119k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1055|   119k|    static_cast<    \
  |  | 1056|   119k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1055|   119k|    static_cast<    \
  |  | 1056|   119k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8878|   119k|    {
 8879|   119k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1614|   371k|        : base(unexpect, std::move(e.error())),
 1615|   371k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|   371k|    {
 1617|   371k|    }
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  548|   371k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  549|   371k|          m_has_value(false)
  550|   371k|    {
  551|   371k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIvNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   371k|    {
 1315|   371k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2Ev:
 1550|   465k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2Ev:
  528|   465k|        : m_deferred_init(), m_has_value(true)
  529|   465k|    {
  530|   465k|    }
_ZNK3scn2v46detail9fill_type13get_code_unitIcEET_v:
 6954|  1.16k|    {
 6955|  1.16k|        SCN_EXPECT(m_size <= sizeof(CharT));
  ------------------
  |  | 1051|  1.16k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.16k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6956|  1.16k|        CharT r{};
 6957|  1.16k|        std::memcpy(&r, m_data, m_size);
 6958|  1.16k|        return r;
 6959|  1.16k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  349|  1.72k|        : m_unexpected(std::forward<Err>(e))
  350|  1.72k|    {
  351|  1.72k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1036|  1.72k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  1.72k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  358|  2.08k|        : m_unexpected(std::forward<Args>(args)...)
  359|  2.08k|    {
  360|  2.08k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1036|  2.08k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  2.08k|    }
_ZNK3scn2v46detail9fill_type14get_code_unitsIcEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 6963|  1.71k|    {
 6964|  1.71k|        return {reinterpret_cast<const CharT*>(m_data), m_size};
 6965|  1.71k|    }
_ZNK3scn2v46ranges6detail6ssize_2fnclIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSD_:
 3105|    118|    {
 3106|    118|        return fn::impl(std::forward<T>(t));
 3107|    118|    }
_ZN3scn2v46ranges6detail6ssize_2fn4implIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISD_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSD_EEEEE15difference_typeEE4typeELm8EElSM_E4typeE_EEOSD_:
 3096|    118|    {
 3097|    118|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 3098|    118|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3073|    118|    {
 3074|    118|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3075|    118|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3039|    118|    {
 3040|    118|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1057|    118|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3041|    118|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  349|    368|        : m_unexpected(std::forward<Err>(e))
  350|    368|    {
  351|    368|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1036|    368|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|    368|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  349|     22|        : m_unexpected(std::forward<Err>(e))
  350|     22|    {
  351|     22|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1036|     22|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|     22|    }
_ZNR3scn2v410unexpectedINS0_4impl11parse_errorEE5errorEv:
  364|  69.1k|    {
  365|  69.1k|        return m_unexpected;
  366|  69.1k|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  358|  11.4k|        : m_unexpected(std::forward<Args>(args)...)
  359|  11.4k|    {
  360|  11.4k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1036|  11.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  11.4k|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  349|   112k|        : m_unexpected(std::forward<Err>(e))
  350|   112k|    {
  351|   112k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1036|   112k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|   112k|    }
_ZNR3scn2v410unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  364|   112k|    {
  365|   112k|        return m_unexpected;
  366|   112k|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  358|   112k|        : m_unexpected(std::forward<Args>(args)...)
  359|   112k|    {
  360|   112k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1036|   112k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|   112k|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1348|  1.07k|{
 1349|  1.07k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1350|  1.07k|}
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  349|  10.3k|        : m_unexpected(std::forward<Err>(e))
  350|  10.3k|    {
  351|  10.3k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1036|  10.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  10.3k|    }
_ZN3scn2v46detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JS8_EvEEDcOT_DpOT0_:
 1348|  1.73k|{
 1349|  1.73k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1350|  1.73k|}
_ZNK3scn2v46ranges6detail6ssize_2fnclIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSF_:
 3105|     16|    {
 3106|     16|        return fn::impl(std::forward<T>(t));
 3107|     16|    }
_ZN3scn2v46ranges6detail6ssize_2fn4implIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISF_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSF_EEEEE15difference_typeEE4typeELm8EElSO_E4typeE_EEOSF_:
 3096|     16|    {
 3097|     16|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 3098|     16|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSF_:
 3073|     16|    {
 3074|     16|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3075|     16|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESG_E4typeEOSH_NS0_6detail12priority_tagILm2EEE:
 3039|     16|    {
 3040|     16|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1057|     16|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3041|     16|    }
_ZN3scn2v46detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|   167k|{
  316|   167k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1057|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|   167k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3494|   133k|    {
 3495|   133k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3496|   133k|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1614|    530|        : base(unexpect, std::move(e.error())),
 1615|    530|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|    530|    {
 1617|    530|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|    530|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    530|          m_has_value(false)
  451|    530|    {
  452|    530|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  52.1k|    {
 1315|  52.1k|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1568|  51.5k|        : base(std::in_place, std::forward<U>(val)),
 1569|  51.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  51.5k|    {
 1571|  51.5k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  51.5k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  51.5k|    {
  442|  51.5k|    }
_ZNK3scn2v48expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1738|  41.5k|    {
 1739|  41.5k|        return has_value();
 1740|  41.5k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1793|  35.7k|    {
 1794|  35.7k|        return value();
 1795|  35.7k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEC2IS7_vEEOT_:
 1568|  11.3k|        : base(std::in_place, std::forward<U>(val)),
 1569|  11.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  11.3k|    {
 1571|  11.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  440|  11.3k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  11.3k|    {
  442|  11.3k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  11.8k|    {
 1315|  11.8k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1614|    530|        : base(unexpect, std::move(e.error())),
 1615|    530|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|    530|    {
 1617|    530|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|    530|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    530|          m_has_value(false)
  451|    530|    {
  452|    530|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEcvbEv:
 1738|  8.32k|    {
 1739|  8.32k|        return has_value();
 1740|  8.32k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE9has_valueEv:
  489|  21.5k|    {
  490|  21.5k|        return m_has_value;
  491|  21.5k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1793|  6.24k|    {
 1794|  6.24k|        return value();
 1795|  6.24k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1767|  9.29k|    {
 1768|  9.29k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  9.29k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  9.29k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  9.29k|        return this->get_value();
 1770|  9.29k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE9get_valueEv:
  455|  9.29k|    {
  456|  9.29k|        return m_value;
  457|  9.29k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEC2ISB_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSE_IXsr3stdE16is_convertible_vISG_SB_EEvE4typeELSK_0EEEONS0_10unexpectedISF_EE:
 1614|    238|        : base(unexpect, std::move(e.error())),
 1615|    238|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|    238|    {
 1617|    238|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|    238|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    238|          m_has_value(false)
  451|    238|    {
  452|    238|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  5.83k|    {
 1315|  5.83k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEC2ISA_vEEOT_:
 1568|  5.60k|        : base(std::in_place, std::forward<U>(val)),
 1569|  5.60k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  5.60k|    {
 1571|  5.60k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2IJSB_EvEENS3_10in_place_tEDpOT_:
  440|  5.60k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  5.60k|    {
  442|  5.60k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1977|    978|    {
 1978|    978|        return detail::transform_error_impl(std::move(*this),
 1979|    978|                                            std::forward<F>(f));
 1980|    978|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9eof_errorEEERFNS0_10scan_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1460|    978|{
 1461|       |    if constexpr (std::is_void_v<Ret>) {
 1462|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1463|       |        if (SCN_LIKELY(exp.has_value())) {
 1464|       |            return result(*std::forward<Exp>(exp));
 1465|       |        }
 1466|       |
 1467|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1468|       |        return result(unexpect, monostate{});
 1469|       |    }
 1470|    978|    else {
 1471|    978|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1472|    978|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  985|    978|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 978, False: 0]
  |  |  ------------------
  ------------------
 1473|    978|                   ? result(*std::forward<Exp>(exp))
 1474|    978|                   : result(unexpect,
 1475|      0|                            trivial_invoke(std::forward<F>(f),
 1476|      0|                                           std::forward<Exp>(exp).error()));
 1477|    978|    }
 1478|    978|}
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1803|  3.04k|    {
 1804|  3.04k|        return std::move(value());
 1805|  3.04k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IS7_vEEOT_:
 1568|  2.79k|        : base(std::in_place, std::forward<U>(val)),
 1569|  2.79k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  2.79k|    {
 1571|  2.79k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  440|  2.79k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.79k|    {
  442|  2.79k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  11.6k|    {
 1315|  11.6k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE5errorEv:
 1754|    460|    {
 1755|    460|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|    460|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    460|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1756|    460|        return std::move(this->get_unexpected().error());
 1757|    460|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE14get_unexpectedEv:
  472|    460|    {
  473|    460|        return m_unexpected;
  474|    460|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1624|  1.90k|        : base(unexpect, std::forward<Args>(args)...),
 1625|  1.90k|          ctor_base(detail::non_default_ctor_tag_t{})
 1626|  1.90k|    {
 1627|  1.90k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|  7.98k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  7.98k|          m_has_value(false)
  451|  7.98k|    {
  452|  7.98k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|  2.29k|    {
 2868|  2.29k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|  2.29k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|  2.29k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESJ_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|  2.29k|    {
 2849|  2.29k|        return decay_copy(t.begin());
 2850|  2.29k|    }
_ZN3scn2v46ranges6detail10decay_copyINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEEu7__decayIT_EOSA_:
 2092|  4.97k|{
 2093|  4.97k|    return SCN_FWD(t);
  ------------------
  |  | 1057|  4.97k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2094|  4.97k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_E5beginEv:
 3478|  2.29k|    {
 3479|  2.29k|        return m_iterator;
 3480|  2.29k|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2924|  2.29k|    {
 2925|  2.29k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|  2.29k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2926|  2.29k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EESD_SD_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2906|  2.29k|    {
 2907|  2.29k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1057|  2.29k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2908|  2.29k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_E3endEv:
 3482|  2.29k|    {
 3483|  2.29k|        return m_sentinel;
 3484|  2.29k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_EC2ISA_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SA_EEvE4typeELPv0EEESF_SA_:
 3463|  2.29k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|  2.29k|    static_cast<    \
  |  | 1056|  2.29k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|  2.29k|    static_cast<    \
  |  | 1056|  2.29k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3464|  2.29k|    {
 3465|  2.29k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEcvbEv:
 1738|  5.83k|    {
 1739|  5.83k|        return has_value();
 1740|  5.83k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE9has_valueEv:
  489|  11.6k|    {
  490|  11.6k|        return m_has_value;
  491|  11.6k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEE5errorEv:
 1744|    238|    {
 1745|    238|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|    238|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    238|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|    238|        return this->get_unexpected().error();
 1747|    238|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|    238|    {
  473|    238|        return m_unexpected;
  474|    238|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1803|  5.60k|    {
 1804|  5.60k|        return std::move(value());
 1805|  5.60k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1767|  5.60k|    {
 1768|  5.60k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  5.60k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  5.60k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  5.60k|        return this->get_value();
 1770|  5.60k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE9get_valueEv:
  455|  5.60k|    {
  456|  5.60k|        return m_value;
  457|  5.60k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  11.3k|    {
 1315|  11.3k|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1568|  11.3k|        : base(std::in_place, std::forward<U>(val)),
 1569|  11.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  11.3k|    {
 1571|  11.3k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  440|  11.3k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  11.3k|    {
  442|  11.3k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1738|  11.3k|    {
 1739|  11.3k|        return has_value();
 1740|  11.3k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  489|  22.7k|    {
  490|  22.7k|        return m_has_value;
  491|  22.7k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1803|  11.3k|    {
 1804|  11.3k|        return std::move(value());
 1805|  11.3k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1767|  11.3k|    {
 1768|  11.3k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  11.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  11.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  11.3k|        return this->get_value();
 1770|  11.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  455|  11.3k|    {
  456|  11.3k|        return m_value;
  457|  11.3k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1614|  6.07k|        : base(unexpect, std::move(e.error())),
 1615|  6.07k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  6.07k|    {
 1617|  6.07k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1614|    852|        : base(unexpect, std::move(e.error())),
 1615|    852|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|    852|    {
 1617|    852|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|  1.31k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.31k|          m_has_value(false)
  451|  1.31k|    {
  452|  1.31k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  9.35k|    {
 1315|  9.35k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2INS8_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S8_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1614|  5.97k|        : base(unexpect, std::move(e.error())),
 1615|  5.97k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  5.97k|    {
 1617|  5.97k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJNS9_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|  5.97k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  5.97k|          m_has_value(false)
  451|  5.97k|    {
  452|  5.97k|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEcvbEv:
 1738|  8.62k|    {
 1739|  8.62k|        return has_value();
 1740|  8.62k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE9has_valueEv:
  489|  16.8k|    {
  490|  16.8k|        return m_has_value;
  491|  16.8k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5errorEv:
 1744|  3.17k|    {
 1745|  3.17k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  3.17k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  3.17k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|  3.17k|        return this->get_unexpected().error();
 1747|  3.17k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE14get_unexpectedEv:
  472|  4.29k|    {
  473|  4.29k|        return m_unexpected;
  474|  4.29k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEC2ISB_vEEOT_:
 1568|  1.53k|        : base(std::in_place, std::forward<U>(val)),
 1569|  1.53k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  1.53k|    {
 1571|  1.53k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  440|  1.53k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.53k|    {
  442|  1.53k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  1.53k|    {
 1315|  1.53k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1767|  2.07k|    {
 1768|  2.07k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  2.07k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  2.07k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  2.07k|        return this->get_value();
 1770|  2.07k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE9get_valueEv:
  455|  2.07k|    {
  456|  2.07k|        return m_value;
  457|  2.07k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEcvbEv:
 1738|  1.14k|    {
 1739|  1.14k|        return has_value();
 1740|  1.14k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9has_valueEv:
  489|  3.07k|    {
  490|  3.07k|        return m_has_value;
  491|  3.07k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  1.14k|    {
 1315|  1.14k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEdeISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSG_v:
 1803|  1.53k|    {
 1804|  1.53k|        return std::move(value());
 1805|  1.53k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEE5valueISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1767|  1.53k|    {
 1768|  1.53k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  1.53k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.53k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  1.53k|        return this->get_value();
 1770|  1.53k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9get_valueEv:
  455|  1.53k|    {
  456|  1.53k|        return m_value;
  457|  1.53k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE3endEv:
 3482|   111k|    {
 3483|   111k|        return m_sentinel;
 3484|   111k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE15transform_errorIRFNS2_11parse_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1977|  2.53k|    {
 1978|  2.53k|        return detail::transform_error_impl(std::move(*this),
 1979|  2.53k|                                            std::forward<F>(f));
 1980|  2.53k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9eof_errorEEERFNS4_11parse_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1460|  2.53k|{
 1461|       |    if constexpr (std::is_void_v<Ret>) {
 1462|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1463|       |        if (SCN_LIKELY(exp.has_value())) {
 1464|       |            return result(*std::forward<Exp>(exp));
 1465|       |        }
 1466|       |
 1467|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1468|       |        return result(unexpect, monostate{});
 1469|       |    }
 1470|  2.53k|    else {
 1471|  2.53k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1472|  2.53k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  985|  2.53k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 2.07k, False: 460]
  |  |  ------------------
  ------------------
 1473|  2.53k|                   ? result(*std::forward<Exp>(exp))
 1474|  2.53k|                   : result(unexpect,
 1475|    460|                            trivial_invoke(std::forward<F>(f),
 1476|    460|                                           std::forward<Exp>(exp).error()));
 1477|  2.53k|    }
 1478|  2.53k|}
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IS7_vEEOT_:
 1568|  2.07k|        : base(std::in_place, std::forward<U>(val)),
 1569|  2.07k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  2.07k|    {
 1571|  2.07k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  440|  2.07k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.07k|    {
  442|  2.07k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1624|    460|        : base(unexpect, std::forward<Args>(args)...),
 1625|    460|          ctor_base(detail::non_default_ctor_tag_t{})
 1626|    460|    {
 1627|    460|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1803|  2.07k|    {
 1804|  2.07k|        return std::move(value());
 1805|  2.07k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE5beginEv:
 3478|   124k|    {
 3479|   124k|        return m_iterator;
 3480|   124k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEEC2IS9_vEEOT_:
 1568|  1.14k|        : base(std::in_place, std::forward<U>(val)),
 1569|  1.14k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  1.14k|    {
 1571|  1.14k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  440|  1.14k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.14k|    {
  442|  1.14k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESA_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1977|  1.14k|    {
 1978|  1.14k|        return detail::transform_error_impl(std::move(*this),
 1979|  1.14k|                                            std::forward<F>(f));
 1980|  1.14k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS4_27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEENS4_9eof_errorEEERFNS0_10scan_errorESC_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSJ_OT0_:
 1460|  1.14k|{
 1461|       |    if constexpr (std::is_void_v<Ret>) {
 1462|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1463|       |        if (SCN_LIKELY(exp.has_value())) {
 1464|       |            return result(*std::forward<Exp>(exp));
 1465|       |        }
 1466|       |
 1467|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1468|       |        return result(unexpect, monostate{});
 1469|       |    }
 1470|  1.14k|    else {
 1471|  1.14k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1472|  1.14k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  985|  1.14k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 1.14k, False: 0]
  |  |  ------------------
  ------------------
 1473|  1.14k|                   ? result(*std::forward<Exp>(exp))
 1474|  1.14k|                   : result(unexpect,
 1475|      0|                            trivial_invoke(std::forward<F>(f),
 1476|      0|                                           std::forward<Exp>(exp).error()));
 1477|  1.14k|    }
 1478|  1.14k|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EE9has_valueEv:
  489|  2.28k|    {
  490|  2.28k|        return m_has_value;
  491|  2.28k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEEdeIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1803|  1.14k|    {
 1804|  1.14k|        return std::move(value());
 1805|  1.14k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEE5valueIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1767|  1.14k|    {
 1768|  1.14k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  1.14k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.14k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  1.14k|        return this->get_value();
 1770|  1.14k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EE9get_valueEv:
  455|  1.14k|    {
  456|  1.14k|        return m_value;
  457|  1.14k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEC2IS9_vEEOT_:
 1568|  1.14k|        : base(std::in_place, std::forward<U>(val)),
 1569|  1.14k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  1.14k|    {
 1571|  1.14k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  440|  1.14k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.14k|    {
  442|  1.14k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  1.14k|    {
 1315|  1.14k|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEcvbEv:
 1738|  1.14k|    {
 1739|  1.14k|        return has_value();
 1740|  1.14k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  2.28k|    {
  490|  2.28k|        return m_has_value;
  491|  2.28k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEdeIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1803|  1.14k|    {
 1804|  1.14k|        return std::move(value());
 1805|  1.14k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEE5valueIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1767|  1.14k|    {
 1768|  1.14k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  1.14k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.14k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  1.14k|        return this->get_value();
 1770|  1.14k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.14k|    {
  456|  1.14k|        return m_value;
  457|  1.14k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeES6_EUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1977|  1.12k|    {
 1978|  1.12k|        return detail::transform_error_impl(std::move(*this),
 1979|  1.12k|                                            std::forward<F>(f));
 1980|  1.12k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES8_EUlSA_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1460|  1.12k|{
 1461|       |    if constexpr (std::is_void_v<Ret>) {
 1462|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1463|       |        if (SCN_LIKELY(exp.has_value())) {
 1464|       |            return result(*std::forward<Exp>(exp));
 1465|       |        }
 1466|       |
 1467|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1468|       |        return result(unexpect, monostate{});
 1469|       |    }
 1470|  1.12k|    else {
 1471|  1.12k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1472|  1.12k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  985|  1.12k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 0, False: 1.12k]
  |  |  ------------------
  ------------------
 1473|  1.12k|                   ? result(*std::forward<Exp>(exp))
 1474|  1.12k|                   : result(unexpect,
 1475|  1.12k|                            trivial_invoke(std::forward<F>(f),
 1476|  1.12k|                                           std::forward<Exp>(exp).error()));
 1477|  1.12k|    }
 1478|  1.12k|}
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5errorEv:
 1754|  1.12k|    {
 1755|  1.12k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  1.12k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.12k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1756|  1.12k|        return std::move(this->get_unexpected().error());
 1757|  1.12k|    }
_ZN3scn2v413scan_expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EEEC2EONS0_8expectedIS7_NS0_10scan_errorEEE:
 3909|  1.90k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1055|  1.90k|    static_cast<    \
  |  | 1056|  1.90k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3910|  1.90k|    {
 3911|  1.90k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEC2ISA_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SA_EEvE4typeELPv0EEESK_SF_:
 3463|  51.7k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|  51.7k|    static_cast<    \
  |  | 1056|  51.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|  51.7k|    static_cast<    \
  |  | 1056|  51.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3464|  51.7k|    {
 3465|  51.7k|    }
_ZN3scn2v48expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEEC2ISH_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1614|     24|        : base(unexpect, std::move(e.error())),
 1615|     24|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|     24|    {
 1617|     24|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  636|     24|        : m_has_value(false)
  637|     24|    {
  638|     24|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|     24|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESI_EEEvDpOT_:
  700|     24|    {
  701|     24|        scn::detail::construct_at(unexpected_ptr(),
  702|     24|                                  std::forward<Args>(args)...);
  703|     24|        m_has_value = false;
  704|     24|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|     72|    {
  730|     72|        return reinterpret_cast<unexpected<E>*>(
  731|     72|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1021|     72|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|     72|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|     24|    {
 1315|     24|    }
_ZNK3scn2v48expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEEcvbEv:
 1738|     24|    {
 1739|     24|        return has_value();
 1740|     24|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE9has_valueEv:
  686|     72|    {
  687|     72|        return m_has_value;
  688|     72|    }
_ZNR3scn2v48expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEE5errorEv:
 1744|     24|    {
 1745|     24|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|     24|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|     24|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|     24|        return this->get_unexpected().error();
 1747|     24|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  669|     24|    {
  670|     24|        return *unexpected_ptr();
  671|     24|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EED2Ev:
  642|     24|    {
  643|     24|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 0, False: 24]
  ------------------
  644|      0|            destroy_value();
  645|      0|        }
  646|     24|        else {
  647|     24|            destroy_unexpected();
  648|     24|        }
  649|     24|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|     24|    {
  712|     24|        scn::detail::destroy_at(unexpected_ptr());
  713|     24|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEcvbEv:
 1738|  12.0k|    {
 1739|  12.0k|        return has_value();
 1740|  12.0k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE9has_valueEv:
  489|  23.2k|    {
  490|  23.2k|        return m_has_value;
  491|  23.2k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEE5errorEv:
 1744|  7.59k|    {
 1745|  7.59k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  7.59k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  7.59k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|  7.59k|        return this->get_unexpected().error();
 1747|  7.59k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  7.59k|    {
  473|  7.59k|        return m_unexpected;
  474|  7.59k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1803|  2.79k|    {
 1804|  2.79k|        return std::move(value());
 1805|  2.79k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1767|  3.65k|    {
 1768|  3.65k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  3.65k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  3.65k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  3.65k|        return this->get_value();
 1770|  3.65k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  3.65k|    {
  456|  3.65k|        return m_value;
  457|  3.65k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1614|  1.04k|        : base(unexpect, std::move(e.error())),
 1615|  1.04k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  1.04k|    {
 1617|  1.04k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  1.14k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.14k|          m_has_value(false)
  451|  1.14k|    {
  452|  1.14k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  14.5k|    {
 1315|  14.5k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1614|  11.4k|        : base(unexpect, std::move(e.error())),
 1615|  11.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  11.4k|    {
 1617|  11.4k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|  11.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  11.4k|          m_has_value(false)
  451|  11.4k|    {
  452|  11.4k|    }
_ZNK3scn2v48expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1738|  15.4k|    {
 1739|  15.4k|        return has_value();
 1740|  15.4k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  489|  24.1k|    {
  490|  24.1k|        return m_has_value;
  491|  24.1k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1744|  5.69k|    {
 1745|  5.69k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  5.69k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  5.69k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|  5.69k|        return this->get_unexpected().error();
 1747|  5.69k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  472|  5.69k|    {
  473|  5.69k|        return m_unexpected;
  474|  5.69k|    }
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1568|  3.71k|        : base(std::in_place, std::forward<U>(val)),
 1569|  3.71k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  3.71k|    {
 1571|  3.71k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  440|  3.71k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  3.71k|    {
  442|  3.71k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  3.71k|    {
 1315|  3.71k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1767|  1.99k|    {
 1768|  1.99k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  1.99k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.99k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  1.99k|        return this->get_value();
 1770|  1.99k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  455|  1.99k|    {
  456|  1.99k|        return m_value;
  457|  1.99k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1738|  2.78k|    {
 1739|  2.78k|        return has_value();
 1740|  2.78k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  489|  7.42k|    {
  490|  7.42k|        return m_has_value;
  491|  7.42k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  2.78k|    {
 1315|  2.78k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1803|  3.71k|    {
 1804|  3.71k|        return std::move(value());
 1805|  3.71k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1767|  3.71k|    {
 1768|  3.71k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  3.71k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  3.71k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  3.71k|        return this->get_value();
 1770|  3.71k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  455|  3.71k|    {
  456|  3.71k|        return m_value;
  457|  3.71k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3373|   155k|    {
 3374|   155k|        return detail::to_address(ranges::begin(derived()));
 3375|   155k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|   155k|    {
 2868|   155k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|   155k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|   155k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|   155k|    {
 2849|   155k|        return decay_copy(t.begin());
 2850|   155k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3332|   155k|    {
 3333|   155k|        return static_cast<D&>(*this);
 3334|   155k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1568|  1.99k|        : base(std::in_place, std::forward<U>(val)),
 1569|  1.99k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  1.99k|    {
 1571|  1.99k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  1.99k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.99k|    {
  442|  1.99k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1568|  2.78k|        : base(std::in_place, std::forward<U>(val)),
 1569|  2.78k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  2.78k|    {
 1571|  2.78k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  440|  2.78k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.78k|    {
  442|  2.78k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1977|  2.78k|    {
 1978|  2.78k|        return detail::transform_error_impl(std::move(*this),
 1979|  2.78k|                                            std::forward<F>(f));
 1980|  2.78k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSG_OT0_:
 1460|  2.78k|{
 1461|       |    if constexpr (std::is_void_v<Ret>) {
 1462|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1463|       |        if (SCN_LIKELY(exp.has_value())) {
 1464|       |            return result(*std::forward<Exp>(exp));
 1465|       |        }
 1466|       |
 1467|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1468|       |        return result(unexpect, monostate{});
 1469|       |    }
 1470|  2.78k|    else {
 1471|  2.78k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1472|  2.78k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  985|  2.78k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 2.78k, False: 0]
  |  |  ------------------
  ------------------
 1473|  2.78k|                   ? result(*std::forward<Exp>(exp))
 1474|  2.78k|                   : result(unexpect,
 1475|      0|                            trivial_invoke(std::forward<F>(f),
 1476|      0|                                           std::forward<Exp>(exp).error()));
 1477|  2.78k|    }
 1478|  2.78k|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  489|  5.56k|    {
  490|  5.56k|        return m_has_value;
  491|  5.56k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1803|  2.78k|    {
 1804|  2.78k|        return std::move(value());
 1805|  2.78k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1767|  2.78k|    {
 1768|  2.78k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  2.78k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  2.78k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  2.78k|        return this->get_value();
 1770|  2.78k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  455|  2.78k|    {
  456|  2.78k|        return m_value;
  457|  2.78k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1568|  2.78k|        : base(std::in_place, std::forward<U>(val)),
 1569|  2.78k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  2.78k|    {
 1571|  2.78k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  440|  2.78k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.78k|    {
  442|  2.78k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  2.78k|    {
 1315|  2.78k|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1738|  2.78k|    {
 1739|  2.78k|        return has_value();
 1740|  2.78k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  489|  5.56k|    {
  490|  5.56k|        return m_has_value;
  491|  5.56k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1803|  2.78k|    {
 1804|  2.78k|        return std::move(value());
 1805|  2.78k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1767|  2.78k|    {
 1768|  2.78k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  2.78k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  2.78k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  2.78k|        return this->get_value();
 1770|  2.78k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  455|  2.78k|    {
  456|  2.78k|        return m_value;
  457|  2.78k|    }
_ZN3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISD_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISD_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SD_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1614|     24|        : base(unexpect, std::move(e.error())),
 1615|     24|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|     24|    {
 1617|     24|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS0_10unexpect_tEDpOT_:
  636|     24|        : m_has_value(false)
  637|     24|    {
  638|     24|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|     24|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESE_EEEvDpOT_:
  700|     24|    {
  701|     24|        scn::detail::construct_at(unexpected_ptr(),
  702|     24|                                  std::forward<Args>(args)...);
  703|     24|        m_has_value = false;
  704|     24|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|     72|    {
  730|     72|        return reinterpret_cast<unexpected<E>*>(
  731|     72|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1021|     72|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|     72|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|     24|    {
 1315|     24|    }
_ZNK3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEcvbEv:
 1738|     24|    {
 1739|     24|        return has_value();
 1740|     24|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9has_valueEv:
  686|     72|    {
  687|     72|        return m_has_value;
  688|     72|    }
_ZNR3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5errorEv:
 1744|     24|    {
 1745|     24|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|     24|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|     24|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|     24|        return this->get_unexpected().error();
 1747|     24|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  669|     24|    {
  670|     24|        return *unexpected_ptr();
  671|     24|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EED2Ev:
  642|     24|    {
  643|     24|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 0, False: 24]
  ------------------
  644|      0|            destroy_value();
  645|      0|        }
  646|     24|        else {
  647|     24|            destroy_unexpected();
  648|     24|        }
  649|     24|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|     24|    {
  712|     24|        scn::detail::destroy_at(unexpected_ptr());
  713|     24|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2998|   152k|    {
 2999|   152k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1057|   152k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3000|   152k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2979|   152k|    {
 2980|   152k|        return t.data();
 2981|   152k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1568|  4.93k|        : base(std::in_place, std::forward<U>(val)),
 1569|  4.93k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  4.93k|    {
 1571|  4.93k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  440|  4.93k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  4.93k|    {
  442|  4.93k|    }
_ZNO3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS7_v:
 1803|    200|    {
 1804|    200|        return std::move(value());
 1805|    200|    }
_ZN3scn2v46detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1348|  9.88k|{
 1349|  9.88k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1350|  9.88k|}
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEE15transform_errorIRFNS0_10scan_errorESC_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSI_:
 1977|    392|    {
 1978|    392|        return detail::transform_error_impl(std::move(*this),
 1979|    392|                                            std::forward<F>(f));
 1980|    392|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_9sign_typeEEENS6_9eof_errorEEERFNS0_10scan_errorESE_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESG_EEDaOSK_OT0_:
 1460|    392|{
 1461|       |    if constexpr (std::is_void_v<Ret>) {
 1462|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1463|       |        if (SCN_LIKELY(exp.has_value())) {
 1464|       |            return result(*std::forward<Exp>(exp));
 1465|       |        }
 1466|       |
 1467|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1468|       |        return result(unexpect, monostate{});
 1469|       |    }
 1470|    392|    else {
 1471|    392|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1472|    392|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  985|    392|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 392, False: 0]
  |  |  ------------------
  ------------------
 1473|    392|                   ? result(*std::forward<Exp>(exp))
 1474|    392|                   : result(unexpect,
 1475|      0|                            trivial_invoke(std::forward<F>(f),
 1476|      0|                                           std::forward<Exp>(exp).error()));
 1477|    392|    }
 1478|    392|}
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1568|    392|        : base(std::in_place, std::forward<U>(val)),
 1569|    392|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|    392|    {
 1571|    392|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  440|    392|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    392|    {
  442|    392|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|    392|    {
 1315|    392|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEcvbEv:
 1738|    392|    {
 1739|    392|        return has_value();
 1740|    392|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|    784|    {
  490|    784|        return m_has_value;
  491|    784|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEdeISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSG_v:
 1803|    392|    {
 1804|    392|        return std::move(value());
 1805|    392|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEE5valueISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1767|    392|    {
 1768|    392|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|    392|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    392|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|    392|        return this->get_value();
 1770|    392|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|    392|    {
  456|    392|        return m_value;
  457|    392|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeES6_EUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1963|    784|    {
 1964|    784|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1965|    784|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES8_EUlSA_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSI_OT0_:
 1460|    784|{
 1461|       |    if constexpr (std::is_void_v<Ret>) {
 1462|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1463|       |        if (SCN_LIKELY(exp.has_value())) {
 1464|       |            return result(*std::forward<Exp>(exp));
 1465|       |        }
 1466|       |
 1467|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1468|       |        return result(unexpect, monostate{});
 1469|       |    }
 1470|    784|    else {
 1471|    784|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1472|    784|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  985|    784|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 0, False: 784]
  |  |  ------------------
  ------------------
 1473|    784|                   ? result(*std::forward<Exp>(exp))
 1474|    784|                   : result(unexpect,
 1475|    784|                            trivial_invoke(std::forward<F>(f),
 1476|    784|                                           std::forward<Exp>(exp).error()));
 1477|    784|    }
 1478|    784|}
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1793|    858|    {
 1794|    858|        return value();
 1795|    858|    }
_ZZN3scn2v44impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E0_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3934|      8|    auto&& SCN_TRY_TMP = (x);                          \
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|    384|    {
 2868|    384|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|    384|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|    384|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESO_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|    384|    {
 2849|    384|        return decay_copy(t.begin());
 2850|    384|    }
_ZZN3scn2v44impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3934|    354|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1977|    930|    {
 1978|    930|        return detail::transform_error_impl(std::move(*this),
 1979|    930|                                            std::forward<F>(f));
 1980|    930|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1460|    930|{
 1461|       |    if constexpr (std::is_void_v<Ret>) {
 1462|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1463|       |        if (SCN_LIKELY(exp.has_value())) {
 1464|       |            return result(*std::forward<Exp>(exp));
 1465|       |        }
 1466|       |
 1467|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1468|       |        return result(unexpect, monostate{});
 1469|       |    }
 1470|    930|    else {
 1471|    930|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1472|    930|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  985|    930|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 930, False: 0]
  |  |  ------------------
  ------------------
 1473|    930|                   ? result(*std::forward<Exp>(exp))
 1474|    930|                   : result(unexpect,
 1475|      0|                            trivial_invoke(std::forward<F>(f),
 1476|      0|                                           std::forward<Exp>(exp).error()));
 1477|    930|    }
 1478|    930|}
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1568|    930|        : base(std::in_place, std::forward<U>(val)),
 1569|    930|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|    930|    {
 1571|    930|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  440|    930|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    930|    {
  442|    930|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|    930|    {
 1315|    930|    }
_ZNK3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1738|    930|    {
 1739|    930|        return has_value();
 1740|    930|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.86k|    {
  490|  1.86k|        return m_has_value;
  491|  1.86k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1803|    930|    {
 1804|    930|        return std::move(value());
 1805|    930|    }
_ZNR3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1767|    930|    {
 1768|    930|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|    930|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    930|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|    930|        return this->get_value();
 1770|    930|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|    930|    {
  456|    930|        return m_value;
  457|    930|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1963|    952|    {
 1964|    952|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1965|    952|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1460|    952|{
 1461|       |    if constexpr (std::is_void_v<Ret>) {
 1462|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1463|       |        if (SCN_LIKELY(exp.has_value())) {
 1464|       |            return result(*std::forward<Exp>(exp));
 1465|       |        }
 1466|       |
 1467|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1468|       |        return result(unexpect, monostate{});
 1469|       |    }
 1470|    952|    else {
 1471|    952|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1472|    952|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  985|    952|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 0, False: 952]
  |  |  ------------------
  ------------------
 1473|    952|                   ? result(*std::forward<Exp>(exp))
 1474|    952|                   : result(unexpect,
 1475|    952|                            trivial_invoke(std::forward<F>(f),
 1476|    952|                                           std::forward<Exp>(exp).error()));
 1477|    952|    }
 1478|    952|}
_ZN3scn2v413scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3909|    952|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1055|    952|    static_cast<    \
  |  | 1056|    952|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3910|    952|    {
 3911|    952|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1793|  9.07k|    {
 1794|  9.07k|        return value();
 1795|  9.07k|    }
_ZN3scn2v46detail22parse_presentation_setIcRNS0_4impl22nonascii_specs_handlerEEENSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEERPKS8_SD_OT0_:
 7460|  3.82k|{
 7461|  3.82k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|  3.82k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  3.82k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7462|  3.82k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  | 1051|  3.82k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  3.82k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7463|       |
 7464|  3.82k|    auto start = begin;
 7465|  3.82k|    ++begin;
 7466|       |
 7467|  3.82k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  3.82k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 3.82k]
  |  |  ------------------
  ------------------
 7468|       |        // clang-format off
 7469|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7470|       |        // clang-format on
 7471|      0|        return {};
 7472|      0|    }
 7473|  3.82k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7473:9): [True: 486, False: 3.34k]
  ------------------
 7474|    486|        handler.on_charset_inverted();
 7475|    486|        ++begin;
 7476|    486|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|    486|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 486]
  |  |  ------------------
  ------------------
 7477|       |            // clang-format off
 7478|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7479|       |            // clang-format on
 7480|      0|            return {};
 7481|      0|        }
 7482|    486|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7482:13): [True: 6, False: 480]
  ------------------
 7483|      6|            handler.on_charset_single(char32_t{']'});
 7484|      6|            ++begin;
 7485|      6|        }
 7486|    486|    }
 7487|  3.34k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7487:14): [True: 0, False: 3.34k]
  ------------------
 7488|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7489|      0|    }
 7490|       |
 7491|   713k|    while (begin != end) {
  ------------------
  |  Branch (7491:12): [True: 713k, False: 0]
  ------------------
 7492|   713k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  986|   713k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 713k]
  |  |  ------------------
  ------------------
 7493|      0|            break;
 7494|      0|        }
 7495|       |
 7496|   713k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7496:13): [True: 3.82k, False: 710k]
  ------------------
 7497|  3.82k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7498|  3.82k|        }
 7499|       |
 7500|   710k|        parse_presentation_set_literal(begin, end, handler);
 7501|   710k|    }
 7502|       |
 7503|      0|    SCN_UNLIKELY_ATTR
 7504|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7505|      0|    return {};
 7506|  3.82k|}
_ZN3scn2v46detail30parse_presentation_set_literalIcRNS0_4impl22nonascii_specs_handlerEEEvRPKT_S8_OT0_:
 7424|   710k|{
 7425|   710k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|   710k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   710k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7426|       |
 7427|   710k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7428|   710k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  986|   710k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 710k]
  |  |  ------------------
  ------------------
 7429|      0|        return;
 7430|      0|    }
 7431|       |
 7432|   710k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7432:9): [True: 710k, False: 0]
  |  Branch (7432:25): [True: 3.96k, False: 706k]
  |  Branch (7432:49): [True: 3.96k, False: 0]
  ------------------
 7433|   710k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7433:9): [True: 3.90k, False: 60]
  ------------------
 7434|  3.90k|        ++begin;
 7435|       |
 7436|  3.90k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7437|  3.90k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  986|  3.90k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 3.90k]
  |  |  ------------------
  ------------------
 7438|      0|            return;
 7439|      0|        }
 7440|       |
 7441|  3.90k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  986|  3.90k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 3.90k]
  |  |  ------------------
  ------------------
 7442|       |            // clang-format off
 7443|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7444|       |            // clang-format on
 7445|      0|            return;
 7446|      0|        }
 7447|       |
 7448|  3.90k|        handler.on_charset_range(cp_first, cp_second + 1);
 7449|  3.90k|        return;
 7450|  3.90k|    }
 7451|       |
 7452|   706k|    handler.on_charset_single(cp_first);
 7453|   706k|}
_ZN3scn2v46detail33parse_presentation_set_code_pointIcRNS0_4impl22nonascii_specs_handlerEEEDiRPKT_S8_OT0_:
 7400|   713k|{
 7401|   713k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|   713k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   713k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7402|       |
 7403|   713k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7404|   713k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  986|  1.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 713k]
  |  |  |  Branch (986:45): [True: 0, False: 713k]
  |  |  |  Branch (986:45): [True: 0, False: 713k]
  |  |  ------------------
  ------------------
 7405|      0|        handler.on_error("Invalid encoding in format string");
 7406|      0|        return invalid_code_point;
 7407|      0|    }
 7408|       |
 7409|   713k|    const auto cp =
 7410|   713k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7411|   713k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  986|   713k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 713k]
  |  |  ------------------
  ------------------
 7412|      0|        handler.on_error("Invalid encoding in format string");
 7413|      0|        return invalid_code_point;
 7414|      0|    }
 7415|       |
 7416|   713k|    begin += len;
 7417|   713k|    return cp;
 7418|   713k|}
_ZNK3scn2v46detail12format_specs14charset_stringIcEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 7019|  5.02k|    {
 7020|  5.02k|        return {reinterpret_cast<const CharT*>(charset_string_data),
 7021|  5.02k|                charset_string_size};
 7022|  5.02k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IRKS7_vEEOT_:
 1568|    858|        : base(std::in_place, std::forward<U>(val)),
 1569|    858|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|    858|    {
 1571|    858|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJRKS8_EvEENSt3__110in_place_tEDpOT_:
  440|    858|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    858|    {
  442|    858|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1568|  2.38k|        : base(std::in_place, std::forward<U>(val)),
 1569|  2.38k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  2.38k|    {
 1571|  2.38k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  440|  2.38k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.38k|    {
  442|  2.38k|    }
_ZN3scn2v46detail34decode_code_point_exhaustive_validIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4292|   196k|{
 4293|   196k|    if constexpr (sizeof(CharT) == 1) {
 4294|   196k|        return decode_utf8_code_point_exhaustive_valid(input);
 4295|       |    }
 4296|       |    else if constexpr (sizeof(CharT) == 2) {
 4297|       |        return decode_utf16_code_point_exhaustive_valid(input);
 4298|       |    }
 4299|       |    else {
 4300|       |        SCN_EXPECT(input.size() == 1);
 4301|       |        return static_cast<char32_t>(input.front());
 4302|       |    }
 4303|   196k|}
_ZZN3scn2v46detail39decode_utf8_code_point_exhaustive_validENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 4170|  33.3k|    const auto is_trailing_code_unit = [](char ch) {
 4171|  33.3k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4172|  33.3k|    };
_ZNK3scn2v46detail9fill_type13get_code_unitIwEET_v:
 6954|  1.93k|    {
 6955|  1.93k|        SCN_EXPECT(m_size <= sizeof(CharT));
  ------------------
  |  | 1051|  1.93k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.93k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6956|  1.93k|        CharT r{};
 6957|  1.93k|        std::memcpy(&r, m_data, m_size);
 6958|  1.93k|        return r;
 6959|  1.93k|    }
_ZN3scn2v46detail39code_point_length_by_starting_code_unitIwEEmT_:
 4066|   247M|{
 4067|       |    if constexpr (sizeof(U) == 1) {
 4068|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 4069|       |    }
 4070|       |    else if constexpr (sizeof(U) == 2) {
 4071|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4072|       |    }
 4073|   247M|    else {
 4074|       |        // utf-32
 4075|   247M|        static_assert(sizeof(U) == 4);
 4076|   247M|        SCN_UNUSED(ch);
  ------------------
  |  | 1036|   247M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4077|   247M|        return 1;
 4078|   247M|    }
 4079|   247M|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4272|   246M|{
 4273|       |    if constexpr (sizeof(CharT) == 1) {
 4274|       |        return decode_utf8_code_point_exhaustive(input);
 4275|       |    }
 4276|       |    else if constexpr (sizeof(CharT) == 2) {
 4277|       |        return decode_utf16_code_point_exhaustive(input);
 4278|       |    }
 4279|   246M|    else {
 4280|   246M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  | 1051|   246M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   246M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4281|   246M|        auto cp = static_cast<char32_t>(input.front());
 4282|   246M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  986|   246M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 62.3k, False: 246M]
  |  |  ------------------
  ------------------
 4283|  62.3k|            return invalid_code_point;
 4284|  62.3k|        }
 4285|   246M|        return cp;
 4286|   246M|    }
 4287|   246M|}
_ZN3scn2v46detail31make_string_view_from_iteratorsIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3958|   304k|{
 3959|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3960|       |                                          decltype(first), decltype(last)> &&
 3961|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3962|       |        return {first, last};
 3963|       |    }
 3964|   304k|    else {
 3965|   304k|        return {to_address(first), static_cast<size_t>(std::distance(
 3966|   304k|                                       to_address(first), to_address(last)))};
 3967|   304k|    }
 3968|   304k|}
_ZN3scn2v46detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  1.29M|{
  316|  1.29M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1057|  1.29M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  1.29M|}
_ZN3scn2v46detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  293|  1.59M|{
  294|  1.59M|    return p;
  295|  1.59M|}
_ZN3scn2v46detail25make_string_view_iteratorIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3989|  10.7k|{
 3990|       |    if constexpr (std::is_constructible_v<
 3991|       |                      typename std::basic_string_view<CharT>::iterator,
 3992|       |                      decltype(it)> &&
 3993|  10.7k|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3994|  10.7k|        SCN_UNUSED(sv);
  ------------------
  |  | 1036|  10.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3995|  10.7k|        return it;
 3996|       |    }
 3997|       |    else {
 3998|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3999|       |    }
 4000|  10.7k|}
_ZN3scn2v46detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|   300k|{
  316|   300k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1057|   300k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|   300k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3494|   223k|    {
 3495|   223k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3496|   223k|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1614|    190|        : base(unexpect, std::move(e.error())),
 1615|    190|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|    190|    {
 1617|    190|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|    190|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    190|          m_has_value(false)
  451|    190|    {
  452|    190|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   167k|    {
 1315|   167k|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1568|   167k|        : base(std::in_place, std::forward<U>(val)),
 1569|   167k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|   167k|    {
 1571|   167k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|   167k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   167k|    {
  442|   167k|    }
_ZNK3scn2v48expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1738|  45.9k|    {
 1739|  45.9k|        return has_value();
 1740|  45.9k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|   289k|    {
  490|   289k|        return m_has_value;
  491|   289k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1793|     68|    {
 1794|     68|        return value();
 1795|     68|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1767|   121k|    {
 1768|   121k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   121k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   121k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   121k|        return this->get_value();
 1770|   121k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|   121k|    {
  456|   121k|        return m_value;
  457|   121k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEC2IS7_vEEOT_:
 1568|  3.36k|        : base(std::in_place, std::forward<U>(val)),
 1569|  3.36k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  3.36k|    {
 1571|  3.36k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  440|  3.36k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  3.36k|    {
  442|  3.36k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  3.70k|    {
 1315|  3.70k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1614|    340|        : base(unexpect, std::move(e.error())),
 1615|    340|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|    340|    {
 1617|    340|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|    340|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    340|          m_has_value(false)
  451|    340|    {
  452|    340|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEcvbEv:
 1738|  1.53k|    {
 1739|  1.53k|        return has_value();
 1740|  1.53k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE9has_valueEv:
  489|  5.94k|    {
  490|  5.94k|        return m_has_value;
  491|  5.94k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1793|     40|    {
 1794|     40|        return value();
 1795|     40|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1767|  1.89k|    {
 1768|  1.89k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  1.89k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.89k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  1.89k|        return this->get_value();
 1770|  1.89k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE9get_valueEv:
  455|  1.89k|    {
  456|  1.89k|        return m_value;
  457|  1.89k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEC2ISB_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSE_IXsr3stdE16is_convertible_vISG_SB_EEvE4typeELSK_0EEEONS0_10unexpectedISF_EE:
 1614|    116|        : base(unexpect, std::move(e.error())),
 1615|    116|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|    116|    {
 1617|    116|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|    116|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    116|          m_has_value(false)
  451|    116|    {
  452|    116|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  2.85k|    {
 1315|  2.85k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEC2ISA_vEEOT_:
 1568|  2.74k|        : base(std::in_place, std::forward<U>(val)),
 1569|  2.74k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  2.74k|    {
 1571|  2.74k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EEC2IJSB_EvEENS3_10in_place_tEDpOT_:
  440|  2.74k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.74k|    {
  442|  2.74k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1977|    686|    {
 1978|    686|        return detail::transform_error_impl(std::move(*this),
 1979|    686|                                            std::forward<F>(f));
 1980|    686|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9eof_errorEEERFNS0_10scan_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1460|    686|{
 1461|       |    if constexpr (std::is_void_v<Ret>) {
 1462|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1463|       |        if (SCN_LIKELY(exp.has_value())) {
 1464|       |            return result(*std::forward<Exp>(exp));
 1465|       |        }
 1466|       |
 1467|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1468|       |        return result(unexpect, monostate{});
 1469|       |    }
 1470|    686|    else {
 1471|    686|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1472|    686|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  985|    686|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 686, False: 0]
  |  |  ------------------
  ------------------
 1473|    686|                   ? result(*std::forward<Exp>(exp))
 1474|    686|                   : result(unexpect,
 1475|      0|                            trivial_invoke(std::forward<F>(f),
 1476|      0|                                           std::forward<Exp>(exp).error()));
 1477|    686|    }
 1478|    686|}
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1803|  1.85k|    {
 1804|  1.85k|        return std::move(value());
 1805|  1.85k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IS7_vEEOT_:
 1568|  1.95k|        : base(std::in_place, std::forward<U>(val)),
 1569|  1.95k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  1.95k|    {
 1571|  1.95k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  440|  1.95k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.95k|    {
  442|  1.95k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  5.95k|    {
 1315|  5.95k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE5errorEv:
 1754|    326|    {
 1755|    326|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|    326|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    326|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1756|    326|        return std::move(this->get_unexpected().error());
 1757|    326|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE14get_unexpectedEv:
  472|    340|    {
  473|    340|        return m_unexpected;
  474|    340|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1624|  1.05k|        : base(unexpect, std::forward<Args>(args)...),
 1625|  1.05k|          ctor_base(detail::non_default_ctor_tag_t{})
 1626|  1.05k|    {
 1627|  1.05k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|  3.43k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  3.43k|          m_has_value(false)
  451|  3.43k|    {
  452|  3.43k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|    904|    {
 2868|    904|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|    904|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|    904|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESJ_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|    904|    {
 2849|    904|        return decay_copy(t.begin());
 2850|    904|    }
_ZN3scn2v46ranges6detail10decay_copyINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEEu7__decayIT_EOSA_:
 2092|  2.02k|{
 2093|  2.02k|    return SCN_FWD(t);
  ------------------
  |  | 1057|  2.02k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2094|  2.02k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_E5beginEv:
 3478|    904|    {
 3479|    904|        return m_iterator;
 3480|    904|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2924|    904|    {
 2925|    904|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|    904|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2926|    904|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EESD_SD_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2906|    904|    {
 2907|    904|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1057|    904|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2908|    904|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_E3endEv:
 3482|    904|    {
 3483|    904|        return m_sentinel;
 3484|    904|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_EC2ISA_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SA_EEvE4typeELPv0EEESF_SA_:
 3463|    904|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|    904|    static_cast<    \
  |  | 1056|    904|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|    904|    static_cast<    \
  |  | 1056|    904|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3464|    904|    {
 3465|    904|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEcvbEv:
 1738|  2.85k|    {
 1739|  2.85k|        return has_value();
 1740|  2.85k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EE9has_valueEv:
  489|  5.71k|    {
  490|  5.71k|        return m_has_value;
  491|  5.71k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEE5errorEv:
 1744|    116|    {
 1745|    116|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|    116|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    116|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|    116|        return this->get_unexpected().error();
 1747|    116|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|    116|    {
  473|    116|        return m_unexpected;
  474|    116|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1803|  2.74k|    {
 1804|  2.74k|        return std::move(value());
 1805|  2.74k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1767|  2.74k|    {
 1768|  2.74k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  2.74k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  2.74k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  2.74k|        return this->get_value();
 1770|  2.74k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EE9get_valueEv:
  455|  2.74k|    {
  456|  2.74k|        return m_value;
  457|  2.74k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  7.44k|    {
 1315|  7.44k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1568|  7.44k|        : base(std::in_place, std::forward<U>(val)),
 1569|  7.44k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  7.44k|    {
 1571|  7.44k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  440|  7.44k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  7.44k|    {
  442|  7.44k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1977|  75.4k|    {
 1978|  75.4k|        return detail::transform_error_impl(std::move(*this),
 1979|  75.4k|                                            std::forward<F>(f));
 1980|  75.4k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1460|  75.4k|{
 1461|       |    if constexpr (std::is_void_v<Ret>) {
 1462|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1463|       |        if (SCN_LIKELY(exp.has_value())) {
 1464|       |            return result(*std::forward<Exp>(exp));
 1465|       |        }
 1466|       |
 1467|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1468|       |        return result(unexpect, monostate{});
 1469|       |    }
 1470|  75.4k|    else {
 1471|  75.4k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1472|  75.4k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  985|  75.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 75.4k, False: 0]
  |  |  ------------------
  ------------------
 1473|  75.4k|                   ? result(*std::forward<Exp>(exp))
 1474|  75.4k|                   : result(unexpect,
 1475|      0|                            trivial_invoke(std::forward<F>(f),
 1476|      0|                                           std::forward<Exp>(exp).error()));
 1477|  75.4k|    }
 1478|  75.4k|}
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1803|   121k|    {
 1804|   121k|        return std::move(value());
 1805|   121k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1754|    190|    {
 1755|    190|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|    190|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    190|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1756|    190|        return std::move(this->get_unexpected().error());
 1757|    190|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|    190|    {
  473|    190|        return m_unexpected;
  474|    190|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1624|  7.70k|        : base(unexpect, std::forward<Args>(args)...),
 1625|  7.70k|          ctor_base(detail::non_default_ctor_tag_t{})
 1626|  7.70k|    {
 1627|  7.70k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1738|  7.44k|    {
 1739|  7.44k|        return has_value();
 1740|  7.44k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  489|  14.8k|    {
  490|  14.8k|        return m_has_value;
  491|  14.8k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1803|  7.44k|    {
 1804|  7.44k|        return std::move(value());
 1805|  7.44k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1767|  7.44k|    {
 1768|  7.44k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  7.44k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  7.44k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  7.44k|        return this->get_value();
 1770|  7.44k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  455|  7.44k|    {
  456|  7.44k|        return m_value;
  457|  7.44k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1614|  2.37k|        : base(unexpect, std::move(e.error())),
 1615|  2.37k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  2.37k|    {
 1617|  2.37k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE5errorEv:
 1744|     14|    {
 1745|     14|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|     14|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|     14|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|     14|        return this->get_unexpected().error();
 1747|     14|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1614|    572|        : base(unexpect, std::move(e.error())),
 1615|    572|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|    572|    {
 1617|    572|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|    898|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    898|          m_has_value(false)
  451|    898|    {
  452|    898|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  5.72k|    {
 1315|  5.72k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IRS7_vEEOT_:
 1568|     58|        : base(std::in_place, std::forward<U>(val)),
 1569|     58|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|     58|    {
 1571|     58|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJRS8_EvEENSt3__110in_place_tEDpOT_:
  440|     58|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|     58|    {
  442|     58|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2INS8_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S8_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1614|  3.53k|        : base(unexpect, std::move(e.error())),
 1615|  3.53k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  3.53k|    {
 1617|  3.53k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJNS9_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|  3.53k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  3.53k|          m_has_value(false)
  451|  3.53k|    {
  452|  3.53k|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEcvbEv:
 1738|  5.30k|    {
 1739|  5.30k|        return has_value();
 1740|  5.30k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE9has_valueEv:
  489|  10.2k|    {
  490|  10.2k|        return m_has_value;
  491|  10.2k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5errorEv:
 1744|  1.95k|    {
 1745|  1.95k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  1.95k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.95k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|  1.95k|        return this->get_unexpected().error();
 1747|  1.95k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE14get_unexpectedEv:
  472|  2.56k|    {
  473|  2.56k|        return m_unexpected;
  474|  2.56k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEC2ISB_vEEOT_:
 1568|    954|        : base(std::in_place, std::forward<U>(val)),
 1569|    954|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|    954|    {
 1571|    954|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  440|    954|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    954|    {
  442|    954|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|    954|    {
 1315|    954|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1793|    102|    {
 1794|    102|        return value();
 1795|    102|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1767|  1.30k|    {
 1768|  1.30k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  1.30k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.30k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  1.30k|        return this->get_value();
 1770|  1.30k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE9get_valueEv:
  455|  1.30k|    {
  456|  1.30k|        return m_value;
  457|  1.30k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEcvbEv:
 1738|    722|    {
 1739|    722|        return has_value();
 1740|    722|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9has_valueEv:
  489|  1.90k|    {
  490|  1.90k|        return m_has_value;
  491|  1.90k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|    722|    {
 1315|    722|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEdeISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSG_v:
 1803|    954|    {
 1804|    954|        return std::move(value());
 1805|    954|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEE5valueISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1767|    954|    {
 1768|    954|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|    954|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    954|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|    954|        return this->get_value();
 1770|    954|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9get_valueEv:
  455|    954|    {
  456|    954|        return m_value;
  457|    954|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE3endEv:
 3482|  41.3k|    {
 3483|  41.3k|        return m_sentinel;
 3484|  41.3k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE15transform_errorIRFNS2_11parse_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1977|  1.49k|    {
 1978|  1.49k|        return detail::transform_error_impl(std::move(*this),
 1979|  1.49k|                                            std::forward<F>(f));
 1980|  1.49k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9eof_errorEEERFNS4_11parse_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1460|  1.49k|{
 1461|       |    if constexpr (std::is_void_v<Ret>) {
 1462|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1463|       |        if (SCN_LIKELY(exp.has_value())) {
 1464|       |            return result(*std::forward<Exp>(exp));
 1465|       |        }
 1466|       |
 1467|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1468|       |        return result(unexpect, monostate{});
 1469|       |    }
 1470|  1.49k|    else {
 1471|  1.49k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1472|  1.49k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  985|  1.49k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 1.16k, False: 326]
  |  |  ------------------
  ------------------
 1473|  1.49k|                   ? result(*std::forward<Exp>(exp))
 1474|  1.49k|                   : result(unexpect,
 1475|    326|                            trivial_invoke(std::forward<F>(f),
 1476|    326|                                           std::forward<Exp>(exp).error()));
 1477|  1.49k|    }
 1478|  1.49k|}
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IS7_vEEOT_:
 1568|  1.22k|        : base(std::in_place, std::forward<U>(val)),
 1569|  1.22k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  1.22k|    {
 1571|  1.22k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  440|  1.22k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.22k|    {
  442|  1.22k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1624|    326|        : base(unexpect, std::forward<Args>(args)...),
 1625|    326|          ctor_base(detail::non_default_ctor_tag_t{})
 1626|    326|    {
 1627|    326|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1803|  1.20k|    {
 1804|  1.20k|        return std::move(value());
 1805|  1.20k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE5beginEv:
 3478|  53.8k|    {
 3479|  53.8k|        return m_iterator;
 3480|  53.8k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEEC2IS9_vEEOT_:
 1568|    722|        : base(std::in_place, std::forward<U>(val)),
 1569|    722|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|    722|    {
 1571|    722|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  440|    722|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    722|    {
  442|    722|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESA_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1977|    722|    {
 1978|    722|        return detail::transform_error_impl(std::move(*this),
 1979|    722|                                            std::forward<F>(f));
 1980|    722|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS4_27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EEEENS4_9eof_errorEEERFNS0_10scan_errorESC_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSJ_OT0_:
 1460|    722|{
 1461|       |    if constexpr (std::is_void_v<Ret>) {
 1462|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1463|       |        if (SCN_LIKELY(exp.has_value())) {
 1464|       |            return result(*std::forward<Exp>(exp));
 1465|       |        }
 1466|       |
 1467|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1468|       |        return result(unexpect, monostate{});
 1469|       |    }
 1470|    722|    else {
 1471|    722|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1472|    722|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  985|    722|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 722, False: 0]
  |  |  ------------------
  ------------------
 1473|    722|                   ? result(*std::forward<Exp>(exp))
 1474|    722|                   : result(unexpect,
 1475|      0|                            trivial_invoke(std::forward<F>(f),
 1476|      0|                                           std::forward<Exp>(exp).error()));
 1477|    722|    }
 1478|    722|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EE9has_valueEv:
  489|  1.44k|    {
  490|  1.44k|        return m_has_value;
  491|  1.44k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEEdeIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1803|    722|    {
 1804|    722|        return std::move(value());
 1805|    722|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEE5valueIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1767|    722|    {
 1768|    722|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|    722|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    722|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|    722|        return this->get_value();
 1770|    722|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EE9get_valueEv:
  455|    722|    {
  456|    722|        return m_value;
  457|    722|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEC2IS9_vEEOT_:
 1568|    722|        : base(std::in_place, std::forward<U>(val)),
 1569|    722|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|    722|    {
 1571|    722|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  440|    722|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    722|    {
  442|    722|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|    722|    {
 1315|    722|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEcvbEv:
 1738|    722|    {
 1739|    722|        return has_value();
 1740|    722|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.44k|    {
  490|  1.44k|        return m_has_value;
  491|  1.44k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEdeIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1803|    722|    {
 1804|    722|        return std::move(value());
 1805|    722|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEE5valueIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1767|    722|    {
 1768|    722|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|    722|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    722|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|    722|        return this->get_value();
 1770|    722|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EE9get_valueEv:
  455|    722|    {
  456|    722|        return m_value;
  457|    722|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1977|    652|    {
 1978|    652|        return detail::transform_error_impl(std::move(*this),
 1979|    652|                                            std::forward<F>(f));
 1980|    652|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlSA_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSJ_OT0_:
 1460|    652|{
 1461|       |    if constexpr (std::is_void_v<Ret>) {
 1462|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1463|       |        if (SCN_LIKELY(exp.has_value())) {
 1464|       |            return result(*std::forward<Exp>(exp));
 1465|       |        }
 1466|       |
 1467|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1468|       |        return result(unexpect, monostate{});
 1469|       |    }
 1470|    652|    else {
 1471|    652|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1472|    652|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  985|    652|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 38, False: 614]
  |  |  ------------------
  ------------------
 1473|    652|                   ? result(*std::forward<Exp>(exp))
 1474|    652|                   : result(unexpect,
 1475|    614|                            trivial_invoke(std::forward<F>(f),
 1476|    614|                                           std::forward<Exp>(exp).error()));
 1477|    652|    }
 1478|    652|}
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5errorEv:
 1754|    614|    {
 1755|    614|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|    614|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    614|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1756|    614|        return std::move(this->get_unexpected().error());
 1757|    614|    }
_ZN3scn2v413scan_expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EEEC2EONS0_8expectedIS7_NS0_10scan_errorEEE:
 3909|  1.09k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1055|  1.09k|    static_cast<    \
  |  | 1056|  1.09k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3910|  1.09k|    {
 3911|  1.09k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEC2ISA_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SA_EEvE4typeELPv0EEESK_SF_:
 3463|  18.4k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|  18.4k|    static_cast<    \
  |  | 1056|  18.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|  18.4k|    static_cast<    \
  |  | 1056|  18.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3464|  18.4k|    {
 3465|  18.4k|    }
_ZN3scn2v48expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEEC2ISK_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISK_OT_EEvE4typeELPv0ETnPNSN_IXsr3stdE16is_convertible_vISP_SK_EEvE4typeELST_0EEEONS0_10unexpectedISO_EE:
 1614|     44|        : base(unexpect, std::move(e.error())),
 1615|     44|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|     44|    {
 1617|     44|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EEC2IJSL_EvEENS0_10unexpect_tEDpOT_:
  636|     44|        : m_has_value(false)
  637|     44|    {
  638|     44|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|     44|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESL_EEEvDpOT_:
  700|     44|    {
  701|     44|        scn::detail::construct_at(unexpected_ptr(),
  702|     44|                                  std::forward<Args>(args)...);
  703|     44|        m_has_value = false;
  704|     44|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|    132|    {
  730|    132|        return reinterpret_cast<unexpected<E>*>(
  731|    132|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1021|    132|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|    132|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|     52|    {
 1315|     52|    }
_ZN3scn2v48expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEEC2ISJ_vEEOT_:
 1568|      8|        : base(std::in_place, std::forward<U>(val)),
 1569|      8|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|      8|    {
 1571|      8|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EEC2IJSK_EvEENS3_10in_place_tEDpOT_:
  626|      8|        : m_has_value(true)
  627|      8|    {
  628|      8|        construct(std::forward<Args>(args)...);
  629|      8|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE9constructIJSK_EEEvDpOT_:
  693|      8|    {
  694|      8|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|      8|        m_has_value = true;
  696|      8|    }
_ZN3scn2v46detail12construct_atINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEEJSK_EEEPT_SM_DpOT0_:
  395|      8|{
  396|      8|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|      8|        T(std::forward<Args>(args)...);
  398|      8|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|     24|    {
  718|     24|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1021|     24|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|     24|    }
_ZNK3scn2v48expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1738|     52|    {
 1739|     52|        return has_value();
 1740|     52|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|    156|    {
  687|    156|        return m_has_value;
  688|    156|    }
_ZNR3scn2v48expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1744|     44|    {
 1745|     44|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|     44|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|     44|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|     44|        return this->get_unexpected().error();
 1747|     44|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  669|     44|    {
  670|     44|        return *unexpected_ptr();
  671|     44|    }
_ZNO3scn2v48expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEEdeISJ_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSO_v:
 1803|      8|    {
 1804|      8|        return std::move(value());
 1805|      8|    }
_ZNR3scn2v48expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEE5valueISJ_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSO_v:
 1767|      8|    {
 1768|      8|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|      8|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|      8|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|      8|        return this->get_value();
 1770|      8|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|      8|    {
  653|      8|        return *value_ptr();
  654|      8|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|     52|    {
  643|     52|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 8, False: 44]
  ------------------
  644|      8|            destroy_value();
  645|      8|        }
  646|     44|        else {
  647|     44|            destroy_unexpected();
  648|     44|        }
  649|     52|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|      8|    {
  708|      8|        scn::detail::destroy_at(value_ptr());
  709|      8|    }
_ZN3scn2v46detail10destroy_atINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEEEEvPT_:
  401|      8|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|      8|    else {
  408|      8|        p->~T();
  409|      8|    }
  410|      8|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|     44|    {
  712|     44|        scn::detail::destroy_at(unexpected_ptr());
  713|     44|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEcvbEv:
 1738|  6.18k|    {
 1739|  6.18k|        return has_value();
 1740|  6.18k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE9has_valueEv:
  489|  11.8k|    {
  490|  11.8k|        return m_has_value;
  491|  11.8k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEE5errorEv:
 1744|  3.20k|    {
 1745|  3.20k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  3.20k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  3.20k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|  3.20k|        return this->get_unexpected().error();
 1747|  3.20k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  3.20k|    {
  473|  3.20k|        return m_unexpected;
  474|  3.20k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1803|  1.95k|    {
 1804|  1.95k|        return std::move(value());
 1805|  1.95k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1767|  2.50k|    {
 1768|  2.50k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  2.50k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  2.50k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  2.50k|        return this->get_value();
 1770|  2.50k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  2.50k|    {
  456|  2.50k|        return m_value;
  457|  2.50k|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1614|  7.87k|        : base(unexpect, std::move(e.error())),
 1615|  7.87k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  7.87k|    {
 1617|  7.87k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  8.06k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  8.06k|          m_has_value(false)
  451|  8.06k|    {
  452|  8.06k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   145k|    {
 1315|   145k|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1568|     96|        : base(std::in_place, std::forward<U>(val)),
 1569|     96|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|     96|    {
 1571|     96|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  440|     96|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|     96|    {
  442|     96|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1614|  91.8k|        : base(unexpect, std::move(e.error())),
 1615|  91.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  91.8k|    {
 1617|  91.8k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|  91.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  91.8k|          m_has_value(false)
  451|  91.8k|    {
  452|  91.8k|    }
_ZNK3scn2v48expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1738|   153k|    {
 1739|   153k|        return has_value();
 1740|   153k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  489|   253k|    {
  490|   253k|        return m_has_value;
  491|   253k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1744|  46.2k|    {
 1745|  46.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  46.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  46.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|  46.2k|        return this->get_unexpected().error();
 1747|  46.2k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  472|  46.2k|    {
  473|  46.2k|        return m_unexpected;
  474|  46.2k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1568|  30.6k|        : base(std::in_place, std::forward<U>(val)),
 1569|  30.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  30.6k|    {
 1571|  30.6k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  440|  30.6k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  30.6k|    {
  442|  30.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  30.6k|    {
 1315|  30.6k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1793|    108|    {
 1794|    108|        return value();
 1795|    108|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1767|  45.9k|    {
 1768|  45.9k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  45.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  45.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  45.9k|        return this->get_value();
 1770|  45.9k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  455|  45.9k|    {
  456|  45.9k|        return m_value;
  457|  45.9k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1738|  22.9k|    {
 1739|  22.9k|        return has_value();
 1740|  22.9k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  489|  61.2k|    {
  490|  61.2k|        return m_has_value;
  491|  61.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  22.9k|    {
 1315|  22.9k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1803|  30.6k|    {
 1804|  30.6k|        return std::move(value());
 1805|  30.6k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1767|  30.6k|    {
 1768|  30.6k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  30.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  30.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  30.6k|        return this->get_value();
 1770|  30.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  455|  30.6k|    {
  456|  30.6k|        return m_value;
  457|  30.6k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1977|  46.0k|    {
 1978|  46.0k|        return detail::transform_error_impl(std::move(*this),
 1979|  46.0k|                                            std::forward<F>(f));
 1980|  46.0k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1460|  46.0k|{
 1461|       |    if constexpr (std::is_void_v<Ret>) {
 1462|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1463|       |        if (SCN_LIKELY(exp.has_value())) {
 1464|       |            return result(*std::forward<Exp>(exp));
 1465|       |        }
 1466|       |
 1467|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1468|       |        return result(unexpect, monostate{});
 1469|       |    }
 1470|  46.0k|    else {
 1471|  46.0k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1472|  46.0k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  985|  46.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 45.8k, False: 190]
  |  |  ------------------
  ------------------
 1473|  46.0k|                   ? result(*std::forward<Exp>(exp))
 1474|  46.0k|                   : result(unexpect,
 1475|    190|                            trivial_invoke(std::forward<F>(f),
 1476|    190|                                           std::forward<Exp>(exp).error()));
 1477|  46.0k|    }
 1478|  46.0k|}
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1568|  45.8k|        : base(std::in_place, std::forward<U>(val)),
 1569|  45.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  45.8k|    {
 1571|  45.8k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  45.8k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  45.8k|    {
  442|  45.8k|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1624|    190|        : base(unexpect, std::forward<Args>(args)...),
 1625|    190|          ctor_base(detail::non_default_ctor_tag_t{})
 1626|    190|    {
 1627|    190|    }
_ZNO3scn2v48expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1803|  45.8k|    {
 1804|  45.8k|        return std::move(value());
 1805|  45.8k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEC2IS6_vEEOT_:
 1568|  22.9k|        : base(std::in_place, std::forward<U>(val)),
 1569|  22.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  22.9k|    {
 1571|  22.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  440|  22.9k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  22.9k|    {
  442|  22.9k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1977|  22.9k|    {
 1978|  22.9k|        return detail::transform_error_impl(std::move(*this),
 1979|  22.9k|                                            std::forward<F>(f));
 1980|  22.9k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS4_9eof_errorEEERFNS0_10scan_errorES9_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSG_OT0_:
 1460|  22.9k|{
 1461|       |    if constexpr (std::is_void_v<Ret>) {
 1462|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1463|       |        if (SCN_LIKELY(exp.has_value())) {
 1464|       |            return result(*std::forward<Exp>(exp));
 1465|       |        }
 1466|       |
 1467|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1468|       |        return result(unexpect, monostate{});
 1469|       |    }
 1470|  22.9k|    else {
 1471|  22.9k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1472|  22.9k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  985|  22.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 22.9k, False: 0]
  |  |  ------------------
  ------------------
 1473|  22.9k|                   ? result(*std::forward<Exp>(exp))
 1474|  22.9k|                   : result(unexpect,
 1475|      0|                            trivial_invoke(std::forward<F>(f),
 1476|      0|                                           std::forward<Exp>(exp).error()));
 1477|  22.9k|    }
 1478|  22.9k|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9has_valueEv:
  489|  45.8k|    {
  490|  45.8k|        return m_has_value;
  491|  45.8k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1803|  22.9k|    {
 1804|  22.9k|        return std::move(value());
 1805|  22.9k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1767|  22.9k|    {
 1768|  22.9k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  22.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  22.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  22.9k|        return this->get_value();
 1770|  22.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9get_valueEv:
  455|  22.9k|    {
  456|  22.9k|        return m_value;
  457|  22.9k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEC2IS6_vEEOT_:
 1568|  22.9k|        : base(std::in_place, std::forward<U>(val)),
 1569|  22.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  22.9k|    {
 1571|  22.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  440|  22.9k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  22.9k|    {
  442|  22.9k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  22.9k|    {
 1315|  22.9k|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEcvbEv:
 1738|  22.9k|    {
 1739|  22.9k|        return has_value();
 1740|  22.9k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9has_valueEv:
  489|  45.8k|    {
  490|  45.8k|        return m_has_value;
  491|  45.8k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1803|  22.9k|    {
 1804|  22.9k|        return std::move(value());
 1805|  22.9k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1767|  22.9k|    {
 1768|  22.9k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  22.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  22.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  22.9k|        return this->get_value();
 1770|  22.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9get_valueEv:
  455|  22.9k|    {
  456|  22.9k|        return m_value;
  457|  22.9k|    }
_ZN3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISG_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1614|     44|        : base(unexpect, std::move(e.error())),
 1615|     44|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|     44|    {
 1617|     44|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  636|     44|        : m_has_value(false)
  637|     44|    {
  638|     44|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|     44|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESH_EEEvDpOT_:
  700|     44|    {
  701|     44|        scn::detail::construct_at(unexpected_ptr(),
  702|     44|                                  std::forward<Args>(args)...);
  703|     44|        m_has_value = false;
  704|     44|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|    132|    {
  730|    132|        return reinterpret_cast<unexpected<E>*>(
  731|    132|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1021|    132|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|    132|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|     52|    {
 1315|     52|    }
_ZN3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1568|      8|        : base(std::in_place, std::forward<U>(val)),
 1569|      8|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|      8|    {
 1571|      8|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSG_EvEENS3_10in_place_tEDpOT_:
  626|      8|        : m_has_value(true)
  627|      8|    {
  628|      8|        construct(std::forward<Args>(args)...);
  629|      8|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9constructIJSG_EEEvDpOT_:
  693|      8|    {
  694|      8|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|      8|        m_has_value = true;
  696|      8|    }
_ZN3scn2v46detail12construct_atINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEEJSG_EEEPT_SI_DpOT0_:
  395|      8|{
  396|      8|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|      8|        T(std::forward<Args>(args)...);
  398|      8|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|     24|    {
  718|     24|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1021|     24|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|     24|    }
_ZNK3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1738|     52|    {
 1739|     52|        return has_value();
 1740|     52|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|    156|    {
  687|    156|        return m_has_value;
  688|    156|    }
_ZNR3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1744|     44|    {
 1745|     44|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|     44|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|     44|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|     44|        return this->get_unexpected().error();
 1747|     44|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  669|     44|    {
  670|     44|        return *unexpected_ptr();
  671|     44|    }
_ZNO3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEdeISF_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSK_v:
 1803|      8|    {
 1804|      8|        return std::move(value());
 1805|      8|    }
_ZNR3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5valueISF_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1767|      8|    {
 1768|      8|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|      8|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|      8|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|      8|        return this->get_value();
 1770|      8|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|      8|    {
  653|      8|        return *value_ptr();
  654|      8|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|     52|    {
  643|     52|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 8, False: 44]
  ------------------
  644|      8|            destroy_value();
  645|      8|        }
  646|     44|        else {
  647|     44|            destroy_unexpected();
  648|     44|        }
  649|     52|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|      8|    {
  708|      8|        scn::detail::destroy_at(value_ptr());
  709|      8|    }
_ZN3scn2v46detail10destroy_atINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEEEEvPT_:
  401|      8|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|      8|    else {
  408|      8|        p->~T();
  409|      8|    }
  410|      8|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|     44|    {
  712|     44|        scn::detail::destroy_at(unexpected_ptr());
  713|     44|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2998|   297k|    {
 2999|   297k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1057|   297k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3000|   297k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2979|   297k|    {
 2980|   297k|        return t.data();
 2981|   297k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3373|   297k|    {
 3374|   297k|        return detail::to_address(ranges::begin(derived()));
 3375|   297k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|   297k|    {
 2868|   297k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|   297k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|   297k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|   297k|    {
 2849|   297k|        return decay_copy(t.begin());
 2850|   297k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3332|   297k|    {
 3333|   297k|        return static_cast<D&>(*this);
 3334|   297k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEE15transform_errorIRFNS0_10scan_errorESC_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSI_:
 1977|    232|    {
 1978|    232|        return detail::transform_error_impl(std::move(*this),
 1979|    232|                                            std::forward<F>(f));
 1980|    232|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_9sign_typeEEENS6_9eof_errorEEERFNS0_10scan_errorESE_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESG_EEDaOSK_OT0_:
 1460|    232|{
 1461|       |    if constexpr (std::is_void_v<Ret>) {
 1462|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1463|       |        if (SCN_LIKELY(exp.has_value())) {
 1464|       |            return result(*std::forward<Exp>(exp));
 1465|       |        }
 1466|       |
 1467|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1468|       |        return result(unexpect, monostate{});
 1469|       |    }
 1470|    232|    else {
 1471|    232|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1472|    232|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  985|    232|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 232, False: 0]
  |  |  ------------------
  ------------------
 1473|    232|                   ? result(*std::forward<Exp>(exp))
 1474|    232|                   : result(unexpect,
 1475|      0|                            trivial_invoke(std::forward<F>(f),
 1476|      0|                                           std::forward<Exp>(exp).error()));
 1477|    232|    }
 1478|    232|}
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1568|    232|        : base(std::in_place, std::forward<U>(val)),
 1569|    232|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|    232|    {
 1571|    232|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  440|    232|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    232|    {
  442|    232|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|    232|    {
 1315|    232|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEcvbEv:
 1738|    232|    {
 1739|    232|        return has_value();
 1740|    232|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|    464|    {
  490|    464|        return m_has_value;
  491|    464|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEdeISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSG_v:
 1803|    232|    {
 1804|    232|        return std::move(value());
 1805|    232|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEE5valueISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1767|    232|    {
 1768|    232|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|    232|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    232|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|    232|        return this->get_value();
 1770|    232|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|    232|    {
  456|    232|        return m_value;
  457|    232|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1963|    442|    {
 1964|    442|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1965|    442|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlSA_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSK_OT0_:
 1460|    442|{
 1461|       |    if constexpr (std::is_void_v<Ret>) {
 1462|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1463|       |        if (SCN_LIKELY(exp.has_value())) {
 1464|       |            return result(*std::forward<Exp>(exp));
 1465|       |        }
 1466|       |
 1467|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1468|       |        return result(unexpect, monostate{});
 1469|       |    }
 1470|    442|    else {
 1471|    442|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1472|    442|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  985|    442|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 0, False: 442]
  |  |  ------------------
  ------------------
 1473|    442|                   ? result(*std::forward<Exp>(exp))
 1474|    442|                   : result(unexpect,
 1475|    442|                            trivial_invoke(std::forward<F>(f),
 1476|    442|                                           std::forward<Exp>(exp).error()));
 1477|    442|    }
 1478|    442|}
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IRS7_vEEOT_:
 1568|     44|        : base(std::in_place, std::forward<U>(val)),
 1569|     44|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|     44|    {
 1571|     44|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJRS8_EvEENSt3__110in_place_tEDpOT_:
  440|     44|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|     44|    {
  442|     44|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1793|    550|    {
 1794|    550|        return value();
 1795|    550|    }
_ZZN3scn2v44impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E0_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3934|     20|    auto&& SCN_TRY_TMP = (x);                          \
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|    212|    {
 2868|    212|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|    212|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|    212|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESO_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|    212|    {
 2849|    212|        return decay_copy(t.begin());
 2850|    212|    }
_ZZN3scn2v44impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3934|    200|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1977|  7.68k|    {
 1978|  7.68k|        return detail::transform_error_impl(std::move(*this),
 1979|  7.68k|                                            std::forward<F>(f));
 1980|  7.68k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1460|  7.68k|{
 1461|       |    if constexpr (std::is_void_v<Ret>) {
 1462|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1463|       |        if (SCN_LIKELY(exp.has_value())) {
 1464|       |            return result(*std::forward<Exp>(exp));
 1465|       |        }
 1466|       |
 1467|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1468|       |        return result(unexpect, monostate{});
 1469|       |    }
 1470|  7.68k|    else {
 1471|  7.68k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1472|  7.68k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  985|  7.68k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 7.68k, False: 0]
  |  |  ------------------
  ------------------
 1473|  7.68k|                   ? result(*std::forward<Exp>(exp))
 1474|  7.68k|                   : result(unexpect,
 1475|      0|                            trivial_invoke(std::forward<F>(f),
 1476|      0|                                           std::forward<Exp>(exp).error()));
 1477|  7.68k|    }
 1478|  7.68k|}
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1568|  7.68k|        : base(std::in_place, std::forward<U>(val)),
 1569|  7.68k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  7.68k|    {
 1571|  7.68k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  440|  7.68k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  7.68k|    {
  442|  7.68k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  7.68k|    {
 1315|  7.68k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1738|  7.68k|    {
 1739|  7.68k|        return has_value();
 1740|  7.68k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  15.3k|    {
  490|  15.3k|        return m_has_value;
  491|  15.3k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1803|  7.68k|    {
 1804|  7.68k|        return std::move(value());
 1805|  7.68k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1767|  7.68k|    {
 1768|  7.68k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  7.68k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  7.68k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  7.68k|        return this->get_value();
 1770|  7.68k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  7.68k|    {
  456|  7.68k|        return m_value;
  457|  7.68k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1963|  7.70k|    {
 1964|  7.70k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1965|  7.70k|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSH_OT0_:
 1460|  7.70k|{
 1461|       |    if constexpr (std::is_void_v<Ret>) {
 1462|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1463|       |        if (SCN_LIKELY(exp.has_value())) {
 1464|       |            return result(*std::forward<Exp>(exp));
 1465|       |        }
 1466|       |
 1467|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1468|       |        return result(unexpect, monostate{});
 1469|       |    }
 1470|  7.70k|    else {
 1471|  7.70k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1472|  7.70k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  985|  7.70k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 0, False: 7.70k]
  |  |  ------------------
  ------------------
 1473|  7.70k|                   ? result(*std::forward<Exp>(exp))
 1474|  7.70k|                   : result(unexpect,
 1475|  7.70k|                            trivial_invoke(std::forward<F>(f),
 1476|  7.70k|                                           std::forward<Exp>(exp).error()));
 1477|  7.70k|    }
 1478|  7.70k|}
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IRS3_vEEOT_:
 1568|     80|        : base(std::in_place, std::forward<U>(val)),
 1569|     80|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|     80|    {
 1571|     80|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  440|     80|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|     80|    {
  442|     80|    }
_ZN3scn2v413scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3909|  7.70k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1055|  7.70k|    static_cast<    \
  |  | 1056|  7.70k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3910|  7.70k|    {
 3911|  7.70k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1793|  31.9k|    {
 1794|  31.9k|        return value();
 1795|  31.9k|    }
_ZN3scn2v46detail22parse_presentation_setIwRNS0_4impl22nonascii_specs_handlerEEENSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEERPKS8_SD_OT0_:
 7460|    894|{
 7461|    894|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|    894|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    894|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7462|    894|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  | 1051|    894|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    894|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7463|       |
 7464|    894|    auto start = begin;
 7465|    894|    ++begin;
 7466|       |
 7467|    894|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|    894|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 894]
  |  |  ------------------
  ------------------
 7468|       |        // clang-format off
 7469|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7470|       |        // clang-format on
 7471|      0|        return {};
 7472|      0|    }
 7473|    894|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7473:9): [True: 540, False: 354]
  ------------------
 7474|    540|        handler.on_charset_inverted();
 7475|    540|        ++begin;
 7476|    540|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|    540|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 540]
  |  |  ------------------
  ------------------
 7477|       |            // clang-format off
 7478|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7479|       |            // clang-format on
 7480|      0|            return {};
 7481|      0|        }
 7482|    540|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7482:13): [True: 6, False: 534]
  ------------------
 7483|      6|            handler.on_charset_single(char32_t{']'});
 7484|      6|            ++begin;
 7485|      6|        }
 7486|    540|    }
 7487|    354|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7487:14): [True: 0, False: 354]
  ------------------
 7488|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7489|      0|    }
 7490|       |
 7491|  8.83k|    while (begin != end) {
  ------------------
  |  Branch (7491:12): [True: 8.83k, False: 0]
  ------------------
 7492|  8.83k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  986|  8.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 8.83k]
  |  |  ------------------
  ------------------
 7493|      0|            break;
 7494|      0|        }
 7495|       |
 7496|  8.83k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7496:13): [True: 894, False: 7.94k]
  ------------------
 7497|    894|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7498|    894|        }
 7499|       |
 7500|  7.94k|        parse_presentation_set_literal(begin, end, handler);
 7501|  7.94k|    }
 7502|       |
 7503|      0|    SCN_UNLIKELY_ATTR
 7504|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7505|      0|    return {};
 7506|    894|}
_ZN3scn2v46detail30parse_presentation_set_literalIwRNS0_4impl22nonascii_specs_handlerEEEvRPKT_S8_OT0_:
 7424|  7.94k|{
 7425|  7.94k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|  7.94k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  7.94k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7426|       |
 7427|  7.94k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7428|  7.94k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  986|  7.94k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 7.94k]
  |  |  ------------------
  ------------------
 7429|      0|        return;
 7430|      0|    }
 7431|       |
 7432|  7.94k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7432:9): [True: 7.94k, False: 0]
  |  Branch (7432:25): [True: 582, False: 7.36k]
  |  Branch (7432:49): [True: 582, False: 0]
  ------------------
 7433|  7.94k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7433:9): [True: 576, False: 6]
  ------------------
 7434|    576|        ++begin;
 7435|       |
 7436|    576|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7437|    576|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  986|    576|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 576]
  |  |  ------------------
  ------------------
 7438|      0|            return;
 7439|      0|        }
 7440|       |
 7441|    576|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  986|    576|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 576]
  |  |  ------------------
  ------------------
 7442|       |            // clang-format off
 7443|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7444|       |            // clang-format on
 7445|      0|            return;
 7446|      0|        }
 7447|       |
 7448|    576|        handler.on_charset_range(cp_first, cp_second + 1);
 7449|    576|        return;
 7450|    576|    }
 7451|       |
 7452|  7.36k|    handler.on_charset_single(cp_first);
 7453|  7.36k|}
_ZN3scn2v46detail33parse_presentation_set_code_pointIwRNS0_4impl22nonascii_specs_handlerEEEDiRPKT_S8_OT0_:
 7400|  8.52k|{
 7401|  8.52k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|  8.52k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  8.52k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7402|       |
 7403|  8.52k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7404|  8.52k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  986|  17.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 8.52k]
  |  |  |  Branch (986:45): [True: 0, False: 8.52k]
  |  |  |  Branch (986:45): [True: 0, False: 8.52k]
  |  |  ------------------
  ------------------
 7405|      0|        handler.on_error("Invalid encoding in format string");
 7406|      0|        return invalid_code_point;
 7407|      0|    }
 7408|       |
 7409|  8.52k|    const auto cp =
 7410|  8.52k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7411|  8.52k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  986|  8.52k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 8.52k]
  |  |  ------------------
  ------------------
 7412|      0|        handler.on_error("Invalid encoding in format string");
 7413|      0|        return invalid_code_point;
 7414|      0|    }
 7415|       |
 7416|  8.52k|    begin += len;
 7417|  8.52k|    return cp;
 7418|  8.52k|}
_ZNK3scn2v46detail12format_specs14charset_stringIwEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 7019|    894|    {
 7020|    894|        return {reinterpret_cast<const CharT*>(charset_string_data),
 7021|    894|                charset_string_size};
 7022|    894|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IRKS7_vEEOT_:
 1568|    528|        : base(std::in_place, std::forward<U>(val)),
 1569|    528|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|    528|    {
 1571|    528|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJRKS8_EvEENSt3__110in_place_tEDpOT_:
  440|    528|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    528|    {
  442|    528|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1568|    666|        : base(std::in_place, std::forward<U>(val)),
 1569|    666|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|    666|    {
 1571|    666|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  440|    666|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    666|    {
  442|    666|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4sizeEv:
 6193|  59.9k|    {
 6194|  59.9k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  986|  59.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 59.9k]
  |  |  ------------------
  ------------------
 6195|      0|            return max_size();
 6196|      0|        }
 6197|       |
 6198|  59.9k|        return static_cast<std::size_t>(m_desc &
 6199|  59.9k|                                        ((1 << detail::packed_arg_bits) - 1));
 6200|  59.9k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE9is_packedEv:
 6219|  96.3k|    {
 6220|  96.3k|        return (m_desc & detail::is_unpacked_bit) == 0;
 6221|  96.3k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE3getEm:
 6161|  36.4k|    {
 6162|  36.4k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  986|  36.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 36.4k]
  |  |  ------------------
  ------------------
 6163|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  985|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6164|      0|                return m_args[id];
 6165|      0|            }
 6166|      0|            return {};
 6167|      0|        }
 6168|       |
 6169|  36.4k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  986|  36.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 194, False: 36.2k]
  |  |  ------------------
  ------------------
 6170|    194|            return {};
 6171|    194|        }
 6172|       |
 6173|  36.2k|        const auto t = type(id);
 6174|  36.2k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  986|  36.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.33k, False: 34.9k]
  |  |  ------------------
  ------------------
 6175|  1.33k|            return {};
 6176|  1.33k|        }
 6177|       |
 6178|  34.9k|        basic_scan_arg<Context> arg;
 6179|  34.9k|        arg.m_type = t;
 6180|  34.9k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6180:13): [True: 34.9k, False: 0]
  ------------------
 6181|  34.9k|            arg.m_value.ref_value = m_builtin_values[id];
 6182|  34.9k|        }
 6183|      0|        else {
 6184|      0|            arg.m_value = m_values[id];
 6185|      0|        }
 6186|  34.9k|        return arg;
 6187|  36.2k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 5971|  36.4k|    constexpr basic_scan_arg() = default;
_ZN3scn2v46detail9arg_valueC2Ev:
 5599|   116k|    arg_value() = default;
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4typeEm:
 6228|  36.2k|    {
 6229|       |        // First (0th) index is size, types start after that
 6230|  36.2k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6231|  36.2k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6232|  36.2k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6233|  36.2k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE15is_only_builtinEv:
 6223|  34.9k|    {
 6224|  34.9k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6225|  34.9k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEcvbEv:
 5977|  68.9k|    {
 5978|  68.9k|        return m_type != detail::arg_type::none_type;
 5979|  68.9k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9361|  5.68k|{
 9362|  5.68k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1057|  5.68k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9363|  5.68k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9250|  5.68k|{
 9251|  5.68k|#define SCN_VISIT(Type)                                                \
 9252|  5.68k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9253|  5.68k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9254|  5.68k|    }                                                                  \
 9255|  5.68k|    else {                                                             \
 9256|  5.68k|        return vis(monostate_val);                                     \
 9257|  5.68k|    }
 9258|       |
 9259|  5.68k|    monostate monostate_val{};
 9260|       |
 9261|  5.68k|    switch (get_arg_type(arg)) {
 9262|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 5.68k]
  ------------------
 9263|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 5.68k]
  ------------------
 9265|      0|            SCN_VISIT(short);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9266|    632|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9266:9): [True: 632, False: 5.05k]
  ------------------
 9267|    632|            SCN_VISIT(int);
  ------------------
  |  | 9252|    632|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|    632|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|    632|    }                                                                  \
  |  | 9255|    632|    else {                                                             \
  |  | 9256|    632|        return vis(monostate_val);                                     \
  |  | 9257|    632|    }
  ------------------
 9268|    632|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 5.68k]
  ------------------
 9269|    632|            SCN_VISIT(long);
  ------------------
  |  | 9252|    632|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|    632|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|    632|    }                                                                  \
  |  | 9255|    632|    else {                                                             \
  |  | 9256|    632|        return vis(monostate_val);                                     \
  |  | 9257|    632|    }
  ------------------
 9270|    632|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 5.68k]
  ------------------
 9271|    632|            SCN_VISIT(long long);
  ------------------
  |  | 9252|    632|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|    632|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|    632|    }                                                                  \
  |  | 9255|    632|    else {                                                             \
  |  | 9256|    632|        return vis(monostate_val);                                     \
  |  | 9257|    632|    }
  ------------------
 9272|    632|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 5.68k]
  ------------------
 9273|    632|#if SCN_HAS_INT128
 9274|    632|            SCN_VISIT(int128)
  ------------------
  |  | 9252|    632|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|    632|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|    632|    }                                                                  \
  |  | 9255|    632|    else {                                                             \
  |  | 9256|    632|        return vis(monostate_val);                                     \
  |  | 9257|    632|    }
  ------------------
 9275|       |#else
 9276|       |            return vis(monostate_val);
 9277|       |#endif
 9278|    632|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 5.68k]
  ------------------
 9279|    632|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9252|    632|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|    632|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|    632|    }                                                                  \
  |  | 9255|    632|    else {                                                             \
  |  | 9256|    632|        return vis(monostate_val);                                     \
  |  | 9257|    632|    }
  ------------------
 9280|    632|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 5.68k]
  ------------------
 9281|    632|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9252|    632|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|    632|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|    632|    }                                                                  \
  |  | 9255|    632|    else {                                                             \
  |  | 9256|    632|        return vis(monostate_val);                                     \
  |  | 9257|    632|    }
  ------------------
 9282|  1.26k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9282:9): [True: 632, False: 5.05k]
  ------------------
 9283|  1.26k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9252|  1.26k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  1.26k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  1.26k|    }                                                                  \
  |  | 9255|  1.26k|    else {                                                             \
  |  | 9256|  1.26k|        return vis(monostate_val);                                     \
  |  | 9257|  1.26k|    }
  ------------------
 9284|  1.26k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9284:9): [True: 0, False: 5.68k]
  ------------------
 9285|  1.26k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9252|  1.26k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  1.26k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  1.26k|    }                                                                  \
  |  | 9255|  1.26k|    else {                                                             \
  |  | 9256|  1.26k|        return vis(monostate_val);                                     \
  |  | 9257|  1.26k|    }
  ------------------
 9286|  1.26k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9286:9): [True: 0, False: 5.68k]
  ------------------
 9287|  1.26k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9252|  1.26k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  1.26k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  1.26k|    }                                                                  \
  |  | 9255|  1.26k|    else {                                                             \
  |  | 9256|  1.26k|        return vis(monostate_val);                                     \
  |  | 9257|  1.26k|    }
  ------------------
 9288|  1.26k|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9288:9): [True: 0, False: 5.68k]
  ------------------
 9289|  1.26k|#if SCN_HAS_INT128
 9290|  1.26k|            SCN_VISIT(uint128)
  ------------------
  |  | 9252|  1.26k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  1.26k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  1.26k|    }                                                                  \
  |  | 9255|  1.26k|    else {                                                             \
  |  | 9256|  1.26k|        return vis(monostate_val);                                     \
  |  | 9257|  1.26k|    }
  ------------------
 9291|       |#else
 9292|       |            return vis(monostate_val);
 9293|       |#endif
 9294|  1.89k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9294:9): [True: 632, False: 5.05k]
  ------------------
 9295|  1.89k|            SCN_VISIT(void*);
  ------------------
  |  | 9252|  1.89k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  1.89k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  1.89k|    }                                                                  \
  |  | 9255|  1.89k|    else {                                                             \
  |  | 9256|  1.89k|        return vis(monostate_val);                                     \
  |  | 9257|  1.89k|    }
  ------------------
 9296|  2.52k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9296:9): [True: 632, False: 5.05k]
  ------------------
 9297|  2.52k|            SCN_VISIT(bool);
  ------------------
  |  | 9252|  2.52k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  2.52k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  2.52k|    }                                                                  \
  |  | 9255|  2.52k|    else {                                                             \
  |  | 9256|  2.52k|        return vis(monostate_val);                                     \
  |  | 9257|  2.52k|    }
  ------------------
 9298|  3.16k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9298:9): [True: 632, False: 5.05k]
  ------------------
 9299|  3.16k|            SCN_VISIT(char);
  ------------------
  |  | 9252|  3.16k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  3.16k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  3.16k|    }                                                                  \
  |  | 9255|  3.16k|    else {                                                             \
  |  | 9256|  3.16k|        return vis(monostate_val);                                     \
  |  | 9257|  3.16k|    }
  ------------------
 9300|  3.16k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9300:9): [True: 0, False: 5.68k]
  ------------------
 9301|  3.16k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9252|  3.16k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  3.16k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  3.16k|    }                                                                  \
  |  | 9255|  3.16k|    else {                                                             \
  |  | 9256|  3.16k|        return vis(monostate_val);                                     \
  |  | 9257|  3.16k|    }
  ------------------
 9302|  3.16k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9302:9): [True: 0, False: 5.68k]
  ------------------
 9303|  3.16k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9252|  3.16k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  3.16k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  3.16k|    }                                                                  \
  |  | 9255|  3.16k|    else {                                                             \
  |  | 9256|  3.16k|        return vis(monostate_val);                                     \
  |  | 9257|  3.16k|    }
  ------------------
 9304|  3.16k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9304:9): [True: 0, False: 5.68k]
  ------------------
 9305|  3.16k|            SCN_VISIT(float);
  ------------------
  |  | 9252|  3.16k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  3.16k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  3.16k|    }                                                                  \
  |  | 9255|  3.16k|    else {                                                             \
  |  | 9256|  3.16k|        return vis(monostate_val);                                     \
  |  | 9257|  3.16k|    }
  ------------------
 9306|  3.79k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9306:9): [True: 632, False: 5.05k]
  ------------------
 9307|  3.79k|            SCN_VISIT(double);
  ------------------
  |  | 9252|  3.79k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  3.79k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  3.79k|    }                                                                  \
  |  | 9255|  3.79k|    else {                                                             \
  |  | 9256|  3.79k|        return vis(monostate_val);                                     \
  |  | 9257|  3.79k|    }
  ------------------
 9308|  3.79k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9308:9): [True: 0, False: 5.68k]
  ------------------
 9309|  3.79k|            SCN_VISIT(long double);
  ------------------
  |  | 9252|  3.79k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  3.79k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  3.79k|    }                                                                  \
  |  | 9255|  3.79k|    else {                                                             \
  |  | 9256|  3.79k|        return vis(monostate_val);                                     \
  |  | 9257|  3.79k|    }
  ------------------
 9310|  4.42k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9310:9): [True: 632, False: 5.05k]
  ------------------
 9311|  4.42k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9252|  4.42k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  4.42k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  4.42k|    }                                                                  \
  |  | 9255|  4.42k|    else {                                                             \
  |  | 9256|  4.42k|        return vis(monostate_val);                                     \
  |  | 9257|  4.42k|    }
  ------------------
 9312|  5.05k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9312:9): [True: 632, False: 5.05k]
  ------------------
 9313|  5.05k|            SCN_VISIT(std::string);
  ------------------
  |  | 9252|  5.05k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  5.05k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  5.05k|    }                                                                  \
  |  | 9255|  5.05k|    else {                                                             \
  |  | 9256|  5.05k|        return vis(monostate_val);                                     \
  |  | 9257|  5.05k|    }
  ------------------
 9314|  5.05k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9314:9): [True: 0, False: 5.68k]
  ------------------
 9315|  5.05k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9252|  5.05k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  5.05k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  5.05k|    }                                                                  \
  |  | 9255|  5.05k|    else {                                                             \
  |  | 9256|  5.05k|        return vis(monostate_val);                                     \
  |  | 9257|  5.05k|    }
  ------------------
 9316|  5.68k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9316:9): [True: 632, False: 5.05k]
  ------------------
 9317|  5.68k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9252|  5.68k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  5.68k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  5.68k|    }                                                                  \
  |  | 9255|  5.68k|    else {                                                             \
  |  | 9256|  5.68k|        return vis(monostate_val);                                     \
  |  | 9257|  5.68k|    }
  ------------------
 9318|  5.68k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9318:9): [True: 0, False: 5.68k]
  ------------------
 9319|  5.68k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9252|  5.68k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  5.68k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  5.68k|    }                                                                  \
  |  | 9255|  5.68k|    else {                                                             \
  |  | 9256|  5.68k|        return vis(monostate_val);                                     \
  |  | 9257|  5.68k|    }
  ------------------
 9320|  5.68k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9320:9): [True: 0, False: 5.68k]
  ------------------
 9321|  5.68k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9252|  5.68k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  5.68k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  5.68k|    }                                                                  \
  |  | 9255|  5.68k|    else {                                                             \
  |  | 9256|  5.68k|        return vis(monostate_val);                                     \
  |  | 9257|  5.68k|    }
  ------------------
 9322|       |
 9323|  5.68k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9323:9): [True: 0, False: 5.68k]
  ------------------
 9324|  5.68k|#if !SCN_DISABLE_TYPE_CUSTOM
 9325|  5.68k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9326|  5.68k|                get_arg_value(arg).custom_value));
 9327|       |#else
 9328|       |            return vis(monostate_val);
 9329|       |#endif
 9330|       |
 9331|      0|            SCN_CLANG_PUSH
 9332|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9333|       |
 9334|      0|            SCN_UNLIKELY_ATTR
 9335|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9335:9): [True: 0, False: 5.68k]
  ------------------
 9336|      0|        default: {
  ------------------
  |  Branch (9336:9): [True: 0, False: 5.68k]
  ------------------
 9337|      0|            return vis(monostate_val);
 9338|      0|        }
 9339|       |
 9340|  5.68k|            SCN_CLANG_POP
 9341|  5.68k|    }
 9342|       |
 9343|      0|#undef SCN_VISIT
 9344|       |
 9345|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1052|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9346|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9347|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6022|  93.5k|{
 6023|  93.5k|    return arg.m_type;
 6024|  93.5k|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6034|  32.5k|{
 6035|  32.5k|    return arg.m_value;
 6036|  32.5k|}
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1977|  2.09k|    {
 1978|  2.09k|        return detail::transform_error_impl(std::move(*this),
 1979|  2.09k|                                            std::forward<F>(f));
 1980|  2.09k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1460|  2.09k|{
 1461|       |    if constexpr (std::is_void_v<Ret>) {
 1462|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1463|       |        if (SCN_LIKELY(exp.has_value())) {
 1464|       |            return result(*std::forward<Exp>(exp));
 1465|       |        }
 1466|       |
 1467|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1468|       |        return result(unexpect, monostate{});
 1469|       |    }
 1470|  2.09k|    else {
 1471|  2.09k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1472|  2.09k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  985|  2.09k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 1.99k, False: 102]
  |  |  ------------------
  ------------------
 1473|  2.09k|                   ? result(*std::forward<Exp>(exp))
 1474|  2.09k|                   : result(unexpect,
 1475|    102|                            trivial_invoke(std::forward<F>(f),
 1476|    102|                                           std::forward<Exp>(exp).error()));
 1477|  2.09k|    }
 1478|  2.09k|}
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1624|    102|        : base(unexpect, std::forward<Args>(args)...),
 1625|    102|          ctor_base(detail::non_default_ctor_tag_t{})
 1626|    102|    {
 1627|    102|    }
_ZNO3scn2v48expectedIPKcNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1803|  1.99k|    {
 1804|  1.99k|        return std::move(value());
 1805|  1.99k|    }
_ZN3scn2v424basic_scan_parse_contextIcEC2IONS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSF_11char_traitsIcEEEEi:
 6292|  59.8k|        : m_format{format},
 6293|  59.8k|          m_next_arg_id{next_arg_id},
 6294|  59.8k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6294:27): [Folded - Ignored]
  ------------------
 6295|  59.8k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6295:27): [Folded - Ignored]
  ------------------
 6296|       |          m_is_borrowed(
 6297|  59.8k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6297:16): [Folded - Ignored]
  |  Branch (6297:41): [Folded - Ignored]
  ------------------
 6298|  59.8k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6298:15): [Folded - Ignored]
  ------------------
 6299|  59.8k|    {
 6300|  59.8k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3073|  59.8k|    {
 3074|  59.8k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3075|  59.8k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3039|  59.8k|    {
 3040|  59.8k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1057|  59.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3041|  59.8k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7808|  59.8k|{
 7809|  59.8k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7810|  59.8k|    handler.check_args_exhausted();
 7811|  59.8k|    return handler.get_error();
 7812|  59.8k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7773|  59.8k|{
 7774|       |    // TODO: memchr fast path with a larger (> 32) format string
 7775|       |
 7776|  59.8k|    auto begin = format.data();
 7777|  59.8k|    auto it = begin;
 7778|  59.8k|    const auto end = format.data() + format.size();
 7779|       |
 7780|   247k|    while (it != end) {
  ------------------
  |  Branch (7780:12): [True: 240k, False: 7.03k]
  ------------------
 7781|   240k|        const auto ch = *it++;
 7782|   240k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7782:13): [True: 64.7k, False: 175k]
  ------------------
 7783|  64.7k|            handler.on_literal_text(begin, it - 1);
 7784|       |
 7785|  64.7k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7786|  64.7k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7786:17): [True: 51.3k, False: 13.4k]
  ------------------
 7787|  51.3k|                return;
 7788|  51.3k|            }
 7789|  64.7k|        }
 7790|   175k|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7790:18): [True: 2.81k, False: 172k]
  ------------------
 7791|  2.81k|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  986|  5.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.54k, False: 1.27k]
  |  |  |  Branch (986:45): [True: 270, False: 2.54k]
  |  |  |  Branch (986:45): [True: 1.27k, False: 1.27k]
  |  |  ------------------
  ------------------
 7792|  1.54k|                handler.on_error("Unmatched '}' in format string");
 7793|  1.54k|                return;
 7794|  1.54k|            }
 7795|       |
 7796|  1.27k|            handler.on_literal_text(begin, it);
 7797|  1.27k|            begin = ++it;
 7798|  1.27k|        }
 7799|   240k|    }
 7800|       |
 7801|  7.03k|    handler.on_literal_text(begin, end);
 7802|  7.03k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 7705|  64.7k|{
 7706|  64.7k|    struct id_adapter {
 7707|  64.7k|        constexpr void operator()()
 7708|  64.7k|        {
 7709|  64.7k|            arg_id = handler.on_arg_id();
 7710|  64.7k|        }
 7711|  64.7k|        constexpr void operator()(std::size_t id)
 7712|  64.7k|        {
 7713|  64.7k|            arg_id = handler.on_arg_id(id);
 7714|  64.7k|        }
 7715|       |
 7716|  64.7k|        constexpr void on_error(const char* msg)
 7717|  64.7k|        {
 7718|  64.7k|            SCN_UNLIKELY_ATTR
 7719|  64.7k|            handler.on_error(msg);
 7720|  64.7k|        }
 7721|       |
 7722|  64.7k|        Handler& handler;
 7723|  64.7k|        std::size_t arg_id;
 7724|  64.7k|    };
 7725|       |
 7726|  64.7k|    ++begin;
 7727|  64.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  64.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 188, False: 64.5k]
  |  |  ------------------
  ------------------
 7728|    188|        handler.on_error("Unexpected end of replacement field");
 7729|    188|        return begin;
 7730|    188|    }
 7731|       |
 7732|  64.5k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7732:9): [True: 5.67k, False: 58.8k]
  ------------------
 7733|  5.67k|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7734|  5.67k|    }
 7735|  58.8k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7735:14): [True: 6.89k, False: 51.9k]
  ------------------
 7736|  6.89k|        handler.on_literal_text(begin, begin + 1);
 7737|  6.89k|    }
 7738|  51.9k|    else {
 7739|  51.9k|        auto adapter = id_adapter{handler, 0};
 7740|  51.9k|        begin = parse_arg_id(begin, end, adapter);
 7741|       |
 7742|  51.9k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  51.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 110, False: 51.8k]
  |  |  ------------------
  ------------------
 7743|    110|            handler.on_error("Missing '}' in format string");
 7744|    110|            return begin;
 7745|    110|        }
 7746|       |
 7747|  51.8k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7747:13): [True: 266, False: 51.6k]
  ------------------
 7748|    266|            handler.on_replacement_field(adapter.arg_id, begin);
 7749|    266|        }
 7750|  51.6k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7750:18): [True: 30.5k, False: 21.0k]
  ------------------
 7751|  30.5k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  986|  30.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 74, False: 30.5k]
  |  |  ------------------
  ------------------
 7752|     74|                handler.on_error("Unexpected end of replacement field");
 7753|     74|                return begin;
 7754|     74|            }
 7755|  30.5k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7756|  30.5k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  986|  61.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.23k, False: 27.2k]
  |  |  |  Branch (986:45): [True: 0, False: 30.5k]
  |  |  |  Branch (986:45): [True: 3.23k, False: 27.2k]
  |  |  ------------------
  ------------------
 7757|  3.23k|                handler.on_error("Unknown format specifier");
 7758|  3.23k|                return begin;
 7759|  3.23k|            }
 7760|  30.5k|        }
 7761|  21.0k|        else {
 7762|  21.0k|            SCN_UNLIKELY_ATTR
 7763|  21.0k|            handler.on_error("Missing '}' in format string");
 7764|  21.0k|            return begin;
 7765|  21.0k|        }
 7766|  51.8k|    }
 7767|  40.1k|    return begin + 1;
 7768|  64.5k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE3argEm:
 8861|  36.4k|    {
 8862|  36.4k|        return m_args.get(id);
 8863|  36.4k|    }
_ZN3scn2v424basic_scan_parse_contextIcE11next_arg_idEv:
 6327|  35.8k|    {
 6328|  35.8k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  986|  35.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 42, False: 35.8k]
  |  |  ------------------
  ------------------
 6329|     42|            on_error(
 6330|     42|                "Cannot switch from manual to automatic argument indexing");
 6331|     42|            return 0;
 6332|     42|        }
 6333|       |
 6334|  35.8k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6335|  35.8k|        do_check_arg_id(id);
 6336|  35.8k|        return id;
 6337|  35.8k|    }
_ZN3scn2v424basic_scan_parse_contextIcE8on_errorEPKc:
 6357|    112|    {
 6358|    112|        m_error = unexpected(detail::handle_error(
 6359|    112|            scan_error{scan_error::invalid_format_string, msg}));
 6360|    112|        return m_error.error();
 6361|    112|    }
_ZN3scn2v424basic_scan_parse_contextIcE15do_check_arg_idEm:
 6821|  36.4k|{
 6822|  36.4k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6822:9): [Folded - Ignored]
  ------------------
 6823|  36.4k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  241|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  241|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6823:10): [Folded - Ignored]
  |  Branch (6823:22): [Folded - Ignored]
  ------------------
 6824|       |        // The cast below will cause an error on gcc pre-12
 6825|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6826|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6826:13): [True: 0, False: 0]
  ------------------
 6827|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6828|      0|            SCN_UNLIKELY_ATTR
 6829|      0|            on_error("Argument not found");
 6830|      0|        }
 6831|      0|    }
 6832|  36.4k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7206|  51.9k|{
 7207|  51.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|  51.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  51.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7208|  51.9k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7208:9): [True: 51.9k, False: 0]
  |  Branch (7208:26): [True: 21.7k, False: 30.2k]
  ------------------
 7209|  21.7k|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1057|  21.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7210|  21.7k|    }
 7211|       |
 7212|  30.2k|    handler();
 7213|  30.2k|    return begin;
 7214|  51.9k|}
impl.cpp:_ZN3scn2v46detail15do_parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7176|  21.7k|{
 7177|  21.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|  21.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  21.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7178|       |
 7179|  21.7k|    CharT c = *begin;
 7180|  21.7k|    if (c < CharT{'0'} || c > CharT{'9'}) {
  ------------------
  |  Branch (7180:9): [True: 20.8k, False: 952]
  |  Branch (7180:27): [True: 124, False: 828]
  ------------------
 7181|  20.9k|        handler.on_error("Invalid argument ID");
 7182|  20.9k|        return begin;
 7183|  20.9k|    }
 7184|       |
 7185|    828|    int idx = 0;
 7186|    828|    if (c != CharT{'0'}) {
  ------------------
  |  Branch (7186:9): [True: 432, False: 396]
  ------------------
 7187|    432|        idx = parse_simple_int(begin, end);
 7188|    432|    }
 7189|    396|    else {
 7190|    396|        ++begin;
 7191|    396|    }
 7192|       |
 7193|    828|    if (begin == end || (*begin != CharT{'}'} && *begin != CharT{':'})) {
  ------------------
  |  Branch (7193:9): [True: 110, False: 718]
  |  Branch (7193:26): [True: 452, False: 266]
  |  Branch (7193:50): [True: 72, False: 380]
  ------------------
 7194|    182|        handler.on_error("Invalid argument ID");
 7195|    182|        return begin;
 7196|    182|    }
 7197|    646|    handler(idx);
 7198|       |
 7199|    646|    return begin;
 7200|    828|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapter8on_errorEPKc:
 7717|  21.1k|        {
 7718|  21.1k|            SCN_UNLIKELY_ATTR
 7719|  21.1k|            handler.on_error(msg);
 7720|  21.1k|        }
_ZN3scn2v46detail16parse_simple_intIcEEiRPKT_S5_:
 7155|  15.5k|{
 7156|  15.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|  15.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  15.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7157|  15.5k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  | 1051|  15.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  15.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7158|       |
 7159|  15.5k|    unsigned long long value = 0;
 7160|  30.4k|    do {
 7161|  30.4k|        value *= 10;
 7162|  30.4k|        value += static_cast<unsigned long long>(*begin - '0');
 7163|  30.4k|        if (value >
  ------------------
  |  Branch (7163:13): [True: 116, False: 30.3k]
  ------------------
 7164|  30.4k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 7165|    116|            return -1;
 7166|    116|        }
 7167|  30.3k|        ++begin;
 7168|  30.3k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (7168:14): [True: 30.0k, False: 294]
  |  Branch (7168:30): [True: 26.1k, False: 3.89k]
  |  Branch (7168:47): [True: 14.8k, False: 11.2k]
  ------------------
 7169|  15.4k|    return static_cast<int>(value);
 7170|  15.5k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEm:
 7712|    646|        {
 7713|    646|            arg_id = handler.on_arg_id(id);
 7714|    646|        }
_ZN3scn2v424basic_scan_parse_contextIcE12check_arg_idEm:
 6340|    646|    {
 6341|    646|        if (SCN_UNLIKELY(m_next_arg_id > 0)) {
  ------------------
  |  |  986|    646|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 70, False: 576]
  |  |  ------------------
  ------------------
 6342|     70|            on_error(
 6343|     70|                "Cannot switch from manual to automatic argument indexing");
 6344|     70|            return;
 6345|     70|        }
 6346|    576|        m_next_arg_id = -1;
 6347|    576|        do_check_arg_id(id);
 6348|    576|    }
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7708|  30.2k|        {
 7709|  30.2k|            arg_id = handler.on_arg_id();
 7710|  30.2k|        }
_ZN3scn2v424basic_scan_parse_contextIcE10advance_toEPKc:
 6322|  27.0k|    {
 6323|  27.0k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6324|  27.0k|    }
_ZNK3scn2v424basic_scan_parse_contextIcE5beginEv:
 6311|  57.5k|    {
 6312|  57.5k|        return m_format.data();
 6313|  57.5k|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7887|  30.5k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  | 1057|  30.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7888|  30.5k|    {
 7889|  30.5k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  | 1051|  30.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  30.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7890|  30.5k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7621|  30.5k|{
 7622|  30.5k|    auto do_presentation = [&]() -> const CharT* {
 7623|  30.5k|        if (*begin == CharT{'['}) {
 7624|  30.5k|            auto set = parse_presentation_set(begin, end, handler);
 7625|  30.5k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7626|       |                // clang-format off
 7627|  30.5k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7628|       |                // clang-format on
 7629|  30.5k|                return begin;
 7630|  30.5k|            }
 7631|  30.5k|            handler.on_character_set_string(set);
 7632|  30.5k|            return begin;
 7633|  30.5k|        }
 7634|  30.5k|        if (*begin == CharT{'/'}) {
 7635|  30.5k|            return parse_presentation_regex(begin, end, handler);
 7636|  30.5k|        }
 7637|  30.5k|        presentation_type type = parse_presentation_type(*begin++);
 7638|  30.5k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7639|  30.5k|            handler.on_error("Invalid type specifier in format string");
 7640|  30.5k|            return begin;
 7641|  30.5k|        }
 7642|  30.5k|        handler.on_type(type);
 7643|  30.5k|        return begin;
 7644|  30.5k|    };
 7645|       |
 7646|  30.5k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7646:9): [True: 29.4k, False: 1.09k]
  |  Branch (7646:28): [True: 2.46k, False: 26.9k]
  ------------------
 7647|  30.5k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7647:9): [True: 968, False: 1.50k]
  |  Branch (7647:36): [True: 934, False: 34]
  ------------------
 7648|    934|        return do_presentation();
 7649|    934|    }
 7650|       |
 7651|  29.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  29.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 29.5k]
  |  |  ------------------
  ------------------
 7652|      0|        handler.on_error("Unexpected end of format string");
 7653|      0|        return begin;
 7654|      0|    }
 7655|       |
 7656|  29.5k|    begin = parse_align(begin, end, handler);
 7657|  29.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  29.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 126, False: 29.4k]
  |  |  ------------------
  ------------------
 7658|    126|        handler.on_error("Unexpected end of format string");
 7659|    126|        return begin;
 7660|    126|    }
 7661|       |
 7662|  29.4k|    begin = parse_width(begin, end, handler);
 7663|  29.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  29.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 102, False: 29.3k]
  |  |  ------------------
  ------------------
 7664|    102|        handler.on_error("Unexpected end of format string");
 7665|    102|        return begin;
 7666|    102|    }
 7667|       |
 7668|  29.3k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7668:9): [True: 11.2k, False: 18.0k]
  ------------------
 7669|  11.2k|        ++begin;
 7670|  11.2k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  11.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 34, False: 11.2k]
  |  |  ------------------
  ------------------
 7671|     34|            handler.on_error("Unexpected end of format string");
 7672|     34|            return begin;
 7673|     34|        }
 7674|  11.2k|        begin = parse_precision(begin, end, handler);
 7675|  11.2k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  11.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 114, False: 11.1k]
  |  |  ------------------
  ------------------
 7676|    114|            handler.on_error("Unexpected end of format string");
 7677|    114|            return begin;
 7678|    114|        }
 7679|  11.2k|    }
 7680|       |
 7681|  29.2k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7681:9): [True: 572, False: 28.6k]
  ------------------
 7682|    572|        handler.on_localized();
 7683|    572|        ++begin;
 7684|    572|    }
 7685|  29.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  29.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 52, False: 29.1k]
  |  |  ------------------
  ------------------
 7686|     52|        handler.on_error("Unexpected end of format string");
 7687|     52|        return begin;
 7688|     52|    }
 7689|       |
 7690|  29.1k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7690:9): [True: 29.1k, False: 0]
  |  Branch (7690:25): [True: 23.2k, False: 5.92k]
  ------------------
 7691|  23.2k|        do_presentation();
 7692|  23.2k|    }
 7693|  29.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  29.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.99k, False: 27.1k]
  |  |  ------------------
  ------------------
 7694|  1.99k|        handler.on_error("Unexpected end of format string");
 7695|  1.99k|        return begin;
 7696|  1.99k|    }
 7697|       |
 7698|  27.1k|    return begin;
 7699|  29.1k|}
_ZN3scn2v46detail15is_ascii_letterIcEEbT_:
 7270|  2.46k|{
 7271|  2.46k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7271:13): [True: 932, False: 1.53k]
  |  Branch (7271:33): [True: 880, False: 52]
  ------------------
 7272|  2.46k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7272:13): [True: 268, False: 1.32k]
  |  Branch (7272:33): [True: 88, False: 180]
  ------------------
 7273|  2.46k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7622|  24.1k|    auto do_presentation = [&]() -> const CharT* {
 7623|  24.1k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7623:13): [True: 14.2k, False: 9.91k]
  ------------------
 7624|  14.2k|            auto set = parse_presentation_set(begin, end, handler);
 7625|  14.2k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  986|  14.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 810, False: 13.4k]
  |  |  ------------------
  ------------------
 7626|       |                // clang-format off
 7627|    810|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7628|       |                // clang-format on
 7629|    810|                return begin;
 7630|    810|            }
 7631|  13.4k|            handler.on_character_set_string(set);
 7632|  13.4k|            return begin;
 7633|  14.2k|        }
 7634|  9.91k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7634:13): [True: 4.02k, False: 5.89k]
  ------------------
 7635|  4.02k|            return parse_presentation_regex(begin, end, handler);
 7636|  4.02k|        }
 7637|  5.89k|        presentation_type type = parse_presentation_type(*begin++);
 7638|  5.89k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  986|  5.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 844, False: 5.04k]
  |  |  ------------------
  ------------------
 7639|    844|            handler.on_error("Invalid type specifier in format string");
 7640|    844|            return begin;
 7641|    844|        }
 7642|  5.04k|        handler.on_type(type);
 7643|  5.04k|        return begin;
 7644|  5.89k|    };
impl.cpp:_ZN3scn2v46detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEENSt3__117basic_string_viewIT_NSI_11char_traitsISK_EEEERPKSK_SP_OT0_:
 7460|  14.2k|{
 7461|  14.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|  14.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  14.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7462|  14.2k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  | 1051|  14.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  14.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7463|       |
 7464|  14.2k|    auto start = begin;
 7465|  14.2k|    ++begin;
 7466|       |
 7467|  14.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  14.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 42, False: 14.2k]
  |  |  ------------------
  ------------------
 7468|       |        // clang-format off
 7469|     42|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7470|       |        // clang-format on
 7471|     42|        return {};
 7472|     42|    }
 7473|  14.2k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7473:9): [True: 2.44k, False: 11.7k]
  ------------------
 7474|  2.44k|        handler.on_charset_inverted();
 7475|  2.44k|        ++begin;
 7476|  2.44k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  2.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 34, False: 2.41k]
  |  |  ------------------
  ------------------
 7477|       |            // clang-format off
 7478|     34|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7479|       |            // clang-format on
 7480|     34|            return {};
 7481|     34|        }
 7482|  2.41k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7482:13): [True: 52, False: 2.35k]
  ------------------
 7483|     52|            handler.on_charset_single(char32_t{']'});
 7484|     52|            ++begin;
 7485|     52|        }
 7486|  2.41k|    }
 7487|  11.7k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7487:14): [True: 34, False: 11.7k]
  ------------------
 7488|     34|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7489|     34|    }
 7490|       |
 7491|  2.14M|    while (begin != end) {
  ------------------
  |  Branch (7491:12): [True: 2.14M, False: 484]
  ------------------
 7492|  2.14M|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  986|  2.14M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 216, False: 2.14M]
  |  |  ------------------
  ------------------
 7493|    216|            break;
 7494|    216|        }
 7495|       |
 7496|  2.14M|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7496:13): [True: 13.4k, False: 2.13M]
  ------------------
 7497|  13.4k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7498|  13.4k|        }
 7499|       |
 7500|  2.13M|        parse_presentation_set_literal(begin, end, handler);
 7501|  2.13M|    }
 7502|       |
 7503|    700|    SCN_UNLIKELY_ATTR
 7504|    700|    handler.on_error("Invalid [character set] specifier in format string");
 7505|    700|    return {};
 7506|  14.1k|}
impl.cpp:_ZN3scn2v46detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEvRPKT_SK_OT0_:
 7424|  2.13M|{
 7425|  2.13M|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|  2.13M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  2.13M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7426|       |
 7427|  2.13M|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7428|  2.13M|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  986|  2.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 94, False: 2.13M]
  |  |  ------------------
  ------------------
 7429|     94|        return;
 7430|     94|    }
 7431|       |
 7432|  2.13M|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7432:9): [True: 2.13M, False: 188]
  |  Branch (7432:25): [True: 13.2k, False: 2.12M]
  |  Branch (7432:49): [True: 13.2k, False: 34]
  ------------------
 7433|  2.13M|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7433:9): [True: 13.0k, False: 214]
  ------------------
 7434|  13.0k|        ++begin;
 7435|       |
 7436|  13.0k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7437|  13.0k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  986|  13.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 70, False: 12.9k]
  |  |  ------------------
  ------------------
 7438|     70|            return;
 7439|     70|        }
 7440|       |
 7441|  12.9k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  986|  12.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 34, False: 12.9k]
  |  |  ------------------
  ------------------
 7442|       |            // clang-format off
 7443|     34|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7444|       |            // clang-format on
 7445|     34|            return;
 7446|     34|        }
 7447|       |
 7448|  12.9k|        handler.on_charset_range(cp_first, cp_second + 1);
 7449|  12.9k|        return;
 7450|  12.9k|    }
 7451|       |
 7452|  2.12M|    handler.on_charset_single(cp_first);
 7453|  2.12M|}
impl.cpp:_ZN3scn2v46detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEDiRPKT_SK_OT0_:
 7400|  2.14M|{
 7401|  2.14M|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|  2.14M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  2.14M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7402|       |
 7403|  2.14M|    auto len = code_point_length_by_starting_code_unit(*begin);
 7404|  2.14M|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  986|  4.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 96, False: 2.14M]
  |  |  |  Branch (986:45): [True: 70, False: 2.14M]
  |  |  |  Branch (986:45): [True: 26, False: 2.14M]
  |  |  ------------------
  ------------------
 7405|     96|        handler.on_error("Invalid encoding in format string");
 7406|     96|        return invalid_code_point;
 7407|     96|    }
 7408|       |
 7409|  2.14M|    const auto cp =
 7410|  2.14M|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7411|  2.14M|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  986|  2.14M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 68, False: 2.14M]
  |  |  ------------------
  ------------------
 7412|     68|        handler.on_error("Invalid encoding in format string");
 7413|     68|        return invalid_code_point;
 7414|     68|    }
 7415|       |
 7416|  2.14M|    begin += len;
 7417|  2.14M|    return cp;
 7418|  2.14M|}
_ZN3scn2v46detail12specs_setter23on_character_set_stringIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7114|  13.4k|    {
 7115|  13.4k|        m_specs.charset_string_data = fmt.data();
 7116|  13.4k|        m_specs.charset_string_size = fmt.size();
 7117|  13.4k|        on_type(presentation_type::string_set);
 7118|  13.4k|    }
impl.cpp:_ZN3scn2v46detail24parse_presentation_regexIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_RSK_SK_OT0_:
 7512|  4.02k|{
 7513|  4.02k|#if !SCN_DISABLE_REGEX
 7514|  4.02k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|  4.02k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  4.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7515|  4.02k|    SCN_EXPECT(*begin == CharT{'/'});
  ------------------
  |  | 1051|  4.02k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  4.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7516|       |
 7517|       |    if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 7518|       |                  std::is_same_v<CharT, wchar_t>) {
 7519|       |        handler.on_error("Regex backend doesn't support wide strings as input");
 7520|       |        return begin;
 7521|       |    }
 7522|       |
 7523|  4.02k|    auto start = begin;
 7524|  4.02k|    ++begin;
 7525|       |
 7526|  4.02k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  4.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 34, False: 3.98k]
  |  |  ------------------
  ------------------
 7527|     34|        handler.on_error("Unexpected end of regex in format string");
 7528|     34|        return begin;
 7529|     34|    }
 7530|       |
 7531|  3.98k|    handler.on_type(presentation_type::regex);
 7532|   234k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (7532:12): [True: 234k, False: 174]
  ------------------
 7533|   234k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7533:13): [True: 25.7k, False: 208k]
  ------------------
 7534|  25.7k|            if (*(begin - 1) != CharT{'\\'}) {
  ------------------
  |  Branch (7534:17): [True: 3.81k, False: 21.9k]
  ------------------
 7535|  3.81k|                break;
 7536|  3.81k|            }
 7537|  21.9k|            else {
 7538|  21.9k|                handler.on_type(presentation_type::regex_escaped);
 7539|  21.9k|            }
 7540|  25.7k|        }
 7541|   234k|    }
 7542|  3.98k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  3.98k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 174, False: 3.81k]
  |  |  ------------------
  ------------------
 7543|    174|        handler.on_error("Unexpected end of regex in format string");
 7544|    174|        return begin;
 7545|    174|    }
 7546|       |
 7547|  3.81k|    auto regex_end = begin;
 7548|  3.81k|    auto regex_pattern = make_string_view_from_pointers(start + 1, regex_end);
 7549|  3.81k|    if (SCN_UNLIKELY(regex_pattern.empty())) {
  ------------------
  |  |  986|  3.81k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 34, False: 3.77k]
  |  |  ------------------
  ------------------
 7550|     34|        handler.on_error("Invalid (empty) regex in format string");
 7551|     34|        return begin;
 7552|     34|    }
 7553|  3.77k|    handler.on_regex_pattern(regex_pattern);
 7554|  3.77k|    ++begin;
 7555|       |
 7556|  3.77k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  3.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 34, False: 3.74k]
  |  |  ------------------
  ------------------
 7557|     34|        handler.on_error("Unexpected end of regex in format string");
 7558|     34|        return begin;
 7559|     34|    }
 7560|       |
 7561|  3.74k|    regex_flags flags{regex_flags::none};
 7562|  3.74k|    constexpr std::array<std::pair<char, regex_flags>, 4> flag_map{
 7563|  3.74k|        {{'m', regex_flags::multiline},
 7564|  3.74k|         {'s', regex_flags::singleline},
 7565|  3.74k|         {'i', regex_flags::nocase},
 7566|  3.74k|         {'n', regex_flags::nocapture}}};
 7567|  3.96k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (7567:12): [True: 3.92k, False: 42]
  ------------------
 7568|  3.92k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7568:13): [True: 3.61k, False: 310]
  ------------------
 7569|  3.61k|            break;
 7570|  3.61k|        }
 7571|    310|        bool found_flag = false;
 7572|    874|        for (auto flag : flag_map) {
  ------------------
  |  Branch (7572:24): [True: 874, False: 54]
  ------------------
 7573|    874|            if (static_cast<CharT>(flag.first) != *begin) {
  ------------------
  |  Branch (7573:17): [True: 618, False: 256]
  ------------------
 7574|    618|                continue;
 7575|    618|            }
 7576|    256|            if ((flags & flag.second) != regex_flags::none) {
  ------------------
  |  Branch (7576:17): [True: 34, False: 222]
  ------------------
 7577|     34|                handler.on_error("Flag set multiple times in regex");
 7578|     34|                return begin;
 7579|     34|            }
 7580|       |#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 7581|       |            if (*begin == CharT{'s'}) {
 7582|       |                // clang-format off
 7583|       |                handler.on_error("/s flag for regex isn't supported by regex backend");
 7584|       |                // clang-format on
 7585|       |            }
 7586|       |#if !SCN_HAS_STD_REGEX_MULTILINE
 7587|       |            if (*begin == CharT{'m'}) {
 7588|       |                // clang-format off
 7589|       |                handler.on_error("/m flag for regex isn't supported by regex backend");
 7590|       |                // clang-format on
 7591|       |            }
 7592|       |#endif
 7593|       |#endif
 7594|    222|            flags |= flag.second;
 7595|    222|            found_flag = true;
 7596|    222|            break;
 7597|    256|        }
 7598|    276|        if (!found_flag) {
  ------------------
  |  Branch (7598:13): [True: 54, False: 222]
  ------------------
 7599|     54|            handler.on_error("Invalid flag in regex");
 7600|     54|            return begin;
 7601|     54|        }
 7602|    276|    }
 7603|  3.65k|    handler.on_regex_flags(flags);
 7604|       |
 7605|  3.65k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  3.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 42, False: 3.61k]
  |  |  ------------------
  ------------------
 7606|     42|        handler.on_error("Unexpected end of regex in format string");
 7607|     42|        return begin;
 7608|     42|    }
 7609|       |
 7610|  3.61k|    return begin;
 7611|       |#else
 7612|       |    handler.on_error("Regular expression support is disabled");
 7613|       |    return {};
 7614|       |#endif
 7615|  3.65k|}
_ZN3scn2v46detail12specs_setter16on_regex_patternIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7122|  3.77k|    {
 7123|  3.77k|        m_specs.charset_string_data = pattern.data();
 7124|  3.77k|        m_specs.charset_string_size = pattern.size();
 7125|  3.77k|    }
_ZN3scn2v46detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 7218|  5.89k|{
 7219|  5.89k|    switch (type) {
 7220|    142|        case 'b':
  ------------------
  |  Branch (7220:9): [True: 142, False: 5.74k]
  ------------------
 7221|    194|        case 'B':
  ------------------
  |  Branch (7221:9): [True: 52, False: 5.83k]
  ------------------
 7222|    194|            return presentation_type::int_binary;
 7223|    108|        case 'd':
  ------------------
  |  Branch (7223:9): [True: 108, False: 5.78k]
  ------------------
 7224|    108|            return presentation_type::int_decimal;
 7225|    196|        case 'i':
  ------------------
  |  Branch (7225:9): [True: 196, False: 5.69k]
  ------------------
 7226|    196|            return presentation_type::int_generic;
 7227|     88|        case 'u':
  ------------------
  |  Branch (7227:9): [True: 88, False: 5.80k]
  ------------------
 7228|     88|            return presentation_type::int_unsigned_decimal;
 7229|    196|        case 'o':
  ------------------
  |  Branch (7229:9): [True: 196, False: 5.69k]
  ------------------
 7230|    196|            return presentation_type::int_octal;
 7231|     98|        case 'x':
  ------------------
  |  Branch (7231:9): [True: 98, False: 5.79k]
  ------------------
 7232|    150|        case 'X':
  ------------------
  |  Branch (7232:9): [True: 52, False: 5.83k]
  ------------------
 7233|    150|            return presentation_type::int_hex;
 7234|     34|        case 'r':
  ------------------
  |  Branch (7234:9): [True: 34, False: 5.85k]
  ------------------
 7235|     84|        case 'R':
  ------------------
  |  Branch (7235:9): [True: 50, False: 5.84k]
  ------------------
 7236|     84|            return presentation_type::int_arbitrary_base;
 7237|    124|        case 'a':
  ------------------
  |  Branch (7237:9): [True: 124, False: 5.76k]
  ------------------
 7238|    230|        case 'A':
  ------------------
  |  Branch (7238:9): [True: 106, False: 5.78k]
  ------------------
 7239|    230|            return presentation_type::float_hex;
 7240|     88|        case 'e':
  ------------------
  |  Branch (7240:9): [True: 88, False: 5.80k]
  ------------------
 7241|    212|        case 'E':
  ------------------
  |  Branch (7241:9): [True: 124, False: 5.76k]
  ------------------
 7242|    212|            return presentation_type::float_scientific;
 7243|    214|        case 'f':
  ------------------
  |  Branch (7243:9): [True: 214, False: 5.67k]
  ------------------
 7244|    320|        case 'F':
  ------------------
  |  Branch (7244:9): [True: 106, False: 5.78k]
  ------------------
 7245|    320|            return presentation_type::float_fixed;
 7246|    150|        case 'g':
  ------------------
  |  Branch (7246:9): [True: 150, False: 5.74k]
  ------------------
 7247|    226|        case 'G':
  ------------------
  |  Branch (7247:9): [True: 76, False: 5.81k]
  ------------------
 7248|    226|            return presentation_type::float_general;
 7249|  2.35k|        case 's':
  ------------------
  |  Branch (7249:9): [True: 2.35k, False: 3.53k]
  ------------------
 7250|  2.35k|            return presentation_type::string;
 7251|    574|        case 'c':
  ------------------
  |  Branch (7251:9): [True: 574, False: 5.31k]
  ------------------
 7252|    574|            return presentation_type::character;
 7253|     34|        case '?':
  ------------------
  |  Branch (7253:9): [True: 34, False: 5.85k]
  ------------------
 7254|     34|            return presentation_type::escaped_character;
 7255|     78|        case 'p':
  ------------------
  |  Branch (7255:9): [True: 78, False: 5.81k]
  ------------------
 7256|     78|            return presentation_type::pointer;
 7257|      0|        case '[':
  ------------------
  |  Branch (7257:9): [True: 0, False: 5.89k]
  ------------------
 7258|      0|        case '/':
  ------------------
  |  Branch (7258:9): [True: 0, False: 5.89k]
  ------------------
 7259|       |            // Should be handled by parse_presentation_set and
 7260|       |            // parse_presentation_regex
 7261|      0|            SCN_EXPECT(false);
  ------------------
  |  | 1051|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7262|      0|            SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7263|    844|        default:
  ------------------
  |  Branch (7263:9): [True: 844, False: 5.04k]
  ------------------
 7264|    844|            return presentation_type::none;
 7265|  5.89k|    }
 7266|  5.89k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7295|  29.5k|{
 7296|  29.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|  29.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  29.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7297|       |
 7298|  29.5k|    auto check_align = [](wchar_t ch) {
 7299|  29.5k|        switch (ch) {
 7300|  29.5k|            case L'<':
 7301|  29.5k|                return align_type::left;
 7302|  29.5k|            case L'>':
 7303|  29.5k|                return align_type::right;
 7304|  29.5k|            case L'^':
 7305|  29.5k|                return align_type::center;
 7306|  29.5k|            default:
 7307|  29.5k|                return align_type::none;
 7308|  29.5k|        }
 7309|  29.5k|    };
 7310|       |
 7311|  29.5k|    auto potential_fill_len = code_point_length(begin, end);
 7312|  29.5k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  986|  59.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 44, False: 29.5k]
  |  |  |  Branch (986:45): [True: 38, False: 29.5k]
  |  |  |  Branch (986:45): [True: 6, False: 29.5k]
  |  |  ------------------
  ------------------
 7313|  29.5k|                     std::distance(begin, end) < potential_fill_len)) {
 7314|     44|        handler.on_error("Invalid encoding in fill character");
 7315|     44|        return begin;
 7316|     44|    }
 7317|       |
 7318|  29.5k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7319|       |
 7320|  29.5k|    auto potential_fill = std::basic_string_view<CharT>{
 7321|  29.5k|        begin, static_cast<size_t>(potential_fill_len)};
 7322|  29.5k|    const auto begin_before_fill = begin;
 7323|  29.5k|    begin += potential_fill_len;
 7324|       |
 7325|  29.5k|    if (begin == end) {
  ------------------
  |  Branch (7325:9): [True: 1.05k, False: 28.4k]
  ------------------
 7326|  1.05k|        return begin_before_fill;
 7327|  1.05k|    }
 7328|       |
 7329|  28.4k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7330|  28.4k|    const auto begin_after_fill = begin;
 7331|  28.4k|    ++begin;
 7332|       |
 7333|  28.4k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7333:9): [True: 26.0k, False: 2.41k]
  ------------------
 7334|  26.0k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  986|  26.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 60, False: 26.0k]
  |  |  ------------------
  ------------------
 7335|     60|            handler.on_error("Invalid fill character '{' in format string");
 7336|     60|            return begin;
 7337|     60|        }
 7338|  26.0k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7338:13): [True: 10.8k, False: 15.1k]
  ------------------
 7339|  10.8k|            return begin_before_fill;
 7340|  10.8k|        }
 7341|  26.0k|    }
 7342|       |
 7343|  17.5k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7343:9): [True: 14.9k, False: 2.60k]
  ------------------
 7344|  14.9k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7344:13): [True: 2.06k, False: 12.8k]
  ------------------
 7345|  2.06k|            handler.on_align(potential_align_on_fill);
 7346|  2.06k|            return begin_after_fill;
 7347|  2.06k|        }
 7348|  12.8k|        return begin_before_fill;
 7349|  14.9k|    }
 7350|       |
 7351|  2.60k|    handler.on_fill(potential_fill);
 7352|  2.60k|    handler.on_align(potential_align_after_fill);
 7353|  2.60k|    return begin;
 7354|  17.5k|}
_ZN3scn2v46detail17code_point_lengthIcEEiPKT_S5_:
 7277|  29.5k|{
 7278|  29.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|  29.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  29.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7279|       |    if constexpr (sizeof(CharT) != 1) {
 7280|       |        return 1;
 7281|       |    }
 7282|  29.5k|    else {
 7283|  29.5k|        const auto lengths =
 7284|  29.5k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7285|  29.5k|            "\3\4";
 7286|  29.5k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7287|  29.5k|        return len;
 7288|  29.5k|    }
 7289|  29.5k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7298|  58.0k|    auto check_align = [](wchar_t ch) {
 7299|  58.0k|        switch (ch) {
 7300|  1.48k|            case L'<':
  ------------------
  |  Branch (7300:13): [True: 1.48k, False: 56.5k]
  ------------------
 7301|  1.48k|                return align_type::left;
 7302|    958|            case L'>':
  ------------------
  |  Branch (7302:13): [True: 958, False: 57.0k]
  ------------------
 7303|    958|                return align_type::right;
 7304|  3.36k|            case L'^':
  ------------------
  |  Branch (7304:13): [True: 3.36k, False: 54.6k]
  ------------------
 7305|  3.36k|                return align_type::center;
 7306|  52.2k|            default:
  ------------------
  |  Branch (7306:13): [True: 52.2k, False: 5.81k]
  ------------------
 7307|  52.2k|                return align_type::none;
 7308|  58.0k|        }
 7309|  58.0k|    };
_ZN3scn2v46detail12specs_setter7on_fillIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7035|  2.60k|    {
 7036|  2.60k|        m_specs.fill = fill;
 7037|  2.60k|    }
_ZN3scn2v46detail9fill_typeaSIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6916|  2.60k|    {
 6917|  2.60k|        SCN_EXPECT(!s.empty());
  ------------------
  |  | 1051|  2.60k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  2.60k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6918|  2.60k|        SCN_EXPECT(s.size() * sizeof(CharT) <= max_size);
  ------------------
  |  | 1051|  2.60k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  2.60k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6919|  2.60k|        if constexpr (sizeof(CharT) == 1) {
 6920|  9.41k|            for (size_t i = 0; i < s.size(); ++i) {
  ------------------
  |  Branch (6920:32): [True: 6.81k, False: 2.60k]
  ------------------
 6921|  6.81k|                SCN_GCC_PUSH
 6922|  6.81k|                SCN_GCC_IGNORE("-Wstringop-overflow")  // false positive
 6923|  6.81k|                m_data[i] = s[i];
 6924|  6.81k|                SCN_GCC_POP
 6925|  6.81k|            }
 6926|  2.60k|            m_size = static_cast<unsigned char>(s.size());
 6927|       |        }
 6928|       |        else if constexpr (sizeof(CharT) == 2) {
 6929|       |            m_data[0] = static_cast<char>(static_cast<unsigned>(s.front()));
 6930|       |            m_data[1] =
 6931|       |                static_cast<char>(static_cast<unsigned>(s.front()) >> 8);
 6932|       |            if (s.size() == 1) {
 6933|       |                return;
 6934|       |            }
 6935|       |            m_data[2] = static_cast<char>(static_cast<unsigned>(s[1]));
 6936|       |            m_data[3] = static_cast<char>(static_cast<unsigned>(s[1]) >> 8);
 6937|       |        }
 6938|       |        else {
 6939|       |            const auto front = static_cast<unsigned>(s.front());
 6940|       |            m_data[0] = static_cast<char>(front);
 6941|       |            m_data[1] = static_cast<char>(front >> 8);
 6942|       |            m_data[2] = static_cast<char>(front >> 16);
 6943|       |            m_data[3] = static_cast<char>(front >> 24);
 6944|       |        }
 6945|  2.60k|    }
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7360|  29.4k|{
 7361|  29.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|  29.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  29.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7362|       |
 7363|  29.4k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7363:9): [True: 17.4k, False: 12.0k]
  |  Branch (7363:33): [True: 4.00k, False: 13.4k]
  ------------------
 7364|  4.00k|        int width = parse_simple_int(begin, end);
 7365|  4.00k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  985|  4.00k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 3.96k, False: 34]
  |  |  ------------------
  ------------------
 7366|  3.96k|            handler.on_width(width);
 7367|  3.96k|        }
 7368|     34|        else {
 7369|     34|            handler.on_error("Invalid field width");
 7370|     34|            return begin;
 7371|     34|        }
 7372|  4.00k|    }
 7373|  29.4k|    return begin;
 7374|  29.4k|}
impl.cpp:_ZN3scn2v46detail15parse_precisionIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7380|  11.2k|{
 7381|  11.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|  11.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  11.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7382|       |
 7383|  11.2k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7383:9): [True: 11.1k, False: 40]
  |  Branch (7383:33): [True: 11.1k, False: 52]
  ------------------
 7384|  11.1k|        int prec = parse_simple_int(begin, end);
 7385|  11.1k|        if (SCN_LIKELY(prec != -1)) {
  ------------------
  |  |  985|  11.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 11.0k, False: 48]
  |  |  ------------------
  ------------------
 7386|  11.0k|            handler.on_precision(prec);
 7387|  11.0k|        }
 7388|     48|        else {
 7389|     48|            handler.on_error("Invalid field precision");
 7390|     48|            return begin;
 7391|     48|        }
 7392|  11.1k|    }
 7393|  11.1k|    return begin;
 7394|  11.2k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEE12on_localizedEv:
 7893|    572|    {
 7894|    572|        const auto cat = get_category_for_arg_type(m_arg_type);
 7895|    572|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7895:13): [True: 514, False: 58]
  ------------------
 7896|    572|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7896:13): [True: 456, False: 58]
  ------------------
 7897|    572|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7897:13): [True: 398, False: 58]
  ------------------
 7898|    572|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7898:13): [True: 340, False: 58]
  ------------------
 7899|    340|            SCN_UNLIKELY_ATTR
 7900|       |            // clang-format off
 7901|    340|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7902|       |            // clang-format on
 7903|    340|        }
 7904|       |
 7905|    232|        Handler::on_localized();
 7906|    232|    }
_ZN3scn2v46detail12specs_setter12on_localizedILb1EEEvv:
 7040|    512|    {
 7041|    512|        if constexpr (!SCN_DISABLE_LOCALE) {
 7042|    512|            m_specs.localized = true;
 7043|       |        }
 7044|       |        else {
 7045|       |            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 7046|       |        }
 7047|    512|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9361|  26.8k|{
 9362|  26.8k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1057|  26.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9363|  26.8k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9250|  26.8k|{
 9251|  26.8k|#define SCN_VISIT(Type)                                                \
 9252|  26.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9253|  26.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9254|  26.8k|    }                                                                  \
 9255|  26.8k|    else {                                                             \
 9256|  26.8k|        return vis(monostate_val);                                     \
 9257|  26.8k|    }
 9258|       |
 9259|  26.8k|    monostate monostate_val{};
 9260|       |
 9261|  26.8k|    switch (get_arg_type(arg)) {
 9262|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 26.8k]
  ------------------
 9263|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 26.8k]
  ------------------
 9265|      0|            SCN_VISIT(short);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9266|  3.00k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9266:9): [True: 3.00k, False: 23.8k]
  ------------------
 9267|  3.00k|            SCN_VISIT(int);
  ------------------
  |  | 9252|  3.00k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  3.00k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  3.00k|    }                                                                  \
  |  | 9255|  3.00k|    else {                                                             \
  |  | 9256|  3.00k|        return vis(monostate_val);                                     \
  |  | 9257|  3.00k|    }
  ------------------
 9268|  3.00k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 26.8k]
  ------------------
 9269|  3.00k|            SCN_VISIT(long);
  ------------------
  |  | 9252|  3.00k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  3.00k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  3.00k|    }                                                                  \
  |  | 9255|  3.00k|    else {                                                             \
  |  | 9256|  3.00k|        return vis(monostate_val);                                     \
  |  | 9257|  3.00k|    }
  ------------------
 9270|  3.00k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 26.8k]
  ------------------
 9271|  3.00k|            SCN_VISIT(long long);
  ------------------
  |  | 9252|  3.00k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  3.00k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  3.00k|    }                                                                  \
  |  | 9255|  3.00k|    else {                                                             \
  |  | 9256|  3.00k|        return vis(monostate_val);                                     \
  |  | 9257|  3.00k|    }
  ------------------
 9272|  3.00k|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 26.8k]
  ------------------
 9273|  3.00k|#if SCN_HAS_INT128
 9274|  3.00k|            SCN_VISIT(int128)
  ------------------
  |  | 9252|  3.00k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  3.00k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  3.00k|    }                                                                  \
  |  | 9255|  3.00k|    else {                                                             \
  |  | 9256|  3.00k|        return vis(monostate_val);                                     \
  |  | 9257|  3.00k|    }
  ------------------
 9275|       |#else
 9276|       |            return vis(monostate_val);
 9277|       |#endif
 9278|  3.00k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 26.8k]
  ------------------
 9279|  3.00k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9252|  3.00k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  3.00k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  3.00k|    }                                                                  \
  |  | 9255|  3.00k|    else {                                                             \
  |  | 9256|  3.00k|        return vis(monostate_val);                                     \
  |  | 9257|  3.00k|    }
  ------------------
 9280|  3.00k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 26.8k]
  ------------------
 9281|  3.00k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9252|  3.00k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  3.00k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  3.00k|    }                                                                  \
  |  | 9255|  3.00k|    else {                                                             \
  |  | 9256|  3.00k|        return vis(monostate_val);                                     \
  |  | 9257|  3.00k|    }
  ------------------
 9282|  6.01k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9282:9): [True: 3.00k, False: 23.8k]
  ------------------
 9283|  6.01k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9252|  6.01k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  6.01k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  6.01k|    }                                                                  \
  |  | 9255|  6.01k|    else {                                                             \
  |  | 9256|  6.01k|        return vis(monostate_val);                                     \
  |  | 9257|  6.01k|    }
  ------------------
 9284|  6.01k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9284:9): [True: 0, False: 26.8k]
  ------------------
 9285|  6.01k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9252|  6.01k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  6.01k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  6.01k|    }                                                                  \
  |  | 9255|  6.01k|    else {                                                             \
  |  | 9256|  6.01k|        return vis(monostate_val);                                     \
  |  | 9257|  6.01k|    }
  ------------------
 9286|  6.01k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9286:9): [True: 0, False: 26.8k]
  ------------------
 9287|  6.01k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9252|  6.01k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  6.01k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  6.01k|    }                                                                  \
  |  | 9255|  6.01k|    else {                                                             \
  |  | 9256|  6.01k|        return vis(monostate_val);                                     \
  |  | 9257|  6.01k|    }
  ------------------
 9288|  6.01k|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9288:9): [True: 0, False: 26.8k]
  ------------------
 9289|  6.01k|#if SCN_HAS_INT128
 9290|  6.01k|            SCN_VISIT(uint128)
  ------------------
  |  | 9252|  6.01k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  6.01k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  6.01k|    }                                                                  \
  |  | 9255|  6.01k|    else {                                                             \
  |  | 9256|  6.01k|        return vis(monostate_val);                                     \
  |  | 9257|  6.01k|    }
  ------------------
 9291|       |#else
 9292|       |            return vis(monostate_val);
 9293|       |#endif
 9294|  8.97k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9294:9): [True: 2.96k, False: 23.8k]
  ------------------
 9295|  8.97k|            SCN_VISIT(void*);
  ------------------
  |  | 9252|  8.97k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  8.97k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  8.97k|    }                                                                  \
  |  | 9255|  8.97k|    else {                                                             \
  |  | 9256|  8.97k|        return vis(monostate_val);                                     \
  |  | 9257|  8.97k|    }
  ------------------
 9296|  11.9k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9296:9): [True: 3.00k, False: 23.8k]
  ------------------
 9297|  11.9k|            SCN_VISIT(bool);
  ------------------
  |  | 9252|  11.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  11.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  11.9k|    }                                                                  \
  |  | 9255|  11.9k|    else {                                                             \
  |  | 9256|  11.9k|        return vis(monostate_val);                                     \
  |  | 9257|  11.9k|    }
  ------------------
 9298|  14.9k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9298:9): [True: 2.96k, False: 23.8k]
  ------------------
 9299|  14.9k|            SCN_VISIT(char);
  ------------------
  |  | 9252|  14.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  14.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  14.9k|    }                                                                  \
  |  | 9255|  14.9k|    else {                                                             \
  |  | 9256|  14.9k|        return vis(monostate_val);                                     \
  |  | 9257|  14.9k|    }
  ------------------
 9300|  14.9k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9300:9): [True: 0, False: 26.8k]
  ------------------
 9301|  14.9k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9252|  14.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  14.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  14.9k|    }                                                                  \
  |  | 9255|  14.9k|    else {                                                             \
  |  | 9256|  14.9k|        return vis(monostate_val);                                     \
  |  | 9257|  14.9k|    }
  ------------------
 9302|  14.9k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9302:9): [True: 0, False: 26.8k]
  ------------------
 9303|  14.9k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9252|  14.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  14.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  14.9k|    }                                                                  \
  |  | 9255|  14.9k|    else {                                                             \
  |  | 9256|  14.9k|        return vis(monostate_val);                                     \
  |  | 9257|  14.9k|    }
  ------------------
 9304|  14.9k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9304:9): [True: 0, False: 26.8k]
  ------------------
 9305|  14.9k|            SCN_VISIT(float);
  ------------------
  |  | 9252|  14.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  14.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  14.9k|    }                                                                  \
  |  | 9255|  14.9k|    else {                                                             \
  |  | 9256|  14.9k|        return vis(monostate_val);                                     \
  |  | 9257|  14.9k|    }
  ------------------
 9306|  17.9k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9306:9): [True: 3.00k, False: 23.8k]
  ------------------
 9307|  17.9k|            SCN_VISIT(double);
  ------------------
  |  | 9252|  17.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  17.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  17.9k|    }                                                                  \
  |  | 9255|  17.9k|    else {                                                             \
  |  | 9256|  17.9k|        return vis(monostate_val);                                     \
  |  | 9257|  17.9k|    }
  ------------------
 9308|  17.9k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9308:9): [True: 0, False: 26.8k]
  ------------------
 9309|  17.9k|            SCN_VISIT(long double);
  ------------------
  |  | 9252|  17.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  17.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  17.9k|    }                                                                  \
  |  | 9255|  17.9k|    else {                                                             \
  |  | 9256|  17.9k|        return vis(monostate_val);                                     \
  |  | 9257|  17.9k|    }
  ------------------
 9310|  20.9k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9310:9): [True: 2.96k, False: 23.8k]
  ------------------
 9311|  20.9k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9252|  20.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  20.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  20.9k|    }                                                                  \
  |  | 9255|  20.9k|    else {                                                             \
  |  | 9256|  20.9k|        return vis(monostate_val);                                     \
  |  | 9257|  20.9k|    }
  ------------------
 9312|  23.8k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9312:9): [True: 2.96k, False: 23.8k]
  ------------------
 9313|  23.8k|            SCN_VISIT(std::string);
  ------------------
  |  | 9252|  23.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  23.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  23.8k|    }                                                                  \
  |  | 9255|  23.8k|    else {                                                             \
  |  | 9256|  23.8k|        return vis(monostate_val);                                     \
  |  | 9257|  23.8k|    }
  ------------------
 9314|  23.8k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9314:9): [True: 0, False: 26.8k]
  ------------------
 9315|  23.8k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9252|  23.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  23.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  23.8k|    }                                                                  \
  |  | 9255|  23.8k|    else {                                                             \
  |  | 9256|  23.8k|        return vis(monostate_val);                                     \
  |  | 9257|  23.8k|    }
  ------------------
 9316|  26.8k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9316:9): [True: 2.96k, False: 23.8k]
  ------------------
 9317|  26.8k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9252|  26.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  26.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  26.8k|    }                                                                  \
  |  | 9255|  26.8k|    else {                                                             \
  |  | 9256|  26.8k|        return vis(monostate_val);                                     \
  |  | 9257|  26.8k|    }
  ------------------
 9318|  26.8k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9318:9): [True: 0, False: 26.8k]
  ------------------
 9319|  26.8k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9252|  26.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  26.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  26.8k|    }                                                                  \
  |  | 9255|  26.8k|    else {                                                             \
  |  | 9256|  26.8k|        return vis(monostate_val);                                     \
  |  | 9257|  26.8k|    }
  ------------------
 9320|  26.8k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9320:9): [True: 0, False: 26.8k]
  ------------------
 9321|  26.8k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9252|  26.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  26.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  26.8k|    }                                                                  \
  |  | 9255|  26.8k|    else {                                                             \
  |  | 9256|  26.8k|        return vis(monostate_val);                                     \
  |  | 9257|  26.8k|    }
  ------------------
 9322|       |
 9323|  26.8k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9323:9): [True: 0, False: 26.8k]
  ------------------
 9324|  26.8k|#if !SCN_DISABLE_TYPE_CUSTOM
 9325|  26.8k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9326|  26.8k|                get_arg_value(arg).custom_value));
 9327|       |#else
 9328|       |            return vis(monostate_val);
 9329|       |#endif
 9330|       |
 9331|      0|            SCN_CLANG_PUSH
 9332|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9333|       |
 9334|      0|            SCN_UNLIKELY_ATTR
 9335|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9335:9): [True: 0, False: 26.8k]
  ------------------
 9336|      0|        default: {
  ------------------
  |  Branch (9336:9): [True: 0, False: 26.8k]
  ------------------
 9337|      0|            return vis(monostate_val);
 9338|      0|        }
 9339|       |
 9340|  26.8k|            SCN_CLANG_POP
 9341|  26.8k|    }
 9342|       |
 9343|      0|#undef SCN_VISIT
 9344|       |
 9345|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1052|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9346|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9347|      0|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE5beginEv:
 3478|  15.6k|    {
 3479|  15.6k|        return m_iterator;
 3480|  15.6k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISH_vEEOT_:
 1568|  3.41k|        : base(std::in_place, std::forward<U>(val)),
 1569|  3.41k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  3.41k|    {
 1571|  3.41k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  440|  3.41k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  3.41k|    {
  442|  3.41k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  3.79k|    {
 1315|  3.79k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE3endEv:
 3482|  11.4k|    {
 3483|  11.4k|        return m_sentinel;
 3484|  11.4k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISI_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSM_IXsr3stdE16is_convertible_vISO_SI_EEvE4typeELSS_0EEEONS0_10unexpectedISN_EE:
 1614|    382|        : base(unexpect, std::move(e.error())),
 1615|    382|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|    382|    {
 1617|    382|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  449|    382|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    382|          m_has_value(false)
  451|    382|    {
  452|    382|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEEC2ISG_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SG_EEvE4typeELPv0EEESO_SJ_:
 3463|  7.73k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|  7.73k|    static_cast<    \
  |  | 1056|  7.73k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|  7.73k|    static_cast<    \
  |  | 1056|  7.73k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3464|  7.73k|    {
 3465|  7.73k|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEcvbEv:
 1738|  1.32k|    {
 1739|  1.32k|        return has_value();
 1740|  1.32k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9has_valueEv:
  489|  8.03k|    {
  490|  8.03k|        return m_has_value;
  491|  8.03k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1793|  1.76k|    {
 1794|  1.76k|        return value();
 1795|  1.76k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5valueISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1767|  3.99k|    {
 1768|  3.99k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  3.99k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  3.99k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  3.99k|        return this->get_value();
 1770|  3.99k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9get_valueEv:
  455|  3.99k|    {
  456|  3.99k|        return m_value;
  457|  3.99k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESI_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSO_:
 1977|  2.47k|    {
 1978|  2.47k|        return detail::transform_error_impl(std::move(*this),
 1979|  2.47k|                                            std::forward<F>(f));
 1980|  2.47k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS6_IPKcS8_EENS4_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEE8sentinelILb1EEEEENS4_9eof_errorEEERFNS0_10scan_errorESK_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESM_EEDaOSR_OT0_:
 1460|  2.47k|{
 1461|       |    if constexpr (std::is_void_v<Ret>) {
 1462|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1463|       |        if (SCN_LIKELY(exp.has_value())) {
 1464|       |            return result(*std::forward<Exp>(exp));
 1465|       |        }
 1466|       |
 1467|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1468|       |        return result(unexpect, monostate{});
 1469|       |    }
 1470|  2.47k|    else {
 1471|  2.47k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1472|  2.47k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  985|  2.47k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 2.23k, False: 238]
  |  |  ------------------
  ------------------
 1473|  2.47k|                   ? result(*std::forward<Exp>(exp))
 1474|  2.47k|                   : result(unexpect,
 1475|    238|                            trivial_invoke(std::forward<F>(f),
 1476|    238|                                           std::forward<Exp>(exp).error()));
 1477|  2.47k|    }
 1478|  2.47k|}
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSN_v:
 1803|  2.23k|    {
 1804|  2.23k|        return std::move(value());
 1805|  2.23k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1568|  2.23k|        : base(std::in_place, std::forward<U>(val)),
 1569|  2.23k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  2.23k|    {
 1571|  2.23k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  440|  2.23k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.23k|    {
  442|  2.23k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  2.47k|    {
 1315|  2.47k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5errorEv:
 1754|    238|    {
 1755|    238|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|    238|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    238|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1756|    238|        return std::move(this->get_unexpected().error());
 1757|    238|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE14get_unexpectedEv:
  472|    238|    {
  473|    238|        return m_unexpected;
  474|    238|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
 1624|    238|        : base(unexpect, std::forward<Args>(args)...),
 1625|    238|          ctor_base(detail::non_default_ctor_tag_t{})
 1626|    238|    {
 1627|    238|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  449|    238|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    238|          m_has_value(false)
  451|    238|    {
  452|    238|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEcvbEv:
 1738|  2.47k|    {
 1739|  2.47k|        return has_value();
 1740|  2.47k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  4.95k|    {
  490|  4.95k|        return m_has_value;
  491|  4.95k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5errorEv:
 1744|    238|    {
 1745|    238|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|    238|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    238|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|    238|        return this->get_unexpected().error();
 1747|    238|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|    238|    {
  473|    238|        return m_unexpected;
  474|    238|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSN_v:
 1803|  2.23k|    {
 1804|  2.23k|        return std::move(value());
 1805|  2.23k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5valueISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1767|  2.23k|    {
 1768|  2.23k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  2.23k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  2.23k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  2.23k|        return this->get_value();
 1770|  2.23k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  2.23k|    {
  456|  2.23k|        return m_value;
  457|  2.23k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4sizeEv:
 6193|   119k|    {
 6194|   119k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  986|   119k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 119k]
  |  |  ------------------
  ------------------
 6195|      0|            return max_size();
 6196|      0|        }
 6197|       |
 6198|   119k|        return static_cast<std::size_t>(m_desc &
 6199|   119k|                                        ((1 << detail::packed_arg_bits) - 1));
 6200|   119k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE9is_packedEv:
 6219|   200k|    {
 6220|   200k|        return (m_desc & detail::is_unpacked_bit) == 0;
 6221|   200k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE3getEm:
 6161|  80.5k|    {
 6162|  80.5k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  986|  80.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 80.5k]
  |  |  ------------------
  ------------------
 6163|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  985|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6164|      0|                return m_args[id];
 6165|      0|            }
 6166|      0|            return {};
 6167|      0|        }
 6168|       |
 6169|  80.5k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  986|  80.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 68, False: 80.4k]
  |  |  ------------------
  ------------------
 6170|     68|            return {};
 6171|     68|        }
 6172|       |
 6173|  80.4k|        const auto t = type(id);
 6174|  80.4k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  986|  80.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.22k, False: 79.2k]
  |  |  ------------------
  ------------------
 6175|  1.22k|            return {};
 6176|  1.22k|        }
 6177|       |
 6178|  79.2k|        basic_scan_arg<Context> arg;
 6179|  79.2k|        arg.m_type = t;
 6180|  79.2k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6180:13): [True: 79.2k, False: 0]
  ------------------
 6181|  79.2k|            arg.m_value.ref_value = m_builtin_values[id];
 6182|  79.2k|        }
 6183|      0|        else {
 6184|      0|            arg.m_value = m_values[id];
 6185|      0|        }
 6186|  79.2k|        return arg;
 6187|  80.4k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 5971|  80.5k|    constexpr basic_scan_arg() = default;
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4typeEm:
 6228|  80.4k|    {
 6229|       |        // First (0th) index is size, types start after that
 6230|  80.4k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6231|  80.4k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6232|  80.4k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6233|  80.4k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE15is_only_builtinEv:
 6223|  79.2k|    {
 6224|  79.2k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6225|  79.2k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEcvbEv:
 5977|   157k|    {
 5978|   157k|        return m_type != detail::arg_type::none_type;
 5979|   157k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9361|  64.6k|{
 9362|  64.6k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1057|  64.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9363|  64.6k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9250|  64.6k|{
 9251|  64.6k|#define SCN_VISIT(Type)                                                \
 9252|  64.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9253|  64.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9254|  64.6k|    }                                                                  \
 9255|  64.6k|    else {                                                             \
 9256|  64.6k|        return vis(monostate_val);                                     \
 9257|  64.6k|    }
 9258|       |
 9259|  64.6k|    monostate monostate_val{};
 9260|       |
 9261|  64.6k|    switch (get_arg_type(arg)) {
 9262|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 64.6k]
  ------------------
 9263|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 64.6k]
  ------------------
 9265|      0|            SCN_VISIT(short);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9266|  7.18k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9266:9): [True: 7.18k, False: 57.5k]
  ------------------
 9267|  7.18k|            SCN_VISIT(int);
  ------------------
  |  | 9252|  7.18k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  7.18k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  7.18k|    }                                                                  \
  |  | 9255|  7.18k|    else {                                                             \
  |  | 9256|  7.18k|        return vis(monostate_val);                                     \
  |  | 9257|  7.18k|    }
  ------------------
 9268|  7.18k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 64.6k]
  ------------------
 9269|  7.18k|            SCN_VISIT(long);
  ------------------
  |  | 9252|  7.18k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  7.18k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  7.18k|    }                                                                  \
  |  | 9255|  7.18k|    else {                                                             \
  |  | 9256|  7.18k|        return vis(monostate_val);                                     \
  |  | 9257|  7.18k|    }
  ------------------
 9270|  7.18k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 64.6k]
  ------------------
 9271|  7.18k|            SCN_VISIT(long long);
  ------------------
  |  | 9252|  7.18k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  7.18k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  7.18k|    }                                                                  \
  |  | 9255|  7.18k|    else {                                                             \
  |  | 9256|  7.18k|        return vis(monostate_val);                                     \
  |  | 9257|  7.18k|    }
  ------------------
 9272|  7.18k|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 64.6k]
  ------------------
 9273|  7.18k|#if SCN_HAS_INT128
 9274|  7.18k|            SCN_VISIT(int128)
  ------------------
  |  | 9252|  7.18k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  7.18k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  7.18k|    }                                                                  \
  |  | 9255|  7.18k|    else {                                                             \
  |  | 9256|  7.18k|        return vis(monostate_val);                                     \
  |  | 9257|  7.18k|    }
  ------------------
 9275|       |#else
 9276|       |            return vis(monostate_val);
 9277|       |#endif
 9278|  7.18k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 64.6k]
  ------------------
 9279|  7.18k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9252|  7.18k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  7.18k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  7.18k|    }                                                                  \
  |  | 9255|  7.18k|    else {                                                             \
  |  | 9256|  7.18k|        return vis(monostate_val);                                     \
  |  | 9257|  7.18k|    }
  ------------------
 9280|  7.18k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 64.6k]
  ------------------
 9281|  7.18k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9252|  7.18k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  7.18k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  7.18k|    }                                                                  \
  |  | 9255|  7.18k|    else {                                                             \
  |  | 9256|  7.18k|        return vis(monostate_val);                                     \
  |  | 9257|  7.18k|    }
  ------------------
 9282|  14.3k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9282:9): [True: 7.18k, False: 57.5k]
  ------------------
 9283|  14.3k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9252|  14.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  14.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  14.3k|    }                                                                  \
  |  | 9255|  14.3k|    else {                                                             \
  |  | 9256|  14.3k|        return vis(monostate_val);                                     \
  |  | 9257|  14.3k|    }
  ------------------
 9284|  14.3k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9284:9): [True: 0, False: 64.6k]
  ------------------
 9285|  14.3k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9252|  14.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  14.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  14.3k|    }                                                                  \
  |  | 9255|  14.3k|    else {                                                             \
  |  | 9256|  14.3k|        return vis(monostate_val);                                     \
  |  | 9257|  14.3k|    }
  ------------------
 9286|  14.3k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9286:9): [True: 0, False: 64.6k]
  ------------------
 9287|  14.3k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9252|  14.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  14.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  14.3k|    }                                                                  \
  |  | 9255|  14.3k|    else {                                                             \
  |  | 9256|  14.3k|        return vis(monostate_val);                                     \
  |  | 9257|  14.3k|    }
  ------------------
 9288|  14.3k|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9288:9): [True: 0, False: 64.6k]
  ------------------
 9289|  14.3k|#if SCN_HAS_INT128
 9290|  14.3k|            SCN_VISIT(uint128)
  ------------------
  |  | 9252|  14.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  14.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  14.3k|    }                                                                  \
  |  | 9255|  14.3k|    else {                                                             \
  |  | 9256|  14.3k|        return vis(monostate_val);                                     \
  |  | 9257|  14.3k|    }
  ------------------
 9291|       |#else
 9292|       |            return vis(monostate_val);
 9293|       |#endif
 9294|  21.5k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9294:9): [True: 7.18k, False: 57.5k]
  ------------------
 9295|  21.5k|            SCN_VISIT(void*);
  ------------------
  |  | 9252|  21.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  21.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  21.5k|    }                                                                  \
  |  | 9255|  21.5k|    else {                                                             \
  |  | 9256|  21.5k|        return vis(monostate_val);                                     \
  |  | 9257|  21.5k|    }
  ------------------
 9296|  28.7k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9296:9): [True: 7.18k, False: 57.5k]
  ------------------
 9297|  28.7k|            SCN_VISIT(bool);
  ------------------
  |  | 9252|  28.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  28.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  28.7k|    }                                                                  \
  |  | 9255|  28.7k|    else {                                                             \
  |  | 9256|  28.7k|        return vis(monostate_val);                                     \
  |  | 9257|  28.7k|    }
  ------------------
 9298|  28.7k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9298:9): [True: 0, False: 64.6k]
  ------------------
 9299|  28.7k|            SCN_VISIT(char);
  ------------------
  |  | 9252|  28.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  28.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  28.7k|    }                                                                  \
  |  | 9255|  28.7k|    else {                                                             \
  |  | 9256|  28.7k|        return vis(monostate_val);                                     \
  |  | 9257|  28.7k|    }
  ------------------
 9300|  35.9k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9300:9): [True: 7.18k, False: 57.5k]
  ------------------
 9301|  35.9k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9252|  35.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  35.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  35.9k|    }                                                                  \
  |  | 9255|  35.9k|    else {                                                             \
  |  | 9256|  35.9k|        return vis(monostate_val);                                     \
  |  | 9257|  35.9k|    }
  ------------------
 9302|  35.9k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9302:9): [True: 0, False: 64.6k]
  ------------------
 9303|  35.9k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9252|  35.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  35.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  35.9k|    }                                                                  \
  |  | 9255|  35.9k|    else {                                                             \
  |  | 9256|  35.9k|        return vis(monostate_val);                                     \
  |  | 9257|  35.9k|    }
  ------------------
 9304|  35.9k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9304:9): [True: 0, False: 64.6k]
  ------------------
 9305|  35.9k|            SCN_VISIT(float);
  ------------------
  |  | 9252|  35.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  35.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  35.9k|    }                                                                  \
  |  | 9255|  35.9k|    else {                                                             \
  |  | 9256|  35.9k|        return vis(monostate_val);                                     \
  |  | 9257|  35.9k|    }
  ------------------
 9306|  43.1k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9306:9): [True: 7.18k, False: 57.5k]
  ------------------
 9307|  43.1k|            SCN_VISIT(double);
  ------------------
  |  | 9252|  43.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  43.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  43.1k|    }                                                                  \
  |  | 9255|  43.1k|    else {                                                             \
  |  | 9256|  43.1k|        return vis(monostate_val);                                     \
  |  | 9257|  43.1k|    }
  ------------------
 9308|  43.1k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9308:9): [True: 0, False: 64.6k]
  ------------------
 9309|  43.1k|            SCN_VISIT(long double);
  ------------------
  |  | 9252|  43.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  43.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  43.1k|    }                                                                  \
  |  | 9255|  43.1k|    else {                                                             \
  |  | 9256|  43.1k|        return vis(monostate_val);                                     \
  |  | 9257|  43.1k|    }
  ------------------
 9310|  43.1k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9310:9): [True: 0, False: 64.6k]
  ------------------
 9311|  43.1k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9252|  43.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  43.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  43.1k|    }                                                                  \
  |  | 9255|  43.1k|    else {                                                             \
  |  | 9256|  43.1k|        return vis(monostate_val);                                     \
  |  | 9257|  43.1k|    }
  ------------------
 9312|  50.3k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9312:9): [True: 7.18k, False: 57.5k]
  ------------------
 9313|  50.3k|            SCN_VISIT(std::string);
  ------------------
  |  | 9252|  50.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  50.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  50.3k|    }                                                                  \
  |  | 9255|  50.3k|    else {                                                             \
  |  | 9256|  50.3k|        return vis(monostate_val);                                     \
  |  | 9257|  50.3k|    }
  ------------------
 9314|  57.5k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9314:9): [True: 7.18k, False: 57.5k]
  ------------------
 9315|  57.5k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9252|  57.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  57.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  57.5k|    }                                                                  \
  |  | 9255|  57.5k|    else {                                                             \
  |  | 9256|  57.5k|        return vis(monostate_val);                                     \
  |  | 9257|  57.5k|    }
  ------------------
 9316|  64.6k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9316:9): [True: 7.18k, False: 57.5k]
  ------------------
 9317|  64.6k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9252|  64.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  64.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  64.6k|    }                                                                  \
  |  | 9255|  64.6k|    else {                                                             \
  |  | 9256|  64.6k|        return vis(monostate_val);                                     \
  |  | 9257|  64.6k|    }
  ------------------
 9318|  64.6k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9318:9): [True: 0, False: 64.6k]
  ------------------
 9319|  64.6k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9252|  64.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  64.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  64.6k|    }                                                                  \
  |  | 9255|  64.6k|    else {                                                             \
  |  | 9256|  64.6k|        return vis(monostate_val);                                     \
  |  | 9257|  64.6k|    }
  ------------------
 9320|  64.6k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9320:9): [True: 0, False: 64.6k]
  ------------------
 9321|  64.6k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9252|  64.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  64.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  64.6k|    }                                                                  \
  |  | 9255|  64.6k|    else {                                                             \
  |  | 9256|  64.6k|        return vis(monostate_val);                                     \
  |  | 9257|  64.6k|    }
  ------------------
 9322|       |
 9323|  64.6k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9323:9): [True: 0, False: 64.6k]
  ------------------
 9324|  64.6k|#if !SCN_DISABLE_TYPE_CUSTOM
 9325|  64.6k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9326|  64.6k|                get_arg_value(arg).custom_value));
 9327|       |#else
 9328|       |            return vis(monostate_val);
 9329|       |#endif
 9330|       |
 9331|      0|            SCN_CLANG_PUSH
 9332|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9333|       |
 9334|      0|            SCN_UNLIKELY_ATTR
 9335|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9335:9): [True: 0, False: 64.6k]
  ------------------
 9336|      0|        default: {
  ------------------
  |  Branch (9336:9): [True: 0, False: 64.6k]
  ------------------
 9337|      0|            return vis(monostate_val);
 9338|      0|        }
 9339|       |
 9340|  64.6k|            SCN_CLANG_POP
 9341|  64.6k|    }
 9342|       |
 9343|      0|#undef SCN_VISIT
 9344|       |
 9345|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1052|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9346|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9347|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6022|   108k|{
 6023|   108k|    return arg.m_type;
 6024|   108k|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6034|  77.2k|{
 6035|  77.2k|    return arg.m_value;
 6036|  77.2k|}
_ZN3scn2v424basic_scan_parse_contextIwEC2IONS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSF_11char_traitsIwEEEEi:
 6292|   119k|        : m_format{format},
 6293|   119k|          m_next_arg_id{next_arg_id},
 6294|   119k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6294:27): [Folded - Ignored]
  ------------------
 6295|   119k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6295:27): [Folded - Ignored]
  ------------------
 6296|       |          m_is_borrowed(
 6297|   119k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6297:16): [Folded - Ignored]
  |  Branch (6297:41): [Folded - Ignored]
  ------------------
 6298|   119k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6298:15): [Folded - Ignored]
  ------------------
 6299|   119k|    {
 6300|   119k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3073|   119k|    {
 3074|   119k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3075|   119k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3039|   119k|    {
 3040|   119k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1057|   119k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3041|   119k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7808|   119k|{
 7809|   119k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7810|   119k|    handler.check_args_exhausted();
 7811|   119k|    return handler.get_error();
 7812|   119k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7773|   119k|{
 7774|       |    // TODO: memchr fast path with a larger (> 32) format string
 7775|       |
 7776|   119k|    auto begin = format.data();
 7777|   119k|    auto it = begin;
 7778|   119k|    const auto end = format.data() + format.size();
 7779|       |
 7780|   246M|    while (it != end) {
  ------------------
  |  Branch (7780:12): [True: 246M, False: 42.8k]
  ------------------
 7781|   246M|        const auto ch = *it++;
 7782|   246M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7782:13): [True: 117k, False: 246M]
  ------------------
 7783|   117k|            handler.on_literal_text(begin, it - 1);
 7784|       |
 7785|   117k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7786|   117k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7786:17): [True: 76.8k, False: 41.0k]
  ------------------
 7787|  76.8k|                return;
 7788|  76.8k|            }
 7789|   117k|        }
 7790|   246M|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7790:18): [True: 4.91k, False: 246M]
  ------------------
 7791|  4.91k|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  986|  9.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 168, False: 4.74k]
  |  |  |  Branch (986:45): [True: 88, False: 4.82k]
  |  |  |  Branch (986:45): [True: 80, False: 4.74k]
  |  |  ------------------
  ------------------
 7792|    168|                handler.on_error("Unmatched '}' in format string");
 7793|    168|                return;
 7794|    168|            }
 7795|       |
 7796|  4.74k|            handler.on_literal_text(begin, it);
 7797|  4.74k|            begin = ++it;
 7798|  4.74k|        }
 7799|   246M|    }
 7800|       |
 7801|  42.8k|    handler.on_literal_text(begin, end);
 7802|  42.8k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 7705|   117k|{
 7706|   117k|    struct id_adapter {
 7707|   117k|        constexpr void operator()()
 7708|   117k|        {
 7709|   117k|            arg_id = handler.on_arg_id();
 7710|   117k|        }
 7711|   117k|        constexpr void operator()(std::size_t id)
 7712|   117k|        {
 7713|   117k|            arg_id = handler.on_arg_id(id);
 7714|   117k|        }
 7715|       |
 7716|   117k|        constexpr void on_error(const char* msg)
 7717|   117k|        {
 7718|   117k|            SCN_UNLIKELY_ATTR
 7719|   117k|            handler.on_error(msg);
 7720|   117k|        }
 7721|       |
 7722|   117k|        Handler& handler;
 7723|   117k|        std::size_t arg_id;
 7724|   117k|    };
 7725|       |
 7726|   117k|    ++begin;
 7727|   117k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|   117k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 184, False: 117k]
  |  |  ------------------
  ------------------
 7728|    184|        handler.on_error("Unexpected end of replacement field");
 7729|    184|        return begin;
 7730|    184|    }
 7731|       |
 7732|   117k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7732:9): [True: 64.7k, False: 52.9k]
  ------------------
 7733|  64.7k|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7734|  64.7k|    }
 7735|  52.9k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7735:14): [True: 9.96k, False: 43.0k]
  ------------------
 7736|  9.96k|        handler.on_literal_text(begin, begin + 1);
 7737|  9.96k|    }
 7738|  43.0k|    else {
 7739|  43.0k|        auto adapter = id_adapter{handler, 0};
 7740|  43.0k|        begin = parse_arg_id(begin, end, adapter);
 7741|       |
 7742|  43.0k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  43.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 120, False: 42.8k]
  |  |  ------------------
  ------------------
 7743|    120|            handler.on_error("Missing '}' in format string");
 7744|    120|            return begin;
 7745|    120|        }
 7746|       |
 7747|  42.8k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7747:13): [True: 194, False: 42.6k]
  ------------------
 7748|    194|            handler.on_replacement_field(adapter.arg_id, begin);
 7749|    194|        }
 7750|  42.6k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7750:18): [True: 15.6k, False: 27.0k]
  ------------------
 7751|  15.6k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  986|  15.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 50, False: 15.5k]
  |  |  ------------------
  ------------------
 7752|     50|                handler.on_error("Unexpected end of replacement field");
 7753|     50|                return begin;
 7754|     50|            }
 7755|  15.5k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7756|  15.5k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  986|  31.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 2.43k, False: 13.1k]
  |  |  |  Branch (986:45): [True: 0, False: 15.5k]
  |  |  |  Branch (986:45): [True: 2.43k, False: 13.1k]
  |  |  ------------------
  ------------------
 7757|  2.43k|                handler.on_error("Unknown format specifier");
 7758|  2.43k|                return begin;
 7759|  2.43k|            }
 7760|  15.5k|        }
 7761|  27.0k|        else {
 7762|  27.0k|            SCN_UNLIKELY_ATTR
 7763|  27.0k|            handler.on_error("Missing '}' in format string");
 7764|  27.0k|            return begin;
 7765|  27.0k|        }
 7766|  42.8k|    }
 7767|  88.0k|    return begin + 1;
 7768|   117k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE3argEm:
 8861|  80.4k|    {
 8862|  80.4k|        return m_args.get(id);
 8863|  80.4k|    }
_ZN3scn2v424basic_scan_parse_contextIwE11next_arg_idEv:
 6327|  78.8k|    {
 6328|  78.8k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  986|  78.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 164, False: 78.7k]
  |  |  ------------------
  ------------------
 6329|    164|            on_error(
 6330|    164|                "Cannot switch from manual to automatic argument indexing");
 6331|    164|            return 0;
 6332|    164|        }
 6333|       |
 6334|  78.7k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6335|  78.7k|        do_check_arg_id(id);
 6336|  78.7k|        return id;
 6337|  78.8k|    }
_ZN3scn2v424basic_scan_parse_contextIwE8on_errorEPKc:
 6357|    242|    {
 6358|    242|        m_error = unexpected(detail::handle_error(
 6359|    242|            scan_error{scan_error::invalid_format_string, msg}));
 6360|    242|        return m_error.error();
 6361|    242|    }
_ZN3scn2v424basic_scan_parse_contextIwE15do_check_arg_idEm:
 6821|  80.2k|{
 6822|  80.2k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6822:9): [Folded - Ignored]
  ------------------
 6823|  80.2k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  241|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  241|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6823:10): [Folded - Ignored]
  |  Branch (6823:22): [Folded - Ignored]
  ------------------
 6824|       |        // The cast below will cause an error on gcc pre-12
 6825|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6826|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6826:13): [True: 0, False: 0]
  ------------------
 6827|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6828|      0|            SCN_UNLIKELY_ATTR
 6829|      0|            on_error("Argument not found");
 6830|      0|        }
 6831|      0|    }
 6832|  80.2k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7206|  43.0k|{
 7207|  43.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|  43.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  43.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7208|  43.0k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7208:9): [True: 43.0k, False: 0]
  |  Branch (7208:26): [True: 28.8k, False: 14.1k]
  ------------------
 7209|  28.8k|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1057|  28.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7210|  28.8k|    }
 7211|       |
 7212|  14.1k|    handler();
 7213|  14.1k|    return begin;
 7214|  43.0k|}
impl.cpp:_ZN3scn2v46detail15do_parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7176|  28.8k|{
 7177|  28.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|  28.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  28.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7178|       |
 7179|  28.8k|    CharT c = *begin;
 7180|  28.8k|    if (c < CharT{'0'} || c > CharT{'9'}) {
  ------------------
  |  Branch (7180:9): [True: 146, False: 28.6k]
  |  Branch (7180:27): [True: 224, False: 28.4k]
  ------------------
 7181|    370|        handler.on_error("Invalid argument ID");
 7182|    370|        return begin;
 7183|    370|    }
 7184|       |
 7185|  28.4k|    int idx = 0;
 7186|  28.4k|    if (c != CharT{'0'}) {
  ------------------
  |  Branch (7186:9): [True: 490, False: 27.9k]
  ------------------
 7187|    490|        idx = parse_simple_int(begin, end);
 7188|    490|    }
 7189|  27.9k|    else {
 7190|  27.9k|        ++begin;
 7191|  27.9k|    }
 7192|       |
 7193|  28.4k|    if (begin == end || (*begin != CharT{'}'} && *begin != CharT{':'})) {
  ------------------
  |  Branch (7193:9): [True: 120, False: 28.3k]
  |  Branch (7193:26): [True: 28.1k, False: 194]
  |  Branch (7193:50): [True: 26.6k, False: 1.46k]
  ------------------
 7194|  26.8k|        handler.on_error("Invalid argument ID");
 7195|  26.8k|        return begin;
 7196|  26.8k|    }
 7197|  1.66k|    handler(idx);
 7198|       |
 7199|  1.66k|    return begin;
 7200|  28.4k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapter8on_errorEPKc:
 7717|  27.1k|        {
 7718|  27.1k|            SCN_UNLIKELY_ATTR
 7719|  27.1k|            handler.on_error(msg);
 7720|  27.1k|        }
_ZN3scn2v46detail16parse_simple_intIwEEiRPKT_S5_:
 7155|  10.6k|{
 7156|  10.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|  10.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  10.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7157|  10.6k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  | 1051|  10.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  10.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7158|       |
 7159|  10.6k|    unsigned long long value = 0;
 7160|  15.6k|    do {
 7161|  15.6k|        value *= 10;
 7162|  15.6k|        value += static_cast<unsigned long long>(*begin - '0');
 7163|  15.6k|        if (value >
  ------------------
  |  Branch (7163:13): [True: 102, False: 15.5k]
  ------------------
 7164|  15.6k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 7165|    102|            return -1;
 7166|    102|        }
 7167|  15.5k|        ++begin;
 7168|  15.5k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (7168:14): [True: 15.2k, False: 352]
  |  Branch (7168:30): [True: 14.0k, False: 1.21k]
  |  Branch (7168:47): [True: 5.05k, False: 8.97k]
  ------------------
 7169|  10.5k|    return static_cast<int>(value);
 7170|  10.6k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEm:
 7712|  1.66k|        {
 7713|  1.66k|            arg_id = handler.on_arg_id(id);
 7714|  1.66k|        }
_ZN3scn2v424basic_scan_parse_contextIwE12check_arg_idEm:
 6340|  1.66k|    {
 6341|  1.66k|        if (SCN_UNLIKELY(m_next_arg_id > 0)) {
  ------------------
  |  |  986|  1.66k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 78, False: 1.58k]
  |  |  ------------------
  ------------------
 6342|     78|            on_error(
 6343|     78|                "Cannot switch from manual to automatic argument indexing");
 6344|     78|            return;
 6345|     78|        }
 6346|  1.58k|        m_next_arg_id = -1;
 6347|  1.58k|        do_check_arg_id(id);
 6348|  1.58k|    }
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7708|  14.1k|        {
 7709|  14.1k|            arg_id = handler.on_arg_id();
 7710|  14.1k|        }
_ZN3scn2v424basic_scan_parse_contextIwE10advance_toEPKw:
 6322|  12.7k|    {
 6323|  12.7k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6324|  12.7k|    }
_ZNK3scn2v424basic_scan_parse_contextIwE5beginEv:
 6311|  28.3k|    {
 6312|  28.3k|        return m_format.data();
 6313|  28.3k|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7887|  15.5k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  | 1057|  15.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7888|  15.5k|    {
 7889|  15.5k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  | 1051|  15.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  15.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7890|  15.5k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7621|  15.5k|{
 7622|  15.5k|    auto do_presentation = [&]() -> const CharT* {
 7623|  15.5k|        if (*begin == CharT{'['}) {
 7624|  15.5k|            auto set = parse_presentation_set(begin, end, handler);
 7625|  15.5k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7626|       |                // clang-format off
 7627|  15.5k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7628|       |                // clang-format on
 7629|  15.5k|                return begin;
 7630|  15.5k|            }
 7631|  15.5k|            handler.on_character_set_string(set);
 7632|  15.5k|            return begin;
 7633|  15.5k|        }
 7634|  15.5k|        if (*begin == CharT{'/'}) {
 7635|  15.5k|            return parse_presentation_regex(begin, end, handler);
 7636|  15.5k|        }
 7637|  15.5k|        presentation_type type = parse_presentation_type(*begin++);
 7638|  15.5k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7639|  15.5k|            handler.on_error("Invalid type specifier in format string");
 7640|  15.5k|            return begin;
 7641|  15.5k|        }
 7642|  15.5k|        handler.on_type(type);
 7643|  15.5k|        return begin;
 7644|  15.5k|    };
 7645|       |
 7646|  15.5k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7646:9): [True: 14.3k, False: 1.20k]
  |  Branch (7646:28): [True: 2.82k, False: 11.5k]
  ------------------
 7647|  15.5k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7647:9): [True: 572, False: 2.25k]
  |  Branch (7647:36): [True: 520, False: 52]
  ------------------
 7648|    520|        return do_presentation();
 7649|    520|    }
 7650|       |
 7651|  15.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  15.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 15.0k]
  |  |  ------------------
  ------------------
 7652|      0|        handler.on_error("Unexpected end of format string");
 7653|      0|        return begin;
 7654|      0|    }
 7655|       |
 7656|  15.0k|    begin = parse_align(begin, end, handler);
 7657|  15.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  15.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 120, False: 14.9k]
  |  |  ------------------
  ------------------
 7658|    120|        handler.on_error("Unexpected end of format string");
 7659|    120|        return begin;
 7660|    120|    }
 7661|       |
 7662|  14.9k|    begin = parse_width(begin, end, handler);
 7663|  14.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  14.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 124, False: 14.8k]
  |  |  ------------------
  ------------------
 7664|    124|        handler.on_error("Unexpected end of format string");
 7665|    124|        return begin;
 7666|    124|    }
 7667|       |
 7668|  14.8k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7668:9): [True: 5.85k, False: 8.97k]
  ------------------
 7669|  5.85k|        ++begin;
 7670|  5.85k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  5.85k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 34, False: 5.81k]
  |  |  ------------------
  ------------------
 7671|     34|            handler.on_error("Unexpected end of format string");
 7672|     34|            return begin;
 7673|     34|        }
 7674|  5.81k|        begin = parse_precision(begin, end, handler);
 7675|  5.81k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  5.81k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 134, False: 5.68k]
  |  |  ------------------
  ------------------
 7676|    134|            handler.on_error("Unexpected end of format string");
 7677|    134|            return begin;
 7678|    134|        }
 7679|  5.81k|    }
 7680|       |
 7681|  14.6k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7681:9): [True: 724, False: 13.9k]
  ------------------
 7682|    724|        handler.on_localized();
 7683|    724|        ++begin;
 7684|    724|    }
 7685|  14.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  14.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 60, False: 14.5k]
  |  |  ------------------
  ------------------
 7686|     60|        handler.on_error("Unexpected end of format string");
 7687|     60|        return begin;
 7688|     60|    }
 7689|       |
 7690|  14.5k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7690:9): [True: 14.5k, False: 0]
  |  Branch (7690:25): [True: 8.90k, False: 5.69k]
  ------------------
 7691|  8.90k|        do_presentation();
 7692|  8.90k|    }
 7693|  14.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.53k, False: 13.0k]
  |  |  ------------------
  ------------------
 7694|  1.53k|        handler.on_error("Unexpected end of format string");
 7695|  1.53k|        return begin;
 7696|  1.53k|    }
 7697|       |
 7698|  13.0k|    return begin;
 7699|  14.5k|}
_ZN3scn2v46detail15is_ascii_letterIwEEbT_:
 7270|  2.82k|{
 7271|  2.82k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7271:13): [True: 464, False: 2.36k]
  |  Branch (7271:33): [True: 430, False: 34]
  ------------------
 7272|  2.82k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7272:13): [True: 212, False: 2.18k]
  |  Branch (7272:33): [True: 142, False: 70]
  ------------------
 7273|  2.82k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7622|  9.42k|    auto do_presentation = [&]() -> const CharT* {
 7623|  9.42k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7623:13): [True: 4.48k, False: 4.94k]
  ------------------
 7624|  4.48k|            auto set = parse_presentation_set(begin, end, handler);
 7625|  4.48k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  986|  4.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 590, False: 3.89k]
  |  |  ------------------
  ------------------
 7626|       |                // clang-format off
 7627|    590|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7628|       |                // clang-format on
 7629|    590|                return begin;
 7630|    590|            }
 7631|  3.89k|            handler.on_character_set_string(set);
 7632|  3.89k|            return begin;
 7633|  4.48k|        }
 7634|  4.94k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7634:13): [True: 42, False: 4.90k]
  ------------------
 7635|     42|            return parse_presentation_regex(begin, end, handler);
 7636|     42|        }
 7637|  4.90k|        presentation_type type = parse_presentation_type(*begin++);
 7638|  4.90k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  986|  4.90k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 690, False: 4.21k]
  |  |  ------------------
  ------------------
 7639|    690|            handler.on_error("Invalid type specifier in format string");
 7640|    690|            return begin;
 7641|    690|        }
 7642|  4.21k|        handler.on_type(type);
 7643|  4.21k|        return begin;
 7644|  4.90k|    };
impl.cpp:_ZN3scn2v46detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEENSt3__117basic_string_viewIT_NSI_11char_traitsISK_EEEERPKSK_SP_OT0_:
 7460|  4.48k|{
 7461|  4.48k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|  4.48k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  4.48k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7462|  4.48k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  | 1051|  4.48k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  4.48k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7463|       |
 7464|  4.48k|    auto start = begin;
 7465|  4.48k|    ++begin;
 7466|       |
 7467|  4.48k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  4.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 34, False: 4.45k]
  |  |  ------------------
  ------------------
 7468|       |        // clang-format off
 7469|     34|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7470|       |        // clang-format on
 7471|     34|        return {};
 7472|     34|    }
 7473|  4.45k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7473:9): [True: 2.28k, False: 2.17k]
  ------------------
 7474|  2.28k|        handler.on_charset_inverted();
 7475|  2.28k|        ++begin;
 7476|  2.28k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  2.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 34, False: 2.24k]
  |  |  ------------------
  ------------------
 7477|       |            // clang-format off
 7478|     34|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7479|       |            // clang-format on
 7480|     34|            return {};
 7481|     34|        }
 7482|  2.24k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7482:13): [True: 52, False: 2.19k]
  ------------------
 7483|     52|            handler.on_charset_single(char32_t{']'});
 7484|     52|            ++begin;
 7485|     52|        }
 7486|  2.24k|    }
 7487|  2.17k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7487:14): [True: 34, False: 2.13k]
  ------------------
 7488|     34|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7489|     34|    }
 7490|       |
 7491|  33.6k|    while (begin != end) {
  ------------------
  |  Branch (7491:12): [True: 33.3k, False: 326]
  ------------------
 7492|  33.3k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  986|  33.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 162, False: 33.1k]
  |  |  ------------------
  ------------------
 7493|    162|            break;
 7494|    162|        }
 7495|       |
 7496|  33.1k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7496:13): [True: 3.89k, False: 29.2k]
  ------------------
 7497|  3.89k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7498|  3.89k|        }
 7499|       |
 7500|  29.2k|        parse_presentation_set_literal(begin, end, handler);
 7501|  29.2k|    }
 7502|       |
 7503|    488|    SCN_UNLIKELY_ATTR
 7504|    488|    handler.on_error("Invalid [character set] specifier in format string");
 7505|    488|    return {};
 7506|  4.38k|}
impl.cpp:_ZN3scn2v46detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEvRPKT_SK_OT0_:
 7424|  29.2k|{
 7425|  29.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|  29.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  29.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7426|       |
 7427|  29.2k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7428|  29.2k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  986|  29.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 126, False: 29.1k]
  |  |  ------------------
  ------------------
 7429|    126|        return;
 7430|    126|    }
 7431|       |
 7432|  29.1k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7432:9): [True: 29.0k, False: 94]
  |  Branch (7432:25): [True: 2.58k, False: 26.4k]
  |  Branch (7432:49): [True: 2.54k, False: 34]
  ------------------
 7433|  29.1k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7433:9): [True: 2.49k, False: 52]
  ------------------
 7434|  2.49k|        ++begin;
 7435|       |
 7436|  2.49k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7437|  2.49k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  986|  2.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 34, False: 2.46k]
  |  |  ------------------
  ------------------
 7438|     34|            return;
 7439|     34|        }
 7440|       |
 7441|  2.46k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  986|  2.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 34, False: 2.42k]
  |  |  ------------------
  ------------------
 7442|       |            // clang-format off
 7443|     34|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7444|       |            // clang-format on
 7445|     34|            return;
 7446|     34|        }
 7447|       |
 7448|  2.42k|        handler.on_charset_range(cp_first, cp_second + 1);
 7449|  2.42k|        return;
 7450|  2.46k|    }
 7451|       |
 7452|  26.6k|    handler.on_charset_single(cp_first);
 7453|  26.6k|}
impl.cpp:_ZN3scn2v46detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEDiRPKT_SK_OT0_:
 7400|  31.7k|{
 7401|  31.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|  31.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  31.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7402|       |
 7403|  31.7k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7404|  31.7k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  986|  63.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 31.7k]
  |  |  |  Branch (986:45): [True: 0, False: 31.7k]
  |  |  |  Branch (986:45): [True: 0, False: 31.7k]
  |  |  ------------------
  ------------------
 7405|      0|        handler.on_error("Invalid encoding in format string");
 7406|      0|        return invalid_code_point;
 7407|      0|    }
 7408|       |
 7409|  31.7k|    const auto cp =
 7410|  31.7k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7411|  31.7k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  986|  31.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 160, False: 31.6k]
  |  |  ------------------
  ------------------
 7412|    160|        handler.on_error("Invalid encoding in format string");
 7413|    160|        return invalid_code_point;
 7414|    160|    }
 7415|       |
 7416|  31.6k|    begin += len;
 7417|  31.6k|    return cp;
 7418|  31.7k|}
_ZN3scn2v46detail12specs_setter23on_character_set_stringIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7114|  3.89k|    {
 7115|  3.89k|        m_specs.charset_string_data = fmt.data();
 7116|  3.89k|        m_specs.charset_string_size = fmt.size();
 7117|  3.89k|        on_type(presentation_type::string_set);
 7118|  3.89k|    }
impl.cpp:_ZN3scn2v46detail24parse_presentation_regexIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_RSK_SK_OT0_:
 7512|     42|{
 7513|     42|#if !SCN_DISABLE_REGEX
 7514|     42|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|     42|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|     42|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7515|     42|    SCN_EXPECT(*begin == CharT{'/'});
  ------------------
  |  | 1051|     42|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|     42|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7516|       |
 7517|       |    if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 7518|     42|                  std::is_same_v<CharT, wchar_t>) {
 7519|     42|        handler.on_error("Regex backend doesn't support wide strings as input");
 7520|     42|        return begin;
 7521|     42|    }
 7522|       |
 7523|      0|    auto start = begin;
 7524|     42|    ++begin;
 7525|       |
 7526|     42|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|     42|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 42]
  |  |  ------------------
  ------------------
 7527|      0|        handler.on_error("Unexpected end of regex in format string");
 7528|      0|        return begin;
 7529|      0|    }
 7530|       |
 7531|     42|    handler.on_type(presentation_type::regex);
 7532|     42|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (7532:12): [True: 0, False: 42]
  ------------------
 7533|      0|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7533:13): [True: 0, False: 0]
  ------------------
 7534|      0|            if (*(begin - 1) != CharT{'\\'}) {
  ------------------
  |  Branch (7534:17): [True: 0, False: 0]
  ------------------
 7535|      0|                break;
 7536|      0|            }
 7537|      0|            else {
 7538|      0|                handler.on_type(presentation_type::regex_escaped);
 7539|      0|            }
 7540|      0|        }
 7541|      0|    }
 7542|     42|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|     42|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 42]
  |  |  ------------------
  ------------------
 7543|      0|        handler.on_error("Unexpected end of regex in format string");
 7544|      0|        return begin;
 7545|      0|    }
 7546|       |
 7547|     42|    auto regex_end = begin;
 7548|     42|    auto regex_pattern = make_string_view_from_pointers(start + 1, regex_end);
 7549|     42|    if (SCN_UNLIKELY(regex_pattern.empty())) {
  ------------------
  |  |  986|     42|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 42]
  |  |  ------------------
  ------------------
 7550|      0|        handler.on_error("Invalid (empty) regex in format string");
 7551|      0|        return begin;
 7552|      0|    }
 7553|     42|    handler.on_regex_pattern(regex_pattern);
 7554|     42|    ++begin;
 7555|       |
 7556|     42|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|     42|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 42]
  |  |  ------------------
  ------------------
 7557|      0|        handler.on_error("Unexpected end of regex in format string");
 7558|      0|        return begin;
 7559|      0|    }
 7560|       |
 7561|     42|    regex_flags flags{regex_flags::none};
 7562|     42|    constexpr std::array<std::pair<char, regex_flags>, 4> flag_map{
 7563|     42|        {{'m', regex_flags::multiline},
 7564|     42|         {'s', regex_flags::singleline},
 7565|     42|         {'i', regex_flags::nocase},
 7566|     42|         {'n', regex_flags::nocapture}}};
 7567|     42|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (7567:12): [True: 0, False: 42]
  ------------------
 7568|      0|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7568:13): [True: 0, False: 0]
  ------------------
 7569|      0|            break;
 7570|      0|        }
 7571|      0|        bool found_flag = false;
 7572|      0|        for (auto flag : flag_map) {
  ------------------
  |  Branch (7572:24): [True: 0, False: 0]
  ------------------
 7573|      0|            if (static_cast<CharT>(flag.first) != *begin) {
  ------------------
  |  Branch (7573:17): [True: 0, False: 0]
  ------------------
 7574|      0|                continue;
 7575|      0|            }
 7576|      0|            if ((flags & flag.second) != regex_flags::none) {
  ------------------
  |  Branch (7576:17): [True: 0, False: 0]
  ------------------
 7577|      0|                handler.on_error("Flag set multiple times in regex");
 7578|      0|                return begin;
 7579|      0|            }
 7580|       |#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 7581|       |            if (*begin == CharT{'s'}) {
 7582|       |                // clang-format off
 7583|       |                handler.on_error("/s flag for regex isn't supported by regex backend");
 7584|       |                // clang-format on
 7585|       |            }
 7586|       |#if !SCN_HAS_STD_REGEX_MULTILINE
 7587|       |            if (*begin == CharT{'m'}) {
 7588|       |                // clang-format off
 7589|       |                handler.on_error("/m flag for regex isn't supported by regex backend");
 7590|       |                // clang-format on
 7591|       |            }
 7592|       |#endif
 7593|       |#endif
 7594|      0|            flags |= flag.second;
 7595|      0|            found_flag = true;
 7596|      0|            break;
 7597|      0|        }
 7598|      0|        if (!found_flag) {
  ------------------
  |  Branch (7598:13): [True: 0, False: 0]
  ------------------
 7599|      0|            handler.on_error("Invalid flag in regex");
 7600|      0|            return begin;
 7601|      0|        }
 7602|      0|    }
 7603|     42|    handler.on_regex_flags(flags);
 7604|       |
 7605|     42|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|     42|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 42]
  |  |  ------------------
  ------------------
 7606|      0|        handler.on_error("Unexpected end of regex in format string");
 7607|      0|        return begin;
 7608|      0|    }
 7609|       |
 7610|     42|    return begin;
 7611|       |#else
 7612|       |    handler.on_error("Regular expression support is disabled");
 7613|       |    return {};
 7614|       |#endif
 7615|     42|}
_ZN3scn2v46detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 7218|  4.90k|{
 7219|  4.90k|    switch (type) {
 7220|    232|        case 'b':
  ------------------
  |  Branch (7220:9): [True: 232, False: 4.67k]
  ------------------
 7221|    284|        case 'B':
  ------------------
  |  Branch (7221:9): [True: 52, False: 4.85k]
  ------------------
 7222|    284|            return presentation_type::int_binary;
 7223|    106|        case 'd':
  ------------------
  |  Branch (7223:9): [True: 106, False: 4.79k]
  ------------------
 7224|    106|            return presentation_type::int_decimal;
 7225|    286|        case 'i':
  ------------------
  |  Branch (7225:9): [True: 286, False: 4.61k]
  ------------------
 7226|    286|            return presentation_type::int_generic;
 7227|    196|        case 'u':
  ------------------
  |  Branch (7227:9): [True: 196, False: 4.70k]
  ------------------
 7228|    196|            return presentation_type::int_unsigned_decimal;
 7229|    232|        case 'o':
  ------------------
  |  Branch (7229:9): [True: 232, False: 4.67k]
  ------------------
 7230|    232|            return presentation_type::int_octal;
 7231|    142|        case 'x':
  ------------------
  |  Branch (7231:9): [True: 142, False: 4.76k]
  ------------------
 7232|    194|        case 'X':
  ------------------
  |  Branch (7232:9): [True: 52, False: 4.85k]
  ------------------
 7233|    194|            return presentation_type::int_hex;
 7234|     34|        case 'r':
  ------------------
  |  Branch (7234:9): [True: 34, False: 4.86k]
  ------------------
 7235|     68|        case 'R':
  ------------------
  |  Branch (7235:9): [True: 34, False: 4.86k]
  ------------------
 7236|     68|            return presentation_type::int_arbitrary_base;
 7237|    222|        case 'a':
  ------------------
  |  Branch (7237:9): [True: 222, False: 4.68k]
  ------------------
 7238|    904|        case 'A':
  ------------------
  |  Branch (7238:9): [True: 682, False: 4.22k]
  ------------------
 7239|    904|            return presentation_type::float_hex;
 7240|     70|        case 'e':
  ------------------
  |  Branch (7240:9): [True: 70, False: 4.83k]
  ------------------
 7241|    194|        case 'E':
  ------------------
  |  Branch (7241:9): [True: 124, False: 4.77k]
  ------------------
 7242|    194|            return presentation_type::float_scientific;
 7243|    142|        case 'f':
  ------------------
  |  Branch (7243:9): [True: 142, False: 4.76k]
  ------------------
 7244|    266|        case 'F':
  ------------------
  |  Branch (7244:9): [True: 124, False: 4.77k]
  ------------------
 7245|    266|            return presentation_type::float_fixed;
 7246|     34|        case 'g':
  ------------------
  |  Branch (7246:9): [True: 34, False: 4.86k]
  ------------------
 7247|    122|        case 'G':
  ------------------
  |  Branch (7247:9): [True: 88, False: 4.81k]
  ------------------
 7248|    122|            return presentation_type::float_general;
 7249|    898|        case 's':
  ------------------
  |  Branch (7249:9): [True: 898, False: 4.00k]
  ------------------
 7250|    898|            return presentation_type::string;
 7251|    304|        case 'c':
  ------------------
  |  Branch (7251:9): [True: 304, False: 4.59k]
  ------------------
 7252|    304|            return presentation_type::character;
 7253|     34|        case '?':
  ------------------
  |  Branch (7253:9): [True: 34, False: 4.86k]
  ------------------
 7254|     34|            return presentation_type::escaped_character;
 7255|    124|        case 'p':
  ------------------
  |  Branch (7255:9): [True: 124, False: 4.77k]
  ------------------
 7256|    124|            return presentation_type::pointer;
 7257|      0|        case '[':
  ------------------
  |  Branch (7257:9): [True: 0, False: 4.90k]
  ------------------
 7258|      0|        case '/':
  ------------------
  |  Branch (7258:9): [True: 0, False: 4.90k]
  ------------------
 7259|       |            // Should be handled by parse_presentation_set and
 7260|       |            // parse_presentation_regex
 7261|      0|            SCN_EXPECT(false);
  ------------------
  |  | 1051|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7262|      0|            SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7263|    690|        default:
  ------------------
  |  Branch (7263:9): [True: 690, False: 4.21k]
  ------------------
 7264|    690|            return presentation_type::none;
 7265|  4.90k|    }
 7266|  4.90k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7295|  15.0k|{
 7296|  15.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|  15.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  15.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7297|       |
 7298|  15.0k|    auto check_align = [](wchar_t ch) {
 7299|  15.0k|        switch (ch) {
 7300|  15.0k|            case L'<':
 7301|  15.0k|                return align_type::left;
 7302|  15.0k|            case L'>':
 7303|  15.0k|                return align_type::right;
 7304|  15.0k|            case L'^':
 7305|  15.0k|                return align_type::center;
 7306|  15.0k|            default:
 7307|  15.0k|                return align_type::none;
 7308|  15.0k|        }
 7309|  15.0k|    };
 7310|       |
 7311|  15.0k|    auto potential_fill_len = code_point_length(begin, end);
 7312|  15.0k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  986|  30.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 15.0k]
  |  |  |  Branch (986:45): [True: 0, False: 15.0k]
  |  |  |  Branch (986:45): [True: 0, False: 15.0k]
  |  |  ------------------
  ------------------
 7313|  15.0k|                     std::distance(begin, end) < potential_fill_len)) {
 7314|      0|        handler.on_error("Invalid encoding in fill character");
 7315|      0|        return begin;
 7316|      0|    }
 7317|       |
 7318|  15.0k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7319|       |
 7320|  15.0k|    auto potential_fill = std::basic_string_view<CharT>{
 7321|  15.0k|        begin, static_cast<size_t>(potential_fill_len)};
 7322|  15.0k|    const auto begin_before_fill = begin;
 7323|  15.0k|    begin += potential_fill_len;
 7324|       |
 7325|  15.0k|    if (begin == end) {
  ------------------
  |  Branch (7325:9): [True: 1.20k, False: 13.8k]
  ------------------
 7326|  1.20k|        return begin_before_fill;
 7327|  1.20k|    }
 7328|       |
 7329|  13.8k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7330|  13.8k|    const auto begin_after_fill = begin;
 7331|  13.8k|    ++begin;
 7332|       |
 7333|  13.8k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7333:9): [True: 13.8k, False: 0]
  ------------------
 7334|  13.8k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  986|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 42, False: 13.8k]
  |  |  ------------------
  ------------------
 7335|     42|            handler.on_error("Invalid fill character '{' in format string");
 7336|     42|            return begin;
 7337|     42|        }
 7338|  13.8k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7338:13): [True: 1.73k, False: 12.0k]
  ------------------
 7339|  1.73k|            return begin_before_fill;
 7340|  1.73k|        }
 7341|  13.8k|    }
 7342|       |
 7343|  12.0k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7343:9): [True: 9.70k, False: 2.38k]
  ------------------
 7344|  9.70k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7344:13): [True: 992, False: 8.71k]
  ------------------
 7345|    992|            handler.on_align(potential_align_on_fill);
 7346|    992|            return begin_after_fill;
 7347|    992|        }
 7348|  8.71k|        return begin_before_fill;
 7349|  9.70k|    }
 7350|       |
 7351|  2.38k|    handler.on_fill(potential_fill);
 7352|  2.38k|    handler.on_align(potential_align_after_fill);
 7353|  2.38k|    return begin;
 7354|  12.0k|}
_ZN3scn2v46detail17code_point_lengthIwEEiPKT_S5_:
 7277|  15.0k|{
 7278|  15.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|  15.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  15.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7279|  15.0k|    if constexpr (sizeof(CharT) != 1) {
 7280|  15.0k|        return 1;
 7281|       |    }
 7282|       |    else {
 7283|       |        const auto lengths =
 7284|       |            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7285|       |            "\3\4";
 7286|       |        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7287|       |        return len;
 7288|       |    }
 7289|  15.0k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7298|  28.9k|    auto check_align = [](wchar_t ch) {
 7299|  28.9k|        switch (ch) {
 7300|    662|            case L'<':
  ------------------
  |  Branch (7300:13): [True: 662, False: 28.2k]
  ------------------
 7301|    662|                return align_type::left;
 7302|    482|            case L'>':
  ------------------
  |  Branch (7302:13): [True: 482, False: 28.4k]
  ------------------
 7303|    482|                return align_type::right;
 7304|  2.81k|            case L'^':
  ------------------
  |  Branch (7304:13): [True: 2.81k, False: 26.1k]
  ------------------
 7305|  2.81k|                return align_type::center;
 7306|  24.9k|            default:
  ------------------
  |  Branch (7306:13): [True: 24.9k, False: 3.96k]
  ------------------
 7307|  24.9k|                return align_type::none;
 7308|  28.9k|        }
 7309|  28.9k|    };
_ZN3scn2v46detail12specs_setter7on_fillIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7035|  2.38k|    {
 7036|  2.38k|        m_specs.fill = fill;
 7037|  2.38k|    }
_ZN3scn2v46detail9fill_typeaSIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6916|  2.38k|    {
 6917|  2.38k|        SCN_EXPECT(!s.empty());
  ------------------
  |  | 1051|  2.38k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  2.38k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6918|  2.38k|        SCN_EXPECT(s.size() * sizeof(CharT) <= max_size);
  ------------------
  |  | 1051|  2.38k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  2.38k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6919|       |        if constexpr (sizeof(CharT) == 1) {
 6920|       |            for (size_t i = 0; i < s.size(); ++i) {
 6921|       |                SCN_GCC_PUSH
 6922|       |                SCN_GCC_IGNORE("-Wstringop-overflow")  // false positive
 6923|       |                m_data[i] = s[i];
 6924|       |                SCN_GCC_POP
 6925|       |            }
 6926|       |            m_size = static_cast<unsigned char>(s.size());
 6927|       |        }
 6928|       |        else if constexpr (sizeof(CharT) == 2) {
 6929|       |            m_data[0] = static_cast<char>(static_cast<unsigned>(s.front()));
 6930|       |            m_data[1] =
 6931|       |                static_cast<char>(static_cast<unsigned>(s.front()) >> 8);
 6932|       |            if (s.size() == 1) {
 6933|       |                return;
 6934|       |            }
 6935|       |            m_data[2] = static_cast<char>(static_cast<unsigned>(s[1]));
 6936|       |            m_data[3] = static_cast<char>(static_cast<unsigned>(s[1]) >> 8);
 6937|       |        }
 6938|  2.38k|        else {
 6939|  2.38k|            const auto front = static_cast<unsigned>(s.front());
 6940|  2.38k|            m_data[0] = static_cast<char>(front);
 6941|  2.38k|            m_data[1] = static_cast<char>(front >> 8);
 6942|  2.38k|            m_data[2] = static_cast<char>(front >> 16);
 6943|  2.38k|            m_data[3] = static_cast<char>(front >> 24);
 6944|  2.38k|        }
 6945|  2.38k|    }
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7360|  14.9k|{
 7361|  14.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|  14.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  14.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7362|       |
 7363|  14.9k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7363:9): [True: 9.91k, False: 5.03k]
  |  Branch (7363:33): [True: 4.44k, False: 5.47k]
  ------------------
 7364|  4.44k|        int width = parse_simple_int(begin, end);
 7365|  4.44k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  985|  4.44k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 4.41k, False: 34]
  |  |  ------------------
  ------------------
 7366|  4.41k|            handler.on_width(width);
 7367|  4.41k|        }
 7368|     34|        else {
 7369|     34|            handler.on_error("Invalid field width");
 7370|     34|            return begin;
 7371|     34|        }
 7372|  4.44k|    }
 7373|  14.9k|    return begin;
 7374|  14.9k|}
impl.cpp:_ZN3scn2v46detail15parse_precisionIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7380|  5.81k|{
 7381|  5.81k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|  5.81k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  5.81k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7382|       |
 7383|  5.81k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7383:9): [True: 5.78k, False: 34]
  |  Branch (7383:33): [True: 5.71k, False: 70]
  ------------------
 7384|  5.71k|        int prec = parse_simple_int(begin, end);
 7385|  5.71k|        if (SCN_LIKELY(prec != -1)) {
  ------------------
  |  |  985|  5.71k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 5.67k, False: 34]
  |  |  ------------------
  ------------------
 7386|  5.67k|            handler.on_precision(prec);
 7387|  5.67k|        }
 7388|     34|        else {
 7389|     34|            handler.on_error("Invalid field precision");
 7390|     34|            return begin;
 7391|     34|        }
 7392|  5.71k|    }
 7393|  5.78k|    return begin;
 7394|  5.81k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEE12on_localizedEv:
 7893|    724|    {
 7894|    724|        const auto cat = get_category_for_arg_type(m_arg_type);
 7895|    724|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7895:13): [True: 654, False: 70]
  ------------------
 7896|    724|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7896:13): [True: 584, False: 70]
  ------------------
 7897|    724|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7897:13): [True: 514, False: 70]
  ------------------
 7898|    724|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7898:13): [True: 444, False: 70]
  ------------------
 7899|    444|            SCN_UNLIKELY_ATTR
 7900|       |            // clang-format off
 7901|    444|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7902|       |            // clang-format on
 7903|    444|        }
 7904|       |
 7905|    280|        Handler::on_localized();
 7906|    280|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9361|  12.5k|{
 9362|  12.5k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1057|  12.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9363|  12.5k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9250|  12.5k|{
 9251|  12.5k|#define SCN_VISIT(Type)                                                \
 9252|  12.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9253|  12.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9254|  12.5k|    }                                                                  \
 9255|  12.5k|    else {                                                             \
 9256|  12.5k|        return vis(monostate_val);                                     \
 9257|  12.5k|    }
 9258|       |
 9259|  12.5k|    monostate monostate_val{};
 9260|       |
 9261|  12.5k|    switch (get_arg_type(arg)) {
 9262|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 12.5k]
  ------------------
 9263|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 12.5k]
  ------------------
 9265|      0|            SCN_VISIT(short);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9266|  1.43k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9266:9): [True: 1.43k, False: 11.1k]
  ------------------
 9267|  1.43k|            SCN_VISIT(int);
  ------------------
  |  | 9252|  1.43k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  1.43k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  1.43k|    }                                                                  \
  |  | 9255|  1.43k|    else {                                                             \
  |  | 9256|  1.43k|        return vis(monostate_val);                                     \
  |  | 9257|  1.43k|    }
  ------------------
 9268|  1.43k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 12.5k]
  ------------------
 9269|  1.43k|            SCN_VISIT(long);
  ------------------
  |  | 9252|  1.43k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  1.43k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  1.43k|    }                                                                  \
  |  | 9255|  1.43k|    else {                                                             \
  |  | 9256|  1.43k|        return vis(monostate_val);                                     \
  |  | 9257|  1.43k|    }
  ------------------
 9270|  1.43k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 12.5k]
  ------------------
 9271|  1.43k|            SCN_VISIT(long long);
  ------------------
  |  | 9252|  1.43k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  1.43k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  1.43k|    }                                                                  \
  |  | 9255|  1.43k|    else {                                                             \
  |  | 9256|  1.43k|        return vis(monostate_val);                                     \
  |  | 9257|  1.43k|    }
  ------------------
 9272|  1.43k|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 12.5k]
  ------------------
 9273|  1.43k|#if SCN_HAS_INT128
 9274|  1.43k|            SCN_VISIT(int128)
  ------------------
  |  | 9252|  1.43k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  1.43k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  1.43k|    }                                                                  \
  |  | 9255|  1.43k|    else {                                                             \
  |  | 9256|  1.43k|        return vis(monostate_val);                                     \
  |  | 9257|  1.43k|    }
  ------------------
 9275|       |#else
 9276|       |            return vis(monostate_val);
 9277|       |#endif
 9278|  1.43k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 12.5k]
  ------------------
 9279|  1.43k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9252|  1.43k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  1.43k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  1.43k|    }                                                                  \
  |  | 9255|  1.43k|    else {                                                             \
  |  | 9256|  1.43k|        return vis(monostate_val);                                     \
  |  | 9257|  1.43k|    }
  ------------------
 9280|  1.43k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 12.5k]
  ------------------
 9281|  1.43k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9252|  1.43k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  1.43k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  1.43k|    }                                                                  \
  |  | 9255|  1.43k|    else {                                                             \
  |  | 9256|  1.43k|        return vis(monostate_val);                                     \
  |  | 9257|  1.43k|    }
  ------------------
 9282|  2.86k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9282:9): [True: 1.43k, False: 11.1k]
  ------------------
 9283|  2.86k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9252|  2.86k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  2.86k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  2.86k|    }                                                                  \
  |  | 9255|  2.86k|    else {                                                             \
  |  | 9256|  2.86k|        return vis(monostate_val);                                     \
  |  | 9257|  2.86k|    }
  ------------------
 9284|  2.86k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9284:9): [True: 0, False: 12.5k]
  ------------------
 9285|  2.86k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9252|  2.86k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  2.86k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  2.86k|    }                                                                  \
  |  | 9255|  2.86k|    else {                                                             \
  |  | 9256|  2.86k|        return vis(monostate_val);                                     \
  |  | 9257|  2.86k|    }
  ------------------
 9286|  2.86k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9286:9): [True: 0, False: 12.5k]
  ------------------
 9287|  2.86k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9252|  2.86k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  2.86k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  2.86k|    }                                                                  \
  |  | 9255|  2.86k|    else {                                                             \
  |  | 9256|  2.86k|        return vis(monostate_val);                                     \
  |  | 9257|  2.86k|    }
  ------------------
 9288|  2.86k|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9288:9): [True: 0, False: 12.5k]
  ------------------
 9289|  2.86k|#if SCN_HAS_INT128
 9290|  2.86k|            SCN_VISIT(uint128)
  ------------------
  |  | 9252|  2.86k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  2.86k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  2.86k|    }                                                                  \
  |  | 9255|  2.86k|    else {                                                             \
  |  | 9256|  2.86k|        return vis(monostate_val);                                     \
  |  | 9257|  2.86k|    }
  ------------------
 9291|       |#else
 9292|       |            return vis(monostate_val);
 9293|       |#endif
 9294|  4.23k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9294:9): [True: 1.36k, False: 11.2k]
  ------------------
 9295|  4.23k|            SCN_VISIT(void*);
  ------------------
  |  | 9252|  4.23k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  4.23k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  4.23k|    }                                                                  \
  |  | 9255|  4.23k|    else {                                                             \
  |  | 9256|  4.23k|        return vis(monostate_val);                                     \
  |  | 9257|  4.23k|    }
  ------------------
 9296|  5.67k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9296:9): [True: 1.43k, False: 11.1k]
  ------------------
 9297|  5.67k|            SCN_VISIT(bool);
  ------------------
  |  | 9252|  5.67k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  5.67k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  5.67k|    }                                                                  \
  |  | 9255|  5.67k|    else {                                                             \
  |  | 9256|  5.67k|        return vis(monostate_val);                                     \
  |  | 9257|  5.67k|    }
  ------------------
 9298|  5.67k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9298:9): [True: 0, False: 12.5k]
  ------------------
 9299|  5.67k|            SCN_VISIT(char);
  ------------------
  |  | 9252|  5.67k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  5.67k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  5.67k|    }                                                                  \
  |  | 9255|  5.67k|    else {                                                             \
  |  | 9256|  5.67k|        return vis(monostate_val);                                     \
  |  | 9257|  5.67k|    }
  ------------------
 9300|  7.03k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9300:9): [True: 1.36k, False: 11.2k]
  ------------------
 9301|  7.03k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9252|  7.03k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  7.03k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  7.03k|    }                                                                  \
  |  | 9255|  7.03k|    else {                                                             \
  |  | 9256|  7.03k|        return vis(monostate_val);                                     \
  |  | 9257|  7.03k|    }
  ------------------
 9302|  7.03k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9302:9): [True: 0, False: 12.5k]
  ------------------
 9303|  7.03k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9252|  7.03k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  7.03k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  7.03k|    }                                                                  \
  |  | 9255|  7.03k|    else {                                                             \
  |  | 9256|  7.03k|        return vis(monostate_val);                                     \
  |  | 9257|  7.03k|    }
  ------------------
 9304|  7.03k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9304:9): [True: 0, False: 12.5k]
  ------------------
 9305|  7.03k|            SCN_VISIT(float);
  ------------------
  |  | 9252|  7.03k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  7.03k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  7.03k|    }                                                                  \
  |  | 9255|  7.03k|    else {                                                             \
  |  | 9256|  7.03k|        return vis(monostate_val);                                     \
  |  | 9257|  7.03k|    }
  ------------------
 9306|  8.47k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9306:9): [True: 1.43k, False: 11.1k]
  ------------------
 9307|  8.47k|            SCN_VISIT(double);
  ------------------
  |  | 9252|  8.47k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  8.47k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  8.47k|    }                                                                  \
  |  | 9255|  8.47k|    else {                                                             \
  |  | 9256|  8.47k|        return vis(monostate_val);                                     \
  |  | 9257|  8.47k|    }
  ------------------
 9308|  8.47k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9308:9): [True: 0, False: 12.5k]
  ------------------
 9309|  8.47k|            SCN_VISIT(long double);
  ------------------
  |  | 9252|  8.47k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  8.47k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  8.47k|    }                                                                  \
  |  | 9255|  8.47k|    else {                                                             \
  |  | 9256|  8.47k|        return vis(monostate_val);                                     \
  |  | 9257|  8.47k|    }
  ------------------
 9310|  8.47k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9310:9): [True: 0, False: 12.5k]
  ------------------
 9311|  8.47k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9252|  8.47k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  8.47k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  8.47k|    }                                                                  \
  |  | 9255|  8.47k|    else {                                                             \
  |  | 9256|  8.47k|        return vis(monostate_val);                                     \
  |  | 9257|  8.47k|    }
  ------------------
 9312|  9.84k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9312:9): [True: 1.36k, False: 11.2k]
  ------------------
 9313|  9.84k|            SCN_VISIT(std::string);
  ------------------
  |  | 9252|  9.84k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  9.84k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  9.84k|    }                                                                  \
  |  | 9255|  9.84k|    else {                                                             \
  |  | 9256|  9.84k|        return vis(monostate_val);                                     \
  |  | 9257|  9.84k|    }
  ------------------
 9314|  11.2k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9314:9): [True: 1.36k, False: 11.2k]
  ------------------
 9315|  11.2k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9252|  11.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  11.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  11.2k|    }                                                                  \
  |  | 9255|  11.2k|    else {                                                             \
  |  | 9256|  11.2k|        return vis(monostate_val);                                     \
  |  | 9257|  11.2k|    }
  ------------------
 9316|  12.5k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9316:9): [True: 1.36k, False: 11.2k]
  ------------------
 9317|  12.5k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9252|  12.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  12.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  12.5k|    }                                                                  \
  |  | 9255|  12.5k|    else {                                                             \
  |  | 9256|  12.5k|        return vis(monostate_val);                                     \
  |  | 9257|  12.5k|    }
  ------------------
 9318|  12.5k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9318:9): [True: 0, False: 12.5k]
  ------------------
 9319|  12.5k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9252|  12.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  12.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  12.5k|    }                                                                  \
  |  | 9255|  12.5k|    else {                                                             \
  |  | 9256|  12.5k|        return vis(monostate_val);                                     \
  |  | 9257|  12.5k|    }
  ------------------
 9320|  12.5k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9320:9): [True: 0, False: 12.5k]
  ------------------
 9321|  12.5k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9252|  12.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  12.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  12.5k|    }                                                                  \
  |  | 9255|  12.5k|    else {                                                             \
  |  | 9256|  12.5k|        return vis(monostate_val);                                     \
  |  | 9257|  12.5k|    }
  ------------------
 9322|       |
 9323|  12.5k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9323:9): [True: 0, False: 12.5k]
  ------------------
 9324|  12.5k|#if !SCN_DISABLE_TYPE_CUSTOM
 9325|  12.5k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9326|  12.5k|                get_arg_value(arg).custom_value));
 9327|       |#else
 9328|       |            return vis(monostate_val);
 9329|       |#endif
 9330|       |
 9331|      0|            SCN_CLANG_PUSH
 9332|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9333|       |
 9334|      0|            SCN_UNLIKELY_ATTR
 9335|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9335:9): [True: 0, False: 12.5k]
  ------------------
 9336|      0|        default: {
  ------------------
  |  Branch (9336:9): [True: 0, False: 12.5k]
  ------------------
 9337|      0|            return vis(monostate_val);
 9338|      0|        }
 9339|       |
 9340|  12.5k|            SCN_CLANG_POP
 9341|  12.5k|    }
 9342|       |
 9343|      0|#undef SCN_VISIT
 9344|       |
 9345|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1052|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9346|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9347|      0|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE5beginEv:
 3478|  7.08k|    {
 3479|  7.08k|        return m_iterator;
 3480|  7.08k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISH_vEEOT_:
 1568|  1.43k|        : base(std::in_place, std::forward<U>(val)),
 1569|  1.43k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  1.43k|    {
 1571|  1.43k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  440|  1.43k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.43k|    {
  442|  1.43k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  1.55k|    {
 1315|  1.55k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE3endEv:
 3482|  3.39k|    {
 3483|  3.39k|        return m_sentinel;
 3484|  3.39k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISI_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSM_IXsr3stdE16is_convertible_vISO_SI_EEvE4typeELSS_0EEEONS0_10unexpectedISN_EE:
 1614|    116|        : base(unexpect, std::move(e.error())),
 1615|    116|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|    116|    {
 1617|    116|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  449|    116|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    116|          m_has_value(false)
  451|    116|    {
  452|    116|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEEC2ISG_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SG_EEvE4typeELPv0EEESO_SJ_:
 3463|  3.39k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|  3.39k|    static_cast<    \
  |  | 1056|  3.39k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|  3.39k|    static_cast<    \
  |  | 1056|  3.39k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3464|  3.39k|    {
 3465|  3.39k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9has_valueEv:
  489|  3.10k|    {
  490|  3.10k|        return m_has_value;
  491|  3.10k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5valueISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1767|  1.43k|    {
 1768|  1.43k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  1.43k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.43k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  1.43k|        return this->get_value();
 1770|  1.43k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9get_valueEv:
  455|  1.43k|    {
  456|  1.43k|        return m_value;
  457|  1.43k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESI_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSO_:
 1977|  1.55k|    {
 1978|  1.55k|        return detail::transform_error_impl(std::move(*this),
 1979|  1.55k|                                            std::forward<F>(f));
 1980|  1.55k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS6_IPKwS8_EENS4_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEE8sentinelILb1EEEEENS4_9eof_errorEEERFNS0_10scan_errorESK_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESM_EEDaOSR_OT0_:
 1460|  1.55k|{
 1461|       |    if constexpr (std::is_void_v<Ret>) {
 1462|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1463|       |        if (SCN_LIKELY(exp.has_value())) {
 1464|       |            return result(*std::forward<Exp>(exp));
 1465|       |        }
 1466|       |
 1467|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1468|       |        return result(unexpect, monostate{});
 1469|       |    }
 1470|  1.55k|    else {
 1471|  1.55k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1472|  1.55k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  985|  1.55k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 1.43k, False: 116]
  |  |  ------------------
  ------------------
 1473|  1.55k|                   ? result(*std::forward<Exp>(exp))
 1474|  1.55k|                   : result(unexpect,
 1475|    116|                            trivial_invoke(std::forward<F>(f),
 1476|    116|                                           std::forward<Exp>(exp).error()));
 1477|  1.55k|    }
 1478|  1.55k|}
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSN_v:
 1803|  1.43k|    {
 1804|  1.43k|        return std::move(value());
 1805|  1.43k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1568|  1.43k|        : base(std::in_place, std::forward<U>(val)),
 1569|  1.43k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  1.43k|    {
 1571|  1.43k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  440|  1.43k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.43k|    {
  442|  1.43k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  1.55k|    {
 1315|  1.55k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5errorEv:
 1754|    116|    {
 1755|    116|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|    116|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    116|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1756|    116|        return std::move(this->get_unexpected().error());
 1757|    116|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE14get_unexpectedEv:
  472|    116|    {
  473|    116|        return m_unexpected;
  474|    116|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
 1624|    116|        : base(unexpect, std::forward<Args>(args)...),
 1625|    116|          ctor_base(detail::non_default_ctor_tag_t{})
 1626|    116|    {
 1627|    116|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  449|    116|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    116|          m_has_value(false)
  451|    116|    {
  452|    116|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEcvbEv:
 1738|  1.55k|    {
 1739|  1.55k|        return has_value();
 1740|  1.55k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  3.10k|    {
  490|  3.10k|        return m_has_value;
  491|  3.10k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5errorEv:
 1744|    116|    {
 1745|    116|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|    116|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    116|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|    116|        return this->get_unexpected().error();
 1747|    116|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|    116|    {
  473|    116|        return m_unexpected;
  474|    116|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSN_v:
 1803|  1.43k|    {
 1804|  1.43k|        return std::move(value());
 1805|  1.43k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5valueISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1767|  1.43k|    {
 1768|  1.43k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  1.43k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.43k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  1.43k|        return this->get_value();
 1770|  1.43k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.43k|    {
  456|  1.43k|        return m_value;
  457|  1.43k|    }

_ZN3scn2v44scanIJwERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  6.65k|{
   89|  6.65k|    auto result = make_scan_result<Source, Args...>();
   90|  6.65k|    fill_scan_result(result,
   91|  6.65k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  6.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  6.65k|                           make_scan_args<wscan_context>(result->values())));
   93|  6.65k|    return result;
   94|  6.65k|}
_ZN3scn2v45vscanIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESE_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEEEOSA_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextINSF_16buffer_range_tagEwEEEE:
   43|  59.9k|{
   44|  59.9k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  | 1057|  59.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  59.9k|}
_ZN3scn2v44scanIJwENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  6.65k|{
  131|  6.65k|    auto result = make_scan_result<Source, Args...>();
  132|  6.65k|    fill_scan_result(result,
  133|  6.65k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  6.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  6.65k|                           make_scan_args<wscan_context>(result->values())));
  135|  6.65k|    return result;
  136|  6.65k|}
_ZN3scn2v45vscanIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS2_6localeETnPvLPv0EEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextINSI_16buffer_range_tagEwEEEE:
   59|  59.9k|{
   60|  59.9k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  | 1057|  59.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  59.9k|}
_ZN3scn2v44scanIJiERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  6.65k|{
   89|  6.65k|    auto result = make_scan_result<Source, Args...>();
   90|  6.65k|    fill_scan_result(result,
   91|  6.65k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  6.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  6.65k|                           make_scan_args<wscan_context>(result->values())));
   93|  6.65k|    return result;
   94|  6.65k|}
_ZN3scn2v44scanIJiENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  6.65k|{
  131|  6.65k|    auto result = make_scan_result<Source, Args...>();
  132|  6.65k|    fill_scan_result(result,
  133|  6.65k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  6.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  6.65k|                           make_scan_args<wscan_context>(result->values())));
  135|  6.65k|    return result;
  136|  6.65k|}
_ZN3scn2v44scanIJjERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  6.65k|{
   89|  6.65k|    auto result = make_scan_result<Source, Args...>();
   90|  6.65k|    fill_scan_result(result,
   91|  6.65k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  6.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  6.65k|                           make_scan_args<wscan_context>(result->values())));
   93|  6.65k|    return result;
   94|  6.65k|}
_ZN3scn2v44scanIJjENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  6.65k|{
  131|  6.65k|    auto result = make_scan_result<Source, Args...>();
  132|  6.65k|    fill_scan_result(result,
  133|  6.65k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  6.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  6.65k|                           make_scan_args<wscan_context>(result->values())));
  135|  6.65k|    return result;
  136|  6.65k|}
_ZN3scn2v44scanIJdERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  6.65k|{
   89|  6.65k|    auto result = make_scan_result<Source, Args...>();
   90|  6.65k|    fill_scan_result(result,
   91|  6.65k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  6.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  6.65k|                           make_scan_args<wscan_context>(result->values())));
   93|  6.65k|    return result;
   94|  6.65k|}
_ZN3scn2v44scanIJdENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  6.65k|{
  131|  6.65k|    auto result = make_scan_result<Source, Args...>();
  132|  6.65k|    fill_scan_result(result,
  133|  6.65k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  6.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  6.65k|                           make_scan_args<wscan_context>(result->values())));
  135|  6.65k|    return result;
  136|  6.65k|}
_ZN3scn2v44scanIJbERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  6.65k|{
   89|  6.65k|    auto result = make_scan_result<Source, Args...>();
   90|  6.65k|    fill_scan_result(result,
   91|  6.65k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  6.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  6.65k|                           make_scan_args<wscan_context>(result->values())));
   93|  6.65k|    return result;
   94|  6.65k|}
_ZN3scn2v44scanIJbENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  6.65k|{
  131|  6.65k|    auto result = make_scan_result<Source, Args...>();
  132|  6.65k|    fill_scan_result(result,
  133|  6.65k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  6.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  6.65k|                           make_scan_args<wscan_context>(result->values())));
  135|  6.65k|    return result;
  136|  6.65k|}
_ZN3scn2v44scanIJPvERNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELS2_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEEOSA_NS0_24basic_scan_format_stringIwNSL_13type_identityISA_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  6.65k|{
   89|  6.65k|    auto result = make_scan_result<Source, Args...>();
   90|  6.65k|    fill_scan_result(result,
   91|  6.65k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  6.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  6.65k|                           make_scan_args<wscan_context>(result->values())));
   93|  6.65k|    return result;
   94|  6.65k|}
_ZN3scn2v44scanIJPvENSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELS2_0ETnPvLS2_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEERKT0_OSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  6.65k|{
  131|  6.65k|    auto result = make_scan_result<Source, Args...>();
  132|  6.65k|    fill_scan_result(result,
  133|  6.65k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  6.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  6.65k|                           make_scan_args<wscan_context>(result->values())));
  135|  6.65k|    return result;
  136|  6.65k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEERNS2_17basic_string_viewIwNS4_IwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISE_EEP8_IO_FILEEESP_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSQ_13type_identityISE_E4typeEJDpNS12_ISW_E4typeEEEE:
   88|  6.65k|{
   89|  6.65k|    auto result = make_scan_result<Source, Args...>();
   90|  6.65k|    fill_scan_result(result,
   91|  6.65k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  6.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  6.65k|                           make_scan_args<wscan_context>(result->values())));
   93|  6.65k|    return result;
   94|  6.65k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeERNS2_17basic_string_viewIwNS4_IwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSJ_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISF_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSS_13type_identityISF_E4typeEJDpNS17_ISY_E4typeEEEE:
  130|  6.65k|{
  131|  6.65k|    auto result = make_scan_result<Source, Args...>();
  132|  6.65k|    fill_scan_result(result,
  133|  6.65k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  6.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  6.65k|                           make_scan_args<wscan_context>(result->values())));
  135|  6.65k|    return result;
  136|  6.65k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEERNS2_17basic_string_viewIwS5_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISD_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIwNSP_13type_identityISD_E4typeEJDpNS11_ISV_E4typeEEEE:
   88|  6.65k|{
   89|  6.65k|    auto result = make_scan_result<Source, Args...>();
   90|  6.65k|    fill_scan_result(result,
   91|  6.65k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  6.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  6.65k|                           make_scan_args<wscan_context>(result->values())));
   93|  6.65k|    return result;
   94|  6.65k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeERNS2_17basic_string_viewIwS5_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSI_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISE_EEP8_IO_FILEEESQ_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIwNSR_13type_identityISE_E4typeEJDpNS16_ISX_E4typeEEEE:
  130|  6.65k|{
  131|  6.65k|    auto result = make_scan_result<Source, Args...>();
  132|  6.65k|    fill_scan_result(result,
  133|  6.65k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  6.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  6.65k|                           make_scan_args<wscan_context>(result->values())));
  135|  6.65k|    return result;
  136|  6.65k|}
_ZN3scn2v44scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEERS6_TnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  6.65k|{
   89|  6.65k|    auto result = make_scan_result<Source, Args...>();
   90|  6.65k|    fill_scan_result(result,
   91|  6.65k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  6.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  6.65k|                           make_scan_args<wscan_context>(result->values())));
   93|  6.65k|    return result;
   94|  6.65k|}
_ZN3scn2v44scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS2_6localeERS6_TnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  6.65k|{
  131|  6.65k|    auto result = make_scan_result<Source, Args...>();
  132|  6.65k|    fill_scan_result(result,
  133|  6.65k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  6.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  6.65k|                           make_scan_args<wscan_context>(result->values())));
  135|  6.65k|    return result;
  136|  6.65k|}

_ZN3scn2v46detail10locale_refC2INSt3__16localeEEERKT_:
  307|  89.8k|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  308|  89.8k|{
  309|  89.8k|    static_assert(std::is_same_v<Locale, std::locale>);
  310|  89.8k|}
_ZNK3scn2v46detail10locale_ref3getINSt3__16localeEEET_v:
  314|    262|{
  315|    262|    static_assert(std::is_same_v<Locale, std::locale>);
  316|    262|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (316:12): [True: 131, False: 131]
  ------------------
  317|    262|                    : std::locale{};
  318|    262|}
_ZN3scn2v44impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1095|    908|{
 1096|    908|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1097|    908|                                  m_nan_payload_buffer, value);
 1098|    908|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  985|    908|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 0, False: 908]
  |  |  ------------------
  ------------------
 1099|      0|        value = this->setsign(value);
 1100|      0|        return n;
 1101|      0|    }
 1102|       |
 1103|    908|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (1103:9): [True: 0, False: 908]
  ------------------
 1104|    908|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1104:9): [True: 0, False: 0]
  ------------------
 1105|      0|        return detail::unexpected_scan_error(
 1106|      0|            scan_error::value_negative_overflow, n.error().msg());
 1107|      0|    }
 1108|    908|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (1108:9): [True: 0, False: 908]
  ------------------
 1109|    908|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1109:9): [True: 0, False: 0]
  ------------------
 1110|      0|        return detail::unexpected_scan_error(
 1111|      0|            scan_error::value_negative_underflow, n.error().msg());
 1112|      0|    }
 1113|    908|    return n;
 1114|    908|}
_ZN3scn2v44impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1095|  7.68k|{
 1096|  7.68k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1097|  7.68k|                                  m_nan_payload_buffer, value);
 1098|  7.68k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  985|  7.68k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 100, False: 7.58k]
  |  |  ------------------
  ------------------
 1099|    100|        value = this->setsign(value);
 1100|    100|        return n;
 1101|    100|    }
 1102|       |
 1103|  7.58k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (1103:9): [True: 0, False: 7.58k]
  ------------------
 1104|  7.58k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1104:9): [True: 0, False: 0]
  ------------------
 1105|      0|        return detail::unexpected_scan_error(
 1106|      0|            scan_error::value_negative_overflow, n.error().msg());
 1107|      0|    }
 1108|  7.58k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (1108:9): [True: 0, False: 7.58k]
  ------------------
 1109|  7.58k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1109:9): [True: 0, False: 0]
  ------------------
 1110|      0|        return detail::unexpected_scan_error(
 1111|      0|            scan_error::value_negative_underflow, n.error().msg());
 1112|      0|    }
 1113|  7.58k|    return n;
 1114|  7.58k|}
_ZN3scn2v44impl19parse_integer_valueIcaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1428|     22|{
 1429|     22|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1051|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1430|     22|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1051|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1431|     22|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1051|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1432|     22|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1051|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1433|       |
 1434|     22|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1434:9): [True: 22, False: 0]
  ------------------
 1435|     22|        SCN_UNLIKELY_ATTR
 1436|     22|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1437|     22|                                             "Invalid integer value");
 1438|     22|    }
 1439|       |
 1440|       |    // Skip leading zeroes
 1441|      0|    auto start = source.data();
 1442|      0|    const auto end = source.data() + source.size();
 1443|      0|    {
 1444|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1444:16): [True: 0, False: 0]
  ------------------
 1445|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1445:17): [True: 0, False: 0]
  ------------------
 1446|      0|                break;
 1447|      0|            }
 1448|      0|        }
 1449|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  Branch (986:45): [True: 0, False: 0]
  |  |  |  Branch (986:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1450|      0|            value = 0;
 1451|      0|            return ranges::next(source.begin(),
 1452|      0|                                ranges::distance(source.data(), start));
 1453|      0|        }
 1454|      0|    }
 1455|       |
 1456|       |    if constexpr (std::is_same_v<CharT, char> &&
 1457|      0|                  sizeof(T) <= sizeof(std::uint64_t)) {
 1458|      0|        if (base == 10) {
  ------------------
  |  Branch (1458:13): [True: 0, False: 0]
  ------------------
 1459|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1460|      0|                             detail::make_string_view_from_pointers(start, end),
 1461|      0|                             value, sign == sign_type::minus_sign));
 1462|      0|            return ranges::next(source.begin(),
 1463|      0|                                ranges::distance(source.data(), ptr));
 1464|      0|        }
 1465|      0|    }
 1466|       |
 1467|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1468|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1469|      0|                     base, sign == sign_type::minus_sign));
 1470|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1471|      0|}
_ZN3scn2v44impl19parse_integer_valueIciEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1428|    918|{
 1429|    918|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1051|    918|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    918|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1430|    918|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1051|    918|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    918|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1431|    918|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1051|    918|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    918|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1432|    918|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1051|    918|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    918|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1433|       |
 1434|    918|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1434:9): [True: 918, False: 0]
  ------------------
 1435|    918|        SCN_UNLIKELY_ATTR
 1436|    918|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1437|    918|                                             "Invalid integer value");
 1438|    918|    }
 1439|       |
 1440|       |    // Skip leading zeroes
 1441|      0|    auto start = source.data();
 1442|      0|    const auto end = source.data() + source.size();
 1443|      0|    {
 1444|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1444:16): [True: 0, False: 0]
  ------------------
 1445|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1445:17): [True: 0, False: 0]
  ------------------
 1446|      0|                break;
 1447|      0|            }
 1448|      0|        }
 1449|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  Branch (986:45): [True: 0, False: 0]
  |  |  |  Branch (986:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1450|      0|            value = 0;
 1451|      0|            return ranges::next(source.begin(),
 1452|      0|                                ranges::distance(source.data(), start));
 1453|      0|        }
 1454|      0|    }
 1455|       |
 1456|       |    if constexpr (std::is_same_v<CharT, char> &&
 1457|      0|                  sizeof(T) <= sizeof(std::uint64_t)) {
 1458|      0|        if (base == 10) {
  ------------------
  |  Branch (1458:13): [True: 0, False: 0]
  ------------------
 1459|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1460|      0|                             detail::make_string_view_from_pointers(start, end),
 1461|      0|                             value, sign == sign_type::minus_sign));
 1462|      0|            return ranges::next(source.begin(),
 1463|      0|                                ranges::distance(source.data(), ptr));
 1464|      0|        }
 1465|      0|    }
 1466|       |
 1467|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1468|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1469|      0|                     base, sign == sign_type::minus_sign));
 1470|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1471|      0|}
_ZN3scn2v44impl19parse_integer_valueIwiEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1428|  7.68k|{
 1429|  7.68k|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1051|  7.68k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  7.68k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1430|  7.68k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1051|  7.68k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  7.68k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1431|  7.68k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1051|  7.68k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  7.68k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1432|  7.68k|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1051|  7.68k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  7.68k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1433|       |
 1434|  7.68k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1434:9): [True: 7.63k, False: 54]
  ------------------
 1435|  7.63k|        SCN_UNLIKELY_ATTR
 1436|  7.63k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1437|  7.63k|                                             "Invalid integer value");
 1438|  7.63k|    }
 1439|       |
 1440|       |    // Skip leading zeroes
 1441|     54|    auto start = source.data();
 1442|     54|    const auto end = source.data() + source.size();
 1443|     54|    {
 1444|    108|        for (; start != end; ++start) {
  ------------------
  |  Branch (1444:16): [True: 84, False: 24]
  ------------------
 1445|     84|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1445:17): [True: 30, False: 54]
  ------------------
 1446|     30|                break;
 1447|     30|            }
 1448|     84|        }
 1449|     54|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  986|     84|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 54, False: 0]
  |  |  |  Branch (986:45): [True: 24, False: 30]
  |  |  |  Branch (986:45): [True: 30, False: 0]
  |  |  ------------------
  ------------------
 1450|     54|            value = 0;
 1451|     54|            return ranges::next(source.begin(),
 1452|     54|                                ranges::distance(source.data(), start));
 1453|     54|        }
 1454|     54|    }
 1455|       |
 1456|       |    if constexpr (std::is_same_v<CharT, char> &&
 1457|       |                  sizeof(T) <= sizeof(std::uint64_t)) {
 1458|       |        if (base == 10) {
 1459|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1460|       |                             detail::make_string_view_from_pointers(start, end),
 1461|       |                             value, sign == sign_type::minus_sign));
 1462|       |            return ranges::next(source.begin(),
 1463|       |                                ranges::distance(source.data(), ptr));
 1464|       |        }
 1465|       |    }
 1466|       |
 1467|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1468|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1469|      0|                     base, sign == sign_type::minus_sign));
 1470|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1471|      0|}
_ZN3scn2v44impl19parse_integer_valueIcjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1428|    918|{
 1429|    918|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1051|    918|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    918|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1430|    918|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1051|    918|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    918|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1431|    918|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1051|    918|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    918|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1432|    918|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1051|    918|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    918|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1433|       |
 1434|    918|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1434:9): [True: 918, False: 0]
  ------------------
 1435|    918|        SCN_UNLIKELY_ATTR
 1436|    918|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1437|    918|                                             "Invalid integer value");
 1438|    918|    }
 1439|       |
 1440|       |    // Skip leading zeroes
 1441|      0|    auto start = source.data();
 1442|      0|    const auto end = source.data() + source.size();
 1443|      0|    {
 1444|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1444:16): [True: 0, False: 0]
  ------------------
 1445|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1445:17): [True: 0, False: 0]
  ------------------
 1446|      0|                break;
 1447|      0|            }
 1448|      0|        }
 1449|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  Branch (986:45): [True: 0, False: 0]
  |  |  |  Branch (986:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1450|      0|            value = 0;
 1451|      0|            return ranges::next(source.begin(),
 1452|      0|                                ranges::distance(source.data(), start));
 1453|      0|        }
 1454|      0|    }
 1455|       |
 1456|       |    if constexpr (std::is_same_v<CharT, char> &&
 1457|      0|                  sizeof(T) <= sizeof(std::uint64_t)) {
 1458|      0|        if (base == 10) {
  ------------------
  |  Branch (1458:13): [True: 0, False: 0]
  ------------------
 1459|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1460|      0|                             detail::make_string_view_from_pointers(start, end),
 1461|      0|                             value, sign == sign_type::minus_sign));
 1462|      0|            return ranges::next(source.begin(),
 1463|      0|                                ranges::distance(source.data(), ptr));
 1464|      0|        }
 1465|      0|    }
 1466|       |
 1467|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1468|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1469|      0|                     base, sign == sign_type::minus_sign));
 1470|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1471|      0|}
_ZN3scn2v44impl19parse_integer_valueIwjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1428|  7.63k|{
 1429|  7.63k|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1051|  7.63k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  7.63k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1430|  7.63k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1051|  7.63k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  7.63k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1431|  7.63k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1051|  7.63k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  7.63k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1432|  7.63k|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1051|  7.63k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  7.63k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1433|       |
 1434|  7.63k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1434:9): [True: 7.59k, False: 46]
  ------------------
 1435|  7.59k|        SCN_UNLIKELY_ATTR
 1436|  7.59k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1437|  7.59k|                                             "Invalid integer value");
 1438|  7.59k|    }
 1439|       |
 1440|       |    // Skip leading zeroes
 1441|     46|    auto start = source.data();
 1442|     46|    const auto end = source.data() + source.size();
 1443|     46|    {
 1444|     92|        for (; start != end; ++start) {
  ------------------
  |  Branch (1444:16): [True: 72, False: 20]
  ------------------
 1445|     72|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1445:17): [True: 26, False: 46]
  ------------------
 1446|     26|                break;
 1447|     26|            }
 1448|     72|        }
 1449|     46|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  986|     72|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 46, False: 0]
  |  |  |  Branch (986:45): [True: 20, False: 26]
  |  |  |  Branch (986:45): [True: 26, False: 0]
  |  |  ------------------
  ------------------
 1450|     46|            value = 0;
 1451|     46|            return ranges::next(source.begin(),
 1452|     46|                                ranges::distance(source.data(), start));
 1453|     46|        }
 1454|     46|    }
 1455|       |
 1456|       |    if constexpr (std::is_same_v<CharT, char> &&
 1457|       |                  sizeof(T) <= sizeof(std::uint64_t)) {
 1458|       |        if (base == 10) {
 1459|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1460|       |                             detail::make_string_view_from_pointers(start, end),
 1461|       |                             value, sign == sign_type::minus_sign));
 1462|       |            return ranges::next(source.begin(),
 1463|       |                                ranges::distance(source.data(), ptr));
 1464|       |        }
 1465|       |    }
 1466|       |
 1467|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1468|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1469|      0|                     base, sign == sign_type::minus_sign));
 1470|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1471|      0|}
_ZN3scn2v44impl19parse_integer_valueIcmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1428|    900|{
 1429|    900|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1051|    900|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    900|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1430|    900|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1051|    900|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    900|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1431|    900|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1051|    900|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    900|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1432|    900|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1051|    900|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    900|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1433|       |
 1434|    900|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1434:9): [True: 900, False: 0]
  ------------------
 1435|    900|        SCN_UNLIKELY_ATTR
 1436|    900|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1437|    900|                                             "Invalid integer value");
 1438|    900|    }
 1439|       |
 1440|       |    // Skip leading zeroes
 1441|      0|    auto start = source.data();
 1442|      0|    const auto end = source.data() + source.size();
 1443|      0|    {
 1444|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1444:16): [True: 0, False: 0]
  ------------------
 1445|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1445:17): [True: 0, False: 0]
  ------------------
 1446|      0|                break;
 1447|      0|            }
 1448|      0|        }
 1449|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  Branch (986:45): [True: 0, False: 0]
  |  |  |  Branch (986:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1450|      0|            value = 0;
 1451|      0|            return ranges::next(source.begin(),
 1452|      0|                                ranges::distance(source.data(), start));
 1453|      0|        }
 1454|      0|    }
 1455|       |
 1456|       |    if constexpr (std::is_same_v<CharT, char> &&
 1457|      0|                  sizeof(T) <= sizeof(std::uint64_t)) {
 1458|      0|        if (base == 10) {
  ------------------
  |  Branch (1458:13): [True: 0, False: 0]
  ------------------
 1459|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1460|      0|                             detail::make_string_view_from_pointers(start, end),
 1461|      0|                             value, sign == sign_type::minus_sign));
 1462|      0|            return ranges::next(source.begin(),
 1463|      0|                                ranges::distance(source.data(), ptr));
 1464|      0|        }
 1465|      0|    }
 1466|       |
 1467|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1468|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1469|      0|                     base, sign == sign_type::minus_sign));
 1470|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1471|      0|}
_ZN3scn2v44impl19parse_integer_valueIwmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1428|  7.58k|{
 1429|  7.58k|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1051|  7.58k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  7.58k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1430|  7.58k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1051|  7.58k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  7.58k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1431|  7.58k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1051|  7.58k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  7.58k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1432|  7.58k|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1051|  7.58k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  7.58k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1433|       |
 1434|  7.58k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1434:9): [True: 7.55k, False: 34]
  ------------------
 1435|  7.55k|        SCN_UNLIKELY_ATTR
 1436|  7.55k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1437|  7.55k|                                             "Invalid integer value");
 1438|  7.55k|    }
 1439|       |
 1440|       |    // Skip leading zeroes
 1441|     34|    auto start = source.data();
 1442|     34|    const auto end = source.data() + source.size();
 1443|     34|    {
 1444|     68|        for (; start != end; ++start) {
  ------------------
  |  Branch (1444:16): [True: 58, False: 10]
  ------------------
 1445|     58|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1445:17): [True: 24, False: 34]
  ------------------
 1446|     24|                break;
 1447|     24|            }
 1448|     58|        }
 1449|     34|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  986|     58|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 34, False: 0]
  |  |  |  Branch (986:45): [True: 10, False: 24]
  |  |  |  Branch (986:45): [True: 24, False: 0]
  |  |  ------------------
  ------------------
 1450|     34|            value = 0;
 1451|     34|            return ranges::next(source.begin(),
 1452|     34|                                ranges::distance(source.data(), start));
 1453|     34|        }
 1454|     34|    }
 1455|       |
 1456|       |    if constexpr (std::is_same_v<CharT, char> &&
 1457|       |                  sizeof(T) <= sizeof(std::uint64_t)) {
 1458|       |        if (base == 10) {
 1459|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1460|       |                             detail::make_string_view_from_pointers(start, end),
 1461|       |                             value, sign == sign_type::minus_sign));
 1462|       |            return ranges::next(source.begin(),
 1463|       |                                ranges::distance(source.data(), ptr));
 1464|       |        }
 1465|       |    }
 1466|       |
 1467|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1468|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1469|      0|                     base, sign == sign_type::minus_sign));
 1470|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1471|      0|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2179|  29.9k|{
 2180|  29.9k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2181|  29.9k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2197|  59.9k|{
 2198|  59.9k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2199|  59.9k|}
_ZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  206|  3.96k|{
  207|  3.96k|    return find_classic_impl(
  208|  3.96k|        source, [](char ch) { return is_ascii_space(ch); },
  209|  3.96k|        [](char32_t cp) { return detail::is_cp_space(cp); });
  210|  3.96k|}
_ZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  214|  26.5k|{
  215|  26.5k|    return find_classic_impl(
  216|  26.5k|        source, [](char ch) { return !is_ascii_space(ch); },
  217|  26.5k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  218|  26.5k|}
_ZN3scn2v46detail12handle_errorENS0_10scan_errorE:
  328|    354|{
  329|    354|    SCN_UNLIKELY_ATTR
  330|    354|    return e;
  331|    354|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2148|  29.9k|{
 2149|  29.9k|    return vscan_internal(source, format, args);
 2150|  29.9k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2162|  59.9k|{
 2163|  59.9k|    return vscan_internal(source, format, args);
 2164|  59.9k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|  3.96k|{
  131|  3.96k|    auto it = source.begin();
  132|       |
  133|  11.3k|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 8.09k, False: 3.22k]
  ------------------
  134|  8.09k|        auto sv =
  135|  8.09k|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|  8.09k|                .substr(0, 8);
  137|       |
  138|  8.09k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 2.55k, False: 5.54k]
  ------------------
  139|  2.55k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|  2.55k|            it = detail::make_string_view_iterator(source, tmp_it);
  141|  2.55k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 420, False: 2.13k]
  ------------------
  142|    420|                break;
  143|    420|            }
  144|  2.13k|            continue;
  145|  2.55k|        }
  146|       |
  147|  21.0k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 15.8k, False: 5.22k]
  ------------------
  148|  15.8k|            auto tmp =
  149|  15.8k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|  15.8k|            auto res = get_next_code_point(tmp);
  151|  15.8k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 324, False: 15.5k]
  ------------------
  152|    324|                return it;
  153|    324|            }
  154|  15.5k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|  15.5k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|  15.5k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  | 1052|  15.5k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1048|  15.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  15.5k|        }
  158|  5.54k|    }
  159|       |
  160|  3.64k|    return detail::make_string_view_iterator(source, it);
  161|  3.96k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  117|  33.9k|{
  118|  33.9k|    static_assert(sizeof(*source.data()) == 1);
  119|  33.9k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  | 1051|  33.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  33.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  120|  33.9k|    uint64_t word{};
  121|  33.9k|    std::memcpy(&word, source.data(), source.size());
  122|       |
  123|  33.9k|    return has_byte_greater(word, 127) != 0;
  124|  33.9k|}
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  208|  14.1k|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  209|  15.8k|        [](char32_t cp) { return detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|  26.5k|{
  131|  26.5k|    auto it = source.begin();
  132|       |
  133|  34.0k|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 25.8k, False: 8.23k]
  ------------------
  134|  25.8k|        auto sv =
  135|  25.8k|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|  25.8k|                .substr(0, 8);
  137|       |
  138|  25.8k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 12.2k, False: 13.6k]
  ------------------
  139|  12.2k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|  12.2k|            it = detail::make_string_view_iterator(source, tmp_it);
  141|  12.2k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 10.1k, False: 2.02k]
  ------------------
  142|  10.1k|                break;
  143|  10.1k|            }
  144|  2.02k|            continue;
  145|  12.2k|        }
  146|       |
  147|  27.5k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 22.0k, False: 5.44k]
  ------------------
  148|  22.0k|            auto tmp =
  149|  22.0k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|  22.0k|            auto res = get_next_code_point(tmp);
  151|  22.0k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 8.17k, False: 13.8k]
  ------------------
  152|  8.17k|                return it;
  153|  8.17k|            }
  154|  13.8k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|  13.8k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|  13.8k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  | 1052|  13.8k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1048|  13.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  13.8k|        }
  158|  13.6k|    }
  159|       |
  160|  18.4k|    return detail::make_string_view_iterator(source, it);
  161|  26.5k|}
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  216|  24.4k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  217|  22.0k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_120fast_float_impl_base9get_flagsEv:
  723|     44|    {
  724|     44|        unsigned format_flags{};
  725|     44|        if ((m_options & float_reader_base::allow_fixed) != 0) {
  ------------------
  |  Branch (725:13): [True: 44, False: 0]
  ------------------
  726|     44|            format_flags |=
  727|     44|                static_cast<unsigned>(fast_float::chars_format::fixed);
  728|     44|        }
  729|     44|        if ((m_options & float_reader_base::allow_scientific) != 0) {
  ------------------
  |  Branch (729:13): [True: 40, False: 4]
  ------------------
  730|     40|            format_flags |=
  731|     40|                static_cast<unsigned>(fast_float::chars_format::scientific);
  732|     40|        }
  733|       |
  734|     44|        return static_cast<fast_float::chars_format>(format_flags);
  735|     44|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_114impl_init_dataIwE4baseEv:
  368|    156|    {
  369|    156|        return {kind, options};
  370|    156|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  988|    908|{
  989|    908|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (989:9): [True: 0, False: 908]
  ------------------
  990|      0|        if constexpr (std::numeric_limits<T>::has_infinity) {
  991|      0|            value = std::numeric_limits<T>::infinity();
  992|      0|            return std::strlen("inf");
  993|       |        }
  994|       |        else {
  995|       |            return detail::unexpected_scan_error(
  996|       |                scan_error::invalid_scanned_value,
  997|       |                "Type doesn't support infinities");
  998|       |        }
  999|      0|    }
 1000|    908|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1000:9): [True: 0, False: 908]
  ------------------
 1001|      0|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1002|      0|            value = std::numeric_limits<T>::infinity();
 1003|      0|            return std::strlen("infinity");
 1004|       |        }
 1005|       |        else {
 1006|       |            return detail::unexpected_scan_error(
 1007|       |                scan_error::invalid_scanned_value,
 1008|       |                "Type doesn't support infinities");
 1009|       |        }
 1010|      0|    }
 1011|    908|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1011:9): [True: 0, False: 908]
  ------------------
 1012|      0|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1013|      0|            value = std::numeric_limits<T>::quiet_NaN();
 1014|      0|            return std::strlen("nan");
 1015|       |        }
 1016|       |        else {
 1017|       |            return detail::unexpected_scan_error(
 1018|       |                scan_error::invalid_scanned_value,
 1019|       |                "Type doesn't support quiet NaNs");
 1020|       |        }
 1021|      0|    }
 1022|    908|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1022:9): [True: 0, False: 908]
  ------------------
 1023|      0|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1024|      0|            value = std::numeric_limits<T>::quiet_NaN();
 1025|       |
 1026|      0|            if constexpr (std::numeric_limits<T>::is_iec559) {
 1027|       |                // TODO: 128-bit payloads
 1028|      0|                std::uint64_t payload{};
 1029|      0|                if (auto result = reader_impl_for_int<CharT>{}.read_default(
  ------------------
  |  Branch (1029:26): [True: 0, False: 0]
  ------------------
 1030|      0|                        nan_payload.view(), payload, {})) {
 1031|      0|                    apply_nan_payload(value, payload);
 1032|      0|                }
 1033|      0|                else if (result.error().code() ==
  ------------------
  |  Branch (1033:26): [True: 0, False: 0]
  ------------------
 1034|      0|                         scan_error::value_positive_overflow) {
 1035|      0|                    apply_nan_payload(
 1036|      0|                        value, std::numeric_limits<std::uint64_t>::max());
 1037|      0|                }
 1038|      0|            }
 1039|       |
 1040|      0|            return static_cast<std::ptrdiff_t>(std::strlen("nan()") +
 1041|      0|                                               nan_payload.view().size());
 1042|       |        }
 1043|       |        else {
 1044|       |            return detail::unexpected_scan_error(
 1045|       |                scan_error::invalid_scanned_value,
 1046|       |                "Type doesn't support quiet NaNs");
 1047|       |        }
 1048|      0|    }
 1049|       |
 1050|    908|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  | 1051|    908|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    908|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1051|    908|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1051:9): [True: 8, False: 900]
  ------------------
 1052|      8|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  986|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 8, False: 0]
  |  |  ------------------
  ------------------
 1053|      8|            return detail::unexpected_scan_error(
 1054|      8|                scan_error::invalid_scanned_value,
 1055|      8|                "Invalid floating-point digit");
 1056|      8|        }
 1057|      8|    }
 1058|    900|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  986|    900|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 900, False: 0]
  |  |  ------------------
  ------------------
 1059|    900|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1060|    900|                                             "Invalid floating-point digit");
 1061|    900|    }
 1062|       |
 1063|      0|#if !SCN_DISABLE_FAST_FLOAT
 1064|       |    if constexpr (std::is_same_v<T, long double>) {
 1065|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1066|       |            // If double == long double (true on Windows),
 1067|       |            // use fast_float with double
 1068|       |            double tmp{};
 1069|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1070|       |            value = tmp;
 1071|       |            return ret;
 1072|       |        }
 1073|       |        else {
 1074|       |            // long doubles aren't supported by fast_float ->
 1075|       |            // fall back to from_chars or strtod
 1076|       |            return fast_float_fallback(data, value);
 1077|       |        }
 1078|       |    }
 1079|      0|    else {
 1080|       |        // Default to fast_float
 1081|      0|        return fast_float_impl<CharT, T>{data}(value);
 1082|      0|    }
 1083|       |#else
 1084|       |    static_assert(SCN_HAS_FLOAT_CHARCONV,
 1085|       |                  "SCN_DISABLE_FAST_FLOAT needs std::from_chars for floats");
 1086|       |
 1087|       |    return fast_float_fallback(data, value);
 1088|       |#endif
 1089|      0|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdEC2ENS2_9impl_baseE:
  382|     56|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE11check_errorElid:
  431|     56|    {
  432|     56|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (432:13): [True: 56, False: 0]
  |  Branch (432:37): [True: 0, False: 56]
  ------------------
  433|      0|            SCN_UNLIKELY_ATTR
  434|      0|            return detail::unexpected_scan_error(
  435|      0|                scan_error::invalid_scanned_value,
  436|      0|                "strtod failed: No conversion");
  437|      0|        }
  438|       |
  439|     56|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (439:13): [True: 0, False: 56]
  ------------------
  440|     56|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (440:13): [True: 0, False: 0]
  ------------------
  441|      0|            SCN_UNLIKELY_ATTR
  442|      0|            return detail::unexpected_scan_error(
  443|      0|                scan_error::invalid_scanned_value,
  444|      0|                "Hexfloats disallowed by format string");
  445|      0|        }
  446|       |
  447|     56|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (447:13): [True: 0, False: 56]
  |  Branch (447:34): [True: 0, False: 0]
  ------------------
  448|      0|            SCN_UNLIKELY_ATTR
  449|      0|            return detail::unexpected_scan_error(
  450|      0|                scan_error::value_positive_underflow,
  451|      0|                "strtod failed: underflow");
  452|      0|        }
  453|       |
  454|     56|        SCN_GCC_COMPAT_PUSH
  455|     56|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  456|       |
  457|     56|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (457:13): [True: 56, False: 0]
  ------------------
  458|     56|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (458:13): [True: 56, False: 0]
  ------------------
  459|     56|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (459:13): [True: 0, False: 56]
  ------------------
  460|      0|            SCN_UNLIKELY_ATTR
  461|      0|            return detail::unexpected_scan_error(
  462|      0|                scan_error::value_positive_overflow, "strtod failed: overflow");
  463|      0|        }
  464|       |
  465|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  466|       |
  467|     56|            return {};
  468|     56|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113is_float_zeroEd:
  347|     56|{
  348|     56|    return d == 0.0 || d == -0.0;
  ------------------
  |  Branch (348:12): [True: 56, False: 0]
  |  Branch (348:24): [True: 0, False: 0]
  ------------------
  349|     56|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  988|  7.68k|{
  989|  7.68k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (989:9): [True: 0, False: 7.68k]
  ------------------
  990|      0|        if constexpr (std::numeric_limits<T>::has_infinity) {
  991|      0|            value = std::numeric_limits<T>::infinity();
  992|      0|            return std::strlen("inf");
  993|       |        }
  994|       |        else {
  995|       |            return detail::unexpected_scan_error(
  996|       |                scan_error::invalid_scanned_value,
  997|       |                "Type doesn't support infinities");
  998|       |        }
  999|      0|    }
 1000|  7.68k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1000:9): [True: 0, False: 7.68k]
  ------------------
 1001|      0|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1002|      0|            value = std::numeric_limits<T>::infinity();
 1003|      0|            return std::strlen("infinity");
 1004|       |        }
 1005|       |        else {
 1006|       |            return detail::unexpected_scan_error(
 1007|       |                scan_error::invalid_scanned_value,
 1008|       |                "Type doesn't support infinities");
 1009|       |        }
 1010|      0|    }
 1011|  7.68k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1011:9): [True: 0, False: 7.68k]
  ------------------
 1012|      0|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1013|      0|            value = std::numeric_limits<T>::quiet_NaN();
 1014|      0|            return std::strlen("nan");
 1015|       |        }
 1016|       |        else {
 1017|       |            return detail::unexpected_scan_error(
 1018|       |                scan_error::invalid_scanned_value,
 1019|       |                "Type doesn't support quiet NaNs");
 1020|       |        }
 1021|      0|    }
 1022|  7.68k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1022:9): [True: 0, False: 7.68k]
  ------------------
 1023|      0|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1024|      0|            value = std::numeric_limits<T>::quiet_NaN();
 1025|       |
 1026|      0|            if constexpr (std::numeric_limits<T>::is_iec559) {
 1027|       |                // TODO: 128-bit payloads
 1028|      0|                std::uint64_t payload{};
 1029|      0|                if (auto result = reader_impl_for_int<CharT>{}.read_default(
  ------------------
  |  Branch (1029:26): [True: 0, False: 0]
  ------------------
 1030|      0|                        nan_payload.view(), payload, {})) {
 1031|      0|                    apply_nan_payload(value, payload);
 1032|      0|                }
 1033|      0|                else if (result.error().code() ==
  ------------------
  |  Branch (1033:26): [True: 0, False: 0]
  ------------------
 1034|      0|                         scan_error::value_positive_overflow) {
 1035|      0|                    apply_nan_payload(
 1036|      0|                        value, std::numeric_limits<std::uint64_t>::max());
 1037|      0|                }
 1038|      0|            }
 1039|       |
 1040|      0|            return static_cast<std::ptrdiff_t>(std::strlen("nan()") +
 1041|      0|                                               nan_payload.view().size());
 1042|       |        }
 1043|       |        else {
 1044|       |            return detail::unexpected_scan_error(
 1045|       |                scan_error::invalid_scanned_value,
 1046|       |                "Type doesn't support quiet NaNs");
 1047|       |        }
 1048|      0|    }
 1049|       |
 1050|  7.68k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  | 1051|  7.68k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  7.68k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1051|  7.68k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1051:9): [True: 78, False: 7.60k]
  ------------------
 1052|     78|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  986|     78|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 22, False: 56]
  |  |  ------------------
  ------------------
 1053|     22|            return detail::unexpected_scan_error(
 1054|     22|                scan_error::invalid_scanned_value,
 1055|     22|                "Invalid floating-point digit");
 1056|     22|        }
 1057|     78|    }
 1058|  7.66k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  986|  7.66k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 7.56k, False: 100]
  |  |  ------------------
  ------------------
 1059|  7.56k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1060|  7.56k|                                             "Invalid floating-point digit");
 1061|  7.56k|    }
 1062|       |
 1063|    100|#if !SCN_DISABLE_FAST_FLOAT
 1064|       |    if constexpr (std::is_same_v<T, long double>) {
 1065|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1066|       |            // If double == long double (true on Windows),
 1067|       |            // use fast_float with double
 1068|       |            double tmp{};
 1069|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1070|       |            value = tmp;
 1071|       |            return ret;
 1072|       |        }
 1073|       |        else {
 1074|       |            // long doubles aren't supported by fast_float ->
 1075|       |            // fall back to from_chars or strtod
 1076|       |            return fast_float_fallback(data, value);
 1077|       |        }
 1078|       |    }
 1079|    100|    else {
 1080|       |        // Default to fast_float
 1081|    100|        return fast_float_impl<CharT, T>{data}(value);
 1082|    100|    }
 1083|       |#else
 1084|       |    static_assert(SCN_HAS_FLOAT_CHARCONV,
 1085|       |                  "SCN_DISABLE_FAST_FLOAT needs std::from_chars for floats");
 1086|       |
 1087|       |    return fast_float_fallback(data, value);
 1088|       |#endif
 1089|    100|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_115fast_float_implIwdEC2ENS2_14impl_init_dataIwEE:
  741|    100|        : fast_float_impl_base{data.base()}, m_input(data.input)
  742|    100|    {
  743|    100|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_115fast_float_implIwdEclERd:
  746|    100|    {
  747|    100|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (747:13): [True: 56, False: 44]
  ------------------
  748|    100|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (748:13): [True: 0, False: 44]
  ------------------
  749|       |            // fast_float doesn't support hexfloats
  750|     56|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  751|     56|                                              value);
  752|     56|        }
  753|       |
  754|     44|        const auto flags = get_flags();
  755|     44|        const auto view = get_view();
  756|     44|        const auto result = fast_float::from_chars(
  757|     44|            view.data(), view.data() + view.size(), value, flags);
  758|       |
  759|     44|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  986|     44|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 44]
  |  |  ------------------
  ------------------
  760|      0|            return detail::unexpected_scan_error(
  761|      0|                scan_error::invalid_scanned_value,
  762|      0|                "fast_float: invalid_argument");
  763|      0|        }
  764|     44|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  986|     44|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 44]
  |  |  ------------------
  ------------------
  765|       |            // may just be very large: fall back
  766|      0|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  767|      0|                                              value);
  768|      0|        }
  769|       |
  770|     44|        return result.ptr - view.data();
  771|     44|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_119fast_float_fallbackIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  701|     56|{
  702|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  703|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  704|       |        return from_chars_impl<T>{data}(value);
  705|       |    }
  706|       |    else
  707|       |#endif
  708|     56|    {
  709|     56|#if !SCN_DISABLE_STRTOD
  710|     56|        return strtod_impl<CharT, T>{data}(value);
  711|       |#else
  712|       |        return detail::unexpected_scan_error(
  713|       |            scan_error::invalid_scanned_value,
  714|       |            "fast_float failed, and fallbacks are disabled");
  715|       |#endif
  716|     56|    }
  717|     56|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwdEC2ENS2_14impl_init_dataIwEE:
  551|     56|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  552|     56|    {
  553|     56|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwdEclERd:
  556|     56|    {
  557|     56|        return this->parse(value, this->get_null_terminated_source(m_input),
  558|     56|                           generic_strtod);
  559|     56|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIwPFdPKwPPwEEENS0_13scan_expectedIlEERdPKT_T0_:
  388|     56|    {
  389|     56|        CharT* end{};
  390|     56|        errno = 0;
  391|     56|        value = strtod_cb(src, &end);
  392|     56|        const auto saved_errno = errno;
  393|     56|        auto chars_read = end - src;
  394|       |
  395|     56|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3929|     56|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|     56|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 56]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
  396|       |
  397|     56|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (397:13): [True: 56, False: 0]
  ------------------
  398|     56|            chars_read >= 2) {
  ------------------
  |  Branch (398:13): [True: 56, False: 0]
  ------------------
  399|     56|            chars_read -= 2;
  400|     56|        }
  401|       |
  402|     56|        return chars_read;
  403|     56|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  408|     56|    {
  409|     56|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (409:13): [True: 50, False: 6]
  ------------------
  410|       |            // TODO: call float_reader::read_source?
  411|     50|            auto first_space = read_until_classic_space(input.view());
  412|     50|            input.assign(
  413|     50|                std::basic_string<CharT>{input.view().begin(), first_space});
  414|     50|        }
  415|       |
  416|     56|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (416:13): [True: 56, False: 0]
  ------------------
  417|       |            if constexpr (std::is_same_v<CharT, char>) {
  418|       |                input.get_allocated_string().insert(0, "0x");
  419|       |            }
  420|     56|            else {
  421|     56|                input.get_allocated_string().insert(0, L"0x");
  422|     56|            }
  423|     56|        }
  424|       |
  425|     56|        return input.get_allocated_string().c_str();
  426|     56|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwdE14generic_strtodEPKwPPw:
  563|     56|    {
  564|       |        if constexpr (std::is_same_v<CharT, char>) {
  565|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  566|       |        }
  567|     56|        else {
  568|     56|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  569|     56|        }
  570|     56|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE19generic_wide_strtodEPKwPPw:
  509|     56|    {
  510|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  511|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  512|       |        if constexpr (std::is_same_v<T, float>) {
  513|       |            return ::wcstof_l(str, str_end, cloc);
  514|       |        }
  515|       |        else if constexpr (std::is_same_v<T, double>) {
  516|       |            return ::wcstod_l(str, str_end, cloc);
  517|       |        }
  518|       |        else if constexpr (std::is_same_v<T, long double>) {
  519|       |            return ::wcstold_l(str, str_end, cloc);
  520|       |        }
  521|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  522|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  523|       |        if constexpr (std::is_same_v<T, float>) {
  524|       |            return ::_wcstof_l(str, str_end, cloc);
  525|       |        }
  526|       |        else if constexpr (std::is_same_v<T, double>) {
  527|       |            return ::_wcstod_l(str, str_end, cloc);
  528|       |        }
  529|       |        else if constexpr (std::is_same_v<T, long double>) {
  530|       |            return ::_wcstold_l(str, str_end, cloc);
  531|       |        }
  532|       |#else
  533|     56|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  534|       |        if constexpr (std::is_same_v<T, float>) {
  535|       |            return std::wcstof(str, str_end);
  536|       |        }
  537|     56|        else if constexpr (std::is_same_v<T, double>) {
  538|     56|            return std::wcstod(str, str_end);
  539|       |        }
  540|       |        else if constexpr (std::is_same_v<T, long double>) {
  541|       |            return std::wcstold(str, str_end);
  542|       |        }
  543|     56|#endif
  544|     56|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_115fast_float_implIwdE8get_viewEv:
  775|     44|    {
  776|       |        if constexpr (sizeof(CharT) == 1) {
  777|       |            return m_input.view();
  778|       |        }
  779|       |        else if constexpr (sizeof(CharT) == 2) {
  780|       |            return std::u16string_view{
  781|       |                reinterpret_cast<const char16_t*>(m_input.view().data()),
  782|       |                m_input.view().size()};
  783|       |        }
  784|     44|        else {
  785|     44|            return std::u32string_view{
  786|     44|                reinterpret_cast<const char32_t*>(m_input.view().data()),
  787|     44|                m_input.view().size()};
  788|     44|        }
  789|     44|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1593|  59.9k|{
 1594|  59.9k|    if (format.size() != 2) {
  ------------------
  |  Branch (1594:9): [True: 59.5k, False: 378]
  ------------------
 1595|  59.5k|        return false;
 1596|  59.5k|    }
 1597|    378|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1597:12): [True: 126, False: 252]
  |  Branch (1597:39): [True: 18, False: 108]
  ------------------
 1598|  59.9k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSL_10locale_refEm:
 1869|  59.8k|        : format_handler_base{argcount},
 1870|  59.8k|          parse_ctx{source_tag<Source&&>, format},
 1871|  59.8k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1057|  59.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1055|  59.8k|    static_cast<    \
  |  | 1056|  59.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1055|  59.8k|    static_cast<    \
  |  | 1056|  59.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1872|  59.8k|    {
 1873|  59.8k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_baseC2Em:
 1687|   179k|    format_handler_base(size_t argcount) : args_count(argcount)
 1688|   179k|    {
 1689|   179k|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  986|   179k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 179k]
  |  |  ------------------
  ------------------
 1690|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1691|      0|        }
 1692|   179k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSD_10locale_refE:
 1820|  59.8k|        : contiguous_ctx(source, args, loc)
 1821|  59.8k|    {
 1822|  59.8k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2010|  59.8k|{
 2011|  59.8k|    const auto beg = handler.get_ctx().begin();
 2012|  59.8k|    detail::parse_format_string<false>(format, handler);
 2013|  59.8k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  986|  59.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 57.2k, False: 2.60k]
  |  |  ------------------
  ------------------
 2014|  57.2k|        return unexpected(err.error());
 2015|  57.2k|    }
 2016|  2.60k|    return ranges::distance(beg, handler.get_ctx().begin());
 2017|  59.8k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 1994|   431k|    {
 1995|   431k|        return ctx.get();
 1996|   431k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1825|   431k|    {
 1826|   431k|        return contiguous_ctx;
 1827|   431k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1876|  79.9k|    {
 1877|   148k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1877:16): [True: 73.3k, False: 75.4k]
  ------------------
 1878|  73.3k|            auto it = get_ctx().begin();
 1879|  73.3k|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1879:17): [True: 1.14k, False: 72.1k]
  ------------------
 1880|  1.14k|                SCN_UNLIKELY_ATTR
 1881|  1.14k|                return on_error(
 1882|  1.14k|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1883|  1.14k|            }
 1884|       |
 1885|  72.1k|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1886|  72.1k|                    detail::make_string_view_from_pointers(begin, end));
 1887|  72.1k|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1887:17): [True: 2.23k, False: 69.9k]
  ------------------
 1888|  2.23k|                SCN_UNLIKELY_ATTR
 1889|  2.23k|                return on_error({scan_error::invalid_format_string,
 1890|  2.23k|                                 "Invalid encoding in format string"});
 1891|  2.23k|            }
 1892|  69.9k|            else if (is_space) {
  ------------------
  |  Branch (1892:22): [True: 8.27k, False: 61.6k]
  ------------------
 1893|       |                // Skip all whitespace in input
 1894|  8.27k|                get_ctx().advance_to(
 1895|  8.27k|                    impl::read_while_classic_space(get_ctx().range()));
 1896|       |                // And, skip all whitespace in the format string
 1897|  8.27k|                auto begin_it = impl::read_while_classic_space(
 1898|  8.27k|                    detail::make_string_view_from_pointers(
 1899|  8.27k|                        detail::to_address(after_space_it),
 1900|  8.27k|                        detail::to_address(end)));
 1901|       |                // (-1 because of the for loop ++begin)
 1902|  8.27k|                begin = detail::to_address(begin_it) - 1;
 1903|  8.27k|                continue;
 1904|  8.27k|            }
 1905|       |
 1906|  61.6k|            if (*it != *begin) {
  ------------------
  |  Branch (1906:17): [True: 1.11k, False: 60.5k]
  ------------------
 1907|  1.11k|                SCN_UNLIKELY_ATTR
 1908|  1.11k|                return on_error({scan_error::invalid_literal,
 1909|  1.11k|                                 "Unexpected literal character in source"});
 1910|  1.11k|            }
 1911|  60.5k|            get_ctx().advance_to(ranges::next(it));
 1912|  60.5k|        }
 1913|  79.9k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1736|   221k|    {
 1737|   221k|        error = unexpected(err);
 1738|   221k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE20on_replacement_fieldEmPKc:
 1943|  5.93k|    {
 1944|  5.93k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1945|  5.93k|        set_arg_as_visited(arg_id);
 1946|       |
 1947|  5.93k|        on_visit_scan_arg(
 1948|  5.93k|            impl::default_arg_reader<context_type>{
 1949|  5.93k|                get_ctx().range(), get_ctx().args(), get_ctx().locale()},
 1950|  5.93k|            arg);
 1951|  5.93k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEmNS1_14format_handlerILb1EcEEEEDaRT_T0_RT1_:
 1648|  36.4k|{
 1649|  36.4k|    auto arg = ctx.arg(id);
 1650|  36.4k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  986|  36.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.52k, False: 34.9k]
  |  |  ------------------
  ------------------
 1651|  1.52k|        handler.on_error("Failed to find argument with ID");
 1652|  1.52k|    }
 1653|  36.4k|    return arg;
 1654|  36.4k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1762|   116k|    {
 1763|   116k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  986|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 2.81k, False: 114k]
  |  |  ------------------
  ------------------
 1764|  2.81k|            on_error({scan_error::invalid_format_string,
 1765|  2.81k|                      "Argument ID out-of-range"});
 1766|  2.81k|            return;
 1767|  2.81k|        }
 1768|       |
 1769|   114k|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  986|   114k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 246, False: 113k]
  |  |  ------------------
  ------------------
 1770|    246|            on_error({scan_error::invalid_format_string,
 1771|    246|                      "Argument with this ID has already been scanned"});
 1772|    246|        }
 1773|       |
 1774|   114k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  985|   114k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 114k, False: 0]
  |  |  ------------------
  ------------------
 1775|   114k|            visited_args_lower64 |= (1ull << id);
 1776|   114k|            return;
 1777|   114k|        }
 1778|       |
 1779|      0|        id -= 64;
 1780|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1781|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1746|   114k|    {
 1747|   114k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  986|   114k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 114k]
  |  |  ------------------
  ------------------
 1748|      0|            on_error({scan_error::invalid_format_string,
 1749|      0|                      "Argument ID out-of-range"});
 1750|      0|            return false;
 1751|      0|        }
 1752|       |
 1753|   114k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  985|   114k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 114k, False: 0]
  |  |  ------------------
  ------------------
 1754|   114k|            return (visited_args_lower64 >> id) & 1ull;
 1755|   114k|        }
 1756|       |
 1757|      0|        id -= 64;
 1758|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1759|   114k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEcEEEE:
 1927|  5.93k|    {
 1928|  5.93k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1928:13): [True: 268, False: 5.67k]
  |  Branch (1928:13): [True: 268, False: 5.67k]
  |  Branch (1928:29): [True: 0, False: 5.67k]
  ------------------
 1929|    268|            SCN_UNLIKELY_ATTR
 1930|    268|            return;
 1931|    268|        }
 1932|       |
 1933|  5.67k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1057|  5.67k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1934|  5.67k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  986|  5.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.93k, False: 1.73k]
  |  |  ------------------
  ------------------
 1935|  3.93k|            on_error(r.error());
 1936|  3.93k|        }
 1937|  1.73k|        else {
 1938|  1.73k|            get_ctx().advance_to(*r);
 1939|  1.73k|        }
 1940|  5.67k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1916|  35.8k|    {
 1917|  35.8k|        return parse_ctx.next_arg_id();
 1918|  35.8k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEm:
 1920|    646|    {
 1921|    646|        parse_ctx.check_arg_id(id);
 1922|    646|        return id;
 1923|    646|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1956|  30.5k|    {
 1957|  30.5k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1958|  30.5k|        set_arg_as_visited(arg_id);
 1959|       |
 1960|  30.5k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1960:13): [True: 0, False: 30.5k]
  ------------------
 1961|      0|            parse_ctx.advance_to(begin);
 1962|      0|            on_visit_scan_arg(
 1963|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1964|      0|                    parse_ctx, get_custom_ctx()},
 1965|      0|                arg);
 1966|      0|            return parse_ctx.begin();
 1967|      0|        }
 1968|       |
 1969|  30.5k|        auto specs = detail::format_specs{};
 1970|  30.5k|        detail::specs_checker<specs_handler<context_type>> handler{
 1971|  30.5k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1972|  30.5k|            detail::get_arg_type(arg)};
 1973|       |
 1974|  30.5k|        begin = detail::parse_format_specs(begin, end, handler);
 1975|  30.5k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1975:13): [True: 2.41k, False: 28.1k]
  |  Branch (1975:29): [True: 818, False: 27.2k]
  ------------------
 1976|  3.23k|            SCN_UNLIKELY_ATTR
 1977|  3.23k|            on_error({scan_error::invalid_format_string,
 1978|  3.23k|                      "Missing '}' in format string"});
 1979|  3.23k|            return parse_ctx.begin();
 1980|  3.23k|        }
 1981|  27.2k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  986|  27.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 284, False: 27.0k]
  |  |  ------------------
  ------------------
 1982|    284|            return parse_ctx.begin();
 1983|    284|        }
 1984|  27.0k|        parse_ctx.advance_to(begin);
 1985|       |
 1986|  27.0k|        on_visit_scan_arg(
 1987|  27.0k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1988|  27.0k|                                           get_ctx().locale()},
 1989|  27.0k|            arg);
 1990|  27.0k|        return parse_ctx.begin();
 1991|  27.2k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERSB_:
 1666|  30.5k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1667|  30.5k|    {
 1668|  30.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEcEEEE:
 1927|  27.0k|    {
 1928|  27.0k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1928:13): [True: 160, False: 26.8k]
  |  Branch (1928:13): [True: 160, False: 26.8k]
  |  Branch (1928:29): [True: 0, False: 26.8k]
  ------------------
 1929|    160|            SCN_UNLIKELY_ATTR
 1930|    160|            return;
 1931|    160|        }
 1932|       |
 1933|  26.8k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1057|  26.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1934|  26.8k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  986|  26.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 21.8k, False: 4.95k]
  |  |  ------------------
  ------------------
 1935|  21.8k|            on_error(r.error());
 1936|  21.8k|        }
 1937|  4.95k|        else {
 1938|  4.95k|            get_ctx().advance_to(*r);
 1939|  4.95k|        }
 1940|  26.8k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorEPKc:
 1730|   107k|    {
 1731|   107k|        SCN_UNLIKELY_ATTR
 1732|   107k|        error = detail::unexpected_scan_error(scan_error::invalid_format_string,
 1733|   107k|                                              msg);
 1734|   107k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1695|   179k|    {
 1696|   179k|        {
 1697|   179k|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1697:45): [True: 0, False: 179k]
  ------------------
 1698|   179k|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1698:35): [True: 0, False: 179k]
  ------------------
 1699|   179k|                                      ? std::numeric_limits<uint64_t>::max()
 1700|   179k|                                      : (1ull << args_count_lower64) - 1;
 1701|       |
 1702|   179k|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1702:17): [True: 65.7k, False: 113k]
  ------------------
 1703|  65.7k|                return on_error({scan_error::invalid_format_string,
 1704|  65.7k|                                 "Argument list not exhausted"});
 1705|  65.7k|            }
 1706|   179k|        }
 1707|       |
 1708|   113k|        if (args_count < 64) {
  ------------------
  |  Branch (1708:13): [True: 113k, False: 0]
  ------------------
 1709|   113k|            return;
 1710|   113k|        }
 1711|       |
 1712|      0|        auto last_args_count = args_count - 64;
 1713|      0|        for (auto it = visited_args_upper.begin();
 1714|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1714:14): [True: 0, False: 0]
  ------------------
 1715|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1715:17): [True: 0, False: 0]
  ------------------
 1716|      0|                return on_error({scan_error::invalid_format_string,
 1717|      0|                                 "Argument list not exhausted"});
 1718|      0|            }
 1719|      0|            last_args_count -= 8;
 1720|      0|        }
 1721|       |
 1722|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1723|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1723:13): [True: 0, False: 0]
  ------------------
 1724|      0|            return on_error({scan_error::invalid_format_string,
 1725|      0|                             "Argument list not exhausted"});
 1726|      0|        }
 1727|      0|    }
impl.cpp:_ZNK3scn2v412_GLOBAL__N_119format_handler_base9get_errorEv:
 1741|   652k|    {
 1742|   652k|        return error;
 1743|   652k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 2025|  59.9k|{
 2026|  59.9k|    const auto argcount = args.size();
 2027|  59.9k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2027:9): [True: 18, False: 59.8k]
  |  Branch (2027:60): [True: 18, False: 0]
  ------------------
 2028|     18|        auto arg = args.get(0);
 2029|     18|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  | 1055|     18|    static_cast<    \
  |  | 1056|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2030|     18|    }
 2031|       |
 2032|  59.8k|    auto handler = format_handler<true, CharT>{
 2033|  59.8k|        ranges::subrange<const CharT*>{source.data(),
 2034|  59.8k|                                       source.data() + source.size()},
 2035|  59.8k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1055|  59.8k|    static_cast<    \
  |  | 1056|  59.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1055|  59.8k|    static_cast<    \
  |  | 1056|  59.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2036|  59.8k|    return vscan_parse_format_string(format, handler);
 2037|  59.9k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 1606|     18|{
 1607|     18|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  986|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 1608|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1609|      0|                                             "Argument #0 not found");
 1610|      0|    }
 1611|       |
 1612|     18|    auto reader =
 1613|     18|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1614|     18|            ranges::subrange<const CharT*>{source.data(),
 1615|     18|                                           source.data() + source.size()},
 1616|     18|            SCN_MOVE(args), loc};
  ------------------
  |  | 1055|     18|    static_cast<    \
  |  | 1056|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1617|     18|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3939|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 10, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     10|    }                                                  \
  |  |  |  | 3938|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1618|      8|    return ranges::distance(source.data(), it);
 1619|     18|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 2025|   119k|{
 2026|   119k|    const auto argcount = args.size();
 2027|   119k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2027:9): [True: 18, False: 119k]
  |  Branch (2027:60): [True: 18, False: 0]
  ------------------
 2028|     18|        auto arg = args.get(0);
 2029|     18|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  | 1055|     18|    static_cast<    \
  |  | 1056|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2030|     18|    }
 2031|       |
 2032|   119k|    auto handler = format_handler<true, CharT>{
 2033|   119k|        ranges::subrange<const CharT*>{source.data(),
 2034|   119k|                                       source.data() + source.size()},
 2035|   119k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1055|   119k|    static_cast<    \
  |  | 1056|   119k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1055|   119k|    static_cast<    \
  |  | 1056|   119k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2036|   119k|    return vscan_parse_format_string(format, handler);
 2037|   119k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1593|   119k|{
 1594|   119k|    if (format.size() != 2) {
  ------------------
  |  Branch (1594:9): [True: 113k, False: 6.40k]
  ------------------
 1595|   113k|        return false;
 1596|   113k|    }
 1597|  6.40k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1597:12): [True: 126, False: 6.28k]
  |  Branch (1597:39): [True: 18, False: 108]
  ------------------
 1598|   119k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 1606|     18|{
 1607|     18|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  986|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 1608|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1609|      0|                                             "Argument #0 not found");
 1610|      0|    }
 1611|       |
 1612|     18|    auto reader =
 1613|     18|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1614|     18|            ranges::subrange<const CharT*>{source.data(),
 1615|     18|                                           source.data() + source.size()},
 1616|     18|            SCN_MOVE(args), loc};
  ------------------
  |  | 1055|     18|    static_cast<    \
  |  | 1056|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1617|     18|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3939|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 10, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     10|    }                                                  \
  |  |  |  | 3938|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1618|      8|    return ranges::distance(source.data(), it);
 1619|     18|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSL_10locale_refEm:
 1869|   119k|        : format_handler_base{argcount},
 1870|   119k|          parse_ctx{source_tag<Source&&>, format},
 1871|   119k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1057|   119k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1055|   119k|    static_cast<    \
  |  | 1056|   119k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1055|   119k|    static_cast<    \
  |  | 1056|   119k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1872|   119k|    {
 1873|   119k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSD_10locale_refE:
 1820|   119k|        : contiguous_ctx(source, args, loc)
 1821|   119k|    {
 1822|   119k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2010|   119k|{
 2011|   119k|    const auto beg = handler.get_ctx().begin();
 2012|   119k|    detail::parse_format_string<false>(format, handler);
 2013|   119k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  986|   119k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 117k, False: 2.11k]
  |  |  ------------------
  ------------------
 2014|   117k|        return unexpected(err.error());
 2015|   117k|    }
 2016|  2.11k|    return ranges::distance(beg, handler.get_ctx().begin());
 2017|   119k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 1994|   738M|    {
 1995|   738M|        return ctx.get();
 1996|   738M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1825|   738M|    {
 1826|   738M|        return contiguous_ctx;
 1827|   738M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1876|   175k|    {
 1877|   246M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1877:16): [True: 245M, False: 104k]
  ------------------
 1878|   245M|            auto it = get_ctx().begin();
 1879|   245M|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1879:17): [True: 624, False: 245M]
  ------------------
 1880|    624|                SCN_UNLIKELY_ATTR
 1881|    624|                return on_error(
 1882|    624|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1883|    624|            }
 1884|       |
 1885|   245M|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1886|   245M|                    detail::make_string_view_from_pointers(begin, end));
 1887|   245M|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1887:17): [True: 41.7k, False: 245M]
  ------------------
 1888|  41.7k|                SCN_UNLIKELY_ATTR
 1889|  41.7k|                return on_error({scan_error::invalid_format_string,
 1890|  41.7k|                                 "Invalid encoding in format string"});
 1891|  41.7k|            }
 1892|   245M|            else if (is_space) {
  ------------------
  |  Branch (1892:22): [True: 128k, False: 245M]
  ------------------
 1893|       |                // Skip all whitespace in input
 1894|   128k|                get_ctx().advance_to(
 1895|   128k|                    impl::read_while_classic_space(get_ctx().range()));
 1896|       |                // And, skip all whitespace in the format string
 1897|   128k|                auto begin_it = impl::read_while_classic_space(
 1898|   128k|                    detail::make_string_view_from_pointers(
 1899|   128k|                        detail::to_address(after_space_it),
 1900|   128k|                        detail::to_address(end)));
 1901|       |                // (-1 because of the for loop ++begin)
 1902|   128k|                begin = detail::to_address(begin_it) - 1;
 1903|   128k|                continue;
 1904|   128k|            }
 1905|       |
 1906|   245M|            if (*it != *begin) {
  ------------------
  |  Branch (1906:17): [True: 28.2k, False: 245M]
  ------------------
 1907|  28.2k|                SCN_UNLIKELY_ATTR
 1908|  28.2k|                return on_error({scan_error::invalid_literal,
 1909|  28.2k|                                 "Unexpected literal character in source"});
 1910|  28.2k|            }
 1911|   245M|            get_ctx().advance_to(ranges::next(it));
 1912|   245M|        }
 1913|   175k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE20on_replacement_fieldEmPKw:
 1943|  64.8k|    {
 1944|  64.8k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1945|  64.8k|        set_arg_as_visited(arg_id);
 1946|       |
 1947|  64.8k|        on_visit_scan_arg(
 1948|  64.8k|            impl::default_arg_reader<context_type>{
 1949|  64.8k|                get_ctx().range(), get_ctx().args(), get_ctx().locale()},
 1950|  64.8k|            arg);
 1951|  64.8k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEmNS1_14format_handlerILb1EwEEEEDaRT_T0_RT1_:
 1648|  80.4k|{
 1649|  80.4k|    auto arg = ctx.arg(id);
 1650|  80.4k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  986|  80.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.28k, False: 79.2k]
  |  |  ------------------
  ------------------
 1651|  1.28k|        handler.on_error("Failed to find argument with ID");
 1652|  1.28k|    }
 1653|  80.4k|    return arg;
 1654|  80.4k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEwEEEE:
 1927|  64.8k|    {
 1928|  64.8k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1928:13): [True: 224, False: 64.6k]
  |  Branch (1928:13): [True: 224, False: 64.6k]
  |  Branch (1928:29): [True: 0, False: 64.6k]
  ------------------
 1929|    224|            SCN_UNLIKELY_ATTR
 1930|    224|            return;
 1931|    224|        }
 1932|       |
 1933|  64.6k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1057|  64.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1934|  64.6k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  986|  64.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 36.6k, False: 28.0k]
  |  |  ------------------
  ------------------
 1935|  36.6k|            on_error(r.error());
 1936|  36.6k|        }
 1937|  28.0k|        else {
 1938|  28.0k|            get_ctx().advance_to(*r);
 1939|  28.0k|        }
 1940|  64.6k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1916|  78.8k|    {
 1917|  78.8k|        return parse_ctx.next_arg_id();
 1918|  78.8k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEm:
 1920|  1.66k|    {
 1921|  1.66k|        parse_ctx.check_arg_id(id);
 1922|  1.66k|        return id;
 1923|  1.66k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1956|  15.5k|    {
 1957|  15.5k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1958|  15.5k|        set_arg_as_visited(arg_id);
 1959|       |
 1960|  15.5k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1960:13): [True: 0, False: 15.5k]
  ------------------
 1961|      0|            parse_ctx.advance_to(begin);
 1962|      0|            on_visit_scan_arg(
 1963|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1964|      0|                    parse_ctx, get_custom_ctx()},
 1965|      0|                arg);
 1966|      0|            return parse_ctx.begin();
 1967|      0|        }
 1968|       |
 1969|  15.5k|        auto specs = detail::format_specs{};
 1970|  15.5k|        detail::specs_checker<specs_handler<context_type>> handler{
 1971|  15.5k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1972|  15.5k|            detail::get_arg_type(arg)};
 1973|       |
 1974|  15.5k|        begin = detail::parse_format_specs(begin, end, handler);
 1975|  15.5k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1975:13): [True: 2.00k, False: 13.5k]
  |  Branch (1975:29): [True: 468, False: 13.1k]
  ------------------
 1976|  2.47k|            SCN_UNLIKELY_ATTR
 1977|  2.47k|            on_error({scan_error::invalid_format_string,
 1978|  2.47k|                      "Missing '}' in format string"});
 1979|  2.47k|            return parse_ctx.begin();
 1980|  2.47k|        }
 1981|  13.1k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  986|  13.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 374, False: 12.7k]
  |  |  ------------------
  ------------------
 1982|    374|            return parse_ctx.begin();
 1983|    374|        }
 1984|  12.7k|        parse_ctx.advance_to(begin);
 1985|       |
 1986|  12.7k|        on_visit_scan_arg(
 1987|  12.7k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1988|  12.7k|                                           get_ctx().locale()},
 1989|  12.7k|            arg);
 1990|  12.7k|        return parse_ctx.begin();
 1991|  13.1k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERSB_:
 1666|  15.5k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1667|  15.5k|    {
 1668|  15.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEwEEEE:
 1927|  12.7k|    {
 1928|  12.7k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1928:13): [True: 164, False: 12.5k]
  |  Branch (1928:13): [True: 164, False: 12.5k]
  |  Branch (1928:29): [True: 0, False: 12.5k]
  ------------------
 1929|    164|            SCN_UNLIKELY_ATTR
 1930|    164|            return;
 1931|    164|        }
 1932|       |
 1933|  12.5k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1057|  12.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1934|  12.5k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  986|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 9.39k, False: 3.17k]
  |  |  ------------------
  ------------------
 1935|  9.39k|            on_error(r.error());
 1936|  9.39k|        }
 1937|  3.17k|        else {
 1938|  3.17k|            get_ctx().advance_to(*r);
 1939|  3.17k|        }
 1940|  12.5k|    }

_ZN3scn2v44impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1461|  3.32k|{
 1462|  3.32k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1463|       |
 1464|  3.32k|    if constexpr (sizeof(SourceCharT) == 1) {
 1465|       |        if constexpr (sizeof(DestCharT) == 2) {
 1466|       |            std::u32string tmp;
 1467|       |            transcode_to_string_impl_to32(src, tmp);
 1468|       |            return transcode_to_string_impl_32to16<false>(
 1469|       |                std::u32string_view{tmp}, dest);
 1470|       |        }
 1471|  3.32k|        else if constexpr (sizeof(DestCharT) == 4) {
 1472|  3.32k|            return transcode_to_string_impl_to32(src, dest);
 1473|  3.32k|        }
 1474|       |    }
 1475|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1476|       |        if constexpr (sizeof(DestCharT) == 1) {
 1477|       |            std::u32string tmp;
 1478|       |            transcode_to_string_impl_to32(src, tmp);
 1479|       |            return transcode_to_string_impl_32to8<false>(
 1480|       |                std::u32string_view{tmp}, dest);
 1481|       |        }
 1482|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1483|       |            return trasncode_to_string_impl_to32(src, dest);
 1484|       |        }
 1485|       |    }
 1486|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1487|       |        if constexpr (sizeof(DestCharT) == 1) {
 1488|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1489|       |        }
 1490|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1491|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1492|       |        }
 1493|       |    }
 1494|       |
 1495|  3.32k|    SCN_EXPECT(false);
  ------------------
  |  | 1051|  3.32k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  3.32k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1496|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1497|  3.32k|}
_ZN3scn2v44impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1354|  3.32k|{
 1355|  3.32k|    static_assert(sizeof(DestCharT) == 4);
 1356|       |
 1357|  3.32k|    auto it = src.begin();
 1358|   236k|    while (it != src.end()) {
  ------------------
  |  Branch (1358:12): [True: 233k, False: 3.32k]
  ------------------
 1359|   233k|        auto res = get_next_code_point(
 1360|   233k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1361|   233k|                                                                 src.end()));
 1362|   233k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  986|   233k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 4.47k, False: 228k]
  |  |  ------------------
  ------------------
 1363|  4.47k|            dest.push_back(DestCharT{0xfffd});
 1364|  4.47k|        }
 1365|   228k|        else {
 1366|   228k|            dest.push_back(res.value);
 1367|   228k|        }
 1368|   233k|        it = detail::make_string_view_iterator(src, res.iterator);
 1369|   233k|    }
 1370|  3.32k|}
_ZN3scn2v44impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1278|   396k|{
 1279|   396k|    SCN_EXPECT(!input.empty());
  ------------------
  |  | 1051|   396k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   396k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1280|       |
 1281|   396k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1282|   396k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  986|   396k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 6.88k, False: 389k]
  |  |  ------------------
  ------------------
 1283|  6.88k|        return {get_start_for_next_code_point(input),
 1284|  6.88k|                detail::invalid_code_point};
 1285|  6.88k|    }
 1286|   389k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  986|   389k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 999, False: 388k]
  |  |  ------------------
  ------------------
 1287|    999|        return {input.end(), detail::invalid_code_point};
 1288|    999|    }
 1289|       |
 1290|   388k|    return {input.begin() + len,
 1291|   388k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1292|   389k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1264|  6.88k|{
 1265|  6.88k|    auto it = input.begin();
 1266|  24.3k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 22.9k, False: 1.43k]
  ------------------
 1267|  22.9k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 5.44k, False: 17.4k]
  ------------------
 1268|  5.44k|            break;
 1269|  5.44k|        }
 1270|  22.9k|    }
 1271|  6.88k|    return it;
 1272|  6.88k|}
_ZN3scn2v44impl11parse_errorC2ENS2_4codeE:
  807|   185k|    constexpr parse_error(code c) : m_code(c)
  808|   185k|    {
  809|   185k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  | 1036|   185k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|   185k|    }
_ZN3scn2v44impleqENS1_11parse_errorES2_:
  822|  71.6k|    {
  823|  71.6k|        return a.m_code == b.m_code;
  824|  71.6k|    }
_ZN3scn2v44implneENS1_11parse_errorES2_:
  826|  11.6k|    {
  827|  11.6k|        return !(a == b);
  828|  11.6k|    }
_ZN3scn2v44impl16clocale_restorerC2Ei:
 1825|     56|    clocale_restorer(int cat) : m_category(cat)
 1826|     56|    {
 1827|     56|        const auto loc = std::setlocale(cat, nullptr);
 1828|     56|        std::strcpy(m_locbuf, loc);
 1829|     56|    }
_ZN3scn2v44impl16clocale_restorerD2Ev:
 1831|     56|    {
 1832|       |        // Restore locale to what it was before
 1833|     56|        std::setlocale(m_category, m_locbuf);
 1834|     56|    }
_ZN3scn2v44impl25set_clocale_classic_guardC2Ei:
 1854|     56|    set_clocale_classic_guard(int cat) : m_restorer(cat)
 1855|     56|    {
 1856|     56|        std::setlocale(cat, "C");
 1857|     56|    }
_ZN3scn2v44impl20reader_error_handler8on_errorEPKc:
 3045|  18.7k|    {
 3046|  18.7k|        SCN_UNLIKELY_ATTR
 3047|  18.7k|        m_msg = msg;
 3048|  18.7k|    }
_ZNK3scn2v44impl20reader_error_handlercvbEv:
 3050|  39.4k|    {
 3051|  39.4k|        return m_msg == nullptr;
 3052|  39.4k|    }
_ZN3scn2v44impl17float_reader_baseC2Ej:
 3686|  1.42k|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v44impl22nonascii_specs_handler17on_charset_singleEDi:
 5030|   713k|    {
 5031|   713k|        on_charset_range(cp, cp + 1);
 5032|   713k|    }
_ZN3scn2v44impl22nonascii_specs_handler16on_charset_rangeEDiDi:
 5035|   717k|    {
 5036|   717k|        if (end <= 127) {
  ------------------
  |  Branch (5036:13): [True: 385k, False: 332k]
  ------------------
 5037|   385k|            return;
 5038|   385k|        }
 5039|       |
 5040|  66.4M|        for (auto& elem : extra_ranges) {
  ------------------
  |  Branch (5040:25): [True: 66.4M, False: 327k]
  ------------------
 5041|       |            // TODO: check for overlap
 5042|  66.4M|            if (elem.first == end) {
  ------------------
  |  Branch (5042:17): [True: 774, False: 66.4M]
  ------------------
 5043|    774|                elem.first = begin;
 5044|    774|                return;
 5045|    774|            }
 5046|       |
 5047|  66.4M|            if (elem.second == begin) {
  ------------------
  |  Branch (5047:17): [True: 4.19k, False: 66.4M]
  ------------------
 5048|  4.19k|                elem.second = end;
 5049|  4.19k|                return;
 5050|  4.19k|            }
 5051|  66.4M|        }
 5052|       |
 5053|   327k|        extra_ranges.push_back(std::make_pair(begin, end));
 5054|   327k|    }
_ZNK3scn2v44impl22nonascii_specs_handler19on_charset_invertedEv:
 5057|  1.02k|    {
 5058|       |        // no-op
 5059|  1.02k|    }
_ZNK3scn2v44impl22nonascii_specs_handler9get_errorEv:
 5072|   727k|    {
 5073|   727k|        return err;
 5074|   727k|    }
_ZN3scn2v44impl16bool_reader_baseC2Ej:
 5386|  1.74k|    constexpr bool_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v44impl14is_ascii_spaceEc:
  457|  38.6k|{
  458|  38.6k|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  38.6k|        static_cast<unsigned char>(ch))];
  460|  38.6k|}
_ZN3scn2v44impl13is_ascii_charEc:
  468|   504k|{
  469|   504k|    return static_cast<unsigned char>(ch) <= 127;
  470|   504k|}
_ZN3scn2v44impl13is_ascii_charEw:
  473|  4.12k|{
  474|  4.12k|#if WCHAR_MIN < 0
  475|  4.12k|    return ch >= 0 && ch <= 127;
  ------------------
  |  Branch (475:12): [True: 4.09k, False: 30]
  |  Branch (475:23): [True: 3.94k, False: 150]
  ------------------
  476|       |#else
  477|       |    return ch <= 127;
  478|       |#endif
  479|  4.12k|}
_ZN3scn2v44impl13is_ascii_charEDi:
  482|   579k|{
  483|   579k|    return cp <= 127;
  484|   579k|}
_ZN3scn2v44impl16has_byte_greaterEmh:
  538|  33.9k|{
  539|  33.9k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  33.9k|}
_ZN3scn2v44implntENS1_9eof_errorE:
  783|   231k|{
  784|   231k|    return e != eof_error::good;
  785|   231k|}
_ZN3scn2v44impl19make_eof_scan_errorENS1_9eof_errorE:
  797|    354|{
  798|    354|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  | 1051|    354|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    354|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|    354|    return scan_error{scan_error::end_of_input, "EOF"};
  800|    354|}
_ZN3scn2v44impl20make_eof_parse_errorENS1_9eof_errorE:
  844|  1.10k|{
  845|  1.10k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  | 1051|  1.10k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.10k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|  1.10k|    return parse_error::eof;
  847|  1.10k|}
_ZN3scn2v44impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|  11.6k|{
  854|  11.6k|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 11.6k]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|  11.6k|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 144, False: 11.4k]
  ------------------
  859|    144|        return detail::unexpected_scan_error(scan_error::end_of_input, "EOF");
  860|    144|    }
  861|       |
  862|  11.4k|    return detail::unexpected_scan_error(code, msg);
  863|  11.6k|}
_ZN3scn2v44impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  11.6k|{
  868|  11.6k|    return [code, msg](parse_error err) {
  869|  11.6k|        assert(err != parse_error::good);
  870|  11.6k|        return make_scan_error_from_parse_error(err, code, msg).error();
  871|  11.6k|    };
  872|  11.6k|}
_ZN3scn2v44impl17fast_streq_nocaseEPKcS3_m:
 2319|  3.75k|{
 2320|  3.75k|    unsigned char running_diff{0};
 2321|  13.1k|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2321:24): [True: 9.36k, False: 3.75k]
  ------------------
 2322|  9.36k|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2323|  9.36k|    }
 2324|  3.75k|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2324:12): [True: 0, False: 3.75k]
  |  Branch (2324:33): [True: 0, False: 3.75k]
  ------------------
 2325|  3.75k|}
_ZN3scn2v44impl32calculate_text_width_for_fmt_v10EDi:
 2402|   179k|{
 2403|   179k|    if (cp >= 0x1100 &&
  ------------------
  |  Branch (2403:9): [True: 45.0k, False: 134k]
  ------------------
 2404|   179k|        (cp <= 0x115f ||  // Hangul Jamo init. consonants
  ------------------
  |  Branch (2404:10): [True: 224, False: 44.7k]
  ------------------
 2405|  45.0k|         cp == 0x2329 ||  // LEFT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (2405:10): [True: 108, False: 44.6k]
  ------------------
 2406|  45.0k|         cp == 0x232a ||  // RIGHT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (2406:10): [True: 72, False: 44.6k]
  ------------------
 2407|       |         // CJK ... Yi except IDEOGRAPHIC HALF FILL SPACE:
 2408|  45.0k|         (cp >= 0x2e80 && cp <= 0xa4cf && cp != 0x303f) ||
  ------------------
  |  Branch (2408:11): [True: 17.1k, False: 27.4k]
  |  Branch (2408:27): [True: 2.75k, False: 14.3k]
  |  Branch (2408:43): [True: 1.69k, False: 1.06k]
  ------------------
 2409|  45.0k|         (cp >= 0xac00 && cp <= 0xd7a3) ||    // Hangul Syllables
  ------------------
  |  Branch (2409:11): [True: 14.3k, False: 28.5k]
  |  Branch (2409:27): [True: 236, False: 14.1k]
  ------------------
 2410|  45.0k|         (cp >= 0xf900 && cp <= 0xfaff) ||    // CJK Compatibility Ideographs
  ------------------
  |  Branch (2410:11): [True: 14.0k, False: 28.6k]
  |  Branch (2410:27): [True: 240, False: 13.8k]
  ------------------
 2411|  45.0k|         (cp >= 0xfe10 && cp <= 0xfe19) ||    // Vertical Forms
  ------------------
  |  Branch (2411:11): [True: 13.8k, False: 28.6k]
  |  Branch (2411:27): [True: 462, False: 13.3k]
  ------------------
 2412|  45.0k|         (cp >= 0xfe30 && cp <= 0xfe6f) ||    // CJK Compatibility Forms
  ------------------
  |  Branch (2412:11): [True: 13.3k, False: 28.6k]
  |  Branch (2412:27): [True: 214, False: 13.1k]
  ------------------
 2413|  45.0k|         (cp >= 0xff00 && cp <= 0xff60) ||    // Fullwidth Forms
  ------------------
  |  Branch (2413:11): [True: 13.1k, False: 28.6k]
  |  Branch (2413:27): [True: 206, False: 12.9k]
  ------------------
 2414|  45.0k|         (cp >= 0xffe0 && cp <= 0xffe6) ||    // Fullwidth Forms
  ------------------
  |  Branch (2414:11): [True: 12.9k, False: 28.6k]
  |  Branch (2414:27): [True: 284, False: 12.6k]
  ------------------
 2415|  45.0k|         (cp >= 0x20000 && cp <= 0x2fffd) ||  // CJK
  ------------------
  |  Branch (2415:11): [True: 12.3k, False: 28.8k]
  |  Branch (2415:28): [True: 442, False: 11.9k]
  ------------------
 2416|  45.0k|         (cp >= 0x30000 && cp <= 0x3fffd) ||
  ------------------
  |  Branch (2416:11): [True: 11.9k, False: 28.8k]
  |  Branch (2416:28): [True: 292, False: 11.6k]
  ------------------
 2417|       |         // Miscellaneous Symbols and Pictographs + Emoticons:
 2418|  45.0k|         (cp >= 0x1f300 && cp <= 0x1f64f) ||
  ------------------
  |  Branch (2418:11): [True: 11.8k, False: 28.7k]
  |  Branch (2418:28): [True: 78, False: 11.7k]
  ------------------
 2419|       |         // Supplemental Symbols and Pictographs:
 2420|  45.0k|         (cp >= 0x1f900 && cp <= 0x1f9ff))) {
  ------------------
  |  Branch (2420:11): [True: 11.7k, False: 28.7k]
  |  Branch (2420:28): [True: 72, False: 11.6k]
  ------------------
 2421|  4.62k|        return 2;
 2422|  4.62k|    }
 2423|   174k|    return 1;
 2424|   179k|}
_ZN3scn2v44impl26calculate_valid_text_widthEDi:
 2427|   115k|{
 2428|   115k|    return calculate_text_width_for_fmt_v10(cp);
 2429|   115k|}
_ZN3scn2v44impl20calculate_text_widthEDi:
 2442|    250|{
 2443|    250|    return calculate_text_width_for_fmt_v10(cp);
 2444|    250|}
_ZN3scn2v44impl11char_to_intEc:
 3239|  64.5k|{
 3240|  64.5k|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3241|  64.5k|}
_ZN3scn2v44impl11char_to_intEw:
 3243|  55.4k|{
 3244|  55.4k|#if WCHAR_MIN < 0
 3245|  55.4k|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3245:9): [True: 55.4k, False: 0]
  |  Branch (3245:20): [True: 55.3k, False: 112]
  ------------------
 3246|       |#else
 3247|       |    if (ch <= 255) {
 3248|       |#endif
 3249|  55.3k|        return char_to_int(static_cast<char>(ch));
 3250|  55.3k|    }
 3251|    112|    return 255;
 3252|  55.4k|}
_ZN3scn2v44impl16make_regex_flagsENS0_6detail11regex_flagsE:
 4351|    432|{
 4352|    432|    RE2::Options opt{RE2::Quiet};
 4353|    432|    std::string_view stringflags{};
 4354|       |
 4355|    432|    if ((flags & detail::regex_flags::multiline) == detail::regex_flags::none) {
  ------------------
  |  Branch (4355:9): [True: 420, False: 12]
  ------------------
 4356|    420|        stringflags = "(?m)";
 4357|    420|    }
 4358|    432|    if ((flags & detail::regex_flags::singleline) !=
  ------------------
  |  Branch (4358:9): [True: 6, False: 426]
  ------------------
 4359|    432|        detail::regex_flags::none) {
 4360|      6|        opt.set_dot_nl(true);
 4361|      6|    }
 4362|    432|    if ((flags & detail::regex_flags::nocase) != detail::regex_flags::none) {
  ------------------
  |  Branch (4362:9): [True: 6, False: 426]
  ------------------
 4363|      6|        opt.set_case_sensitive(false);
 4364|      6|    }
 4365|    432|    if ((flags & detail::regex_flags::nocapture) != detail::regex_flags::none) {
  ------------------
  |  Branch (4365:9): [True: 6, False: 426]
  ------------------
 4366|      6|        opt.set_never_capture(true);
 4367|      6|    }
 4368|       |
 4369|    432|    return {opt, stringflags};
 4370|    432|}
_ZN3scn2v44impl27get_unescaped_regex_patternENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4680|  1.09k|{
 4681|  1.09k|    std::string result{pattern};
 4682|  8.36k|    for (size_t n = 0; (n = result.find("\\/", n)) != std::string::npos;) {
  ------------------
  |  Branch (4682:24): [True: 7.27k, False: 1.09k]
  ------------------
 4683|  7.27k|        result.replace(n, 2, "/");
 4684|  7.27k|        ++n;
 4685|  7.27k|    }
 4686|  1.09k|    return result;
 4687|  1.09k|}
_ZN3scn2v44impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6046|  9.06k|{
 6047|  9.06k|    if (specs.width != 0) {
  ------------------
  |  Branch (6047:9): [True: 2.22k, False: 6.84k]
  ------------------
 6048|  2.22k|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6048:13): [True: 934, False: 1.28k]
  ------------------
 6049|    934|            return detail::unexpected_scan_error(
 6050|    934|                scan_error::length_too_short,
 6051|    934|                "Scanned value too narrow, width did not exceed what "
 6052|    934|                "was specified in the format string");
 6053|    934|        }
 6054|  2.22k|    }
 6055|  8.13k|    if (specs.precision != 0) {
  ------------------
  |  Branch (6055:9): [True: 3.01k, False: 5.11k]
  ------------------
 6056|       |        // Ensured by take_width_view
 6057|  3.01k|        SCN_ENSURE(prefix_width + value_width + postfix_width <=
  ------------------
  |  | 1052|  3.01k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1048|  3.01k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6058|  3.01k|                   specs.precision);
 6059|  3.01k|    }
 6060|  8.13k|    return {};
 6061|  8.13k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  63.9k|    {
  304|  63.9k|        ranges::advance(x, n);
  305|  63.9k|        return x;
  306|  63.9k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  63.9k|    {
  268|  63.9k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  63.9k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|   157k|    {
  151|   157k|        i += n;
  152|   157k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  58.8k|    {
  108|  58.8k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  58.8k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  58.8k|    {
   87|  58.8k|        return s - i;
   88|  58.8k|    }
_ZNK3scn2v46ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  46.1k|    {
  304|  46.1k|        ranges::advance(x, n);
  305|  46.1k|        return x;
  306|  46.1k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  46.1k|    {
  268|  46.1k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  46.1k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  46.1k|    {
  151|  46.1k|        i += n;
  152|  46.1k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  2.53k|    {
  108|  2.53k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  2.53k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  2.53k|    {
   87|  2.53k|        return s - i;
   88|  2.53k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5beginEv:
 2992|   177k|    {
 2993|   177k|        return m_current;
 2994|   177k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5beginEv:
 2992|   246M|    {
 2993|   246M|        return m_current;
 2994|   246M|    }
_ZN3scn2v44impl16char_reader_baseIcE11check_specsERKNS0_6detail12format_specsE:
 5661|  2.96k|    {
 5662|  2.96k|        reader_error_handler eh{};
 5663|       |        if constexpr (std::is_same_v<ValueCharT, char32_t>) {
 5664|       |            detail::check_code_point_type_specs(specs, eh);
 5665|       |        }
 5666|  2.96k|        else {
 5667|  2.96k|            detail::check_char_type_specs(specs, eh);
 5668|  2.96k|        }
 5669|  2.96k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  986|  2.96k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 2.26k, False: 694]
  |  |  ------------------
  ------------------
 5670|  2.26k|            return detail::unexpected_scan_error(
 5671|  2.26k|                scan_error::invalid_format_string, eh.m_msg);
 5672|  2.26k|        }
 5673|    694|        return {};
 5674|  2.96k|    }
_ZNK3scn2v44impl12function_refIFbcES3_EclEc:
  762|  25.2k|    {
  763|  25.2k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1057|  25.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  25.2k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  2.82k|        : m_fptr([](storage fn,
  743|  2.82k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.82k|              cvref<T> obj = *get<T>(fn);
  745|  2.82k|              if constexpr (std::is_void_v<R>) {
  746|  2.82k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.82k|              }
  748|  2.82k|              else {
  749|  2.82k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.82k|              }
  751|  2.82k|          }),
  752|  2.82k|          m_storage(std::addressof(f))
  753|  2.82k|    {
  754|  2.82k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEcE_clESK_c:
  743|  7.27k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.27k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  7.27k|              else {
  749|  7.27k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.27k|              }
  751|  7.27k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  7.27k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  7.27k|        else if constexpr (std::is_object_v<T>) {
  688|  7.27k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  7.27k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  2.82k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.82k|        {
  662|  2.82k|        }
_ZNK3scn2v44impl12function_refIFbDiES3_EclEDi:
  762|  2.32M|    {
  763|  2.32M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1057|  2.32M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  2.32M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|   327k|        : m_fptr([](storage fn,
  743|   327k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   327k|              cvref<T> obj = *get<T>(fn);
  745|   327k|              if constexpr (std::is_void_v<R>) {
  746|   327k|                  obj(static_cast<decltype(args)>(args)...);
  747|   327k|              }
  748|   327k|              else {
  749|   327k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   327k|              }
  751|   327k|          }),
  752|   327k|          m_storage(std::addressof(f))
  753|   327k|    {
  754|   327k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|  1.02M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.02M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.02M|              else {
  749|  1.02M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.02M|              }
  751|  1.02M|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  1.02M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.02M|        else if constexpr (std::is_object_v<T>) {
  688|  1.02M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.02M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|   327k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   327k|        {
  662|   327k|        }
_ZNK3scn2v44impl16char_reader_baseIcE19skip_ws_before_readEv:
 5656|  1.95k|    {
 5657|  1.95k|        return false;
 5658|  1.95k|    }
_ZZN3scn2v44impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|  11.6k|    return [code, msg](parse_error err) {
  869|  11.6k|        assert(err != parse_error::good);
  870|  11.6k|        return make_scan_error_from_parse_error(err, code, msg).error();
  871|  11.6k|    };
_ZN3scn2v44impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1878|     66|    {
 1879|     66|        auto stdloc = loc.get<std::locale>();
 1880|     66|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1881|     66|        grouping = numpunct.grouping();
 1882|     66|        thousands_sep =
 1883|     66|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1883:13): [True: 0, False: 66]
  ------------------
 1884|     66|        decimal_point = numpunct.decimal_point();
 1885|     66|    }
_ZN3scn2v44impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1815|     94|{
 1816|     94|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1816:9): [True: 94, False: 0]
  ------------------
 1817|     94|        return std::use_facet<Facet>(stdloc);
 1818|     94|    }
 1819|      0|    stdloc = std::locale(stdloc, new Facet{});
 1820|      0|    return std::use_facet<Facet>(stdloc);
 1821|     94|}
_ZN3scn2v44impl20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2448|  42.4k|{
 2449|  42.4k|    size_t count{0};
 2450|  42.4k|    for_each_code_point(input, [&count](char32_t cp) {
 2451|  42.4k|        count += calculate_text_width_for_fmt_v10(cp);
 2452|  42.4k|    });
 2453|  42.4k|    return count;
 2454|  42.4k|}
_ZN3scn2v44impl19for_each_code_pointIcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_12function_refIFvDiESA_EE:
 1544|  42.4k|{
 1545|       |    // TODO: Could be optimized by being eager
 1546|  42.4k|    auto it = input.begin();
 1547|  95.6k|    while (it != input.end()) {
  ------------------
  |  Branch (1547:12): [True: 53.1k, False: 42.4k]
  ------------------
 1548|  53.1k|        auto res = get_next_code_point(
 1549|  53.1k|            detail::make_string_view_from_iterators<CharT>(it, input.end()));
 1550|  53.1k|        cb(res.value);
 1551|  53.1k|        it = detail::make_string_view_iterator(input, res.iterator);
 1552|  53.1k|    }
 1553|  42.4k|}
_ZNK3scn2v44impl12function_refIFvDiES3_EclEDi:
  762|  63.8k|    {
  763|  63.8k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1057|  63.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  63.8k|    }
_ZN3scn2v44impl12function_refIFvDiES3_EC2IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfIS9_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSF_EEvE4typeELPv0EEEOS9_:
  742|  42.4k|        : m_fptr([](storage fn,
  743|  42.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  42.4k|              cvref<T> obj = *get<T>(fn);
  745|  42.4k|              if constexpr (std::is_void_v<R>) {
  746|  42.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  42.4k|              }
  748|  42.4k|              else {
  749|  42.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  42.4k|              }
  751|  42.4k|          }),
  752|  42.4k|          m_storage(std::addressof(f))
  753|  42.4k|    {
  754|  42.4k|    }
_ZZN3scn2v44impl12function_refIFvDiES3_EC1IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfIS9_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSF_EEvE4typeELPv0EEEOS9_ENKUlNS1_12fnref_detail4base7storageEDiE_clESO_Di:
  743|  53.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  53.1k|              cvref<T> obj = *get<T>(fn);
  745|  53.1k|              if constexpr (std::is_void_v<R>) {
  746|  53.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|       |              else {
  749|       |                  return obj(static_cast<decltype(args)>(args)...);
  750|       |              }
  751|  53.1k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEUlDiE_EEDaNS3_7storageE:
  683|  53.1k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  53.1k|        else if constexpr (std::is_object_v<T>) {
  688|  53.1k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  53.1k|    }
_ZZN3scn2v44impl20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEENKUlDiE_clEDi:
 2450|  53.1k|    for_each_code_point(input, [&count](char32_t cp) {
 2451|  53.1k|        count += calculate_text_width_for_fmt_v10(cp);
 2452|  53.1k|    });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vIS9_EEvE4typeELPv0EEEPS9_:
  660|  42.4k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  42.4k|        {
  662|  42.4k|        }
_ZNK3scn2v44impl24contiguous_range_factoryIcE4viewEv:
 1680|  4.59k|    {
 1681|  4.59k|        return m_view;
 1682|  4.59k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcED2Ev:
 1670|  4.93k|    ~contiguous_range_factory() = default;
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E14multibyte_leftEv:
 2520|  31.3k|    {
 2521|  31.3k|        return m_multibyte_left;
 2522|  31.3k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E22is_current_double_wideEv:
 2525|  8.88k|    {
 2526|  8.88k|        assert(count() != 0 || multibyte_left() != 0);
 2527|  8.88k|        return _get_width_at_current_cp_start(
 2528|  8.88k|                   _get_cp_length_at_current()) == 2;
 2529|  8.88k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E30_get_width_at_current_cp_startEl:
 2753|  99.3k|    {
 2754|  99.3k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  986|  99.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.73k, False: 97.6k]
  |  |  ------------------
  ------------------
 2755|  1.73k|            return 0;
 2756|  1.73k|        }
 2757|       |
 2758|  97.6k|        if (cplen == 1) {
  ------------------
  |  Branch (2758:13): [True: 62.3k, False: 35.2k]
  ------------------
 2759|  62.3k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  | 1051|  62.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  62.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2760|  62.3k|            auto cp = static_cast<char32_t>(*m_current);
 2761|  62.3k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2762|  62.3k|        }
 2763|       |
 2764|  35.2k|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2765|  35.2k|                                           cplen);
 2766|  35.2k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  986|  35.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 422, False: 34.8k]
  |  |  ------------------
  ------------------
 2767|    422|            return 0;
 2768|    422|        }
 2769|       |
 2770|  34.8k|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2771|  34.8k|        return static_cast<difference_type>(
 2772|  34.8k|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2773|  35.2k|    }
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1955|  37.9k|{
 1956|  37.9k|    SCN_EXPECT(count >= 0);
  ------------------
  |  | 1051|  37.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  37.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|  37.9k|    if constexpr (ranges::sized_range<Range>) {
 1959|  37.9k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|  37.9k|        if (sz < count) {
  ------------------
  |  Branch (1960:13): [True: 530, False: 37.4k]
  ------------------
 1961|    530|            return unexpected(eof_error::eof);
 1962|    530|        }
 1963|       |
 1964|  37.4k|        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|       |    else {
 1967|       |        auto it = range.begin();
 1968|       |        if (guaranteed_minimum_size(range) >= count) {
 1969|       |            return ranges::next(it, count);
 1970|       |        }
 1971|       |
 1972|       |        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1973|       |            if (it == range.end()) {
 1974|       |                return unexpected(eof_error::eof);
 1975|       |            }
 1976|       |        }
 1977|       |
 1978|       |        return it;
 1979|       |    }
 1980|  37.9k|}
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E25_get_cp_length_at_currentEv:
 2747|  99.3k|    {
 2748|  99.3k|        return static_cast<difference_type>(
 2749|  99.3k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2750|  99.3k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EdeEv:
 2532|   165k|    {
 2533|   165k|        return *m_current;
 2534|   165k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EppEv:
 2541|   186k|    {
 2542|   186k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  | 1051|   186k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   186k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2543|   186k|        _increment_current();
 2544|   186k|        return *this;
 2545|   186k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E18_increment_currentEv:
 2776|   186k|    {
 2777|   186k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2777:13): [True: 90.4k, False: 96.1k]
  ------------------
 2778|  90.4k|            auto cplen = _get_cp_length_at_current();
 2779|  90.4k|            m_multibyte_left = cplen - 1;
 2780|  90.4k|            m_count -= _get_width_at_current_cp_start(cplen);
 2781|  90.4k|        }
 2782|  96.1k|        else {
 2783|  96.1k|            --m_multibyte_left;
 2784|  96.1k|        }
 2785|       |
 2786|   186k|        ++m_current;
 2787|   186k|    }
_ZN3scn2v44impl27counted_width_iterator_implneIPKcS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2637|   107k|    {
 2638|   107k|        return !(a == b);
 2639|   107k|    }
_ZN3scn2v44impl27counted_width_iterator_impleqIPKcS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2629|   120k|    {
 2630|   120k|        return a.m_current == b.m_current;
 2631|   120k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EdeEv:
 2536|  16.1k|    {
 2537|  16.1k|        return *m_current;
 2538|  16.1k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeE:
  267|  1.66k|    {
  268|  1.66k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.66k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent22random_access_iteratorISE_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  160|  1.66k|    {
  161|  1.66k|        constexpr auto zero = iter_difference_t<I>{0};
  162|       |
  163|  1.66k|        if (n > zero) {
  ------------------
  |  Branch (163:13): [True: 0, False: 1.66k]
  ------------------
  164|      0|            while (n-- > zero) {
  ------------------
  |  Branch (164:20): [True: 0, False: 0]
  ------------------
  165|      0|                ++i;
  166|      0|            }
  167|      0|        }
  168|  1.66k|        else {
  169|  1.66k|            while (n++ < zero) {
  ------------------
  |  Branch (169:20): [True: 0, False: 1.66k]
  ------------------
  170|      0|                --i;
  171|      0|            }
  172|  1.66k|        }
  173|  1.66k|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EEcE8is_validEv:
 1988|  36.2k|    {
 1989|  36.2k|        return !codepoint.empty();
 1990|  36.2k|    }
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EESB_EEEEDaOT_:
 1781|  2.29k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|       |                  ranges::sized_range<Range>) {
 1785|       |        return string_view_wrapper{SCN_FWD(range)};
 1786|       |    }
 1787|  2.29k|    else {
 1788|  2.29k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  | 1057|  2.29k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1789|  2.29k|    }
 1790|  2.29k|}
_ZN3scn2v44impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSH_:
 1635|  2.29k|    {
 1636|  2.29k|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1057|  2.29k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1637|  2.29k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEvOT_:
 1719|  2.29k|    {
 1720|  2.29k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|  2.29k|        else {
 1753|  2.29k|            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|  2.29k|            if constexpr (ranges::common_range<Range>) {
 1758|  2.29k|                std::copy(ranges::begin(range), ranges::end(range),
 1759|  2.29k|                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|  2.29k|            m_view = string_view_type{str};
 1768|  2.29k|        }
 1769|  2.29k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EC2ES5_S5_l:
 2480|  28.3k|        : m_current(x), m_end(s), m_count(n)
 2481|  28.3k|    {
 2482|  28.3k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E4baseEv:
 2512|   185k|    {
 2513|   185k|        return m_current;
 2514|   185k|    }
_ZNK3scn2v44impl14_take_width_fnclINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEDTtlNS1_15take_width_viewEfp_fp0_EERKT_l:
 2942|  12.4k|    {
 2943|  12.4k|        return take_width_view{r, n};
 2944|  12.4k|    }
_ZN3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2ERKS9_l:
 2910|  12.4k|        : m_base(base), m_count(count)
 2911|  12.4k|    {
 2912|  12.4k|    }
_ZN3scn2v44impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEC2ERKS9_:
 2822|  12.4k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v44impl20reader_impl_for_charIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERcNSN_10locale_refE:
 5701|    402|    {
 5702|    402|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5702:13): [True: 366, False: 36]
  ------------------
 5703|    402|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5703:13): [True: 0, False: 36]
  ------------------
 5704|    366|            return read_default(range, value, loc);
 5705|    366|        }
 5706|       |
 5707|     36|        reader_impl_for_int<CharT> reader{};
 5708|     36|        signed char tmp_value{};
 5709|     36|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5710|     36|        value = static_cast<signed char>(value);
 5711|     36|        return ret;
 5712|    402|    }
_ZN3scn2v44impl20reader_impl_for_charIcE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RcNS0_6detail10locale_refE:
 5683|    366|    {
 5684|    366|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|    366|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5685|    366|        if constexpr (std::is_same_v<CharT, char>) {
 5686|    366|            return code_unit_reader<char>{}.read(range, value);
 5687|       |        }
 5688|       |        else {
 5689|       |            SCN_UNUSED(range);
 5690|       |            SCN_EXPECT(false);
 5691|       |            SCN_UNREACHABLE;
 5692|       |        }
 5693|    366|    }
_ZN3scn2v44impl16code_unit_readerIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSH_Rc:
 5601|    366|    {
 5602|    366|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3939|    366|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    366|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    366|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    366|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 366]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|    366|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    366|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5603|    366|        ch = *range.begin();
 5604|    366|        return it;
 5605|    366|    }
_ZN3scn2v44impl14read_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 1944|  2.67k|{
 1945|  2.67k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  2.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 2.67k]
  |  |  ------------------
  ------------------
 1946|      0|        return unexpected(e);
 1947|      0|    }
 1948|       |
 1949|  2.67k|    return ranges::next(range.begin());
 1950|  2.67k|}
_ZN3scn2v44impl9eof_checkINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_9eof_errorET_:
  950|  2.67k|{
  951|  2.67k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  986|  2.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 2.67k]
  |  |  ------------------
  ------------------
  952|      0|        return eof_error::eof;
  953|      0|    }
  954|  2.67k|    return eof_error::good;
  955|  2.67k|}
_ZN3scn2v44impl12is_range_eofINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEbT_:
  944|  2.67k|{
  945|  2.67k|    return is_range_eof(r.begin(), r.end());
  946|  2.67k|}
_ZN3scn2v44impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEbT_T0_:
  928|  38.9k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  38.9k|    {
  938|  38.9k|        return begin == end;
  939|  38.9k|    }
  940|  38.9k|}
_ZN3scn2v44impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2878|   176k|        {
 2879|   176k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2879:21): [True: 5.87k, False: 170k]
  |  Branch (2879:39): [True: 1.16k, False: 4.70k]
  ------------------
 2880|   176k|                   y.base() == x.m_end ||
  ------------------
  |  Branch (2880:20): [True: 1.51k, False: 173k]
  ------------------
 2881|   176k|                   (y.count() == 1 && y.multibyte_left() == 0 &&
  ------------------
  |  Branch (2881:21): [True: 25.4k, False: 148k]
  |  Branch (2881:39): [True: 8.88k, False: 16.5k]
  ------------------
 2882|   173k|                    y.is_current_double_wide());
  ------------------
  |  Branch (2882:21): [True: 118, False: 8.77k]
  ------------------
 2883|   176k|        }
_ZNK3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE3endEv:
 2926|  83.0k|    {
 2927|  83.0k|        return sentinel<true>{m_base.get().end()};
 2928|  83.0k|    }
_ZNK3scn2v44impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvE3getEv:
 2825|   139k|    {
 2826|   139k|        return view;
 2827|   139k|    }
_ZN3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE8sentinelILb1EEC2ES8_:
 2859|  83.0k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
  ------------------
  |  | 1055|  83.0k|    static_cast<    \
  |  | 1056|  83.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
_ZNK3scn2v46ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
  295|  2.71k|    {
  296|  2.71k|        ++x;
  297|  2.71k|        return x;
  298|  2.71k|    }
_ZNK3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 2920|  28.3k|    {
 2921|  28.3k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2922|  28.3k|                                      m_count};
 2923|  28.3k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEaEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3589|     36|    {
 3590|     36|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3939|     36|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|     36|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|     36|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|     36|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 36]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|     36|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|     36|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|     36|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|     36|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 0, False: 36]
  ------------------
 3594|       |            if constexpr (!std::is_signed_v<T>) {
 3595|       |                return detail::unexpected_scan_error(
 3596|       |                    scan_error::invalid_scanned_value,
 3597|       |                    "Unexpected '-' sign when parsing an "
 3598|       |                    "unsigned value");
 3599|       |            }
 3600|      0|            else {
 3601|      0|                if (specs.type ==
  ------------------
  |  Branch (3601:21): [True: 0, False: 0]
  ------------------
 3602|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3603|      0|                    return detail::unexpected_scan_error(
 3604|      0|                        scan_error::invalid_scanned_value,
 3605|      0|                        "'u'-option disallows negative values");
 3606|      0|                }
 3607|      0|            }
 3608|      0|        }
 3609|       |
 3610|     36|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 0, False: 36]
  ------------------
 3611|      0|            value = T{0};
 3612|      0|            return std::next(prefix_result.iterator);
 3613|      0|        }
 3614|       |
 3615|     36|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  985|     36|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 36, False: 0]
  |  |  ------------------
  ------------------
 3616|     36|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3939|     36|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|     36|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|     36|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|     36|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 36, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     36|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     36|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     36|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     36|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     36|    }                                                  \
  |  |  |  | 3938|     36|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|      0|                    parse_integer_digits_without_thsep(
 3618|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|      0|                        prefix_result.parsed_base));
 3620|       |
 3621|      0|            auto buf = make_contiguous_buffer(
 3622|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|      0|                                        prefix_result.parsed_base));
 3626|       |
 3627|      0|            return ranges::next(
 3628|      0|                prefix_result.iterator,
 3629|      0|                ranges::distance(buf.view().begin(), result_it));
 3630|      0|        }
 3631|       |
 3632|      0|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|      0|            localized_number_formatting_options<CharT>{loc};
 3637|      0|#endif
 3638|       |
 3639|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|      0|                parse_integer_digits_with_thsep(
 3641|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|      0|                    prefix_result.parsed_base, locale_options));
 3643|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|      0|            parse_digits_result;
 3645|       |
 3646|      0|        auto nothsep_source_view =
 3647|      0|            std::basic_string_view<CharT>{nothsep_source};
 3648|      0|        SCN_TRY(
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|      0|            nothsep_source_it,
 3650|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|      0|                                prefix_result.parsed_base));
 3652|       |
 3653|      0|        return ranges::next(
 3654|      0|            prefix_result.iterator,
 3655|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|      0|                ranges::ssize(thsep_indices));
 3657|      0|    }
_ZN3scn2v44impl20parse_integer_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESG_i:
 3376|  1.14k|{
 3377|  1.14k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3939|  1.14k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  1.14k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  1.14k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  1.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 1.14k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  1.14k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  1.14k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3378|  1.14k|    auto [base_prefix_begin_it, sign] = sign_result;
 3379|       |
 3380|  1.14k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3381|  1.14k|        parse_integer_base_prefix(
 3382|  1.14k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3383|       |
 3384|  1.14k|    if (parsed_zero) {
  ------------------
  |  Branch (3384:9): [True: 0, False: 1.14k]
  ------------------
 3385|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3385:13): [True: 0, False: 0]
  |  Branch (3385:13): [True: 0, False: 0]
  ------------------
 3386|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3386:13): [True: 0, False: 0]
  ------------------
 3387|      0|            digits_begin_it = base_prefix_begin_it;
 3388|      0|        }
 3389|      0|        else {
 3390|      0|            parsed_zero = false;
 3391|      0|        }
 3392|      0|    }
 3393|  1.14k|    else {
 3394|  1.14k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3394:13): [True: 0, False: 1.14k]
  |  Branch (3394:13): [True: 1.14k, False: 0]
  ------------------
 3395|  1.14k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3395:13): [True: 1.14k, False: 0]
  ------------------
 3396|  1.14k|            digits_begin_it = base_prefix_begin_it;
 3397|  1.14k|        }
 3398|  1.14k|    }
 3399|       |
 3400|  1.14k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3400:9): [True: 1.14k, False: 0]
  ------------------
 3401|  1.14k|        sign = sign_type::plus_sign;
 3402|  1.14k|    }
 3403|  1.14k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3404|  1.14k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3405|  1.14k|}
_ZN3scn2v44impl18parse_numeric_signINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESG_:
 3257|  1.53k|{
 3258|  1.53k|    auto r = read_one_of_code_unit(range, "+-");
 3259|  1.53k|    if (!r) {
  ------------------
  |  Branch (3259:9): [True: 1.53k, False: 0]
  ------------------
 3260|  1.53k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3260:13): [True: 1.53k, False: 0]
  ------------------
 3261|  1.53k|            return std::pair{range.begin(), sign_type::default_sign};
 3262|  1.53k|        }
 3263|      0|        return unexpected(eof_error::eof);
 3264|  1.53k|    }
 3265|       |
 3266|      0|    auto& it = *r;
 3267|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3267:9): [True: 0, False: 0]
  ------------------
 3268|      0|        return std::pair{it, sign_type::minus_sign};
 3269|      0|    }
 3270|      0|    return std::pair{it, sign_type::plus_sign};
 3271|      0|}
_ZN3scn2v44impl21read_one_of_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2371|  1.53k|{
 2372|  1.53k|    auto it = read_code_unit(range);
 2373|  1.53k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  986|  1.53k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 1.53k]
  |  |  ------------------
  ------------------
 2374|      0|        return unexpected(make_eof_parse_error(it.error()));
 2375|      0|    }
 2376|       |
 2377|  3.07k|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 3.07k, False: 1.53k]
  ------------------
 2378|  3.07k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 0, False: 3.07k]
  ------------------
 2379|      0|            return *it;
 2380|      0|        }
 2381|  3.07k|    }
 2382|       |
 2383|  1.53k|    return unexpected(parse_error::error);
 2384|  1.53k|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_i:
 3343|  1.14k|{
 3344|  1.14k|    switch (base) {
 3345|     14|        case 2:
  ------------------
  |  Branch (3345:9): [True: 14, False: 1.13k]
  ------------------
 3346|       |            // allow 0b/0B
 3347|     14|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3348|     14|                    false};
 3349|       |
 3350|     14|        case 8: {
  ------------------
  |  Branch (3350:9): [True: 14, False: 1.13k]
  ------------------
 3351|       |            // allow 0o/0O/0
 3352|     14|            bool zero_parsed = false;
 3353|     14|            auto it = apply_opt(
 3354|     14|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3355|     14|            return {it, 8, zero_parsed};
 3356|      0|        }
 3357|       |
 3358|    362|        case 16:
  ------------------
  |  Branch (3358:9): [True: 362, False: 782]
  ------------------
 3359|       |            // allow 0x/0X
 3360|    362|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3361|    362|                    false};
 3362|       |
 3363|     26|        case 0:
  ------------------
  |  Branch (3363:9): [True: 26, False: 1.11k]
  ------------------
 3364|       |            // detect base
 3365|     26|            return parse_integer_base_prefix_for_detection(range);
 3366|       |
 3367|    728|        default:
  ------------------
  |  Branch (3367:9): [True: 728, False: 416]
  ------------------
 3368|       |            // no base prefix allowed
 3369|    728|            return {range.begin(), base, false};
 3370|  1.14k|    }
 3371|  1.14k|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENS1_14parse_expectedESB_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEEE4typeEOSN_SP_:
 2390|    390|{
 2391|    390|    if (!result) {
  ------------------
  |  Branch (2391:9): [True: 390, False: 0]
  ------------------
 2392|    390|        return range.begin();
 2393|    390|    }
 2394|      0|    return *result;
 2395|    390|}
_ZN3scn2v44impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3294|     40|{
 3295|     40|    return read_matching_string_classic_nocase(range, "0b");
 3296|     40|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEE:
 2330|  1.61k|{
 2331|  1.61k|    using char_type = detail::char_t<Range>;
 2332|       |
 2333|       |    if constexpr (ranges::contiguous_range<Range> &&
 2334|       |                  std::is_same_v<char_type, char>) {
 2335|       |        if (range.size() < str.size()) {
 2336|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2337|       |        }
 2338|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2339|       |            return unexpected(parse_error::error);
 2340|       |        }
 2341|       |        return ranges::next(range.begin(), str.size());
 2342|       |    }
 2343|  1.61k|    else {
 2344|  1.61k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|  1.61k|            if (ch < 'A' || ch > 'Z') {
 2346|  1.61k|                return ch;
 2347|  1.61k|            }
 2348|  1.61k|            return static_cast<char_type>(ch +
 2349|  1.61k|                                          static_cast<char_type>('a' - 'A'));
 2350|  1.61k|        };
 2351|       |
 2352|  1.61k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3939|  1.61k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  1.61k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  1.61k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  1.61k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 270, False: 1.34k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    270|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    270|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    270|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    270|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    270|    }                                                  \
  |  |  |  | 3938|  1.61k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  1.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2353|  1.34k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2354|  1.34k|                        .transform_error(make_eof_parse_error));
 2355|       |
 2356|  1.34k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  986|  1.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.34k, False: 0]
  |  |  ------------------
  ------------------
 2357|  1.34k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2358|  1.34k|                    return ascii_tolower(a) ==
 2359|  1.34k|                           static_cast<detail::char_t<Range>>(b);
 2360|  1.34k|                }))) {
 2361|  1.34k|            return unexpected(parse_error::error);
 2362|  1.34k|        }
 2363|       |
 2364|      0|        return it;
 2365|  1.34k|    }
 2366|  1.61k|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_l:
 1955|  7.58k|{
 1956|  7.58k|    SCN_EXPECT(count >= 0);
  ------------------
  |  | 1051|  7.58k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  7.58k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|  7.58k|    else {
 1967|  7.58k|        auto it = range.begin();
 1968|  7.58k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 0, False: 7.58k]
  ------------------
 1969|      0|            return ranges::next(it, count);
 1970|      0|        }
 1971|       |
 1972|  28.0k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 20.8k, False: 7.24k]
  ------------------
 1973|  20.8k|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 340, False: 20.4k]
  ------------------
 1974|    340|                return unexpected(eof_error::eof);
 1975|    340|            }
 1976|  20.8k|        }
 1977|       |
 1978|  7.24k|        return it;
 1979|  7.58k|    }
 1980|  7.58k|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEmT_:
 1095|  7.58k|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|       |                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|       |        else {
 1107|       |            if (r.begin().stores_parent()) {
 1108|       |                return static_cast<size_t>(
 1109|       |                    r.begin().parent()->chars_available() -
 1110|       |                    r.begin().position());
 1111|       |            }
 1112|       |            return r.begin().contiguous_segment().size();
 1113|       |        }
 1114|       |    }
 1115|  7.58k|    else {
 1116|  7.58k|        return 0;
 1117|  7.58k|    }
 1118|  7.58k|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlcE_clEc:
 2344|  1.34k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|  1.34k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2345:17): [True: 74, False: 1.27k]
  |  Branch (2345:29): [True: 1.27k, False: 0]
  ------------------
 2346|  1.34k|                return ch;
 2347|  1.34k|            }
 2348|      0|            return static_cast<char_type>(ch +
 2349|      0|                                          static_cast<char_type>('a' - 'A'));
 2350|  1.34k|        };
_ZN3scn2v44impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_Rb:
 3308|     40|{
 3309|     40|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3309:14): [True: 0, False: 40]
  ------------------
 3310|      0|        return *r;
 3311|      0|    }
 3312|       |
 3313|     40|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3313:14): [True: 0, False: 40]
  ------------------
 3314|      0|        zero_parsed = true;
 3315|      0|        return *r;
 3316|      0|    }
 3317|       |
 3318|     40|    return unexpected(parse_error::error);
 3319|     40|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NDTcl4implISL_EEE4typeE:
 2245|     40|{
 2246|     40|    auto it = read_code_unit(range);
 2247|     40|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  986|     40|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 40]
  |  |  ------------------
  ------------------
 2248|      0|        return unexpected(make_eof_parse_error(it.error()));
 2249|      0|    }
 2250|       |
 2251|     40|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  986|     40|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 40, False: 0]
  |  |  ------------------
  ------------------
 2252|     40|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|     40|        return unexpected(parse_error::error);
 2254|     40|    }
 2255|       |
 2256|      0|    return *it;
 2257|     40|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 1944|     40|{
 1945|     40|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|     40|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 40]
  |  |  ------------------
  ------------------
 1946|      0|        return unexpected(e);
 1947|      0|    }
 1948|       |
 1949|     40|    return ranges::next(range.begin());
 1950|     40|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_9eof_errorET_:
  950|     40|{
  951|     40|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  986|     40|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 40]
  |  |  ------------------
  ------------------
  952|      0|        return eof_error::eof;
  953|      0|    }
  954|     40|    return eof_error::good;
  955|     40|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEbT_:
  944|  36.2k|{
  945|  36.2k|    return is_range_eof(r.begin(), r.end());
  946|  36.2k|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3301|    388|{
 3302|    388|    return read_matching_string_classic_nocase(range, "0x");
 3303|    388|}
_ZN3scn2v44impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_:
 3324|     26|{
 3325|     26|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3325:14): [True: 0, False: 26]
  ------------------
 3326|      0|        return {*r, 16, false};
 3327|      0|    }
 3328|     26|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3328:14): [True: 0, False: 26]
  ------------------
 3329|      0|        return {*r, 2, false};
 3330|      0|    }
 3331|     26|    {
 3332|     26|        bool zero_parsed{false};
 3333|     26|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3333:18): [True: 0, False: 26]
  ------------------
 3334|      0|            return {*r, 8, zero_parsed};
 3335|      0|        }
 3336|     26|    }
 3337|     26|    return {range.begin(), 10, false};
 3338|     26|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_i:
 3410|  1.12k|{
 3411|  1.12k|    using char_type = detail::char_t<Range>;
 3412|       |
 3413|       |    if constexpr (ranges::contiguous_range<Range>) {
 3414|       |        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3415|       |            return detail::unexpected_scan_error(
 3416|       |                scan_error::invalid_scanned_value,
 3417|       |                "Failed to parse integer: No digits found");
 3418|       |        }
 3419|       |        return range.end();
 3420|       |    }
 3421|  1.12k|    else {
 3422|  1.12k|        return read_while1_code_unit(range,
 3423|  1.12k|                                     [&](char_type ch) noexcept {
 3424|  1.12k|                                         return char_to_int(ch) < base;
 3425|  1.12k|                                     })
 3426|  1.12k|            .transform_error(map_parse_error_to_scan_error(
 3427|  1.12k|                scan_error::invalid_scanned_value,
 3428|  1.12k|                "Failed to parse integer: No digits found"));
 3429|  1.12k|    }
 3430|  1.12k|}
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigISU_E8functionEEE:
 2094|  1.51k|{
 2095|  1.51k|    auto it = read_while_code_unit(range, pred);
 2096|  1.51k|    if (it == range.begin()) {
  ------------------
  |  Branch (2096:9): [True: 1.51k, False: 0]
  ------------------
 2097|  1.51k|        return unexpected(parse_error::error);
 2098|  1.51k|    }
 2099|      0|    return it;
 2100|  1.51k|}
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 2074|  1.51k|{
 2075|  1.51k|    return read_until_code_unit(range, std::not_fn(pred));
 2076|  1.51k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 2055|  1.51k|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|  1.51k|    else {
 2060|  1.51k|        auto first = range.begin();
 2061|  1.51k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 1.51k, False: 0]
  ------------------
 2062|  1.51k|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 1.51k, False: 0]
  ------------------
 2063|  1.51k|                return first;
 2064|  1.51k|            }
 2065|  1.51k|        }
 2066|      0|        return first;
 2067|  1.51k|    }
 2068|  1.51k|}
_ZN3scn2v44implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2891|  90.2k|        {
 2892|  90.2k|            return !(y == x);
 2893|  90.2k|        }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_SV_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSP_:
  742|  1.12k|        : m_fptr([](storage fn,
  743|  1.12k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.12k|              cvref<T> obj = *get<T>(fn);
  745|  1.12k|              if constexpr (std::is_void_v<R>) {
  746|  1.12k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.12k|              }
  748|  1.12k|              else {
  749|  1.12k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.12k|              }
  751|  1.12k|          }),
  752|  1.12k|          m_storage(std::addressof(f))
  753|  1.12k|    {
  754|  1.12k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_SV_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|  1.12k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.12k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.12k|              else {
  749|  1.12k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.12k|              }
  751|  1.12k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSD_EENS1_15take_width_viewINS9_ISD_SD_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_iEUlcE_EEDaNS3_7storageE:
  683|  1.12k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.12k|        else if constexpr (std::is_object_v<T>) {
  688|  1.12k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.12k|    }
_ZZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_iENKUlcE_clEc:
 3423|  1.12k|                                     [&](char_type ch) noexcept {
 3424|  1.12k|                                         return char_to_int(ch) < base;
 3425|  1.12k|                                     })
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_TnPNSN_9enable_ifIXsr3stdE11is_object_vISP_EEvE4typeELPv0EEEPSP_:
  660|  1.12k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.12k|        {
  662|  1.12k|        }
_ZN3scn2v44impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEENSJ_12basic_stringIT0_NSJ_11char_traitsISS_EENSJ_9allocatorISS_EEEENSR_IcNST_IcEENSV_IcEEEEEEEEESM_iRKNS1_35localized_number_formatting_optionsISS_EE:
 3440|     24|{
 3441|     24|    std::basic_string<CharT> output;
 3442|     24|    std::string thsep_indices;
 3443|     24|    auto it = range.begin();
 3444|     24|    bool digit_matched = false;
 3445|     24|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3445:12): [True: 24, False: 0]
  ------------------
 3446|     24|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3446:13): [True: 0, False: 24]
  ------------------
 3447|      0|            thsep_indices.push_back(
 3448|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3449|      0|        }
 3450|     24|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3450:18): [True: 24, False: 0]
  ------------------
 3451|     24|            break;
 3452|     24|        }
 3453|      0|        else {
 3454|      0|            output.push_back(*it);
 3455|      0|            digit_matched = true;
 3456|      0|        }
 3457|     24|    }
 3458|     24|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  986|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 24, False: 0]
  |  |  ------------------
  ------------------
 3459|     24|        return detail::unexpected_scan_error(
 3460|     24|            scan_error::invalid_scanned_value,
 3461|     24|            "Failed to parse integer: No digits found");
 3462|     24|    }
 3463|      0|    return std::tuple{it, output, thsep_indices};
 3464|     24|}
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E5countEv:
 2516|   362k|    {
 2517|   362k|        return m_count;
 2518|   362k|    }
_ZN3scn2v44impl20reader_impl_for_charIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERcNSL_10locale_refE:
 5701|    286|    {
 5702|    286|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5702:13): [True: 264, False: 22]
  ------------------
 5703|    286|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5703:13): [True: 0, False: 22]
  ------------------
 5704|    264|            return read_default(range, value, loc);
 5705|    264|        }
 5706|       |
 5707|     22|        reader_impl_for_int<CharT> reader{};
 5708|     22|        signed char tmp_value{};
 5709|     22|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5710|     22|        value = static_cast<signed char>(value);
 5711|     22|        return ret;
 5712|    286|    }
_ZN3scn2v44impl20reader_impl_for_charIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RcNS0_6detail10locale_refE:
 5683|    896|    {
 5684|    896|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|    896|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5685|    896|        if constexpr (std::is_same_v<CharT, char>) {
 5686|    896|            return code_unit_reader<char>{}.read(range, value);
 5687|       |        }
 5688|       |        else {
 5689|       |            SCN_UNUSED(range);
 5690|       |            SCN_EXPECT(false);
 5691|       |            SCN_UNREACHABLE;
 5692|       |        }
 5693|    896|    }
_ZN3scn2v44impl16code_unit_readerIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_Rc:
 5601|    896|    {
 5602|    896|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3939|    896|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    896|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    896|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    896|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 896]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|    896|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    896|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5603|    896|        ch = *range.begin();
 5604|    896|        return it;
 5605|    896|    }
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1944|  6.51k|{
 1945|  6.51k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  6.51k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 6.51k]
  |  |  ------------------
  ------------------
 1946|      0|        return unexpected(e);
 1947|      0|    }
 1948|       |
 1949|  6.51k|    return ranges::next(range.begin());
 1950|  6.51k|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  950|  21.7k|{
  951|  21.7k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  986|  21.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 21.7k]
  |  |  ------------------
  ------------------
  952|      0|        return eof_error::eof;
  953|      0|    }
  954|  21.7k|    return eof_error::good;
  955|  21.7k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  944|   577k|{
  945|   577k|    return is_range_eof(r.begin(), r.end());
  946|   577k|}
_ZN3scn2v44impl12is_range_eofIPKcS4_EEbT_T0_:
  928|   650k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   650k|    {
  938|   650k|        return begin == end;
  939|   650k|    }
  940|   650k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  67.0k|    {
  296|  67.0k|        ++x;
  297|  67.0k|        return x;
  298|  67.0k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3589|     22|    {
 3590|     22|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3939|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|     22|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|     22|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 0, False: 22]
  ------------------
 3594|       |            if constexpr (!std::is_signed_v<T>) {
 3595|       |                return detail::unexpected_scan_error(
 3596|       |                    scan_error::invalid_scanned_value,
 3597|       |                    "Unexpected '-' sign when parsing an "
 3598|       |                    "unsigned value");
 3599|       |            }
 3600|      0|            else {
 3601|      0|                if (specs.type ==
  ------------------
  |  Branch (3601:21): [True: 0, False: 0]
  ------------------
 3602|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3603|      0|                    return detail::unexpected_scan_error(
 3604|      0|                        scan_error::invalid_scanned_value,
 3605|      0|                        "'u'-option disallows negative values");
 3606|      0|                }
 3607|      0|            }
 3608|      0|        }
 3609|       |
 3610|     22|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 0, False: 22]
  ------------------
 3611|      0|            value = T{0};
 3612|      0|            return std::next(prefix_result.iterator);
 3613|      0|        }
 3614|       |
 3615|     22|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  985|     22|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 22, False: 0]
  |  |  ------------------
  ------------------
 3616|     22|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3939|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|     22|                    parse_integer_digits_without_thsep(
 3618|     22|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|     22|                        prefix_result.parsed_base));
 3620|       |
 3621|     22|            auto buf = make_contiguous_buffer(
 3622|     22|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|     22|            SCN_TRY(result_it,
  ------------------
  |  | 3939|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 22, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     22|    }                                                  \
  |  |  |  | 3938|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|      0|                                        prefix_result.parsed_base));
 3626|       |
 3627|      0|            return ranges::next(
 3628|      0|                prefix_result.iterator,
 3629|      0|                ranges::distance(buf.view().begin(), result_it));
 3630|     22|        }
 3631|       |
 3632|      0|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|      0|            localized_number_formatting_options<CharT>{loc};
 3637|      0|#endif
 3638|       |
 3639|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|      0|                parse_integer_digits_with_thsep(
 3641|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|      0|                    prefix_result.parsed_base, locale_options));
 3643|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|      0|            parse_digits_result;
 3645|       |
 3646|      0|        auto nothsep_source_view =
 3647|      0|            std::basic_string_view<CharT>{nothsep_source};
 3648|      0|        SCN_TRY(
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|      0|            nothsep_source_it,
 3650|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|      0|                                prefix_result.parsed_base));
 3652|       |
 3653|      0|        return ranges::next(
 3654|      0|            prefix_result.iterator,
 3655|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|      0|                ranges::ssize(thsep_indices));
 3657|      0|    }
_ZN3scn2v44impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3376|  2.78k|{
 3377|  2.78k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3939|  2.78k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  2.78k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  2.78k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  2.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 2.78k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  2.78k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  2.78k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3378|  2.78k|    auto [base_prefix_begin_it, sign] = sign_result;
 3379|       |
 3380|  2.78k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3381|  2.78k|        parse_integer_base_prefix(
 3382|  2.78k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3383|       |
 3384|  2.78k|    if (parsed_zero) {
  ------------------
  |  Branch (3384:9): [True: 0, False: 2.78k]
  ------------------
 3385|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3385:13): [True: 0, False: 0]
  ------------------
 3386|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3386:13): [True: 0, False: 0]
  ------------------
 3387|      0|            digits_begin_it = base_prefix_begin_it;
 3388|      0|        }
 3389|      0|        else {
 3390|      0|            parsed_zero = false;
 3391|      0|        }
 3392|      0|    }
 3393|  2.78k|    else {
 3394|  2.78k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3394:13): [True: 0, False: 2.78k]
  ------------------
 3395|  2.78k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3395:13): [True: 2.78k, False: 0]
  ------------------
 3396|  2.78k|            digits_begin_it = base_prefix_begin_it;
 3397|  2.78k|        }
 3398|  2.78k|    }
 3399|       |
 3400|  2.78k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3400:9): [True: 2.78k, False: 0]
  ------------------
 3401|  2.78k|        sign = sign_type::plus_sign;
 3402|  2.78k|    }
 3403|  2.78k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3404|  2.78k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3405|  2.78k|}
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3257|  3.71k|{
 3258|  3.71k|    auto r = read_one_of_code_unit(range, "+-");
 3259|  3.71k|    if (!r) {
  ------------------
  |  Branch (3259:9): [True: 3.71k, False: 0]
  ------------------
 3260|  3.71k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3260:13): [True: 3.71k, False: 0]
  ------------------
 3261|  3.71k|            return std::pair{range.begin(), sign_type::default_sign};
 3262|  3.71k|        }
 3263|      0|        return unexpected(eof_error::eof);
 3264|  3.71k|    }
 3265|       |
 3266|      0|    auto& it = *r;
 3267|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3267:9): [True: 0, False: 0]
  ------------------
 3268|      0|        return std::pair{it, sign_type::minus_sign};
 3269|      0|    }
 3270|      0|    return std::pair{it, sign_type::plus_sign};
 3271|      0|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2371|  3.71k|{
 2372|  3.71k|    auto it = read_code_unit(range);
 2373|  3.71k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  986|  3.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 3.71k]
  |  |  ------------------
  ------------------
 2374|      0|        return unexpected(make_eof_parse_error(it.error()));
 2375|      0|    }
 2376|       |
 2377|  7.42k|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 7.42k, False: 3.71k]
  ------------------
 2378|  7.42k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 0, False: 7.42k]
  ------------------
 2379|      0|            return *it;
 2380|      0|        }
 2381|  7.42k|    }
 2382|       |
 2383|  3.71k|    return unexpected(parse_error::error);
 2384|  3.71k|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3343|  2.78k|{
 3344|  2.78k|    switch (base) {
 3345|      6|        case 2:
  ------------------
  |  Branch (3345:9): [True: 6, False: 2.77k]
  ------------------
 3346|       |            // allow 0b/0B
 3347|      6|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3348|      6|                    false};
 3349|       |
 3350|     30|        case 8: {
  ------------------
  |  Branch (3350:9): [True: 30, False: 2.75k]
  ------------------
 3351|       |            // allow 0o/0O/0
 3352|     30|            bool zero_parsed = false;
 3353|     30|            auto it = apply_opt(
 3354|     30|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3355|     30|            return {it, 8, zero_parsed};
 3356|      0|        }
 3357|       |
 3358|    912|        case 16:
  ------------------
  |  Branch (3358:9): [True: 912, False: 1.87k]
  ------------------
 3359|       |            // allow 0x/0X
 3360|    912|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3361|    912|                    false};
 3362|       |
 3363|     16|        case 0:
  ------------------
  |  Branch (3363:9): [True: 16, False: 2.76k]
  ------------------
 3364|       |            // detect base
 3365|     16|            return parse_integer_base_prefix_for_detection(range);
 3366|       |
 3367|  1.81k|        default:
  ------------------
  |  Branch (3367:9): [True: 1.81k, False: 964]
  ------------------
 3368|       |            // no base prefix allowed
 3369|  1.81k|            return {range.begin(), base, false};
 3370|  2.78k|    }
 3371|  2.78k|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2390|    948|{
 2391|    948|    if (!result) {
  ------------------
  |  Branch (2391:9): [True: 948, False: 0]
  ------------------
 2392|    948|        return range.begin();
 2393|    948|    }
 2394|      0|    return *result;
 2395|    948|}
_ZN3scn2v44impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3294|     22|{
 3295|     22|    return read_matching_string_classic_nocase(range, "0b");
 3296|     22|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2330|  3.76k|{
 2331|  3.76k|    using char_type = detail::char_t<Range>;
 2332|       |
 2333|       |    if constexpr (ranges::contiguous_range<Range> &&
 2334|  3.76k|                  std::is_same_v<char_type, char>) {
 2335|  3.76k|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2335:13): [True: 8, False: 3.75k]
  ------------------
 2336|      8|            return unexpected(make_eof_parse_error(eof_error::eof));
 2337|      8|        }
 2338|  3.75k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2338:13): [True: 3.75k, False: 0]
  ------------------
 2339|  3.75k|            return unexpected(parse_error::error);
 2340|  3.75k|        }
 2341|      0|        return ranges::next(range.begin(), str.size());
 2342|       |    }
 2343|       |    else {
 2344|       |        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|       |            if (ch < 'A' || ch > 'Z') {
 2346|       |                return ch;
 2347|       |            }
 2348|       |            return static_cast<char_type>(ch +
 2349|       |                                          static_cast<char_type>('a' - 'A'));
 2350|       |        };
 2351|       |
 2352|       |        SCN_TRY(it, read_exactly_n_code_units(
 2353|       |                        range, static_cast<std::ptrdiff_t>(str.size()))
 2354|       |                        .transform_error(make_eof_parse_error));
 2355|       |
 2356|       |        if (SCN_UNLIKELY(!std::equal(
 2357|       |                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2358|       |                    return ascii_tolower(a) ==
 2359|       |                           static_cast<detail::char_t<Range>>(b);
 2360|       |                }))) {
 2361|       |            return unexpected(parse_error::error);
 2362|       |        }
 2363|       |
 2364|       |        return it;
 2365|       |    }
 2366|  3.76k|}
_ZN3scn2v44impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3308|     46|{
 3309|     46|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3309:14): [True: 0, False: 46]
  ------------------
 3310|      0|        return *r;
 3311|      0|    }
 3312|       |
 3313|     46|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3313:14): [True: 0, False: 46]
  ------------------
 3314|      0|        zero_parsed = true;
 3315|      0|        return *r;
 3316|      0|    }
 3317|       |
 3318|     46|    return unexpected(parse_error::error);
 3319|     46|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2245|  1.91k|{
 2246|  1.91k|    auto it = read_code_unit(range);
 2247|  1.91k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  986|  1.91k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 1.91k]
  |  |  ------------------
  ------------------
 2248|      0|        return unexpected(make_eof_parse_error(it.error()));
 2249|      0|    }
 2250|       |
 2251|  1.91k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  986|  1.91k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.91k, False: 0]
  |  |  ------------------
  ------------------
 2252|  1.91k|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|  1.91k|        return unexpected(parse_error::error);
 2254|  1.91k|    }
 2255|       |
 2256|      0|    return *it;
 2257|  1.91k|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3301|    928|{
 3302|    928|    return read_matching_string_classic_nocase(range, "0x");
 3303|    928|}
_ZN3scn2v44impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3324|     16|{
 3325|     16|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3325:14): [True: 0, False: 16]
  ------------------
 3326|      0|        return {*r, 16, false};
 3327|      0|    }
 3328|     16|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3328:14): [True: 0, False: 16]
  ------------------
 3329|      0|        return {*r, 2, false};
 3330|      0|    }
 3331|     16|    {
 3332|     16|        bool zero_parsed{false};
 3333|     16|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3333:18): [True: 0, False: 16]
  ------------------
 3334|      0|            return {*r, 8, zero_parsed};
 3335|      0|        }
 3336|     16|    }
 3337|     16|    return {range.begin(), 10, false};
 3338|     16|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3410|  2.75k|{
 3411|  2.75k|    using char_type = detail::char_t<Range>;
 3412|       |
 3413|  2.75k|    if constexpr (ranges::contiguous_range<Range>) {
 3414|  2.75k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  2.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 2.75k]
  |  |  ------------------
  ------------------
 3415|      0|            return detail::unexpected_scan_error(
 3416|      0|                scan_error::invalid_scanned_value,
 3417|      0|                "Failed to parse integer: No digits found");
 3418|      0|        }
 3419|  2.75k|        return range.end();
 3420|       |    }
 3421|       |    else {
 3422|       |        return read_while1_code_unit(range,
 3423|       |                                     [&](char_type ch) noexcept {
 3424|       |                                         return char_to_int(ch) < base;
 3425|       |                                     })
 3426|       |            .transform_error(map_parse_error_to_scan_error(
 3427|       |                scan_error::invalid_scanned_value,
 3428|       |                "Failed to parse integer: No digits found"));
 3429|       |    }
 3430|  2.75k|}
_ZN3scn2v44impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3440|     24|{
 3441|     24|    std::basic_string<CharT> output;
 3442|     24|    std::string thsep_indices;
 3443|     24|    auto it = range.begin();
 3444|     24|    bool digit_matched = false;
 3445|     24|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3445:12): [True: 24, False: 0]
  ------------------
 3446|     24|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3446:13): [True: 0, False: 24]
  ------------------
 3447|      0|            thsep_indices.push_back(
 3448|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3449|      0|        }
 3450|     24|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3450:18): [True: 24, False: 0]
  ------------------
 3451|     24|            break;
 3452|     24|        }
 3453|      0|        else {
 3454|      0|            output.push_back(*it);
 3455|      0|            digit_matched = true;
 3456|      0|        }
 3457|     24|    }
 3458|     24|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  986|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 24, False: 0]
  |  |  ------------------
  ------------------
 3459|     24|        return detail::unexpected_scan_error(
 3460|     24|            scan_error::invalid_scanned_value,
 3461|     24|            "Failed to parse integer: No digits found");
 3462|     24|    }
 3463|      0|    return std::tuple{it, output, thsep_indices};
 3464|     24|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|  13.2k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|  13.2k|                  ranges::sized_range<Range>) {
 1785|  13.2k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  | 1057|  13.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|  13.2k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1587|  13.2k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|  13.2k|    {
 1589|  13.2k|    }
_ZNK3scn2v44impl19string_view_wrapperIcE4viewEv:
 1601|  69.0k|    {
 1602|  69.0k|        return sv;
 1603|  69.0k|    }
_ZN3scn2v44impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEb:
 5989|  1.17k|{
 5990|  1.17k|    using char_type = detail::char_t<Range>;
 5991|  1.17k|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5992|       |
 5993|  1.17k|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5993:9): [True: 490, False: 688]
  ------------------
 5994|    490|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5995|    490|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5996|       |
 5997|    490|        if (max_width == 0) {
  ------------------
  |  Branch (5997:13): [True: 386, False: 104]
  ------------------
 5998|    386|            auto it = read_while_code_unit(range, pred);
 5999|       |
 6000|    386|            if (want_skipped_width) {
  ------------------
  |  Branch (6000:17): [True: 112, False: 274]
  ------------------
 6001|    112|                auto prefix_width =
 6002|    112|                    static_cast<std::ptrdiff_t>(
 6003|    112|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 6004|    112|                    ranges::distance(range.begin(), it);
 6005|    112|                return result_type{it, prefix_width};
 6006|    112|            }
 6007|    274|            return result_type{it, 0};
 6008|    386|        }
 6009|       |
 6010|    104|        auto max_width_view = take_width(range, max_width);
 6011|    104|        auto w_it = read_while_code_unit(max_width_view, pred);
 6012|       |
 6013|    104|        if (want_skipped_width) {
  ------------------
  |  Branch (6013:13): [True: 104, False: 0]
  ------------------
 6014|    104|            return result_type{w_it.base(), max_width - w_it.count()};
 6015|    104|        }
 6016|      0|        return result_type{w_it.base(), 0};
 6017|    104|    }
 6018|       |
 6019|    688|    const auto fill_chars = fill.template get_code_units<char_type>();
 6020|    688|    if (max_width == 0) {
  ------------------
  |  Branch (6020:9): [True: 354, False: 334]
  ------------------
 6021|    354|        auto it = read_while_code_units(range, fill_chars);
 6022|       |
 6023|    354|        if (want_skipped_width) {
  ------------------
  |  Branch (6023:13): [True: 118, False: 236]
  ------------------
 6024|    118|            auto prefix_width =
 6025|    118|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 6026|    118|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 6027|    118|            return result_type{it, prefix_width};
 6028|    118|        }
 6029|    236|        return result_type{it, 0};
 6030|    354|    }
 6031|       |
 6032|    334|    auto max_width_view = take_width(range, max_width);
 6033|    334|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 6034|       |
 6035|    334|    if (want_skipped_width) {
  ------------------
  |  Branch (6035:9): [True: 334, False: 0]
  ------------------
 6036|    334|        return result_type{w_it.base(), max_width - w_it.count()};
 6037|    334|    }
 6038|      0|    return result_type{w_it.base(), 0};
 6039|    334|}
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2074|    534|{
 2075|    534|    return read_until_code_unit(range, std::not_fn(pred));
 2076|    534|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2055|    726|{
 2056|    726|    if constexpr (ranges::common_range<Range>) {
 2057|    726|        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|       |    else {
 2060|       |        auto first = range.begin();
 2061|       |        for (; first != range.end(); ++first) {
 2062|       |            if (pred(*first)) {
 2063|       |                return first;
 2064|       |            }
 2065|       |        }
 2066|       |        return first;
 2067|       |    }
 2068|    726|}
_ZN3scn2v44impl12function_refIFbcES3_EC2IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_SR_TnPNSF_9enable_ifIXaaaasr6detailE11is_not_selfISH_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSH_:
  742|    490|        : m_fptr([](storage fn,
  743|    490|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    490|              cvref<T> obj = *get<T>(fn);
  745|    490|              if constexpr (std::is_void_v<R>) {
  746|    490|                  obj(static_cast<decltype(args)>(args)...);
  747|    490|              }
  748|    490|              else {
  749|    490|                  return obj(static_cast<decltype(args)>(args)...);
  750|    490|              }
  751|    490|          }),
  752|    490|          m_storage(std::addressof(f))
  753|    490|    {
  754|    490|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_SR_TnPNSF_9enable_ifIXaaaasr6detailE11is_not_selfISH_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSH_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|    908|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    908|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    908|              else {
  749|    908|                  return obj(static_cast<decltype(args)>(args)...);
  750|    908|              }
  751|    908|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRT_EEEElEEEESG_lRKNS0_6detail9fill_typeEbEUlcE_EEDaNS3_7storageE:
  683|    908|    {
  684|    908|        if constexpr (std::is_const_v<T>) {
  685|    908|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    908|    }
_ZZN3scn2v44impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEbENKUlcE_clEc:
 5995|    908|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_TnPNSF_9enable_ifIXsr3stdE11is_object_vISH_EEvE4typeELPv0EEEPKSH_:
  665|    490|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    490|        {
  667|    490|        }
_ZN3scn2v44impl20read_while_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2074|    314|{
 2075|    314|    return read_until_code_unit(range, std::not_fn(pred));
 2076|    314|}
_ZN3scn2v44impl20read_until_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2055|    614|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|    614|    else {
 2060|    614|        auto first = range.begin();
 2061|  10.2k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 9.86k, False: 334]
  ------------------
 2062|  9.86k|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 280, False: 9.58k]
  ------------------
 2063|    280|                return first;
 2064|    280|            }
 2065|  9.86k|        }
 2066|    334|        return first;
 2067|    614|    }
 2068|    614|}
_ZN3scn2v44impl21read_while_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEESG_RKT0_:
 2135|    354|{
 2136|    354|    static_assert(ranges::common_range<CodeUnits>);
 2137|       |
 2138|    354|    auto it = range.begin();
 2139|    640|    while (it != range.end()) {
  ------------------
  |  Branch (2139:12): [True: 640, False: 0]
  ------------------
 2140|    640|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2141|    640|                                           needle.size());
 2142|    640|        if (!r) {
  ------------------
  |  Branch (2142:13): [True: 6, False: 634]
  ------------------
 2143|      6|            return it;
 2144|      6|        }
 2145|    634|        static_assert(
 2146|    634|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2147|    634|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2147:13): [True: 348, False: 286]
  ------------------
 2148|    348|            return it;
 2149|    348|        }
 2150|    286|        it = *r;
 2151|    286|    }
 2152|      0|    SCN_ENSURE(it == range.end());
  ------------------
  |  | 1052|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2153|      0|    return it;
 2154|      0|}
_ZN3scn2v44impl21read_while_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEESI_RKT0_:
 2135|    334|{
 2136|    334|    static_assert(ranges::common_range<CodeUnits>);
 2137|       |
 2138|    334|    auto it = range.begin();
 2139|    678|    while (it != range.end()) {
  ------------------
  |  Branch (2139:12): [True: 632, False: 46]
  ------------------
 2140|    632|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2141|    632|                                           needle.size());
 2142|    632|        if (!r) {
  ------------------
  |  Branch (2142:13): [True: 70, False: 562]
  ------------------
 2143|     70|            return it;
 2144|     70|        }
 2145|    562|        static_assert(
 2146|    562|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2147|    562|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2147:13): [True: 218, False: 344]
  ------------------
 2148|    218|            return it;
 2149|    218|        }
 2150|    344|        it = *r;
 2151|    344|    }
 2152|     46|    SCN_ENSURE(it == range.end());
  ------------------
  |  | 1052|     46|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1048|     46|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2153|     46|    return it;
 2154|     46|}
_ZN3scn2v44impl23skip_classic_whitespaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_b:
 3065|    612|{
 3066|    612|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 0, False: 612]
  ------------------
 3067|      0|        auto it = read_while_classic_space(range);
 3068|      0|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|      0|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3070|      0|            return unexpected(e);
 3071|      0|        }
 3072|       |
 3073|      0|        return it;
 3074|      0|    }
 3075|       |
 3076|    612|    return read_while_classic_space(range);
 3077|    612|}
_ZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2215|    612|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|    612|    else {
 2225|    612|        auto it = range.begin();
 2226|       |
 2227|    612|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|    612|            auto seg = get_contiguous_beginning(range);
 2229|    612|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|    612|                seg_it != seg.end()) {
  ------------------
  |  Branch (2230:17): [True: 0, False: 612]
  ------------------
 2231|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|      0|            }
 2233|    612|            ranges::advance(it, seg.size());
 2234|    612|        }
 2235|       |
 2236|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|    612|            return detail::is_cp_space(cp);
 2238|    612|        });
 2239|    612|    }
 2240|    612|}
_ZN3scn2v44impl24get_contiguous_beginningINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDaT_:
 1039|  1.66k|{
 1040|       |    if constexpr (ranges::contiguous_range<Range> &&
 1041|       |                  ranges::sized_range<Range>) {
 1042|       |        return r;
 1043|       |    }
 1044|       |    else if constexpr (std::is_same_v<
 1045|       |                           ranges::const_iterator_t<Range>,
 1046|       |                           typename detail::basic_scan_buffer<
 1047|       |                               detail::char_t<Range>>::forward_iterator>) {
 1048|       |        if constexpr (ranges::common_range<Range>) {
 1049|       |            auto seg = r.begin().contiguous_segment();
 1050|       |            auto dist =
 1051|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1052|       |            return seg.substr(0, std::min(seg.size(), dist));
 1053|       |        }
 1054|       |        else {
 1055|       |            return r.begin().contiguous_segment();
 1056|       |        }
 1057|       |    }
 1058|  1.66k|    else {
 1059|  1.66k|        return std::basic_string_view<detail::char_t<Range>>{};
 1060|  1.66k|    }
 1061|  1.66k|}
_ZN3scn2v44impl21read_while_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2180|    864|{
 2181|    864|    return read_until_code_point(range, std::not_fn(pred));
 2182|    864|}
_ZN3scn2v44impl21read_until_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2159|  1.10k|{
 2160|  1.10k|    auto it = range.begin();
 2161|  18.8k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 18.3k, False: 446]
  ------------------
 2162|  18.3k|        const auto val =
 2163|  18.3k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  18.3k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  985|  18.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 15.8k, False: 2.53k]
  |  |  ------------------
  ------------------
 2165|  15.8k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  15.8k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  15.8k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 658, False: 15.1k]
  ------------------
 2168|    658|                return it;
 2169|    658|            }
 2170|  15.8k|        }
 2171|  17.6k|        it = val.iterator;
 2172|  17.6k|    }
 2173|       |
 2174|    446|    return it;
 2175|  1.10k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISL_EEE4typeEEESL_:
 1997|  36.2k|{
 1998|  36.2k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1051|  36.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  36.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  36.2k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  36.2k|    auto it = range.begin();
 2002|  36.2k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  36.2k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  986|  36.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 5.40k, False: 30.8k]
  |  |  ------------------
  ------------------
 2005|  5.40k|        ++it;
 2006|  5.40k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|  5.40k|        return {it, {}};
 2008|  5.40k|    }
 2009|       |
 2010|  30.8k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 27.3k, False: 3.49k]
  ------------------
 2011|  27.3k|        ++it;
 2012|  27.3k|        return {it, string_type(1, *range.begin())};
 2013|  27.3k|    }
 2014|       |
 2015|  3.49k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|  3.49k|    return {it, string_type{range.begin(), it}};
 2017|  30.8k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_:
 1264|  5.40k|{
 1265|  5.40k|    auto it = input.begin();
 1266|  6.76k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 6.54k, False: 222]
  ------------------
 1267|  6.54k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 5.18k, False: 1.36k]
  ------------------
 1268|  5.18k|            break;
 1269|  5.18k|        }
 1270|  6.54k|    }
 1271|  5.40k|    return it;
 1272|  5.40k|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EENS1_20incrementable_traitsISL_E15difference_typeEE4typeERSL_SP_SM_:
  282|  3.49k|    {
  283|  3.49k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  3.49k|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SL_EENS1_20incrementable_traitsISL_E15difference_typeEE4typeERSL_SP_SM_:
  226|  3.49k|    {
  227|  3.49k|        constexpr iter_difference_t<I> zero{0};
  228|  3.49k|        iter_difference_t<I> counter{0};
  229|       |
  230|  3.49k|        if (n < zero) {
  ------------------
  |  Branch (230:13): [True: 0, False: 3.49k]
  ------------------
  231|      0|            do {
  232|      0|                --i;
  233|      0|                --counter;  // Yes, really
  234|      0|            } while (++n < zero && i != bound);
  ------------------
  |  Branch (234:22): [True: 0, False: 0]
  |  Branch (234:36): [True: 0, False: 0]
  ------------------
  235|      0|        }
  236|  3.49k|        else {
  237|  11.6k|            while (n-- > zero && i != bound) {
  ------------------
  |  Branch (237:20): [True: 8.29k, False: 3.37k]
  |  Branch (237:34): [True: 8.17k, False: 120]
  ------------------
  238|  8.17k|                ++i;
  239|  8.17k|                ++counter;
  240|  8.17k|            }
  241|  3.49k|        }
  242|       |
  243|  3.49k|        return counter;
  244|  3.49k|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_:
  742|    612|        : m_fptr([](storage fn,
  743|    612|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    612|              cvref<T> obj = *get<T>(fn);
  745|    612|              if constexpr (std::is_void_v<R>) {
  746|    612|                  obj(static_cast<decltype(args)>(args)...);
  747|    612|              }
  748|    612|              else {
  749|    612|                  return obj(static_cast<decltype(args)>(args)...);
  750|    612|              }
  751|    612|          }),
  752|    612|          m_storage(std::addressof(f))
  753|    612|    {
  754|    612|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESY_Di:
  743|  2.06k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.06k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.06k|              else {
  749|  2.06k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.06k|              }
  751|  2.06k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  2.06k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  2.06k|        else if constexpr (std::is_object_v<T>) {
  688|  2.06k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.06k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2236|  2.06k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  2.06k|            return detail::is_cp_space(cp);
 2238|  2.06k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|    612|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    612|        {
  662|    612|        }
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3065|  6.96k|{
 3066|  6.96k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 6.79k, False: 166]
  ------------------
 3067|  6.79k|        auto it = read_while_classic_space(range);
 3068|  6.79k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|  6.79k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  6.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 6.79k]
  |  |  ------------------
  ------------------
 3070|      0|            return unexpected(e);
 3071|      0|        }
 3072|       |
 3073|  6.79k|        return it;
 3074|  6.79k|    }
 3075|       |
 3076|    166|    return read_while_classic_space(range);
 3077|  6.96k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2215|  15.2k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|  15.2k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|  15.2k|        auto buf = make_contiguous_buffer(range);
 2220|  15.2k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|  15.2k|        return ranges::next(range.begin(),
 2222|  15.2k|                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|       |    else {
 2225|       |        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|       |            return detail::is_cp_space(cp);
 2238|       |        });
 2239|       |    }
 2240|  15.2k|}
_ZN3scn2v44impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|  18.1k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|  18.1k|                  ranges::sized_range<Range>) {
 1785|  18.1k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  | 1057|  18.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|  18.1k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1587|  18.1k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|  18.1k|    {
 1589|  18.1k|    }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3155|  6.01k|    {
 3156|  6.01k|        reader_error_handler eh{};
 3157|  6.01k|        get_derived().check_specs_impl(specs, eh);
 3158|  6.01k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  986|  6.01k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 4.58k, False: 1.43k]
  |  |  ------------------
  ------------------
 3159|  4.58k|            return detail::unexpected_scan_error(
 3160|  4.58k|                scan_error::invalid_format_string, eh.m_msg);
 3161|  4.58k|        }
 3162|  1.43k|        return {};
 3163|  6.01k|    }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIcEEcE11get_derivedEv:
 3167|  6.01k|    {
 3168|  6.01k|        return static_cast<Derived&>(*this);
 3169|  6.01k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3535|  6.01k|    {
 3536|  6.01k|        detail::check_int_type_specs(specs, eh);
 3537|  6.01k|    }
_ZNK3scn2v44impl11reader_baseINS1_19reader_impl_for_intIcEEcE19skip_ws_before_readEv:
 3150|  2.70k|    {
 3151|  2.70k|        return true;
 3152|  2.70k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEiEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3589|    382|    {
 3590|    382|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3939|    382|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    382|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    382|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    382|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 382]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|    382|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    382|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|    382|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|    382|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 0, False: 382]
  ------------------
 3594|       |            if constexpr (!std::is_signed_v<T>) {
 3595|       |                return detail::unexpected_scan_error(
 3596|       |                    scan_error::invalid_scanned_value,
 3597|       |                    "Unexpected '-' sign when parsing an "
 3598|       |                    "unsigned value");
 3599|       |            }
 3600|      0|            else {
 3601|      0|                if (specs.type ==
  ------------------
  |  Branch (3601:21): [True: 0, False: 0]
  ------------------
 3602|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3603|      0|                    return detail::unexpected_scan_error(
 3604|      0|                        scan_error::invalid_scanned_value,
 3605|      0|                        "'u'-option disallows negative values");
 3606|      0|                }
 3607|      0|            }
 3608|      0|        }
 3609|       |
 3610|    382|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 0, False: 382]
  ------------------
 3611|      0|            value = T{0};
 3612|      0|            return std::next(prefix_result.iterator);
 3613|      0|        }
 3614|       |
 3615|    382|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  985|    382|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 370, False: 12]
  |  |  ------------------
  ------------------
 3616|    370|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3939|    370|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    370|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    370|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    370|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 370, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    370|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    370|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    370|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    370|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    370|    }                                                  \
  |  |  |  | 3938|    370|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|      0|                    parse_integer_digits_without_thsep(
 3618|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|      0|                        prefix_result.parsed_base));
 3620|       |
 3621|      0|            auto buf = make_contiguous_buffer(
 3622|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|      0|                                        prefix_result.parsed_base));
 3626|       |
 3627|      0|            return ranges::next(
 3628|      0|                prefix_result.iterator,
 3629|      0|                ranges::distance(buf.view().begin(), result_it));
 3630|      0|        }
 3631|       |
 3632|     12|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|     12|            localized_number_formatting_options<CharT>{loc};
 3637|     12|#endif
 3638|       |
 3639|     12|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3939|     12|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|     12|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|     12|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 12, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     12|    }                                                  \
  |  |  |  | 3938|     12|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|      0|                parse_integer_digits_with_thsep(
 3641|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|      0|                    prefix_result.parsed_base, locale_options));
 3643|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|      0|            parse_digits_result;
 3645|       |
 3646|      0|        auto nothsep_source_view =
 3647|      0|            std::basic_string_view<CharT>{nothsep_source};
 3648|      0|        SCN_TRY(
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|      0|            nothsep_source_it,
 3650|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|      0|                                prefix_result.parsed_base));
 3652|       |
 3653|      0|        return ranges::next(
 3654|      0|            prefix_result.iterator,
 3655|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|      0|                ranges::ssize(thsep_indices));
 3657|      0|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3589|    298|    {
 3590|    298|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3939|    298|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    298|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    298|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    298|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 298]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|    298|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    298|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|    298|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|    298|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 0, False: 298]
  ------------------
 3594|       |            if constexpr (!std::is_signed_v<T>) {
 3595|       |                return detail::unexpected_scan_error(
 3596|       |                    scan_error::invalid_scanned_value,
 3597|       |                    "Unexpected '-' sign when parsing an "
 3598|       |                    "unsigned value");
 3599|       |            }
 3600|      0|            else {
 3601|      0|                if (specs.type ==
  ------------------
  |  Branch (3601:21): [True: 0, False: 0]
  ------------------
 3602|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3603|      0|                    return detail::unexpected_scan_error(
 3604|      0|                        scan_error::invalid_scanned_value,
 3605|      0|                        "'u'-option disallows negative values");
 3606|      0|                }
 3607|      0|            }
 3608|      0|        }
 3609|       |
 3610|    298|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 0, False: 298]
  ------------------
 3611|      0|            value = T{0};
 3612|      0|            return std::next(prefix_result.iterator);
 3613|      0|        }
 3614|       |
 3615|    298|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  985|    298|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 286, False: 12]
  |  |  ------------------
  ------------------
 3616|    286|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3939|    286|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    286|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    286|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    286|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 286]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|    286|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    286|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|    286|                    parse_integer_digits_without_thsep(
 3618|    286|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|    286|                        prefix_result.parsed_base));
 3620|       |
 3621|    286|            auto buf = make_contiguous_buffer(
 3622|    286|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|    286|            SCN_TRY(result_it,
  ------------------
  |  | 3939|    286|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    286|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    286|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    286|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 286, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    286|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    286|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    286|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    286|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    286|    }                                                  \
  |  |  |  | 3938|    286|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|      0|                                        prefix_result.parsed_base));
 3626|       |
 3627|      0|            return ranges::next(
 3628|      0|                prefix_result.iterator,
 3629|      0|                ranges::distance(buf.view().begin(), result_it));
 3630|    286|        }
 3631|       |
 3632|     12|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|     12|            localized_number_formatting_options<CharT>{loc};
 3637|     12|#endif
 3638|       |
 3639|     12|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3939|     12|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|     12|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|     12|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 12, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     12|    }                                                  \
  |  |  |  | 3938|     12|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|      0|                parse_integer_digits_with_thsep(
 3641|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|      0|                    prefix_result.parsed_base, locale_options));
 3643|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|      0|            parse_digits_result;
 3645|       |
 3646|      0|        auto nothsep_source_view =
 3647|      0|            std::basic_string_view<CharT>{nothsep_source};
 3648|      0|        SCN_TRY(
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|      0|            nothsep_source_it,
 3650|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|      0|                                prefix_result.parsed_base));
 3652|       |
 3653|      0|        return ranges::next(
 3654|      0|            prefix_result.iterator,
 3655|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|      0|                ranges::ssize(thsep_indices));
 3657|      0|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEjEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3589|    382|    {
 3590|    382|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3939|    382|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    382|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    382|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    382|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 382]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|    382|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    382|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|    382|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|    382|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 0, False: 382]
  ------------------
 3594|      0|            if constexpr (!std::is_signed_v<T>) {
 3595|      0|                return detail::unexpected_scan_error(
 3596|      0|                    scan_error::invalid_scanned_value,
 3597|      0|                    "Unexpected '-' sign when parsing an "
 3598|      0|                    "unsigned value");
 3599|       |            }
 3600|       |            else {
 3601|       |                if (specs.type ==
 3602|       |                    detail::presentation_type::int_unsigned_decimal) {
 3603|       |                    return detail::unexpected_scan_error(
 3604|       |                        scan_error::invalid_scanned_value,
 3605|       |                        "'u'-option disallows negative values");
 3606|       |                }
 3607|       |            }
 3608|      0|        }
 3609|       |
 3610|    382|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 0, False: 382]
  ------------------
 3611|      0|            value = T{0};
 3612|      0|            return std::next(prefix_result.iterator);
 3613|      0|        }
 3614|       |
 3615|    382|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  985|    382|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 370, False: 12]
  |  |  ------------------
  ------------------
 3616|    370|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3939|    370|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    370|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    370|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    370|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 370, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    370|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    370|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    370|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    370|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    370|    }                                                  \
  |  |  |  | 3938|    370|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|      0|                    parse_integer_digits_without_thsep(
 3618|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|      0|                        prefix_result.parsed_base));
 3620|       |
 3621|      0|            auto buf = make_contiguous_buffer(
 3622|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|      0|                                        prefix_result.parsed_base));
 3626|       |
 3627|      0|            return ranges::next(
 3628|      0|                prefix_result.iterator,
 3629|      0|                ranges::distance(buf.view().begin(), result_it));
 3630|      0|        }
 3631|       |
 3632|     12|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|     12|            localized_number_formatting_options<CharT>{loc};
 3637|     12|#endif
 3638|       |
 3639|     12|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3939|     12|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|     12|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|     12|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 12, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     12|    }                                                  \
  |  |  |  | 3938|     12|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|      0|                parse_integer_digits_with_thsep(
 3641|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|      0|                    prefix_result.parsed_base, locale_options));
 3643|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|      0|            parse_digits_result;
 3645|       |
 3646|      0|        auto nothsep_source_view =
 3647|      0|            std::basic_string_view<CharT>{nothsep_source};
 3648|      0|        SCN_TRY(
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|      0|            nothsep_source_it,
 3650|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|      0|                                prefix_result.parsed_base));
 3652|       |
 3653|      0|        return ranges::next(
 3654|      0|            prefix_result.iterator,
 3655|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|      0|                ranges::ssize(thsep_indices));
 3657|      0|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3589|    298|    {
 3590|    298|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3939|    298|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    298|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    298|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    298|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 298]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|    298|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    298|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|    298|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|    298|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 0, False: 298]
  ------------------
 3594|      0|            if constexpr (!std::is_signed_v<T>) {
 3595|      0|                return detail::unexpected_scan_error(
 3596|      0|                    scan_error::invalid_scanned_value,
 3597|      0|                    "Unexpected '-' sign when parsing an "
 3598|      0|                    "unsigned value");
 3599|       |            }
 3600|       |            else {
 3601|       |                if (specs.type ==
 3602|       |                    detail::presentation_type::int_unsigned_decimal) {
 3603|       |                    return detail::unexpected_scan_error(
 3604|       |                        scan_error::invalid_scanned_value,
 3605|       |                        "'u'-option disallows negative values");
 3606|       |                }
 3607|       |            }
 3608|      0|        }
 3609|       |
 3610|    298|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 0, False: 298]
  ------------------
 3611|      0|            value = T{0};
 3612|      0|            return std::next(prefix_result.iterator);
 3613|      0|        }
 3614|       |
 3615|    298|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  985|    298|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 286, False: 12]
  |  |  ------------------
  ------------------
 3616|    286|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3939|    286|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    286|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    286|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    286|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 286]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|    286|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    286|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|    286|                    parse_integer_digits_without_thsep(
 3618|    286|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|    286|                        prefix_result.parsed_base));
 3620|       |
 3621|    286|            auto buf = make_contiguous_buffer(
 3622|    286|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|    286|            SCN_TRY(result_it,
  ------------------
  |  | 3939|    286|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    286|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    286|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    286|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 286, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    286|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    286|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    286|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    286|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    286|    }                                                  \
  |  |  |  | 3938|    286|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|      0|                                        prefix_result.parsed_base));
 3626|       |
 3627|      0|            return ranges::next(
 3628|      0|                prefix_result.iterator,
 3629|      0|                ranges::distance(buf.view().begin(), result_it));
 3630|    286|        }
 3631|       |
 3632|     12|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|     12|            localized_number_formatting_options<CharT>{loc};
 3637|     12|#endif
 3638|       |
 3639|     12|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3939|     12|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|     12|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|     12|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 12, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     12|    }                                                  \
  |  |  |  | 3938|     12|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|      0|                parse_integer_digits_with_thsep(
 3641|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|      0|                    prefix_result.parsed_base, locale_options));
 3643|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|      0|            parse_digits_result;
 3645|       |
 3646|      0|        auto nothsep_source_view =
 3647|      0|            std::basic_string_view<CharT>{nothsep_source};
 3648|      0|        SCN_TRY(
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|      0|            nothsep_source_it,
 3650|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|      0|                                prefix_result.parsed_base));
 3652|       |
 3653|      0|        return ranges::next(
 3654|      0|            prefix_result.iterator,
 3655|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|      0|                ranges::ssize(thsep_indices));
 3657|      0|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEmEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3589|    344|    {
 3590|    344|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3939|    344|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    344|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    344|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    344|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 344]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|    344|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    344|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|    344|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|    344|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 0, False: 344]
  ------------------
 3594|      0|            if constexpr (!std::is_signed_v<T>) {
 3595|      0|                return detail::unexpected_scan_error(
 3596|      0|                    scan_error::invalid_scanned_value,
 3597|      0|                    "Unexpected '-' sign when parsing an "
 3598|      0|                    "unsigned value");
 3599|       |            }
 3600|       |            else {
 3601|       |                if (specs.type ==
 3602|       |                    detail::presentation_type::int_unsigned_decimal) {
 3603|       |                    return detail::unexpected_scan_error(
 3604|       |                        scan_error::invalid_scanned_value,
 3605|       |                        "'u'-option disallows negative values");
 3606|       |                }
 3607|       |            }
 3608|      0|        }
 3609|       |
 3610|    344|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 0, False: 344]
  ------------------
 3611|      0|            value = T{0};
 3612|      0|            return std::next(prefix_result.iterator);
 3613|      0|        }
 3614|       |
 3615|    344|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  985|    344|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 344, False: 0]
  |  |  ------------------
  ------------------
 3616|    344|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3939|    344|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    344|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    344|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    344|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 344, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    344|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    344|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    344|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    344|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    344|    }                                                  \
  |  |  |  | 3938|    344|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|      0|                    parse_integer_digits_without_thsep(
 3618|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|      0|                        prefix_result.parsed_base));
 3620|       |
 3621|      0|            auto buf = make_contiguous_buffer(
 3622|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|      0|                                        prefix_result.parsed_base));
 3626|       |
 3627|      0|            return ranges::next(
 3628|      0|                prefix_result.iterator,
 3629|      0|                ranges::distance(buf.view().begin(), result_it));
 3630|      0|        }
 3631|       |
 3632|      0|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|      0|            localized_number_formatting_options<CharT>{loc};
 3637|      0|#endif
 3638|       |
 3639|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|      0|                parse_integer_digits_with_thsep(
 3641|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|      0|                    prefix_result.parsed_base, locale_options));
 3643|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|      0|            parse_digits_result;
 3645|       |
 3646|      0|        auto nothsep_source_view =
 3647|      0|            std::basic_string_view<CharT>{nothsep_source};
 3648|      0|        SCN_TRY(
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|      0|            nothsep_source_it,
 3650|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|      0|                                prefix_result.parsed_base));
 3652|       |
 3653|      0|        return ranges::next(
 3654|      0|            prefix_result.iterator,
 3655|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|      0|                ranges::ssize(thsep_indices));
 3657|      0|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEmEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3589|    900|    {
 3590|    900|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3939|    900|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    900|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    900|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    900|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 900]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|    900|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    900|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|    900|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|    900|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 0, False: 900]
  ------------------
 3594|      0|            if constexpr (!std::is_signed_v<T>) {
 3595|      0|                return detail::unexpected_scan_error(
 3596|      0|                    scan_error::invalid_scanned_value,
 3597|      0|                    "Unexpected '-' sign when parsing an "
 3598|      0|                    "unsigned value");
 3599|       |            }
 3600|       |            else {
 3601|       |                if (specs.type ==
 3602|       |                    detail::presentation_type::int_unsigned_decimal) {
 3603|       |                    return detail::unexpected_scan_error(
 3604|       |                        scan_error::invalid_scanned_value,
 3605|       |                        "'u'-option disallows negative values");
 3606|       |                }
 3607|       |            }
 3608|      0|        }
 3609|       |
 3610|    900|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 0, False: 900]
  ------------------
 3611|      0|            value = T{0};
 3612|      0|            return std::next(prefix_result.iterator);
 3613|      0|        }
 3614|       |
 3615|    900|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  985|    900|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 900, False: 0]
  |  |  ------------------
  ------------------
 3616|    900|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3939|    900|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    900|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    900|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    900|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 900]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|    900|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    900|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|    900|                    parse_integer_digits_without_thsep(
 3618|    900|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|    900|                        prefix_result.parsed_base));
 3620|       |
 3621|    900|            auto buf = make_contiguous_buffer(
 3622|    900|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|    900|            SCN_TRY(result_it,
  ------------------
  |  | 3939|    900|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    900|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    900|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    900|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 900, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    900|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    900|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    900|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    900|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    900|    }                                                  \
  |  |  |  | 3938|    900|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|      0|                                        prefix_result.parsed_base));
 3626|       |
 3627|      0|            return ranges::next(
 3628|      0|                prefix_result.iterator,
 3629|      0|                ranges::distance(buf.view().begin(), result_it));
 3630|    900|        }
 3631|       |
 3632|      0|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|      0|            localized_number_formatting_options<CharT>{loc};
 3637|      0|#endif
 3638|       |
 3639|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|      0|                parse_integer_digits_with_thsep(
 3641|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|      0|                    prefix_result.parsed_base, locale_options));
 3643|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|      0|            parse_digits_result;
 3645|       |
 3646|      0|        auto nothsep_source_view =
 3647|      0|            std::basic_string_view<CharT>{nothsep_source};
 3648|      0|        SCN_TRY(
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|      0|            nothsep_source_it,
 3650|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|      0|                                prefix_result.parsed_base));
 3652|       |
 3653|      0|        return ranges::next(
 3654|      0|            prefix_result.iterator,
 3655|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|      0|                ranges::ssize(thsep_indices));
 3657|      0|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3155|  3.00k|    {
 3156|  3.00k|        reader_error_handler eh{};
 3157|  3.00k|        get_derived().check_specs_impl(specs, eh);
 3158|  3.00k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  986|  3.00k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 2.28k, False: 728]
  |  |  ------------------
  ------------------
 3159|  2.28k|            return detail::unexpected_scan_error(
 3160|  2.28k|                scan_error::invalid_format_string, eh.m_msg);
 3161|  2.28k|        }
 3162|    728|        return {};
 3163|  3.00k|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3167|  3.00k|    {
 3168|  3.00k|        return static_cast<Derived&>(*this);
 3169|  3.00k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4177|  3.00k|    {
 4178|  3.00k|        detail::check_float_type_specs(specs, eh);
 4179|  3.00k|    }
_ZNK3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3150|  1.36k|    {
 3151|  1.36k|        return true;
 3152|  1.36k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4249|    690|    {
 4250|    690|        unsigned options{};
 4251|    690|        if (specs.localized) {
  ------------------
  |  Branch (4251:13): [True: 18, False: 672]
  ------------------
 4252|     18|            options |= float_reader_base::allow_thsep;
 4253|     18|        }
 4254|       |
 4255|    690|        SCN_GCC_COMPAT_PUSH
 4256|    690|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4257|       |
 4258|    690|        switch (specs.type) {
 4259|     28|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4259:13): [True: 28, False: 662]
  ------------------
 4260|     28|                return options | float_reader_base::allow_fixed;
 4261|       |
 4262|     12|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4262:13): [True: 12, False: 678]
  ------------------
 4263|     12|                return options | float_reader_base::allow_scientific;
 4264|       |
 4265|     16|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4265:13): [True: 16, False: 674]
  ------------------
 4266|     16|                return options | float_reader_base::allow_hex;
 4267|       |
 4268|     12|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4268:13): [True: 12, False: 678]
  ------------------
 4269|     12|                return options | float_reader_base::allow_scientific |
 4270|     12|                       float_reader_base::allow_fixed;
 4271|       |
 4272|    622|            case detail::presentation_type::none:
  ------------------
  |  Branch (4272:13): [True: 622, False: 68]
  ------------------
 4273|    622|                return options | float_reader_base::allow_scientific |
 4274|    622|                       float_reader_base::allow_fixed |
 4275|    622|                       float_reader_base::allow_hex;
 4276|       |
 4277|      0|            default:
  ------------------
  |  Branch (4277:13): [True: 0, False: 690]
  ------------------
 4278|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1051|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4279|    690|                SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4280|    690|        }
 4281|       |
 4282|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4283|    690|    }
_ZN3scn2v44impl12float_readerIcEC2Ej:
 3701|    690|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v44impl35localized_number_formatting_optionsIcEC2Ev:
 1869|  1.32k|    localized_number_formatting_options() = default;
_ZN3scn2v44impl24contiguous_range_factoryIcEC2Ev:
 1630|  2.64k|    contiguous_range_factory() = default;
_ZN3scn2v44impl12float_readerIcE17handle_separatorsEv:
 4089|    908|    {
 4090|    908|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4090:13): [True: 908, False: 0]
  ------------------
 4091|    908|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4091:13): [True: 908, False: 0]
  ------------------
 4092|    908|            return;
 4093|    908|        }
 4094|       |
 4095|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4096|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4096:13): [True: 0, False: 0]
  ------------------
 4097|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4097:27): [True: 0, False: 0]
  ------------------
 4098|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4098:21): [True: 0, False: 0]
  ------------------
 4099|      0|                    ch = CharT{'.'};
 4100|      0|                }
 4101|      0|            }
 4102|      0|        }
 4103|       |
 4104|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4104:13): [True: 0, False: 0]
  ------------------
 4105|      0|            return;
 4106|      0|        }
 4107|       |
 4108|      0|        auto first =
 4109|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4110|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4110:13): [True: 0, False: 0]
  ------------------
 4111|      0|            return;
 4112|      0|        }
 4113|       |
 4114|      0|        m_thsep_indices.push_back(
 4115|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4116|       |
 4117|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4117:31): [True: 0, False: 0]
  ------------------
 4118|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4118:17): [True: 0, False: 0]
  ------------------
 4119|      0|                *first++ = std::move(*it);
 4120|      0|            }
 4121|      0|            else {
 4122|      0|                m_thsep_indices.push_back(
 4123|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4124|      0|            }
 4125|      0|        }
 4126|       |
 4127|      0|        str.erase(first, str.end());
 4128|      0|    }
_ZNK3scn2v44impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1685|    968|    {
 1686|    968|        return m_storage.has_value();
 1687|    968|    }
_ZNR3scn2v44impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1690|    484|    {
 1691|    484|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  | 1051|    484|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    484|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1692|    484|        return *m_storage;
 1693|    484|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EclESC_SJ_SL_:
  762|    392|    {
  763|    392|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1057|    392|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    392|    }
_ZN3scn2v44impl12float_readerIcE21read_source_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3720|     12|    {
 3721|     12|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3722|     12|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  985|     12|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 0, False: 12]
  |  |  ------------------
  ------------------
 3723|      0|            m_locale_options.thousands_sep = CharT{0};
 3724|      0|        }
 3725|       |
 3726|     12|        return read_source_impl(range);
 3727|     12|    }
_ZN3scn2v44impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_:
 3746|    392|    {
 3747|    392|        SCN_TRY(sign_result,
  ------------------
  |  | 3939|    392|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    392|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    392|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    392|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 392]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|    392|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    392|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3748|    392|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3749|    392|        auto it = sign_result.first;
 3750|    392|        m_sign = sign_result.second;
 3751|       |
 3752|    392|        auto digits_begin = it;
 3753|    392|        auto r = ranges::subrange{it, range.end()};
 3754|       |        if constexpr (ranges::contiguous_range<Range> &&
 3755|       |                      ranges::sized_range<Range>) {
 3756|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3757|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3758|       |                SCN_TRY_ASSIGN(
 3759|       |                    it,
 3760|       |                    do_read_source_impl(
 3761|       |                        r,
 3762|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3763|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3764|       |            }
 3765|       |            else {
 3766|       |                auto cb = [&](const auto& rr)
 3767|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3768|       |                    auto res = read_all(rr);
 3769|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3770|       |                        return detail::unexpected_scan_error(
 3771|       |                            scan_error::invalid_scanned_value,
 3772|       |                            "Invalid float value");
 3773|       |                    }
 3774|       |                    return res;
 3775|       |                };
 3776|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3777|       |            }
 3778|       |        }
 3779|    392|        else {
 3780|    392|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3934|    392|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|    392|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|    392|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 392, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|    392|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|    392|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|    392|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|    392|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    392|    }                                                  \
  |  | 3938|    392|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|    392|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3781|      0|                it,
 3782|      0|                do_read_source_impl(
 3783|      0|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3784|      0|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3785|      0|        }
 3786|       |
 3787|    392|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1051|    392|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    392|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3788|       |
 3789|      0|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3789:13): [True: 0, False: 0]
  |  Branch (3789:48): [True: 0, False: 0]
  ------------------
 3790|      0|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3790:13): [True: 0, False: 0]
  ------------------
 3791|      0|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3791:13): [True: 0, False: 0]
  ------------------
 3792|      0|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3793|      0|        }
 3794|       |
 3795|      0|        handle_separators();
 3796|       |
 3797|      0|        return it;
 3798|    392|    }
_ZN3scn2v44impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEZNS3_16read_source_implISG_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_EUlRKSO_E_ZNSK_ISG_EEST_SO_EUlSV_E0_EEST_SO_OT0_OT1_:
 4032|    392|    {
 4033|    392|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4034|    392|        const bool allowed_nonhex =
 4035|    392|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4036|    392|             ~static_cast<unsigned>(allow_hex)) != 0;
 4037|       |
 4038|    392|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4038:39): [True: 392, False: 0]
  |  Branch (4038:45): [True: 0, False: 392]
  ------------------
 4039|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4040|      0|                scan_error::invalid_scanned_value,
 4041|      0|                "Invalid infinite floating-point value"));
 4042|      0|        }
 4043|    392|        else if (r) {
  ------------------
  |  Branch (4043:18): [True: 0, False: 392]
  ------------------
 4044|      0|            return *r;
 4045|      0|        }
 4046|       |
 4047|    392|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4047:39): [True: 392, False: 0]
  |  Branch (4047:45): [True: 0, False: 392]
  ------------------
 4048|      0|            return unexpected(r.error());
 4049|      0|        }
 4050|    392|        else if (r) {
  ------------------
  |  Branch (4050:18): [True: 0, False: 392]
  ------------------
 4051|      0|            return *r;
 4052|      0|        }
 4053|       |
 4054|    392|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4054:13): [True: 362, False: 30]
  |  Branch (4054:28): [True: 8, False: 354]
  ------------------
 4055|       |            // only hex allowed:
 4056|       |            // prefix "0x" allowed, not required
 4057|      8|            auto it = range.begin();
 4058|       |
 4059|      8|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4059:22): [True: 0, False: 8]
  ------------------
 4060|      0|                m_kind = float_kind::hex_with_prefix;
 4061|      0|                it = *r;
 4062|      0|            }
 4063|      8|            else {
 4064|      8|                m_kind = float_kind::hex_without_prefix;
 4065|      8|            }
 4066|       |
 4067|      8|            return read_hex(ranges::subrange{it, range.end()});
 4068|      8|        }
 4069|    384|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4069:13): [True: 30, False: 354]
  |  Branch (4069:29): [True: 30, False: 0]
  ------------------
 4070|       |            // only nonhex allowed:
 4071|       |            // no prefix allowed
 4072|     30|            m_kind = float_kind::generic;
 4073|     30|            return read_regular_float(range);
 4074|     30|        }
 4075|       |        // both hex and nonhex allowed:
 4076|       |        // check for "0x" prefix -> hex,
 4077|       |        // regular otherwise
 4078|       |
 4079|    354|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  986|    354|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 354]
  |  |  ------------------
  ------------------
 4080|      0|            m_kind = float_kind::hex_with_prefix;
 4081|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4082|      0|        }
 4083|       |
 4084|    354|        m_kind = float_kind::generic;
 4085|    354|        return read_regular(range);
 4086|    354|    }
_ZN3scn2v44impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3840|    392|    {
 3841|    392|        auto it = range.begin();
 3842|    392|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3842:73): [True: 392, False: 0]
  ------------------
 3843|    392|            return unexpected(r.error());
 3844|    392|        }
 3845|      0|        else {
 3846|      0|            it = *r;
 3847|      0|        }
 3848|       |
 3849|      0|        if (auto r = read_matching_string_classic_nocase(
 3850|      0|                ranges::subrange{it, range.end()}, "inity");
 3851|      0|            !r) {
  ------------------
  |  Branch (3851:13): [True: 0, False: 0]
  ------------------
 3852|      0|            m_kind = float_kind::inf_short;
 3853|      0|            return it;
 3854|      0|        }
 3855|      0|        else {
 3856|      0|            m_kind = float_kind::inf_long;
 3857|      0|            return *r;
 3858|      0|        }
 3859|      0|    }
_ZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3863|    392|    {
 3864|    392|        auto it = range.begin();
 3865|    392|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3865:73): [True: 392, False: 0]
  ------------------
 3866|    392|            return r.transform_error(map_parse_error_to_scan_error(
 3867|    392|                scan_error::invalid_scanned_value,
 3868|    392|                "Invalid floating-point NaN value"));
 3869|    392|        }
 3870|      0|        else {
 3871|      0|            it = *r;
 3872|      0|        }
 3873|       |
 3874|      0|        if (auto r =
 3875|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3876|      0|            !r) {
  ------------------
  |  Branch (3876:13): [True: 0, False: 0]
  ------------------
 3877|      0|            m_kind = float_kind::nan_simple;
 3878|      0|            return it;
 3879|      0|        }
 3880|      0|        else {
 3881|      0|            it = *r;
 3882|      0|        }
 3883|       |
 3884|      0|        auto payload_beg_it = it;
 3885|      0|        it = read_while_code_unit(
 3886|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3887|      0|                return is_ascii_char(ch) &&
 3888|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3889|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3890|      0|            });
 3891|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3892|       |
 3893|      0|        m_kind = float_kind::nan_with_payload;
 3894|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3894:18): [True: 0, False: 0]
  ------------------
 3895|      0|                                             ')')) {
 3896|      0|            return *r;
 3897|      0|        }
 3898|      0|        return detail::unexpected_scan_error(
 3899|      0|            scan_error::invalid_scanned_value,
 3900|      0|            "Invalid floating-point NaN payload");
 3901|      0|    }
_ZN3scn2v44impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3833|    362|    {
 3834|    362|        return read_matching_string_classic_nocase(range, "0x");
 3835|    362|    }
_ZN3scn2v44impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3934|      8|    {
 3935|      8|        auto it = range.begin();
 3936|       |
 3937|      8|        std::ptrdiff_t digits_count = 0;
 3938|      8|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3939|      8|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  986|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 8, False: 0]
  |  |  ------------------
  ------------------
 3940|      8|            return r.transform_error(map_parse_error_to_scan_error(
 3941|      8|                scan_error::invalid_scanned_value,
 3942|      8|                "Invalid hexadecimal floating-point value"));
 3943|      8|        }
 3944|      0|        else {
 3945|      0|            digits_count += ranges::distance(it, *r);
 3946|      0|            it = *r;
 3947|      0|        }
 3948|       |
 3949|      0|        m_integral_part_length = digits_count;
 3950|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3950:18): [True: 0, False: 0]
  ------------------
 3951|      0|                                             m_locale_options.decimal_point)) {
 3952|      0|            it = *r;
 3953|      0|        }
 3954|       |
 3955|      0|        if (auto r =
  ------------------
  |  Branch (3955:18): [True: 0, False: 0]
  ------------------
 3956|      0|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3957|      0|            digits_count += ranges::distance(it, *r);
 3958|      0|            it = *r;
 3959|      0|        }
 3960|       |
 3961|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3962|      0|            return detail::unexpected_scan_error(
 3963|      0|                scan_error::invalid_scanned_value,
 3964|      0|                "No significand digits in hexfloat");
 3965|      0|        }
 3966|       |
 3967|      0|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3968|       |
 3969|      0|        return it;
 3970|      0|    }
_ZN3scn2v44impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3818|      8|    {
 3819|      8|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  986|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 8]
  |  |  |  Branch (986:45): [True: 0, False: 8]
  |  |  |  Branch (986:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3820|      8|                         thsep_allowed)) {
 3821|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3822|      0|                return char_to_int(ch) < 16 ||
 3823|      0|                       ch == m_locale_options.thousands_sep;
 3824|      0|            });
 3825|      0|        }
 3826|       |
 3827|      8|        return read_while1_code_unit(
 3828|      8|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3829|      8|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_:
  742|      8|        : m_fptr([](storage fn,
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|      8|              if constexpr (std::is_void_v<R>) {
  746|      8|                  obj(static_cast<decltype(args)>(args)...);
  747|      8|              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
  752|      8|          m_storage(std::addressof(f))
  753|      8|    {
  754|      8|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEcE_clES18_c:
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlcE0_EEDaNS3_7storageE:
  683|      8|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|      8|        else if constexpr (std::is_object_v<T>) {
  688|      8|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|      8|    }
_ZZN3scn2v44impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlcE0_clEc:
 3828|      8|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_TnPNSP_9enable_ifIXsr3stdE11is_object_vISR_EEvE4typeELPv0EEEPSR_:
  660|      8|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      8|        {
  662|      8|        }
_ZN3scn2v44impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3975|    384|    {
 3976|    384|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3977|    384|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3977:35): [True: 370, False: 14]
  |  Branch (3977:50): [True: 8, False: 362]
  ------------------
 3978|       |
 3979|    384|        auto it = ranges::begin(range);
 3980|    384|        std::ptrdiff_t digits_count = 0;
 3981|       |
 3982|    384|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3983|    384|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  986|    384|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 384, False: 0]
  |  |  ------------------
  ------------------
 3984|    384|            return r.transform_error(
 3985|    384|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3986|    384|                                              "Invalid floating-point value"));
 3987|    384|        }
 3988|      0|        else {
 3989|      0|            digits_count += ranges::distance(it, *r);
 3990|      0|            it = *r;
 3991|      0|        }
 3992|       |
 3993|      0|        m_integral_part_length = digits_count;
 3994|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3994:18): [True: 0, False: 0]
  ------------------
 3995|      0|                                             m_locale_options.decimal_point)) {
 3996|      0|            it = *r;
 3997|      0|        }
 3998|       |
 3999|      0|        if (auto r =
  ------------------
  |  Branch (3999:18): [True: 0, False: 0]
  ------------------
 4000|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4001|      0|            digits_count += ranges::distance(it, *r);
 4002|      0|            it = *r;
 4003|      0|        }
 4004|       |
 4005|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 4006|      0|            return detail::unexpected_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "No significand digits in float");
 4009|      0|        }
 4010|       |
 4011|      0|        auto beg_exp_it = it;
 4012|      0|        if (allowed_exp) {
  ------------------
  |  Branch (4012:13): [True: 0, False: 0]
  ------------------
 4013|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4014|      0|        }
 4015|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4015:13): [True: 0, False: 0]
  |  Branch (4015:29): [True: 0, False: 0]
  ------------------
 4016|      0|            return detail::unexpected_scan_error(
 4017|      0|                scan_error::invalid_scanned_value,
 4018|      0|                "No exponent given to scientific float");
 4019|      0|        }
 4020|       |
 4021|      0|        m_kind =
 4022|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4022:13): [True: 0, False: 0]
  ------------------
 4023|       |
 4024|      0|        return it;
 4025|      0|    }
_ZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3803|    384|    {
 3804|    384|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  986|    384|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 384]
  |  |  |  Branch (986:45): [True: 0, False: 384]
  |  |  |  Branch (986:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3805|    384|                         thsep_allowed)) {
 3806|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3807|      0|                return char_to_int(ch) < 10 ||
 3808|      0|                       ch == m_locale_options.thousands_sep;
 3809|      0|            });
 3810|      0|        }
 3811|       |
 3812|    384|        return read_while1_code_unit(
 3813|    384|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3814|    384|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_:
  742|    384|        : m_fptr([](storage fn,
  743|    384|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    384|              cvref<T> obj = *get<T>(fn);
  745|    384|              if constexpr (std::is_void_v<R>) {
  746|    384|                  obj(static_cast<decltype(args)>(args)...);
  747|    384|              }
  748|    384|              else {
  749|    384|                  return obj(static_cast<decltype(args)>(args)...);
  750|    384|              }
  751|    384|          }),
  752|    384|          m_storage(std::addressof(f))
  753|    384|    {
  754|    384|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEcE_clES18_c:
  743|    384|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    384|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    384|              else {
  749|    384|                  return obj(static_cast<decltype(args)>(args)...);
  750|    384|              }
  751|    384|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlcE0_EEDaNS3_7storageE:
  683|    384|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    384|        else if constexpr (std::is_object_v<T>) {
  688|    384|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    384|    }
_ZZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlcE0_clEc:
 3813|    384|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_TnPNSP_9enable_ifIXsr3stdE11is_object_vISR_EEvE4typeELPv0EEEPSR_:
  660|    384|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    384|        {
  662|    384|        }
_ZN3scn2v44impl12float_readerIcE11read_sourceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3706|    380|    {
 3707|    380|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  986|    380|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 380]
  |  |  ------------------
  ------------------
 3708|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3709|      0|                classic_with_thsep_tag{}};
 3710|      0|        }
 3711|       |
 3712|    380|        return read_source_impl(range);
 3713|    380|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|    930|    {
  763|    930|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1057|    930|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    930|    }
_ZN3scn2v44impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3720|      6|    {
 3721|      6|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3722|      6|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  985|      6|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 0, False: 6]
  |  |  ------------------
  ------------------
 3723|      0|            m_locale_options.thousands_sep = CharT{0};
 3724|      0|        }
 3725|       |
 3726|      6|        return read_source_impl(range);
 3727|      6|    }
_ZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3746|    930|    {
 3747|    930|        SCN_TRY(sign_result,
  ------------------
  |  | 3939|    930|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    930|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    930|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    930|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 930]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|    930|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    930|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3748|    930|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3749|    930|        auto it = sign_result.first;
 3750|    930|        m_sign = sign_result.second;
 3751|       |
 3752|    930|        auto digits_begin = it;
 3753|    930|        auto r = ranges::subrange{it, range.end()};
 3754|       |        if constexpr (ranges::contiguous_range<Range> &&
 3755|    930|                      ranges::sized_range<Range>) {
 3756|    930|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  986|  1.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 930]
  |  |  |  Branch (986:45): [True: 0, False: 930]
  |  |  |  Branch (986:45): [True: 0, False: 930]
  |  |  ------------------
  ------------------
 3757|    930|                             m_locale_options.decimal_point != CharT{'.'})) {
 3758|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|      0|    }                                                  \
  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3759|      0|                    it,
 3760|      0|                    do_read_source_impl(
 3761|      0|                        r,
 3762|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3763|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3764|      0|            }
 3765|    930|            else {
 3766|    930|                auto cb = [&](const auto& rr)
 3767|    930|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3768|    930|                    auto res = read_all(rr);
 3769|    930|                    if (SCN_UNLIKELY(res == r.begin())) {
 3770|    930|                        return detail::unexpected_scan_error(
 3771|    930|                            scan_error::invalid_scanned_value,
 3772|    930|                            "Invalid float value");
 3773|    930|                    }
 3774|    930|                    return res;
 3775|    930|                };
 3776|    930|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3934|    930|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|    930|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|    930|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 22, False: 908]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|     22|    }                                                  \
  |  | 3938|    930|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|    930|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3777|    908|            }
 3778|       |        }
 3779|       |        else {
 3780|       |            SCN_TRY_ASSIGN(
 3781|       |                it,
 3782|       |                do_read_source_impl(
 3783|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3784|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3785|       |        }
 3786|       |
 3787|    930|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1051|    930|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    930|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3788|       |
 3789|    908|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3789:13): [True: 908, False: 0]
  |  Branch (3789:48): [True: 908, False: 0]
  ------------------
 3790|    908|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3790:13): [True: 908, False: 0]
  ------------------
 3791|    908|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3791:13): [True: 908, False: 0]
  ------------------
 3792|    908|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3793|    908|        }
 3794|       |
 3795|    908|        handle_separators();
 3796|       |
 3797|    908|        return it;
 3798|    930|    }
_ZN3scn2v44impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3840|    930|    {
 3841|    930|        auto it = range.begin();
 3842|    930|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3842:73): [True: 930, False: 0]
  ------------------
 3843|    930|            return unexpected(r.error());
 3844|    930|        }
 3845|      0|        else {
 3846|      0|            it = *r;
 3847|      0|        }
 3848|       |
 3849|      0|        if (auto r = read_matching_string_classic_nocase(
 3850|      0|                ranges::subrange{it, range.end()}, "inity");
 3851|      0|            !r) {
  ------------------
  |  Branch (3851:13): [True: 0, False: 0]
  ------------------
 3852|      0|            m_kind = float_kind::inf_short;
 3853|      0|            return it;
 3854|      0|        }
 3855|      0|        else {
 3856|      0|            m_kind = float_kind::inf_long;
 3857|      0|            return *r;
 3858|      0|        }
 3859|      0|    }
_ZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3863|    930|    {
 3864|    930|        auto it = range.begin();
 3865|    930|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3865:73): [True: 930, False: 0]
  ------------------
 3866|    930|            return r.transform_error(map_parse_error_to_scan_error(
 3867|    930|                scan_error::invalid_scanned_value,
 3868|    930|                "Invalid floating-point NaN value"));
 3869|    930|        }
 3870|      0|        else {
 3871|      0|            it = *r;
 3872|      0|        }
 3873|       |
 3874|      0|        if (auto r =
 3875|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3876|      0|            !r) {
  ------------------
  |  Branch (3876:13): [True: 0, False: 0]
  ------------------
 3877|      0|            m_kind = float_kind::nan_simple;
 3878|      0|            return it;
 3879|      0|        }
 3880|      0|        else {
 3881|      0|            it = *r;
 3882|      0|        }
 3883|       |
 3884|      0|        auto payload_beg_it = it;
 3885|      0|        it = read_while_code_unit(
 3886|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3887|      0|                return is_ascii_char(ch) &&
 3888|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3889|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3890|      0|            });
 3891|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3892|       |
 3893|      0|        m_kind = float_kind::nan_with_payload;
 3894|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3894:18): [True: 0, False: 0]
  ------------------
 3895|      0|                                             ')')) {
 3896|      0|            return *r;
 3897|      0|        }
 3898|      0|        return detail::unexpected_scan_error(
 3899|      0|            scan_error::invalid_scanned_value,
 3900|      0|            "Invalid floating-point NaN payload");
 3901|      0|    }
_ZN3scn2v44impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|    908|    {
 3834|    908|        return read_matching_string_classic_nocase(range, "0x");
 3835|    908|    }
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2094|     22|{
 2095|     22|    auto it = read_while_code_unit(range, pred);
 2096|     22|    if (it == range.begin()) {
  ------------------
  |  Branch (2096:9): [True: 22, False: 0]
  ------------------
 2097|     22|        return unexpected(parse_error::error);
 2098|     22|    }
 2099|      0|    return it;
 2100|     22|}
_ZN3scn2v44impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3975|     22|    {
 3976|     22|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3977|     22|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3977:35): [True: 8, False: 14]
  |  Branch (3977:50): [True: 4, False: 4]
  ------------------
 3978|       |
 3979|     22|        auto it = ranges::begin(range);
 3980|     22|        std::ptrdiff_t digits_count = 0;
 3981|       |
 3982|     22|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3983|     22|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  986|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 22, False: 0]
  |  |  ------------------
  ------------------
 3984|     22|            return r.transform_error(
 3985|     22|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3986|     22|                                              "Invalid floating-point value"));
 3987|     22|        }
 3988|      0|        else {
 3989|      0|            digits_count += ranges::distance(it, *r);
 3990|      0|            it = *r;
 3991|      0|        }
 3992|       |
 3993|      0|        m_integral_part_length = digits_count;
 3994|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3994:18): [True: 0, False: 0]
  ------------------
 3995|      0|                                             m_locale_options.decimal_point)) {
 3996|      0|            it = *r;
 3997|      0|        }
 3998|       |
 3999|      0|        if (auto r =
  ------------------
  |  Branch (3999:18): [True: 0, False: 0]
  ------------------
 4000|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4001|      0|            digits_count += ranges::distance(it, *r);
 4002|      0|            it = *r;
 4003|      0|        }
 4004|       |
 4005|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 4006|      0|            return detail::unexpected_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "No significand digits in float");
 4009|      0|        }
 4010|       |
 4011|      0|        auto beg_exp_it = it;
 4012|      0|        if (allowed_exp) {
  ------------------
  |  Branch (4012:13): [True: 0, False: 0]
  ------------------
 4013|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4014|      0|        }
 4015|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4015:13): [True: 0, False: 0]
  |  Branch (4015:29): [True: 0, False: 0]
  ------------------
 4016|      0|            return detail::unexpected_scan_error(
 4017|      0|                scan_error::invalid_scanned_value,
 4018|      0|                "No exponent given to scientific float");
 4019|      0|        }
 4020|       |
 4021|      0|        m_kind =
 4022|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4022:13): [True: 0, False: 0]
  ------------------
 4023|       |
 4024|      0|        return it;
 4025|      0|    }
_ZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3803|     22|    {
 3804|     22|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  986|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 22]
  |  |  |  Branch (986:45): [True: 0, False: 22]
  |  |  |  Branch (986:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3805|     22|                         thsep_allowed)) {
 3806|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3807|      0|                return char_to_int(ch) < 10 ||
 3808|      0|                       ch == m_locale_options.thousands_sep;
 3809|      0|            });
 3810|      0|        }
 3811|       |
 3812|     22|        return read_while1_code_unit(
 3813|     22|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3814|     22|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|     22|        : m_fptr([](storage fn,
  743|     22|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     22|              cvref<T> obj = *get<T>(fn);
  745|     22|              if constexpr (std::is_void_v<R>) {
  746|     22|                  obj(static_cast<decltype(args)>(args)...);
  747|     22|              }
  748|     22|              else {
  749|     22|                  return obj(static_cast<decltype(args)>(args)...);
  750|     22|              }
  751|     22|          }),
  752|     22|          m_storage(std::addressof(f))
  753|     22|    {
  754|     22|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|     22|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     22|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     22|              else {
  749|     22|                  return obj(static_cast<decltype(args)>(args)...);
  750|     22|              }
  751|     22|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  683|     22|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     22|        else if constexpr (std::is_object_v<T>) {
  688|     22|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     22|    }
_ZZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3813|     22|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     22|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     22|        {
  662|     22|        }
_ZN3scn2v44impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 4032|    930|    {
 4033|    930|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4034|    930|        const bool allowed_nonhex =
 4035|    930|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4036|    930|             ~static_cast<unsigned>(allow_hex)) != 0;
 4037|       |
 4038|    930|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4038:39): [True: 930, False: 0]
  |  Branch (4038:45): [True: 0, False: 930]
  ------------------
 4039|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4040|      0|                scan_error::invalid_scanned_value,
 4041|      0|                "Invalid infinite floating-point value"));
 4042|      0|        }
 4043|    930|        else if (r) {
  ------------------
  |  Branch (4043:18): [True: 0, False: 930]
  ------------------
 4044|      0|            return *r;
 4045|      0|        }
 4046|       |
 4047|    930|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4047:39): [True: 930, False: 0]
  |  Branch (4047:45): [True: 0, False: 930]
  ------------------
 4048|      0|            return unexpected(r.error());
 4049|      0|        }
 4050|    930|        else if (r) {
  ------------------
  |  Branch (4050:18): [True: 0, False: 930]
  ------------------
 4051|      0|            return *r;
 4052|      0|        }
 4053|       |
 4054|    930|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4054:13): [True: 908, False: 22]
  |  Branch (4054:28): [True: 8, False: 900]
  ------------------
 4055|       |            // only hex allowed:
 4056|       |            // prefix "0x" allowed, not required
 4057|      8|            auto it = range.begin();
 4058|       |
 4059|      8|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4059:22): [True: 0, False: 8]
  ------------------
 4060|      0|                m_kind = float_kind::hex_with_prefix;
 4061|      0|                it = *r;
 4062|      0|            }
 4063|      8|            else {
 4064|      8|                m_kind = float_kind::hex_without_prefix;
 4065|      8|            }
 4066|       |
 4067|      8|            return read_hex(ranges::subrange{it, range.end()});
 4068|      8|        }
 4069|    922|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4069:13): [True: 22, False: 900]
  |  Branch (4069:29): [True: 22, False: 0]
  ------------------
 4070|       |            // only nonhex allowed:
 4071|       |            // no prefix allowed
 4072|     22|            m_kind = float_kind::generic;
 4073|     22|            return read_regular_float(range);
 4074|     22|        }
 4075|       |        // both hex and nonhex allowed:
 4076|       |        // check for "0x" prefix -> hex,
 4077|       |        // regular otherwise
 4078|       |
 4079|    900|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  986|    900|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 900]
  |  |  ------------------
  ------------------
 4080|      0|            m_kind = float_kind::hex_with_prefix;
 4081|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4082|      0|        }
 4083|       |
 4084|    900|        m_kind = float_kind::generic;
 4085|    900|        return read_regular(range);
 4086|    900|    }
_ZZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3767|    908|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3768|    908|                    auto res = read_all(rr);
 3769|    908|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  986|    908|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 908]
  |  |  ------------------
  ------------------
 3770|      0|                        return detail::unexpected_scan_error(
 3771|      0|                            scan_error::invalid_scanned_value,
 3772|      0|                            "Invalid float value");
 3773|      0|                    }
 3774|    908|                    return res;
 3775|    908|                };
_ZN3scn2v44impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1937|    908|{
 1938|    908|    return ranges::next(range.begin(), range.end());
 1939|    908|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|    908|    {
  313|    908|        ranges::advance(x, bound);
  314|    908|        return x;
  315|    908|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|    908|    {
  275|    908|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|    908|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|  1.01k|    {
  190|  1.01k|        i = std::move(bound);
  191|  1.01k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1675|    908|    {
 1676|    908|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1057|    908|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|    908|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1719|    908|    {
 1720|    908|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|    908|                      ranges::sized_range<Range>) {
 1725|    908|            m_storage.reset();
 1726|    908|            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|    908|    }
_ZN3scn2v44impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3706|    924|    {
 3707|    924|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  986|    924|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 924]
  |  |  ------------------
  ------------------
 3708|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3709|      0|                classic_with_thsep_tag{}};
 3710|      0|        }
 3711|       |
 3712|    924|        return read_source_impl(range);
 3713|    924|    }
_ZN3scn2v44impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3732|    908|    {
 3733|    908|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1051|    908|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    908|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3734|       |
 3735|    908|        const std::ptrdiff_t sign_len =
 3736|    908|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3736:13): [True: 0, False: 908]
  ------------------
 3737|       |
 3738|    908|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3939|    908|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    908|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    908|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    908|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 908, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    908|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    908|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    908|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    908|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    908|    }                                                  \
  |  |  |  | 3938|    908|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3739|      0|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3740|    908|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 4202|    392|    {
 4203|    392|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|    392|#if !SCN_DISABLE_LOCALE
 4206|    392|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 12, False: 380]
  ------------------
 4207|     12|            return read_impl<Range>(
 4208|     12|                range, rd,
 4209|     12|                [](float_reader<CharT>& r, auto&&... args) {
 4210|     12|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|     12|                },
 4212|     12|                value, loc);
 4213|     12|        }
 4214|    380|#endif
 4215|       |
 4216|    380|        return read_impl<Range>(
 4217|    380|            range, rd,
 4218|    380|            [](float_reader<CharT>& r, auto&&... args) {
 4219|    380|                return r.read_source(SCN_FWD(args)...);
 4220|    380|            },
 4221|    380|            value);
 4222|    392|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNS1_12float_readerIcEENS1_12function_refIFSM_SP_SH_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4238|    392|    {
 4239|    392|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|    392|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  986|    392|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 392, False: 0]
  |  |  ------------------
  ------------------
 4241|    392|            return unexpected(r.error());
 4242|    392|        }
 4243|       |
 4244|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|      0|        return ranges::next(range.begin(), n);
 4246|      0|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_:
  742|     12|        : m_fptr([](storage fn,
  743|     12|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     12|              cvref<T> obj = *get<T>(fn);
  745|     12|              if constexpr (std::is_void_v<R>) {
  746|     12|                  obj(static_cast<decltype(args)>(args)...);
  747|     12|              }
  748|     12|              else {
  749|     12|                  return obj(static_cast<decltype(args)>(args)...);
  750|     12|              }
  751|     12|          }),
  752|     12|          m_storage(std::addressof(f))
  753|     12|    {
  754|     12|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1H_SC_SJ_SL_:
  743|     12|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     12|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     12|              else {
  749|     12|                  return obj(static_cast<decltype(args)>(args)...);
  750|     12|              }
  751|     12|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|     12|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     12|        else if constexpr (std::is_object_v<T>) {
  688|     12|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     12|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSD_ST_EEEDaSW_SZ_:
 4209|     12|                [](float_reader<CharT>& r, auto&&... args) {
 4210|     12|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1057|     12|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|     12|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     12|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     12|        {
  662|     12|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_:
  742|    380|        : m_fptr([](storage fn,
  743|    380|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    380|              cvref<T> obj = *get<T>(fn);
  745|    380|              if constexpr (std::is_void_v<R>) {
  746|    380|                  obj(static_cast<decltype(args)>(args)...);
  747|    380|              }
  748|    380|              else {
  749|    380|                  return obj(static_cast<decltype(args)>(args)...);
  750|    380|              }
  751|    380|          }),
  752|    380|          m_storage(std::addressof(f))
  753|    380|    {
  754|    380|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1H_SC_SJ_SL_:
  743|    380|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    380|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    380|              else {
  749|    380|                  return obj(static_cast<decltype(args)>(args)...);
  750|    380|              }
  751|    380|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|    380|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    380|        else if constexpr (std::is_object_v<T>) {
  688|    380|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    380|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSD_ST_EEEDaSW_SZ_:
 4218|    380|            [](float_reader<CharT>& r, auto&&... args) {
 4219|    380|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1057|    380|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|    380|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|    380|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    380|        {
  662|    380|        }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4202|    298|    {
 4203|    298|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|    298|#if !SCN_DISABLE_LOCALE
 4206|    298|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 6, False: 292]
  ------------------
 4207|      6|            return read_impl<Range>(
 4208|      6|                range, rd,
 4209|      6|                [](float_reader<CharT>& r, auto&&... args) {
 4210|      6|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|      6|                },
 4212|      6|                value, loc);
 4213|      6|        }
 4214|    292|#endif
 4215|       |
 4216|    292|        return read_impl<Range>(
 4217|    292|            range, rd,
 4218|    292|            [](float_reader<CharT>& r, auto&&... args) {
 4219|    292|                return r.read_source(SCN_FWD(args)...);
 4220|    292|            },
 4221|    292|            value);
 4222|    298|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4238|    930|    {
 4239|    930|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|    930|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  986|    930|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 22, False: 908]
  |  |  ------------------
  ------------------
 4241|     22|            return unexpected(r.error());
 4242|     22|        }
 4243|       |
 4244|    908|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3939|    908|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    908|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    908|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    908|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 908, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    908|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    908|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    908|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    908|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    908|    }                                                  \
  |  |  |  | 3938|    908|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|      0|        return ranges::next(range.begin(), n);
 4246|    908|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|      6|        : m_fptr([](storage fn,
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|      6|              if constexpr (std::is_void_v<R>) {
  746|      6|                  obj(static_cast<decltype(args)>(args)...);
  747|      6|              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
  752|      6|          m_storage(std::addressof(f))
  753|      6|    {
  754|      6|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|      6|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|      6|        else if constexpr (std::is_object_v<T>) {
  688|      6|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|      6|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4209|      6|                [](float_reader<CharT>& r, auto&&... args) {
 4210|      6|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1057|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|      6|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|      6|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      6|        {
  662|      6|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|    292|        : m_fptr([](storage fn,
  743|    292|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    292|              cvref<T> obj = *get<T>(fn);
  745|    292|              if constexpr (std::is_void_v<R>) {
  746|    292|                  obj(static_cast<decltype(args)>(args)...);
  747|    292|              }
  748|    292|              else {
  749|    292|                  return obj(static_cast<decltype(args)>(args)...);
  750|    292|              }
  751|    292|          }),
  752|    292|          m_storage(std::addressof(f))
  753|    292|    {
  754|    292|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|    292|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    292|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    292|              else {
  749|    292|                  return obj(static_cast<decltype(args)>(args)...);
  750|    292|              }
  751|    292|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|    292|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    292|        else if constexpr (std::is_object_v<T>) {
  688|    292|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    292|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4218|    292|            [](float_reader<CharT>& r, auto&&... args) {
 4219|    292|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1057|    292|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|    292|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|    292|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    292|        {
  662|    292|        }
_ZN3scn2v44impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEcEEDav:
 5848|  3.59k|{
 5849|       |    if constexpr (std::is_same_v<T, bool>) {
 5850|       |        return reader_impl_for_bool<CharT>{};
 5851|       |    }
 5852|       |    else if constexpr (std::is_same_v<T, char>) {
 5853|       |        return reader_impl_for_char<CharT>{};
 5854|       |    }
 5855|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5856|       |        return reader_impl_for_wchar<CharT>{};
 5857|       |    }
 5858|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5859|       |        return reader_impl_for_code_point<CharT>{};
 5860|       |    }
 5861|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5862|       |                       std::is_same_v<T, std::wstring_view>) {
 5863|       |        return reader_impl_for_string<CharT>{};
 5864|       |    }
 5865|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5866|  3.59k|                       std::is_same_v<T, std::wstring>) {
 5867|  3.59k|        return reader_impl_for_string<CharT>{};
 5868|       |    }
 5869|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5870|       |                       std::is_same_v<T, wregex_matches>) {
 5871|       |        return reader_impl_for_regex_matches<CharT>{};
 5872|       |    }
 5873|       |    else if constexpr (std::is_same_v<T, void*>) {
 5874|       |        return reader_impl_for_voidptr<CharT>{};
 5875|       |    }
 5876|       |    else if constexpr (std::is_floating_point_v<T>) {
 5877|       |        return reader_impl_for_float<CharT>{};
 5878|       |    }
 5879|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5880|       |                       !std::is_same_v<T, wchar_t> &&
 5881|       |                       !std::is_same_v<T, char32_t> &&
 5882|       |                       !std::is_same_v<T, bool>) {
 5883|       |        return reader_impl_for_int<CharT>{};
 5884|       |    }
 5885|       |    else {
 5886|       |        return reader_impl_for_monostate<CharT>{};
 5887|       |    }
 5888|  3.59k|}
_ZN3scn2v44impl13string_readerIcEC2Ev:
 5242|  10.7k|    constexpr string_reader() = default;
_ZN3scn2v44impl11reader_baseINS1_13string_readerIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3155|  8.88k|    {
 3156|  8.88k|        reader_error_handler eh{};
 3157|  8.88k|        get_derived().check_specs_impl(specs, eh);
 3158|  8.88k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  986|  8.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 432, False: 8.45k]
  |  |  ------------------
  ------------------
 3159|    432|            return detail::unexpected_scan_error(
 3160|    432|                scan_error::invalid_format_string, eh.m_msg);
 3161|    432|        }
 3162|  8.45k|        return {};
 3163|  8.88k|    }
_ZN3scn2v44impl11reader_baseINS1_13string_readerIcEEcE11get_derivedEv:
 3167|  8.88k|    {
 3168|  8.88k|        return static_cast<Derived&>(*this);
 3169|  8.88k|    }
_ZN3scn2v44impl13string_readerIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5246|  8.88k|    {
 5247|  8.88k|        detail::check_string_type_specs(specs, eh);
 5248|       |
 5249|  8.88k|        SCN_GCC_PUSH
 5250|  8.88k|        SCN_GCC_IGNORE("-Wswitch")
 5251|  8.88k|        SCN_GCC_IGNORE("-Wswitch-default")
 5252|       |
 5253|  8.88k|        SCN_CLANG_PUSH
 5254|  8.88k|        SCN_CLANG_IGNORE("-Wswitch")
 5255|  8.88k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5256|       |
 5257|  8.88k|        switch (specs.type) {
  ------------------
  |  Branch (5257:17): [True: 426, False: 8.46k]
  ------------------
 5258|  1.90k|            case detail::presentation_type::none:
  ------------------
  |  Branch (5258:13): [True: 1.90k, False: 6.98k]
  ------------------
 5259|  1.90k|                m_type = reader_type::word;
 5260|  1.90k|                break;
 5261|       |
 5262|    732|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5262:13): [True: 732, False: 8.15k]
  ------------------
 5263|    732|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5263:21): [True: 114, False: 618]
  ------------------
 5264|    732|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5264:21): [True: 354, False: 264]
  ------------------
 5265|    468|                    m_type = reader_type::custom_word;
 5266|    468|                }
 5267|    264|                else {
 5268|    264|                    m_type = reader_type::word;
 5269|    264|                }
 5270|    732|                break;
 5271|      0|            }
 5272|       |
 5273|    180|            case detail::presentation_type::character:
  ------------------
  |  Branch (5273:13): [True: 180, False: 8.70k]
  ------------------
 5274|    180|                m_type = reader_type::character;
 5275|    180|                break;
 5276|       |
 5277|  4.45k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5277:13): [True: 4.45k, False: 4.43k]
  ------------------
 5278|  4.45k|                m_type = reader_type::character_set;
 5279|  4.45k|                break;
 5280|       |
 5281|    102|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5281:13): [True: 102, False: 8.78k]
  ------------------
 5282|    102|                m_type = reader_type::regex;
 5283|    102|                break;
 5284|       |
 5285|  1.09k|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5285:13): [True: 1.09k, False: 7.79k]
  ------------------
 5286|  1.09k|                m_type = reader_type::regex_escaped;
 5287|  1.09k|                break;
 5288|  8.88k|        }
 5289|       |
 5290|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5291|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5292|  8.88k|    }
_ZNK3scn2v44impl13string_readerIcE19skip_ws_before_readEv:
 5295|  14.0k|    {
 5296|  14.0k|        return m_type == reader_type::word;
 5297|  14.0k|    }
_ZN3scn2v44impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1241|  9.88k|{
 1242|  9.88k|    auto it = src.begin();
 1243|   811k|    while (it != src.end()) {
  ------------------
  |  Branch (1243:12): [True: 803k, False: 7.83k]
  ------------------
 1244|   803k|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1245|   803k|        if (len == 0) {
  ------------------
  |  Branch (1245:13): [True: 1.40k, False: 802k]
  ------------------
 1246|  1.40k|            return false;
 1247|  1.40k|        }
 1248|   802k|        if (src.end() - it < len) {
  ------------------
  |  Branch (1248:13): [True: 240, False: 801k]
  ------------------
 1249|    240|            return false;
 1250|    240|        }
 1251|   801k|        const auto cp = detail::decode_code_point_exhaustive(
 1252|   801k|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1253|   801k|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1253:13): [True: 408, False: 801k]
  ------------------
 1254|    408|            return false;
 1255|    408|        }
 1256|   801k|        it += len;
 1257|   801k|    }
 1258|  7.83k|    return true;
 1259|  9.88k|}
_ZN3scn2v44impl22transcode_if_necessaryIccEENS0_13scan_expectedIvEEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS9_11char_traitsISB_EENS9_9allocatorISB_EEEE:
 3107|    484|{
 3108|    484|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3109|    484|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (3109:13): [True: 484, False: 0]
  ------------------
 3110|    484|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  | 1055|    484|    static_cast<    \
  |  | 1056|    484|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3111|    484|        }
 3112|      0|        else {
 3113|      0|            dest.assign(source.view());
 3114|      0|        }
 3115|       |    }
 3116|       |    else {
 3117|       |        return transcode_impl(source.view(), dest);
 3118|       |    }
 3119|       |
 3120|    484|    return {};
 3121|    484|}
_ZN3scn2v44impl25character_set_reader_implIcE12specs_helper15handle_nonasciiEv:
 5143|  4.44k|        {
 5144|  4.44k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5144:17): [True: 618, False: 3.82k]
  ------------------
 5145|    618|                return {};
 5146|    618|            }
 5147|       |
 5148|  3.82k|            auto charset_string = specs.charset_string<SourceCharT>();
 5149|  3.82k|            auto it = detail::to_address(charset_string.begin());
 5150|  3.82k|            auto set = detail::parse_presentation_set(
 5151|  3.82k|                it, detail::to_address(charset_string.end()), nonascii);
 5152|  3.82k|            SCN_TRY_DISCARD(nonascii.get_error());
  ------------------
  |  | 3929|  3.82k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  3.82k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 3.82k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 5153|  3.82k|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  | 1052|  3.82k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1048|  3.82k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5154|  3.82k|            SCN_ENSURE(set == charset_string);
  ------------------
  |  | 1052|  3.82k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1048|  3.82k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5155|       |
 5156|  3.82k|            std::sort(nonascii.extra_ranges.begin(),
 5157|  3.82k|                      nonascii.extra_ranges.end());
 5158|  3.82k|            return {};
 5159|  3.82k|        }
_ZNK3scn2v44impl25character_set_reader_implIcE20read_source_callback28on_classic_with_extra_rangesEDi:
 5176|   568k|        {
 5177|   568k|            if (!is_ascii_char(cp)) {
  ------------------
  |  Branch (5177:17): [True: 95.1k, False: 472k]
  ------------------
 5178|  95.1k|                return helper.is_char_set_in_extra_literals(cp);
 5179|  95.1k|            }
 5180|       |
 5181|   472k|            return helper.is_char_set_in_literals(static_cast<char>(cp));
 5182|   568k|        }
_ZNK3scn2v44impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDi:
 5126|  95.1k|        {
 5127|       |            // TODO: binary search?
 5128|  95.1k|            if (nonascii.extra_ranges.empty()) {
  ------------------
  |  Branch (5128:17): [True: 0, False: 95.1k]
  ------------------
 5129|      0|                return false;
 5130|      0|            }
 5131|       |
 5132|  95.1k|            const auto cp_val = static_cast<uint32_t>(cp);
 5133|  95.1k|            return std::find_if(
 5134|  95.1k|                       nonascii.extra_ranges.begin(),
 5135|  95.1k|                       nonascii.extra_ranges.end(),
 5136|  95.1k|                       [cp_val](const auto& pair) noexcept {
 5137|  95.1k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
 5138|  95.1k|                                  static_cast<uint32_t>(pair.second) > cp_val;
 5139|  95.1k|                       }) != nonascii.extra_ranges.end();
 5140|  95.1k|        }
_ZZNK3scn2v44impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDiENKUlRKT_E_clINSt3__14pairIDiDiEEEEDaS7_:
 5136|  12.2M|                       [cp_val](const auto& pair) noexcept {
 5137|  12.2M|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
  ------------------
  |  Branch (5137:35): [True: 12.2M, False: 2.73k]
  ------------------
 5138|  12.2M|                                  static_cast<uint32_t>(pair.second) > cp_val;
  ------------------
  |  Branch (5138:35): [True: 92.8k, False: 12.1M]
  ------------------
 5139|  12.2M|                       }) != nonascii.extra_ranges.end();
_ZNK3scn2v44impl25character_set_reader_implIcE12specs_helper23is_char_set_in_literalsEc:
 5116|   481k|        {
 5117|   481k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  | 1051|   481k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   481k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5118|   481k|            const auto val =
 5119|   481k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5120|   481k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5121|   481k|                    (val % 8)) &
 5122|   481k|                   1u;
 5123|   481k|        }
_ZNK3scn2v44impl25character_set_reader_implIcE20read_source_callback13on_ascii_onlyEc:
 5167|  10.6k|        {
 5168|  10.6k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5168:17): [True: 1.96k, False: 8.72k]
  ------------------
 5169|  1.96k|                return false;
 5170|  1.96k|            }
 5171|       |
 5172|  8.72k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5173|  10.6k|        }
_ZN3scn2v44impl25character_set_reader_implIcE12specs_helperC2ERKNS0_6detail12format_specsE:
 5113|  4.44k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v44impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5313|  1.04k|    {
 5314|  1.04k|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|  1.04k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|  1.04k|        return read_impl(range, specs, value);
 5316|  1.04k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5331|  1.04k|    {
 5332|  1.04k|        SCN_CLANG_PUSH
 5333|  1.04k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|  1.04k|        switch (m_type) {
 5336|    350|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 350, False: 696]
  ------------------
 5337|    350|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|     92|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 92, False: 954]
  ------------------
 5340|     92|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|     92|                                                                   value);
 5342|       |
 5343|     56|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 56, False: 990]
  ------------------
 5344|     56|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|    294|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 294, False: 752]
  ------------------
 5347|    294|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|    294|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|      2|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 2, False: 1.04k]
  ------------------
 5352|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|      2|                    range, specs.charset_string<SourceCharT>(),
 5354|      2|                    specs.regexp_flags, value);
 5355|       |
 5356|    252|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 252, False: 794]
  ------------------
 5357|    252|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|    252|                    range,
 5359|    252|                    get_unescaped_regex_pattern(
 5360|    252|                        specs.charset_string<SourceCharT>()),
 5361|    252|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 1.04k]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1051|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|  1.04k|                SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|  1.04k|        }
 5368|       |
 5369|  1.04k|        SCN_CLANG_POP
 5370|  1.04k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4860|    350|    {
 4861|    350|        return read_string_impl(range, read_until_classic_space(range), value);
 4862|    350|    }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4794|    498|{
 4795|    498|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    498|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    498|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 196, False: 302]
  ------------------
 4799|    196|        return detail::unexpected_scan_error(
 4800|    196|            scan_error::invalid_scanned_value,
 4801|    196|            "Invalid encoding in scanned string");
 4802|    196|    }
 4803|       |
 4804|    302|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3929|    302|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|    302|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 302]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 4805|    302|    return SCN_MOVE(result);
  ------------------
  |  | 1055|    302|    static_cast<    \
  |  | 1056|    302|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    302|}
_ZN3scn2v44impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2186|  1.05k|{
 2187|       |    if constexpr (ranges::contiguous_range<Range> &&
 2188|       |                  ranges::sized_range<Range> &&
 2189|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2190|       |        auto buf = make_contiguous_buffer(range);
 2191|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2192|       |        return ranges::next(range.begin(),
 2193|       |                            ranges::distance(buf.view().begin(), it));
 2194|       |    }
 2195|  1.05k|    else {
 2196|  1.05k|        auto it = range.begin();
 2197|       |
 2198|  1.05k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|  1.05k|            auto seg = get_contiguous_beginning(range);
 2200|  1.05k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2201|  1.05k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2201:17): [True: 0, False: 1.05k]
  ------------------
 2202|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2203|      0|            }
 2204|  1.05k|            ranges::advance(it, seg.size());
 2205|  1.05k|        }
 2206|       |
 2207|      0|        return read_until_code_point(
 2208|  1.05k|            ranges::subrange{it, range.end()},
 2209|  1.05k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2210|  1.05k|    }
 2211|  1.05k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbDiESQ_EE:
 2159|  1.05k|{
 2160|  1.05k|    auto it = range.begin();
 2161|  18.6k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 17.8k, False: 792]
  ------------------
 2162|  17.8k|        const auto val =
 2163|  17.8k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  17.8k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  985|  17.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 14.9k, False: 2.86k]
  |  |  ------------------
  ------------------
 2165|  14.9k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  14.9k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  14.9k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 258, False: 14.7k]
  ------------------
 2168|    258|                return it;
 2169|    258|            }
 2170|  14.9k|        }
 2171|  17.6k|        it = val.iterator;
 2172|  17.6k|    }
 2173|       |
 2174|    792|    return it;
 2175|  1.05k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_:
  742|  1.05k|        : m_fptr([](storage fn,
  743|  1.05k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.05k|              cvref<T> obj = *get<T>(fn);
  745|  1.05k|              if constexpr (std::is_void_v<R>) {
  746|  1.05k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.05k|              }
  748|  1.05k|              else {
  749|  1.05k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.05k|              }
  751|  1.05k|          }),
  752|  1.05k|          m_storage(std::addressof(f))
  753|  1.05k|    {
  754|  1.05k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESY_Di:
  743|  14.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  14.9k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  14.9k|              else {
  749|  14.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  14.9k|              }
  751|  14.9k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  14.9k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  14.9k|        else if constexpr (std::is_object_v<T>) {
  688|  14.9k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  14.9k|    }
_ZZN3scn2v44impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2209|  14.9k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|  1.05k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.05k|        {
  662|  1.05k|        }
_ZN3scn2v44impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4881|     92|    {
 4882|     92|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4882:13): [True: 40, False: 52]
  ------------------
 4883|     40|            return read_string_impl(
 4884|     40|                range,
 4885|     40|                read_until_code_unit(
 4886|     40|                    range,
 4887|     40|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4888|     40|                        SourceCharT ch) { return ch == until; }),
 4889|     40|                value);
 4890|     40|        }
 4891|     52|        return read_string_impl(
 4892|     52|            range,
 4893|     52|            read_until_code_units(
 4894|     52|                range, specs.fill.template get_code_units<SourceCharT>()),
 4895|     52|            value);
 4896|     92|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|     40|        : m_fptr([](storage fn,
  743|     40|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     40|              cvref<T> obj = *get<T>(fn);
  745|     40|              if constexpr (std::is_void_v<R>) {
  746|     40|                  obj(static_cast<decltype(args)>(args)...);
  747|     40|              }
  748|     40|              else {
  749|     40|                  return obj(static_cast<decltype(args)>(args)...);
  750|     40|              }
  751|     40|          }),
  752|     40|          m_storage(std::addressof(f))
  753|     40|    {
  754|     40|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES1D_c:
  743|    706|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    706|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    706|              else {
  749|    706|                  return obj(static_cast<decltype(args)>(args)...);
  750|    706|              }
  751|    706|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|    706|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    706|        else if constexpr (std::is_object_v<T>) {
  688|    706|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    706|    }
_ZZN3scn2v44impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlcE_clEc:
 4888|    706|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     40|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     40|        {
  662|     40|        }
_ZN3scn2v44impl21read_until_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEESI_RKT0_:
 2105|    156|{
 2106|    156|    static_assert(ranges::common_range<CodeUnits>);
 2107|       |
 2108|       |    if constexpr (ranges::common_range<Range>) {
 2109|       |        return std::search(range.begin(), range.end(), needle.begin(),
 2110|       |                           needle.end());
 2111|       |    }
 2112|    156|    else {
 2113|    156|        auto first = range.begin();
 2114|  2.17k|        while (true) {
  ------------------
  |  Branch (2114:16): [Folded - Ignored]
  ------------------
 2115|  2.17k|            auto it = first;
 2116|  2.68k|            for (auto needle_it = needle.begin();; ++it, (void)++needle_it) {
 2117|  2.68k|                if (needle_it == needle.end()) {
  ------------------
  |  Branch (2117:21): [True: 102, False: 2.58k]
  ------------------
 2118|    102|                    return first;
 2119|    102|                }
 2120|  2.58k|                if (it == range.end()) {
  ------------------
  |  Branch (2120:21): [True: 54, False: 2.52k]
  ------------------
 2121|     54|                    return it;
 2122|     54|                }
 2123|  2.52k|                if (*it != *needle_it) {
  ------------------
  |  Branch (2123:21): [True: 2.02k, False: 504]
  ------------------
 2124|  2.02k|                    break;
 2125|  2.02k|                }
 2126|  2.52k|            }
 2127|  2.02k|            ++first;
 2128|  2.02k|        }
 2129|    156|    }
 2130|    156|}
_ZN3scn2v44impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4987|     56|    {
 4988|     56|        return read_impl(
 4989|     56|            range,
 4990|     56|            [&](const auto& rng) {
 4991|     56|                return read_string_impl(rng, read_all(rng), value);
 4992|     56|            },
 4993|     56|            detail::priority_tag<1>{});
 4994|     56|    }
_ZN3scn2v44impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 5014|     56|    {
 5015|     56|        return read_cb(range);
 5016|     56|    }
_ZZN3scn2v44impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4990|     56|            [&](const auto& rng) {
 4991|     56|                return read_string_impl(rng, read_all(rng), value);
 4992|     56|            },
_ZN3scn2v44impl8read_allINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 1937|    168|{
 1938|    168|    return ranges::next(range.begin(), range.end());
 1939|    168|}
_ZNK3scn2v46ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS1_6detail9subrange_8subrangeIS9_S9_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EESL_E4typeESL_SM_:
  312|    168|    {
  313|    168|        ranges::advance(x, bound);
  314|    168|        return x;
  315|    168|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EEvE4typeERSL_SM_:
  274|    168|    {
  275|    168|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|    168|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEvRT_T0_NS0_6detail12priority_tagILm0EEE:
  202|    168|    {
  203|  2.61k|        while (i != bound) {
  ------------------
  |  Branch (203:16): [True: 2.44k, False: 168]
  ------------------
  204|  2.44k|            ++i;
  205|  2.44k|        }
  206|    168|    }
_ZN3scn2v44impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5088|    294|    {
 5089|    294|        auto it = read_source_impl(range, {specs});
 5090|    294|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  986|    294|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 8, False: 286]
  |  |  ------------------
  ------------------
 5091|      8|            return unexpected(it.error());
 5092|      8|        }
 5093|       |
 5094|    286|        return read_string_impl(range, *it, value);
 5095|    294|    }
_ZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperE:
 5191|    882|    {
 5192|    882|        const bool is_inverted = helper.specs.charset_is_inverted;
 5193|    882|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5194|       |
 5195|    882|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3929|    882|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|    882|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 882]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 5196|       |
 5197|    882|        read_source_callback cb_wrapper{helper};
 5198|       |
 5199|    882|        if (accepts_nonascii) {
  ------------------
  |  Branch (5199:13): [True: 492, False: 390]
  ------------------
 5200|    492|            const auto cb = [&](char32_t cp) {
 5201|    492|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5202|    492|            };
 5203|       |
 5204|    492|            if (is_inverted) {
  ------------------
  |  Branch (5204:17): [True: 240, False: 252]
  ------------------
 5205|    240|                auto it = read_until_code_point(range, cb);
 5206|    240|                return check_nonempty(it, range);
 5207|    240|            }
 5208|    252|            auto it = read_while_code_point(range, cb);
 5209|    252|            return check_nonempty(it, range);
 5210|    492|        }
 5211|       |
 5212|    390|        const auto cb = [&](SourceCharT ch) {
 5213|    390|            return cb_wrapper.on_ascii_only(ch);
 5214|    390|        };
 5215|       |
 5216|    390|        if (is_inverted) {
  ------------------
  |  Branch (5216:13): [True: 180, False: 210]
  ------------------
 5217|    180|            auto it = read_until_code_unit(range, cb);
 5218|    180|            return check_nonempty(it, range);
 5219|    180|        }
 5220|    210|        auto it = read_while_code_unit(range, cb);
 5221|    210|        return check_nonempty(it, range);
 5222|    390|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|    492|        : m_fptr([](storage fn,
  743|    492|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    492|              cvref<T> obj = *get<T>(fn);
  745|    492|              if constexpr (std::is_void_v<R>) {
  746|    492|                  obj(static_cast<decltype(args)>(args)...);
  747|    492|              }
  748|    492|              else {
  749|    492|                  return obj(static_cast<decltype(args)>(args)...);
  750|    492|              }
  751|    492|          }),
  752|    492|          m_storage(std::addressof(f))
  753|    492|    {
  754|    492|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEDiE_clES15_Di:
  743|  13.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  13.7k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  13.7k|              else {
  749|  13.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  13.7k|              }
  751|  13.7k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|  13.7k|    {
  684|  13.7k|        if constexpr (std::is_const_v<T>) {
  685|  13.7k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  13.7k|    }
_ZZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlDiE_clEDi:
 5200|  13.7k|            const auto cb = [&](char32_t cp) {
 5201|  13.7k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5202|  13.7k|            };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPKSL_:
  665|    492|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    492|        {
  667|    492|        }
_ZN3scn2v44impl25character_set_reader_implIcE14check_nonemptyINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEEEEENS0_13scan_expectedIT_EERKSI_T0_:
 5227|    882|    {
 5228|    882|        if (it == range.begin()) {
  ------------------
  |  Branch (5228:13): [True: 24, False: 858]
  ------------------
 5229|     24|            return detail::unexpected_scan_error(
 5230|     24|                scan_error::invalid_scanned_value,
 5231|     24|                "No characters matched in [character set]");
 5232|     24|        }
 5233|       |
 5234|    858|        return it;
 5235|    882|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|    390|        : m_fptr([](storage fn,
  743|    390|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    390|              cvref<T> obj = *get<T>(fn);
  745|    390|              if constexpr (std::is_void_v<R>) {
  746|    390|                  obj(static_cast<decltype(args)>(args)...);
  747|    390|              }
  748|    390|              else {
  749|    390|                  return obj(static_cast<decltype(args)>(args)...);
  750|    390|              }
  751|    390|          }),
  752|    390|          m_storage(std::addressof(f))
  753|    390|    {
  754|    390|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES15_c:
  743|  7.45k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.45k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  7.45k|              else {
  749|  7.45k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.45k|              }
  751|  7.45k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  7.45k|    {
  684|  7.45k|        if constexpr (std::is_const_v<T>) {
  685|  7.45k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  7.45k|    }
_ZZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlcE_clEc:
 5212|  7.45k|        const auto cb = [&](SourceCharT ch) {
 5213|  7.45k|            return cb_wrapper.on_ascii_only(ch);
 5214|  7.45k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPKSL_:
  665|    390|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    390|        {
  667|    390|        }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4794|    286|{
 4795|    286|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    286|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    286|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 104, False: 182]
  ------------------
 4799|    104|        return detail::unexpected_scan_error(
 4800|    104|            scan_error::invalid_scanned_value,
 4801|    104|            "Invalid encoding in scanned string");
 4802|    104|    }
 4803|       |
 4804|    182|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3929|    182|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|    182|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 182]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 4805|    182|    return SCN_MOVE(result);
  ------------------
  |  | 1055|    182|    static_cast<    \
  |  | 1056|    182|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    182|}
_ZN3scn2v44impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4931|    254|    {
 4932|    254|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3939|    254|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    254|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    254|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    254|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 254, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    254|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    254|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    254|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    254|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    254|    }                                                  \
  |  |  |  | 3938|    254|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4933|      0|        return read_string_impl(range, it, value);
 4934|    254|    }
_ZN3scn2v44impl24regex_string_reader_implIcE4implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsE:
 4953|    762|    {
 4954|       |        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 4955|       |                      !std::is_same_v<SourceCharT, char>) {
 4956|       |            return detail::unexpected_scan_error(
 4957|       |                scan_error::invalid_format_string,
 4958|       |                "Regex backend doesn't support wide strings as input");
 4959|       |        }
 4960|    762|        else {
 4961|    762|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4961:17): [True: 762, False: 0]
  ------------------
 4962|    762|                return detail::unexpected_scan_error(
 4963|    762|                    scan_error::invalid_format_string,
 4964|    762|                    "Cannot use regex with a non-contiguous source "
 4965|    762|                    "range");
 4966|    762|            }
 4967|       |
 4968|      0|            auto input = get_as_contiguous(range);
 4969|      0|            SCN_TRY(it,
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4970|      0|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4971|      0|            return ranges::next(range.begin(),
 4972|      0|                                ranges::distance(input.begin(), it));
 4973|      0|        }
 4974|    762|    }
_ZN3scn2v44impl27is_entire_source_contiguousINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEbT_:
  959|    762|{
  960|       |    if constexpr (ranges::contiguous_range<Range> &&
  961|       |                  ranges::sized_range<Range>) {
  962|       |        return true;
  963|       |    }
  964|       |    else if constexpr (std::is_same_v<
  965|       |                           ranges::const_iterator_t<Range>,
  966|       |                           typename detail::basic_scan_buffer<
  967|       |                               detail::char_t<Range>>::forward_iterator>) {
  968|       |        auto beg = r.begin();
  969|       |        if (!beg.stores_parent()) {
  970|       |            return true;
  971|       |        }
  972|       |        return beg.parent()->is_contiguous();
  973|       |    }
  974|    762|    else {
  975|    762|        return false;
  976|    762|    }
  977|    762|}
_ZN3scn2v44impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5313|  1.73k|    {
 5314|  1.73k|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|  1.73k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|  1.73k|        return read_impl(range, specs, value);
 5316|  1.73k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5331|  1.73k|    {
 5332|  1.73k|        SCN_CLANG_PUSH
 5333|  1.73k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|  1.73k|        switch (m_type) {
 5336|    340|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 340, False: 1.39k]
  ------------------
 5337|    340|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|     62|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 62, False: 1.67k]
  ------------------
 5340|     62|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|     62|                                                                   value);
 5342|       |
 5343|      0|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 0, False: 1.73k]
  ------------------
 5344|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|  1.18k|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 1.18k, False: 546]
  ------------------
 5347|  1.18k|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|  1.18k|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|     32|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 32, False: 1.70k]
  ------------------
 5352|     32|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|     32|                    range, specs.charset_string<SourceCharT>(),
 5354|     32|                    specs.regexp_flags, value);
 5355|       |
 5356|    112|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 112, False: 1.62k]
  ------------------
 5357|    112|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|    112|                    range,
 5359|    112|                    get_unescaped_regex_pattern(
 5360|    112|                        specs.charset_string<SourceCharT>()),
 5361|    112|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 1.73k]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1051|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|  1.73k|                SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|  1.73k|        }
 5368|       |
 5369|  1.73k|        SCN_CLANG_POP
 5370|  1.73k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4860|    972|    {
 4861|    972|        return read_string_impl(range, read_until_classic_space(range), value);
 4862|    972|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4794|  1.03k|{
 4795|  1.03k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|  1.03k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|  1.03k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 330, False: 704]
  ------------------
 4799|    330|        return detail::unexpected_scan_error(
 4800|    330|            scan_error::invalid_scanned_value,
 4801|    330|            "Invalid encoding in scanned string");
 4802|    330|    }
 4803|       |
 4804|    704|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3929|    704|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|    704|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 704]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 4805|    704|    return SCN_MOVE(result);
  ------------------
  |  | 1055|    704|    static_cast<    \
  |  | 1056|    704|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    704|}
_ZN3scn2v44impl22transcode_if_necessaryIccEENS0_13scan_expectedIvEENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 3127|  1.47k|{
 3128|  1.47k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3129|  1.47k|        dest.assign(source.view());
 3130|       |    }
 3131|       |    else {
 3132|       |        return transcode_impl(source.view(), dest);
 3133|       |    }
 3134|       |
 3135|  1.47k|    return {};
 3136|  1.47k|}
_ZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2186|  2.91k|{
 2187|       |    if constexpr (ranges::contiguous_range<Range> &&
 2188|       |                  ranges::sized_range<Range> &&
 2189|  2.91k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2190|  2.91k|        auto buf = make_contiguous_buffer(range);
 2191|  2.91k|        auto it = find_classic_space_narrow_fast(buf.view());
 2192|  2.91k|        return ranges::next(range.begin(),
 2193|  2.91k|                            ranges::distance(buf.view().begin(), it));
 2194|       |    }
 2195|       |    else {
 2196|       |        auto it = range.begin();
 2197|       |
 2198|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|       |            auto seg = get_contiguous_beginning(range);
 2200|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2201|       |                seg_it != seg.end()) {
 2202|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2203|       |            }
 2204|       |            ranges::advance(it, seg.size());
 2205|       |        }
 2206|       |
 2207|       |        return read_until_code_point(
 2208|       |            ranges::subrange{it, range.end()},
 2209|       |            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2210|       |    }
 2211|  2.91k|}
_ZN3scn2v44impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4881|     62|    {
 4882|     62|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4882:13): [True: 30, False: 32]
  ------------------
 4883|     30|            return read_string_impl(
 4884|     30|                range,
 4885|     30|                read_until_code_unit(
 4886|     30|                    range,
 4887|     30|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4888|     30|                        SourceCharT ch) { return ch == until; }),
 4889|     30|                value);
 4890|     30|        }
 4891|     32|        return read_string_impl(
 4892|     32|            range,
 4893|     32|            read_until_code_units(
 4894|     32|                range, specs.fill.template get_code_units<SourceCharT>()),
 4895|     32|            value);
 4896|     62|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     30|        : m_fptr([](storage fn,
  743|     30|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     30|              cvref<T> obj = *get<T>(fn);
  745|     30|              if constexpr (std::is_void_v<R>) {
  746|     30|                  obj(static_cast<decltype(args)>(args)...);
  747|     30|              }
  748|     30|              else {
  749|     30|                  return obj(static_cast<decltype(args)>(args)...);
  750|     30|              }
  751|     30|          }),
  752|     30|          m_storage(std::addressof(f))
  753|     30|    {
  754|     30|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES1B_c:
  743|    698|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    698|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    698|              else {
  749|    698|                  return obj(static_cast<decltype(args)>(args)...);
  750|    698|              }
  751|    698|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    698|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    698|        else if constexpr (std::is_object_v<T>) {
  688|    698|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    698|    }
_ZZN3scn2v44impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlcE_clEc:
 4888|    698|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     30|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     30|        {
  662|     30|        }
_ZN3scn2v44impl21read_until_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEESG_RKT0_:
 2105|     96|{
 2106|     96|    static_assert(ranges::common_range<CodeUnits>);
 2107|       |
 2108|     96|    if constexpr (ranges::common_range<Range>) {
 2109|     96|        return std::search(range.begin(), range.end(), needle.begin(),
 2110|     96|                           needle.end());
 2111|       |    }
 2112|       |    else {
 2113|       |        auto first = range.begin();
 2114|       |        while (true) {
 2115|       |            auto it = first;
 2116|       |            for (auto needle_it = needle.begin();; ++it, (void)++needle_it) {
 2117|       |                if (needle_it == needle.end()) {
 2118|       |                    return first;
 2119|       |                }
 2120|       |                if (it == range.end()) {
 2121|       |                    return it;
 2122|       |                }
 2123|       |                if (*it != *needle_it) {
 2124|       |                    break;
 2125|       |                }
 2126|       |            }
 2127|       |            ++first;
 2128|       |        }
 2129|       |    }
 2130|     96|}
_ZN3scn2v44impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5088|  1.18k|    {
 5089|  1.18k|        auto it = read_source_impl(range, {specs});
 5090|  1.18k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  986|  1.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 394, False: 794]
  |  |  ------------------
  ------------------
 5091|    394|            return unexpected(it.error());
 5092|    394|        }
 5093|       |
 5094|    794|        return read_string_impl(range, *it, value);
 5095|  1.18k|    }
_ZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5191|  3.56k|    {
 5192|  3.56k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5193|  3.56k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5194|       |
 5195|  3.56k|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3929|  3.56k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  3.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 3.56k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 5196|       |
 5197|  3.56k|        read_source_callback cb_wrapper{helper};
 5198|       |
 5199|  3.56k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5199:13): [True: 3.33k, False: 228]
  ------------------
 5200|  3.33k|            const auto cb = [&](char32_t cp) {
 5201|  3.33k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5202|  3.33k|            };
 5203|       |
 5204|  3.33k|            if (is_inverted) {
  ------------------
  |  Branch (5204:17): [True: 246, False: 3.09k]
  ------------------
 5205|    246|                auto it = read_until_code_point(range, cb);
 5206|    246|                return check_nonempty(it, range);
 5207|    246|            }
 5208|  3.09k|            auto it = read_while_code_point(range, cb);
 5209|  3.09k|            return check_nonempty(it, range);
 5210|  3.33k|        }
 5211|       |
 5212|    228|        const auto cb = [&](SourceCharT ch) {
 5213|    228|            return cb_wrapper.on_ascii_only(ch);
 5214|    228|        };
 5215|       |
 5216|    228|        if (is_inverted) {
  ------------------
  |  Branch (5216:13): [True: 102, False: 126]
  ------------------
 5217|    102|            auto it = read_until_code_unit(range, cb);
 5218|    102|            return check_nonempty(it, range);
 5219|    102|        }
 5220|    126|        auto it = read_while_code_unit(range, cb);
 5221|    126|        return check_nonempty(it, range);
 5222|    228|    }
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2159|  3.33k|{
 2160|  3.33k|    auto it = range.begin();
 2161|   555k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 555k, False: 180]
  ------------------
 2162|   555k|        const auto val =
 2163|   555k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|   555k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  985|   555k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 554k, False: 960]
  |  |  ------------------
  ------------------
 2165|   554k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|   554k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|   554k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 3.15k, False: 551k]
  ------------------
 2168|  3.15k|                return it;
 2169|  3.15k|            }
 2170|   554k|        }
 2171|   552k|        it = val.iterator;
 2172|   552k|    }
 2173|       |
 2174|    180|    return it;
 2175|  3.33k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1997|   555k|{
 1998|   555k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1051|   555k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   555k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|   555k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|   555k|    auto it = range.begin();
 2002|   555k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|   555k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  986|   555k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 960, False: 554k]
  |  |  ------------------
  ------------------
 2005|    960|        ++it;
 2006|    960|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|    960|        return {it, {}};
 2008|    960|    }
 2009|       |
 2010|   554k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 460k, False: 93.7k]
  ------------------
 2011|   460k|        ++it;
 2012|   460k|        return {it, string_type(1, *range.begin())};
 2013|   460k|    }
 2014|       |
 2015|  93.7k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|  93.7k|    return {it, string_type{range.begin(), it}};
 2017|   554k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1264|    960|{
 1265|    960|    auto it = input.begin();
 1266|  1.45k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 1.39k, False: 54]
  ------------------
 1267|  1.39k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 906, False: 492]
  ------------------
 1268|    906|            break;
 1269|    906|        }
 1270|  1.39k|    }
 1271|    960|    return it;
 1272|    960|}
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeERSA_SE_SB_:
  282|  93.7k|    {
  283|  93.7k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  93.7k|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeERSB_SE_SA_:
  211|  93.7k|    {
  212|  93.7k|        if (fn::abs(n) >= fn::abs(bound - i)) {
  ------------------
  |  Branch (212:13): [True: 102, False: 93.6k]
  ------------------
  213|    102|            auto dist = bound - i;
  214|    102|            fn::impl_i_s(i, bound, priority_tag<2>{});
  215|    102|            return dist;
  216|    102|        }
  217|  93.6k|        fn::impl_i_n(i, n, priority_tag<1>{});
  218|  93.6k|        return n;
  219|  93.7k|    }
_ZN3scn2v46ranges6detail8advance_2fn3absIlEET_S6_:
  131|   187k|    {
  132|   187k|        if (t < T{0}) {
  ------------------
  |  Branch (132:13): [True: 0, False: 187k]
  ------------------
  133|      0|            return -t;
  134|      0|        }
  135|   187k|        return t;
  136|   187k|    }
_ZNK3scn2v44impl27read_code_point_into_resultIPKccE8is_validEv:
 1988|   555k|    {
 1989|   555k|        return !codepoint.empty();
 1990|   555k|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|  3.33k|        : m_fptr([](storage fn,
  743|  3.33k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.33k|              cvref<T> obj = *get<T>(fn);
  745|  3.33k|              if constexpr (std::is_void_v<R>) {
  746|  3.33k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.33k|              }
  748|  3.33k|              else {
  749|  3.33k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.33k|              }
  751|  3.33k|          }),
  752|  3.33k|          m_storage(std::addressof(f))
  753|  3.33k|    {
  754|  3.33k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clES13_Di:
  743|   554k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   554k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   554k|              else {
  749|   554k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   554k|              }
  751|   554k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|   554k|    {
  684|   554k|        if constexpr (std::is_const_v<T>) {
  685|   554k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   554k|    }
_ZZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlDiE_clEDi:
 5200|   554k|            const auto cb = [&](char32_t cp) {
 5201|   554k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5202|   554k|            };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|  3.33k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  3.33k|        {
  667|  3.33k|        }
_ZN3scn2v44impl25character_set_reader_implIcE14check_nonemptyIPKcNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5227|  3.56k|    {
 5228|  3.56k|        if (it == range.begin()) {
  ------------------
  |  Branch (5228:13): [True: 1.18k, False: 2.38k]
  ------------------
 5229|  1.18k|            return detail::unexpected_scan_error(
 5230|  1.18k|                scan_error::invalid_scanned_value,
 5231|  1.18k|                "No characters matched in [character set]");
 5232|  1.18k|        }
 5233|       |
 5234|  2.38k|        return it;
 5235|  3.56k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2180|  3.09k|{
 2181|  3.09k|    return read_until_code_point(range, std::not_fn(pred));
 2182|  3.09k|}
_ZN3scn2v44impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|    228|        : m_fptr([](storage fn,
  743|    228|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    228|              cvref<T> obj = *get<T>(fn);
  745|    228|              if constexpr (std::is_void_v<R>) {
  746|    228|                  obj(static_cast<decltype(args)>(args)...);
  747|    228|              }
  748|    228|              else {
  749|    228|                  return obj(static_cast<decltype(args)>(args)...);
  750|    228|              }
  751|    228|          }),
  752|    228|          m_storage(std::addressof(f))
  753|    228|    {
  754|    228|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  3.22k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.22k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  3.22k|              else {
  749|  3.22k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.22k|              }
  751|  3.22k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  3.22k|    {
  684|  3.22k|        if constexpr (std::is_const_v<T>) {
  685|  3.22k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  3.22k|    }
_ZZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlcE_clEc:
 5212|  3.22k|        const auto cb = [&](SourceCharT ch) {
 5213|  3.22k|            return cb_wrapper.on_ascii_only(ch);
 5214|  3.22k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|    228|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    228|        {
  667|    228|        }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4794|    824|{
 4795|    824|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    824|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    824|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 54, False: 770]
  ------------------
 4799|     54|        return detail::unexpected_scan_error(
 4800|     54|            scan_error::invalid_scanned_value,
 4801|     54|            "Invalid encoding in scanned string");
 4802|     54|    }
 4803|       |
 4804|    770|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3929|    770|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|    770|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 770]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 4805|    770|    return SCN_MOVE(result);
  ------------------
  |  | 1055|    770|    static_cast<    \
  |  | 1056|    770|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    770|}
_ZN3scn2v44impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4931|    144|    {
 4932|    144|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3939|    144|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    144|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    144|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    144|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 114, False: 30]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    114|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    114|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    114|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    114|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    114|    }                                                  \
  |  |  |  | 3938|    144|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|     30|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4933|     30|        return read_string_impl(range, it, value);
 4934|    144|    }
_ZN3scn2v44impl24regex_string_reader_implIcE4implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsE:
 4953|    432|    {
 4954|       |        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 4955|       |                      !std::is_same_v<SourceCharT, char>) {
 4956|       |            return detail::unexpected_scan_error(
 4957|       |                scan_error::invalid_format_string,
 4958|       |                "Regex backend doesn't support wide strings as input");
 4959|       |        }
 4960|    432|        else {
 4961|    432|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4961:17): [True: 0, False: 432]
  ------------------
 4962|      0|                return detail::unexpected_scan_error(
 4963|      0|                    scan_error::invalid_format_string,
 4964|      0|                    "Cannot use regex with a non-contiguous source "
 4965|      0|                    "range");
 4966|      0|            }
 4967|       |
 4968|    432|            auto input = get_as_contiguous(range);
 4969|    432|            SCN_TRY(it,
  ------------------
  |  | 3939|    432|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    432|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    432|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    432|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 342, False: 90]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    342|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    342|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    342|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    342|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    342|    }                                                  \
  |  |  |  | 3938|    432|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|     90|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4970|     90|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4971|     90|            return ranges::next(range.begin(),
 4972|     90|                                ranges::distance(input.begin(), it));
 4973|    432|        }
 4974|    432|    }
_ZN3scn2v44impl27is_entire_source_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  959|    432|{
  960|       |    if constexpr (ranges::contiguous_range<Range> &&
  961|    432|                  ranges::sized_range<Range>) {
  962|    432|        return true;
  963|       |    }
  964|       |    else if constexpr (std::is_same_v<
  965|       |                           ranges::const_iterator_t<Range>,
  966|       |                           typename detail::basic_scan_buffer<
  967|       |                               detail::char_t<Range>>::forward_iterator>) {
  968|       |        auto beg = r.begin();
  969|       |        if (!beg.stores_parent()) {
  970|       |            return true;
  971|       |        }
  972|       |        return beg.parent()->is_contiguous();
  973|       |    }
  974|       |    else {
  975|       |        return false;
  976|       |    }
  977|    432|}
_ZN3scn2v44impl17get_as_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaT_:
 1065|    432|{
 1066|    432|    SCN_EXPECT(is_segment_contiguous(r));
  ------------------
  |  | 1051|    432|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    432|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1067|       |
 1068|       |    if constexpr (ranges::contiguous_range<Range> &&
 1069|    432|                  ranges::sized_range<Range>) {
 1070|    432|        return r;
 1071|       |    }
 1072|       |    else if constexpr (std::is_same_v<
 1073|       |                           ranges::const_iterator_t<Range>,
 1074|       |                           typename detail::basic_scan_buffer<
 1075|       |                               detail::char_t<Range>>::forward_iterator>) {
 1076|       |        if constexpr (ranges::common_range<Range>) {
 1077|       |            return detail::make_string_view_from_pointers(
 1078|       |                r.begin().to_contiguous_segment_iterator(),
 1079|       |                r.end().to_contiguous_segment_iterator());
 1080|       |        }
 1081|       |        else {
 1082|       |            return r.begin().contiguous_segment();
 1083|       |        }
 1084|       |    }
 1085|       |    else {
 1086|       |        SCN_EXPECT(false);
 1087|       |        SCN_UNREACHABLE;
 1088|       |        // for return type deduction
 1089|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1090|       |    }
 1091|    432|}
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  981|    432|{
  982|       |    if constexpr (ranges::contiguous_range<Range> &&
  983|    432|                  ranges::sized_range<Range>) {
  984|    432|        return true;
  985|       |    }
  986|       |    else if constexpr (std::is_same_v<
  987|       |                           ranges::const_iterator_t<Range>,
  988|       |                           typename detail::basic_scan_buffer<
  989|       |                               detail::char_t<Range>>::forward_iterator>) {
  990|       |        auto beg = r.begin();
  991|       |        if (beg.contiguous_segment().empty()) {
  992|       |            return false;
  993|       |        }
  994|       |        if constexpr (ranges::common_range<Range>) {
  995|       |            return beg.contiguous_segment().end() ==
  996|       |                   ranges::end(r).contiguous_segment().end();
  997|       |        }
  998|       |        else {
  999|       |            if (beg.stores_parent()) {
 1000|       |                return beg.contiguous_segment().end() ==
 1001|       |                       beg.parent()->current_view().end();
 1002|       |            }
 1003|       |            return true;
 1004|       |        }
 1005|       |    }
 1006|       |    else {
 1007|       |        return false;
 1008|       |    }
 1009|    432|}
_ZN3scn2v44impl22read_regex_string_implIcNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT0_EEEEEENSt3__117basic_string_viewIT_NSF_11char_traitsISH_EEEENS0_6detail11regex_flagsESB_:
 4378|    432|{
 4379|    432|    static_assert(ranges::contiguous_range<Input> &&
 4380|    432|                  ranges::borrowed_range<Input> &&
 4381|    432|                  std::is_same_v<ranges::range_value_t<Input>, CharT>);
 4382|       |
 4383|       |#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 4384|       |    std::basic_regex<CharT> re{};
 4385|       |    try {
 4386|       |        SCN_TRY(re_flags, make_regex_flags(flags));
 4387|       |        re = std::basic_regex<CharT>{pattern.data(), pattern.size(),
 4388|       |                                     re_flags | std::regex_constants::nosubs};
 4389|       |    }
 4390|       |    catch (const std::regex_error& err) {
 4391|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4392|       |                                             "Invalid regex");
 4393|       |    }
 4394|       |
 4395|       |    std::match_results<const CharT*> matches{};
 4396|       |    try {
 4397|       |        bool found = std::regex_search(input.data(),
 4398|       |                                       input.data() + input.size(), matches, re,
 4399|       |                                       std::regex_constants::match_continuous);
 4400|       |        if (!found || matches.prefix().matched) {
 4401|       |            return detail::unexpected_scan_error(
 4402|       |                scan_error::invalid_scanned_value,
 4403|       |                "Regular expression didn't match");
 4404|       |        }
 4405|       |    }
 4406|       |    catch (const std::regex_error& err) {
 4407|       |        return detail::unexpected_scan_error(
 4408|       |            scan_error::invalid_format_string,
 4409|       |            "Regex matching failed with an error");
 4410|       |    }
 4411|       |
 4412|       |    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4413|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_BOOST
 4414|       |    auto re =
 4415|       |#if SCN_REGEX_BOOST_USE_ICU
 4416|       |        boost::make_u32regex(pattern.data(), pattern.data() + pattern.size(),
 4417|       |                             make_regex_flags(flags) |
 4418|       |                                 boost::regex_constants::no_except |
 4419|       |                                 boost::regex_constants::nosubs);
 4420|       |#else
 4421|       |        boost::basic_regex<CharT>{pattern.data(), pattern.size(),
 4422|       |                                  make_regex_flags(flags) |
 4423|       |                                      boost::regex_constants::no_except |
 4424|       |                                      boost::regex_constants::nosubs};
 4425|       |#endif
 4426|       |    if (re.status() != 0) {
 4427|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4428|       |                                             "Invalid regex");
 4429|       |    }
 4430|       |
 4431|       |    boost::match_results<const CharT*> matches{};
 4432|       |    try {
 4433|       |        bool found =
 4434|       |#if SCN_REGEX_BOOST_USE_ICU
 4435|       |            boost::u32regex_search(input.data(), input.data() + input.size(),
 4436|       |                                   matches, re,
 4437|       |                                   boost::regex_constants::match_continuous);
 4438|       |#else
 4439|       |            boost::regex_search(input.data(), input.data() + input.size(),
 4440|       |                                matches, re,
 4441|       |                                boost::regex_constants::match_continuous);
 4442|       |#endif
 4443|       |        if (!found || matches.prefix().matched) {
 4444|       |            return detail::unexpected_scan_error(
 4445|       |                scan_error::invalid_scanned_value,
 4446|       |                "Regular expression didn't match");
 4447|       |        }
 4448|       |    }
 4449|       |    catch (const std::runtime_error& err) {
 4450|       |        return detail::unexpected_scan_error(
 4451|       |            scan_error::invalid_format_string,
 4452|       |            "Regex matching failed with an error");
 4453|       |    }
 4454|       |
 4455|       |    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4456|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_RE2
 4457|       |    static_assert(std::is_same_v<CharT, char>);
 4458|    432|    std::string flagged_pattern{};
 4459|    432|    auto re = [&]() {
 4460|    432|        auto [opts, flagstr] = make_regex_flags(flags);
 4461|    432|        opts.set_never_capture(true);
 4462|    432|        if (flagstr.empty()) {
 4463|    432|            return re2::RE2{pattern, opts};
 4464|    432|        }
 4465|    432|        flagged_pattern.reserve(flagstr.size() + pattern.size());
 4466|    432|        flagged_pattern.append(flagstr);
 4467|    432|        flagged_pattern.append(pattern);
 4468|    432|        return re2::RE2{flagged_pattern, opts};
 4469|    432|    }();
 4470|    432|    if (!re.ok()) {
  ------------------
  |  Branch (4470:9): [True: 162, False: 270]
  ------------------
 4471|    162|        return detail::unexpected_scan_error(
 4472|    162|            scan_error::invalid_format_string,
 4473|    162|            "Failed to parse regular expression");
 4474|    162|    }
 4475|       |
 4476|    270|    auto new_input = detail::make_string_view_from_pointers(
 4477|    270|        detail::to_address(input.begin()), detail::to_address(input.end()));
 4478|    270|    bool found = re2::RE2::Consume(&new_input, re);
 4479|    270|    if (!found) {
  ------------------
  |  Branch (4479:9): [True: 180, False: 90]
  ------------------
 4480|    180|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 4481|    180|                                             "Regular expression didn't match");
 4482|    180|    }
 4483|     90|    return input.begin() + ranges::distance(input.data(), new_input.data());
 4484|    270|#endif  // SCN_REGEX_BACKEND == ...
 4485|    270|}
_ZZN3scn2v44impl22read_regex_string_implIcNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT0_EEEEEENSt3__117basic_string_viewIT_NSF_11char_traitsISH_EEEENS0_6detail11regex_flagsESB_ENKUlvE_clEv:
 4459|    432|    auto re = [&]() {
 4460|    432|        auto [opts, flagstr] = make_regex_flags(flags);
 4461|    432|        opts.set_never_capture(true);
 4462|    432|        if (flagstr.empty()) {
  ------------------
  |  Branch (4462:13): [True: 12, False: 420]
  ------------------
 4463|     12|            return re2::RE2{pattern, opts};
 4464|     12|        }
 4465|    420|        flagged_pattern.reserve(flagstr.size() + pattern.size());
 4466|    420|        flagged_pattern.append(flagstr);
 4467|    420|        flagged_pattern.append(pattern);
 4468|    420|        return re2::RE2{flagged_pattern, opts};
 4469|    432|    }();
_ZN3scn2v44impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEcEEDav:
 5848|  3.59k|{
 5849|       |    if constexpr (std::is_same_v<T, bool>) {
 5850|       |        return reader_impl_for_bool<CharT>{};
 5851|       |    }
 5852|       |    else if constexpr (std::is_same_v<T, char>) {
 5853|       |        return reader_impl_for_char<CharT>{};
 5854|       |    }
 5855|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5856|       |        return reader_impl_for_wchar<CharT>{};
 5857|       |    }
 5858|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5859|       |        return reader_impl_for_code_point<CharT>{};
 5860|       |    }
 5861|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5862|       |                       std::is_same_v<T, std::wstring_view>) {
 5863|       |        return reader_impl_for_string<CharT>{};
 5864|       |    }
 5865|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5866|  3.59k|                       std::is_same_v<T, std::wstring>) {
 5867|  3.59k|        return reader_impl_for_string<CharT>{};
 5868|       |    }
 5869|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5870|       |                       std::is_same_v<T, wregex_matches>) {
 5871|       |        return reader_impl_for_regex_matches<CharT>{};
 5872|       |    }
 5873|       |    else if constexpr (std::is_same_v<T, void*>) {
 5874|       |        return reader_impl_for_voidptr<CharT>{};
 5875|       |    }
 5876|       |    else if constexpr (std::is_floating_point_v<T>) {
 5877|       |        return reader_impl_for_float<CharT>{};
 5878|       |    }
 5879|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5880|       |                       !std::is_same_v<T, wchar_t> &&
 5881|       |                       !std::is_same_v<T, char32_t> &&
 5882|       |                       !std::is_same_v<T, bool>) {
 5883|       |        return reader_impl_for_int<CharT>{};
 5884|       |    }
 5885|       |    else {
 5886|       |        return reader_impl_for_monostate<CharT>{};
 5887|       |    }
 5888|  3.59k|}
_ZN3scn2v44impl22transcode_if_necessaryIcwEENS0_13scan_expectedIvEEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS9_11char_traitsISB_EENS9_9allocatorISB_EEEE:
 3107|    484|{
 3108|       |    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3109|       |        if (source.stores_allocated_string()) {
 3110|       |            dest.assign(SCN_MOVE(source.get_allocated_string()));
 3111|       |        }
 3112|       |        else {
 3113|       |            dest.assign(source.view());
 3114|       |        }
 3115|       |    }
 3116|    484|    else {
 3117|    484|        return transcode_impl(source.view(), dest);
 3118|    484|    }
 3119|       |
 3120|      0|    return {};
 3121|    484|}
_ZN3scn2v44impl14transcode_implIcwEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEERNS5_12basic_stringIT0_NS8_ISC_EENS5_9allocatorISC_EEEE:
 3082|  1.95k|{
 3083|  1.95k|    dst.clear();
 3084|  1.95k|    transcode_valid_to_string(src, dst);
 3085|  1.95k|    return {};
 3086|  1.95k|}
_ZN3scn2v44impl25transcode_valid_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1501|  1.95k|{
 1502|  1.95k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1503|       |
 1504|  1.95k|    SCN_EXPECT(validate_unicode(src));
  ------------------
  |  | 1051|  1.95k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.95k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1505|  1.95k|    if constexpr (sizeof(SourceCharT) == 1) {
 1506|       |        if constexpr (sizeof(DestCharT) == 2) {
 1507|       |            // TODO: Optimize, remove utf32-step, go direct utf8->utf16
 1508|       |            std::u32string tmp;
 1509|       |            transcode_valid_to_string_impl_to32(src, tmp);
 1510|       |            return transcode_to_string_impl_32to16<true>(
 1511|       |                std::u32string_view{tmp}, dest);
 1512|       |        }
 1513|  1.95k|        else if constexpr (sizeof(DestCharT) == 4) {
 1514|  1.95k|            return transcode_valid_to_string_impl_to32(src, dest);
 1515|  1.95k|        }
 1516|       |    }
 1517|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1518|       |        if constexpr (sizeof(DestCharT) == 1) {
 1519|       |            std::u32string tmp;
 1520|       |            transcode_valid_to_string_impl_to32(src, tmp);
 1521|       |            return transcode_to_string_impl_32to8<true>(
 1522|       |                std::u32string_view{tmp}, dest);
 1523|       |        }
 1524|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1525|       |            return trasncode_valid_to_string_impl_to32(src, dest);
 1526|       |        }
 1527|       |    }
 1528|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1529|       |        if constexpr (sizeof(DestCharT) == 1) {
 1530|       |            return transcode_to_string_impl_32to8<true>(src, dest);
 1531|       |        }
 1532|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1533|       |            return transcode_to_string_impl_32to16<true>(src, dest);
 1534|       |        }
 1535|       |    }
 1536|       |
 1537|  1.95k|    SCN_EXPECT(false);
  ------------------
  |  | 1051|  1.95k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.95k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1538|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1539|  1.95k|}
_ZN3scn2v44impl35transcode_valid_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1375|  1.95k|{
 1376|  1.95k|    static_assert(sizeof(DestCharT) == 4);
 1377|       |
 1378|  1.95k|    auto it = src.begin();
 1379|   198k|    while (it != src.end()) {
  ------------------
  |  Branch (1379:12): [True: 196k, False: 1.95k]
  ------------------
 1380|   196k|        auto res = get_next_code_point_valid(
 1381|   196k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1382|   196k|                                                                 src.end()));
 1383|   196k|        SCN_EXPECT(res.value < detail::invalid_code_point);
  ------------------
  |  | 1051|   196k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   196k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1384|   196k|        dest.push_back(res.value);
 1385|   196k|        it = detail::make_string_view_iterator(src, res.iterator);
 1386|   196k|    }
 1387|  1.95k|}
_ZN3scn2v44impl25get_next_code_point_validIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1298|   196k|{
 1299|   196k|    SCN_EXPECT(!input.empty());
  ------------------
  |  | 1051|   196k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   196k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1300|       |
 1301|   196k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1302|   196k|    SCN_EXPECT(len <= input.size());
  ------------------
  |  | 1051|   196k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   196k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1303|       |
 1304|   196k|    return {input.begin() + len,
 1305|   196k|            detail::decode_code_point_exhaustive_valid(input.substr(0, len))};
 1306|   196k|}
_ZN3scn2v44impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5313|  1.04k|    {
 5314|  1.04k|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|  1.04k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|  1.04k|        return read_impl(range, specs, value);
 5316|  1.04k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5331|  1.04k|    {
 5332|  1.04k|        SCN_CLANG_PUSH
 5333|  1.04k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|  1.04k|        switch (m_type) {
 5336|    350|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 350, False: 696]
  ------------------
 5337|    350|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|     92|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 92, False: 954]
  ------------------
 5340|     92|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|     92|                                                                   value);
 5342|       |
 5343|     56|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 56, False: 990]
  ------------------
 5344|     56|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|    294|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 294, False: 752]
  ------------------
 5347|    294|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|    294|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|      2|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 2, False: 1.04k]
  ------------------
 5352|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|      2|                    range, specs.charset_string<SourceCharT>(),
 5354|      2|                    specs.regexp_flags, value);
 5355|       |
 5356|    252|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 252, False: 794]
  ------------------
 5357|    252|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|    252|                    range,
 5359|    252|                    get_unescaped_regex_pattern(
 5360|    252|                        specs.charset_string<SourceCharT>()),
 5361|    252|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 1.04k]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1051|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|  1.04k|                SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|  1.04k|        }
 5368|       |
 5369|  1.04k|        SCN_CLANG_POP
 5370|  1.04k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4860|    350|    {
 4861|    350|        return read_string_impl(range, read_until_classic_space(range), value);
 4862|    350|    }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4794|    498|{
 4795|    498|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    498|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    498|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 196, False: 302]
  ------------------
 4799|    196|        return detail::unexpected_scan_error(
 4800|    196|            scan_error::invalid_scanned_value,
 4801|    196|            "Invalid encoding in scanned string");
 4802|    196|    }
 4803|       |
 4804|    302|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3929|    302|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|    302|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 302]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 4805|    302|    return SCN_MOVE(result);
  ------------------
  |  | 1055|    302|    static_cast<    \
  |  | 1056|    302|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    302|}
_ZN3scn2v44impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4881|     92|    {
 4882|     92|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4882:13): [True: 40, False: 52]
  ------------------
 4883|     40|            return read_string_impl(
 4884|     40|                range,
 4885|     40|                read_until_code_unit(
 4886|     40|                    range,
 4887|     40|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4888|     40|                        SourceCharT ch) { return ch == until; }),
 4889|     40|                value);
 4890|     40|        }
 4891|     52|        return read_string_impl(
 4892|     52|            range,
 4893|     52|            read_until_code_units(
 4894|     52|                range, specs.fill.template get_code_units<SourceCharT>()),
 4895|     52|            value);
 4896|     92|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|     40|        : m_fptr([](storage fn,
  743|     40|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     40|              cvref<T> obj = *get<T>(fn);
  745|     40|              if constexpr (std::is_void_v<R>) {
  746|     40|                  obj(static_cast<decltype(args)>(args)...);
  747|     40|              }
  748|     40|              else {
  749|     40|                  return obj(static_cast<decltype(args)>(args)...);
  750|     40|              }
  751|     40|          }),
  752|     40|          m_storage(std::addressof(f))
  753|     40|    {
  754|     40|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES1D_c:
  743|    706|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    706|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    706|              else {
  749|    706|                  return obj(static_cast<decltype(args)>(args)...);
  750|    706|              }
  751|    706|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|    706|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    706|        else if constexpr (std::is_object_v<T>) {
  688|    706|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    706|    }
_ZZN3scn2v44impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlcE_clEc:
 4888|    706|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     40|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     40|        {
  662|     40|        }
_ZN3scn2v44impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4987|     56|    {
 4988|     56|        return read_impl(
 4989|     56|            range,
 4990|     56|            [&](const auto& rng) {
 4991|     56|                return read_string_impl(rng, read_all(rng), value);
 4992|     56|            },
 4993|     56|            detail::priority_tag<1>{});
 4994|     56|    }
_ZN3scn2v44impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 5014|     56|    {
 5015|     56|        return read_cb(range);
 5016|     56|    }
_ZZN3scn2v44impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4990|     56|            [&](const auto& rng) {
 4991|     56|                return read_string_impl(rng, read_all(rng), value);
 4992|     56|            },
_ZN3scn2v44impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5088|    294|    {
 5089|    294|        auto it = read_source_impl(range, {specs});
 5090|    294|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  986|    294|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 8, False: 286]
  |  |  ------------------
  ------------------
 5091|      8|            return unexpected(it.error());
 5092|      8|        }
 5093|       |
 5094|    286|        return read_string_impl(range, *it, value);
 5095|    294|    }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4794|    286|{
 4795|    286|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    286|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    286|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 104, False: 182]
  ------------------
 4799|    104|        return detail::unexpected_scan_error(
 4800|    104|            scan_error::invalid_scanned_value,
 4801|    104|            "Invalid encoding in scanned string");
 4802|    104|    }
 4803|       |
 4804|    182|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3929|    182|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|    182|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 182]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 4805|    182|    return SCN_MOVE(result);
  ------------------
  |  | 1055|    182|    static_cast<    \
  |  | 1056|    182|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    182|}
_ZN3scn2v44impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4931|    254|    {
 4932|    254|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3939|    254|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    254|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    254|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    254|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 254, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    254|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    254|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    254|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    254|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    254|    }                                                  \
  |  |  |  | 3938|    254|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4933|      0|        return read_string_impl(range, it, value);
 4934|    254|    }
_ZN3scn2v44impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5313|  1.73k|    {
 5314|  1.73k|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|  1.73k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|  1.73k|        return read_impl(range, specs, value);
 5316|  1.73k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5331|  1.73k|    {
 5332|  1.73k|        SCN_CLANG_PUSH
 5333|  1.73k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|  1.73k|        switch (m_type) {
 5336|    340|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 340, False: 1.39k]
  ------------------
 5337|    340|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|     62|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 62, False: 1.67k]
  ------------------
 5340|     62|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|     62|                                                                   value);
 5342|       |
 5343|      0|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 0, False: 1.73k]
  ------------------
 5344|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|  1.18k|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 1.18k, False: 546]
  ------------------
 5347|  1.18k|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|  1.18k|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|     32|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 32, False: 1.70k]
  ------------------
 5352|     32|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|     32|                    range, specs.charset_string<SourceCharT>(),
 5354|     32|                    specs.regexp_flags, value);
 5355|       |
 5356|    112|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 112, False: 1.62k]
  ------------------
 5357|    112|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|    112|                    range,
 5359|    112|                    get_unescaped_regex_pattern(
 5360|    112|                        specs.charset_string<SourceCharT>()),
 5361|    112|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 1.73k]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1051|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|  1.73k|                SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|  1.73k|        }
 5368|       |
 5369|  1.73k|        SCN_CLANG_POP
 5370|  1.73k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4860|    972|    {
 4861|    972|        return read_string_impl(range, read_until_classic_space(range), value);
 4862|    972|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4794|  1.03k|{
 4795|  1.03k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|  1.03k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|  1.03k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 330, False: 704]
  ------------------
 4799|    330|        return detail::unexpected_scan_error(
 4800|    330|            scan_error::invalid_scanned_value,
 4801|    330|            "Invalid encoding in scanned string");
 4802|    330|    }
 4803|       |
 4804|    704|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3929|    704|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|    704|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 704]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 4805|    704|    return SCN_MOVE(result);
  ------------------
  |  | 1055|    704|    static_cast<    \
  |  | 1056|    704|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    704|}
_ZN3scn2v44impl22transcode_if_necessaryIcwEENS0_13scan_expectedIvEENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 3127|  1.47k|{
 3128|       |    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3129|       |        dest.assign(source.view());
 3130|       |    }
 3131|  1.47k|    else {
 3132|  1.47k|        return transcode_impl(source.view(), dest);
 3133|  1.47k|    }
 3134|       |
 3135|      0|    return {};
 3136|  1.47k|}
_ZN3scn2v44impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4881|     62|    {
 4882|     62|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4882:13): [True: 30, False: 32]
  ------------------
 4883|     30|            return read_string_impl(
 4884|     30|                range,
 4885|     30|                read_until_code_unit(
 4886|     30|                    range,
 4887|     30|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4888|     30|                        SourceCharT ch) { return ch == until; }),
 4889|     30|                value);
 4890|     30|        }
 4891|     32|        return read_string_impl(
 4892|     32|            range,
 4893|     32|            read_until_code_units(
 4894|     32|                range, specs.fill.template get_code_units<SourceCharT>()),
 4895|     32|            value);
 4896|     62|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     30|        : m_fptr([](storage fn,
  743|     30|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     30|              cvref<T> obj = *get<T>(fn);
  745|     30|              if constexpr (std::is_void_v<R>) {
  746|     30|                  obj(static_cast<decltype(args)>(args)...);
  747|     30|              }
  748|     30|              else {
  749|     30|                  return obj(static_cast<decltype(args)>(args)...);
  750|     30|              }
  751|     30|          }),
  752|     30|          m_storage(std::addressof(f))
  753|     30|    {
  754|     30|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES1B_c:
  743|    698|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    698|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    698|              else {
  749|    698|                  return obj(static_cast<decltype(args)>(args)...);
  750|    698|              }
  751|    698|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    698|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    698|        else if constexpr (std::is_object_v<T>) {
  688|    698|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    698|    }
_ZZN3scn2v44impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlcE_clEc:
 4888|    698|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     30|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     30|        {
  662|     30|        }
_ZN3scn2v44impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5088|  1.18k|    {
 5089|  1.18k|        auto it = read_source_impl(range, {specs});
 5090|  1.18k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  986|  1.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 394, False: 794]
  |  |  ------------------
  ------------------
 5091|    394|            return unexpected(it.error());
 5092|    394|        }
 5093|       |
 5094|    794|        return read_string_impl(range, *it, value);
 5095|  1.18k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4794|    824|{
 4795|    824|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    824|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    824|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 54, False: 770]
  ------------------
 4799|     54|        return detail::unexpected_scan_error(
 4800|     54|            scan_error::invalid_scanned_value,
 4801|     54|            "Invalid encoding in scanned string");
 4802|     54|    }
 4803|       |
 4804|    770|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3929|    770|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|    770|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 770]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 4805|    770|    return SCN_MOVE(result);
  ------------------
  |  | 1055|    770|    static_cast<    \
  |  | 1056|    770|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    770|}
_ZN3scn2v44impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4931|    144|    {
 4932|    144|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3939|    144|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    144|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    144|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    144|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 114, False: 30]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    114|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    114|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    114|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    114|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    114|    }                                                  \
  |  |  |  | 3938|    144|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|     30|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4933|     30|        return read_string_impl(range, it, value);
 4934|    144|    }
_ZN3scn2v44impl11make_readerINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEEDav:
 5848|  3.59k|{
 5849|       |    if constexpr (std::is_same_v<T, bool>) {
 5850|       |        return reader_impl_for_bool<CharT>{};
 5851|       |    }
 5852|       |    else if constexpr (std::is_same_v<T, char>) {
 5853|       |        return reader_impl_for_char<CharT>{};
 5854|       |    }
 5855|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5856|       |        return reader_impl_for_wchar<CharT>{};
 5857|       |    }
 5858|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5859|       |        return reader_impl_for_code_point<CharT>{};
 5860|       |    }
 5861|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5862|  3.59k|                       std::is_same_v<T, std::wstring_view>) {
 5863|  3.59k|        return reader_impl_for_string<CharT>{};
 5864|       |    }
 5865|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5866|       |                       std::is_same_v<T, std::wstring>) {
 5867|       |        return reader_impl_for_string<CharT>{};
 5868|       |    }
 5869|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5870|       |                       std::is_same_v<T, wregex_matches>) {
 5871|       |        return reader_impl_for_regex_matches<CharT>{};
 5872|       |    }
 5873|       |    else if constexpr (std::is_same_v<T, void*>) {
 5874|       |        return reader_impl_for_voidptr<CharT>{};
 5875|       |    }
 5876|       |    else if constexpr (std::is_floating_point_v<T>) {
 5877|       |        return reader_impl_for_float<CharT>{};
 5878|       |    }
 5879|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5880|       |                       !std::is_same_v<T, wchar_t> &&
 5881|       |                       !std::is_same_v<T, char32_t> &&
 5882|       |                       !std::is_same_v<T, bool>) {
 5883|       |        return reader_impl_for_int<CharT>{};
 5884|       |    }
 5885|       |    else {
 5886|       |        return reader_impl_for_monostate<CharT>{};
 5887|       |    }
 5888|  3.59k|}
_ZN3scn2v44impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5313|  1.04k|    {
 5314|  1.04k|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|  1.04k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|  1.04k|        return read_impl(range, specs, value);
 5316|  1.04k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5331|  1.04k|    {
 5332|  1.04k|        SCN_CLANG_PUSH
 5333|  1.04k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|  1.04k|        switch (m_type) {
 5336|    350|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 350, False: 696]
  ------------------
 5337|    350|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|     92|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 92, False: 954]
  ------------------
 5340|     92|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|     92|                                                                   value);
 5342|       |
 5343|     56|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 56, False: 990]
  ------------------
 5344|     56|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|    294|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 294, False: 752]
  ------------------
 5347|    294|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|    294|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|      2|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 2, False: 1.04k]
  ------------------
 5352|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|      2|                    range, specs.charset_string<SourceCharT>(),
 5354|      2|                    specs.regexp_flags, value);
 5355|       |
 5356|    252|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 252, False: 794]
  ------------------
 5357|    252|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|    252|                    range,
 5359|    252|                    get_unescaped_regex_pattern(
 5360|    252|                        specs.charset_string<SourceCharT>()),
 5361|    252|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 1.04k]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1051|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|  1.04k|                SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|  1.04k|        }
 5368|       |
 5369|  1.04k|        SCN_CLANG_POP
 5370|  1.04k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4867|    350|    {
 4868|    350|        return read_string_view_impl(range, read_until_classic_space(range),
 4869|    350|                                     value);
 4870|    350|    }
_ZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEE:
 4813|    498|{
 4814|    498|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4815|       |
 4816|    498|    auto src = [&]() {
 4817|    498|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|    498|            return make_contiguous_buffer(
 4819|    498|                ranges::subrange{range.begin().base(), result.base()});
 4820|    498|        }
 4821|    498|        else {
 4822|    498|            return make_contiguous_buffer(
 4823|    498|                ranges::subrange{range.begin(), result});
 4824|    498|        }
 4825|    498|    }();
 4826|    498|    using src_type = decltype(src);
 4827|       |
 4828|    498|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4828:9): [Folded - Ignored]
  ------------------
 4829|      0|        return detail::unexpected_scan_error(
 4830|      0|            scan_error::invalid_format_string,
 4831|      0|            "Cannot read a string_view from this source range (not "
 4832|      0|            "contiguous)");
 4833|      0|    }
 4834|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4835|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4836|       |                                             "Cannot read a string_view from "
 4837|       |                                             "this source range (would require "
 4838|       |                                             "transcoding)");
 4839|       |    }
 4840|    498|    else {
 4841|    498|        const auto view = src.view();
 4842|    498|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4843|       |
 4844|    498|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4844:13): [True: 196, False: 302]
  ------------------
 4845|    196|            return detail::unexpected_scan_error(
 4846|    196|                scan_error::invalid_scanned_value,
 4847|    196|                "Invalid encoding in scanned string_view");
 4848|    196|        }
 4849|       |
 4850|    302|        return SCN_MOVE(result);
  ------------------
  |  | 1055|    302|    static_cast<    \
  |  | 1056|    302|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4851|    498|    }
 4852|    498|}
_ZZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEEENKUlvE_clEv:
 4816|    498|    auto src = [&]() {
 4817|    498|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|    498|            return make_contiguous_buffer(
 4819|    498|                ranges::subrange{range.begin().base(), result.base()});
 4820|       |        }
 4821|       |        else {
 4822|       |            return make_contiguous_buffer(
 4823|       |                ranges::subrange{range.begin(), result});
 4824|       |        }
 4825|    498|    }();
_ZN3scn2v44impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 4903|     92|    {
 4904|     92|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4904:13): [True: 40, False: 52]
  ------------------
 4905|     40|            return read_string_view_impl(
 4906|     40|                range,
 4907|     40|                read_until_code_unit(
 4908|     40|                    range,
 4909|     40|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4910|     40|                        SourceCharT ch) { return ch == until; }),
 4911|     40|                value);
 4912|     40|        }
 4913|     52|        return read_string_view_impl(
 4914|     52|            range,
 4915|     52|            read_until_code_units(
 4916|     52|                range, specs.fill.template get_code_units<SourceCharT>()),
 4917|     52|            value);
 4918|     92|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_S11_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|     40|        : m_fptr([](storage fn,
  743|     40|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     40|              cvref<T> obj = *get<T>(fn);
  745|     40|              if constexpr (std::is_void_v<R>) {
  746|     40|                  obj(static_cast<decltype(args)>(args)...);
  747|     40|              }
  748|     40|              else {
  749|     40|                  return obj(static_cast<decltype(args)>(args)...);
  750|     40|              }
  751|     40|          }),
  752|     40|          m_storage(std::addressof(f))
  753|     40|    {
  754|     40|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_S11_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES1B_c:
  743|    706|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    706|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    706|              else {
  749|    706|                  return obj(static_cast<decltype(args)>(args)...);
  750|    706|              }
  751|    706|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_17basic_string_viewIT0_NSI_11char_traitsISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|    706|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    706|        else if constexpr (std::is_object_v<T>) {
  688|    706|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    706|    }
_ZZN3scn2v44impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEEENKUlcE_clEc:
 4910|    706|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     40|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     40|        {
  662|     40|        }
_ZN3scn2v44impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4999|     56|    {
 5000|     56|        return read_impl(
 5001|     56|            range,
 5002|     56|            [&](const auto& rng) {
 5003|     56|                return read_string_view_impl(rng, read_all(rng), value);
 5004|     56|            },
 5005|     56|            detail::priority_tag<1>{});
 5006|     56|    }
_ZN3scn2v44impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_17basic_string_viewIT0_NSG_11char_traitsISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSX_OSP_NS0_6detail12priority_tagILm1EEE:
 5014|     56|    {
 5015|     56|        return read_cb(range);
 5016|     56|    }
_ZZN3scn2v44impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEEENKUlRKSH_E_clISD_EEDaSU_:
 5002|     56|            [&](const auto& rng) {
 5003|     56|                return read_string_view_impl(rng, read_all(rng), value);
 5004|     56|            },
_ZN3scn2v44impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 5102|    294|    {
 5103|    294|        auto it = read_source_impl(range, {specs});
 5104|    294|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  986|    294|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 8, False: 286]
  |  |  ------------------
  ------------------
 5105|      8|            return unexpected(it.error());
 5106|      8|        }
 5107|       |
 5108|    286|        return read_string_view_impl(range, *it, value);
 5109|    294|    }
_ZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEE:
 4813|    286|{
 4814|    286|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4815|       |
 4816|    286|    auto src = [&]() {
 4817|    286|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|    286|            return make_contiguous_buffer(
 4819|    286|                ranges::subrange{range.begin().base(), result.base()});
 4820|    286|        }
 4821|    286|        else {
 4822|    286|            return make_contiguous_buffer(
 4823|    286|                ranges::subrange{range.begin(), result});
 4824|    286|        }
 4825|    286|    }();
 4826|    286|    using src_type = decltype(src);
 4827|       |
 4828|    286|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4828:9): [Folded - Ignored]
  ------------------
 4829|      0|        return detail::unexpected_scan_error(
 4830|      0|            scan_error::invalid_format_string,
 4831|      0|            "Cannot read a string_view from this source range (not "
 4832|      0|            "contiguous)");
 4833|      0|    }
 4834|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4835|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4836|       |                                             "Cannot read a string_view from "
 4837|       |                                             "this source range (would require "
 4838|       |                                             "transcoding)");
 4839|       |    }
 4840|    286|    else {
 4841|    286|        const auto view = src.view();
 4842|    286|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4843|       |
 4844|    286|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4844:13): [True: 104, False: 182]
  ------------------
 4845|    104|            return detail::unexpected_scan_error(
 4846|    104|                scan_error::invalid_scanned_value,
 4847|    104|                "Invalid encoding in scanned string_view");
 4848|    104|        }
 4849|       |
 4850|    182|        return SCN_MOVE(result);
  ------------------
  |  | 1055|    182|    static_cast<    \
  |  | 1056|    182|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4851|    286|    }
 4852|    286|}
_ZZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEEENKUlvE_clEv:
 4816|    286|    auto src = [&]() {
 4817|    286|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|    286|            return make_contiguous_buffer(
 4819|    286|                ranges::subrange{range.begin().base(), result.base()});
 4820|       |        }
 4821|       |        else {
 4822|       |            return make_contiguous_buffer(
 4823|       |                ranges::subrange{range.begin(), result});
 4824|       |        }
 4825|    286|    }();
_ZN3scn2v44impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSN_IT0_NSO_IST_EEEE:
 4942|    254|    {
 4943|    254|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3939|    254|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    254|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    254|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    254|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 254, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    254|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    254|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    254|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    254|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    254|    }                                                  \
  |  |  |  | 3938|    254|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4944|      0|        return read_string_view_impl(range, it, value);
 4945|    254|    }
_ZN3scn2v44impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5313|  1.73k|    {
 5314|  1.73k|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|  1.73k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|  1.73k|        return read_impl(range, specs, value);
 5316|  1.73k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5331|  1.73k|    {
 5332|  1.73k|        SCN_CLANG_PUSH
 5333|  1.73k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|  1.73k|        switch (m_type) {
 5336|    340|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 340, False: 1.39k]
  ------------------
 5337|    340|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|     62|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 62, False: 1.67k]
  ------------------
 5340|     62|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|     62|                                                                   value);
 5342|       |
 5343|      0|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 0, False: 1.73k]
  ------------------
 5344|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|  1.18k|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 1.18k, False: 546]
  ------------------
 5347|  1.18k|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|  1.18k|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|     32|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 32, False: 1.70k]
  ------------------
 5352|     32|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|     32|                    range, specs.charset_string<SourceCharT>(),
 5354|     32|                    specs.regexp_flags, value);
 5355|       |
 5356|    112|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 112, False: 1.62k]
  ------------------
 5357|    112|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|    112|                    range,
 5359|    112|                    get_unescaped_regex_pattern(
 5360|    112|                        specs.charset_string<SourceCharT>()),
 5361|    112|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 1.73k]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1051|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|  1.73k|                SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|  1.73k|        }
 5368|       |
 5369|  1.73k|        SCN_CLANG_POP
 5370|  1.73k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4867|    972|    {
 4868|    972|        return read_string_view_impl(range, read_until_classic_space(range),
 4869|    972|                                     value);
 4870|    972|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4813|  1.03k|{
 4814|  1.03k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4815|       |
 4816|  1.03k|    auto src = [&]() {
 4817|  1.03k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|  1.03k|            return make_contiguous_buffer(
 4819|  1.03k|                ranges::subrange{range.begin().base(), result.base()});
 4820|  1.03k|        }
 4821|  1.03k|        else {
 4822|  1.03k|            return make_contiguous_buffer(
 4823|  1.03k|                ranges::subrange{range.begin(), result});
 4824|  1.03k|        }
 4825|  1.03k|    }();
 4826|  1.03k|    using src_type = decltype(src);
 4827|       |
 4828|  1.03k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4828:9): [Folded - Ignored]
  ------------------
 4829|      0|        return detail::unexpected_scan_error(
 4830|      0|            scan_error::invalid_format_string,
 4831|      0|            "Cannot read a string_view from this source range (not "
 4832|      0|            "contiguous)");
 4833|      0|    }
 4834|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4835|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4836|       |                                             "Cannot read a string_view from "
 4837|       |                                             "this source range (would require "
 4838|       |                                             "transcoding)");
 4839|       |    }
 4840|  1.03k|    else {
 4841|  1.03k|        const auto view = src.view();
 4842|  1.03k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4843|       |
 4844|  1.03k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4844:13): [True: 330, False: 704]
  ------------------
 4845|    330|            return detail::unexpected_scan_error(
 4846|    330|                scan_error::invalid_scanned_value,
 4847|    330|                "Invalid encoding in scanned string_view");
 4848|    330|        }
 4849|       |
 4850|    704|        return SCN_MOVE(result);
  ------------------
  |  | 1055|    704|    static_cast<    \
  |  | 1056|    704|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4851|  1.03k|    }
 4852|  1.03k|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4816|  1.03k|    auto src = [&]() {
 4817|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|       |            return make_contiguous_buffer(
 4819|       |                ranges::subrange{range.begin().base(), result.base()});
 4820|       |        }
 4821|  1.03k|        else {
 4822|  1.03k|            return make_contiguous_buffer(
 4823|  1.03k|                ranges::subrange{range.begin(), result});
 4824|  1.03k|        }
 4825|  1.03k|    }();
_ZN3scn2v44impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 4903|     62|    {
 4904|     62|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4904:13): [True: 30, False: 32]
  ------------------
 4905|     30|            return read_string_view_impl(
 4906|     30|                range,
 4907|     30|                read_until_code_unit(
 4908|     30|                    range,
 4909|     30|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4910|     30|                        SourceCharT ch) { return ch == until; }),
 4911|     30|                value);
 4912|     30|        }
 4913|     32|        return read_string_view_impl(
 4914|     32|            range,
 4915|     32|            read_until_code_units(
 4916|     32|                range, specs.fill.template get_code_units<SourceCharT>()),
 4917|     32|            value);
 4918|     62|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_SZ_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     30|        : m_fptr([](storage fn,
  743|     30|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     30|              cvref<T> obj = *get<T>(fn);
  745|     30|              if constexpr (std::is_void_v<R>) {
  746|     30|                  obj(static_cast<decltype(args)>(args)...);
  747|     30|              }
  748|     30|              else {
  749|     30|                  return obj(static_cast<decltype(args)>(args)...);
  750|     30|              }
  751|     30|          }),
  752|     30|          m_storage(std::addressof(f))
  753|     30|    {
  754|     30|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_SZ_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES19_c:
  743|    698|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    698|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    698|              else {
  749|    698|                  return obj(static_cast<decltype(args)>(args)...);
  750|    698|              }
  751|    698|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_17basic_string_viewIT0_NSG_11char_traitsIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    698|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    698|        else if constexpr (std::is_object_v<T>) {
  688|    698|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    698|    }
_ZZN3scn2v44impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEEENKUlcE_clEc:
 4910|    698|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     30|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     30|        {
  662|     30|        }
_ZN3scn2v44impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5102|  1.18k|    {
 5103|  1.18k|        auto it = read_source_impl(range, {specs});
 5104|  1.18k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  986|  1.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 394, False: 794]
  |  |  ------------------
  ------------------
 5105|    394|            return unexpected(it.error());
 5106|    394|        }
 5107|       |
 5108|    794|        return read_string_view_impl(range, *it, value);
 5109|  1.18k|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4813|    824|{
 4814|    824|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4815|       |
 4816|    824|    auto src = [&]() {
 4817|    824|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|    824|            return make_contiguous_buffer(
 4819|    824|                ranges::subrange{range.begin().base(), result.base()});
 4820|    824|        }
 4821|    824|        else {
 4822|    824|            return make_contiguous_buffer(
 4823|    824|                ranges::subrange{range.begin(), result});
 4824|    824|        }
 4825|    824|    }();
 4826|    824|    using src_type = decltype(src);
 4827|       |
 4828|    824|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4828:9): [Folded - Ignored]
  ------------------
 4829|      0|        return detail::unexpected_scan_error(
 4830|      0|            scan_error::invalid_format_string,
 4831|      0|            "Cannot read a string_view from this source range (not "
 4832|      0|            "contiguous)");
 4833|      0|    }
 4834|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4835|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4836|       |                                             "Cannot read a string_view from "
 4837|       |                                             "this source range (would require "
 4838|       |                                             "transcoding)");
 4839|       |    }
 4840|    824|    else {
 4841|    824|        const auto view = src.view();
 4842|    824|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4843|       |
 4844|    824|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4844:13): [True: 54, False: 770]
  ------------------
 4845|     54|            return detail::unexpected_scan_error(
 4846|     54|                scan_error::invalid_scanned_value,
 4847|     54|                "Invalid encoding in scanned string_view");
 4848|     54|        }
 4849|       |
 4850|    770|        return SCN_MOVE(result);
  ------------------
  |  | 1055|    770|    static_cast<    \
  |  | 1056|    770|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4851|    824|    }
 4852|    824|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4816|    824|    auto src = [&]() {
 4817|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|       |            return make_contiguous_buffer(
 4819|       |                ranges::subrange{range.begin().base(), result.base()});
 4820|       |        }
 4821|    824|        else {
 4822|    824|            return make_contiguous_buffer(
 4823|    824|                ranges::subrange{range.begin(), result});
 4824|    824|        }
 4825|    824|    }();
_ZN3scn2v44impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSL_IT0_NSM_ISR_EEEE:
 4942|    144|    {
 4943|    144|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3939|    144|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    144|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    144|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    144|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 114, False: 30]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    114|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    114|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    114|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    114|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    114|    }                                                  \
  |  |  |  | 3938|    144|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|     30|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4944|     30|        return read_string_view_impl(range, it, value);
 4945|    144|    }
_ZN3scn2v44impl16char_reader_baseIwE11check_specsERKNS0_6detail12format_specsE:
 5661|  1.36k|    {
 5662|  1.36k|        reader_error_handler eh{};
 5663|       |        if constexpr (std::is_same_v<ValueCharT, char32_t>) {
 5664|       |            detail::check_code_point_type_specs(specs, eh);
 5665|       |        }
 5666|  1.36k|        else {
 5667|  1.36k|            detail::check_char_type_specs(specs, eh);
 5668|  1.36k|        }
 5669|  1.36k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  986|  1.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 692, False: 676]
  |  |  ------------------
  ------------------
 5670|    692|            return detail::unexpected_scan_error(
 5671|    692|                scan_error::invalid_format_string, eh.m_msg);
 5672|    692|        }
 5673|    676|        return {};
 5674|  1.36k|    }
_ZNK3scn2v44impl12function_refIFbwES3_EclEw:
  762|  17.2k|    {
  763|  17.2k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1057|  17.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  17.2k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  2.88k|        : m_fptr([](storage fn,
  743|  2.88k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.88k|              cvref<T> obj = *get<T>(fn);
  745|  2.88k|              if constexpr (std::is_void_v<R>) {
  746|  2.88k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.88k|              }
  748|  2.88k|              else {
  749|  2.88k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.88k|              }
  751|  2.88k|          }),
  752|  2.88k|          m_storage(std::addressof(f))
  753|  2.88k|    {
  754|  2.88k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEwE_clESK_w:
  743|  6.76k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.76k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  6.76k|              else {
  749|  6.76k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.76k|              }
  751|  6.76k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  6.76k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  6.76k|        else if constexpr (std::is_object_v<T>) {
  688|  6.76k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  6.76k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  2.88k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.88k|        {
  662|  2.88k|        }
_ZNK3scn2v44impl16char_reader_baseIwE19skip_ws_before_readEv:
 5656|  8.46k|    {
 5657|  8.46k|        return false;
 5658|  8.46k|    }
_ZN3scn2v44impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1878|    140|    {
 1879|    140|        auto stdloc = loc.get<std::locale>();
 1880|    140|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1881|    140|        grouping = numpunct.grouping();
 1882|    140|        thousands_sep =
 1883|    140|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1883:13): [True: 0, False: 140]
  ------------------
 1884|    140|        decimal_point = numpunct.decimal_point();
 1885|    140|    }
_ZN3scn2v44impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1815|    168|{
 1816|    168|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1816:9): [True: 168, False: 0]
  ------------------
 1817|    168|        return std::use_facet<Facet>(stdloc);
 1818|    168|    }
 1819|      0|    stdloc = std::locale(stdloc, new Facet{});
 1820|      0|    return std::use_facet<Facet>(stdloc);
 1821|    168|}
_ZN3scn2v44impl20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2448|  3.60k|{
 2449|  3.60k|    size_t count{0};
 2450|  3.60k|    for_each_code_point(input, [&count](char32_t cp) {
 2451|  3.60k|        count += calculate_text_width_for_fmt_v10(cp);
 2452|  3.60k|    });
 2453|  3.60k|    return count;
 2454|  3.60k|}
_ZN3scn2v44impl19for_each_code_pointIwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_12function_refIFvDiESA_EE:
 1544|  3.60k|{
 1545|       |    // TODO: Could be optimized by being eager
 1546|  3.60k|    auto it = input.begin();
 1547|  14.3k|    while (it != input.end()) {
  ------------------
  |  Branch (1547:12): [True: 10.7k, False: 3.60k]
  ------------------
 1548|  10.7k|        auto res = get_next_code_point(
 1549|  10.7k|            detail::make_string_view_from_iterators<CharT>(it, input.end()));
 1550|  10.7k|        cb(res.value);
 1551|  10.7k|        it = detail::make_string_view_iterator(input, res.iterator);
 1552|  10.7k|    }
 1553|  3.60k|}
_ZN3scn2v44impl19get_next_code_pointIwEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1278|   245M|{
 1279|   245M|    SCN_EXPECT(!input.empty());
  ------------------
  |  | 1051|   245M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   245M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1280|       |
 1281|   245M|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1282|   245M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  986|   245M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 245M]
  |  |  ------------------
  ------------------
 1283|      0|        return {get_start_for_next_code_point(input),
 1284|      0|                detail::invalid_code_point};
 1285|      0|    }
 1286|   245M|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  986|   245M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 245M]
  |  |  ------------------
  ------------------
 1287|      0|        return {input.end(), detail::invalid_code_point};
 1288|      0|    }
 1289|       |
 1290|   245M|    return {input.begin() + len,
 1291|   245M|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1292|   245M|}
_ZN3scn2v44impl12function_refIFvDiES3_EC2IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfIS9_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSF_EEvE4typeELPv0EEEOS9_:
  742|  3.60k|        : m_fptr([](storage fn,
  743|  3.60k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.60k|              cvref<T> obj = *get<T>(fn);
  745|  3.60k|              if constexpr (std::is_void_v<R>) {
  746|  3.60k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.60k|              }
  748|  3.60k|              else {
  749|  3.60k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.60k|              }
  751|  3.60k|          }),
  752|  3.60k|          m_storage(std::addressof(f))
  753|  3.60k|    {
  754|  3.60k|    }
_ZZN3scn2v44impl12function_refIFvDiES3_EC1IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfIS9_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSF_EEvE4typeELPv0EEEOS9_ENKUlNS1_12fnref_detail4base7storageEDiE_clESO_Di:
  743|  10.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  10.7k|              cvref<T> obj = *get<T>(fn);
  745|  10.7k|              if constexpr (std::is_void_v<R>) {
  746|  10.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|       |              else {
  749|       |                  return obj(static_cast<decltype(args)>(args)...);
  750|       |              }
  751|  10.7k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEUlDiE_EEDaNS3_7storageE:
  683|  10.7k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  10.7k|        else if constexpr (std::is_object_v<T>) {
  688|  10.7k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  10.7k|    }
_ZZN3scn2v44impl20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEENKUlDiE_clEDi:
 2450|  10.7k|    for_each_code_point(input, [&count](char32_t cp) {
 2451|  10.7k|        count += calculate_text_width_for_fmt_v10(cp);
 2452|  10.7k|    });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vIS9_EEvE4typeELPv0EEEPS9_:
  660|  3.60k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  3.60k|        {
  662|  3.60k|        }
_ZNK3scn2v44impl24contiguous_range_factoryIwE4viewEv:
 1680|  16.8k|    {
 1681|  16.8k|        return m_view;
 1682|  16.8k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwED2Ev:
 1670|  16.7k|    ~contiguous_range_factory() = default;
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E14multibyte_leftEv:
 2520|  4.25k|    {
 2521|  4.25k|        return m_multibyte_left;
 2522|  4.25k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E22is_current_double_wideEv:
 2525|  3.44k|    {
 2526|  3.44k|        assert(count() != 0 || multibyte_left() != 0);
 2527|  3.44k|        return _get_width_at_current_cp_start(
 2528|  3.44k|                   _get_cp_length_at_current()) == 2;
 2529|  3.44k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E30_get_width_at_current_cp_startEl:
 2753|  44.8k|    {
 2754|  44.8k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  986|  44.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 44.8k]
  |  |  ------------------
  ------------------
 2755|      0|            return 0;
 2756|      0|        }
 2757|       |
 2758|  44.8k|        if (cplen == 1) {
  ------------------
  |  Branch (2758:13): [True: 44.8k, False: 0]
  ------------------
 2759|  44.8k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  | 1051|  44.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  44.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2760|  44.8k|            auto cp = static_cast<char32_t>(*m_current);
 2761|  44.8k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2762|  44.8k|        }
 2763|       |
 2764|      0|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2765|      0|                                           cplen);
 2766|      0|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2767|      0|            return 0;
 2768|      0|        }
 2769|       |
 2770|      0|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2771|      0|        return static_cast<difference_type>(
 2772|      0|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2773|      0|    }
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1955|  46.0k|{
 1956|  46.0k|    SCN_EXPECT(count >= 0);
  ------------------
  |  | 1051|  46.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  46.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|  46.0k|    if constexpr (ranges::sized_range<Range>) {
 1959|  46.0k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|  46.0k|        if (sz < count) {
  ------------------
  |  Branch (1960:13): [True: 190, False: 45.8k]
  ------------------
 1961|    190|            return unexpected(eof_error::eof);
 1962|    190|        }
 1963|       |
 1964|  45.8k|        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|       |    else {
 1967|       |        auto it = range.begin();
 1968|       |        if (guaranteed_minimum_size(range) >= count) {
 1969|       |            return ranges::next(it, count);
 1970|       |        }
 1971|       |
 1972|       |        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1973|       |            if (it == range.end()) {
 1974|       |                return unexpected(eof_error::eof);
 1975|       |            }
 1976|       |        }
 1977|       |
 1978|       |        return it;
 1979|       |    }
 1980|  46.0k|}
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E25_get_cp_length_at_currentEv:
 2747|  44.8k|    {
 2748|  44.8k|        return static_cast<difference_type>(
 2749|  44.8k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2750|  44.8k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EdeEv:
 2532|  58.3k|    {
 2533|  58.3k|        return *m_current;
 2534|  58.3k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EppEv:
 2541|  41.4k|    {
 2542|  41.4k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  | 1051|  41.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  41.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2543|  41.4k|        _increment_current();
 2544|  41.4k|        return *this;
 2545|  41.4k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E18_increment_currentEv:
 2776|  41.4k|    {
 2777|  41.4k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2777:13): [True: 41.4k, False: 0]
  ------------------
 2778|  41.4k|            auto cplen = _get_cp_length_at_current();
 2779|  41.4k|            m_multibyte_left = cplen - 1;
 2780|  41.4k|            m_count -= _get_width_at_current_cp_start(cplen);
 2781|  41.4k|        }
 2782|      0|        else {
 2783|      0|            --m_multibyte_left;
 2784|      0|        }
 2785|       |
 2786|  41.4k|        ++m_current;
 2787|  41.4k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EESB_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SE_EENS1_20incrementable_traitsISE_E15difference_typeEE4typeESE_SF_:
  107|     22|    {
  108|     22|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|     22|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EESB_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISF_E15difference_typeEE4typeESF_SE_NS0_6detail12priority_tagILm0EEE:
   93|     22|    {
   94|     22|        iter_difference_t<I> counter{0};
   95|     44|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 22, False: 22]
  ------------------
   96|     22|            ++i;
   97|     22|            ++counter;
   98|     22|        }
   99|     22|        return counter;
  100|     22|    }
_ZN3scn2v44impl27counted_width_iterator_implneIPKwS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2637|  14.6k|    {
 2638|  14.6k|        return !(a == b);
 2639|  14.6k|    }
_ZN3scn2v44impl27counted_width_iterator_impleqIPKwS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2629|  16.1k|    {
 2630|  16.1k|        return a.m_current == b.m_current;
 2631|  16.1k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EdeEv:
 2536|  5.43k|    {
 2537|  5.43k|        return *m_current;
 2538|  5.43k|    }
_ZNK3scn2v46ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_NS1_20incrementable_traitsISD_E15difference_typeE:
  303|     66|    {
  304|     66|        ranges::advance(x, n);
  305|     66|        return x;
  306|     66|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeE:
  267|     66|    {
  268|     66|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|     66|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent22random_access_iteratorISE_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  160|     66|    {
  161|     66|        constexpr auto zero = iter_difference_t<I>{0};
  162|       |
  163|     66|        if (n > zero) {
  ------------------
  |  Branch (163:13): [True: 66, False: 0]
  ------------------
  164|    132|            while (n-- > zero) {
  ------------------
  |  Branch (164:20): [True: 66, False: 66]
  ------------------
  165|     66|                ++i;
  166|     66|            }
  167|     66|        }
  168|      0|        else {
  169|      0|            while (n++ < zero) {
  ------------------
  |  Branch (169:20): [True: 0, False: 0]
  ------------------
  170|      0|                --i;
  171|      0|            }
  172|      0|        }
  173|     66|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EEwE8is_validEv:
 1988|  15.9k|    {
 1989|  15.9k|        return !codepoint.empty();
 1990|  15.9k|    }
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EESB_EEEEDaOT_:
 1781|    884|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|       |                  ranges::sized_range<Range>) {
 1785|       |        return string_view_wrapper{SCN_FWD(range)};
 1786|       |    }
 1787|    884|    else {
 1788|    884|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  | 1057|    884|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1789|    884|    }
 1790|    884|}
_ZN3scn2v44impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSH_:
 1635|    884|    {
 1636|    884|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1057|    884|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1637|    884|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEvOT_:
 1719|    904|    {
 1720|    904|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|    904|        else {
 1753|    904|            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|    904|            if constexpr (ranges::common_range<Range>) {
 1758|    904|                std::copy(ranges::begin(range), ranges::end(range),
 1759|    904|                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|    904|            m_view = string_view_type{str};
 1768|    904|        }
 1769|    904|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EC2ES5_S5_l:
 2480|  16.2k|        : m_current(x), m_end(s), m_count(n)
 2481|  16.2k|    {
 2482|  16.2k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E4baseEv:
 2512|  60.8k|    {
 2513|  60.8k|        return m_current;
 2514|  60.8k|    }
_ZN3scn2v44impl24read_while_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2215|   128k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|   128k|    else {
 2225|   128k|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|   128k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   128k|            return detail::is_cp_space(cp);
 2238|   128k|        });
 2239|   128k|    }
 2240|   128k|}
_ZN3scn2v44impl21read_while_code_pointINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_NS1_12function_refIFbDiESG_EE:
 2180|   128k|{
 2181|   128k|    return read_until_code_point(range, std::not_fn(pred));
 2182|   128k|}
_ZN3scn2v44impl21read_until_code_pointINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_NS1_12function_refIFbDiESG_EE:
 2159|   128k|{
 2160|   128k|    auto it = range.begin();
 2161|   140k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 135k, False: 4.88k]
  ------------------
 2162|   135k|        const auto val =
 2163|   135k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|   135k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  985|   135k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 135k, False: 0]
  |  |  ------------------
  ------------------
 2165|   135k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|   135k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|   135k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 124k, False: 11.1k]
  ------------------
 2168|   124k|                return it;
 2169|   124k|            }
 2170|   135k|        }
 2171|  11.1k|        it = val.iterator;
 2172|  11.1k|    }
 2173|       |
 2174|  4.88k|    return it;
 2175|   128k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1997|   692k|{
 1998|   692k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1051|   692k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   692k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|   692k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|   692k|    auto it = range.begin();
 2002|   692k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|   692k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  986|   692k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 692k]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|   692k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 692k, False: 0]
  ------------------
 2011|   692k|        ++it;
 2012|   692k|        return {it, string_type(1, *range.begin())};
 2013|   692k|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|   692k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  944|   893k|{
  945|   893k|    return is_range_eof(r.begin(), r.end());
  946|   893k|}
_ZN3scn2v44impl12is_range_eofIPKwS4_EEbT_T0_:
  928|   246M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   246M|    {
  938|   246M|        return begin == end;
  939|   246M|    }
  940|   246M|}
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|  7.66k|    {
  190|  7.66k|        i = std::move(bound);
  191|  7.66k|    }
_ZNK3scn2v44impl27read_code_point_into_resultIPKwwE8is_validEv:
 1988|   692k|    {
 1989|   692k|        return !codepoint.empty();
 1990|   692k|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_:
  742|   128k|        : m_fptr([](storage fn,
  743|   128k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   128k|              cvref<T> obj = *get<T>(fn);
  745|   128k|              if constexpr (std::is_void_v<R>) {
  746|   128k|                  obj(static_cast<decltype(args)>(args)...);
  747|   128k|              }
  748|   128k|              else {
  749|   128k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   128k|              }
  751|   128k|          }),
  752|   128k|          m_storage(std::addressof(f))
  753|   128k|    {
  754|   128k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESU_Di:
  743|   135k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   135k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   135k|              else {
  749|   135k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   135k|              }
  751|   135k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  683|   135k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   135k|        else if constexpr (std::is_object_v<T>) {
  688|   135k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   135k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2236|   135k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   135k|            return detail::is_cp_space(cp);
 2238|   135k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vISE_EEvE4typeELPv0EEEPSE_:
  660|   128k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   128k|        {
  662|   128k|        }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  950|   201k|{
  951|   201k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  986|   201k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 201k]
  |  |  ------------------
  ------------------
  952|      0|        return eof_error::eof;
  953|      0|    }
  954|   201k|    return eof_error::good;
  955|   201k|}
_ZNK3scn2v44impl14_take_width_fnclINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEDTtlNS1_15take_width_viewEfp_fp0_EERKT_l:
 2942|  6.25k|    {
 2943|  6.25k|        return take_width_view{r, n};
 2944|  6.25k|    }
_ZN3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2ERKS9_l:
 2910|  6.25k|        : m_base(base), m_count(count)
 2911|  6.25k|    {
 2912|  6.25k|    }
_ZN3scn2v44impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEvEC2ERKS9_:
 2822|  6.25k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v44impl21reader_impl_for_wcharIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERwNSN_10locale_refE:
 5737|    236|    {
 5738|    236|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5738:13): [True: 192, False: 44]
  ------------------
 5739|    236|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5739:13): [True: 0, False: 44]
  ------------------
 5740|    192|            return read_default(range, value, loc);
 5741|    192|        }
 5742|       |
 5743|     44|        reader_impl_for_int<CharT> reader{};
 5744|     44|        using integer_type =
 5745|     44|            std::conditional_t<sizeof(wchar_t) == 2, int16_t, int32_t>;
 5746|     44|        integer_type tmp_value{};
 5747|     44|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5748|     44|        value = static_cast<integer_type>(value);
 5749|     44|        return ret;
 5750|    236|    }
_ZN3scn2v44impl21reader_impl_for_wcharIwE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RwNS0_6detail10locale_refE:
 5721|    192|    {
 5722|    192|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|    192|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5723|       |        if constexpr (std::is_same_v<CharT, char>) {
 5724|       |            return code_point_reader<wchar_t>{}.read(range, value);
 5725|       |        }
 5726|    192|        else {
 5727|    192|            return code_unit_reader<wchar_t>{}.read(range, value);
 5728|    192|        }
 5729|    192|    }
_ZN3scn2v44impl16code_unit_readerIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSH_Rw:
 5601|    192|    {
 5602|    192|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3939|    192|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    192|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    192|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    192|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 192]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|    192|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    192|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5603|    192|        ch = *range.begin();
 5604|    192|        return it;
 5605|    192|    }
_ZN3scn2v44impl14read_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 1944|  1.61k|{
 1945|  1.61k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  1.61k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 1.61k]
  |  |  ------------------
  ------------------
 1946|      0|        return unexpected(e);
 1947|      0|    }
 1948|       |
 1949|  1.61k|    return ranges::next(range.begin());
 1950|  1.61k|}
_ZN3scn2v44impl9eof_checkINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_9eof_errorET_:
  950|  1.61k|{
  951|  1.61k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  986|  1.61k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 1.61k]
  |  |  ------------------
  ------------------
  952|      0|        return eof_error::eof;
  953|      0|    }
  954|  1.61k|    return eof_error::good;
  955|  1.61k|}
_ZN3scn2v44impl12is_range_eofINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEbT_:
  944|  1.61k|{
  945|  1.61k|    return is_range_eof(r.begin(), r.end());
  946|  1.61k|}
_ZN3scn2v44impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEbT_T0_:
  928|  17.6k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  17.6k|    {
  938|  17.6k|        return begin == end;
  939|  17.6k|    }
  940|  17.6k|}
_ZN3scn2v44impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2878|  56.1k|        {
 2879|  56.1k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2879:21): [True: 812, False: 55.3k]
  |  Branch (2879:39): [True: 812, False: 0]
  ------------------
 2880|  56.1k|                   y.base() == x.m_end ||
  ------------------
  |  Branch (2880:20): [True: 438, False: 54.9k]
  ------------------
 2881|  56.1k|                   (y.count() == 1 && y.multibyte_left() == 0 &&
  ------------------
  |  Branch (2881:21): [True: 3.44k, False: 51.4k]
  |  Branch (2881:39): [True: 3.44k, False: 0]
  ------------------
 2882|  54.9k|                    y.is_current_double_wide());
  ------------------
  |  Branch (2882:21): [True: 54, False: 3.39k]
  ------------------
 2883|  56.1k|        }
_ZNK3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE3endEv:
 2926|  31.0k|    {
 2927|  31.0k|        return sentinel<true>{m_base.get().end()};
 2928|  31.0k|    }
_ZNK3scn2v44impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEvE3getEv:
 2825|  63.4k|    {
 2826|  63.4k|        return view;
 2827|  63.4k|    }
_ZN3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE8sentinelILb1EEC2ES8_:
 2859|  31.0k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
  ------------------
  |  | 1055|  31.0k|    static_cast<    \
  |  | 1056|  31.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
_ZNK3scn2v46ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
  295|  1.70k|    {
  296|  1.70k|        ++x;
  297|  1.70k|        return x;
  298|  1.70k|    }
_ZNK3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 2920|  16.2k|    {
 2921|  16.2k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2922|  16.2k|                                      m_count};
 2923|  16.2k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEiEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3589|    288|    {
 3590|    288|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3939|    288|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    288|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    288|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    288|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 288]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|    288|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    288|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|    288|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|    288|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 0, False: 288]
  ------------------
 3594|       |            if constexpr (!std::is_signed_v<T>) {
 3595|       |                return detail::unexpected_scan_error(
 3596|       |                    scan_error::invalid_scanned_value,
 3597|       |                    "Unexpected '-' sign when parsing an "
 3598|       |                    "unsigned value");
 3599|       |            }
 3600|      0|            else {
 3601|      0|                if (specs.type ==
  ------------------
  |  Branch (3601:21): [True: 0, False: 0]
  ------------------
 3602|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3603|      0|                    return detail::unexpected_scan_error(
 3604|      0|                        scan_error::invalid_scanned_value,
 3605|      0|                        "'u'-option disallows negative values");
 3606|      0|                }
 3607|      0|            }
 3608|      0|        }
 3609|       |
 3610|    288|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 12, False: 276]
  ------------------
 3611|     12|            value = T{0};
 3612|     12|            return std::next(prefix_result.iterator);
 3613|     12|        }
 3614|       |
 3615|    276|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  985|    276|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 250, False: 26]
  |  |  ------------------
  ------------------
 3616|    250|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3939|    250|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    250|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    250|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    250|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 234, False: 16]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    234|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    234|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    234|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    234|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    234|    }                                                  \
  |  |  |  | 3938|    250|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|     16|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|     16|                    parse_integer_digits_without_thsep(
 3618|     16|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|     16|                        prefix_result.parsed_base));
 3620|       |
 3621|     16|            auto buf = make_contiguous_buffer(
 3622|     16|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|     16|            SCN_TRY(result_it,
  ------------------
  |  | 3939|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 16]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|     16|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|     16|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|     16|                                        prefix_result.parsed_base));
 3626|       |
 3627|     16|            return ranges::next(
 3628|     16|                prefix_result.iterator,
 3629|     16|                ranges::distance(buf.view().begin(), result_it));
 3630|     16|        }
 3631|       |
 3632|     26|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|     26|            localized_number_formatting_options<CharT>{loc};
 3637|     26|#endif
 3638|       |
 3639|     26|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3939|     26|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|     26|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|     26|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 22, False: 4]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     22|    }                                                  \
  |  |  |  | 3938|     26|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      4|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|      4|                parse_integer_digits_with_thsep(
 3641|      4|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|      4|                    prefix_result.parsed_base, locale_options));
 3643|      4|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|      4|            parse_digits_result;
 3645|       |
 3646|      4|        auto nothsep_source_view =
 3647|      4|            std::basic_string_view<CharT>{nothsep_source};
 3648|      4|        SCN_TRY(
  ------------------
  |  | 3939|      4|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      4|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      4|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 4]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      4|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      4|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|      4|            nothsep_source_it,
 3650|      4|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|      4|                                prefix_result.parsed_base));
 3652|       |
 3653|      4|        return ranges::next(
 3654|      4|            prefix_result.iterator,
 3655|      4|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|      4|                ranges::ssize(thsep_indices));
 3657|      4|    }
_ZN3scn2v44impl20parse_integer_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESG_i:
 3376|    722|{
 3377|    722|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3939|    722|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    722|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    722|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    722|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 722]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|    722|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    722|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3378|    722|    auto [base_prefix_begin_it, sign] = sign_result;
 3379|       |
 3380|    722|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3381|    722|        parse_integer_base_prefix(
 3382|    722|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3383|       |
 3384|    722|    if (parsed_zero) {
  ------------------
  |  Branch (3384:9): [True: 18, False: 704]
  ------------------
 3385|     18|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3385:13): [True: 6, False: 12]
  |  Branch (3385:13): [True: 18, False: 0]
  ------------------
 3386|     18|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3386:13): [True: 12, False: 0]
  ------------------
 3387|     18|            digits_begin_it = base_prefix_begin_it;
 3388|     18|        }
 3389|      0|        else {
 3390|      0|            parsed_zero = false;
 3391|      0|        }
 3392|     18|    }
 3393|    704|    else {
 3394|    704|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3394:13): [True: 0, False: 704]
  |  Branch (3394:13): [True: 658, False: 46]
  ------------------
 3395|    704|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3395:13): [True: 658, False: 46]
  ------------------
 3396|    658|            digits_begin_it = base_prefix_begin_it;
 3397|    658|        }
 3398|    704|    }
 3399|       |
 3400|    722|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3400:9): [True: 722, False: 0]
  ------------------
 3401|    722|        sign = sign_type::plus_sign;
 3402|    722|    }
 3403|    722|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3404|    722|        digits_begin_it, parsed_base, sign, parsed_zero};
 3405|    722|}
_ZN3scn2v44impl18parse_numeric_signINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESG_:
 3257|    954|{
 3258|    954|    auto r = read_one_of_code_unit(range, "+-");
 3259|    954|    if (!r) {
  ------------------
  |  Branch (3259:9): [True: 954, False: 0]
  ------------------
 3260|    954|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3260:13): [True: 954, False: 0]
  ------------------
 3261|    954|            return std::pair{range.begin(), sign_type::default_sign};
 3262|    954|        }
 3263|      0|        return unexpected(eof_error::eof);
 3264|    954|    }
 3265|       |
 3266|      0|    auto& it = *r;
 3267|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3267:9): [True: 0, False: 0]
  ------------------
 3268|      0|        return std::pair{it, sign_type::minus_sign};
 3269|      0|    }
 3270|      0|    return std::pair{it, sign_type::plus_sign};
 3271|      0|}
_ZN3scn2v44impl21read_one_of_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2371|    954|{
 2372|    954|    auto it = read_code_unit(range);
 2373|    954|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  986|    954|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 954]
  |  |  ------------------
  ------------------
 2374|      0|        return unexpected(make_eof_parse_error(it.error()));
 2375|      0|    }
 2376|       |
 2377|  1.90k|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 1.90k, False: 954]
  ------------------
 2378|  1.90k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 0, False: 1.90k]
  ------------------
 2379|      0|            return *it;
 2380|      0|        }
 2381|  1.90k|    }
 2382|       |
 2383|    954|    return unexpected(parse_error::error);
 2384|    954|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_i:
 3343|    722|{
 3344|    722|    switch (base) {
 3345|      8|        case 2:
  ------------------
  |  Branch (3345:9): [True: 8, False: 714]
  ------------------
 3346|       |            // allow 0b/0B
 3347|      8|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3348|      8|                    false};
 3349|       |
 3350|     30|        case 8: {
  ------------------
  |  Branch (3350:9): [True: 30, False: 692]
  ------------------
 3351|       |            // allow 0o/0O/0
 3352|     30|            bool zero_parsed = false;
 3353|     30|            auto it = apply_opt(
 3354|     30|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3355|     30|            return {it, 8, zero_parsed};
 3356|      0|        }
 3357|       |
 3358|    212|        case 16:
  ------------------
  |  Branch (3358:9): [True: 212, False: 510]
  ------------------
 3359|       |            // allow 0x/0X
 3360|    212|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3361|    212|                    false};
 3362|       |
 3363|     38|        case 0:
  ------------------
  |  Branch (3363:9): [True: 38, False: 684]
  ------------------
 3364|       |            // detect base
 3365|     38|            return parse_integer_base_prefix_for_detection(range);
 3366|       |
 3367|    434|        default:
  ------------------
  |  Branch (3367:9): [True: 434, False: 288]
  ------------------
 3368|       |            // no base prefix allowed
 3369|    434|            return {range.begin(), base, false};
 3370|    722|    }
 3371|    722|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENS1_14parse_expectedESB_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEEE4typeEOSN_SP_:
 2390|    250|{
 2391|    250|    if (!result) {
  ------------------
  |  Branch (2391:9): [True: 244, False: 6]
  ------------------
 2392|    244|        return range.begin();
 2393|    244|    }
 2394|      6|    return *result;
 2395|    250|}
_ZN3scn2v44impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3294|     46|{
 3295|     46|    return read_matching_string_classic_nocase(range, "0b");
 3296|     46|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEE:
 2330|  1.04k|{
 2331|  1.04k|    using char_type = detail::char_t<Range>;
 2332|       |
 2333|       |    if constexpr (ranges::contiguous_range<Range> &&
 2334|       |                  std::is_same_v<char_type, char>) {
 2335|       |        if (range.size() < str.size()) {
 2336|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2337|       |        }
 2338|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2339|       |            return unexpected(parse_error::error);
 2340|       |        }
 2341|       |        return ranges::next(range.begin(), str.size());
 2342|       |    }
 2343|  1.04k|    else {
 2344|  1.04k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|  1.04k|            if (ch < 'A' || ch > 'Z') {
 2346|  1.04k|                return ch;
 2347|  1.04k|            }
 2348|  1.04k|            return static_cast<char_type>(ch +
 2349|  1.04k|                                          static_cast<char_type>('a' - 'A'));
 2350|  1.04k|        };
 2351|       |
 2352|  1.04k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3939|  1.04k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  1.04k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  1.04k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  1.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 208, False: 840]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    208|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    208|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    208|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    208|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    208|    }                                                  \
  |  |  |  | 3938|  1.04k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    840|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2353|    840|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2354|    840|                        .transform_error(make_eof_parse_error));
 2355|       |
 2356|    840|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  986|    840|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 840, False: 0]
  |  |  ------------------
  ------------------
 2357|    840|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2358|    840|                    return ascii_tolower(a) ==
 2359|    840|                           static_cast<detail::char_t<Range>>(b);
 2360|    840|                }))) {
 2361|    840|            return unexpected(parse_error::error);
 2362|    840|        }
 2363|       |
 2364|      0|        return it;
 2365|    840|    }
 2366|  1.04k|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_l:
 1955|  1.04k|{
 1956|  1.04k|    SCN_EXPECT(count >= 0);
  ------------------
  |  | 1051|  1.04k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.04k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|  1.04k|    else {
 1967|  1.04k|        auto it = range.begin();
 1968|  1.04k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 0, False: 1.04k]
  ------------------
 1969|      0|            return ranges::next(it, count);
 1970|      0|        }
 1971|       |
 1972|  3.35k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 2.51k, False: 840]
  ------------------
 1973|  2.51k|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 208, False: 2.30k]
  ------------------
 1974|    208|                return unexpected(eof_error::eof);
 1975|    208|            }
 1976|  2.51k|        }
 1977|       |
 1978|    840|        return it;
 1979|  1.04k|    }
 1980|  1.04k|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEmT_:
 1095|  1.04k|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|       |                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|       |        else {
 1107|       |            if (r.begin().stores_parent()) {
 1108|       |                return static_cast<size_t>(
 1109|       |                    r.begin().parent()->chars_available() -
 1110|       |                    r.begin().position());
 1111|       |            }
 1112|       |            return r.begin().contiguous_segment().size();
 1113|       |        }
 1114|       |    }
 1115|  1.04k|    else {
 1116|  1.04k|        return 0;
 1117|  1.04k|    }
 1118|  1.04k|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlwE_clEw:
 2344|    882|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|    882|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2345:17): [True: 132, False: 750]
  |  Branch (2345:29): [True: 750, False: 0]
  ------------------
 2346|    882|                return ch;
 2347|    882|            }
 2348|      0|            return static_cast<char_type>(ch +
 2349|      0|                                          static_cast<char_type>('a' - 'A'));
 2350|    882|        };
_ZN3scn2v44impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_Rb:
 3308|     68|{
 3309|     68|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3309:14): [True: 0, False: 68]
  ------------------
 3310|      0|        return *r;
 3311|      0|    }
 3312|       |
 3313|     68|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3313:14): [True: 18, False: 50]
  ------------------
 3314|     18|        zero_parsed = true;
 3315|     18|        return *r;
 3316|     18|    }
 3317|       |
 3318|     50|    return unexpected(parse_error::error);
 3319|     68|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NDTcl4implISL_EEE4typeE:
 2245|     90|{
 2246|     90|    auto it = read_code_unit(range);
 2247|     90|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  986|     90|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 8, False: 82]
  |  |  ------------------
  ------------------
 2248|      8|        return unexpected(make_eof_parse_error(it.error()));
 2249|      8|    }
 2250|       |
 2251|     82|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  986|     82|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 64, False: 18]
  |  |  ------------------
  ------------------
 2252|     82|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|     64|        return unexpected(parse_error::error);
 2254|     64|    }
 2255|       |
 2256|     18|    return *it;
 2257|     82|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 1944|    110|{
 1945|    110|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|    110|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 14, False: 96]
  |  |  ------------------
  ------------------
 1946|     14|        return unexpected(e);
 1947|     14|    }
 1948|       |
 1949|     96|    return ranges::next(range.begin());
 1950|    110|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_9eof_errorET_:
  950|    110|{
  951|    110|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  986|    110|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 14, False: 96]
  |  |  ------------------
  ------------------
  952|     14|        return eof_error::eof;
  953|     14|    }
  954|     96|    return eof_error::good;
  955|    110|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEbT_:
  944|  16.0k|{
  945|  16.0k|    return is_range_eof(r.begin(), r.end());
  946|  16.0k|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3301|    250|{
 3302|    250|    return read_matching_string_classic_nocase(range, "0x");
 3303|    250|}
_ZN3scn2v44impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_:
 3324|     38|{
 3325|     38|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3325:14): [True: 0, False: 38]
  ------------------
 3326|      0|        return {*r, 16, false};
 3327|      0|    }
 3328|     38|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3328:14): [True: 0, False: 38]
  ------------------
 3329|      0|        return {*r, 2, false};
 3330|      0|    }
 3331|     38|    {
 3332|     38|        bool zero_parsed{false};
 3333|     38|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3333:18): [True: 12, False: 26]
  ------------------
 3334|     12|            return {*r, 8, zero_parsed};
 3335|     12|        }
 3336|     38|    }
 3337|     26|    return {range.begin(), 10, false};
 3338|     38|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_i:
 3410|    652|{
 3411|    652|    using char_type = detail::char_t<Range>;
 3412|       |
 3413|       |    if constexpr (ranges::contiguous_range<Range>) {
 3414|       |        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3415|       |            return detail::unexpected_scan_error(
 3416|       |                scan_error::invalid_scanned_value,
 3417|       |                "Failed to parse integer: No digits found");
 3418|       |        }
 3419|       |        return range.end();
 3420|       |    }
 3421|    652|    else {
 3422|    652|        return read_while1_code_unit(range,
 3423|    652|                                     [&](char_type ch) noexcept {
 3424|    652|                                         return char_to_int(ch) < base;
 3425|    652|                                     })
 3426|    652|            .transform_error(map_parse_error_to_scan_error(
 3427|    652|                scan_error::invalid_scanned_value,
 3428|    652|                "Failed to parse integer: No digits found"));
 3429|    652|    }
 3430|    652|}
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigISU_E8functionEEE:
 2094|    906|{
 2095|    906|    auto it = read_while_code_unit(range, pred);
 2096|    906|    if (it == range.begin()) {
  ------------------
  |  Branch (2096:9): [True: 846, False: 60]
  ------------------
 2097|    846|        return unexpected(parse_error::error);
 2098|    846|    }
 2099|     60|    return it;
 2100|    906|}
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 2074|    906|{
 2075|    906|    return read_until_code_unit(range, std::not_fn(pred));
 2076|    906|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 2055|    906|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|    906|    else {
 2060|    906|        auto first = range.begin();
 2061|    966|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 936, False: 30]
  ------------------
 2062|    936|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 876, False: 60]
  ------------------
 2063|    876|                return first;
 2064|    876|            }
 2065|    936|        }
 2066|     30|        return first;
 2067|    906|    }
 2068|    906|}
_ZN3scn2v44implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2891|  27.6k|        {
 2892|  27.6k|            return !(y == x);
 2893|  27.6k|        }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_SV_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSP_:
  742|    652|        : m_fptr([](storage fn,
  743|    652|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    652|              cvref<T> obj = *get<T>(fn);
  745|    652|              if constexpr (std::is_void_v<R>) {
  746|    652|                  obj(static_cast<decltype(args)>(args)...);
  747|    652|              }
  748|    652|              else {
  749|    652|                  return obj(static_cast<decltype(args)>(args)...);
  750|    652|              }
  751|    652|          }),
  752|    652|          m_storage(std::addressof(f))
  753|    652|    {
  754|    652|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_SV_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  743|    676|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    676|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    676|              else {
  749|    676|                  return obj(static_cast<decltype(args)>(args)...);
  750|    676|              }
  751|    676|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSD_EENS1_15take_width_viewINS9_ISD_SD_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_iEUlwE_EEDaNS3_7storageE:
  683|    676|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    676|        else if constexpr (std::is_object_v<T>) {
  688|    676|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    676|    }
_ZZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_iENKUlwE_clEw:
 3423|    676|                                     [&](char_type ch) noexcept {
 3424|    676|                                         return char_to_int(ch) < base;
 3425|    676|                                     })
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_TnPNSN_9enable_ifIXsr3stdE11is_object_vISP_EEvE4typeELPv0EEEPSP_:
  660|    652|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    652|        {
  662|    652|        }
_ZN3scn2v44impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEENSJ_12basic_stringIT0_NSJ_11char_traitsISS_EENSJ_9allocatorISS_EEEENSR_IcNST_IcEENSV_IcEEEEEEEEESM_iRKNS1_35localized_number_formatting_optionsISS_EE:
 3440|     52|{
 3441|     52|    std::basic_string<CharT> output;
 3442|     52|    std::string thsep_indices;
 3443|     52|    auto it = range.begin();
 3444|     52|    bool digit_matched = false;
 3445|     60|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3445:12): [True: 56, False: 4]
  ------------------
 3446|     56|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3446:13): [True: 0, False: 56]
  ------------------
 3447|      0|            thsep_indices.push_back(
 3448|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3449|      0|        }
 3450|     56|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3450:18): [True: 48, False: 8]
  ------------------
 3451|     48|            break;
 3452|     48|        }
 3453|      8|        else {
 3454|      8|            output.push_back(*it);
 3455|      8|            digit_matched = true;
 3456|      8|        }
 3457|     56|    }
 3458|     52|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  986|     52|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 44, False: 8]
  |  |  ------------------
  ------------------
 3459|     44|        return detail::unexpected_scan_error(
 3460|     44|            scan_error::invalid_scanned_value,
 3461|     44|            "Failed to parse integer: No digits found");
 3462|     44|    }
 3463|      8|    return std::tuple{it, output, thsep_indices};
 3464|     52|}
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E5countEv:
 2516|   116k|    {
 2517|   116k|        return m_count;
 2518|   116k|    }
_ZN3scn2v44impl21reader_impl_for_wcharIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERwNSL_10locale_refE:
 5737|    438|    {
 5738|    438|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5738:13): [True: 386, False: 52]
  ------------------
 5739|    438|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5739:13): [True: 0, False: 52]
  ------------------
 5740|    386|            return read_default(range, value, loc);
 5741|    386|        }
 5742|       |
 5743|     52|        reader_impl_for_int<CharT> reader{};
 5744|     52|        using integer_type =
 5745|     52|            std::conditional_t<sizeof(wchar_t) == 2, int16_t, int32_t>;
 5746|     52|        integer_type tmp_value{};
 5747|     52|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5748|     52|        value = static_cast<integer_type>(value);
 5749|     52|        return ret;
 5750|    438|    }
_ZN3scn2v44impl21reader_impl_for_wcharIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RwNS0_6detail10locale_refE:
 5721|  7.57k|    {
 5722|  7.57k|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|  7.57k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5723|       |        if constexpr (std::is_same_v<CharT, char>) {
 5724|       |            return code_point_reader<wchar_t>{}.read(range, value);
 5725|       |        }
 5726|  7.57k|        else {
 5727|  7.57k|            return code_unit_reader<wchar_t>{}.read(range, value);
 5728|  7.57k|        }
 5729|  7.57k|    }
_ZN3scn2v44impl16code_unit_readerIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_Rw:
 5601|  7.57k|    {
 5602|  7.57k|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3939|  7.57k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  7.57k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  7.57k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  7.57k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 7.57k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  7.57k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  7.57k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5603|  7.57k|        ch = *range.begin();
 5604|  7.57k|        return it;
 5605|  7.57k|    }
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1944|  53.5k|{
 1945|  53.5k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  53.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 53.5k]
  |  |  ------------------
  ------------------
 1946|      0|        return unexpected(e);
 1947|      0|    }
 1948|       |
 1949|  53.5k|    return ranges::next(range.begin());
 1950|  53.5k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   245M|    {
  296|   245M|        ++x;
  297|   245M|        return x;
  298|   245M|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3589|    518|    {
 3590|    518|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3939|    518|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    518|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    518|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    518|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 518]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|    518|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    518|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|    518|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|    518|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 0, False: 518]
  ------------------
 3594|       |            if constexpr (!std::is_signed_v<T>) {
 3595|       |                return detail::unexpected_scan_error(
 3596|       |                    scan_error::invalid_scanned_value,
 3597|       |                    "Unexpected '-' sign when parsing an "
 3598|       |                    "unsigned value");
 3599|       |            }
 3600|      0|            else {
 3601|      0|                if (specs.type ==
  ------------------
  |  Branch (3601:21): [True: 0, False: 0]
  ------------------
 3602|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3603|      0|                    return detail::unexpected_scan_error(
 3604|      0|                        scan_error::invalid_scanned_value,
 3605|      0|                        "'u'-option disallows negative values");
 3606|      0|                }
 3607|      0|            }
 3608|      0|        }
 3609|       |
 3610|    518|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 18, False: 500]
  ------------------
 3611|     18|            value = T{0};
 3612|     18|            return std::next(prefix_result.iterator);
 3613|     18|        }
 3614|       |
 3615|    500|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  985|    500|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 474, False: 26]
  |  |  ------------------
  ------------------
 3616|    474|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3939|    474|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    474|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    474|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    474|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 474]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|    474|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    474|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|    474|                    parse_integer_digits_without_thsep(
 3618|    474|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|    474|                        prefix_result.parsed_base));
 3620|       |
 3621|    474|            auto buf = make_contiguous_buffer(
 3622|    474|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|    474|            SCN_TRY(result_it,
  ------------------
  |  | 3939|    474|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    474|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    474|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    474|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 444, False: 30]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    444|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    444|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    444|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    444|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    444|    }                                                  \
  |  |  |  | 3938|    474|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|     30|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|     30|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|     30|                                        prefix_result.parsed_base));
 3626|       |
 3627|     30|            return ranges::next(
 3628|     30|                prefix_result.iterator,
 3629|     30|                ranges::distance(buf.view().begin(), result_it));
 3630|    474|        }
 3631|       |
 3632|     26|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|     26|            localized_number_formatting_options<CharT>{loc};
 3637|     26|#endif
 3638|       |
 3639|     26|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3939|     26|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|     26|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|     26|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 22, False: 4]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     22|    }                                                  \
  |  |  |  | 3938|     26|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      4|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|      4|                parse_integer_digits_with_thsep(
 3641|      4|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|      4|                    prefix_result.parsed_base, locale_options));
 3643|      4|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|      4|            parse_digits_result;
 3645|       |
 3646|      4|        auto nothsep_source_view =
 3647|      4|            std::basic_string_view<CharT>{nothsep_source};
 3648|      4|        SCN_TRY(
  ------------------
  |  | 3939|      4|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      4|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      4|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 4]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      4|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      4|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|      4|            nothsep_source_it,
 3650|      4|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|      4|                                prefix_result.parsed_base));
 3652|       |
 3653|      4|        return ranges::next(
 3654|      4|            prefix_result.iterator,
 3655|      4|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|      4|                ranges::ssize(thsep_indices));
 3657|      4|    }
_ZN3scn2v44impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3376|  22.9k|{
 3377|  22.9k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3939|  22.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  22.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  22.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  22.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 22.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  22.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  22.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3378|  22.9k|    auto [base_prefix_begin_it, sign] = sign_result;
 3379|       |
 3380|  22.9k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3381|  22.9k|        parse_integer_base_prefix(
 3382|  22.9k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3383|       |
 3384|  22.9k|    if (parsed_zero) {
  ------------------
  |  Branch (3384:9): [True: 28, False: 22.9k]
  ------------------
 3385|     28|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3385:13): [True: 0, False: 28]
  ------------------
 3386|     28|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3386:13): [True: 28, False: 0]
  ------------------
 3387|     28|            digits_begin_it = base_prefix_begin_it;
 3388|     28|        }
 3389|      0|        else {
 3390|      0|            parsed_zero = false;
 3391|      0|        }
 3392|     28|    }
 3393|  22.9k|    else {
 3394|  22.9k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3394:13): [True: 0, False: 22.9k]
  ------------------
 3395|  22.9k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3395:13): [True: 22.8k, False: 88]
  ------------------
 3396|  22.8k|            digits_begin_it = base_prefix_begin_it;
 3397|  22.8k|        }
 3398|  22.9k|    }
 3399|       |
 3400|  22.9k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3400:9): [True: 22.9k, False: 0]
  ------------------
 3401|  22.9k|        sign = sign_type::plus_sign;
 3402|  22.9k|    }
 3403|  22.9k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3404|  22.9k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3405|  22.9k|}
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3257|  30.6k|{
 3258|  30.6k|    auto r = read_one_of_code_unit(range, "+-");
 3259|  30.6k|    if (!r) {
  ------------------
  |  Branch (3259:9): [True: 30.6k, False: 0]
  ------------------
 3260|  30.6k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3260:13): [True: 30.6k, False: 0]
  ------------------
 3261|  30.6k|            return std::pair{range.begin(), sign_type::default_sign};
 3262|  30.6k|        }
 3263|      0|        return unexpected(eof_error::eof);
 3264|  30.6k|    }
 3265|       |
 3266|      0|    auto& it = *r;
 3267|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3267:9): [True: 0, False: 0]
  ------------------
 3268|      0|        return std::pair{it, sign_type::minus_sign};
 3269|      0|    }
 3270|      0|    return std::pair{it, sign_type::plus_sign};
 3271|      0|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2371|  30.6k|{
 2372|  30.6k|    auto it = read_code_unit(range);
 2373|  30.6k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  986|  30.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 30.6k]
  |  |  ------------------
  ------------------
 2374|      0|        return unexpected(make_eof_parse_error(it.error()));
 2375|      0|    }
 2376|       |
 2377|  61.2k|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 61.2k, False: 30.6k]
  ------------------
 2378|  61.2k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 0, False: 61.2k]
  ------------------
 2379|      0|            return *it;
 2380|      0|        }
 2381|  61.2k|    }
 2382|       |
 2383|  30.6k|    return unexpected(parse_error::error);
 2384|  30.6k|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3343|  22.9k|{
 3344|  22.9k|    switch (base) {
 3345|     60|        case 2:
  ------------------
  |  Branch (3345:9): [True: 60, False: 22.8k]
  ------------------
 3346|       |            // allow 0b/0B
 3347|     60|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3348|     60|                    false};
 3349|       |
 3350|     28|        case 8: {
  ------------------
  |  Branch (3350:9): [True: 28, False: 22.9k]
  ------------------
 3351|       |            // allow 0o/0O/0
 3352|     28|            bool zero_parsed = false;
 3353|     28|            auto it = apply_opt(
 3354|     28|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3355|     28|            return {it, 8, zero_parsed};
 3356|      0|        }
 3357|       |
 3358|  7.60k|        case 16:
  ------------------
  |  Branch (3358:9): [True: 7.60k, False: 15.3k]
  ------------------
 3359|       |            // allow 0x/0X
 3360|  7.60k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3361|  7.60k|                    false};
 3362|       |
 3363|     32|        case 0:
  ------------------
  |  Branch (3363:9): [True: 32, False: 22.9k]
  ------------------
 3364|       |            // detect base
 3365|     32|            return parse_integer_base_prefix_for_detection(range);
 3366|       |
 3367|  15.2k|        default:
  ------------------
  |  Branch (3367:9): [True: 15.2k, False: 7.72k]
  ------------------
 3368|       |            // no base prefix allowed
 3369|  15.2k|            return {range.begin(), base, false};
 3370|  22.9k|    }
 3371|  22.9k|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2390|  7.68k|{
 2391|  7.68k|    if (!result) {
  ------------------
  |  Branch (2391:9): [True: 7.67k, False: 18]
  ------------------
 2392|  7.67k|        return range.begin();
 2393|  7.67k|    }
 2394|     18|    return *result;
 2395|  7.68k|}
_ZN3scn2v44impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3294|     92|{
 3295|     92|    return read_matching_string_classic_nocase(range, "0b");
 3296|     92|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2330|  30.8k|{
 2331|  30.8k|    using char_type = detail::char_t<Range>;
 2332|       |
 2333|       |    if constexpr (ranges::contiguous_range<Range> &&
 2334|       |                  std::is_same_v<char_type, char>) {
 2335|       |        if (range.size() < str.size()) {
 2336|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2337|       |        }
 2338|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2339|       |            return unexpected(parse_error::error);
 2340|       |        }
 2341|       |        return ranges::next(range.begin(), str.size());
 2342|       |    }
 2343|  30.8k|    else {
 2344|  30.8k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|  30.8k|            if (ch < 'A' || ch > 'Z') {
 2346|  30.8k|                return ch;
 2347|  30.8k|            }
 2348|  30.8k|            return static_cast<char_type>(ch +
 2349|  30.8k|                                          static_cast<char_type>('a' - 'A'));
 2350|  30.8k|        };
 2351|       |
 2352|  30.8k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3939|  30.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  30.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  30.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  30.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 8, False: 30.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      8|    }                                                  \
  |  |  |  | 3938|  30.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  30.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2353|  30.8k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2354|  30.8k|                        .transform_error(make_eof_parse_error));
 2355|       |
 2356|  30.8k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  986|  30.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 30.8k, False: 0]
  |  |  ------------------
  ------------------
 2357|  30.8k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2358|  30.8k|                    return ascii_tolower(a) ==
 2359|  30.8k|                           static_cast<detail::char_t<Range>>(b);
 2360|  30.8k|                }))) {
 2361|  30.8k|            return unexpected(parse_error::error);
 2362|  30.8k|        }
 2363|       |
 2364|      0|        return it;
 2365|  30.8k|    }
 2366|  30.8k|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2344|  30.9k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|  30.9k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2345:17): [True: 530, False: 30.4k]
  |  Branch (2345:29): [True: 30.4k, False: 0]
  ------------------
 2346|  30.9k|                return ch;
 2347|  30.9k|            }
 2348|      0|            return static_cast<char_type>(ch +
 2349|      0|                                          static_cast<char_type>('a' - 'A'));
 2350|  30.9k|        };
_ZN3scn2v44impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3308|     60|{
 3309|     60|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3309:14): [True: 0, False: 60]
  ------------------
 3310|      0|        return *r;
 3311|      0|    }
 3312|       |
 3313|     60|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3313:14): [True: 28, False: 32]
  ------------------
 3314|     28|        zero_parsed = true;
 3315|     28|        return *r;
 3316|     28|    }
 3317|       |
 3318|     32|    return unexpected(parse_error::error);
 3319|     60|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2245|  15.3k|{
 2246|  15.3k|    auto it = read_code_unit(range);
 2247|  15.3k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  986|  15.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 15.3k]
  |  |  ------------------
  ------------------
 2248|      0|        return unexpected(make_eof_parse_error(it.error()));
 2249|      0|    }
 2250|       |
 2251|  15.3k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  986|  15.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 15.2k, False: 68]
  |  |  ------------------
  ------------------
 2252|  15.3k|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|  15.2k|        return unexpected(parse_error::error);
 2254|  15.2k|    }
 2255|       |
 2256|     68|    return *it;
 2257|  15.3k|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3301|  7.63k|{
 3302|  7.63k|    return read_matching_string_classic_nocase(range, "0x");
 3303|  7.63k|}
_ZN3scn2v44impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3324|     32|{
 3325|     32|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3325:14): [True: 0, False: 32]
  ------------------
 3326|      0|        return {*r, 16, false};
 3327|      0|    }
 3328|     32|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3328:14): [True: 0, False: 32]
  ------------------
 3329|      0|        return {*r, 2, false};
 3330|      0|    }
 3331|     32|    {
 3332|     32|        bool zero_parsed{false};
 3333|     32|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3333:18): [True: 10, False: 22]
  ------------------
 3334|     10|            return {*r, 8, zero_parsed};
 3335|     10|        }
 3336|     32|    }
 3337|     22|    return {range.begin(), 10, false};
 3338|     32|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3410|  22.8k|{
 3411|  22.8k|    using char_type = detail::char_t<Range>;
 3412|       |
 3413|  22.8k|    if constexpr (ranges::contiguous_range<Range>) {
 3414|  22.8k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  22.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 22.8k]
  |  |  ------------------
  ------------------
 3415|      0|            return detail::unexpected_scan_error(
 3416|      0|                scan_error::invalid_scanned_value,
 3417|      0|                "Failed to parse integer: No digits found");
 3418|      0|        }
 3419|  22.8k|        return range.end();
 3420|       |    }
 3421|       |    else {
 3422|       |        return read_while1_code_unit(range,
 3423|       |                                     [&](char_type ch) noexcept {
 3424|       |                                         return char_to_int(ch) < base;
 3425|       |                                     })
 3426|       |            .transform_error(map_parse_error_to_scan_error(
 3427|       |                scan_error::invalid_scanned_value,
 3428|       |                "Failed to parse integer: No digits found"));
 3429|       |    }
 3430|  22.8k|}
_ZN3scn2v44impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3440|     52|{
 3441|     52|    std::basic_string<CharT> output;
 3442|     52|    std::string thsep_indices;
 3443|     52|    auto it = range.begin();
 3444|     52|    bool digit_matched = false;
 3445|     60|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3445:12): [True: 60, False: 0]
  ------------------
 3446|     60|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3446:13): [True: 0, False: 60]
  ------------------
 3447|      0|            thsep_indices.push_back(
 3448|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3449|      0|        }
 3450|     60|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3450:18): [True: 52, False: 8]
  ------------------
 3451|     52|            break;
 3452|     52|        }
 3453|      8|        else {
 3454|      8|            output.push_back(*it);
 3455|      8|            digit_matched = true;
 3456|      8|        }
 3457|     60|    }
 3458|     52|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  986|     52|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 44, False: 8]
  |  |  ------------------
  ------------------
 3459|     44|        return detail::unexpected_scan_error(
 3460|     44|            scan_error::invalid_scanned_value,
 3461|     44|            "Failed to parse integer: No digits found");
 3462|     44|    }
 3463|      8|    return std::tuple{it, output, thsep_indices};
 3464|     52|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1781|  50.4k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|  50.4k|                  ranges::sized_range<Range>) {
 1785|  50.4k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  | 1057|  50.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|  50.4k|}
_ZN3scn2v44impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1587|  50.4k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|  50.4k|    {
 1589|  50.4k|    }
_ZNK3scn2v44impl19string_view_wrapperIwE4viewEv:
 1601|  65.7k|    {
 1602|  65.7k|        return sv;
 1603|  65.7k|    }
_ZN3scn2v44impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEb:
 5989|  1.27k|{
 5990|  1.27k|    using char_type = detail::char_t<Range>;
 5991|  1.27k|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5992|       |
 5993|  1.27k|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5993:9): [True: 1.27k, False: 0]
  ------------------
 5994|  1.27k|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5995|  1.27k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5996|       |
 5997|  1.27k|        if (max_width == 0) {
  ------------------
  |  Branch (5997:13): [True: 1.07k, False: 198]
  ------------------
 5998|  1.07k|            auto it = read_while_code_unit(range, pred);
 5999|       |
 6000|  1.07k|            if (want_skipped_width) {
  ------------------
  |  Branch (6000:17): [True: 138, False: 936]
  ------------------
 6001|    138|                auto prefix_width =
 6002|    138|                    static_cast<std::ptrdiff_t>(
 6003|    138|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 6004|    138|                    ranges::distance(range.begin(), it);
 6005|    138|                return result_type{it, prefix_width};
 6006|    138|            }
 6007|    936|            return result_type{it, 0};
 6008|  1.07k|        }
 6009|       |
 6010|    198|        auto max_width_view = take_width(range, max_width);
 6011|    198|        auto w_it = read_while_code_unit(max_width_view, pred);
 6012|       |
 6013|    198|        if (want_skipped_width) {
  ------------------
  |  Branch (6013:13): [True: 198, False: 0]
  ------------------
 6014|    198|            return result_type{w_it.base(), max_width - w_it.count()};
 6015|    198|        }
 6016|      0|        return result_type{w_it.base(), 0};
 6017|    198|    }
 6018|       |
 6019|      0|    const auto fill_chars = fill.template get_code_units<char_type>();
 6020|      0|    if (max_width == 0) {
  ------------------
  |  Branch (6020:9): [True: 0, False: 0]
  ------------------
 6021|      0|        auto it = read_while_code_units(range, fill_chars);
 6022|       |
 6023|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (6023:13): [True: 0, False: 0]
  ------------------
 6024|      0|            auto prefix_width =
 6025|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 6026|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 6027|      0|            return result_type{it, prefix_width};
 6028|      0|        }
 6029|      0|        return result_type{it, 0};
 6030|      0|    }
 6031|       |
 6032|      0|    auto max_width_view = take_width(range, max_width);
 6033|      0|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 6034|       |
 6035|      0|    if (want_skipped_width) {
  ------------------
  |  Branch (6035:9): [True: 0, False: 0]
  ------------------
 6036|      0|        return result_type{w_it.base(), max_width - w_it.count()};
 6037|      0|    }
 6038|      0|    return result_type{w_it.base(), 0};
 6039|      0|}
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2074|  1.20k|{
 2075|  1.20k|    return read_until_code_unit(range, std::not_fn(pred));
 2076|  1.20k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2055|  1.39k|{
 2056|  1.39k|    if constexpr (ranges::common_range<Range>) {
 2057|  1.39k|        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|       |    else {
 2060|       |        auto first = range.begin();
 2061|       |        for (; first != range.end(); ++first) {
 2062|       |            if (pred(*first)) {
 2063|       |                return first;
 2064|       |            }
 2065|       |        }
 2066|       |        return first;
 2067|       |    }
 2068|  1.39k|}
_ZN3scn2v44impl12function_refIFbwES3_EC2IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_SR_TnPNSF_9enable_ifIXaaaasr6detailE11is_not_selfISH_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSH_:
  742|  1.27k|        : m_fptr([](storage fn,
  743|  1.27k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.27k|              cvref<T> obj = *get<T>(fn);
  745|  1.27k|              if constexpr (std::is_void_v<R>) {
  746|  1.27k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.27k|              }
  748|  1.27k|              else {
  749|  1.27k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.27k|              }
  751|  1.27k|          }),
  752|  1.27k|          m_storage(std::addressof(f))
  753|  1.27k|    {
  754|  1.27k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_SR_TnPNSF_9enable_ifIXaaaasr6detailE11is_not_selfISH_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSH_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|  2.03k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.03k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.03k|              else {
  749|  2.03k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.03k|              }
  751|  2.03k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRT_EEEElEEEESG_lRKNS0_6detail9fill_typeEbEUlwE_EEDaNS3_7storageE:
  683|  2.03k|    {
  684|  2.03k|        if constexpr (std::is_const_v<T>) {
  685|  2.03k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.03k|    }
_ZZN3scn2v44impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEbENKUlwE_clEw:
 5995|  2.03k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_TnPNSF_9enable_ifIXsr3stdE11is_object_vISH_EEvE4typeELPv0EEEPKSH_:
  665|  1.27k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  1.27k|        {
  667|  1.27k|        }
_ZN3scn2v44impl20read_while_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2074|    294|{
 2075|    294|    return read_until_code_unit(range, std::not_fn(pred));
 2076|    294|}
_ZN3scn2v44impl20read_until_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2055|    468|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|    468|    else {
 2060|    468|        auto first = range.begin();
 2061|  3.75k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 3.57k, False: 174]
  ------------------
 2062|  3.57k|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 294, False: 3.28k]
  ------------------
 2063|    294|                return first;
 2064|    294|            }
 2065|  3.57k|        }
 2066|    174|        return first;
 2067|    468|    }
 2068|    468|}
_ZN3scn2v44impl23skip_classic_whitespaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_b:
 3065|    494|{
 3066|    494|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 0, False: 494]
  ------------------
 3067|      0|        auto it = read_while_classic_space(range);
 3068|      0|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|      0|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3070|      0|            return unexpected(e);
 3071|      0|        }
 3072|       |
 3073|      0|        return it;
 3074|      0|    }
 3075|       |
 3076|    494|    return read_while_classic_space(range);
 3077|    494|}
_ZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2215|    494|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|    494|    else {
 2225|    494|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|    494|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|    494|            return detail::is_cp_space(cp);
 2238|    494|        });
 2239|    494|    }
 2240|    494|}
_ZN3scn2v44impl21read_while_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2180|    650|{
 2181|    650|    return read_until_code_point(range, std::not_fn(pred));
 2182|    650|}
_ZN3scn2v44impl21read_until_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2159|    848|{
 2160|    848|    auto it = range.begin();
 2161|  5.62k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 5.44k, False: 180]
  ------------------
 2162|  5.44k|        const auto val =
 2163|  5.44k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  5.44k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  985|  5.44k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 5.44k, False: 0]
  |  |  ------------------
  ------------------
 2165|  5.44k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  5.44k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  5.44k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 668, False: 4.77k]
  ------------------
 2168|    668|                return it;
 2169|    668|            }
 2170|  5.44k|        }
 2171|  4.77k|        it = val.iterator;
 2172|  4.77k|    }
 2173|       |
 2174|    180|    return it;
 2175|    848|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISL_EEE4typeEEESL_:
 1997|  15.9k|{
 1998|  15.9k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1051|  15.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  15.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  15.9k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  15.9k|    auto it = range.begin();
 2002|  15.9k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  15.9k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  986|  15.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 15.9k]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|  15.9k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 15.9k, False: 0]
  ------------------
 2011|  15.9k|        ++it;
 2012|  15.9k|        return {it, string_type(1, *range.begin())};
 2013|  15.9k|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|  15.9k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_:
  742|    494|        : m_fptr([](storage fn,
  743|    494|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    494|              cvref<T> obj = *get<T>(fn);
  745|    494|              if constexpr (std::is_void_v<R>) {
  746|    494|                  obj(static_cast<decltype(args)>(args)...);
  747|    494|              }
  748|    494|              else {
  749|    494|                  return obj(static_cast<decltype(args)>(args)...);
  750|    494|              }
  751|    494|          }),
  752|    494|          m_storage(std::addressof(f))
  753|    494|    {
  754|    494|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESY_Di:
  743|    852|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    852|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    852|              else {
  749|    852|                  return obj(static_cast<decltype(args)>(args)...);
  750|    852|              }
  751|    852|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|    852|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    852|        else if constexpr (std::is_object_v<T>) {
  688|    852|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    852|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2236|    852|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|    852|            return detail::is_cp_space(cp);
 2238|    852|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|    494|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    494|        {
  662|    494|        }
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3065|  60.6k|{
 3066|  60.6k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 60.2k, False: 388]
  ------------------
 3067|  60.2k|        auto it = read_while_classic_space(range);
 3068|  60.2k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|  60.2k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  60.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 60.2k]
  |  |  ------------------
  ------------------
 3070|      0|            return unexpected(e);
 3071|      0|        }
 3072|       |
 3073|  60.2k|        return it;
 3074|  60.2k|    }
 3075|       |
 3076|    388|    return read_while_classic_space(range);
 3077|  60.6k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2215|   189k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|   189k|    else {
 2225|   189k|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|   189k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   189k|            return detail::is_cp_space(cp);
 2238|   189k|        });
 2239|   189k|    }
 2240|   189k|}
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2180|   189k|{
 2181|   189k|    return read_until_code_point(range, std::not_fn(pred));
 2182|   189k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2159|   212k|{
 2160|   212k|    auto it = range.begin();
 2161|   560k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 556k, False: 3.38k]
  ------------------
 2162|   556k|        const auto val =
 2163|   556k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|   556k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  985|   556k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 556k, False: 0]
  |  |  ------------------
  ------------------
 2165|   556k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|   556k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|   556k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 209k, False: 347k]
  ------------------
 2168|   209k|                return it;
 2169|   209k|            }
 2170|   556k|        }
 2171|   347k|        it = val.iterator;
 2172|   347k|    }
 2173|       |
 2174|  3.38k|    return it;
 2175|   212k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|   189k|        : m_fptr([](storage fn,
  743|   189k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   189k|              cvref<T> obj = *get<T>(fn);
  745|   189k|              if constexpr (std::is_void_v<R>) {
  746|   189k|                  obj(static_cast<decltype(args)>(args)...);
  747|   189k|              }
  748|   189k|              else {
  749|   189k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   189k|              }
  751|   189k|          }),
  752|   189k|          m_storage(std::addressof(f))
  753|   189k|    {
  754|   189k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|   316k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   316k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   316k|              else {
  749|   316k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   316k|              }
  751|   316k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   316k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   316k|        else if constexpr (std::is_object_v<T>) {
  688|   316k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   316k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2236|   316k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   316k|            return detail::is_cp_space(cp);
 2238|   316k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|   189k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   189k|        {
  662|   189k|        }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3155|  2.86k|    {
 3156|  2.86k|        reader_error_handler eh{};
 3157|  2.86k|        get_derived().check_specs_impl(specs, eh);
 3158|  2.86k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  986|  2.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.40k, False: 1.46k]
  |  |  ------------------
  ------------------
 3159|  1.40k|            return detail::unexpected_scan_error(
 3160|  1.40k|                scan_error::invalid_format_string, eh.m_msg);
 3161|  1.40k|        }
 3162|  1.46k|        return {};
 3163|  2.86k|    }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIwEEwE11get_derivedEv:
 3167|  2.86k|    {
 3168|  2.86k|        return static_cast<Derived&>(*this);
 3169|  2.86k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3535|  2.86k|    {
 3536|  2.86k|        detail::check_int_type_specs(specs, eh);
 3537|  2.86k|    }
_ZNK3scn2v44impl11reader_baseINS1_19reader_impl_for_intIwEEwE19skip_ws_before_readEv:
 3150|  15.9k|    {
 3151|  15.9k|        return true;
 3152|  15.9k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEjEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3589|    244|    {
 3590|    244|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3939|    244|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    244|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    244|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    244|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 244]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|    244|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    244|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|    244|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|    244|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 0, False: 244]
  ------------------
 3594|      0|            if constexpr (!std::is_signed_v<T>) {
 3595|      0|                return detail::unexpected_scan_error(
 3596|      0|                    scan_error::invalid_scanned_value,
 3597|      0|                    "Unexpected '-' sign when parsing an "
 3598|      0|                    "unsigned value");
 3599|       |            }
 3600|       |            else {
 3601|       |                if (specs.type ==
 3602|       |                    detail::presentation_type::int_unsigned_decimal) {
 3603|       |                    return detail::unexpected_scan_error(
 3604|       |                        scan_error::invalid_scanned_value,
 3605|       |                        "'u'-option disallows negative values");
 3606|       |                }
 3607|       |            }
 3608|      0|        }
 3609|       |
 3610|    244|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 6, False: 238]
  ------------------
 3611|      6|            value = T{0};
 3612|      6|            return std::next(prefix_result.iterator);
 3613|      6|        }
 3614|       |
 3615|    238|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  985|    238|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 212, False: 26]
  |  |  ------------------
  ------------------
 3616|    212|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3939|    212|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    212|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    212|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    212|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 200, False: 12]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    200|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    200|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    200|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    200|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    200|    }                                                  \
  |  |  |  | 3938|    212|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|     12|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|     12|                    parse_integer_digits_without_thsep(
 3618|     12|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|     12|                        prefix_result.parsed_base));
 3620|       |
 3621|     12|            auto buf = make_contiguous_buffer(
 3622|     12|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|     12|            SCN_TRY(result_it,
  ------------------
  |  | 3939|     12|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|     12|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|     12|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 12]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|     12|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|     12|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|     12|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|     12|                                        prefix_result.parsed_base));
 3626|       |
 3627|     12|            return ranges::next(
 3628|     12|                prefix_result.iterator,
 3629|     12|                ranges::distance(buf.view().begin(), result_it));
 3630|     12|        }
 3631|       |
 3632|     26|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|     26|            localized_number_formatting_options<CharT>{loc};
 3637|     26|#endif
 3638|       |
 3639|     26|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3939|     26|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|     26|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|     26|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 22, False: 4]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     22|    }                                                  \
  |  |  |  | 3938|     26|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      4|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|      4|                parse_integer_digits_with_thsep(
 3641|      4|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|      4|                    prefix_result.parsed_base, locale_options));
 3643|      4|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|      4|            parse_digits_result;
 3645|       |
 3646|      4|        auto nothsep_source_view =
 3647|      4|            std::basic_string_view<CharT>{nothsep_source};
 3648|      4|        SCN_TRY(
  ------------------
  |  | 3939|      4|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      4|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      4|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 4]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      4|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      4|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|      4|            nothsep_source_it,
 3650|      4|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|      4|                                prefix_result.parsed_base));
 3652|       |
 3653|      4|        return ranges::next(
 3654|      4|            prefix_result.iterator,
 3655|      4|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|      4|                ranges::ssize(thsep_indices));
 3657|      4|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3589|    466|    {
 3590|    466|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3939|    466|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    466|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    466|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    466|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 466]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|    466|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    466|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|    466|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|    466|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 0, False: 466]
  ------------------
 3594|      0|            if constexpr (!std::is_signed_v<T>) {
 3595|      0|                return detail::unexpected_scan_error(
 3596|      0|                    scan_error::invalid_scanned_value,
 3597|      0|                    "Unexpected '-' sign when parsing an "
 3598|      0|                    "unsigned value");
 3599|       |            }
 3600|       |            else {
 3601|       |                if (specs.type ==
 3602|       |                    detail::presentation_type::int_unsigned_decimal) {
 3603|       |                    return detail::unexpected_scan_error(
 3604|       |                        scan_error::invalid_scanned_value,
 3605|       |                        "'u'-option disallows negative values");
 3606|       |                }
 3607|       |            }
 3608|      0|        }
 3609|       |
 3610|    466|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 10, False: 456]
  ------------------
 3611|     10|            value = T{0};
 3612|     10|            return std::next(prefix_result.iterator);
 3613|     10|        }
 3614|       |
 3615|    456|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  985|    456|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 430, False: 26]
  |  |  ------------------
  ------------------
 3616|    430|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3939|    430|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    430|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    430|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    430|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 430]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|    430|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    430|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|    430|                    parse_integer_digits_without_thsep(
 3618|    430|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|    430|                        prefix_result.parsed_base));
 3620|       |
 3621|    430|            auto buf = make_contiguous_buffer(
 3622|    430|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|    430|            SCN_TRY(result_it,
  ------------------
  |  | 3939|    430|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    430|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    430|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    430|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 404, False: 26]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    404|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    404|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    404|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    404|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    404|    }                                                  \
  |  |  |  | 3938|    430|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|     26|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|     26|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|     26|                                        prefix_result.parsed_base));
 3626|       |
 3627|     26|            return ranges::next(
 3628|     26|                prefix_result.iterator,
 3629|     26|                ranges::distance(buf.view().begin(), result_it));
 3630|    430|        }
 3631|       |
 3632|     26|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|     26|            localized_number_formatting_options<CharT>{loc};
 3637|     26|#endif
 3638|       |
 3639|     26|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3939|     26|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|     26|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|     26|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 22, False: 4]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     22|    }                                                  \
  |  |  |  | 3938|     26|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      4|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|      4|                parse_integer_digits_with_thsep(
 3641|      4|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|      4|                    prefix_result.parsed_base, locale_options));
 3643|      4|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|      4|            parse_digits_result;
 3645|       |
 3646|      4|        auto nothsep_source_view =
 3647|      4|            std::basic_string_view<CharT>{nothsep_source};
 3648|      4|        SCN_TRY(
  ------------------
  |  | 3939|      4|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      4|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      4|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 4]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      4|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      4|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|      4|            nothsep_source_it,
 3650|      4|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|      4|                                prefix_result.parsed_base));
 3652|       |
 3653|      4|        return ranges::next(
 3654|      4|            prefix_result.iterator,
 3655|      4|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|      4|                ranges::ssize(thsep_indices));
 3657|      4|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEmEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3589|    190|    {
 3590|    190|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3939|    190|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    190|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    190|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    190|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 190]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|    190|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    190|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|    190|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|    190|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 0, False: 190]
  ------------------
 3594|      0|            if constexpr (!std::is_signed_v<T>) {
 3595|      0|                return detail::unexpected_scan_error(
 3596|      0|                    scan_error::invalid_scanned_value,
 3597|      0|                    "Unexpected '-' sign when parsing an "
 3598|      0|                    "unsigned value");
 3599|       |            }
 3600|       |            else {
 3601|       |                if (specs.type ==
 3602|       |                    detail::presentation_type::int_unsigned_decimal) {
 3603|       |                    return detail::unexpected_scan_error(
 3604|       |                        scan_error::invalid_scanned_value,
 3605|       |                        "'u'-option disallows negative values");
 3606|       |                }
 3607|       |            }
 3608|      0|        }
 3609|       |
 3610|    190|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 0, False: 190]
  ------------------
 3611|      0|            value = T{0};
 3612|      0|            return std::next(prefix_result.iterator);
 3613|      0|        }
 3614|       |
 3615|    190|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  985|    190|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 190, False: 0]
  |  |  ------------------
  ------------------
 3616|    190|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3939|    190|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    190|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    190|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    190|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 180, False: 10]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    180|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    180|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    180|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    180|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    180|    }                                                  \
  |  |  |  | 3938|    190|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|     10|                    parse_integer_digits_without_thsep(
 3618|     10|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|     10|                        prefix_result.parsed_base));
 3620|       |
 3621|     10|            auto buf = make_contiguous_buffer(
 3622|     10|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|     10|            SCN_TRY(result_it,
  ------------------
  |  | 3939|     10|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|     10|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|     10|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 10]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|     10|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|     10|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|     10|                                        prefix_result.parsed_base));
 3626|       |
 3627|     10|            return ranges::next(
 3628|     10|                prefix_result.iterator,
 3629|     10|                ranges::distance(buf.view().begin(), result_it));
 3630|     10|        }
 3631|       |
 3632|      0|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|      0|            localized_number_formatting_options<CharT>{loc};
 3637|      0|#endif
 3638|       |
 3639|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|      0|                parse_integer_digits_with_thsep(
 3641|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|      0|                    prefix_result.parsed_base, locale_options));
 3643|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|      0|            parse_digits_result;
 3645|       |
 3646|      0|        auto nothsep_source_view =
 3647|      0|            std::basic_string_view<CharT>{nothsep_source};
 3648|      0|        SCN_TRY(
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|      0|            nothsep_source_it,
 3650|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|      0|                                prefix_result.parsed_base));
 3652|       |
 3653|      0|        return ranges::next(
 3654|      0|            prefix_result.iterator,
 3655|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|      0|                ranges::ssize(thsep_indices));
 3657|      0|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEmEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3589|  7.57k|    {
 3590|  7.57k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3939|  7.57k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  7.57k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  7.57k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  7.57k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 7.57k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  7.57k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  7.57k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  7.57k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  7.57k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 0, False: 7.57k]
  ------------------
 3594|      0|            if constexpr (!std::is_signed_v<T>) {
 3595|      0|                return detail::unexpected_scan_error(
 3596|      0|                    scan_error::invalid_scanned_value,
 3597|      0|                    "Unexpected '-' sign when parsing an "
 3598|      0|                    "unsigned value");
 3599|       |            }
 3600|       |            else {
 3601|       |                if (specs.type ==
 3602|       |                    detail::presentation_type::int_unsigned_decimal) {
 3603|       |                    return detail::unexpected_scan_error(
 3604|       |                        scan_error::invalid_scanned_value,
 3605|       |                        "'u'-option disallows negative values");
 3606|       |                }
 3607|       |            }
 3608|      0|        }
 3609|       |
 3610|  7.57k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 0, False: 7.57k]
  ------------------
 3611|      0|            value = T{0};
 3612|      0|            return std::next(prefix_result.iterator);
 3613|      0|        }
 3614|       |
 3615|  7.57k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  985|  7.57k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 7.57k, False: 0]
  |  |  ------------------
  ------------------
 3616|  7.57k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3939|  7.57k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  7.57k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  7.57k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  7.57k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 7.57k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  7.57k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  7.57k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|  7.57k|                    parse_integer_digits_without_thsep(
 3618|  7.57k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|  7.57k|                        prefix_result.parsed_base));
 3620|       |
 3621|  7.57k|            auto buf = make_contiguous_buffer(
 3622|  7.57k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|  7.57k|            SCN_TRY(result_it,
  ------------------
  |  | 3939|  7.57k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  7.57k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  7.57k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  7.57k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 7.55k, False: 24]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  7.55k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  7.55k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  7.55k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  7.55k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  7.55k|    }                                                  \
  |  |  |  | 3938|  7.57k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|     24|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|     24|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|     24|                                        prefix_result.parsed_base));
 3626|       |
 3627|     24|            return ranges::next(
 3628|     24|                prefix_result.iterator,
 3629|     24|                ranges::distance(buf.view().begin(), result_it));
 3630|  7.57k|        }
 3631|       |
 3632|      0|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|      0|            localized_number_formatting_options<CharT>{loc};
 3637|      0|#endif
 3638|       |
 3639|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|      0|                parse_integer_digits_with_thsep(
 3641|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|      0|                    prefix_result.parsed_base, locale_options));
 3643|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|      0|            parse_digits_result;
 3645|       |
 3646|      0|        auto nothsep_source_view =
 3647|      0|            std::basic_string_view<CharT>{nothsep_source};
 3648|      0|        SCN_TRY(
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|      0|            nothsep_source_it,
 3650|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|      0|                                prefix_result.parsed_base));
 3652|       |
 3653|      0|        return ranges::next(
 3654|      0|            prefix_result.iterator,
 3655|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|      0|                ranges::ssize(thsep_indices));
 3657|      0|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3155|  1.43k|    {
 3156|  1.43k|        reader_error_handler eh{};
 3157|  1.43k|        get_derived().check_specs_impl(specs, eh);
 3158|  1.43k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  986|  1.43k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 684, False: 750]
  |  |  ------------------
  ------------------
 3159|    684|            return detail::unexpected_scan_error(
 3160|    684|                scan_error::invalid_format_string, eh.m_msg);
 3161|    684|        }
 3162|    750|        return {};
 3163|  1.43k|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3167|  1.43k|    {
 3168|  1.43k|        return static_cast<Derived&>(*this);
 3169|  1.43k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4177|  1.43k|    {
 4178|  1.43k|        detail::check_float_type_specs(specs, eh);
 4179|  1.43k|    }
_ZNK3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3150|  8.03k|    {
 3151|  8.03k|        return true;
 3152|  8.03k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4249|    730|    {
 4250|    730|        unsigned options{};
 4251|    730|        if (specs.localized) {
  ------------------
  |  Branch (4251:13): [True: 36, False: 694]
  ------------------
 4252|     36|            options |= float_reader_base::allow_thsep;
 4253|     36|        }
 4254|       |
 4255|    730|        SCN_GCC_COMPAT_PUSH
 4256|    730|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4257|       |
 4258|    730|        switch (specs.type) {
 4259|     20|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4259:13): [True: 20, False: 710]
  ------------------
 4260|     20|                return options | float_reader_base::allow_fixed;
 4261|       |
 4262|     10|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4262:13): [True: 10, False: 720]
  ------------------
 4263|     10|                return options | float_reader_base::allow_scientific;
 4264|       |
 4265|     92|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4265:13): [True: 92, False: 638]
  ------------------
 4266|     92|                return options | float_reader_base::allow_hex;
 4267|       |
 4268|      6|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4268:13): [True: 6, False: 724]
  ------------------
 4269|      6|                return options | float_reader_base::allow_scientific |
 4270|      6|                       float_reader_base::allow_fixed;
 4271|       |
 4272|    602|            case detail::presentation_type::none:
  ------------------
  |  Branch (4272:13): [True: 602, False: 128]
  ------------------
 4273|    602|                return options | float_reader_base::allow_scientific |
 4274|    602|                       float_reader_base::allow_fixed |
 4275|    602|                       float_reader_base::allow_hex;
 4276|       |
 4277|      0|            default:
  ------------------
  |  Branch (4277:13): [True: 0, False: 730]
  ------------------
 4278|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1051|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4279|    730|                SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4280|    730|        }
 4281|       |
 4282|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4283|    730|    }
_ZN3scn2v44impl12float_readerIwEC2Ej:
 3701|    730|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v44impl35localized_number_formatting_optionsIwEC2Ev:
 1869|  7.91k|    localized_number_formatting_options() = default;
_ZN3scn2v44impl24contiguous_range_factoryIwEC2Ev:
 1630|  15.8k|    contiguous_range_factory() = default;
_ZN3scn2v44impl12float_readerIwE17handle_separatorsEv:
 4089|  7.68k|    {
 4090|  7.68k|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4090:13): [True: 7.68k, False: 0]
  ------------------
 4091|  7.68k|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4091:13): [True: 7.68k, False: 0]
  ------------------
 4092|  7.68k|            return;
 4093|  7.68k|        }
 4094|       |
 4095|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4096|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4096:13): [True: 0, False: 0]
  ------------------
 4097|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4097:27): [True: 0, False: 0]
  ------------------
 4098|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4098:21): [True: 0, False: 0]
  ------------------
 4099|      0|                    ch = CharT{'.'};
 4100|      0|                }
 4101|      0|            }
 4102|      0|        }
 4103|       |
 4104|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4104:13): [True: 0, False: 0]
  ------------------
 4105|      0|            return;
 4106|      0|        }
 4107|       |
 4108|      0|        auto first =
 4109|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4110|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4110:13): [True: 0, False: 0]
  ------------------
 4111|      0|            return;
 4112|      0|        }
 4113|       |
 4114|      0|        m_thsep_indices.push_back(
 4115|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4116|       |
 4117|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4117:31): [True: 0, False: 0]
  ------------------
 4118|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4118:17): [True: 0, False: 0]
  ------------------
 4119|      0|                *first++ = std::move(*it);
 4120|      0|            }
 4121|      0|            else {
 4122|      0|                m_thsep_indices.push_back(
 4123|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4124|      0|            }
 4125|      0|        }
 4126|       |
 4127|      0|        str.erase(first, str.end());
 4128|      0|    }
_ZNK3scn2v44impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1685|    768|    {
 1686|    768|        return m_storage.has_value();
 1687|    768|    }
_ZNR3scn2v44impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1690|    412|    {
 1691|    412|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  | 1051|    412|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    412|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1692|    412|        return *m_storage;
 1693|    412|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EclESC_SJ_SL_:
  762|    232|    {
  763|    232|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1057|    232|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    232|    }
_ZN3scn2v44impl12float_readerIwE21read_source_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3720|     16|    {
 3721|     16|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3722|     16|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  985|     16|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 0, False: 16]
  |  |  ------------------
  ------------------
 3723|      0|            m_locale_options.thousands_sep = CharT{0};
 3724|      0|        }
 3725|       |
 3726|     16|        return read_source_impl(range);
 3727|     16|    }
_ZN3scn2v44impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_:
 3746|    232|    {
 3747|    232|        SCN_TRY(sign_result,
  ------------------
  |  | 3939|    232|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    232|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    232|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    232|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 232]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|    232|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    232|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3748|    232|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3749|    232|        auto it = sign_result.first;
 3750|    232|        m_sign = sign_result.second;
 3751|       |
 3752|    232|        auto digits_begin = it;
 3753|    232|        auto r = ranges::subrange{it, range.end()};
 3754|       |        if constexpr (ranges::contiguous_range<Range> &&
 3755|       |                      ranges::sized_range<Range>) {
 3756|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3757|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3758|       |                SCN_TRY_ASSIGN(
 3759|       |                    it,
 3760|       |                    do_read_source_impl(
 3761|       |                        r,
 3762|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3763|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3764|       |            }
 3765|       |            else {
 3766|       |                auto cb = [&](const auto& rr)
 3767|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3768|       |                    auto res = read_all(rr);
 3769|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3770|       |                        return detail::unexpected_scan_error(
 3771|       |                            scan_error::invalid_scanned_value,
 3772|       |                            "Invalid float value");
 3773|       |                    }
 3774|       |                    return res;
 3775|       |                };
 3776|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3777|       |            }
 3778|       |        }
 3779|    232|        else {
 3780|    232|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3934|    232|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|    232|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|    232|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 212, False: 20]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|    212|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|    212|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|    212|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|    212|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    212|    }                                                  \
  |  | 3938|    232|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|    232|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3781|     20|                it,
 3782|     20|                do_read_source_impl(
 3783|     20|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3784|     20|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3785|     20|        }
 3786|       |
 3787|    232|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1051|    232|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    232|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3788|       |
 3789|     20|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3789:13): [True: 20, False: 0]
  |  Branch (3789:48): [True: 20, False: 0]
  ------------------
 3790|     20|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3790:13): [True: 20, False: 0]
  ------------------
 3791|     20|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3791:13): [True: 20, False: 0]
  ------------------
 3792|     20|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3793|     20|        }
 3794|       |
 3795|     20|        handle_separators();
 3796|       |
 3797|     20|        return it;
 3798|    232|    }
_ZN3scn2v44impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEZNS3_16read_source_implISG_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_EUlRKSO_E_ZNSK_ISG_EEST_SO_EUlSV_E0_EEST_SO_OT0_OT1_:
 4032|    232|    {
 4033|    232|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4034|    232|        const bool allowed_nonhex =
 4035|    232|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4036|    232|             ~static_cast<unsigned>(allow_hex)) != 0;
 4037|       |
 4038|    232|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4038:39): [True: 232, False: 0]
  |  Branch (4038:45): [True: 0, False: 232]
  ------------------
 4039|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4040|      0|                scan_error::invalid_scanned_value,
 4041|      0|                "Invalid infinite floating-point value"));
 4042|      0|        }
 4043|    232|        else if (r) {
  ------------------
  |  Branch (4043:18): [True: 0, False: 232]
  ------------------
 4044|      0|            return *r;
 4045|      0|        }
 4046|       |
 4047|    232|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4047:39): [True: 232, False: 0]
  |  Branch (4047:45): [True: 0, False: 232]
  ------------------
 4048|      0|            return unexpected(r.error());
 4049|      0|        }
 4050|    232|        else if (r) {
  ------------------
  |  Branch (4050:18): [True: 0, False: 232]
  ------------------
 4051|      0|            return *r;
 4052|      0|        }
 4053|       |
 4054|    232|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4054:13): [True: 220, False: 12]
  |  Branch (4054:28): [True: 20, False: 200]
  ------------------
 4055|       |            // only hex allowed:
 4056|       |            // prefix "0x" allowed, not required
 4057|     20|            auto it = range.begin();
 4058|       |
 4059|     20|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4059:22): [True: 0, False: 20]
  ------------------
 4060|      0|                m_kind = float_kind::hex_with_prefix;
 4061|      0|                it = *r;
 4062|      0|            }
 4063|     20|            else {
 4064|     20|                m_kind = float_kind::hex_without_prefix;
 4065|     20|            }
 4066|       |
 4067|     20|            return read_hex(ranges::subrange{it, range.end()});
 4068|     20|        }
 4069|    212|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4069:13): [True: 12, False: 200]
  |  Branch (4069:29): [True: 12, False: 0]
  ------------------
 4070|       |            // only nonhex allowed:
 4071|       |            // no prefix allowed
 4072|     12|            m_kind = float_kind::generic;
 4073|     12|            return read_regular_float(range);
 4074|     12|        }
 4075|       |        // both hex and nonhex allowed:
 4076|       |        // check for "0x" prefix -> hex,
 4077|       |        // regular otherwise
 4078|       |
 4079|    200|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  986|    200|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 200]
  |  |  ------------------
  ------------------
 4080|      0|            m_kind = float_kind::hex_with_prefix;
 4081|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4082|      0|        }
 4083|       |
 4084|    200|        m_kind = float_kind::generic;
 4085|    200|        return read_regular(range);
 4086|    200|    }
_ZN3scn2v44impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3840|    232|    {
 3841|    232|        auto it = range.begin();
 3842|    232|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3842:73): [True: 232, False: 0]
  ------------------
 3843|    232|            return unexpected(r.error());
 3844|    232|        }
 3845|      0|        else {
 3846|      0|            it = *r;
 3847|      0|        }
 3848|       |
 3849|      0|        if (auto r = read_matching_string_classic_nocase(
 3850|      0|                ranges::subrange{it, range.end()}, "inity");
 3851|      0|            !r) {
  ------------------
  |  Branch (3851:13): [True: 0, False: 0]
  ------------------
 3852|      0|            m_kind = float_kind::inf_short;
 3853|      0|            return it;
 3854|      0|        }
 3855|      0|        else {
 3856|      0|            m_kind = float_kind::inf_long;
 3857|      0|            return *r;
 3858|      0|        }
 3859|      0|    }
_ZN3scn2v44impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3863|    232|    {
 3864|    232|        auto it = range.begin();
 3865|    232|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3865:73): [True: 232, False: 0]
  ------------------
 3866|    232|            return r.transform_error(map_parse_error_to_scan_error(
 3867|    232|                scan_error::invalid_scanned_value,
 3868|    232|                "Invalid floating-point NaN value"));
 3869|    232|        }
 3870|      0|        else {
 3871|      0|            it = *r;
 3872|      0|        }
 3873|       |
 3874|      0|        if (auto r =
 3875|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3876|      0|            !r) {
  ------------------
  |  Branch (3876:13): [True: 0, False: 0]
  ------------------
 3877|      0|            m_kind = float_kind::nan_simple;
 3878|      0|            return it;
 3879|      0|        }
 3880|      0|        else {
 3881|      0|            it = *r;
 3882|      0|        }
 3883|       |
 3884|      0|        auto payload_beg_it = it;
 3885|      0|        it = read_while_code_unit(
 3886|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3887|      0|                return is_ascii_char(ch) &&
 3888|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3889|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3890|      0|            });
 3891|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3892|       |
 3893|      0|        m_kind = float_kind::nan_with_payload;
 3894|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3894:18): [True: 0, False: 0]
  ------------------
 3895|      0|                                             ')')) {
 3896|      0|            return *r;
 3897|      0|        }
 3898|      0|        return detail::unexpected_scan_error(
 3899|      0|            scan_error::invalid_scanned_value,
 3900|      0|            "Invalid floating-point NaN payload");
 3901|      0|    }
_ZN3scn2v44impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3833|    220|    {
 3834|    220|        return read_matching_string_classic_nocase(range, "0x");
 3835|    220|    }
_ZN3scn2v44impl12float_readerIwE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3934|     20|    {
 3935|     20|        auto it = range.begin();
 3936|       |
 3937|     20|        std::ptrdiff_t digits_count = 0;
 3938|     20|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3939|     20|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  986|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 14, False: 6]
  |  |  ------------------
  ------------------
 3940|     14|            return r.transform_error(map_parse_error_to_scan_error(
 3941|     14|                scan_error::invalid_scanned_value,
 3942|     14|                "Invalid hexadecimal floating-point value"));
 3943|     14|        }
 3944|      6|        else {
 3945|      6|            digits_count += ranges::distance(it, *r);
 3946|      6|            it = *r;
 3947|      6|        }
 3948|       |
 3949|      6|        m_integral_part_length = digits_count;
 3950|      6|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3950:18): [True: 0, False: 6]
  ------------------
 3951|      6|                                             m_locale_options.decimal_point)) {
 3952|      0|            it = *r;
 3953|      0|        }
 3954|       |
 3955|      6|        if (auto r =
  ------------------
  |  Branch (3955:18): [True: 0, False: 6]
  ------------------
 3956|      6|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3957|      0|            digits_count += ranges::distance(it, *r);
 3958|      0|            it = *r;
 3959|      0|        }
 3960|       |
 3961|      6|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  986|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 6]
  |  |  ------------------
  ------------------
 3962|      0|            return detail::unexpected_scan_error(
 3963|      0|                scan_error::invalid_scanned_value,
 3964|      0|                "No significand digits in hexfloat");
 3965|      0|        }
 3966|       |
 3967|      6|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3968|       |
 3969|      6|        return it;
 3970|      6|    }
_ZN3scn2v44impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3818|     26|    {
 3819|     26|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  986|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 26]
  |  |  |  Branch (986:45): [True: 0, False: 26]
  |  |  |  Branch (986:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3820|     26|                         thsep_allowed)) {
 3821|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3822|      0|                return char_to_int(ch) < 16 ||
 3823|      0|                       ch == m_locale_options.thousands_sep;
 3824|      0|            });
 3825|      0|        }
 3826|       |
 3827|     26|        return read_while1_code_unit(
 3828|     26|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3829|     26|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_:
  742|     26|        : m_fptr([](storage fn,
  743|     26|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     26|              cvref<T> obj = *get<T>(fn);
  745|     26|              if constexpr (std::is_void_v<R>) {
  746|     26|                  obj(static_cast<decltype(args)>(args)...);
  747|     26|              }
  748|     26|              else {
  749|     26|                  return obj(static_cast<decltype(args)>(args)...);
  750|     26|              }
  751|     26|          }),
  752|     26|          m_storage(std::addressof(f))
  753|     26|    {
  754|     26|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEwE_clES18_w:
  743|     28|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     28|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     28|              else {
  749|     28|                  return obj(static_cast<decltype(args)>(args)...);
  750|     28|              }
  751|     28|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlwE0_EEDaNS3_7storageE:
  683|     28|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     28|        else if constexpr (std::is_object_v<T>) {
  688|     28|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     28|    }
_ZZN3scn2v44impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlwE0_clEw:
 3828|     28|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_TnPNSP_9enable_ifIXsr3stdE11is_object_vISR_EEvE4typeELPv0EEEPSR_:
  660|     26|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     26|        {
  662|     26|        }
_ZN3scn2v44impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESM_NSK_17basic_string_viewIcNSK_11char_traitsIcEEEE:
 3906|     20|    {
 3907|     20|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3907:18): [True: 0, False: 20]
  ------------------
 3908|      0|            auto beg_exp_it = range.begin();
 3909|      0|            auto it = *r;
 3910|       |
 3911|      0|            if (auto r_sign =
  ------------------
  |  Branch (3911:22): [True: 0, False: 0]
  ------------------
 3912|      0|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3913|      0|                it = r_sign->first;
 3914|      0|            }
 3915|       |
 3916|      0|            if (auto r_exp = read_while1_code_unit(
 3917|      0|                    ranges::subrange{it, range.end()},
 3918|      0|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3919|      0|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3920|      0|                it = beg_exp_it;
 3921|      0|            }
 3922|      0|            else {
 3923|      0|                it = *r_exp;
 3924|      0|            }
 3925|       |
 3926|      0|            return it;
 3927|      0|        }
 3928|     20|        return range.begin();
 3929|     20|    }
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEE:
 2371|     20|{
 2372|     20|    auto it = read_code_unit(range);
 2373|     20|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  986|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 6, False: 14]
  |  |  ------------------
  ------------------
 2374|      6|        return unexpected(make_eof_parse_error(it.error()));
 2375|      6|    }
 2376|       |
 2377|     28|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 28, False: 14]
  ------------------
 2378|     28|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 0, False: 28]
  ------------------
 2379|      0|            return *it;
 2380|      0|        }
 2381|     28|    }
 2382|       |
 2383|     14|    return unexpected(parse_error::error);
 2384|     14|}
_ZN3scn2v44impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3975|    212|    {
 3976|    212|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3977|    212|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3977:35): [True: 204, False: 8]
  |  Branch (3977:50): [True: 4, False: 200]
  ------------------
 3978|       |
 3979|    212|        auto it = ranges::begin(range);
 3980|    212|        std::ptrdiff_t digits_count = 0;
 3981|       |
 3982|    212|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3983|    212|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  986|    212|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 196, False: 16]
  |  |  ------------------
  ------------------
 3984|    196|            return r.transform_error(
 3985|    196|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3986|    196|                                              "Invalid floating-point value"));
 3987|    196|        }
 3988|     16|        else {
 3989|     16|            digits_count += ranges::distance(it, *r);
 3990|     16|            it = *r;
 3991|     16|        }
 3992|       |
 3993|     16|        m_integral_part_length = digits_count;
 3994|     16|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3994:18): [True: 0, False: 16]
  ------------------
 3995|     16|                                             m_locale_options.decimal_point)) {
 3996|      0|            it = *r;
 3997|      0|        }
 3998|       |
 3999|     16|        if (auto r =
  ------------------
  |  Branch (3999:18): [True: 0, False: 16]
  ------------------
 4000|     16|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4001|      0|            digits_count += ranges::distance(it, *r);
 4002|      0|            it = *r;
 4003|      0|        }
 4004|       |
 4005|     16|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  986|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 16]
  |  |  ------------------
  ------------------
 4006|      0|            return detail::unexpected_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "No significand digits in float");
 4009|      0|        }
 4010|       |
 4011|     16|        auto beg_exp_it = it;
 4012|     16|        if (allowed_exp) {
  ------------------
  |  Branch (4012:13): [True: 14, False: 2]
  ------------------
 4013|     14|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4014|     14|        }
 4015|     16|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4015:13): [True: 2, False: 14]
  |  Branch (4015:29): [True: 2, False: 0]
  ------------------
 4016|      2|            return detail::unexpected_scan_error(
 4017|      2|                scan_error::invalid_scanned_value,
 4018|      2|                "No exponent given to scientific float");
 4019|      2|        }
 4020|       |
 4021|     14|        m_kind =
 4022|     14|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4022:13): [True: 14, False: 0]
  ------------------
 4023|       |
 4024|     14|        return it;
 4025|     16|    }
_ZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3803|    228|    {
 3804|    228|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  986|    228|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 228]
  |  |  |  Branch (986:45): [True: 0, False: 228]
  |  |  |  Branch (986:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3805|    228|                         thsep_allowed)) {
 3806|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3807|      0|                return char_to_int(ch) < 10 ||
 3808|      0|                       ch == m_locale_options.thousands_sep;
 3809|      0|            });
 3810|      0|        }
 3811|       |
 3812|    228|        return read_while1_code_unit(
 3813|    228|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3814|    228|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_:
  742|    228|        : m_fptr([](storage fn,
  743|    228|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    228|              cvref<T> obj = *get<T>(fn);
  745|    228|              if constexpr (std::is_void_v<R>) {
  746|    228|                  obj(static_cast<decltype(args)>(args)...);
  747|    228|              }
  748|    228|              else {
  749|    228|                  return obj(static_cast<decltype(args)>(args)...);
  750|    228|              }
  751|    228|          }),
  752|    228|          m_storage(std::addressof(f))
  753|    228|    {
  754|    228|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEwE_clES18_w:
  743|    232|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    232|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    232|              else {
  749|    232|                  return obj(static_cast<decltype(args)>(args)...);
  750|    232|              }
  751|    232|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlwE0_EEDaNS3_7storageE:
  683|    232|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    232|        else if constexpr (std::is_object_v<T>) {
  688|    232|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    232|    }
_ZZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlwE0_clEw:
 3813|    232|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_TnPNSP_9enable_ifIXsr3stdE11is_object_vISR_EEvE4typeELPv0EEEPSR_:
  660|    228|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    228|        {
  662|    228|        }
_ZN3scn2v44impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSH_:
 1675|     20|    {
 1676|     20|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1057|     20|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|     20|    }
_ZN3scn2v44impl12float_readerIwE11read_sourceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3706|    216|    {
 3707|    216|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  986|    216|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 216]
  |  |  ------------------
  ------------------
 3708|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3709|      0|                classic_with_thsep_tag{}};
 3710|      0|        }
 3711|       |
 3712|    216|        return read_source_impl(range);
 3713|    216|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|  7.68k|    {
  763|  7.68k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1057|  7.68k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  7.68k|    }
_ZN3scn2v44impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3720|     20|    {
 3721|     20|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3722|     20|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  985|     20|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 0, False: 20]
  |  |  ------------------
  ------------------
 3723|      0|            m_locale_options.thousands_sep = CharT{0};
 3724|      0|        }
 3725|       |
 3726|     20|        return read_source_impl(range);
 3727|     20|    }
_ZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3746|  7.68k|    {
 3747|  7.68k|        SCN_TRY(sign_result,
  ------------------
  |  | 3939|  7.68k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  7.68k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  7.68k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  7.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 7.68k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  7.68k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  7.68k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3748|  7.68k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3749|  7.68k|        auto it = sign_result.first;
 3750|  7.68k|        m_sign = sign_result.second;
 3751|       |
 3752|  7.68k|        auto digits_begin = it;
 3753|  7.68k|        auto r = ranges::subrange{it, range.end()};
 3754|       |        if constexpr (ranges::contiguous_range<Range> &&
 3755|  7.68k|                      ranges::sized_range<Range>) {
 3756|  7.68k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  986|  15.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 7.68k]
  |  |  |  Branch (986:45): [True: 0, False: 7.68k]
  |  |  |  Branch (986:45): [True: 0, False: 7.68k]
  |  |  ------------------
  ------------------
 3757|  7.68k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3758|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|      0|    }                                                  \
  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3759|      0|                    it,
 3760|      0|                    do_read_source_impl(
 3761|      0|                        r,
 3762|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3763|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3764|      0|            }
 3765|  7.68k|            else {
 3766|  7.68k|                auto cb = [&](const auto& rr)
 3767|  7.68k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3768|  7.68k|                    auto res = read_all(rr);
 3769|  7.68k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3770|  7.68k|                        return detail::unexpected_scan_error(
 3771|  7.68k|                            scan_error::invalid_scanned_value,
 3772|  7.68k|                            "Invalid float value");
 3773|  7.68k|                    }
 3774|  7.68k|                    return res;
 3775|  7.68k|                };
 3776|  7.68k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3934|  7.68k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|  7.68k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|  7.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 20, False: 7.66k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|     20|    }                                                  \
  |  | 3938|  7.68k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|  7.68k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3777|  7.66k|            }
 3778|       |        }
 3779|       |        else {
 3780|       |            SCN_TRY_ASSIGN(
 3781|       |                it,
 3782|       |                do_read_source_impl(
 3783|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3784|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3785|       |        }
 3786|       |
 3787|  7.68k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1051|  7.68k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  7.68k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3788|       |
 3789|  7.66k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3789:13): [True: 7.66k, False: 0]
  |  Branch (3789:48): [True: 7.66k, False: 0]
  ------------------
 3790|  7.66k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3790:13): [True: 7.66k, False: 0]
  ------------------
 3791|  7.66k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3791:13): [True: 7.66k, False: 0]
  ------------------
 3792|  7.66k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3793|  7.66k|        }
 3794|       |
 3795|  7.66k|        handle_separators();
 3796|       |
 3797|  7.66k|        return it;
 3798|  7.68k|    }
_ZN3scn2v44impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3840|  7.68k|    {
 3841|  7.68k|        auto it = range.begin();
 3842|  7.68k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3842:73): [True: 7.68k, False: 0]
  ------------------
 3843|  7.68k|            return unexpected(r.error());
 3844|  7.68k|        }
 3845|      0|        else {
 3846|      0|            it = *r;
 3847|      0|        }
 3848|       |
 3849|      0|        if (auto r = read_matching_string_classic_nocase(
 3850|      0|                ranges::subrange{it, range.end()}, "inity");
 3851|      0|            !r) {
  ------------------
  |  Branch (3851:13): [True: 0, False: 0]
  ------------------
 3852|      0|            m_kind = float_kind::inf_short;
 3853|      0|            return it;
 3854|      0|        }
 3855|      0|        else {
 3856|      0|            m_kind = float_kind::inf_long;
 3857|      0|            return *r;
 3858|      0|        }
 3859|      0|    }
_ZN3scn2v44impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3863|  7.68k|    {
 3864|  7.68k|        auto it = range.begin();
 3865|  7.68k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3865:73): [True: 7.68k, False: 0]
  ------------------
 3866|  7.68k|            return r.transform_error(map_parse_error_to_scan_error(
 3867|  7.68k|                scan_error::invalid_scanned_value,
 3868|  7.68k|                "Invalid floating-point NaN value"));
 3869|  7.68k|        }
 3870|      0|        else {
 3871|      0|            it = *r;
 3872|      0|        }
 3873|       |
 3874|      0|        if (auto r =
 3875|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3876|      0|            !r) {
  ------------------
  |  Branch (3876:13): [True: 0, False: 0]
  ------------------
 3877|      0|            m_kind = float_kind::nan_simple;
 3878|      0|            return it;
 3879|      0|        }
 3880|      0|        else {
 3881|      0|            it = *r;
 3882|      0|        }
 3883|       |
 3884|      0|        auto payload_beg_it = it;
 3885|      0|        it = read_while_code_unit(
 3886|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3887|      0|                return is_ascii_char(ch) &&
 3888|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3889|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3890|      0|            });
 3891|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3892|       |
 3893|      0|        m_kind = float_kind::nan_with_payload;
 3894|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3894:18): [True: 0, False: 0]
  ------------------
 3895|      0|                                             ')')) {
 3896|      0|            return *r;
 3897|      0|        }
 3898|      0|        return detail::unexpected_scan_error(
 3899|      0|            scan_error::invalid_scanned_value,
 3900|      0|            "Invalid floating-point NaN payload");
 3901|      0|    }
_ZN3scn2v44impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|  7.66k|    {
 3834|  7.66k|        return read_matching_string_classic_nocase(range, "0x");
 3835|  7.66k|    }
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2094|     30|{
 2095|     30|    auto it = read_while_code_unit(range, pred);
 2096|     30|    if (it == range.begin()) {
  ------------------
  |  Branch (2096:9): [True: 24, False: 6]
  ------------------
 2097|     24|        return unexpected(parse_error::error);
 2098|     24|    }
 2099|      6|    return it;
 2100|     30|}
_ZN3scn2v44impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3906|      4|    {
 3907|      4|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3907:18): [True: 0, False: 4]
  ------------------
 3908|      0|            auto beg_exp_it = range.begin();
 3909|      0|            auto it = *r;
 3910|       |
 3911|      0|            if (auto r_sign =
  ------------------
  |  Branch (3911:22): [True: 0, False: 0]
  ------------------
 3912|      0|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3913|      0|                it = r_sign->first;
 3914|      0|            }
 3915|       |
 3916|      0|            if (auto r_exp = read_while1_code_unit(
 3917|      0|                    ranges::subrange{it, range.end()},
 3918|      0|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3919|      0|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3920|      0|                it = beg_exp_it;
 3921|      0|            }
 3922|      0|            else {
 3923|      0|                it = *r_exp;
 3924|      0|            }
 3925|       |
 3926|      0|            return it;
 3927|      0|        }
 3928|      4|        return range.begin();
 3929|      4|    }
_ZN3scn2v44impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3975|     24|    {
 3976|     24|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3977|     24|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3977:35): [True: 12, False: 12]
  |  Branch (3977:50): [True: 6, False: 6]
  ------------------
 3978|       |
 3979|     24|        auto it = ranges::begin(range);
 3980|     24|        std::ptrdiff_t digits_count = 0;
 3981|       |
 3982|     24|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3983|     24|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  986|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 18, False: 6]
  |  |  ------------------
  ------------------
 3984|     18|            return r.transform_error(
 3985|     18|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3986|     18|                                              "Invalid floating-point value"));
 3987|     18|        }
 3988|      6|        else {
 3989|      6|            digits_count += ranges::distance(it, *r);
 3990|      6|            it = *r;
 3991|      6|        }
 3992|       |
 3993|      6|        m_integral_part_length = digits_count;
 3994|      6|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3994:18): [True: 0, False: 6]
  ------------------
 3995|      6|                                             m_locale_options.decimal_point)) {
 3996|      0|            it = *r;
 3997|      0|        }
 3998|       |
 3999|      6|        if (auto r =
  ------------------
  |  Branch (3999:18): [True: 0, False: 6]
  ------------------
 4000|      6|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4001|      0|            digits_count += ranges::distance(it, *r);
 4002|      0|            it = *r;
 4003|      0|        }
 4004|       |
 4005|      6|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  986|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 6]
  |  |  ------------------
  ------------------
 4006|      0|            return detail::unexpected_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "No significand digits in float");
 4009|      0|        }
 4010|       |
 4011|      6|        auto beg_exp_it = it;
 4012|      6|        if (allowed_exp) {
  ------------------
  |  Branch (4012:13): [True: 4, False: 2]
  ------------------
 4013|      4|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4014|      4|        }
 4015|      6|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4015:13): [True: 2, False: 4]
  |  Branch (4015:29): [True: 2, False: 0]
  ------------------
 4016|      2|            return detail::unexpected_scan_error(
 4017|      2|                scan_error::invalid_scanned_value,
 4018|      2|                "No exponent given to scientific float");
 4019|      2|        }
 4020|       |
 4021|      4|        m_kind =
 4022|      4|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4022:13): [True: 4, False: 0]
  ------------------
 4023|       |
 4024|      4|        return it;
 4025|      6|    }
_ZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3803|     30|    {
 3804|     30|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  986|     30|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 30]
  |  |  |  Branch (986:45): [True: 0, False: 30]
  |  |  |  Branch (986:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3805|     30|                         thsep_allowed)) {
 3806|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3807|      0|                return char_to_int(ch) < 10 ||
 3808|      0|                       ch == m_locale_options.thousands_sep;
 3809|      0|            });
 3810|      0|        }
 3811|       |
 3812|     30|        return read_while1_code_unit(
 3813|     30|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3814|     30|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|     30|        : m_fptr([](storage fn,
  743|     30|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     30|              cvref<T> obj = *get<T>(fn);
  745|     30|              if constexpr (std::is_void_v<R>) {
  746|     30|                  obj(static_cast<decltype(args)>(args)...);
  747|     30|              }
  748|     30|              else {
  749|     30|                  return obj(static_cast<decltype(args)>(args)...);
  750|     30|              }
  751|     30|          }),
  752|     30|          m_storage(std::addressof(f))
  753|     30|    {
  754|     30|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES10_w:
  743|     36|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     36|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     36|              else {
  749|     36|                  return obj(static_cast<decltype(args)>(args)...);
  750|     36|              }
  751|     36|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  683|     36|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     36|        else if constexpr (std::is_object_v<T>) {
  688|     36|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     36|    }
_ZZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3813|     36|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     30|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     30|        {
  662|     30|        }
_ZN3scn2v44impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 4032|  7.68k|    {
 4033|  7.68k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4034|  7.68k|        const bool allowed_nonhex =
 4035|  7.68k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4036|  7.68k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4037|       |
 4038|  7.68k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4038:39): [True: 7.68k, False: 0]
  |  Branch (4038:45): [True: 0, False: 7.68k]
  ------------------
 4039|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4040|      0|                scan_error::invalid_scanned_value,
 4041|      0|                "Invalid infinite floating-point value"));
 4042|      0|        }
 4043|  7.68k|        else if (r) {
  ------------------
  |  Branch (4043:18): [True: 0, False: 7.68k]
  ------------------
 4044|      0|            return *r;
 4045|      0|        }
 4046|       |
 4047|  7.68k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4047:39): [True: 7.68k, False: 0]
  |  Branch (4047:45): [True: 0, False: 7.68k]
  ------------------
 4048|      0|            return unexpected(r.error());
 4049|      0|        }
 4050|  7.68k|        else if (r) {
  ------------------
  |  Branch (4050:18): [True: 0, False: 7.68k]
  ------------------
 4051|      0|            return *r;
 4052|      0|        }
 4053|       |
 4054|  7.68k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4054:13): [True: 7.66k, False: 24]
  |  Branch (4054:28): [True: 72, False: 7.59k]
  ------------------
 4055|       |            // only hex allowed:
 4056|       |            // prefix "0x" allowed, not required
 4057|     72|            auto it = range.begin();
 4058|       |
 4059|     72|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4059:22): [True: 0, False: 72]
  ------------------
 4060|      0|                m_kind = float_kind::hex_with_prefix;
 4061|      0|                it = *r;
 4062|      0|            }
 4063|     72|            else {
 4064|     72|                m_kind = float_kind::hex_without_prefix;
 4065|     72|            }
 4066|       |
 4067|     72|            return read_hex(ranges::subrange{it, range.end()});
 4068|     72|        }
 4069|  7.61k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4069:13): [True: 24, False: 7.59k]
  |  Branch (4069:29): [True: 24, False: 0]
  ------------------
 4070|       |            // only nonhex allowed:
 4071|       |            // no prefix allowed
 4072|     24|            m_kind = float_kind::generic;
 4073|     24|            return read_regular_float(range);
 4074|     24|        }
 4075|       |        // both hex and nonhex allowed:
 4076|       |        // check for "0x" prefix -> hex,
 4077|       |        // regular otherwise
 4078|       |
 4079|  7.59k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  986|  7.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 7.59k]
  |  |  ------------------
  ------------------
 4080|      0|            m_kind = float_kind::hex_with_prefix;
 4081|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4082|      0|        }
 4083|       |
 4084|  7.59k|        m_kind = float_kind::generic;
 4085|  7.59k|        return read_regular(range);
 4086|  7.59k|    }
_ZZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3767|  7.66k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3768|  7.66k|                    auto res = read_all(rr);
 3769|  7.66k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  986|  7.66k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 7.66k]
  |  |  ------------------
  ------------------
 3770|      0|                        return detail::unexpected_scan_error(
 3771|      0|                            scan_error::invalid_scanned_value,
 3772|      0|                            "Invalid float value");
 3773|      0|                    }
 3774|  7.66k|                    return res;
 3775|  7.66k|                };
_ZN3scn2v44impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1937|  7.66k|{
 1938|  7.66k|    return ranges::next(range.begin(), range.end());
 1939|  7.66k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|  7.66k|    {
  313|  7.66k|        ranges::advance(x, bound);
  314|  7.66k|        return x;
  315|  7.66k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|  7.66k|    {
  275|  7.66k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|  7.66k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1675|  7.66k|    {
 1676|  7.66k|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1057|  7.66k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|  7.66k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1719|  7.66k|    {
 1720|  7.66k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|  7.66k|                      ranges::sized_range<Range>) {
 1725|  7.66k|            m_storage.reset();
 1726|  7.66k|            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|  7.66k|    }
_ZN3scn2v44impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3706|  7.66k|    {
 3707|  7.66k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  986|  7.66k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 7.66k]
  |  |  ------------------
  ------------------
 3708|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3709|      0|                classic_with_thsep_tag{}};
 3710|      0|        }
 3711|       |
 3712|  7.66k|        return read_source_impl(range);
 3713|  7.66k|    }
_ZN3scn2v44impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3732|  7.68k|    {
 3733|  7.68k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1051|  7.68k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  7.68k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3734|       |
 3735|  7.68k|        const std::ptrdiff_t sign_len =
 3736|  7.68k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3736:13): [True: 0, False: 7.68k]
  ------------------
 3737|       |
 3738|  7.68k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3939|  7.68k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  7.68k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  7.68k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  7.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 7.58k, False: 100]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  7.58k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  7.58k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  7.58k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  7.58k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  7.58k|    }                                                  \
  |  |  |  | 3938|  7.68k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    100|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3739|    100|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3740|  7.68k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 4202|    232|    {
 4203|    232|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|    232|#if !SCN_DISABLE_LOCALE
 4206|    232|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 16, False: 216]
  ------------------
 4207|     16|            return read_impl<Range>(
 4208|     16|                range, rd,
 4209|     16|                [](float_reader<CharT>& r, auto&&... args) {
 4210|     16|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|     16|                },
 4212|     16|                value, loc);
 4213|     16|        }
 4214|    216|#endif
 4215|       |
 4216|    216|        return read_impl<Range>(
 4217|    216|            range, rd,
 4218|    216|            [](float_reader<CharT>& r, auto&&... args) {
 4219|    216|                return r.read_source(SCN_FWD(args)...);
 4220|    216|            },
 4221|    216|            value);
 4222|    232|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNS1_12float_readerIwEENS1_12function_refIFSM_SP_SH_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4238|    232|    {
 4239|    232|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|    232|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  986|    232|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 212, False: 20]
  |  |  ------------------
  ------------------
 4241|    212|            return unexpected(r.error());
 4242|    212|        }
 4243|       |
 4244|     20|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3939|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 20]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|     20|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|     20|        return ranges::next(range.begin(), n);
 4246|     20|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_:
  742|     16|        : m_fptr([](storage fn,
  743|     16|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     16|              cvref<T> obj = *get<T>(fn);
  745|     16|              if constexpr (std::is_void_v<R>) {
  746|     16|                  obj(static_cast<decltype(args)>(args)...);
  747|     16|              }
  748|     16|              else {
  749|     16|                  return obj(static_cast<decltype(args)>(args)...);
  750|     16|              }
  751|     16|          }),
  752|     16|          m_storage(std::addressof(f))
  753|     16|    {
  754|     16|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1H_SC_SJ_SL_:
  743|     16|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     16|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     16|              else {
  749|     16|                  return obj(static_cast<decltype(args)>(args)...);
  750|     16|              }
  751|     16|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|     16|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     16|        else if constexpr (std::is_object_v<T>) {
  688|     16|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     16|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSD_ST_EEEDaSW_SZ_:
 4209|     16|                [](float_reader<CharT>& r, auto&&... args) {
 4210|     16|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1057|     16|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|     16|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     16|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     16|        {
  662|     16|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_:
  742|    216|        : m_fptr([](storage fn,
  743|    216|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    216|              cvref<T> obj = *get<T>(fn);
  745|    216|              if constexpr (std::is_void_v<R>) {
  746|    216|                  obj(static_cast<decltype(args)>(args)...);
  747|    216|              }
  748|    216|              else {
  749|    216|                  return obj(static_cast<decltype(args)>(args)...);
  750|    216|              }
  751|    216|          }),
  752|    216|          m_storage(std::addressof(f))
  753|    216|    {
  754|    216|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1H_SC_SJ_SL_:
  743|    216|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    216|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    216|              else {
  749|    216|                  return obj(static_cast<decltype(args)>(args)...);
  750|    216|              }
  751|    216|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|    216|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    216|        else if constexpr (std::is_object_v<T>) {
  688|    216|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    216|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSD_ST_EEEDaSW_SZ_:
 4218|    216|            [](float_reader<CharT>& r, auto&&... args) {
 4219|    216|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1057|    216|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|    216|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|    216|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    216|        {
  662|    216|        }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4202|    498|    {
 4203|    498|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|    498|#if !SCN_DISABLE_LOCALE
 4206|    498|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 20, False: 478]
  ------------------
 4207|     20|            return read_impl<Range>(
 4208|     20|                range, rd,
 4209|     20|                [](float_reader<CharT>& r, auto&&... args) {
 4210|     20|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|     20|                },
 4212|     20|                value, loc);
 4213|     20|        }
 4214|    478|#endif
 4215|       |
 4216|    478|        return read_impl<Range>(
 4217|    478|            range, rd,
 4218|    478|            [](float_reader<CharT>& r, auto&&... args) {
 4219|    478|                return r.read_source(SCN_FWD(args)...);
 4220|    478|            },
 4221|    478|            value);
 4222|    498|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4238|  7.68k|    {
 4239|  7.68k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|  7.68k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  986|  7.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 20, False: 7.66k]
  |  |  ------------------
  ------------------
 4241|     20|            return unexpected(r.error());
 4242|     20|        }
 4243|       |
 4244|  7.66k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3939|  7.66k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  7.66k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  7.66k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  7.66k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 7.58k, False: 80]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  7.58k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  7.58k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  7.58k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  7.58k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  7.58k|    }                                                  \
  |  |  |  | 3938|  7.66k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|     80|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|     80|        return ranges::next(range.begin(), n);
 4246|  7.66k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|     20|        : m_fptr([](storage fn,
  743|     20|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     20|              cvref<T> obj = *get<T>(fn);
  745|     20|              if constexpr (std::is_void_v<R>) {
  746|     20|                  obj(static_cast<decltype(args)>(args)...);
  747|     20|              }
  748|     20|              else {
  749|     20|                  return obj(static_cast<decltype(args)>(args)...);
  750|     20|              }
  751|     20|          }),
  752|     20|          m_storage(std::addressof(f))
  753|     20|    {
  754|     20|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|     20|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     20|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     20|              else {
  749|     20|                  return obj(static_cast<decltype(args)>(args)...);
  750|     20|              }
  751|     20|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|     20|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     20|        else if constexpr (std::is_object_v<T>) {
  688|     20|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     20|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4209|     20|                [](float_reader<CharT>& r, auto&&... args) {
 4210|     20|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1057|     20|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|     20|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     20|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     20|        {
  662|     20|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|    478|        : m_fptr([](storage fn,
  743|    478|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    478|              cvref<T> obj = *get<T>(fn);
  745|    478|              if constexpr (std::is_void_v<R>) {
  746|    478|                  obj(static_cast<decltype(args)>(args)...);
  747|    478|              }
  748|    478|              else {
  749|    478|                  return obj(static_cast<decltype(args)>(args)...);
  750|    478|              }
  751|    478|          }),
  752|    478|          m_storage(std::addressof(f))
  753|    478|    {
  754|    478|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|    478|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    478|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    478|              else {
  749|    478|                  return obj(static_cast<decltype(args)>(args)...);
  750|    478|              }
  751|    478|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|    478|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    478|        else if constexpr (std::is_object_v<T>) {
  688|    478|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    478|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4218|    478|            [](float_reader<CharT>& r, auto&&... args) {
 4219|    478|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1057|    478|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|    478|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|    478|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    478|        {
  662|    478|        }
_ZN3scn2v44impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEwEEDav:
 5848|  8.55k|{
 5849|       |    if constexpr (std::is_same_v<T, bool>) {
 5850|       |        return reader_impl_for_bool<CharT>{};
 5851|       |    }
 5852|       |    else if constexpr (std::is_same_v<T, char>) {
 5853|       |        return reader_impl_for_char<CharT>{};
 5854|       |    }
 5855|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5856|       |        return reader_impl_for_wchar<CharT>{};
 5857|       |    }
 5858|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5859|       |        return reader_impl_for_code_point<CharT>{};
 5860|       |    }
 5861|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5862|       |                       std::is_same_v<T, std::wstring_view>) {
 5863|       |        return reader_impl_for_string<CharT>{};
 5864|       |    }
 5865|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5866|  8.55k|                       std::is_same_v<T, std::wstring>) {
 5867|  8.55k|        return reader_impl_for_string<CharT>{};
 5868|       |    }
 5869|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5870|       |                       std::is_same_v<T, wregex_matches>) {
 5871|       |        return reader_impl_for_regex_matches<CharT>{};
 5872|       |    }
 5873|       |    else if constexpr (std::is_same_v<T, void*>) {
 5874|       |        return reader_impl_for_voidptr<CharT>{};
 5875|       |    }
 5876|       |    else if constexpr (std::is_floating_point_v<T>) {
 5877|       |        return reader_impl_for_float<CharT>{};
 5878|       |    }
 5879|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5880|       |                       !std::is_same_v<T, wchar_t> &&
 5881|       |                       !std::is_same_v<T, char32_t> &&
 5882|       |                       !std::is_same_v<T, bool>) {
 5883|       |        return reader_impl_for_int<CharT>{};
 5884|       |    }
 5885|       |    else {
 5886|       |        return reader_impl_for_monostate<CharT>{};
 5887|       |    }
 5888|  8.55k|}
_ZN3scn2v44impl13string_readerIwEC2Ev:
 5242|  25.6k|    constexpr string_reader() = default;
_ZN3scn2v44impl11reader_baseINS1_13string_readerIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3155|  4.10k|    {
 3156|  4.10k|        reader_error_handler eh{};
 3157|  4.10k|        get_derived().check_specs_impl(specs, eh);
 3158|  4.10k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  986|  4.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 720, False: 3.38k]
  |  |  ------------------
  ------------------
 3159|    720|            return detail::unexpected_scan_error(
 3160|    720|                scan_error::invalid_format_string, eh.m_msg);
 3161|    720|        }
 3162|  3.38k|        return {};
 3163|  4.10k|    }
_ZN3scn2v44impl11reader_baseINS1_13string_readerIwEEwE11get_derivedEv:
 3167|  4.10k|    {
 3168|  4.10k|        return static_cast<Derived&>(*this);
 3169|  4.10k|    }
_ZN3scn2v44impl13string_readerIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5246|  4.10k|    {
 5247|  4.10k|        detail::check_string_type_specs(specs, eh);
 5248|       |
 5249|  4.10k|        SCN_GCC_PUSH
 5250|  4.10k|        SCN_GCC_IGNORE("-Wswitch")
 5251|  4.10k|        SCN_GCC_IGNORE("-Wswitch-default")
 5252|       |
 5253|  4.10k|        SCN_CLANG_PUSH
 5254|  4.10k|        SCN_CLANG_IGNORE("-Wswitch")
 5255|  4.10k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5256|       |
 5257|  4.10k|        switch (specs.type) {
  ------------------
  |  Branch (5257:17): [True: 714, False: 3.39k]
  ------------------
 5258|  1.74k|            case detail::presentation_type::none:
  ------------------
  |  Branch (5258:13): [True: 1.74k, False: 2.36k]
  ------------------
 5259|  1.74k|                m_type = reader_type::word;
 5260|  1.74k|                break;
 5261|       |
 5262|    282|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5262:13): [True: 282, False: 3.82k]
  ------------------
 5263|    282|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5263:21): [True: 72, False: 210]
  ------------------
 5264|    282|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5264:21): [True: 114, False: 96]
  ------------------
 5265|    186|                    m_type = reader_type::custom_word;
 5266|    186|                }
 5267|     96|                else {
 5268|     96|                    m_type = reader_type::word;
 5269|     96|                }
 5270|    282|                break;
 5271|      0|            }
 5272|       |
 5273|     90|            case detail::presentation_type::character:
  ------------------
  |  Branch (5273:13): [True: 90, False: 4.01k]
  ------------------
 5274|     90|                m_type = reader_type::character;
 5275|     90|                break;
 5276|       |
 5277|  1.27k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5277:13): [True: 1.27k, False: 2.82k]
  ------------------
 5278|  1.27k|                m_type = reader_type::character_set;
 5279|  1.27k|                break;
 5280|       |
 5281|      0|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5281:13): [True: 0, False: 4.10k]
  ------------------
 5282|      0|                m_type = reader_type::regex;
 5283|      0|                break;
 5284|       |
 5285|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5285:13): [True: 0, False: 4.10k]
  ------------------
 5286|      0|                m_type = reader_type::regex_escaped;
 5287|      0|                break;
 5288|  4.10k|        }
 5289|       |
 5290|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5291|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5292|  4.10k|    }
_ZNK3scn2v44impl13string_readerIwE19skip_ws_before_readEv:
 5295|  26.6k|    {
 5296|  26.6k|        return m_type == reader_type::word;
 5297|  26.6k|    }
_ZN3scn2v44impl16validate_unicodeIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1241|  32.6k|{
 1242|  32.6k|    auto it = src.begin();
 1243|   325k|    while (it != src.end()) {
  ------------------
  |  Branch (1243:12): [True: 293k, False: 31.5k]
  ------------------
 1244|   293k|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1245|   293k|        if (len == 0) {
  ------------------
  |  Branch (1245:13): [True: 0, False: 293k]
  ------------------
 1246|      0|            return false;
 1247|      0|        }
 1248|   293k|        if (src.end() - it < len) {
  ------------------
  |  Branch (1248:13): [True: 0, False: 293k]
  ------------------
 1249|      0|            return false;
 1250|      0|        }
 1251|   293k|        const auto cp = detail::decode_code_point_exhaustive(
 1252|   293k|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1253|   293k|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1253:13): [True: 1.17k, False: 292k]
  ------------------
 1254|  1.17k|            return false;
 1255|  1.17k|        }
 1256|   292k|        it += len;
 1257|   292k|    }
 1258|  31.5k|    return true;
 1259|  32.6k|}
_ZN3scn2v44impl22transcode_if_necessaryIwcEENS0_13scan_expectedIvEEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS9_11char_traitsISB_EENS9_9allocatorISB_EEEE:
 3107|    300|{
 3108|       |    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3109|       |        if (source.stores_allocated_string()) {
 3110|       |            dest.assign(SCN_MOVE(source.get_allocated_string()));
 3111|       |        }
 3112|       |        else {
 3113|       |            dest.assign(source.view());
 3114|       |        }
 3115|       |    }
 3116|    300|    else {
 3117|    300|        return transcode_impl(source.view(), dest);
 3118|    300|    }
 3119|       |
 3120|      0|    return {};
 3121|    300|}
_ZN3scn2v44impl14transcode_implIwcEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEERNS5_12basic_stringIT0_NS8_ISC_EENS5_9allocatorISC_EEEE:
 3082|  7.88k|{
 3083|  7.88k|    dst.clear();
 3084|  7.88k|    transcode_valid_to_string(src, dst);
 3085|  7.88k|    return {};
 3086|  7.88k|}
_ZN3scn2v44impl25transcode_valid_to_stringIwcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1501|  7.88k|{
 1502|  7.88k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1503|       |
 1504|  7.88k|    SCN_EXPECT(validate_unicode(src));
  ------------------
  |  | 1051|  7.88k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  7.88k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1505|       |    if constexpr (sizeof(SourceCharT) == 1) {
 1506|       |        if constexpr (sizeof(DestCharT) == 2) {
 1507|       |            // TODO: Optimize, remove utf32-step, go direct utf8->utf16
 1508|       |            std::u32string tmp;
 1509|       |            transcode_valid_to_string_impl_to32(src, tmp);
 1510|       |            return transcode_to_string_impl_32to16<true>(
 1511|       |                std::u32string_view{tmp}, dest);
 1512|       |        }
 1513|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1514|       |            return transcode_valid_to_string_impl_to32(src, dest);
 1515|       |        }
 1516|       |    }
 1517|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1518|       |        if constexpr (sizeof(DestCharT) == 1) {
 1519|       |            std::u32string tmp;
 1520|       |            transcode_valid_to_string_impl_to32(src, tmp);
 1521|       |            return transcode_to_string_impl_32to8<true>(
 1522|       |                std::u32string_view{tmp}, dest);
 1523|       |        }
 1524|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1525|       |            return trasncode_valid_to_string_impl_to32(src, dest);
 1526|       |        }
 1527|       |    }
 1528|  7.88k|    else if constexpr (sizeof(SourceCharT) == 4) {
 1529|  7.88k|        if constexpr (sizeof(DestCharT) == 1) {
 1530|  7.88k|            return transcode_to_string_impl_32to8<true>(src, dest);
 1531|       |        }
 1532|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1533|       |            return transcode_to_string_impl_32to16<true>(src, dest);
 1534|       |        }
 1535|  7.88k|    }
 1536|       |
 1537|  7.88k|    SCN_EXPECT(false);
  ------------------
  |  | 1051|  7.88k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  7.88k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1538|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1539|  7.88k|}
_ZN3scn2v44impl30transcode_to_string_impl_32to8ILb1EwcEEvNSt3__117basic_string_viewIT0_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT1_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1392|  7.88k|{
 1393|  7.88k|    static_assert(sizeof(SourceCharT) == 4);
 1394|  7.88k|    static_assert(sizeof(DestCharT) == 1);
 1395|       |
 1396|  71.1k|    for (auto cp : src) {
  ------------------
  |  Branch (1396:18): [True: 71.1k, False: 7.88k]
  ------------------
 1397|  71.1k|        const auto u32cp = static_cast<uint32_t>(cp);
 1398|  71.1k|        if (SCN_UNLIKELY(!VerifiedValid && cp >= detail::invalid_code_point)) {
  ------------------
  |  |  986|  71.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [Folded - Ignored]
  |  |  |  Branch (986:45): [Folded - Ignored]
  |  |  |  Branch (986:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1399|       |            // Replacement character
 1400|      0|            dest.push_back(static_cast<char>(0xef));
 1401|      0|            dest.push_back(static_cast<char>(0xbf));
 1402|      0|            dest.push_back(static_cast<char>(0xbd));
 1403|      0|        }
 1404|  71.1k|        else if (cp < 128) {
  ------------------
  |  Branch (1404:18): [True: 36.1k, False: 35.0k]
  ------------------
 1405|  36.1k|            dest.push_back(static_cast<char>(cp));
 1406|  36.1k|        }
 1407|  35.0k|        else if (cp < 2048) {
  ------------------
  |  Branch (1407:18): [True: 206, False: 34.8k]
  ------------------
 1408|    206|            dest.push_back(
 1409|    206|                static_cast<char>(0xc0 | (static_cast<char>(u32cp >> 6))));
 1410|    206|            dest.push_back(
 1411|    206|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1412|    206|        }
 1413|  34.8k|        else if (cp < 65536) {
  ------------------
  |  Branch (1413:18): [True: 34.4k, False: 434]
  ------------------
 1414|  34.4k|            dest.push_back(
 1415|  34.4k|                static_cast<char>(0xe0 | (static_cast<char>(u32cp >> 12))));
 1416|  34.4k|            dest.push_back(static_cast<char>(
 1417|  34.4k|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1418|  34.4k|            dest.push_back(
 1419|  34.4k|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1420|  34.4k|        }
 1421|    434|        else {
 1422|    434|            dest.push_back(
 1423|    434|                static_cast<char>(0xf0 | (static_cast<char>(u32cp >> 18))));
 1424|    434|            dest.push_back(static_cast<char>(
 1425|    434|                0x80 | (static_cast<char>(u32cp >> 12) & 0x3f)));
 1426|    434|            dest.push_back(static_cast<char>(
 1427|    434|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1428|    434|            dest.push_back(
 1429|    434|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1430|    434|        }
 1431|  71.1k|    }
 1432|  7.88k|}
_ZN3scn2v44impl25character_set_reader_implIwE12specs_helper15handle_nonasciiEv:
 5143|  1.27k|        {
 5144|  1.27k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5144:17): [True: 384, False: 894]
  ------------------
 5145|    384|                return {};
 5146|    384|            }
 5147|       |
 5148|    894|            auto charset_string = specs.charset_string<SourceCharT>();
 5149|    894|            auto it = detail::to_address(charset_string.begin());
 5150|    894|            auto set = detail::parse_presentation_set(
 5151|    894|                it, detail::to_address(charset_string.end()), nonascii);
 5152|    894|            SCN_TRY_DISCARD(nonascii.get_error());
  ------------------
  |  | 3929|    894|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|    894|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 894]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 5153|    894|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  | 1052|    894|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1048|    894|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5154|    894|            SCN_ENSURE(set == charset_string);
  ------------------
  |  | 1052|    894|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1048|    894|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5155|       |
 5156|    894|            std::sort(nonascii.extra_ranges.begin(),
 5157|    894|                      nonascii.extra_ranges.end());
 5158|    894|            return {};
 5159|    894|        }
_ZNK3scn2v44impl25character_set_reader_implIwE20read_source_callback28on_classic_with_extra_rangesEDi:
 5176|  11.1k|        {
 5177|  11.1k|            if (!is_ascii_char(cp)) {
  ------------------
  |  Branch (5177:17): [True: 3.17k, False: 8.02k]
  ------------------
 5178|  3.17k|                return helper.is_char_set_in_extra_literals(cp);
 5179|  3.17k|            }
 5180|       |
 5181|  8.02k|            return helper.is_char_set_in_literals(static_cast<char>(cp));
 5182|  11.1k|        }
_ZNK3scn2v44impl25character_set_reader_implIwE12specs_helper29is_char_set_in_extra_literalsEDi:
 5126|  3.17k|        {
 5127|       |            // TODO: binary search?
 5128|  3.17k|            if (nonascii.extra_ranges.empty()) {
  ------------------
  |  Branch (5128:17): [True: 0, False: 3.17k]
  ------------------
 5129|      0|                return false;
 5130|      0|            }
 5131|       |
 5132|  3.17k|            const auto cp_val = static_cast<uint32_t>(cp);
 5133|  3.17k|            return std::find_if(
 5134|  3.17k|                       nonascii.extra_ranges.begin(),
 5135|  3.17k|                       nonascii.extra_ranges.end(),
 5136|  3.17k|                       [cp_val](const auto& pair) noexcept {
 5137|  3.17k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
 5138|  3.17k|                                  static_cast<uint32_t>(pair.second) > cp_val;
 5139|  3.17k|                       }) != nonascii.extra_ranges.end();
 5140|  3.17k|        }
_ZZNK3scn2v44impl25character_set_reader_implIwE12specs_helper29is_char_set_in_extra_literalsEDiENKUlRKT_E_clINSt3__14pairIDiDiEEEEDaS7_:
 5136|  22.3k|                       [cp_val](const auto& pair) noexcept {
 5137|  22.3k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
  ------------------
  |  Branch (5137:35): [True: 20.3k, False: 1.99k]
  ------------------
 5138|  22.3k|                                  static_cast<uint32_t>(pair.second) > cp_val;
  ------------------
  |  Branch (5138:35): [True: 2.40k, False: 17.9k]
  ------------------
 5139|  22.3k|                       }) != nonascii.extra_ranges.end();
_ZNK3scn2v44impl25character_set_reader_implIwE12specs_helper23is_char_set_in_literalsEc:
 5116|  11.9k|        {
 5117|  11.9k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  | 1051|  11.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  11.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5118|  11.9k|            const auto val =
 5119|  11.9k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5120|  11.9k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5121|  11.9k|                    (val % 8)) &
 5122|  11.9k|                   1u;
 5123|  11.9k|        }
_ZNK3scn2v44impl25character_set_reader_implIwE20read_source_callback13on_ascii_onlyEw:
 5167|  4.12k|        {
 5168|  4.12k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5168:17): [True: 180, False: 3.94k]
  ------------------
 5169|    180|                return false;
 5170|    180|            }
 5171|       |
 5172|  3.94k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5173|  4.12k|        }
_ZN3scn2v44impl25character_set_reader_implIwE12specs_helperC2ERKNS0_6detail12format_specsE:
 5113|  1.27k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v44impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5313|    428|    {
 5314|    428|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|    428|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|    428|        return read_impl(range, specs, value);
 5316|    428|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5331|    428|    {
 5332|    428|        SCN_CLANG_PUSH
 5333|    428|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|    428|        switch (m_type) {
 5336|    194|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 194, False: 234]
  ------------------
 5337|    194|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|     22|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 22, False: 406]
  ------------------
 5340|     22|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|     22|                                                                   value);
 5342|       |
 5343|     26|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 26, False: 402]
  ------------------
 5344|     26|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|    186|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 186, False: 242]
  ------------------
 5347|    186|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|    186|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|      0|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 0, False: 428]
  ------------------
 5352|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|      0|                    range, specs.charset_string<SourceCharT>(),
 5354|      0|                    specs.regexp_flags, value);
 5355|       |
 5356|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 0, False: 428]
  ------------------
 5357|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|      0|                    range,
 5359|      0|                    get_unescaped_regex_pattern(
 5360|      0|                        specs.charset_string<SourceCharT>()),
 5361|      0|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 428]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1051|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|    428|                SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|    428|        }
 5368|       |
 5369|    428|        SCN_CLANG_POP
 5370|    428|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4860|    194|    {
 4861|    194|        return read_string_impl(range, read_until_classic_space(range), value);
 4862|    194|    }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4794|    242|{
 4795|    242|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    242|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    242|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 114, False: 128]
  ------------------
 4799|    114|        return detail::unexpected_scan_error(
 4800|    114|            scan_error::invalid_scanned_value,
 4801|    114|            "Invalid encoding in scanned string");
 4802|    114|    }
 4803|       |
 4804|    128|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3929|    128|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|    128|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 128]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 4805|    128|    return SCN_MOVE(result);
  ------------------
  |  | 1055|    128|    static_cast<    \
  |  | 1056|    128|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    128|}
_ZN3scn2v44impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2186|    582|{
 2187|       |    if constexpr (ranges::contiguous_range<Range> &&
 2188|       |                  ranges::sized_range<Range> &&
 2189|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2190|       |        auto buf = make_contiguous_buffer(range);
 2191|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2192|       |        return ranges::next(range.begin(),
 2193|       |                            ranges::distance(buf.view().begin(), it));
 2194|       |    }
 2195|    582|    else {
 2196|    582|        auto it = range.begin();
 2197|       |
 2198|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|       |            auto seg = get_contiguous_beginning(range);
 2200|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2201|       |                seg_it != seg.end()) {
 2202|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2203|       |            }
 2204|       |            ranges::advance(it, seg.size());
 2205|       |        }
 2206|       |
 2207|    582|        return read_until_code_point(
 2208|    582|            ranges::subrange{it, range.end()},
 2209|    582|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2210|    582|    }
 2211|    582|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbDiESQ_EE:
 2159|    582|{
 2160|    582|    auto it = range.begin();
 2161|  10.9k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 10.4k, False: 492]
  ------------------
 2162|  10.4k|        const auto val =
 2163|  10.4k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  10.4k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  985|  10.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 10.4k, False: 0]
  |  |  ------------------
  ------------------
 2165|  10.4k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  10.4k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  10.4k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 90, False: 10.3k]
  ------------------
 2168|     90|                return it;
 2169|     90|            }
 2170|  10.4k|        }
 2171|  10.3k|        it = val.iterator;
 2172|  10.3k|    }
 2173|       |
 2174|    492|    return it;
 2175|    582|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_:
  742|    582|        : m_fptr([](storage fn,
  743|    582|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    582|              cvref<T> obj = *get<T>(fn);
  745|    582|              if constexpr (std::is_void_v<R>) {
  746|    582|                  obj(static_cast<decltype(args)>(args)...);
  747|    582|              }
  748|    582|              else {
  749|    582|                  return obj(static_cast<decltype(args)>(args)...);
  750|    582|              }
  751|    582|          }),
  752|    582|          m_storage(std::addressof(f))
  753|    582|    {
  754|    582|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESY_Di:
  743|  10.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  10.4k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  10.4k|              else {
  749|  10.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  10.4k|              }
  751|  10.4k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  10.4k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  10.4k|        else if constexpr (std::is_object_v<T>) {
  688|  10.4k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  10.4k|    }
_ZZN3scn2v44impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2209|  10.4k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|    582|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    582|        {
  662|    582|        }
_ZN3scn2v44impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4881|     22|    {
 4882|     22|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4882:13): [True: 22, False: 0]
  ------------------
 4883|     22|            return read_string_impl(
 4884|     22|                range,
 4885|     22|                read_until_code_unit(
 4886|     22|                    range,
 4887|     22|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4888|     22|                        SourceCharT ch) { return ch == until; }),
 4889|     22|                value);
 4890|     22|        }
 4891|      0|        return read_string_impl(
 4892|      0|            range,
 4893|      0|            read_until_code_units(
 4894|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4895|      0|            value);
 4896|     22|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|     22|        : m_fptr([](storage fn,
  743|     22|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     22|              cvref<T> obj = *get<T>(fn);
  745|     22|              if constexpr (std::is_void_v<R>) {
  746|     22|                  obj(static_cast<decltype(args)>(args)...);
  747|     22|              }
  748|     22|              else {
  749|     22|                  return obj(static_cast<decltype(args)>(args)...);
  750|     22|              }
  751|     22|          }),
  752|     22|          m_storage(std::addressof(f))
  753|     22|    {
  754|     22|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES1D_w:
  743|    382|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    382|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    382|              else {
  749|    382|                  return obj(static_cast<decltype(args)>(args)...);
  750|    382|              }
  751|    382|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlwE_EEDaNS3_7storageE:
  683|    382|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    382|        else if constexpr (std::is_object_v<T>) {
  688|    382|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    382|    }
_ZZN3scn2v44impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlwE_clEw:
 4888|    382|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     22|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     22|        {
  662|     22|        }
_ZN3scn2v44impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4987|     26|    {
 4988|     26|        return read_impl(
 4989|     26|            range,
 4990|     26|            [&](const auto& rng) {
 4991|     26|                return read_string_impl(rng, read_all(rng), value);
 4992|     26|            },
 4993|     26|            detail::priority_tag<1>{});
 4994|     26|    }
_ZN3scn2v44impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 5014|     26|    {
 5015|     26|        return read_cb(range);
 5016|     26|    }
_ZZN3scn2v44impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4990|     26|            [&](const auto& rng) {
 4991|     26|                return read_string_impl(rng, read_all(rng), value);
 4992|     26|            },
_ZN3scn2v44impl8read_allINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 1937|     78|{
 1938|     78|    return ranges::next(range.begin(), range.end());
 1939|     78|}
_ZNK3scn2v46ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS1_6detail9subrange_8subrangeIS9_S9_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EESL_E4typeESL_SM_:
  312|     78|    {
  313|     78|        ranges::advance(x, bound);
  314|     78|        return x;
  315|     78|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EEvE4typeERSL_SM_:
  274|     78|    {
  275|     78|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|     78|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEvRT_T0_NS0_6detail12priority_tagILm0EEE:
  202|     78|    {
  203|  1.37k|        while (i != bound) {
  ------------------
  |  Branch (203:16): [True: 1.29k, False: 78]
  ------------------
  204|  1.29k|            ++i;
  205|  1.29k|        }
  206|     78|    }
_ZN3scn2v44impl25character_set_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5088|    186|    {
 5089|    186|        auto it = read_source_impl(range, {specs});
 5090|    186|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  986|    186|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 10, False: 176]
  |  |  ------------------
  ------------------
 5091|     10|            return unexpected(it.error());
 5092|     10|        }
 5093|       |
 5094|    176|        return read_string_impl(range, *it, value);
 5095|    186|    }
_ZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperE:
 5191|    558|    {
 5192|    558|        const bool is_inverted = helper.specs.charset_is_inverted;
 5193|    558|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5194|       |
 5195|    558|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3929|    558|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|    558|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 558]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 5196|       |
 5197|    558|        read_source_callback cb_wrapper{helper};
 5198|       |
 5199|    558|        if (accepts_nonascii) {
  ------------------
  |  Branch (5199:13): [True: 354, False: 204]
  ------------------
 5200|    354|            const auto cb = [&](char32_t cp) {
 5201|    354|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5202|    354|            };
 5203|       |
 5204|    354|            if (is_inverted) {
  ------------------
  |  Branch (5204:17): [True: 198, False: 156]
  ------------------
 5205|    198|                auto it = read_until_code_point(range, cb);
 5206|    198|                return check_nonempty(it, range);
 5207|    198|            }
 5208|    156|            auto it = read_while_code_point(range, cb);
 5209|    156|            return check_nonempty(it, range);
 5210|    354|        }
 5211|       |
 5212|    204|        const auto cb = [&](SourceCharT ch) {
 5213|    204|            return cb_wrapper.on_ascii_only(ch);
 5214|    204|        };
 5215|       |
 5216|    204|        if (is_inverted) {
  ------------------
  |  Branch (5216:13): [True: 108, False: 96]
  ------------------
 5217|    108|            auto it = read_until_code_unit(range, cb);
 5218|    108|            return check_nonempty(it, range);
 5219|    108|        }
 5220|     96|        auto it = read_while_code_unit(range, cb);
 5221|     96|        return check_nonempty(it, range);
 5222|    204|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|    354|        : m_fptr([](storage fn,
  743|    354|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    354|              cvref<T> obj = *get<T>(fn);
  745|    354|              if constexpr (std::is_void_v<R>) {
  746|    354|                  obj(static_cast<decltype(args)>(args)...);
  747|    354|              }
  748|    354|              else {
  749|    354|                  return obj(static_cast<decltype(args)>(args)...);
  750|    354|              }
  751|    354|          }),
  752|    354|          m_storage(std::addressof(f))
  753|    354|    {
  754|    354|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEDiE_clES15_Di:
  743|  4.59k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.59k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  4.59k|              else {
  749|  4.59k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.59k|              }
  751|  4.59k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|  4.59k|    {
  684|  4.59k|        if constexpr (std::is_const_v<T>) {
  685|  4.59k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  4.59k|    }
_ZZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlDiE_clEDi:
 5200|  4.59k|            const auto cb = [&](char32_t cp) {
 5201|  4.59k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5202|  4.59k|            };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPKSL_:
  665|    354|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    354|        {
  667|    354|        }
_ZN3scn2v44impl25character_set_reader_implIwE14check_nonemptyINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEEEEENS0_13scan_expectedIT_EERKSI_T0_:
 5227|    558|    {
 5228|    558|        if (it == range.begin()) {
  ------------------
  |  Branch (5228:13): [True: 30, False: 528]
  ------------------
 5229|     30|            return detail::unexpected_scan_error(
 5230|     30|                scan_error::invalid_scanned_value,
 5231|     30|                "No characters matched in [character set]");
 5232|     30|        }
 5233|       |
 5234|    528|        return it;
 5235|    558|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlwE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|    204|        : m_fptr([](storage fn,
  743|    204|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    204|              cvref<T> obj = *get<T>(fn);
  745|    204|              if constexpr (std::is_void_v<R>) {
  746|    204|                  obj(static_cast<decltype(args)>(args)...);
  747|    204|              }
  748|    204|              else {
  749|    204|                  return obj(static_cast<decltype(args)>(args)...);
  750|    204|              }
  751|    204|          }),
  752|    204|          m_storage(std::addressof(f))
  753|    204|    {
  754|    204|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlwE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES15_w:
  743|  2.05k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.05k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.05k|              else {
  749|  2.05k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.05k|              }
  751|  2.05k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  2.05k|    {
  684|  2.05k|        if constexpr (std::is_const_v<T>) {
  685|  2.05k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.05k|    }
_ZZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlwE_clEw:
 5212|  2.05k|        const auto cb = [&](SourceCharT ch) {
 5213|  2.05k|            return cb_wrapper.on_ascii_only(ch);
 5214|  2.05k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlwE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPKSL_:
  665|    204|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    204|        {
  667|    204|        }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4794|    176|{
 4795|    176|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    176|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    176|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 4, False: 172]
  ------------------
 4799|      4|        return detail::unexpected_scan_error(
 4800|      4|            scan_error::invalid_scanned_value,
 4801|      4|            "Invalid encoding in scanned string");
 4802|      4|    }
 4803|       |
 4804|    172|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3929|    172|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|    172|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 172]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 4805|    172|    return SCN_MOVE(result);
  ------------------
  |  | 1055|    172|    static_cast<    \
  |  | 1056|    172|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    172|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5313|    684|    {
 5314|    684|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|    684|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|    684|        return read_impl(range, specs, value);
 5316|    684|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5331|    684|    {
 5332|    684|        SCN_CLANG_PUSH
 5333|    684|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|    684|        switch (m_type) {
 5336|    406|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 406, False: 278]
  ------------------
 5337|    406|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|     38|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 38, False: 646]
  ------------------
 5340|     38|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|     38|                                                                   value);
 5342|       |
 5343|      0|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 0, False: 684]
  ------------------
 5344|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|    240|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 240, False: 444]
  ------------------
 5347|    240|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|    240|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|      0|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 0, False: 684]
  ------------------
 5352|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|      0|                    range, specs.charset_string<SourceCharT>(),
 5354|      0|                    specs.regexp_flags, value);
 5355|       |
 5356|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 0, False: 684]
  ------------------
 5357|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|      0|                    range,
 5359|      0|                    get_unescaped_regex_pattern(
 5360|      0|                        specs.charset_string<SourceCharT>()),
 5361|      0|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 684]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1051|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|    684|                SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|    684|        }
 5368|       |
 5369|    684|        SCN_CLANG_POP
 5370|    684|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4860|  7.59k|    {
 4861|  7.59k|        return read_string_impl(range, read_until_classic_space(range), value);
 4862|  7.59k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4794|  7.63k|{
 4795|  7.63k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|  7.63k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|  7.63k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 268, False: 7.36k]
  ------------------
 4799|    268|        return detail::unexpected_scan_error(
 4800|    268|            scan_error::invalid_scanned_value,
 4801|    268|            "Invalid encoding in scanned string");
 4802|    268|    }
 4803|       |
 4804|  7.36k|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3929|  7.36k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  7.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 7.36k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 4805|  7.36k|    return SCN_MOVE(result);
  ------------------
  |  | 1055|  7.36k|    static_cast<    \
  |  | 1056|  7.36k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|  7.36k|}
_ZN3scn2v44impl22transcode_if_necessaryIwcEENS0_13scan_expectedIvEENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 3127|  7.58k|{
 3128|       |    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3129|       |        dest.assign(source.view());
 3130|       |    }
 3131|  7.58k|    else {
 3132|  7.58k|        return transcode_impl(source.view(), dest);
 3133|  7.58k|    }
 3134|       |
 3135|      0|    return {};
 3136|  7.58k|}
_ZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2186|  22.7k|{
 2187|       |    if constexpr (ranges::contiguous_range<Range> &&
 2188|       |                  ranges::sized_range<Range> &&
 2189|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2190|       |        auto buf = make_contiguous_buffer(range);
 2191|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2192|       |        return ranges::next(range.begin(),
 2193|       |                            ranges::distance(buf.view().begin(), it));
 2194|       |    }
 2195|  22.7k|    else {
 2196|  22.7k|        auto it = range.begin();
 2197|       |
 2198|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|       |            auto seg = get_contiguous_beginning(range);
 2200|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2201|       |                seg_it != seg.end()) {
 2202|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2203|       |            }
 2204|       |            ranges::advance(it, seg.size());
 2205|       |        }
 2206|       |
 2207|  22.7k|        return read_until_code_point(
 2208|  22.7k|            ranges::subrange{it, range.end()},
 2209|  22.7k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2210|  22.7k|    }
 2211|  22.7k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|  22.7k|        : m_fptr([](storage fn,
  743|  22.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  22.7k|              cvref<T> obj = *get<T>(fn);
  745|  22.7k|              if constexpr (std::is_void_v<R>) {
  746|  22.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  22.7k|              }
  748|  22.7k|              else {
  749|  22.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  22.7k|              }
  751|  22.7k|          }),
  752|  22.7k|          m_storage(std::addressof(f))
  753|  22.7k|    {
  754|  22.7k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|   231k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   231k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   231k|              else {
  749|   231k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   231k|              }
  751|   231k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   231k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   231k|        else if constexpr (std::is_object_v<T>) {
  688|   231k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   231k|    }
_ZZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2209|   231k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|  22.7k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  22.7k|        {
  662|  22.7k|        }
_ZN3scn2v44impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4881|     38|    {
 4882|     38|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4882:13): [True: 38, False: 0]
  ------------------
 4883|     38|            return read_string_impl(
 4884|     38|                range,
 4885|     38|                read_until_code_unit(
 4886|     38|                    range,
 4887|     38|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4888|     38|                        SourceCharT ch) { return ch == until; }),
 4889|     38|                value);
 4890|     38|        }
 4891|      0|        return read_string_impl(
 4892|      0|            range,
 4893|      0|            read_until_code_units(
 4894|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4895|      0|            value);
 4896|     38|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     38|        : m_fptr([](storage fn,
  743|     38|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     38|              cvref<T> obj = *get<T>(fn);
  745|     38|              if constexpr (std::is_void_v<R>) {
  746|     38|                  obj(static_cast<decltype(args)>(args)...);
  747|     38|              }
  748|     38|              else {
  749|     38|                  return obj(static_cast<decltype(args)>(args)...);
  750|     38|              }
  751|     38|          }),
  752|     38|          m_storage(std::addressof(f))
  753|     38|    {
  754|     38|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES1B_w:
  743|    488|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    488|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    488|              else {
  749|    488|                  return obj(static_cast<decltype(args)>(args)...);
  750|    488|              }
  751|    488|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    488|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    488|        else if constexpr (std::is_object_v<T>) {
  688|    488|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    488|    }
_ZZN3scn2v44impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlwE_clEw:
 4888|    488|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     38|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     38|        {
  662|     38|        }
_ZN3scn2v44impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5088|    240|    {
 5089|    240|        auto it = read_source_impl(range, {specs});
 5090|    240|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  986|    240|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 18, False: 222]
  |  |  ------------------
  ------------------
 5091|     18|            return unexpected(it.error());
 5092|     18|        }
 5093|       |
 5094|    222|        return read_string_impl(range, *it, value);
 5095|    240|    }
_ZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5191|    720|    {
 5192|    720|        const bool is_inverted = helper.specs.charset_is_inverted;
 5193|    720|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5194|       |
 5195|    720|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3929|    720|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|    720|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 720]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 5196|       |
 5197|    720|        read_source_callback cb_wrapper{helper};
 5198|       |
 5199|    720|        if (accepts_nonascii) {
  ------------------
  |  Branch (5199:13): [True: 540, False: 180]
  ------------------
 5200|    540|            const auto cb = [&](char32_t cp) {
 5201|    540|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5202|    540|            };
 5203|       |
 5204|    540|            if (is_inverted) {
  ------------------
  |  Branch (5204:17): [True: 342, False: 198]
  ------------------
 5205|    342|                auto it = read_until_code_point(range, cb);
 5206|    342|                return check_nonempty(it, range);
 5207|    342|            }
 5208|    198|            auto it = read_while_code_point(range, cb);
 5209|    198|            return check_nonempty(it, range);
 5210|    540|        }
 5211|       |
 5212|    180|        const auto cb = [&](SourceCharT ch) {
 5213|    180|            return cb_wrapper.on_ascii_only(ch);
 5214|    180|        };
 5215|       |
 5216|    180|        if (is_inverted) {
  ------------------
  |  Branch (5216:13): [True: 78, False: 102]
  ------------------
 5217|     78|            auto it = read_until_code_unit(range, cb);
 5218|     78|            return check_nonempty(it, range);
 5219|     78|        }
 5220|    102|        auto it = read_while_code_unit(range, cb);
 5221|    102|        return check_nonempty(it, range);
 5222|    180|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|    540|        : m_fptr([](storage fn,
  743|    540|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    540|              cvref<T> obj = *get<T>(fn);
  745|    540|              if constexpr (std::is_void_v<R>) {
  746|    540|                  obj(static_cast<decltype(args)>(args)...);
  747|    540|              }
  748|    540|              else {
  749|    540|                  return obj(static_cast<decltype(args)>(args)...);
  750|    540|              }
  751|    540|          }),
  752|    540|          m_storage(std::addressof(f))
  753|    540|    {
  754|    540|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clES13_Di:
  743|  6.60k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.60k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  6.60k|              else {
  749|  6.60k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.60k|              }
  751|  6.60k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|  6.60k|    {
  684|  6.60k|        if constexpr (std::is_const_v<T>) {
  685|  6.60k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  6.60k|    }
_ZZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlDiE_clEDi:
 5200|  6.60k|            const auto cb = [&](char32_t cp) {
 5201|  6.60k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5202|  6.60k|            };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|    540|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    540|        {
  667|    540|        }
_ZN3scn2v44impl25character_set_reader_implIwE14check_nonemptyIPKwNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5227|    720|    {
 5228|    720|        if (it == range.begin()) {
  ------------------
  |  Branch (5228:13): [True: 54, False: 666]
  ------------------
 5229|     54|            return detail::unexpected_scan_error(
 5230|     54|                scan_error::invalid_scanned_value,
 5231|     54|                "No characters matched in [character set]");
 5232|     54|        }
 5233|       |
 5234|    666|        return it;
 5235|    720|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|    180|        : m_fptr([](storage fn,
  743|    180|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    180|              cvref<T> obj = *get<T>(fn);
  745|    180|              if constexpr (std::is_void_v<R>) {
  746|    180|                  obj(static_cast<decltype(args)>(args)...);
  747|    180|              }
  748|    180|              else {
  749|    180|                  return obj(static_cast<decltype(args)>(args)...);
  750|    180|              }
  751|    180|          }),
  752|    180|          m_storage(std::addressof(f))
  753|    180|    {
  754|    180|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|  2.07k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.07k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.07k|              else {
  749|  2.07k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.07k|              }
  751|  2.07k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  2.07k|    {
  684|  2.07k|        if constexpr (std::is_const_v<T>) {
  685|  2.07k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.07k|    }
_ZZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlwE_clEw:
 5212|  2.07k|        const auto cb = [&](SourceCharT ch) {
 5213|  2.07k|            return cb_wrapper.on_ascii_only(ch);
 5214|  2.07k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|    180|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    180|        {
  667|    180|        }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4794|    222|{
 4795|    222|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    222|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    222|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 6, False: 216]
  ------------------
 4799|      6|        return detail::unexpected_scan_error(
 4800|      6|            scan_error::invalid_scanned_value,
 4801|      6|            "Invalid encoding in scanned string");
 4802|      6|    }
 4803|       |
 4804|    216|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3929|    216|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|    216|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 216]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 4805|    216|    return SCN_MOVE(result);
  ------------------
  |  | 1055|    216|    static_cast<    \
  |  | 1056|    216|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    216|}
_ZN3scn2v44impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEwEEDav:
 5848|  8.55k|{
 5849|       |    if constexpr (std::is_same_v<T, bool>) {
 5850|       |        return reader_impl_for_bool<CharT>{};
 5851|       |    }
 5852|       |    else if constexpr (std::is_same_v<T, char>) {
 5853|       |        return reader_impl_for_char<CharT>{};
 5854|       |    }
 5855|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5856|       |        return reader_impl_for_wchar<CharT>{};
 5857|       |    }
 5858|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5859|       |        return reader_impl_for_code_point<CharT>{};
 5860|       |    }
 5861|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5862|       |                       std::is_same_v<T, std::wstring_view>) {
 5863|       |        return reader_impl_for_string<CharT>{};
 5864|       |    }
 5865|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5866|  8.55k|                       std::is_same_v<T, std::wstring>) {
 5867|  8.55k|        return reader_impl_for_string<CharT>{};
 5868|       |    }
 5869|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5870|       |                       std::is_same_v<T, wregex_matches>) {
 5871|       |        return reader_impl_for_regex_matches<CharT>{};
 5872|       |    }
 5873|       |    else if constexpr (std::is_same_v<T, void*>) {
 5874|       |        return reader_impl_for_voidptr<CharT>{};
 5875|       |    }
 5876|       |    else if constexpr (std::is_floating_point_v<T>) {
 5877|       |        return reader_impl_for_float<CharT>{};
 5878|       |    }
 5879|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5880|       |                       !std::is_same_v<T, wchar_t> &&
 5881|       |                       !std::is_same_v<T, char32_t> &&
 5882|       |                       !std::is_same_v<T, bool>) {
 5883|       |        return reader_impl_for_int<CharT>{};
 5884|       |    }
 5885|       |    else {
 5886|       |        return reader_impl_for_monostate<CharT>{};
 5887|       |    }
 5888|  8.55k|}
_ZN3scn2v44impl22transcode_if_necessaryIwwEENS0_13scan_expectedIvEEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS9_11char_traitsISB_EENS9_9allocatorISB_EEEE:
 3107|    300|{
 3108|    300|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3109|    300|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (3109:13): [True: 300, False: 0]
  ------------------
 3110|    300|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  | 1055|    300|    static_cast<    \
  |  | 1056|    300|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3111|    300|        }
 3112|      0|        else {
 3113|      0|            dest.assign(source.view());
 3114|      0|        }
 3115|       |    }
 3116|       |    else {
 3117|       |        return transcode_impl(source.view(), dest);
 3118|       |    }
 3119|       |
 3120|    300|    return {};
 3121|    300|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5313|    428|    {
 5314|    428|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|    428|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|    428|        return read_impl(range, specs, value);
 5316|    428|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5331|    428|    {
 5332|    428|        SCN_CLANG_PUSH
 5333|    428|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|    428|        switch (m_type) {
 5336|    194|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 194, False: 234]
  ------------------
 5337|    194|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|     22|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 22, False: 406]
  ------------------
 5340|     22|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|     22|                                                                   value);
 5342|       |
 5343|     26|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 26, False: 402]
  ------------------
 5344|     26|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|    186|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 186, False: 242]
  ------------------
 5347|    186|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|    186|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|      0|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 0, False: 428]
  ------------------
 5352|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|      0|                    range, specs.charset_string<SourceCharT>(),
 5354|      0|                    specs.regexp_flags, value);
 5355|       |
 5356|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 0, False: 428]
  ------------------
 5357|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|      0|                    range,
 5359|      0|                    get_unescaped_regex_pattern(
 5360|      0|                        specs.charset_string<SourceCharT>()),
 5361|      0|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 428]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1051|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|    428|                SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|    428|        }
 5368|       |
 5369|    428|        SCN_CLANG_POP
 5370|    428|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4860|    194|    {
 4861|    194|        return read_string_impl(range, read_until_classic_space(range), value);
 4862|    194|    }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4794|    242|{
 4795|    242|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    242|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    242|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 114, False: 128]
  ------------------
 4799|    114|        return detail::unexpected_scan_error(
 4800|    114|            scan_error::invalid_scanned_value,
 4801|    114|            "Invalid encoding in scanned string");
 4802|    114|    }
 4803|       |
 4804|    128|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3929|    128|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|    128|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 128]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 4805|    128|    return SCN_MOVE(result);
  ------------------
  |  | 1055|    128|    static_cast<    \
  |  | 1056|    128|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    128|}
_ZN3scn2v44impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4881|     22|    {
 4882|     22|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4882:13): [True: 22, False: 0]
  ------------------
 4883|     22|            return read_string_impl(
 4884|     22|                range,
 4885|     22|                read_until_code_unit(
 4886|     22|                    range,
 4887|     22|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4888|     22|                        SourceCharT ch) { return ch == until; }),
 4889|     22|                value);
 4890|     22|        }
 4891|      0|        return read_string_impl(
 4892|      0|            range,
 4893|      0|            read_until_code_units(
 4894|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4895|      0|            value);
 4896|     22|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|     22|        : m_fptr([](storage fn,
  743|     22|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     22|              cvref<T> obj = *get<T>(fn);
  745|     22|              if constexpr (std::is_void_v<R>) {
  746|     22|                  obj(static_cast<decltype(args)>(args)...);
  747|     22|              }
  748|     22|              else {
  749|     22|                  return obj(static_cast<decltype(args)>(args)...);
  750|     22|              }
  751|     22|          }),
  752|     22|          m_storage(std::addressof(f))
  753|     22|    {
  754|     22|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES1D_w:
  743|    382|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    382|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    382|              else {
  749|    382|                  return obj(static_cast<decltype(args)>(args)...);
  750|    382|              }
  751|    382|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlwE_EEDaNS3_7storageE:
  683|    382|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    382|        else if constexpr (std::is_object_v<T>) {
  688|    382|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    382|    }
_ZZN3scn2v44impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlwE_clEw:
 4888|    382|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     22|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     22|        {
  662|     22|        }
_ZN3scn2v44impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4987|     26|    {
 4988|     26|        return read_impl(
 4989|     26|            range,
 4990|     26|            [&](const auto& rng) {
 4991|     26|                return read_string_impl(rng, read_all(rng), value);
 4992|     26|            },
 4993|     26|            detail::priority_tag<1>{});
 4994|     26|    }
_ZN3scn2v44impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 5014|     26|    {
 5015|     26|        return read_cb(range);
 5016|     26|    }
_ZZN3scn2v44impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4990|     26|            [&](const auto& rng) {
 4991|     26|                return read_string_impl(rng, read_all(rng), value);
 4992|     26|            },
_ZN3scn2v44impl25character_set_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5088|    186|    {
 5089|    186|        auto it = read_source_impl(range, {specs});
 5090|    186|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  986|    186|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 10, False: 176]
  |  |  ------------------
  ------------------
 5091|     10|            return unexpected(it.error());
 5092|     10|        }
 5093|       |
 5094|    176|        return read_string_impl(range, *it, value);
 5095|    186|    }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4794|    176|{
 4795|    176|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    176|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    176|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 4, False: 172]
  ------------------
 4799|      4|        return detail::unexpected_scan_error(
 4800|      4|            scan_error::invalid_scanned_value,
 4801|      4|            "Invalid encoding in scanned string");
 4802|      4|    }
 4803|       |
 4804|    172|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3929|    172|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|    172|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 172]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 4805|    172|    return SCN_MOVE(result);
  ------------------
  |  | 1055|    172|    static_cast<    \
  |  | 1056|    172|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    172|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5313|    684|    {
 5314|    684|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|    684|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|    684|        return read_impl(range, specs, value);
 5316|    684|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5331|    684|    {
 5332|    684|        SCN_CLANG_PUSH
 5333|    684|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|    684|        switch (m_type) {
 5336|    406|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 406, False: 278]
  ------------------
 5337|    406|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|     38|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 38, False: 646]
  ------------------
 5340|     38|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|     38|                                                                   value);
 5342|       |
 5343|      0|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 0, False: 684]
  ------------------
 5344|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|    240|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 240, False: 444]
  ------------------
 5347|    240|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|    240|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|      0|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 0, False: 684]
  ------------------
 5352|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|      0|                    range, specs.charset_string<SourceCharT>(),
 5354|      0|                    specs.regexp_flags, value);
 5355|       |
 5356|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 0, False: 684]
  ------------------
 5357|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|      0|                    range,
 5359|      0|                    get_unescaped_regex_pattern(
 5360|      0|                        specs.charset_string<SourceCharT>()),
 5361|      0|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 684]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1051|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|    684|                SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|    684|        }
 5368|       |
 5369|    684|        SCN_CLANG_POP
 5370|    684|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4860|  7.59k|    {
 4861|  7.59k|        return read_string_impl(range, read_until_classic_space(range), value);
 4862|  7.59k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4794|  7.63k|{
 4795|  7.63k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|  7.63k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|  7.63k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 268, False: 7.36k]
  ------------------
 4799|    268|        return detail::unexpected_scan_error(
 4800|    268|            scan_error::invalid_scanned_value,
 4801|    268|            "Invalid encoding in scanned string");
 4802|    268|    }
 4803|       |
 4804|  7.36k|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3929|  7.36k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  7.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 7.36k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 4805|  7.36k|    return SCN_MOVE(result);
  ------------------
  |  | 1055|  7.36k|    static_cast<    \
  |  | 1056|  7.36k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|  7.36k|}
_ZN3scn2v44impl22transcode_if_necessaryIwwEENS0_13scan_expectedIvEENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 3127|  7.58k|{
 3128|  7.58k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3129|  7.58k|        dest.assign(source.view());
 3130|       |    }
 3131|       |    else {
 3132|       |        return transcode_impl(source.view(), dest);
 3133|       |    }
 3134|       |
 3135|  7.58k|    return {};
 3136|  7.58k|}
_ZN3scn2v44impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4881|     38|    {
 4882|     38|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4882:13): [True: 38, False: 0]
  ------------------
 4883|     38|            return read_string_impl(
 4884|     38|                range,
 4885|     38|                read_until_code_unit(
 4886|     38|                    range,
 4887|     38|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4888|     38|                        SourceCharT ch) { return ch == until; }),
 4889|     38|                value);
 4890|     38|        }
 4891|      0|        return read_string_impl(
 4892|      0|            range,
 4893|      0|            read_until_code_units(
 4894|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4895|      0|            value);
 4896|     38|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     38|        : m_fptr([](storage fn,
  743|     38|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     38|              cvref<T> obj = *get<T>(fn);
  745|     38|              if constexpr (std::is_void_v<R>) {
  746|     38|                  obj(static_cast<decltype(args)>(args)...);
  747|     38|              }
  748|     38|              else {
  749|     38|                  return obj(static_cast<decltype(args)>(args)...);
  750|     38|              }
  751|     38|          }),
  752|     38|          m_storage(std::addressof(f))
  753|     38|    {
  754|     38|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES1B_w:
  743|    488|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    488|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    488|              else {
  749|    488|                  return obj(static_cast<decltype(args)>(args)...);
  750|    488|              }
  751|    488|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    488|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    488|        else if constexpr (std::is_object_v<T>) {
  688|    488|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    488|    }
_ZZN3scn2v44impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlwE_clEw:
 4888|    488|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     38|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     38|        {
  662|     38|        }
_ZN3scn2v44impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5088|    240|    {
 5089|    240|        auto it = read_source_impl(range, {specs});
 5090|    240|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  986|    240|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 18, False: 222]
  |  |  ------------------
  ------------------
 5091|     18|            return unexpected(it.error());
 5092|     18|        }
 5093|       |
 5094|    222|        return read_string_impl(range, *it, value);
 5095|    240|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4794|    222|{
 4795|    222|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    222|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    222|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 6, False: 216]
  ------------------
 4799|      6|        return detail::unexpected_scan_error(
 4800|      6|            scan_error::invalid_scanned_value,
 4801|      6|            "Invalid encoding in scanned string");
 4802|      6|    }
 4803|       |
 4804|    216|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3929|    216|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|    216|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 216]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 4805|    216|    return SCN_MOVE(result);
  ------------------
  |  | 1055|    216|    static_cast<    \
  |  | 1056|    216|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    216|}
_ZN3scn2v44impl11make_readerINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEEDav:
 5848|  8.55k|{
 5849|       |    if constexpr (std::is_same_v<T, bool>) {
 5850|       |        return reader_impl_for_bool<CharT>{};
 5851|       |    }
 5852|       |    else if constexpr (std::is_same_v<T, char>) {
 5853|       |        return reader_impl_for_char<CharT>{};
 5854|       |    }
 5855|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5856|       |        return reader_impl_for_wchar<CharT>{};
 5857|       |    }
 5858|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5859|       |        return reader_impl_for_code_point<CharT>{};
 5860|       |    }
 5861|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5862|  8.55k|                       std::is_same_v<T, std::wstring_view>) {
 5863|  8.55k|        return reader_impl_for_string<CharT>{};
 5864|       |    }
 5865|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5866|       |                       std::is_same_v<T, std::wstring>) {
 5867|       |        return reader_impl_for_string<CharT>{};
 5868|       |    }
 5869|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5870|       |                       std::is_same_v<T, wregex_matches>) {
 5871|       |        return reader_impl_for_regex_matches<CharT>{};
 5872|       |    }
 5873|       |    else if constexpr (std::is_same_v<T, void*>) {
 5874|       |        return reader_impl_for_voidptr<CharT>{};
 5875|       |    }
 5876|       |    else if constexpr (std::is_floating_point_v<T>) {
 5877|       |        return reader_impl_for_float<CharT>{};
 5878|       |    }
 5879|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5880|       |                       !std::is_same_v<T, wchar_t> &&
 5881|       |                       !std::is_same_v<T, char32_t> &&
 5882|       |                       !std::is_same_v<T, bool>) {
 5883|       |        return reader_impl_for_int<CharT>{};
 5884|       |    }
 5885|       |    else {
 5886|       |        return reader_impl_for_monostate<CharT>{};
 5887|       |    }
 5888|  8.55k|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5313|    428|    {
 5314|    428|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|    428|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|    428|        return read_impl(range, specs, value);
 5316|    428|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5331|    428|    {
 5332|    428|        SCN_CLANG_PUSH
 5333|    428|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|    428|        switch (m_type) {
 5336|    194|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 194, False: 234]
  ------------------
 5337|    194|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|     22|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 22, False: 406]
  ------------------
 5340|     22|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|     22|                                                                   value);
 5342|       |
 5343|     26|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 26, False: 402]
  ------------------
 5344|     26|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|    186|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 186, False: 242]
  ------------------
 5347|    186|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|    186|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|      0|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 0, False: 428]
  ------------------
 5352|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|      0|                    range, specs.charset_string<SourceCharT>(),
 5354|      0|                    specs.regexp_flags, value);
 5355|       |
 5356|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 0, False: 428]
  ------------------
 5357|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|      0|                    range,
 5359|      0|                    get_unescaped_regex_pattern(
 5360|      0|                        specs.charset_string<SourceCharT>()),
 5361|      0|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 428]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1051|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|    428|                SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|    428|        }
 5368|       |
 5369|    428|        SCN_CLANG_POP
 5370|    428|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4867|    194|    {
 4868|    194|        return read_string_view_impl(range, read_until_classic_space(range),
 4869|    194|                                     value);
 4870|    194|    }
_ZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEE:
 4813|    242|{
 4814|    242|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4815|       |
 4816|    242|    auto src = [&]() {
 4817|    242|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|    242|            return make_contiguous_buffer(
 4819|    242|                ranges::subrange{range.begin().base(), result.base()});
 4820|    242|        }
 4821|    242|        else {
 4822|    242|            return make_contiguous_buffer(
 4823|    242|                ranges::subrange{range.begin(), result});
 4824|    242|        }
 4825|    242|    }();
 4826|    242|    using src_type = decltype(src);
 4827|       |
 4828|    242|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4828:9): [Folded - Ignored]
  ------------------
 4829|      0|        return detail::unexpected_scan_error(
 4830|      0|            scan_error::invalid_format_string,
 4831|      0|            "Cannot read a string_view from this source range (not "
 4832|      0|            "contiguous)");
 4833|      0|    }
 4834|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4835|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4836|       |                                             "Cannot read a string_view from "
 4837|       |                                             "this source range (would require "
 4838|       |                                             "transcoding)");
 4839|       |    }
 4840|    242|    else {
 4841|    242|        const auto view = src.view();
 4842|    242|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4843|       |
 4844|    242|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4844:13): [True: 114, False: 128]
  ------------------
 4845|    114|            return detail::unexpected_scan_error(
 4846|    114|                scan_error::invalid_scanned_value,
 4847|    114|                "Invalid encoding in scanned string_view");
 4848|    114|        }
 4849|       |
 4850|    128|        return SCN_MOVE(result);
  ------------------
  |  | 1055|    128|    static_cast<    \
  |  | 1056|    128|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4851|    242|    }
 4852|    242|}
_ZZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEEENKUlvE_clEv:
 4816|    242|    auto src = [&]() {
 4817|    242|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|    242|            return make_contiguous_buffer(
 4819|    242|                ranges::subrange{range.begin().base(), result.base()});
 4820|       |        }
 4821|       |        else {
 4822|       |            return make_contiguous_buffer(
 4823|       |                ranges::subrange{range.begin(), result});
 4824|       |        }
 4825|    242|    }();
_ZN3scn2v44impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 4903|     22|    {
 4904|     22|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4904:13): [True: 22, False: 0]
  ------------------
 4905|     22|            return read_string_view_impl(
 4906|     22|                range,
 4907|     22|                read_until_code_unit(
 4908|     22|                    range,
 4909|     22|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4910|     22|                        SourceCharT ch) { return ch == until; }),
 4911|     22|                value);
 4912|     22|        }
 4913|      0|        return read_string_view_impl(
 4914|      0|            range,
 4915|      0|            read_until_code_units(
 4916|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4917|      0|            value);
 4918|     22|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlwE_S11_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|     22|        : m_fptr([](storage fn,
  743|     22|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     22|              cvref<T> obj = *get<T>(fn);
  745|     22|              if constexpr (std::is_void_v<R>) {
  746|     22|                  obj(static_cast<decltype(args)>(args)...);
  747|     22|              }
  748|     22|              else {
  749|     22|                  return obj(static_cast<decltype(args)>(args)...);
  750|     22|              }
  751|     22|          }),
  752|     22|          m_storage(std::addressof(f))
  753|     22|    {
  754|     22|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlwE_S11_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES1B_w:
  743|    382|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    382|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    382|              else {
  749|    382|                  return obj(static_cast<decltype(args)>(args)...);
  750|    382|              }
  751|    382|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_17basic_string_viewIT0_NSI_11char_traitsISV_EEEEEUlwE_EEDaNS3_7storageE:
  683|    382|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    382|        else if constexpr (std::is_object_v<T>) {
  688|    382|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    382|    }
_ZZN3scn2v44impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEEENKUlwE_clEw:
 4910|    382|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlwE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     22|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     22|        {
  662|     22|        }
_ZN3scn2v44impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4999|     26|    {
 5000|     26|        return read_impl(
 5001|     26|            range,
 5002|     26|            [&](const auto& rng) {
 5003|     26|                return read_string_view_impl(rng, read_all(rng), value);
 5004|     26|            },
 5005|     26|            detail::priority_tag<1>{});
 5006|     26|    }
_ZN3scn2v44impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_17basic_string_viewIT0_NSG_11char_traitsISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSX_OSP_NS0_6detail12priority_tagILm1EEE:
 5014|     26|    {
 5015|     26|        return read_cb(range);
 5016|     26|    }
_ZZN3scn2v44impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEEENKUlRKSH_E_clISD_EEDaSU_:
 5002|     26|            [&](const auto& rng) {
 5003|     26|                return read_string_view_impl(rng, read_all(rng), value);
 5004|     26|            },
_ZN3scn2v44impl25character_set_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 5102|    186|    {
 5103|    186|        auto it = read_source_impl(range, {specs});
 5104|    186|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  986|    186|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 10, False: 176]
  |  |  ------------------
  ------------------
 5105|     10|            return unexpected(it.error());
 5106|     10|        }
 5107|       |
 5108|    176|        return read_string_view_impl(range, *it, value);
 5109|    186|    }
_ZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEE:
 4813|    176|{
 4814|    176|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4815|       |
 4816|    176|    auto src = [&]() {
 4817|    176|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|    176|            return make_contiguous_buffer(
 4819|    176|                ranges::subrange{range.begin().base(), result.base()});
 4820|    176|        }
 4821|    176|        else {
 4822|    176|            return make_contiguous_buffer(
 4823|    176|                ranges::subrange{range.begin(), result});
 4824|    176|        }
 4825|    176|    }();
 4826|    176|    using src_type = decltype(src);
 4827|       |
 4828|    176|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4828:9): [Folded - Ignored]
  ------------------
 4829|      0|        return detail::unexpected_scan_error(
 4830|      0|            scan_error::invalid_format_string,
 4831|      0|            "Cannot read a string_view from this source range (not "
 4832|      0|            "contiguous)");
 4833|      0|    }
 4834|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4835|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4836|       |                                             "Cannot read a string_view from "
 4837|       |                                             "this source range (would require "
 4838|       |                                             "transcoding)");
 4839|       |    }
 4840|    176|    else {
 4841|    176|        const auto view = src.view();
 4842|    176|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4843|       |
 4844|    176|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4844:13): [True: 4, False: 172]
  ------------------
 4845|      4|            return detail::unexpected_scan_error(
 4846|      4|                scan_error::invalid_scanned_value,
 4847|      4|                "Invalid encoding in scanned string_view");
 4848|      4|        }
 4849|       |
 4850|    172|        return SCN_MOVE(result);
  ------------------
  |  | 1055|    172|    static_cast<    \
  |  | 1056|    172|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4851|    176|    }
 4852|    176|}
_ZZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEEENKUlvE_clEv:
 4816|    176|    auto src = [&]() {
 4817|    176|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|    176|            return make_contiguous_buffer(
 4819|    176|                ranges::subrange{range.begin().base(), result.base()});
 4820|       |        }
 4821|       |        else {
 4822|       |            return make_contiguous_buffer(
 4823|       |                ranges::subrange{range.begin(), result});
 4824|       |        }
 4825|    176|    }();
_ZN3scn2v44impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5313|    684|    {
 5314|    684|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|    684|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|    684|        return read_impl(range, specs, value);
 5316|    684|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5331|    684|    {
 5332|    684|        SCN_CLANG_PUSH
 5333|    684|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|    684|        switch (m_type) {
 5336|    406|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 406, False: 278]
  ------------------
 5337|    406|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|     38|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 38, False: 646]
  ------------------
 5340|     38|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|     38|                                                                   value);
 5342|       |
 5343|      0|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 0, False: 684]
  ------------------
 5344|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|    240|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 240, False: 444]
  ------------------
 5347|    240|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|    240|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|      0|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 0, False: 684]
  ------------------
 5352|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|      0|                    range, specs.charset_string<SourceCharT>(),
 5354|      0|                    specs.regexp_flags, value);
 5355|       |
 5356|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 0, False: 684]
  ------------------
 5357|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|      0|                    range,
 5359|      0|                    get_unescaped_regex_pattern(
 5360|      0|                        specs.charset_string<SourceCharT>()),
 5361|      0|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 684]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1051|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|    684|                SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|    684|        }
 5368|       |
 5369|    684|        SCN_CLANG_POP
 5370|    684|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4867|  7.59k|    {
 4868|  7.59k|        return read_string_view_impl(range, read_until_classic_space(range),
 4869|  7.59k|                                     value);
 4870|  7.59k|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4813|  7.63k|{
 4814|  7.63k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4815|       |
 4816|  7.63k|    auto src = [&]() {
 4817|  7.63k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|  7.63k|            return make_contiguous_buffer(
 4819|  7.63k|                ranges::subrange{range.begin().base(), result.base()});
 4820|  7.63k|        }
 4821|  7.63k|        else {
 4822|  7.63k|            return make_contiguous_buffer(
 4823|  7.63k|                ranges::subrange{range.begin(), result});
 4824|  7.63k|        }
 4825|  7.63k|    }();
 4826|  7.63k|    using src_type = decltype(src);
 4827|       |
 4828|  7.63k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4828:9): [Folded - Ignored]
  ------------------
 4829|      0|        return detail::unexpected_scan_error(
 4830|      0|            scan_error::invalid_format_string,
 4831|      0|            "Cannot read a string_view from this source range (not "
 4832|      0|            "contiguous)");
 4833|      0|    }
 4834|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4835|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4836|       |                                             "Cannot read a string_view from "
 4837|       |                                             "this source range (would require "
 4838|       |                                             "transcoding)");
 4839|       |    }
 4840|  7.63k|    else {
 4841|  7.63k|        const auto view = src.view();
 4842|  7.63k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4843|       |
 4844|  7.63k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4844:13): [True: 268, False: 7.36k]
  ------------------
 4845|    268|            return detail::unexpected_scan_error(
 4846|    268|                scan_error::invalid_scanned_value,
 4847|    268|                "Invalid encoding in scanned string_view");
 4848|    268|        }
 4849|       |
 4850|  7.36k|        return SCN_MOVE(result);
  ------------------
  |  | 1055|  7.36k|    static_cast<    \
  |  | 1056|  7.36k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4851|  7.63k|    }
 4852|  7.63k|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4816|  7.63k|    auto src = [&]() {
 4817|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|       |            return make_contiguous_buffer(
 4819|       |                ranges::subrange{range.begin().base(), result.base()});
 4820|       |        }
 4821|  7.63k|        else {
 4822|  7.63k|            return make_contiguous_buffer(
 4823|  7.63k|                ranges::subrange{range.begin(), result});
 4824|  7.63k|        }
 4825|  7.63k|    }();
_ZN3scn2v44impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 4903|     38|    {
 4904|     38|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4904:13): [True: 38, False: 0]
  ------------------
 4905|     38|            return read_string_view_impl(
 4906|     38|                range,
 4907|     38|                read_until_code_unit(
 4908|     38|                    range,
 4909|     38|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4910|     38|                        SourceCharT ch) { return ch == until; }),
 4911|     38|                value);
 4912|     38|        }
 4913|      0|        return read_string_view_impl(
 4914|      0|            range,
 4915|      0|            read_until_code_units(
 4916|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4917|      0|            value);
 4918|     38|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_SZ_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     38|        : m_fptr([](storage fn,
  743|     38|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     38|              cvref<T> obj = *get<T>(fn);
  745|     38|              if constexpr (std::is_void_v<R>) {
  746|     38|                  obj(static_cast<decltype(args)>(args)...);
  747|     38|              }
  748|     38|              else {
  749|     38|                  return obj(static_cast<decltype(args)>(args)...);
  750|     38|              }
  751|     38|          }),
  752|     38|          m_storage(std::addressof(f))
  753|     38|    {
  754|     38|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_SZ_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES19_w:
  743|    488|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    488|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    488|              else {
  749|    488|                  return obj(static_cast<decltype(args)>(args)...);
  750|    488|              }
  751|    488|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_17basic_string_viewIT0_NSG_11char_traitsIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    488|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    488|        else if constexpr (std::is_object_v<T>) {
  688|    488|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    488|    }
_ZZN3scn2v44impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEEENKUlwE_clEw:
 4910|    488|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     38|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     38|        {
  662|     38|        }
_ZN3scn2v44impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5102|    240|    {
 5103|    240|        auto it = read_source_impl(range, {specs});
 5104|    240|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  986|    240|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 18, False: 222]
  |  |  ------------------
  ------------------
 5105|     18|            return unexpected(it.error());
 5106|     18|        }
 5107|       |
 5108|    222|        return read_string_view_impl(range, *it, value);
 5109|    240|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4813|    222|{
 4814|    222|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4815|       |
 4816|    222|    auto src = [&]() {
 4817|    222|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|    222|            return make_contiguous_buffer(
 4819|    222|                ranges::subrange{range.begin().base(), result.base()});
 4820|    222|        }
 4821|    222|        else {
 4822|    222|            return make_contiguous_buffer(
 4823|    222|                ranges::subrange{range.begin(), result});
 4824|    222|        }
 4825|    222|    }();
 4826|    222|    using src_type = decltype(src);
 4827|       |
 4828|    222|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4828:9): [Folded - Ignored]
  ------------------
 4829|      0|        return detail::unexpected_scan_error(
 4830|      0|            scan_error::invalid_format_string,
 4831|      0|            "Cannot read a string_view from this source range (not "
 4832|      0|            "contiguous)");
 4833|      0|    }
 4834|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4835|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4836|       |                                             "Cannot read a string_view from "
 4837|       |                                             "this source range (would require "
 4838|       |                                             "transcoding)");
 4839|       |    }
 4840|    222|    else {
 4841|    222|        const auto view = src.view();
 4842|    222|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4843|       |
 4844|    222|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4844:13): [True: 6, False: 216]
  ------------------
 4845|      6|            return detail::unexpected_scan_error(
 4846|      6|                scan_error::invalid_scanned_value,
 4847|      6|                "Invalid encoding in scanned string_view");
 4848|      6|        }
 4849|       |
 4850|    216|        return SCN_MOVE(result);
  ------------------
  |  | 1055|    216|    static_cast<    \
  |  | 1056|    216|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4851|    222|    }
 4852|    222|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4816|    222|    auto src = [&]() {
 4817|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|       |            return make_contiguous_buffer(
 4819|       |                ranges::subrange{range.begin().base(), result.base()});
 4820|       |        }
 4821|    222|        else {
 4822|    222|            return make_contiguous_buffer(
 4823|    222|                ranges::subrange{range.begin(), result});
 4824|    222|        }
 4825|    222|    }();
_ZN3scn2v44impl22make_contiguous_bufferIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 1781|  8.27k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|  8.27k|                  ranges::sized_range<Range>) {
 1785|  8.27k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  | 1057|  8.27k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|  8.27k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEETnPNS5_9enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISC_Esr6rangesE11sized_rangeISC_EEvE4typeELPv0EEEOSC_:
 1587|  8.27k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|  8.27k|    {
 1589|  8.27k|    }
_ZN3scn2v44impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2186|     50|{
 2187|       |    if constexpr (ranges::contiguous_range<Range> &&
 2188|       |                  ranges::sized_range<Range> &&
 2189|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2190|       |        auto buf = make_contiguous_buffer(range);
 2191|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2192|       |        return ranges::next(range.begin(),
 2193|       |                            ranges::distance(buf.view().begin(), it));
 2194|       |    }
 2195|     50|    else {
 2196|     50|        auto it = range.begin();
 2197|       |
 2198|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|       |            auto seg = get_contiguous_beginning(range);
 2200|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2201|       |                seg_it != seg.end()) {
 2202|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2203|       |            }
 2204|       |            ranges::advance(it, seg.size());
 2205|       |        }
 2206|       |
 2207|     50|        return read_until_code_point(
 2208|     50|            ranges::subrange{it, range.end()},
 2209|     50|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2210|     50|    }
 2211|     50|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_:
  742|     50|        : m_fptr([](storage fn,
  743|     50|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     50|              cvref<T> obj = *get<T>(fn);
  745|     50|              if constexpr (std::is_void_v<R>) {
  746|     50|                  obj(static_cast<decltype(args)>(args)...);
  747|     50|              }
  748|     50|              else {
  749|     50|                  return obj(static_cast<decltype(args)>(args)...);
  750|     50|              }
  751|     50|          }),
  752|     50|          m_storage(std::addressof(f))
  753|     50|    {
  754|     50|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESU_Di:
  743|  2.55k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.55k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.55k|              else {
  749|  2.55k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.55k|              }
  751|  2.55k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  683|  2.55k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  2.55k|        else if constexpr (std::is_object_v<T>) {
  688|  2.55k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.55k|    }
_ZZN3scn2v44impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2209|  2.55k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vISE_EEvE4typeELPv0EEEPSE_:
  660|     50|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     50|        {
  662|     50|        }
_ZN3scn2v44impl24contiguous_range_factoryIwE6assignINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEETnPNS5_9enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSD_:
 1675|     50|    {
 1676|     50|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1057|     50|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|     50|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEvOT_:
 1719|     50|    {
 1720|     50|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|     50|                                          std::basic_string<CharT>>) {
 1730|     50|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  | 1057|     50|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1731|     50|            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|     50|    }
_ZNK3scn2v44impl12float_readerIwE7setsignIdEET_S5_:
 4132|    100|    {
 4133|    100|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4133:13): [True: 0, False: 100]
  ------------------
 4134|      0|            return std::copysign(value, T{-1.0});
 4135|      0|        }
 4136|    100|        return std::copysign(value, T{1.0});
 4137|    100|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5834|  5.68k|{
 5835|  5.68k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  5.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 5.68k]
  |  |  ------------------
  ------------------
 5836|      0|        return unexpected(e);
 5837|      0|    }
 5838|       |
 5839|  5.68k|    if (!is_required) {
  ------------------
  |  Branch (5839:9): [True: 632, False: 5.05k]
  ------------------
 5840|    632|        return range.begin();
 5841|    632|    }
 5842|       |
 5843|  5.05k|    return skip_classic_whitespace(range);
 5844|  5.68k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIiEENS0_13scan_expectedIS9_EERT_:
 5910|    632|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|    632|                          basic_contiguous_scan_context<char_type>>) {
 5915|    632|            auto rd = make_reader<T, char_type>();
 5916|    632|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|    632|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|    632|    {
 5903|    632|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3939|    632|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    632|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    632|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    632|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 632]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|    632|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    632|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|    632|                        .transform_error(make_eof_scan_error));
 5905|    632|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|    632|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3578|    632|    {
 3579|    632|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|    632|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|    632|        return read_default_with_base(range, value, 10);
 3581|    632|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIjEENS0_13scan_expectedIS9_EERT_:
 5910|    632|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|    632|                          basic_contiguous_scan_context<char_type>>) {
 5915|    632|            auto rd = make_reader<T, char_type>();
 5916|    632|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|    632|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|    632|    {
 5903|    632|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3939|    632|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    632|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    632|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    632|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 632]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|    632|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    632|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|    632|                        .transform_error(make_eof_scan_error));
 5905|    632|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|    632|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3578|    632|    {
 3579|    632|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|    632|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|    632|        return read_default_with_base(range, value, 10);
 3581|    632|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIPvEENS0_13scan_expectedIS9_EERT_:
 5910|    632|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|    632|                          basic_contiguous_scan_context<char_type>>) {
 5915|    632|            auto rd = make_reader<T, char_type>();
 5916|    632|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|    632|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_23reader_impl_for_voidptrIcEESA_PvEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 5902|    632|    {
 5903|    632|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3939|    632|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    632|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    632|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    632|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 632]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|    632|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    632|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|    632|                        .transform_error(make_eof_scan_error));
 5905|    632|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|    632|    }
_ZNK3scn2v44impl23reader_impl_for_voidptrIcE19skip_ws_before_readEv:
 5786|  1.27k|    {
 5787|  1.27k|        return true;
 5788|  1.27k|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RPvNS0_6detail10locale_refE:
 5804|    900|    {
 5805|    900|        detail::format_specs specs{};
 5806|    900|        specs.type = detail::presentation_type::int_hex;
 5807|       |
 5808|    900|        std::uintptr_t intvalue{};
 5809|    900|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3939|    900|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    900|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    900|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    900|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 900, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    900|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    900|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    900|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    900|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    900|    }                                                  \
  |  |  |  | 3938|    900|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5810|      0|                                                                intvalue, loc));
 5811|      0|        value = reinterpret_cast<void*>(intvalue);
 5812|      0|        return result;
 5813|    900|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIbEENS0_13scan_expectedIS9_EERT_:
 5910|    632|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|    632|                          basic_contiguous_scan_context<char_type>>) {
 5915|    632|            auto rd = make_reader<T, char_type>();
 5916|    632|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|    632|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_20reader_impl_for_boolIcEESA_bEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|    632|    {
 5903|    632|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3939|    632|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    632|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    632|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    632|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 632]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|    632|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    632|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|    632|                        .transform_error(make_eof_scan_error));
 5905|    632|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|    632|    }
_ZNK3scn2v44impl11reader_baseINS1_20reader_impl_for_boolIcEEcE19skip_ws_before_readEv:
 3150|  1.61k|    {
 3151|  1.61k|        return true;
 3152|  1.61k|    }
_ZNK3scn2v44impl20reader_impl_for_boolIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNS0_6detail10locale_refE:
 5541|    632|    {
 5542|    632|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|    632|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5543|       |
 5544|    632|        return bool_reader<CharT>{}.read_classic(range, value);
 5545|    632|    }
_ZN3scn2v44impl16bool_reader_baseC2Ev:
 5385|  7.82k|    constexpr bool_reader_base() = default;
_ZNK3scn2v44impl16bool_reader_base12read_classicINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5391|  1.05k|    {
 5392|  1.05k|        scan_error err{scan_error::invalid_scanned_value,
 5393|  1.05k|                       "Failed to read boolean"};
 5394|       |
 5395|  1.05k|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5395:13): [True: 918, False: 138]
  ------------------
 5396|    918|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5396:22): [True: 0, False: 918]
  ------------------
 5397|      0|                return *r;
 5398|      0|            }
 5399|    918|            else {
 5400|    918|                err = r.error();
 5401|    918|            }
 5402|    918|        }
 5403|       |
 5404|  1.05k|        if (m_options & allow_text) {
  ------------------
  |  Branch (5404:13): [True: 1.03k, False: 22]
  ------------------
 5405|  1.03k|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5405:22): [True: 0, False: 1.03k]
  ------------------
 5406|      0|                return *r;
 5407|      0|            }
 5408|  1.03k|            else {
 5409|  1.03k|                err = r.error();
 5410|  1.03k|            }
 5411|  1.03k|        }
 5412|       |
 5413|  1.05k|        return unexpected(err);
 5414|  1.05k|    }
_ZNK3scn2v44impl16bool_reader_base12read_numericINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5420|    932|    {
 5421|    932|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5421:18): [True: 0, False: 932]
  ------------------
 5422|      0|            value = false;
 5423|      0|            return *r;
 5424|      0|        }
 5425|    932|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5425:18): [True: 0, False: 932]
  ------------------
 5426|      0|            value = true;
 5427|      0|            return *r;
 5428|      0|        }
 5429|       |
 5430|    932|        return detail::unexpected_scan_error(
 5431|    932|            scan_error::invalid_scanned_value,
 5432|    932|            "Failed to read numeric boolean value: No match");
 5433|    932|    }
_ZNK3scn2v44impl16bool_reader_base20read_textual_classicINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5438|  1.03k|    {
 5439|  1.03k|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5439:18): [True: 0, False: 1.03k]
  ------------------
 5440|      0|            value = true;
 5441|      0|            return *r;
 5442|      0|        }
 5443|  1.03k|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5443:18): [True: 0, False: 1.03k]
  ------------------
 5444|      0|            value = false;
 5445|      0|            return *r;
 5446|      0|        }
 5447|       |
 5448|  1.03k|        return detail::unexpected_scan_error(
 5449|  1.03k|            scan_error::invalid_scanned_value,
 5450|  1.03k|            "Failed to read textual boolean value: No match");
 5451|  1.03k|    }
_ZN3scn2v44impl28read_matching_string_classicINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2293|  2.06k|{
 2294|  2.06k|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3939|  2.06k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  2.06k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  2.06k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  2.06k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 100, False: 1.96k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    100|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    100|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    100|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    100|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    100|    }                                                  \
  |  |  |  | 3938|  2.06k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  1.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2295|  1.96k|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2296|  1.96k|                    .transform_error(make_eof_parse_error));
 2297|       |
 2298|  1.96k|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2299|  1.96k|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2300|  1.96k|        if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  986|  1.96k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.96k, False: 0]
  |  |  ------------------
  ------------------
 2301|  1.96k|            return unexpected(parse_error::error);
 2302|  1.96k|        }
 2303|      0|        return it;
 2304|       |    }
 2305|       |    else {
 2306|       |        auto range_it = range.begin();
 2307|       |        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
 2308|       |            if (SCN_UNLIKELY(*range_it !=
 2309|       |                             static_cast<detail::char_t<Range>>(str[i]))) {
 2310|       |                return unexpected(parse_error::error);
 2311|       |            }
 2312|       |        }
 2313|       |        return it;
 2314|       |    }
 2315|  1.96k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIcEENS0_13scan_expectedIS9_EERT_:
 5910|    632|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|    632|                          basic_contiguous_scan_context<char_type>>) {
 5915|    632|            auto rd = make_reader<T, char_type>();
 5916|    632|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|    632|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_20reader_impl_for_charIcEESA_cEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|    632|    {
 5903|    632|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3939|    632|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    632|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    632|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    632|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 632]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|    632|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    632|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|    632|                        .transform_error(make_eof_scan_error));
 5905|    632|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|    632|    }
_ZN3scn2v44impl12float_readerIcEC2Ev:
 3699|    632|    constexpr float_reader() = default;
_ZN3scn2v44impl17float_reader_baseC2Ev:
 3685|  7.82k|    constexpr float_reader_base() = default;
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIdEENS0_13scan_expectedIS9_EERT_:
 5910|    632|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|    632|                          basic_contiguous_scan_context<char_type>>) {
 5915|    632|            auto rd = make_reader<T, char_type>();
 5916|    632|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|    632|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|    632|    {
 5903|    632|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3939|    632|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    632|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    632|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    632|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 632]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|    632|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    632|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|    632|                        .transform_error(make_eof_scan_error));
 5905|    632|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|    632|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4184|    632|    {
 4185|    632|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|    632|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4186|       |
 4187|    632|        float_reader<CharT> rd{};
 4188|    632|        return read_impl<Range>(
 4189|    632|            range, rd,
 4190|    632|            [](float_reader<CharT>& r, auto&&... args) {
 4191|    632|                return r.read_source(SCN_FWD(args)...);
 4192|    632|            },
 4193|    632|            value);
 4194|    632|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|    632|        : m_fptr([](storage fn,
  743|    632|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    632|              cvref<T> obj = *get<T>(fn);
  745|    632|              if constexpr (std::is_void_v<R>) {
  746|    632|                  obj(static_cast<decltype(args)>(args)...);
  747|    632|              }
  748|    632|              else {
  749|    632|                  return obj(static_cast<decltype(args)>(args)...);
  750|    632|              }
  751|    632|          }),
  752|    632|          m_storage(std::addressof(f))
  753|    632|    {
  754|    632|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|    632|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    632|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    632|              else {
  749|    632|                  return obj(static_cast<decltype(args)>(args)...);
  750|    632|              }
  751|    632|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|    632|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    632|        else if constexpr (std::is_object_v<T>) {
  688|    632|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    632|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4190|    632|            [](float_reader<CharT>& r, auto&&... args) {
 4191|    632|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1057|    632|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4192|    632|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|    632|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    632|        {
  662|    632|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIS9_EERT_:
 5910|    632|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|    632|                          basic_contiguous_scan_context<char_type>>) {
 5915|    632|            auto rd = make_reader<T, char_type>();
 5916|    632|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|    632|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5902|    632|    {
 5903|    632|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3939|    632|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    632|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    632|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    632|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 632]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|    632|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    632|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|    632|                        .transform_error(make_eof_scan_error));
 5905|    632|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|    632|    }
_ZN3scn2v44impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5302|    632|    {
 5303|    632|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|    632|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|    632|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5305|    632|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIS9_EERT_:
 5910|    632|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|    632|                          basic_contiguous_scan_context<char_type>>) {
 5915|    632|            auto rd = make_reader<T, char_type>();
 5916|    632|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|    632|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5902|    632|    {
 5903|    632|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3939|    632|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    632|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    632|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    632|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 632]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|    632|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    632|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|    632|                        .transform_error(make_eof_scan_error));
 5905|    632|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|    632|    }
_ZN3scn2v44impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5302|    632|    {
 5303|    632|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|    632|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|    632|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5305|    632|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIS9_EERT_:
 5910|    632|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|    632|                          basic_contiguous_scan_context<char_type>>) {
 5915|    632|            auto rd = make_reader<T, char_type>();
 5916|    632|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|    632|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5902|    632|    {
 5903|    632|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3939|    632|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    632|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    632|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    632|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 632]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|    632|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    632|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|    632|                        .transform_error(make_eof_scan_error));
 5905|    632|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|    632|    }
_ZN3scn2v44impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5302|    632|    {
 5303|    632|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|    632|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|    632|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5305|    632|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEcEEEENSL_10locale_refE:
 2985|  59.8k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  | 1055|  59.8k|    static_cast<    \
  |  | 1056|  59.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2986|  59.8k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2987|  59.8k|          m_current(m_range.begin())
 2988|  59.8k|    {
 2989|  59.8k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE3endEv:
 2997|   190k|    {
 2998|   190k|        return m_range.end();
 2999|   190k|    }
_ZN3scn2v44impl19is_first_char_spaceIcEENS1_26is_first_char_space_resultIT_EENSt3__117basic_string_viewIS4_NS6_11char_traitsIS4_EEEE:
 1318|  72.1k|{
 1319|       |    // TODO: optimize
 1320|  72.1k|    SCN_EXPECT(!str.empty());
  ------------------
  |  | 1051|  72.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  72.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1321|  72.1k|    auto res = get_next_code_point(str);
 1322|  72.1k|    return {res.iterator, res.value, detail::is_cp_space(res.value)};
 1323|  72.1k|}
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE10advance_toES7_:
 3012|  75.5k|    {
 3013|  75.5k|        SCN_EXPECT(it <= end());
  ------------------
  |  | 1051|  75.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  75.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3014|  75.5k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3015|  75.5k|            if (it == nullptr) {
  ------------------
  |  Branch (3015:17): [True: 0, False: 75.5k]
  ------------------
 3016|      0|                it = end();
 3017|      0|            }
 3018|  75.5k|        }
 3019|  75.5k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1055|  75.5k|    static_cast<    \
  |  | 1056|  75.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3020|  75.5k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5rangeEv:
 3002|  41.2k|    {
 3003|  41.2k|        return ranges::subrange{begin(), end()};
 3004|  41.2k|    }
_ZN3scn2v44impl24read_while_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2215|  8.27k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|  8.27k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|  8.27k|        auto buf = make_contiguous_buffer(range);
 2220|  8.27k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|  8.27k|        return ranges::next(range.begin(),
 2222|  8.27k|                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|       |    else {
 2225|       |        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|       |            return detail::is_cp_space(cp);
 2238|       |        });
 2239|       |    }
 2240|  8.27k|}
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE11impl_prefixINS1_15take_width_viewISA_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_b:
 6074|  5.83k|    {
 6075|  5.83k|        const bool need_skipped_width =
 6076|  5.83k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6076:13): [True: 84, False: 5.75k]
  |  Branch (6076:33): [True: 5.75k, False: 0]
  ------------------
 6077|  5.83k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6078|       |
 6079|       |        // Read prefix
 6080|  5.83k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6080:13): [True: 276, False: 5.56k]
  ------------------
 6081|  5.83k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6081:13): [True: 958, False: 4.60k]
  ------------------
 6082|  1.23k|            return skip_fill(rng, specs.precision, specs.fill,
 6083|  1.23k|                             need_skipped_width);
 6084|  1.23k|        }
 6085|  4.60k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6085:13): [True: 4.40k, False: 202]
  |  Branch (6085:56): [True: 2.47k, False: 1.92k]
  ------------------
 6086|       |            // Default alignment:
 6087|       |            // Skip preceding whitespace, if required by the reader
 6088|  2.47k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6088:17): [True: 2.47k, False: 0]
  ------------------
 6089|  2.47k|                auto max_width_view = take_width(rng, specs.precision);
 6090|  2.47k|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3939|  2.47k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  2.47k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  2.47k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  2.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 238, False: 2.23k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    238|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    238|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    238|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    238|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    238|    }                                                  \
  |  |  |  | 3938|  2.47k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  2.23k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|  2.23k|                                  .transform_error(make_eof_scan_error));
 6092|  2.23k|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6093|  2.47k|            }
 6094|      0|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|      0|                            make_eof_scan_error));
 6096|       |
 6097|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|      0|            return result_type{it, 0};
 6105|      0|        }
 6106|       |
 6107|  2.12k|        return result_type{rng.begin(), 0};
 6108|  4.60k|    }
_ZN3scn2v44impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEb:
 5989|  1.23k|{
 5990|  1.23k|    using char_type = detail::char_t<Range>;
 5991|  1.23k|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5992|       |
 5993|  1.23k|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5993:9): [True: 460, False: 774]
  ------------------
 5994|    460|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5995|    460|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5996|       |
 5997|    460|        if (max_width == 0) {
  ------------------
  |  Branch (5997:13): [True: 0, False: 460]
  ------------------
 5998|      0|            auto it = read_while_code_unit(range, pred);
 5999|       |
 6000|      0|            if (want_skipped_width) {
  ------------------
  |  Branch (6000:17): [True: 0, False: 0]
  ------------------
 6001|      0|                auto prefix_width =
 6002|      0|                    static_cast<std::ptrdiff_t>(
 6003|      0|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 6004|      0|                    ranges::distance(range.begin(), it);
 6005|      0|                return result_type{it, prefix_width};
 6006|      0|            }
 6007|      0|            return result_type{it, 0};
 6008|      0|        }
 6009|       |
 6010|    460|        auto max_width_view = take_width(range, max_width);
 6011|    460|        auto w_it = read_while_code_unit(max_width_view, pred);
 6012|       |
 6013|    460|        if (want_skipped_width) {
  ------------------
  |  Branch (6013:13): [True: 460, False: 0]
  ------------------
 6014|    460|            return result_type{w_it.base(), max_width - w_it.count()};
 6015|    460|        }
 6016|      0|        return result_type{w_it.base(), 0};
 6017|    460|    }
 6018|       |
 6019|    774|    const auto fill_chars = fill.template get_code_units<char_type>();
 6020|    774|    if (max_width == 0) {
  ------------------
  |  Branch (6020:9): [True: 0, False: 774]
  ------------------
 6021|      0|        auto it = read_while_code_units(range, fill_chars);
 6022|       |
 6023|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (6023:13): [True: 0, False: 0]
  ------------------
 6024|      0|            auto prefix_width =
 6025|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 6026|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 6027|      0|            return result_type{it, prefix_width};
 6028|      0|        }
 6029|      0|        return result_type{it, 0};
 6030|      0|    }
 6031|       |
 6032|    774|    auto max_width_view = take_width(range, max_width);
 6033|    774|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 6034|       |
 6035|    774|    if (want_skipped_width) {
  ------------------
  |  Branch (6035:9): [True: 774, False: 0]
  ------------------
 6036|    774|        return result_type{w_it.base(), max_width - w_it.count()};
 6037|    774|    }
 6038|      0|    return result_type{w_it.base(), 0};
 6039|    774|}
_ZN3scn2v44impl12function_refIFbcES3_EC2IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_ST_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSJ_:
  742|    460|        : m_fptr([](storage fn,
  743|    460|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    460|              cvref<T> obj = *get<T>(fn);
  745|    460|              if constexpr (std::is_void_v<R>) {
  746|    460|                  obj(static_cast<decltype(args)>(args)...);
  747|    460|              }
  748|    460|              else {
  749|    460|                  return obj(static_cast<decltype(args)>(args)...);
  750|    460|              }
  751|    460|          }),
  752|    460|          m_storage(std::addressof(f))
  753|    460|    {
  754|    460|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_ST_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES15_c:
  743|    676|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    676|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    676|              else {
  749|    676|                  return obj(static_cast<decltype(args)>(args)...);
  750|    676|              }
  751|    676|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESI_lRKNS0_6detail9fill_typeEbEUlcE_EEDaNS3_7storageE:
  683|    676|    {
  684|    676|        if constexpr (std::is_const_v<T>) {
  685|    676|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    676|    }
_ZZN3scn2v44impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEbENKUlcE_clEc:
 5995|    676|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|    460|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    460|        {
  667|    460|        }
_ZN3scn2v44impl20read_while_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2074|    460|{
 2075|    460|    return read_until_code_unit(range, std::not_fn(pred));
 2076|    460|}
_ZN3scn2v44impl20read_until_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2055|    460|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|    460|    else {
 2060|    460|        auto first = range.begin();
 2061|    712|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 676, False: 36]
  ------------------
 2062|    676|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 424, False: 252]
  ------------------
 2063|    424|                return first;
 2064|    424|            }
 2065|    676|        }
 2066|     36|        return first;
 2067|    460|    }
 2068|    460|}
_ZNK3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE5beginEv:
 2920|  6.18k|    {
 2921|  6.18k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2922|  6.18k|                                      m_count};
 2923|  6.18k|    }
_ZNK3scn2v44impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEvE3getEv:
 2825|  26.3k|    {
 2826|  26.3k|        return view;
 2827|  26.3k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEC2ES6_SF_l:
 2480|  6.18k|        : m_current(x), m_end(s), m_count(n)
 2481|  6.18k|    {
 2482|  6.18k|    }
_ZN3scn2v44implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2891|  9.07k|        {
 2892|  9.07k|            return !(y == x);
 2893|  9.07k|        }
_ZN3scn2v44impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2878|  19.5k|        {
 2879|  19.5k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2879:21): [True: 1.15k, False: 18.3k]
  |  Branch (2879:39): [True: 690, False: 468]
  ------------------
 2880|  19.5k|                   y.base() == x.m_end ||
  ------------------
  |  Branch (2880:20): [True: 34, False: 18.7k]
  ------------------
 2881|  19.5k|                   (y.count() == 1 && y.multibyte_left() == 0 &&
  ------------------
  |  Branch (2881:21): [True: 2.24k, False: 16.5k]
  |  Branch (2881:39): [True: 1.60k, False: 640]
  ------------------
 2882|  18.7k|                    y.is_current_double_wide());
  ------------------
  |  Branch (2882:21): [True: 0, False: 1.60k]
  ------------------
 2883|  19.5k|        }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE14multibyte_leftEv:
 2520|  3.40k|    {
 2521|  3.40k|        return m_multibyte_left;
 2522|  3.40k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE22is_current_double_wideEv:
 2525|  1.60k|    {
 2526|  1.60k|        assert(count() != 0 || multibyte_left() != 0);
 2527|  1.60k|        return _get_width_at_current_cp_start(
 2528|  1.60k|                   _get_cp_length_at_current()) == 2;
 2529|  1.60k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE30_get_width_at_current_cp_startEl:
 2753|  10.7k|    {
 2754|  10.7k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  986|  10.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 10.7k]
  |  |  ------------------
  ------------------
 2755|      0|            return 0;
 2756|      0|        }
 2757|       |
 2758|  10.7k|        if (cplen == 1) {
  ------------------
  |  Branch (2758:13): [True: 5.41k, False: 5.34k]
  ------------------
 2759|  5.41k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  | 1051|  5.41k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  5.41k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2760|  5.41k|            auto cp = static_cast<char32_t>(*m_current);
 2761|  5.41k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2762|  5.41k|        }
 2763|       |
 2764|  5.34k|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2765|  5.34k|                                           cplen);
 2766|  5.34k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  986|  5.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 5.34k]
  |  |  ------------------
  ------------------
 2767|      0|            return 0;
 2768|      0|        }
 2769|       |
 2770|  5.34k|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2771|  5.34k|        return static_cast<difference_type>(
 2772|  5.34k|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2773|  5.34k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE25_get_cp_length_at_currentEv:
 2747|  10.7k|    {
 2748|  10.7k|        return static_cast<difference_type>(
 2749|  10.7k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2750|  10.7k|    }
_ZNK3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE3endEv:
 2926|  14.0k|    {
 2927|  14.0k|        return sentinel<true>{m_base.get().end()};
 2928|  14.0k|    }
_ZN3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE8sentinelILb1EEC2ENSA_8sentinelILb1EEE:
 2859|  14.0k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
  ------------------
  |  | 1055|  14.0k|    static_cast<    \
  |  | 1056|  14.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEdeEv:
 2532|  12.7k|    {
 2533|  12.7k|        return *m_current;
 2534|  12.7k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEppEv:
 2541|  17.3k|    {
 2542|  17.3k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  | 1051|  17.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  17.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2543|  17.3k|        _increment_current();
 2544|  17.3k|        return *this;
 2545|  17.3k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE18_increment_currentEv:
 2776|  17.3k|    {
 2777|  17.3k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2777:13): [True: 9.15k, False: 8.18k]
  ------------------
 2778|  9.15k|            auto cplen = _get_cp_length_at_current();
 2779|  9.15k|            m_multibyte_left = cplen - 1;
 2780|  9.15k|            m_count -= _get_width_at_current_cp_start(cplen);
 2781|  9.15k|        }
 2782|  8.18k|        else {
 2783|  8.18k|            --m_multibyte_left;
 2784|  8.18k|        }
 2785|       |
 2786|  17.3k|        ++m_current;
 2787|  17.3k|    }
_ZN3scn2v44impl21read_while_code_unitsINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENSt3__117basic_string_viewIcNSD_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEESJ_RKT0_:
 2135|    774|{
 2136|    774|    static_assert(ranges::common_range<CodeUnits>);
 2137|       |
 2138|    774|    auto it = range.begin();
 2139|  1.35k|    while (it != range.end()) {
  ------------------
  |  Branch (2139:12): [True: 1.32k, False: 34]
  ------------------
 2140|  1.32k|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2141|  1.32k|                                           needle.size());
 2142|  1.32k|        if (!r) {
  ------------------
  |  Branch (2142:13): [True: 144, False: 1.17k]
  ------------------
 2143|    144|            return it;
 2144|    144|        }
 2145|  1.17k|        static_assert(
 2146|  1.17k|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2147|  1.17k|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2147:13): [True: 596, False: 582]
  ------------------
 2148|    596|            return it;
 2149|    596|        }
 2150|    582|        it = *r;
 2151|    582|    }
 2152|     34|    SCN_ENSURE(it == range.end());
  ------------------
  |  | 1052|     34|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1048|     34|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2153|     34|    return it;
 2154|     34|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_l:
 1955|  1.32k|{
 1956|  1.32k|    SCN_EXPECT(count >= 0);
  ------------------
  |  | 1051|  1.32k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.32k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|  1.32k|    else {
 1967|  1.32k|        auto it = range.begin();
 1968|  1.32k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 0, False: 1.32k]
  ------------------
 1969|      0|            return ranges::next(it, count);
 1970|      0|        }
 1971|       |
 1972|  5.16k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 3.98k, False: 1.17k]
  ------------------
 1973|  3.98k|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 144, False: 3.83k]
  ------------------
 1974|    144|                return unexpected(eof_error::eof);
 1975|    144|            }
 1976|  3.98k|        }
 1977|       |
 1978|  1.17k|        return it;
 1979|  1.32k|    }
 1980|  1.32k|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEmT_:
 1095|  1.32k|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|       |                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|       |        else {
 1107|       |            if (r.begin().stores_parent()) {
 1108|       |                return static_cast<size_t>(
 1109|       |                    r.begin().parent()->chars_available() -
 1110|       |                    r.begin().position());
 1111|       |            }
 1112|       |            return r.begin().contiguous_segment().size();
 1113|       |        }
 1114|       |    }
 1115|  1.32k|    else {
 1116|  1.32k|        return 0;
 1117|  1.32k|    }
 1118|  1.32k|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSM_NS1_20incrementable_traitsISM_E15difference_typeE:
  267|  2.47k|    {
  268|  2.47k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  2.47k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent22random_access_iteratorISM_EEvE4typeERSM_NS1_20incrementable_traitsISM_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  160|  2.47k|    {
  161|  2.47k|        constexpr auto zero = iter_difference_t<I>{0};
  162|       |
  163|  2.47k|        if (n > zero) {
  ------------------
  |  Branch (163:13): [True: 0, False: 2.47k]
  ------------------
  164|      0|            while (n-- > zero) {
  ------------------
  |  Branch (164:20): [True: 0, False: 0]
  ------------------
  165|      0|                ++i;
  166|      0|            }
  167|      0|        }
  168|  2.47k|        else {
  169|  2.47k|            while (n++ < zero) {
  ------------------
  |  Branch (169:20): [True: 0, False: 2.47k]
  ------------------
  170|      0|                --i;
  171|      0|            }
  172|  2.47k|        }
  173|  2.47k|    }
_ZN3scn2v44impl27counted_width_iterator_implneINS2_22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEDTeqclscPFRKS7_vELDnEEclscPFRKT_vELDnEEERKNS4_IS7_SG_EERKNS4_ISL_T0_EE:
 2637|  10.7k|    {
 2638|  10.7k|        return !(a == b);
 2639|  10.7k|    }
_ZN3scn2v44impl27counted_width_iterator_impleqINS2_22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEDTeqclscPFRKS7_vELDnEEclscPFRKT_vELDnEEERKNS4_IS7_SG_EERKNS4_ISL_T0_EE:
 2629|  10.7k|    {
 2630|  10.7k|        return a.m_current == b.m_current;
 2631|  10.7k|    }
_ZNK3scn2v44impl14_take_width_fnclINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEEDTtlS4_fp_fp0_EERKT_l:
 2942|  3.71k|    {
 2943|  3.71k|        return take_width_view{r, n};
 2944|  3.71k|    }
_ZN3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEEC2ERKSA_l:
 2910|  3.71k|        : m_base(base), m_count(count)
 2911|  3.71k|    {
 2912|  3.71k|    }
_ZN3scn2v44impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEvEC2ERKSB_:
 2822|  3.71k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v44impl23skip_classic_whitespaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3065|  2.47k|{
 3066|  2.47k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 2.47k, False: 0]
  ------------------
 3067|  2.47k|        auto it = read_while_classic_space(range);
 3068|  2.47k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|  2.47k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  2.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 238, False: 2.23k]
  |  |  ------------------
  ------------------
 3070|    238|            return unexpected(e);
 3071|    238|        }
 3072|       |
 3073|  2.23k|        return it;
 3074|  2.47k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|  2.47k|}
_ZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2215|  2.47k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|  2.47k|    else {
 2225|  2.47k|        auto it = range.begin();
 2226|       |
 2227|  2.47k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|  2.47k|            auto seg = get_contiguous_beginning(range);
 2229|  2.47k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|  2.47k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2230:17): [True: 0, False: 2.47k]
  ------------------
 2231|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|      0|            }
 2233|  2.47k|            ranges::advance(it, seg.size());
 2234|  2.47k|        }
 2235|       |
 2236|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  2.47k|            return detail::is_cp_space(cp);
 2238|  2.47k|        });
 2239|  2.47k|    }
 2240|  2.47k|}
_ZN3scn2v44impl24get_contiguous_beginningINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDaT_:
 1039|  2.47k|{
 1040|       |    if constexpr (ranges::contiguous_range<Range> &&
 1041|       |                  ranges::sized_range<Range>) {
 1042|       |        return r;
 1043|       |    }
 1044|       |    else if constexpr (std::is_same_v<
 1045|       |                           ranges::const_iterator_t<Range>,
 1046|       |                           typename detail::basic_scan_buffer<
 1047|       |                               detail::char_t<Range>>::forward_iterator>) {
 1048|       |        if constexpr (ranges::common_range<Range>) {
 1049|       |            auto seg = r.begin().contiguous_segment();
 1050|       |            auto dist =
 1051|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1052|       |            return seg.substr(0, std::min(seg.size(), dist));
 1053|       |        }
 1054|       |        else {
 1055|       |            return r.begin().contiguous_segment();
 1056|       |        }
 1057|       |    }
 1058|  2.47k|    else {
 1059|  2.47k|        return std::basic_string_view<detail::char_t<Range>>{};
 1060|  2.47k|    }
 1061|  2.47k|}
_ZN3scn2v44impl21read_while_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2180|  2.47k|{
 2181|  2.47k|    return read_until_code_point(range, std::not_fn(pred));
 2182|  2.47k|}
_ZN3scn2v44impl21read_until_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2159|  2.47k|{
 2160|  2.47k|    auto it = range.begin();
 2161|  4.17k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 3.93k, False: 238]
  ------------------
 2162|  3.93k|        const auto val =
 2163|  3.93k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  3.93k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  985|  3.93k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 3.93k, False: 0]
  |  |  ------------------
  ------------------
 2165|  3.93k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  3.93k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  3.93k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 2.23k, False: 1.70k]
  ------------------
 2168|  2.23k|                return it;
 2169|  2.23k|            }
 2170|  3.93k|        }
 2171|  1.70k|        it = val.iterator;
 2172|  1.70k|    }
 2173|       |
 2174|    238|    return it;
 2175|  2.47k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISP_EEE4typeEEESP_:
 1997|  3.93k|{
 1998|  3.93k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1051|  3.93k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  3.93k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  3.93k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  3.93k|    auto it = range.begin();
 2002|  3.93k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  3.93k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  986|  3.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 3.93k]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|  3.93k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 2.90k, False: 1.03k]
  ------------------
 2011|  2.90k|        ++it;
 2012|  2.90k|        return {it, string_type(1, *range.begin())};
 2013|  2.90k|    }
 2014|       |
 2015|  1.03k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|  1.03k|    return {it, string_type{range.begin(), it}};
 2017|  3.93k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEbT_:
  944|  6.41k|{
  945|  6.41k|    return is_range_eof(r.begin(), r.end());
  946|  6.41k|}
_ZN3scn2v44impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS8_ISE_E8sentinelILb1EEEEEbT_T0_:
  928|  6.41k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  6.41k|    {
  938|  6.41k|        return begin == end;
  939|  6.41k|    }
  940|  6.41k|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSC_ISG_E8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SP_EENS1_20incrementable_traitsISP_E15difference_typeEE4typeERSP_ST_SQ_:
  282|  1.03k|    {
  283|  1.03k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  1.03k|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSC_ISG_E8sentinelILb1EEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SP_EENS1_20incrementable_traitsISP_E15difference_typeEE4typeERSP_ST_SQ_:
  226|  1.03k|    {
  227|  1.03k|        constexpr iter_difference_t<I> zero{0};
  228|  1.03k|        iter_difference_t<I> counter{0};
  229|       |
  230|  1.03k|        if (n < zero) {
  ------------------
  |  Branch (230:13): [True: 0, False: 1.03k]
  ------------------
  231|      0|            do {
  232|      0|                --i;
  233|      0|                --counter;  // Yes, really
  234|      0|            } while (++n < zero && i != bound);
  ------------------
  |  Branch (234:22): [True: 0, False: 0]
  |  Branch (234:36): [True: 0, False: 0]
  ------------------
  235|      0|        }
  236|  1.03k|        else {
  237|  3.85k|            while (n-- > zero && i != bound) {
  ------------------
  |  Branch (237:20): [True: 2.82k, False: 1.03k]
  |  Branch (237:34): [True: 2.82k, False: 0]
  ------------------
  238|  2.82k|                ++i;
  239|  2.82k|                ++counter;
  240|  2.82k|            }
  241|  1.03k|        }
  242|       |
  243|  1.03k|        return counter;
  244|  1.03k|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEcE8is_validEv:
 1988|  3.93k|    {
 1989|  3.93k|        return !codepoint.empty();
 1990|  3.93k|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|  2.47k|        : m_fptr([](storage fn,
  743|  2.47k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.47k|              cvref<T> obj = *get<T>(fn);
  745|  2.47k|              if constexpr (std::is_void_v<R>) {
  746|  2.47k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.47k|              }
  748|  2.47k|              else {
  749|  2.47k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.47k|              }
  751|  2.47k|          }),
  752|  2.47k|          m_storage(std::addressof(f))
  753|  2.47k|    {
  754|  2.47k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  3.93k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.93k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  3.93k|              else {
  749|  3.93k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.93k|              }
  751|  3.93k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS6_INS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  3.93k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  3.93k|        else if constexpr (std::is_object_v<T>) {
  688|  3.93k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  3.93k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2236|  3.93k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  3.93k|            return detail::is_cp_space(cp);
 2238|  3.93k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  2.47k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.47k|        {
  662|  2.47k|        }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_9eof_errorET_:
  950|  2.47k|{
  951|  2.47k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  986|  2.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 238, False: 2.23k]
  |  |  ------------------
  ------------------
  952|    238|        return eof_error::eof;
  953|    238|    }
  954|  2.23k|    return eof_error::good;
  955|  2.47k|}
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE4baseEv:
 2512|  22.2k|    {
 2513|  22.2k|        return m_current;
 2514|  22.2k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE5countEv:
 2516|  43.3k|    {
 2517|  43.3k|        return m_count;
 2518|  43.3k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6074|  7.09k|    {
 6075|  7.09k|        const bool need_skipped_width =
 6076|  7.09k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6076:13): [True: 2.00k, False: 5.09k]
  |  Branch (6076:33): [True: 0, False: 5.09k]
  ------------------
 6077|  7.09k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6078|       |
 6079|       |        // Read prefix
 6080|  7.09k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6080:13): [True: 104, False: 6.99k]
  ------------------
 6081|  7.09k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6081:13): [True: 400, False: 6.59k]
  ------------------
 6082|    504|            return skip_fill(rng, specs.precision, specs.fill,
 6083|    504|                             need_skipped_width);
 6084|    504|        }
 6085|  6.59k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6085:13): [True: 5.85k, False: 740]
  |  Branch (6085:56): [True: 1.73k, False: 4.11k]
  ------------------
 6086|       |            // Default alignment:
 6087|       |            // Skip preceding whitespace, if required by the reader
 6088|  1.73k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6088:17): [True: 0, False: 1.73k]
  ------------------
 6089|      0|                auto max_width_view = take_width(rng, specs.precision);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6093|      0|            }
 6094|  3.47k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3939|  1.73k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  1.73k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  1.73k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  1.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 1.73k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  1.73k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  1.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|  3.47k|                            make_eof_scan_error));
 6096|       |
 6097|  3.47k|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 1.11k, False: 628]
  ------------------
 6098|  1.11k|                return result_type{
 6099|  1.11k|                    it,
 6100|  1.11k|                    calculate_text_width(make_contiguous_buffer(
 6101|  1.11k|                                             ranges::subrange{rng.begin(), it})
 6102|  1.11k|                                             .view())};
 6103|  1.11k|            }
 6104|    628|            return result_type{it, 0};
 6105|  3.47k|        }
 6106|       |
 6107|  4.85k|        return result_type{rng.begin(), 0};
 6108|  6.59k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6116|  4.30k|    {
 6117|  4.30k|        const bool need_skipped_width =
 6118|  4.30k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6118:13): [True: 488, False: 3.81k]
  |  Branch (6118:33): [True: 1.48k, False: 2.33k]
  ------------------
 6119|  4.30k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6120|       |
 6121|  4.30k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6121:13): [True: 298, False: 4.00k]
  ------------------
 6122|  4.30k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6122:13): [True: 530, False: 3.47k]
  ------------------
 6123|    828|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6123:17): [True: 418, False: 410]
  ------------------
 6124|    828|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6124:17): [True: 154, False: 264]
  ------------------
 6125|    154|                return result_type{rng.begin(), 0};
 6126|    154|            }
 6127|    674|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6128|    674|                             specs.fill, need_skipped_width);
 6129|    828|        }
 6130|  3.47k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6130:13): [True: 3.33k, False: 142]
  ------------------
 6131|  3.47k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6131:13): [True: 3.00k, False: 330]
  ------------------
 6132|  3.47k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6132:15): [True: 220, False: 2.78k]
  |  Branch (6132:35): [True: 166, False: 54]
  ------------------
 6133|  3.00k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6133:15): [True: 736, False: 2.10k]
  ------------------
 6134|  2.83k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6134:15): [True: 612, False: 124]
  ------------------
 6135|    778|            if (specs.precision != 0) {
  ------------------
  |  Branch (6135:17): [True: 612, False: 166]
  ------------------
 6136|    612|                const auto initial_width =
 6137|    612|                    specs.precision - prefix_width - value_width;
 6138|    612|                auto max_width_view = take_width(rng, initial_width);
 6139|    612|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3939|    612|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    612|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    612|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    612|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 612]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|    612|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    612|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6140|    612|                                  .transform_error(make_eof_scan_error));
 6141|    612|                return result_type{w_it.base(), initial_width - w_it.count()};
 6142|    612|            }
 6143|    332|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3939|    166|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    166|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    166|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    166|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 166]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|    166|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    166|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|    332|                            make_eof_scan_error));
 6145|       |
 6146|    332|            if (need_skipped_width) {
  ------------------
  |  Branch (6146:17): [True: 166, False: 0]
  ------------------
 6147|    166|                return result_type{
 6148|    166|                    it,
 6149|    166|                    calculate_text_width(make_contiguous_buffer(
 6150|    166|                                             ranges::subrange{rng.begin(), it})
 6151|    166|                                             .view())};
 6152|    166|            }
 6153|      0|            return result_type{it, 0};
 6154|    332|        }
 6155|  2.69k|        return result_type{rng.begin(), 0};
 6156|  3.47k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIiEENS0_13scan_expectedIS9_EERT_:
 6226|  3.00k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  3.00k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  3.00k|            auto rd = make_reader<T, char_type>();
 6232|  3.00k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3929|  3.00k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  3.00k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 2.29k, False: 718]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|  2.29k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|  2.29k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  2.29k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  2.29k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  2.29k|    }
  ------------------
 6233|    718|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  3.00k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6161|    718|    {
 6162|    718|        const bool need_skipped_width =
 6163|    718|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 210, False: 508]
  |  Branch (6163:33): [True: 416, False: 92]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|    718|        auto it = rng.begin();
 6167|    718|        std::ptrdiff_t prefix_width = 0;
 6168|    718|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 420, False: 298]
  ------------------
 6169|    420|            auto max_width_view = take_width(rng, specs.precision);
 6170|    420|            SCN_TRY(prefix_result,
  ------------------
  |  | 3939|    420|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    420|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    420|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    420|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 32, False: 388]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     32|    }                                                  \
  |  |  |  | 3938|    420|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    388|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|    388|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|    388|            it = prefix_result.first.base();
 6173|    388|            prefix_width = prefix_result.second;
 6174|    388|        }
 6175|    298|        else {
 6176|    298|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3939|    298|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    298|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    298|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    298|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 298]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|    298|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    298|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|    298|            std::tie(it, prefix_width) = prefix_result;
 6178|    298|        }
 6179|    686|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|    686|        std::ptrdiff_t value_width = 0;
 6183|    686|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 388, False: 298]
  ------------------
 6184|    388|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 6, False: 382]
  ------------------
 6185|      6|                return detail::unexpected_scan_error(
 6186|      6|                    scan_error::invalid_fill,
 6187|      6|                    "Too many fill characters before value, "
 6188|      6|                    "precision exceeded before reading value");
 6189|      6|            }
 6190|       |
 6191|    382|            const auto initial_width = specs.precision - prefix_width;
 6192|    382|            auto max_width_view =
 6193|    382|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|    382|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3939|    382|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    382|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    382|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    382|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 382, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    382|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    382|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    382|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    382|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    382|    }                                                  \
  |  |  |  | 3938|    382|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|    298|        else {
 6199|    298|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3934|    298|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|    298|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|    298|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 298, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|    298|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|    298|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|    298|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|    298|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    298|    }                                                  \
  |  | 3938|    298|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|    298|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|      0|                                             specs, value, loc));
 6201|       |
 6202|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 0]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|      0|        }
 6208|       |
 6209|       |        // Read postfix
 6210|      0|        std::ptrdiff_t postfix_width = 0;
 6211|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 0, False: 0]
  ------------------
 6212|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6215|      0|                                 value_width));
 6216|      0|            std::tie(it, postfix_width) = postfix_result;
 6217|      0|        }
 6218|       |
 6219|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3929|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6220|      0|            specs, prefix_width, value_width, postfix_width));
 6221|      0|        return it;
 6222|      0|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIjEENS0_13scan_expectedIS9_EERT_:
 6226|  3.00k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  3.00k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  3.00k|            auto rd = make_reader<T, char_type>();
 6232|  3.00k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3929|  3.00k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  3.00k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 2.29k, False: 718]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|  2.29k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|  2.29k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  2.29k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  2.29k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  2.29k|    }
  ------------------
 6233|    718|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  3.00k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6161|    718|    {
 6162|    718|        const bool need_skipped_width =
 6163|    718|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 210, False: 508]
  |  Branch (6163:33): [True: 416, False: 92]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|    718|        auto it = rng.begin();
 6167|    718|        std::ptrdiff_t prefix_width = 0;
 6168|    718|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 420, False: 298]
  ------------------
 6169|    420|            auto max_width_view = take_width(rng, specs.precision);
 6170|    420|            SCN_TRY(prefix_result,
  ------------------
  |  | 3939|    420|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    420|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    420|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    420|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 32, False: 388]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     32|    }                                                  \
  |  |  |  | 3938|    420|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    388|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|    388|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|    388|            it = prefix_result.first.base();
 6173|    388|            prefix_width = prefix_result.second;
 6174|    388|        }
 6175|    298|        else {
 6176|    298|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3939|    298|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    298|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    298|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    298|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 298]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|    298|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    298|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|    298|            std::tie(it, prefix_width) = prefix_result;
 6178|    298|        }
 6179|    686|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|    686|        std::ptrdiff_t value_width = 0;
 6183|    686|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 388, False: 298]
  ------------------
 6184|    388|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 6, False: 382]
  ------------------
 6185|      6|                return detail::unexpected_scan_error(
 6186|      6|                    scan_error::invalid_fill,
 6187|      6|                    "Too many fill characters before value, "
 6188|      6|                    "precision exceeded before reading value");
 6189|      6|            }
 6190|       |
 6191|    382|            const auto initial_width = specs.precision - prefix_width;
 6192|    382|            auto max_width_view =
 6193|    382|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|    382|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3939|    382|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    382|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    382|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    382|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 382, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    382|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    382|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    382|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    382|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    382|    }                                                  \
  |  |  |  | 3938|    382|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|    298|        else {
 6199|    298|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3934|    298|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|    298|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|    298|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 298, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|    298|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|    298|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|    298|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|    298|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    298|    }                                                  \
  |  | 3938|    298|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|    298|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|      0|                                             specs, value, loc));
 6201|       |
 6202|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 0]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|      0|        }
 6208|       |
 6209|       |        // Read postfix
 6210|      0|        std::ptrdiff_t postfix_width = 0;
 6211|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 0, False: 0]
  ------------------
 6212|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6215|      0|                                 value_width));
 6216|      0|            std::tie(it, postfix_width) = postfix_result;
 6217|      0|        }
 6218|       |
 6219|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3929|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6220|      0|            specs, prefix_width, value_width, postfix_width));
 6221|      0|        return it;
 6222|      0|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIPvEENS0_13scan_expectedIS9_EERT_:
 6226|  2.96k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  2.96k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  2.96k|            auto rd = make_reader<T, char_type>();
 6232|  2.96k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3929|  2.96k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  2.96k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 2.32k, False: 640]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|  2.32k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|  2.32k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  2.32k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  2.32k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  2.32k|    }
  ------------------
 6233|    640|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  2.96k|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIcE11check_specsERKNS0_6detail12format_specsE:
 5791|  2.96k|    {
 5792|  2.96k|        reader_error_handler eh{};
 5793|  2.96k|        detail::check_pointer_type_specs(specs, eh);
 5794|  2.96k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  986|  2.96k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 2.32k, False: 640]
  |  |  ------------------
  ------------------
 5795|  2.32k|            return detail::unexpected_scan_error(
 5796|  2.32k|                scan_error::invalid_format_string, eh.m_msg);
 5797|  2.32k|        }
 5798|    640|        return {};
 5799|  2.96k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_23reader_impl_for_voidptrIcEESA_PvEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 6161|    640|    {
 6162|    640|        const bool need_skipped_width =
 6163|    640|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 202, False: 438]
  |  Branch (6163:33): [True: 370, False: 68]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|    640|        auto it = rng.begin();
 6167|    640|        std::ptrdiff_t prefix_width = 0;
 6168|    640|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 372, False: 268]
  ------------------
 6169|    372|            auto max_width_view = take_width(rng, specs.precision);
 6170|    372|            SCN_TRY(prefix_result,
  ------------------
  |  | 3939|    372|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    372|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    372|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    372|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 24, False: 348]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     24|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     24|    }                                                  \
  |  |  |  | 3938|    372|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    348|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|    348|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|    348|            it = prefix_result.first.base();
 6173|    348|            prefix_width = prefix_result.second;
 6174|    348|        }
 6175|    268|        else {
 6176|    268|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3939|    268|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    268|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    268|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    268|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 268]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|    268|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    268|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|    268|            std::tie(it, prefix_width) = prefix_result;
 6178|    268|        }
 6179|    616|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|    616|        std::ptrdiff_t value_width = 0;
 6183|    616|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 348, False: 268]
  ------------------
 6184|    348|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 4, False: 344]
  ------------------
 6185|      4|                return detail::unexpected_scan_error(
 6186|      4|                    scan_error::invalid_fill,
 6187|      4|                    "Too many fill characters before value, "
 6188|      4|                    "precision exceeded before reading value");
 6189|      4|            }
 6190|       |
 6191|    344|            const auto initial_width = specs.precision - prefix_width;
 6192|    344|            auto max_width_view =
 6193|    344|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|    344|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3939|    344|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    344|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    344|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    344|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 344, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    344|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    344|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    344|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    344|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    344|    }                                                  \
  |  |  |  | 3938|    344|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|    268|        else {
 6199|    268|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3934|    268|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|    268|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|    268|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 268, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|    268|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|    268|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|    268|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|    268|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    268|    }                                                  \
  |  | 3938|    268|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|    268|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|      0|                                             specs, value, loc));
 6201|       |
 6202|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 0]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|      0|        }
 6208|       |
 6209|       |        // Read postfix
 6210|      0|        std::ptrdiff_t postfix_width = 0;
 6211|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 0, False: 0]
  ------------------
 6212|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6215|      0|                                 value_width));
 6216|      0|            std::tie(it, postfix_width) = postfix_result;
 6217|      0|        }
 6218|       |
 6219|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3929|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6220|      0|            specs, prefix_width, value_width, postfix_width));
 6221|      0|        return it;
 6222|      0|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERPvNSN_10locale_refE:
 5821|    344|    {
 5822|    344|        SCN_UNUSED(specs);
  ------------------
  |  | 1036|    344|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5823|    344|        return read_default(range, value, loc);
 5824|    344|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIcE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RPvNS0_6detail10locale_refE:
 5804|    344|    {
 5805|    344|        detail::format_specs specs{};
 5806|    344|        specs.type = detail::presentation_type::int_hex;
 5807|       |
 5808|    344|        std::uintptr_t intvalue{};
 5809|    344|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3939|    344|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    344|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    344|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    344|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 344, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    344|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    344|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    344|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    344|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    344|    }                                                  \
  |  |  |  | 3938|    344|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5810|      0|                                                                intvalue, loc));
 5811|      0|        value = reinterpret_cast<void*>(intvalue);
 5812|      0|        return result;
 5813|    344|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERPvNSL_10locale_refE:
 5821|    268|    {
 5822|    268|        SCN_UNUSED(specs);
  ------------------
  |  | 1036|    268|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5823|    268|        return read_default(range, value, loc);
 5824|    268|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIbEENS0_13scan_expectedIS9_EERT_:
 6226|  3.00k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  3.00k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  3.00k|            auto rd = make_reader<T, char_type>();
 6232|  3.00k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3929|  3.00k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  3.00k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 2.02k, False: 982]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|  2.02k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|  2.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  2.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  2.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  2.02k|    }
  ------------------
 6233|    982|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  3.00k|    }
_ZN3scn2v44impl11reader_baseINS1_20reader_impl_for_boolIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3155|  3.00k|    {
 3156|  3.00k|        reader_error_handler eh{};
 3157|  3.00k|        get_derived().check_specs_impl(specs, eh);
 3158|  3.00k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  986|  3.00k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 2.02k, False: 982]
  |  |  ------------------
  ------------------
 3159|  2.02k|            return detail::unexpected_scan_error(
 3160|  2.02k|                scan_error::invalid_format_string, eh.m_msg);
 3161|  2.02k|        }
 3162|    982|        return {};
 3163|  3.00k|    }
_ZN3scn2v44impl11reader_baseINS1_20reader_impl_for_boolIcEEcE11get_derivedEv:
 3167|  3.00k|    {
 3168|  3.00k|        return static_cast<Derived&>(*this);
 3169|  3.00k|    }
_ZN3scn2v44impl20reader_impl_for_boolIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5534|  3.00k|    {
 5535|  3.00k|        detail::check_bool_type_specs(specs, eh);
 5536|  3.00k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_20reader_impl_for_boolIcEESA_bEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6161|    982|    {
 6162|    982|        const bool need_skipped_width =
 6163|    982|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 220, False: 762]
  |  Branch (6163:33): [True: 530, False: 232]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|    982|        auto it = rng.begin();
 6167|    982|        std::ptrdiff_t prefix_width = 0;
 6168|    982|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 536, False: 446]
  ------------------
 6169|    536|            auto max_width_view = take_width(rng, specs.precision);
 6170|    536|            SCN_TRY(prefix_result,
  ------------------
  |  | 3939|    536|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    536|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    536|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    536|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 36, False: 500]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     36|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     36|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     36|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     36|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     36|    }                                                  \
  |  |  |  | 3938|    536|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    500|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|    500|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|    500|            it = prefix_result.first.base();
 6173|    500|            prefix_width = prefix_result.second;
 6174|    500|        }
 6175|    446|        else {
 6176|    446|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3939|    446|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    446|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    446|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    446|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 446]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|    446|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    446|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|    446|            std::tie(it, prefix_width) = prefix_result;
 6178|    446|        }
 6179|    946|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|    946|        std::ptrdiff_t value_width = 0;
 6183|    946|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 500, False: 446]
  ------------------
 6184|    500|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 10, False: 490]
  ------------------
 6185|     10|                return detail::unexpected_scan_error(
 6186|     10|                    scan_error::invalid_fill,
 6187|     10|                    "Too many fill characters before value, "
 6188|     10|                    "precision exceeded before reading value");
 6189|     10|            }
 6190|       |
 6191|    490|            const auto initial_width = specs.precision - prefix_width;
 6192|    490|            auto max_width_view =
 6193|    490|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|    490|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3939|    490|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    490|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    490|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    490|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 490, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    490|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    490|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    490|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    490|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    490|    }                                                  \
  |  |  |  | 3938|    490|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|    446|        else {
 6199|    446|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3934|    446|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|    446|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|    446|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 446, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|    446|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|    446|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|    446|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|    446|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    446|    }                                                  \
  |  | 3938|    446|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|    446|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|      0|                                             specs, value, loc));
 6201|       |
 6202|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 0]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|      0|        }
 6208|       |
 6209|       |        // Read postfix
 6210|      0|        std::ptrdiff_t postfix_width = 0;
 6211|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 0, False: 0]
  ------------------
 6212|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6215|      0|                                 value_width));
 6216|      0|            std::tie(it, postfix_width) = postfix_result;
 6217|      0|        }
 6218|       |
 6219|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3929|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6220|      0|            specs, prefix_width, value_width, postfix_width));
 6221|      0|        return it;
 6222|      0|    }
_ZNK3scn2v44impl20reader_impl_for_boolIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERbNSN_10locale_refE:
 5553|    490|    {
 5554|    490|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5555|       |
 5556|    490|#if !SCN_DISABLE_LOCALE
 5557|    490|        if (specs.localized) {
  ------------------
  |  Branch (5557:13): [True: 20, False: 470]
  ------------------
 5558|     20|            return rd.read_localized(range, loc, value);
 5559|     20|        }
 5560|    470|#endif
 5561|       |
 5562|    470|        return rd.read_classic(range, value);
 5563|    490|    }
_ZN3scn2v44impl20reader_impl_for_boolIcE11get_optionsERKNS0_6detail12format_specsE:
 5566|    936|    {
 5567|    936|        SCN_GCC_COMPAT_PUSH
 5568|    936|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 5569|       |
 5570|    936|        switch (specs.type) {
 5571|    250|            case detail::presentation_type::string:
  ------------------
  |  Branch (5571:13): [True: 250, False: 686]
  ------------------
 5572|    250|                return bool_reader_base::allow_text;
 5573|       |
 5574|     14|            case detail::presentation_type::int_generic:
  ------------------
  |  Branch (5574:13): [True: 14, False: 922]
  ------------------
 5575|     26|            case detail::presentation_type::int_binary:
  ------------------
  |  Branch (5575:13): [True: 12, False: 924]
  ------------------
 5576|     32|            case detail::presentation_type::int_decimal:
  ------------------
  |  Branch (5576:13): [True: 6, False: 930]
  ------------------
 5577|     42|            case detail::presentation_type::int_hex:
  ------------------
  |  Branch (5577:13): [True: 10, False: 926]
  ------------------
 5578|     58|            case detail::presentation_type::int_octal:
  ------------------
  |  Branch (5578:13): [True: 16, False: 920]
  ------------------
 5579|     64|            case detail::presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (5579:13): [True: 6, False: 930]
  ------------------
 5580|     64|                return bool_reader_base::allow_numeric;
 5581|       |
 5582|    622|            default:
  ------------------
  |  Branch (5582:13): [True: 622, False: 314]
  ------------------
 5583|    622|                return bool_reader_base::allow_text |
 5584|    622|                       bool_reader_base::allow_numeric;
 5585|    936|        }
 5586|       |
 5587|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 5588|    936|    }
_ZNK3scn2v44impl11bool_readerIcE14read_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refERb:
 5464|     20|    {
 5465|     20|        scan_error err{scan_error::invalid_scanned_value,
 5466|     20|                       "Failed to read boolean"};
 5467|       |
 5468|     20|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5468:13): [True: 16, False: 4]
  ------------------
 5469|     16|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5469:22): [True: 0, False: 16]
  ------------------
 5470|      0|                return *r;
 5471|      0|            }
 5472|     16|            else {
 5473|     16|                err = r.error();
 5474|     16|            }
 5475|     16|        }
 5476|       |
 5477|     20|        if (m_options & allow_text) {
  ------------------
  |  Branch (5477:13): [True: 16, False: 4]
  ------------------
 5478|     16|            auto stdloc = loc.get<std::locale>();
 5479|     16|            const auto& numpunct =
 5480|     16|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5481|     16|            const auto truename = numpunct.truename();
 5482|     16|            const auto falsename = numpunct.falsename();
 5483|       |
 5484|     16|            if (auto r =
  ------------------
  |  Branch (5484:22): [True: 0, False: 16]
  ------------------
 5485|     16|                    read_textual_custom(range, value, truename, falsename)) {
 5486|      0|                return *r;
 5487|      0|            }
 5488|     16|            else {
 5489|     16|                err = r.error();
 5490|     16|            }
 5491|     16|        }
 5492|       |
 5493|     20|        return unexpected(err);
 5494|     20|    }
_ZNK3scn2v44impl16bool_reader_base12read_numericINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5420|    386|    {
 5421|    386|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5421:18): [True: 0, False: 386]
  ------------------
 5422|      0|            value = false;
 5423|      0|            return *r;
 5424|      0|        }
 5425|    386|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5425:18): [True: 0, False: 386]
  ------------------
 5426|      0|            value = true;
 5427|      0|            return *r;
 5428|      0|        }
 5429|       |
 5430|    386|        return detail::unexpected_scan_error(
 5431|    386|            scan_error::invalid_scanned_value,
 5432|    386|            "Failed to read numeric boolean value: No match");
 5433|    386|    }
_ZN3scn2v44impl23read_matching_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NDTcl4implISF_EEE4typeE:
 2245|    772|{
 2246|    772|    auto it = read_code_unit(range);
 2247|    772|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  986|    772|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 772]
  |  |  ------------------
  ------------------
 2248|      0|        return unexpected(make_eof_parse_error(it.error()));
 2249|      0|    }
 2250|       |
 2251|    772|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  986|    772|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 772, False: 0]
  |  |  ------------------
  ------------------
 2252|    772|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|    772|        return unexpected(parse_error::error);
 2254|    772|    }
 2255|       |
 2256|      0|    return *it;
 2257|    772|}
_ZNK3scn2v44impl11bool_readerIcE19read_textual_customINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RbNSF_17basic_string_viewIcNSF_11char_traitsIcEEEESR_:
 5504|     16|    {
 5505|     16|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5506|     16|        const auto shorter = std::pair{
 5507|     16|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5507:13): [True: 16, False: 0]
  ------------------
 5508|     16|        const auto longer = std::pair{
 5509|     16|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5509:13): [True: 0, False: 16]
  ------------------
 5510|       |
 5511|     16|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5511:18): [True: 0, False: 16]
  ------------------
 5512|      0|            value = shorter.second;
 5513|      0|            return *r;
 5514|      0|        }
 5515|     16|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5515:18): [True: 0, False: 16]
  ------------------
 5516|      0|            value = longer.second;
 5517|      0|            return *r;
 5518|      0|        }
 5519|       |
 5520|     16|        return detail::unexpected_scan_error(
 5521|     16|            scan_error::invalid_scanned_value,
 5522|     16|            "Failed to read textual boolean: No match");
 5523|     16|    }
_ZN3scn2v44impl20read_matching_stringINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewINDTcl4implISF_EEE4typeENSD_11char_traitsISN_EEEE:
 2278|     32|{
 2279|     32|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3939|     32|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|     32|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|     32|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 18, False: 14]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     18|    }                                                  \
  |  |  |  | 3938|     32|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|     14|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2280|     14|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2281|     14|                    .transform_error(make_eof_parse_error));
 2282|       |
 2283|     14|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2284|     14|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  986|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 14, False: 0]
  |  |  ------------------
  ------------------
 2285|     14|        return unexpected(parse_error::error);
 2286|     14|    }
 2287|      0|    return it;
 2288|     14|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_l:
 1955|    916|{
 1956|    916|    SCN_EXPECT(count >= 0);
  ------------------
  |  | 1051|    916|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    916|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|    916|    else {
 1967|    916|        auto it = range.begin();
 1968|    916|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 0, False: 916]
  ------------------
 1969|      0|            return ranges::next(it, count);
 1970|      0|        }
 1971|       |
 1972|  4.55k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 3.83k, False: 726]
  ------------------
 1973|  3.83k|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 190, False: 3.64k]
  ------------------
 1974|    190|                return unexpected(eof_error::eof);
 1975|    190|            }
 1976|  3.83k|        }
 1977|       |
 1978|    726|        return it;
 1979|    916|    }
 1980|    916|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEmT_:
 1095|    916|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|       |                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|       |        else {
 1107|       |            if (r.begin().stores_parent()) {
 1108|       |                return static_cast<size_t>(
 1109|       |                    r.begin().parent()->chars_available() -
 1110|       |                    r.begin().position());
 1111|       |            }
 1112|       |            return r.begin().contiguous_segment().size();
 1113|       |        }
 1114|       |    }
 1115|    916|    else {
 1116|    916|        return 0;
 1117|    916|    }
 1118|    916|}
_ZNK3scn2v44impl16bool_reader_base12read_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5391|    470|    {
 5392|    470|        scan_error err{scan_error::invalid_scanned_value,
 5393|    470|                       "Failed to read boolean"};
 5394|       |
 5395|    470|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5395:13): [True: 370, False: 100]
  ------------------
 5396|    370|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5396:22): [True: 0, False: 370]
  ------------------
 5397|      0|                return *r;
 5398|      0|            }
 5399|    370|            else {
 5400|    370|                err = r.error();
 5401|    370|            }
 5402|    370|        }
 5403|       |
 5404|    470|        if (m_options & allow_text) {
  ------------------
  |  Branch (5404:13): [True: 442, False: 28]
  ------------------
 5405|    442|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5405:22): [True: 0, False: 442]
  ------------------
 5406|      0|                return *r;
 5407|      0|            }
 5408|    442|            else {
 5409|    442|                err = r.error();
 5410|    442|            }
 5411|    442|        }
 5412|       |
 5413|    470|        return unexpected(err);
 5414|    470|    }
_ZNK3scn2v44impl16bool_reader_base20read_textual_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5438|    442|    {
 5439|    442|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5439:18): [True: 0, False: 442]
  ------------------
 5440|      0|            value = true;
 5441|      0|            return *r;
 5442|      0|        }
 5443|    442|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5443:18): [True: 0, False: 442]
  ------------------
 5444|      0|            value = false;
 5445|      0|            return *r;
 5446|      0|        }
 5447|       |
 5448|    442|        return detail::unexpected_scan_error(
 5449|    442|            scan_error::invalid_scanned_value,
 5450|    442|            "Failed to read textual boolean value: No match");
 5451|    442|    }
_ZN3scn2v44impl28read_matching_string_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2293|    884|{
 2294|    884|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3939|    884|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    884|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    884|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    884|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 172, False: 712]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    172|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    172|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    172|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    172|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    172|    }                                                  \
  |  |  |  | 3938|    884|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    712|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2295|    712|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2296|    712|                    .transform_error(make_eof_parse_error));
 2297|       |
 2298|    712|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2299|    712|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2300|    712|        if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  986|    712|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 712, False: 0]
  |  |  ------------------
  ------------------
 2301|    712|            return unexpected(parse_error::error);
 2302|    712|        }
 2303|      0|        return it;
 2304|       |    }
 2305|       |    else {
 2306|       |        auto range_it = range.begin();
 2307|       |        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
 2308|       |            if (SCN_UNLIKELY(*range_it !=
 2309|       |                             static_cast<detail::char_t<Range>>(str[i]))) {
 2310|       |                return unexpected(parse_error::error);
 2311|       |            }
 2312|       |        }
 2313|       |        return it;
 2314|       |    }
 2315|    712|}
_ZNK3scn2v44impl20reader_impl_for_boolIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERbNSL_10locale_refE:
 5553|    446|    {
 5554|    446|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5555|       |
 5556|    446|#if !SCN_DISABLE_LOCALE
 5557|    446|        if (specs.localized) {
  ------------------
  |  Branch (5557:13): [True: 22, False: 424]
  ------------------
 5558|     22|            return rd.read_localized(range, loc, value);
 5559|     22|        }
 5560|    424|#endif
 5561|       |
 5562|    424|        return rd.read_classic(range, value);
 5563|    446|    }
_ZNK3scn2v44impl11bool_readerIcE14read_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refERb:
 5464|     22|    {
 5465|     22|        scan_error err{scan_error::invalid_scanned_value,
 5466|     22|                       "Failed to read boolean"};
 5467|       |
 5468|     22|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5468:13): [True: 14, False: 8]
  ------------------
 5469|     14|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5469:22): [True: 0, False: 14]
  ------------------
 5470|      0|                return *r;
 5471|      0|            }
 5472|     14|            else {
 5473|     14|                err = r.error();
 5474|     14|            }
 5475|     14|        }
 5476|       |
 5477|     22|        if (m_options & allow_text) {
  ------------------
  |  Branch (5477:13): [True: 12, False: 10]
  ------------------
 5478|     12|            auto stdloc = loc.get<std::locale>();
 5479|     12|            const auto& numpunct =
 5480|     12|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5481|     12|            const auto truename = numpunct.truename();
 5482|     12|            const auto falsename = numpunct.falsename();
 5483|       |
 5484|     12|            if (auto r =
  ------------------
  |  Branch (5484:22): [True: 0, False: 12]
  ------------------
 5485|     12|                    read_textual_custom(range, value, truename, falsename)) {
 5486|      0|                return *r;
 5487|      0|            }
 5488|     12|            else {
 5489|     12|                err = r.error();
 5490|     12|            }
 5491|     12|        }
 5492|       |
 5493|     22|        return unexpected(err);
 5494|     22|    }
_ZNK3scn2v44impl11bool_readerIcE19read_textual_customINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNSD_17basic_string_viewIcNSD_11char_traitsIcEEEESP_:
 5504|     12|    {
 5505|     12|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5506|     12|        const auto shorter = std::pair{
 5507|     12|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5507:13): [True: 12, False: 0]
  ------------------
 5508|     12|        const auto longer = std::pair{
 5509|     12|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5509:13): [True: 0, False: 12]
  ------------------
 5510|       |
 5511|     12|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5511:18): [True: 0, False: 12]
  ------------------
 5512|      0|            value = shorter.second;
 5513|      0|            return *r;
 5514|      0|        }
 5515|     12|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5515:18): [True: 0, False: 12]
  ------------------
 5516|      0|            value = longer.second;
 5517|      0|            return *r;
 5518|      0|        }
 5519|       |
 5520|     12|        return detail::unexpected_scan_error(
 5521|     12|            scan_error::invalid_scanned_value,
 5522|     12|            "Failed to read textual boolean: No match");
 5523|     12|    }
_ZN3scn2v44impl20read_matching_stringINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewINDTcl4implISD_EEE4typeENSB_11char_traitsISL_EEEE:
 2278|     24|{
 2279|     24|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3939|     24|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|     24|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|     24|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 2, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      2|    }                                                  \
  |  |  |  | 3938|     24|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2280|     22|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2281|     22|                    .transform_error(make_eof_parse_error));
 2282|       |
 2283|     22|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2284|     22|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  986|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 22, False: 0]
  |  |  ------------------
  ------------------
 2285|     22|        return unexpected(parse_error::error);
 2286|     22|    }
 2287|      0|    return it;
 2288|     22|}
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIcEENS0_13scan_expectedIS9_EERT_:
 6226|  2.96k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  2.96k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  2.96k|            auto rd = make_reader<T, char_type>();
 6232|  2.96k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3929|  2.96k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  2.96k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 2.26k, False: 694]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|  2.26k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|  2.26k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  2.26k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  2.26k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  2.26k|    }
  ------------------
 6233|    694|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  2.96k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_20reader_impl_for_charIcEESA_cEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6161|    694|    {
 6162|    694|        const bool need_skipped_width =
 6163|    694|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 206, False: 488]
  |  Branch (6163:33): [True: 404, False: 84]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|    694|        auto it = rng.begin();
 6167|    694|        std::ptrdiff_t prefix_width = 0;
 6168|    694|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 408, False: 286]
  ------------------
 6169|    408|            auto max_width_view = take_width(rng, specs.precision);
 6170|    408|            SCN_TRY(prefix_result,
  ------------------
  |  | 3939|    408|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    408|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    408|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    408|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 408]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|    408|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    408|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|    408|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|    408|            it = prefix_result.first.base();
 6173|    408|            prefix_width = prefix_result.second;
 6174|    408|        }
 6175|    286|        else {
 6176|    286|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3939|    286|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    286|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    286|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    286|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 286]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|    286|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    286|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|    286|            std::tie(it, prefix_width) = prefix_result;
 6178|    286|        }
 6179|    694|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|    694|        std::ptrdiff_t value_width = 0;
 6183|    694|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 408, False: 286]
  ------------------
 6184|    408|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 6, False: 402]
  ------------------
 6185|      6|                return detail::unexpected_scan_error(
 6186|      6|                    scan_error::invalid_fill,
 6187|      6|                    "Too many fill characters before value, "
 6188|      6|                    "precision exceeded before reading value");
 6189|      6|            }
 6190|       |
 6191|    402|            const auto initial_width = specs.precision - prefix_width;
 6192|    402|            auto max_width_view =
 6193|    402|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|    402|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3939|    402|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    402|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    402|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    402|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 36, False: 366]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     36|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     36|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     36|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     36|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     36|    }                                                  \
  |  |  |  | 3938|    402|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    366|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|    366|            it = w_it.base();
 6196|    366|            value_width = initial_width - w_it.count();
 6197|    366|        }
 6198|    286|        else {
 6199|    286|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3934|    286|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|    286|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|    286|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 22, False: 264]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|     22|    }                                                  \
  |  | 3938|    286|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|    286|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|    264|                                             specs, value, loc));
 6201|       |
 6202|    264|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 198, False: 66]
  ------------------
 6203|    198|                value_width = calculate_text_width(
 6204|    198|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|    198|                        .view());
 6206|    198|            }
 6207|    264|        }
 6208|       |
 6209|       |        // Read postfix
 6210|    630|        std::ptrdiff_t postfix_width = 0;
 6211|    630|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 630, False: 0]
  ------------------
 6212|    630|            SCN_TRY(postfix_result,
  ------------------
  |  | 3939|    630|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    630|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    630|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    630|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 630]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|    630|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    630|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|    630|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|    630|                                 rd.skip_ws_before_read(), prefix_width,
 6215|    630|                                 value_width));
 6216|    630|            std::tie(it, postfix_width) = postfix_result;
 6217|    630|        }
 6218|       |
 6219|    630|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3929|    630|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|    630|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 174, False: 456]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|    174|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|    174|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|    174|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|    174|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    174|    }
  ------------------
 6220|    630|            specs, prefix_width, value_width, postfix_width));
 6221|    456|        return it;
 6222|    630|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIdEENS0_13scan_expectedIS9_EERT_:
 6226|  3.00k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  3.00k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  3.00k|            auto rd = make_reader<T, char_type>();
 6232|  3.00k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3929|  3.00k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  3.00k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 2.28k, False: 728]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|  2.28k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|  2.28k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  2.28k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  2.28k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  2.28k|    }
  ------------------
 6233|    728|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  3.00k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6161|    728|    {
 6162|    728|        const bool need_skipped_width =
 6163|    728|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 208, False: 520]
  |  Branch (6163:33): [True: 426, False: 94]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|    728|        auto it = rng.begin();
 6167|    728|        std::ptrdiff_t prefix_width = 0;
 6168|    728|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 430, False: 298]
  ------------------
 6169|    430|            auto max_width_view = take_width(rng, specs.precision);
 6170|    430|            SCN_TRY(prefix_result,
  ------------------
  |  | 3939|    430|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    430|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    430|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    430|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 30, False: 400]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     30|    }                                                  \
  |  |  |  | 3938|    430|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    400|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|    400|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|    400|            it = prefix_result.first.base();
 6173|    400|            prefix_width = prefix_result.second;
 6174|    400|        }
 6175|    298|        else {
 6176|    298|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3939|    298|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    298|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    298|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    298|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 298]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|    298|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    298|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|    298|            std::tie(it, prefix_width) = prefix_result;
 6178|    298|        }
 6179|    698|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|    698|        std::ptrdiff_t value_width = 0;
 6183|    698|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 400, False: 298]
  ------------------
 6184|    400|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 8, False: 392]
  ------------------
 6185|      8|                return detail::unexpected_scan_error(
 6186|      8|                    scan_error::invalid_fill,
 6187|      8|                    "Too many fill characters before value, "
 6188|      8|                    "precision exceeded before reading value");
 6189|      8|            }
 6190|       |
 6191|    392|            const auto initial_width = specs.precision - prefix_width;
 6192|    392|            auto max_width_view =
 6193|    392|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|    392|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3939|    392|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    392|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    392|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    392|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 392, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    392|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    392|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    392|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    392|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    392|    }                                                  \
  |  |  |  | 3938|    392|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|    298|        else {
 6199|    298|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3934|    298|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|    298|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|    298|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 298, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|    298|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|    298|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|    298|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|    298|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    298|    }                                                  \
  |  | 3938|    298|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|    298|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|      0|                                             specs, value, loc));
 6201|       |
 6202|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 0]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|      0|        }
 6208|       |
 6209|       |        // Read postfix
 6210|      0|        std::ptrdiff_t postfix_width = 0;
 6211|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 0, False: 0]
  ------------------
 6212|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6215|      0|                                 value_width));
 6216|      0|            std::tie(it, postfix_width) = postfix_result;
 6217|      0|        }
 6218|       |
 6219|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3929|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6220|      0|            specs, prefix_width, value_width, postfix_width));
 6221|      0|        return it;
 6222|      0|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIS9_EERT_:
 6226|  2.96k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  2.96k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  2.96k|            auto rd = make_reader<T, char_type>();
 6232|  2.96k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3929|  2.96k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  2.96k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 144, False: 2.81k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|    144|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|    144|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|    144|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|    144|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    144|    }
  ------------------
 6233|  2.81k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  2.96k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6161|  2.81k|    {
 6162|  2.81k|        const bool need_skipped_width =
 6163|  2.81k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 278, False: 2.54k]
  |  Branch (6163:33): [True: 1.06k, False: 1.47k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  2.81k|        auto it = rng.begin();
 6167|  2.81k|        std::ptrdiff_t prefix_width = 0;
 6168|  2.81k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 1.08k, False: 1.73k]
  ------------------
 6169|  1.08k|            auto max_width_view = take_width(rng, specs.precision);
 6170|  1.08k|            SCN_TRY(prefix_result,
  ------------------
  |  | 3939|  1.08k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  1.08k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  1.08k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  1.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 28, False: 1.05k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     28|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     28|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     28|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     28|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     28|    }                                                  \
  |  |  |  | 3938|  1.08k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  1.05k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|  1.05k|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|  1.05k|            it = prefix_result.first.base();
 6173|  1.05k|            prefix_width = prefix_result.second;
 6174|  1.05k|        }
 6175|  1.73k|        else {
 6176|  1.73k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3939|  1.73k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  1.73k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  1.73k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  1.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 1.73k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  1.73k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  1.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|  1.73k|            std::tie(it, prefix_width) = prefix_result;
 6178|  1.73k|        }
 6179|  2.79k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  2.79k|        std::ptrdiff_t value_width = 0;
 6183|  2.79k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 1.05k, False: 1.73k]
  ------------------
 6184|  1.05k|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 10, False: 1.04k]
  ------------------
 6185|     10|                return detail::unexpected_scan_error(
 6186|     10|                    scan_error::invalid_fill,
 6187|     10|                    "Too many fill characters before value, "
 6188|     10|                    "precision exceeded before reading value");
 6189|     10|            }
 6190|       |
 6191|  1.04k|            const auto initial_width = specs.precision - prefix_width;
 6192|  1.04k|            auto max_width_view =
 6193|  1.04k|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|  1.04k|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3939|  1.04k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  1.04k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  1.04k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  1.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 562, False: 484]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    562|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    562|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    562|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    562|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    562|    }                                                  \
  |  |  |  | 3938|  1.04k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    484|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|    484|            it = w_it.base();
 6196|    484|            value_width = initial_width - w_it.count();
 6197|    484|        }
 6198|  1.73k|        else {
 6199|  1.73k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3934|  1.73k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|  1.73k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|  1.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 630, False: 1.10k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|    630|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|    630|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|    630|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|    630|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    630|    }                                                  \
  |  | 3938|  1.73k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|  1.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  1.10k|                                             specs, value, loc));
 6201|       |
 6202|  1.10k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 224, False: 880]
  ------------------
 6203|    224|                value_width = calculate_text_width(
 6204|    224|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|    224|                        .view());
 6206|    224|            }
 6207|  1.10k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  1.58k|        std::ptrdiff_t postfix_width = 0;
 6211|  1.58k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 1.22k, False: 364]
  ------------------
 6212|  1.22k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3939|  1.22k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  1.22k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  1.22k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  1.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 1.22k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  1.22k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  1.22k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  1.22k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  1.22k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  1.22k|                                 value_width));
 6216|  1.22k|            std::tie(it, postfix_width) = postfix_result;
 6217|  1.22k|        }
 6218|       |
 6219|  1.58k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3929|  1.58k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  1.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 88, False: 1.50k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|     88|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|     88|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|     88|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|     88|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|     88|    }
  ------------------
 6220|  1.58k|            specs, prefix_width, value_width, postfix_width));
 6221|  1.50k|        return it;
 6222|  1.58k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIS9_EERT_:
 6226|  2.96k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  2.96k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  2.96k|            auto rd = make_reader<T, char_type>();
 6232|  2.96k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3929|  2.96k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  2.96k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 144, False: 2.81k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|    144|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|    144|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|    144|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|    144|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    144|    }
  ------------------
 6233|  2.81k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  2.96k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6161|  2.81k|    {
 6162|  2.81k|        const bool need_skipped_width =
 6163|  2.81k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 278, False: 2.54k]
  |  Branch (6163:33): [True: 1.06k, False: 1.47k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  2.81k|        auto it = rng.begin();
 6167|  2.81k|        std::ptrdiff_t prefix_width = 0;
 6168|  2.81k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 1.08k, False: 1.73k]
  ------------------
 6169|  1.08k|            auto max_width_view = take_width(rng, specs.precision);
 6170|  1.08k|            SCN_TRY(prefix_result,
  ------------------
  |  | 3939|  1.08k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  1.08k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  1.08k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  1.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 28, False: 1.05k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     28|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     28|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     28|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     28|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     28|    }                                                  \
  |  |  |  | 3938|  1.08k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  1.05k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|  1.05k|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|  1.05k|            it = prefix_result.first.base();
 6173|  1.05k|            prefix_width = prefix_result.second;
 6174|  1.05k|        }
 6175|  1.73k|        else {
 6176|  1.73k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3939|  1.73k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  1.73k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  1.73k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  1.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 1.73k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  1.73k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  1.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|  1.73k|            std::tie(it, prefix_width) = prefix_result;
 6178|  1.73k|        }
 6179|  2.79k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  2.79k|        std::ptrdiff_t value_width = 0;
 6183|  2.79k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 1.05k, False: 1.73k]
  ------------------
 6184|  1.05k|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 10, False: 1.04k]
  ------------------
 6185|     10|                return detail::unexpected_scan_error(
 6186|     10|                    scan_error::invalid_fill,
 6187|     10|                    "Too many fill characters before value, "
 6188|     10|                    "precision exceeded before reading value");
 6189|     10|            }
 6190|       |
 6191|  1.04k|            const auto initial_width = specs.precision - prefix_width;
 6192|  1.04k|            auto max_width_view =
 6193|  1.04k|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|  1.04k|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3939|  1.04k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  1.04k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  1.04k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  1.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 562, False: 484]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    562|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    562|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    562|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    562|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    562|    }                                                  \
  |  |  |  | 3938|  1.04k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    484|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|    484|            it = w_it.base();
 6196|    484|            value_width = initial_width - w_it.count();
 6197|    484|        }
 6198|  1.73k|        else {
 6199|  1.73k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3934|  1.73k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|  1.73k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|  1.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 630, False: 1.10k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|    630|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|    630|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|    630|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|    630|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    630|    }                                                  \
  |  | 3938|  1.73k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|  1.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  1.10k|                                             specs, value, loc));
 6201|       |
 6202|  1.10k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 224, False: 880]
  ------------------
 6203|    224|                value_width = calculate_text_width(
 6204|    224|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|    224|                        .view());
 6206|    224|            }
 6207|  1.10k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  1.58k|        std::ptrdiff_t postfix_width = 0;
 6211|  1.58k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 1.22k, False: 364]
  ------------------
 6212|  1.22k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3939|  1.22k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  1.22k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  1.22k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  1.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 1.22k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  1.22k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  1.22k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  1.22k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  1.22k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  1.22k|                                 value_width));
 6216|  1.22k|            std::tie(it, postfix_width) = postfix_result;
 6217|  1.22k|        }
 6218|       |
 6219|  1.58k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3929|  1.58k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  1.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 88, False: 1.50k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|     88|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|     88|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|     88|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|     88|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|     88|    }
  ------------------
 6220|  1.58k|            specs, prefix_width, value_width, postfix_width));
 6221|  1.50k|        return it;
 6222|  1.58k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIS9_EERT_:
 6226|  2.96k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  2.96k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  2.96k|            auto rd = make_reader<T, char_type>();
 6232|  2.96k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3929|  2.96k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  2.96k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 144, False: 2.81k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|    144|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|    144|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|    144|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|    144|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    144|    }
  ------------------
 6233|  2.81k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  2.96k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6161|  2.81k|    {
 6162|  2.81k|        const bool need_skipped_width =
 6163|  2.81k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 278, False: 2.54k]
  |  Branch (6163:33): [True: 1.06k, False: 1.47k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  2.81k|        auto it = rng.begin();
 6167|  2.81k|        std::ptrdiff_t prefix_width = 0;
 6168|  2.81k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 1.08k, False: 1.73k]
  ------------------
 6169|  1.08k|            auto max_width_view = take_width(rng, specs.precision);
 6170|  1.08k|            SCN_TRY(prefix_result,
  ------------------
  |  | 3939|  1.08k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  1.08k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  1.08k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  1.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 28, False: 1.05k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     28|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     28|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     28|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     28|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     28|    }                                                  \
  |  |  |  | 3938|  1.08k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  1.05k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|  1.05k|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|  1.05k|            it = prefix_result.first.base();
 6173|  1.05k|            prefix_width = prefix_result.second;
 6174|  1.05k|        }
 6175|  1.73k|        else {
 6176|  1.73k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3939|  1.73k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  1.73k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  1.73k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  1.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 1.73k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  1.73k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  1.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|  1.73k|            std::tie(it, prefix_width) = prefix_result;
 6178|  1.73k|        }
 6179|  2.79k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  2.79k|        std::ptrdiff_t value_width = 0;
 6183|  2.79k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 1.05k, False: 1.73k]
  ------------------
 6184|  1.05k|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 10, False: 1.04k]
  ------------------
 6185|     10|                return detail::unexpected_scan_error(
 6186|     10|                    scan_error::invalid_fill,
 6187|     10|                    "Too many fill characters before value, "
 6188|     10|                    "precision exceeded before reading value");
 6189|     10|            }
 6190|       |
 6191|  1.04k|            const auto initial_width = specs.precision - prefix_width;
 6192|  1.04k|            auto max_width_view =
 6193|  1.04k|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|  1.04k|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3939|  1.04k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  1.04k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  1.04k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  1.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 562, False: 484]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    562|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    562|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    562|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    562|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    562|    }                                                  \
  |  |  |  | 3938|  1.04k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    484|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|    484|            it = w_it.base();
 6196|    484|            value_width = initial_width - w_it.count();
 6197|    484|        }
 6198|  1.73k|        else {
 6199|  1.73k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3934|  1.73k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|  1.73k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|  1.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 630, False: 1.10k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|    630|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|    630|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|    630|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|    630|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    630|    }                                                  \
  |  | 3938|  1.73k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|  1.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  1.10k|                                             specs, value, loc));
 6201|       |
 6202|  1.10k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 224, False: 880]
  ------------------
 6203|    224|                value_width = calculate_text_width(
 6204|    224|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|    224|                        .view());
 6206|    224|            }
 6207|  1.10k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  1.58k|        std::ptrdiff_t postfix_width = 0;
 6211|  1.58k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 1.22k, False: 364]
  ------------------
 6212|  1.22k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3939|  1.22k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  1.22k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  1.22k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  1.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 1.22k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  1.22k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  1.22k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  1.22k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  1.22k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  1.22k|                                 value_width));
 6216|  1.22k|            std::tie(it, postfix_width) = postfix_result;
 6217|  1.22k|        }
 6218|       |
 6219|  1.58k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3929|  1.58k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  1.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 88, False: 1.50k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|     88|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|     88|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|     88|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|     88|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|     88|    }
  ------------------
 6220|  1.58k|            specs, prefix_width, value_width, postfix_width));
 6221|  1.50k|        return it;
 6222|  1.58k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5834|  64.6k|{
 5835|  64.6k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  64.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 64.6k]
  |  |  ------------------
  ------------------
 5836|      0|        return unexpected(e);
 5837|      0|    }
 5838|       |
 5839|  64.6k|    if (!is_required) {
  ------------------
  |  Branch (5839:9): [True: 7.18k, False: 57.5k]
  ------------------
 5840|  7.18k|        return range.begin();
 5841|  7.18k|    }
 5842|       |
 5843|  57.5k|    return skip_classic_whitespace(range);
 5844|  64.6k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIiEENS0_13scan_expectedIS9_EERT_:
 5910|  7.18k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  7.18k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  7.18k|            auto rd = make_reader<T, char_type>();
 5916|  7.18k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  7.18k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  7.18k|    {
 5903|  7.18k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3939|  7.18k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  7.18k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  7.18k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  7.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 7.18k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  7.18k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  7.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  7.18k|                        .transform_error(make_eof_scan_error));
 5905|  7.18k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  7.18k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3578|  7.18k|    {
 3579|  7.18k|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|  7.18k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  7.18k|        return read_default_with_base(range, value, 10);
 3581|  7.18k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3542|  7.18k|    {
 3543|  7.18k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3939|  7.18k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  7.18k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  7.18k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  7.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 7.18k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  7.18k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  7.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  7.18k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|       |        if constexpr (!std::is_signed_v<T>) {
 3547|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3548|       |                return detail::unexpected_scan_error(
 3549|       |                    scan_error::invalid_scanned_value,
 3550|       |                    "Unexpected '-' sign when parsing an "
 3551|       |                    "unsigned value");
 3552|       |            }
 3553|       |        }
 3554|       |
 3555|  7.18k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 7.18k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  14.3k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3939|  7.18k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  7.18k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  7.18k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  7.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 7.18k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  7.18k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  7.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  14.3k|                parse_integer_digits_without_thsep(
 3562|  14.3k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  14.3k|                    prefix_result.parsed_base));
 3564|       |
 3565|  14.3k|        auto buf = make_contiguous_buffer(
 3566|  14.3k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  14.3k|        SCN_TRY(result_it,
  ------------------
  |  | 3939|  7.18k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  7.18k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  7.18k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  7.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 7.18k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  7.18k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  7.18k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  7.18k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  7.18k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  7.18k|    }                                                  \
  |  |  |  | 3938|  7.18k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|      0|                                    prefix_result.parsed_base));
 3570|       |
 3571|      0|        return ranges::next(prefix_result.iterator,
 3572|      0|                            ranges::distance(buf.view().begin(), result_it));
 3573|  14.3k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIjEENS0_13scan_expectedIS9_EERT_:
 5910|  7.18k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  7.18k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  7.18k|            auto rd = make_reader<T, char_type>();
 5916|  7.18k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  7.18k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  7.18k|    {
 5903|  7.18k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3939|  7.18k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  7.18k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  7.18k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  7.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 7.18k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  7.18k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  7.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  7.18k|                        .transform_error(make_eof_scan_error));
 5905|  7.18k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  7.18k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3578|  7.18k|    {
 3579|  7.18k|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|  7.18k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  7.18k|        return read_default_with_base(range, value, 10);
 3581|  7.18k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3542|  7.18k|    {
 3543|  7.18k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3939|  7.18k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  7.18k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  7.18k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  7.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 7.18k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  7.18k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  7.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  7.18k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|  7.18k|        if constexpr (!std::is_signed_v<T>) {
 3547|  7.18k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3547:17): [True: 0, False: 7.18k]
  ------------------
 3548|      0|                return detail::unexpected_scan_error(
 3549|      0|                    scan_error::invalid_scanned_value,
 3550|      0|                    "Unexpected '-' sign when parsing an "
 3551|      0|                    "unsigned value");
 3552|      0|            }
 3553|  7.18k|        }
 3554|       |
 3555|  7.18k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 7.18k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  14.3k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3939|  7.18k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  7.18k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  7.18k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  7.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 7.18k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  7.18k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  7.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  14.3k|                parse_integer_digits_without_thsep(
 3562|  14.3k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  14.3k|                    prefix_result.parsed_base));
 3564|       |
 3565|  14.3k|        auto buf = make_contiguous_buffer(
 3566|  14.3k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  14.3k|        SCN_TRY(result_it,
  ------------------
  |  | 3939|  7.18k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  7.18k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  7.18k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  7.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 7.18k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  7.18k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  7.18k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  7.18k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  7.18k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  7.18k|    }                                                  \
  |  |  |  | 3938|  7.18k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|      0|                                    prefix_result.parsed_base));
 3570|       |
 3571|      0|        return ranges::next(prefix_result.iterator,
 3572|      0|                            ranges::distance(buf.view().begin(), result_it));
 3573|  14.3k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIPvEENS0_13scan_expectedIS9_EERT_:
 5910|  7.18k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  7.18k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  7.18k|            auto rd = make_reader<T, char_type>();
 5916|  7.18k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  7.18k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_23reader_impl_for_voidptrIwEESA_PvEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 5902|  7.18k|    {
 5903|  7.18k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3939|  7.18k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  7.18k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  7.18k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  7.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 7.18k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  7.18k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  7.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  7.18k|                        .transform_error(make_eof_scan_error));
 5905|  7.18k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  7.18k|    }
_ZNK3scn2v44impl23reader_impl_for_voidptrIwE19skip_ws_before_readEv:
 5786|  7.81k|    {
 5787|  7.81k|        return true;
 5788|  7.81k|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RPvNS0_6detail10locale_refE:
 5804|  7.57k|    {
 5805|  7.57k|        detail::format_specs specs{};
 5806|  7.57k|        specs.type = detail::presentation_type::int_hex;
 5807|       |
 5808|  7.57k|        std::uintptr_t intvalue{};
 5809|  7.57k|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3939|  7.57k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  7.57k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  7.57k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  7.57k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 7.55k, False: 24]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  7.55k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  7.55k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  7.55k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  7.55k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  7.55k|    }                                                  \
  |  |  |  | 3938|  7.57k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|     24|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5810|     24|                                                                intvalue, loc));
 5811|     24|        value = reinterpret_cast<void*>(intvalue);
 5812|     24|        return result;
 5813|  7.57k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIbEENS0_13scan_expectedIS9_EERT_:
 5910|  7.18k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  7.18k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  7.18k|            auto rd = make_reader<T, char_type>();
 5916|  7.18k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  7.18k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_20reader_impl_for_boolIwEESA_bEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  7.18k|    {
 5903|  7.18k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3939|  7.18k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  7.18k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  7.18k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  7.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 7.18k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  7.18k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  7.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  7.18k|                        .transform_error(make_eof_scan_error));
 5905|  7.18k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  7.18k|    }
_ZNK3scn2v44impl11reader_baseINS1_20reader_impl_for_boolIwEEwE19skip_ws_before_readEv:
 3150|  8.08k|    {
 3151|  8.08k|        return true;
 3152|  8.08k|    }
_ZNK3scn2v44impl20reader_impl_for_boolIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNS0_6detail10locale_refE:
 5541|  7.18k|    {
 5542|  7.18k|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|  7.18k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5543|       |
 5544|  7.18k|        return bool_reader<CharT>{}.read_classic(range, value);
 5545|  7.18k|    }
_ZNK3scn2v44impl16bool_reader_base12read_classicINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5391|  7.68k|    {
 5392|  7.68k|        scan_error err{scan_error::invalid_scanned_value,
 5393|  7.68k|                       "Failed to read boolean"};
 5394|       |
 5395|  7.68k|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5395:13): [True: 7.62k, False: 58]
  ------------------
 5396|  7.62k|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5396:22): [True: 34, False: 7.59k]
  ------------------
 5397|     34|                return *r;
 5398|     34|            }
 5399|  7.59k|            else {
 5400|  7.59k|                err = r.error();
 5401|  7.59k|            }
 5402|  7.62k|        }
 5403|       |
 5404|  7.65k|        if (m_options & allow_text) {
  ------------------
  |  Branch (5404:13): [True: 7.61k, False: 40]
  ------------------
 5405|  7.61k|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5405:22): [True: 0, False: 7.61k]
  ------------------
 5406|      0|                return *r;
 5407|      0|            }
 5408|  7.61k|            else {
 5409|  7.61k|                err = r.error();
 5410|  7.61k|            }
 5411|  7.61k|        }
 5412|       |
 5413|  7.65k|        return unexpected(err);
 5414|  7.65k|    }
_ZNK3scn2v44impl16bool_reader_base12read_numericINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5420|  7.65k|    {
 5421|  7.65k|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5421:18): [True: 40, False: 7.61k]
  ------------------
 5422|     40|            value = false;
 5423|     40|            return *r;
 5424|     40|        }
 5425|  7.61k|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5425:18): [True: 0, False: 7.61k]
  ------------------
 5426|      0|            value = true;
 5427|      0|            return *r;
 5428|      0|        }
 5429|       |
 5430|  7.61k|        return detail::unexpected_scan_error(
 5431|  7.61k|            scan_error::invalid_scanned_value,
 5432|  7.61k|            "Failed to read numeric boolean value: No match");
 5433|  7.61k|    }
_ZNK3scn2v44impl16bool_reader_base20read_textual_classicINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5438|  7.61k|    {
 5439|  7.61k|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5439:18): [True: 0, False: 7.61k]
  ------------------
 5440|      0|            value = true;
 5441|      0|            return *r;
 5442|      0|        }
 5443|  7.61k|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5443:18): [True: 0, False: 7.61k]
  ------------------
 5444|      0|            value = false;
 5445|      0|            return *r;
 5446|      0|        }
 5447|       |
 5448|  7.61k|        return detail::unexpected_scan_error(
 5449|  7.61k|            scan_error::invalid_scanned_value,
 5450|  7.61k|            "Failed to read textual boolean value: No match");
 5451|  7.61k|    }
_ZN3scn2v44impl28read_matching_string_classicINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2293|  15.2k|{
 2294|  15.2k|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3939|  15.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  15.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  15.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  15.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 180, False: 15.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    180|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    180|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    180|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    180|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    180|    }                                                  \
  |  |  |  | 3938|  15.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  15.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2295|  15.0k|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2296|  15.0k|                    .transform_error(make_eof_parse_error));
 2297|       |
 2298|       |    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2299|       |        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2300|       |        if (SCN_UNLIKELY(sv.view() != str)) {
 2301|       |            return unexpected(parse_error::error);
 2302|       |        }
 2303|       |        return it;
 2304|       |    }
 2305|  15.0k|    else {
 2306|  15.0k|        auto range_it = range.begin();
 2307|  15.0k|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
  ------------------
  |  Branch (2307:28): [True: 15.0k, False: 0]
  ------------------
 2308|  15.0k|            if (SCN_UNLIKELY(*range_it !=
  ------------------
  |  |  986|  15.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 15.0k, False: 0]
  |  |  ------------------
  ------------------
 2309|  15.0k|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2310|  15.0k|                return unexpected(parse_error::error);
 2311|  15.0k|            }
 2312|  15.0k|        }
 2313|      0|        return it;
 2314|  15.0k|    }
 2315|  15.0k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIwEENS0_13scan_expectedIS9_EERT_:
 5910|  7.18k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  7.18k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  7.18k|            auto rd = make_reader<T, char_type>();
 5916|  7.18k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  7.18k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_wcharIwEESA_wEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  7.18k|    {
 5903|  7.18k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3939|  7.18k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  7.18k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  7.18k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  7.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 7.18k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  7.18k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  7.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  7.18k|                        .transform_error(make_eof_scan_error));
 5905|  7.18k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  7.18k|    }
_ZN3scn2v44impl12float_readerIwEC2Ev:
 3699|  7.18k|    constexpr float_reader() = default;
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIdEENS0_13scan_expectedIS9_EERT_:
 5910|  7.18k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  7.18k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  7.18k|            auto rd = make_reader<T, char_type>();
 5916|  7.18k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  7.18k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  7.18k|    {
 5903|  7.18k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3939|  7.18k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  7.18k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  7.18k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  7.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 7.18k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  7.18k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  7.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  7.18k|                        .transform_error(make_eof_scan_error));
 5905|  7.18k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  7.18k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4184|  7.18k|    {
 4185|  7.18k|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|  7.18k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4186|       |
 4187|  7.18k|        float_reader<CharT> rd{};
 4188|  7.18k|        return read_impl<Range>(
 4189|  7.18k|            range, rd,
 4190|  7.18k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  7.18k|                return r.read_source(SCN_FWD(args)...);
 4192|  7.18k|            },
 4193|  7.18k|            value);
 4194|  7.18k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  7.18k|        : m_fptr([](storage fn,
  743|  7.18k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.18k|              cvref<T> obj = *get<T>(fn);
  745|  7.18k|              if constexpr (std::is_void_v<R>) {
  746|  7.18k|                  obj(static_cast<decltype(args)>(args)...);
  747|  7.18k|              }
  748|  7.18k|              else {
  749|  7.18k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.18k|              }
  751|  7.18k|          }),
  752|  7.18k|          m_storage(std::addressof(f))
  753|  7.18k|    {
  754|  7.18k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  7.18k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.18k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  7.18k|              else {
  749|  7.18k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.18k|              }
  751|  7.18k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  7.18k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  7.18k|        else if constexpr (std::is_object_v<T>) {
  688|  7.18k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  7.18k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4190|  7.18k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  7.18k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1057|  7.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4192|  7.18k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  7.18k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  7.18k|        {
  662|  7.18k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIS9_EERT_:
 5910|  7.18k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  7.18k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  7.18k|            auto rd = make_reader<T, char_type>();
 5916|  7.18k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  7.18k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5902|  7.18k|    {
 5903|  7.18k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3939|  7.18k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  7.18k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  7.18k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  7.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 7.18k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  7.18k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  7.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  7.18k|                        .transform_error(make_eof_scan_error));
 5905|  7.18k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  7.18k|    }
_ZN3scn2v44impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5302|  7.18k|    {
 5303|  7.18k|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|  7.18k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|  7.18k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5305|  7.18k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIS9_EERT_:
 5910|  7.18k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  7.18k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  7.18k|            auto rd = make_reader<T, char_type>();
 5916|  7.18k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  7.18k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5902|  7.18k|    {
 5903|  7.18k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3939|  7.18k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  7.18k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  7.18k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  7.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 7.18k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  7.18k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  7.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  7.18k|                        .transform_error(make_eof_scan_error));
 5905|  7.18k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  7.18k|    }
_ZN3scn2v44impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5302|  7.18k|    {
 5303|  7.18k|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|  7.18k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|  7.18k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5305|  7.18k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIS9_EERT_:
 5910|  7.18k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  7.18k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  7.18k|            auto rd = make_reader<T, char_type>();
 5916|  7.18k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  7.18k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5902|  7.18k|    {
 5903|  7.18k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3939|  7.18k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  7.18k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  7.18k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  7.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 7.18k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  7.18k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  7.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  7.18k|                        .transform_error(make_eof_scan_error));
 5905|  7.18k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  7.18k|    }
_ZN3scn2v44impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5302|  7.18k|    {
 5303|  7.18k|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|  7.18k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|  7.18k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5305|  7.18k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEwEEEENSL_10locale_refE:
 2985|   119k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  | 1055|   119k|    static_cast<    \
  |  | 1056|   119k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2986|   119k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2987|   119k|          m_current(m_range.begin())
 2988|   119k|    {
 2989|   119k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE3endEv:
 2997|   491M|    {
 2998|   491M|        return m_range.end();
 2999|   491M|    }
_ZN3scn2v44impl19is_first_char_spaceIwEENS1_26is_first_char_space_resultIT_EENSt3__117basic_string_viewIS4_NS6_11char_traitsIS4_EEEE:
 1318|   245M|{
 1319|       |    // TODO: optimize
 1320|   245M|    SCN_EXPECT(!str.empty());
  ------------------
  |  | 1051|   245M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   245M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1321|   245M|    auto res = get_next_code_point(str);
 1322|   245M|    return {res.iterator, res.value, detail::is_cp_space(res.value)};
 1323|   245M|}
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE10advance_toES7_:
 3012|   245M|    {
 3013|   245M|        SCN_EXPECT(it <= end());
  ------------------
  |  | 1051|   245M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   245M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3014|   245M|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3015|   245M|            if (it == nullptr) {
  ------------------
  |  Branch (3015:17): [True: 0, False: 245M]
  ------------------
 3016|      0|                it = end();
 3017|      0|            }
 3018|   245M|        }
 3019|   245M|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1055|   245M|    static_cast<    \
  |  | 1056|   245M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3020|   245M|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5rangeEv:
 3002|   206k|    {
 3003|   206k|        return ranges::subrange{begin(), end()};
 3004|   206k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE11impl_prefixINS1_15take_width_viewISA_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_b:
 6074|  2.85k|    {
 6075|  2.85k|        const bool need_skipped_width =
 6076|  2.85k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6076:13): [True: 34, False: 2.82k]
  |  Branch (6076:33): [True: 2.82k, False: 0]
  ------------------
 6077|  2.85k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6078|       |
 6079|       |        // Read prefix
 6080|  2.85k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6080:13): [True: 46, False: 2.81k]
  ------------------
 6081|  2.85k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6081:13): [True: 432, False: 2.38k]
  ------------------
 6082|    478|            return skip_fill(rng, specs.precision, specs.fill,
 6083|    478|                             need_skipped_width);
 6084|    478|        }
 6085|  2.38k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6085:13): [True: 2.33k, False: 44]
  |  Branch (6085:56): [True: 1.55k, False: 782]
  ------------------
 6086|       |            // Default alignment:
 6087|       |            // Skip preceding whitespace, if required by the reader
 6088|  1.55k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6088:17): [True: 1.55k, False: 0]
  ------------------
 6089|  1.55k|                auto max_width_view = take_width(rng, specs.precision);
 6090|  1.55k|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3939|  1.55k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  1.55k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  1.55k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  1.55k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 116, False: 1.43k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    116|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    116|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    116|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    116|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    116|    }                                                  \
  |  |  |  | 3938|  1.55k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  1.43k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|  1.43k|                                  .transform_error(make_eof_scan_error));
 6092|  1.43k|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6093|  1.55k|            }
 6094|      0|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|      0|                            make_eof_scan_error));
 6096|       |
 6097|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|      0|            return result_type{it, 0};
 6105|      0|        }
 6106|       |
 6107|    826|        return result_type{rng.begin(), 0};
 6108|  2.38k|    }
_ZN3scn2v44impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEb:
 5989|    478|{
 5990|    478|    using char_type = detail::char_t<Range>;
 5991|    478|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5992|       |
 5993|    478|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5993:9): [True: 478, False: 0]
  ------------------
 5994|    478|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5995|    478|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5996|       |
 5997|    478|        if (max_width == 0) {
  ------------------
  |  Branch (5997:13): [True: 0, False: 478]
  ------------------
 5998|      0|            auto it = read_while_code_unit(range, pred);
 5999|       |
 6000|      0|            if (want_skipped_width) {
  ------------------
  |  Branch (6000:17): [True: 0, False: 0]
  ------------------
 6001|      0|                auto prefix_width =
 6002|      0|                    static_cast<std::ptrdiff_t>(
 6003|      0|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 6004|      0|                    ranges::distance(range.begin(), it);
 6005|      0|                return result_type{it, prefix_width};
 6006|      0|            }
 6007|      0|            return result_type{it, 0};
 6008|      0|        }
 6009|       |
 6010|    478|        auto max_width_view = take_width(range, max_width);
 6011|    478|        auto w_it = read_while_code_unit(max_width_view, pred);
 6012|       |
 6013|    478|        if (want_skipped_width) {
  ------------------
  |  Branch (6013:13): [True: 478, False: 0]
  ------------------
 6014|    478|            return result_type{w_it.base(), max_width - w_it.count()};
 6015|    478|        }
 6016|      0|        return result_type{w_it.base(), 0};
 6017|    478|    }
 6018|       |
 6019|      0|    const auto fill_chars = fill.template get_code_units<char_type>();
 6020|      0|    if (max_width == 0) {
  ------------------
  |  Branch (6020:9): [True: 0, False: 0]
  ------------------
 6021|      0|        auto it = read_while_code_units(range, fill_chars);
 6022|       |
 6023|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (6023:13): [True: 0, False: 0]
  ------------------
 6024|      0|            auto prefix_width =
 6025|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 6026|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 6027|      0|            return result_type{it, prefix_width};
 6028|      0|        }
 6029|      0|        return result_type{it, 0};
 6030|      0|    }
 6031|       |
 6032|      0|    auto max_width_view = take_width(range, max_width);
 6033|      0|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 6034|       |
 6035|      0|    if (want_skipped_width) {
  ------------------
  |  Branch (6035:9): [True: 0, False: 0]
  ------------------
 6036|      0|        return result_type{w_it.base(), max_width - w_it.count()};
 6037|      0|    }
 6038|      0|    return result_type{w_it.base(), 0};
 6039|      0|}
_ZN3scn2v44impl12function_refIFbwES3_EC2IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_ST_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSJ_:
  742|    478|        : m_fptr([](storage fn,
  743|    478|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    478|              cvref<T> obj = *get<T>(fn);
  745|    478|              if constexpr (std::is_void_v<R>) {
  746|    478|                  obj(static_cast<decltype(args)>(args)...);
  747|    478|              }
  748|    478|              else {
  749|    478|                  return obj(static_cast<decltype(args)>(args)...);
  750|    478|              }
  751|    478|          }),
  752|    478|          m_storage(std::addressof(f))
  753|    478|    {
  754|    478|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_ST_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES15_w:
  743|    742|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    742|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    742|              else {
  749|    742|                  return obj(static_cast<decltype(args)>(args)...);
  750|    742|              }
  751|    742|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESI_lRKNS0_6detail9fill_typeEbEUlwE_EEDaNS3_7storageE:
  683|    742|    {
  684|    742|        if constexpr (std::is_const_v<T>) {
  685|    742|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    742|    }
_ZZN3scn2v44impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEbENKUlwE_clEw:
 5995|    742|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|    478|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    478|        {
  667|    478|        }
_ZN3scn2v44impl20read_while_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2074|    478|{
 2075|    478|    return read_until_code_unit(range, std::not_fn(pred));
 2076|    478|}
_ZN3scn2v44impl20read_until_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2055|    478|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|    478|    else {
 2060|    478|        auto first = range.begin();
 2061|    776|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 742, False: 34]
  ------------------
 2062|    742|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 444, False: 298]
  ------------------
 2063|    444|                return first;
 2064|    444|            }
 2065|    742|        }
 2066|     34|        return first;
 2067|    478|    }
 2068|    478|}
_ZNK3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE5beginEv:
 2920|  3.58k|    {
 2921|  3.58k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2922|  3.58k|                                      m_count};
 2923|  3.58k|    }
_ZNK3scn2v44impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEvE3getEv:
 2825|  13.3k|    {
 2826|  13.3k|        return view;
 2827|  13.3k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEC2ES6_SF_l:
 2480|  3.58k|        : m_current(x), m_end(s), m_count(n)
 2481|  3.58k|    {
 2482|  3.58k|    }
_ZN3scn2v44implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2891|  2.73k|        {
 2892|  2.73k|            return !(y == x);
 2893|  2.73k|        }
_ZN3scn2v44impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2878|  6.13k|        {
 2879|  6.13k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2879:21): [True: 266, False: 5.86k]
  |  Branch (2879:39): [True: 266, False: 0]
  ------------------
 2880|  6.13k|                   y.base() == x.m_end ||
  ------------------
  |  Branch (2880:20): [True: 0, False: 5.86k]
  ------------------
 2881|  6.13k|                   (y.count() == 1 && y.multibyte_left() == 0 &&
  ------------------
  |  Branch (2881:21): [True: 576, False: 5.29k]
  |  Branch (2881:39): [True: 576, False: 0]
  ------------------
 2882|  5.86k|                    y.is_current_double_wide());
  ------------------
  |  Branch (2882:21): [True: 0, False: 576]
  ------------------
 2883|  6.13k|        }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE14multibyte_leftEv:
 2520|    842|    {
 2521|    842|        return m_multibyte_left;
 2522|    842|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE22is_current_double_wideEv:
 2525|    576|    {
 2526|    576|        assert(count() != 0 || multibyte_left() != 0);
 2527|    576|        return _get_width_at_current_cp_start(
 2528|    576|                   _get_cp_length_at_current()) == 2;
 2529|    576|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE30_get_width_at_current_cp_startEl:
 2753|  2.71k|    {
 2754|  2.71k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  986|  2.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 2.71k]
  |  |  ------------------
  ------------------
 2755|      0|            return 0;
 2756|      0|        }
 2757|       |
 2758|  2.71k|        if (cplen == 1) {
  ------------------
  |  Branch (2758:13): [True: 2.71k, False: 0]
  ------------------
 2759|  2.71k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  | 1051|  2.71k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  2.71k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2760|  2.71k|            auto cp = static_cast<char32_t>(*m_current);
 2761|  2.71k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2762|  2.71k|        }
 2763|       |
 2764|      0|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2765|      0|                                           cplen);
 2766|      0|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2767|      0|            return 0;
 2768|      0|        }
 2769|       |
 2770|      0|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2771|      0|        return static_cast<difference_type>(
 2772|      0|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2773|      0|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE25_get_cp_length_at_currentEv:
 2747|  2.71k|    {
 2748|  2.71k|        return static_cast<difference_type>(
 2749|  2.71k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2750|  2.71k|    }
_ZNK3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE3endEv:
 2926|  6.13k|    {
 2927|  6.13k|        return sentinel<true>{m_base.get().end()};
 2928|  6.13k|    }
_ZN3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE8sentinelILb1EEC2ENSA_8sentinelILb1EEE:
 2859|  6.13k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
  ------------------
  |  | 1055|  6.13k|    static_cast<    \
  |  | 1056|  6.13k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEdeEv:
 2532|  4.43k|    {
 2533|  4.43k|        return *m_current;
 2534|  4.43k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEppEv:
 2541|  2.14k|    {
 2542|  2.14k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  | 1051|  2.14k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  2.14k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2543|  2.14k|        _increment_current();
 2544|  2.14k|        return *this;
 2545|  2.14k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE18_increment_currentEv:
 2776|  2.14k|    {
 2777|  2.14k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2777:13): [True: 2.14k, False: 0]
  ------------------
 2778|  2.14k|            auto cplen = _get_cp_length_at_current();
 2779|  2.14k|            m_multibyte_left = cplen - 1;
 2780|  2.14k|            m_count -= _get_width_at_current_cp_start(cplen);
 2781|  2.14k|        }
 2782|      0|        else {
 2783|      0|            --m_multibyte_left;
 2784|      0|        }
 2785|       |
 2786|  2.14k|        ++m_current;
 2787|  2.14k|    }
_ZNK3scn2v44impl14_take_width_fnclINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEEDTtlS4_fp_fp0_EERKT_l:
 2942|  2.03k|    {
 2943|  2.03k|        return take_width_view{r, n};
 2944|  2.03k|    }
_ZN3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEEC2ERKSA_l:
 2910|  2.03k|        : m_base(base), m_count(count)
 2911|  2.03k|    {
 2912|  2.03k|    }
_ZN3scn2v44impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEvEC2ERKSB_:
 2822|  2.03k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v44impl23skip_classic_whitespaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3065|  1.55k|{
 3066|  1.55k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 1.55k, False: 0]
  ------------------
 3067|  1.55k|        auto it = read_while_classic_space(range);
 3068|  1.55k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|  1.55k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  1.55k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 116, False: 1.43k]
  |  |  ------------------
  ------------------
 3070|    116|            return unexpected(e);
 3071|    116|        }
 3072|       |
 3073|  1.43k|        return it;
 3074|  1.55k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|  1.55k|}
_ZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2215|  1.55k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|  1.55k|    else {
 2225|  1.55k|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|  1.55k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  1.55k|            return detail::is_cp_space(cp);
 2238|  1.55k|        });
 2239|  1.55k|    }
 2240|  1.55k|}
_ZN3scn2v44impl21read_while_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2180|  1.55k|{
 2181|  1.55k|    return read_until_code_point(range, std::not_fn(pred));
 2182|  1.55k|}
_ZN3scn2v44impl21read_until_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2159|  1.55k|{
 2160|  1.55k|    auto it = range.begin();
 2161|  1.96k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 1.84k, False: 116]
  ------------------
 2162|  1.84k|        const auto val =
 2163|  1.84k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  1.84k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  985|  1.84k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 1.84k, False: 0]
  |  |  ------------------
  ------------------
 2165|  1.84k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  1.84k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  1.84k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 1.43k, False: 406]
  ------------------
 2168|  1.43k|                return it;
 2169|  1.43k|            }
 2170|  1.84k|        }
 2171|    406|        it = val.iterator;
 2172|    406|    }
 2173|       |
 2174|    116|    return it;
 2175|  1.55k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISP_EEE4typeEEESP_:
 1997|  1.84k|{
 1998|  1.84k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1051|  1.84k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.84k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  1.84k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  1.84k|    auto it = range.begin();
 2002|  1.84k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  1.84k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  986|  1.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 1.84k]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|  1.84k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 1.84k, False: 0]
  ------------------
 2011|  1.84k|        ++it;
 2012|  1.84k|        return {it, string_type(1, *range.begin())};
 2013|  1.84k|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|  1.84k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEbT_:
  944|  3.39k|{
  945|  3.39k|    return is_range_eof(r.begin(), r.end());
  946|  3.39k|}
_ZN3scn2v44impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS8_ISE_E8sentinelILb1EEEEEbT_T0_:
  928|  3.39k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  3.39k|    {
  938|  3.39k|        return begin == end;
  939|  3.39k|    }
  940|  3.39k|}
_ZNK3scn2v44impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEwE8is_validEv:
 1988|  1.84k|    {
 1989|  1.84k|        return !codepoint.empty();
 1990|  1.84k|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|  1.55k|        : m_fptr([](storage fn,
  743|  1.55k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.55k|              cvref<T> obj = *get<T>(fn);
  745|  1.55k|              if constexpr (std::is_void_v<R>) {
  746|  1.55k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.55k|              }
  748|  1.55k|              else {
  749|  1.55k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.55k|              }
  751|  1.55k|          }),
  752|  1.55k|          m_storage(std::addressof(f))
  753|  1.55k|    {
  754|  1.55k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  1.84k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.84k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.84k|              else {
  749|  1.84k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.84k|              }
  751|  1.84k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS6_INS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  1.84k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.84k|        else if constexpr (std::is_object_v<T>) {
  688|  1.84k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.84k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2236|  1.84k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  1.84k|            return detail::is_cp_space(cp);
 2238|  1.84k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  1.55k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.55k|        {
  662|  1.55k|        }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_9eof_errorET_:
  950|  1.55k|{
  951|  1.55k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  986|  1.55k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 116, False: 1.43k]
  |  |  ------------------
  ------------------
  952|    116|        return eof_error::eof;
  953|    116|    }
  954|  1.43k|    return eof_error::good;
  955|  1.55k|}
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE4baseEv:
 2512|  7.78k|    {
 2513|  7.78k|        return m_current;
 2514|  7.78k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE5countEv:
 2516|  14.4k|    {
 2517|  14.4k|        return m_count;
 2518|  14.4k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6074|  4.83k|    {
 6075|  4.83k|        const bool need_skipped_width =
 6076|  4.83k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6076:13): [True: 2.59k, False: 2.24k]
  |  Branch (6076:33): [True: 0, False: 2.24k]
  ------------------
 6077|  4.83k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6078|       |
 6079|       |        // Read prefix
 6080|  4.83k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6080:13): [True: 166, False: 4.67k]
  ------------------
 6081|  4.83k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6081:13): [True: 544, False: 4.12k]
  ------------------
 6082|    710|            return skip_fill(rng, specs.precision, specs.fill,
 6083|    710|                             need_skipped_width);
 6084|    710|        }
 6085|  4.12k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6085:13): [True: 3.75k, False: 370]
  |  Branch (6085:56): [True: 2.77k, False: 980]
  ------------------
 6086|       |            // Default alignment:
 6087|       |            // Skip preceding whitespace, if required by the reader
 6088|  2.77k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6088:17): [True: 0, False: 2.77k]
  ------------------
 6089|      0|                auto max_width_view = take_width(rng, specs.precision);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6093|      0|            }
 6094|  5.55k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3939|  2.77k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  2.77k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  2.77k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  2.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 2.77k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  2.77k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  2.77k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|  5.55k|                            make_eof_scan_error));
 6096|       |
 6097|  5.55k|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 1.91k, False: 866]
  ------------------
 6098|  1.91k|                return result_type{
 6099|  1.91k|                    it,
 6100|  1.91k|                    calculate_text_width(make_contiguous_buffer(
 6101|  1.91k|                                             ranges::subrange{rng.begin(), it})
 6102|  1.91k|                                             .view())};
 6103|  1.91k|            }
 6104|    866|            return result_type{it, 0};
 6105|  5.55k|        }
 6106|       |
 6107|  1.35k|        return result_type{rng.begin(), 0};
 6108|  4.12k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6116|  2.60k|    {
 6117|  2.60k|        const bool need_skipped_width =
 6118|  2.60k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6118:13): [True: 708, False: 1.89k]
  |  Branch (6118:33): [True: 1.02k, False: 870]
  ------------------
 6119|  2.60k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6120|       |
 6121|  2.60k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6121:13): [True: 128, False: 2.47k]
  ------------------
 6122|  2.60k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6122:13): [True: 570, False: 1.90k]
  ------------------
 6123|    698|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6123:17): [True: 244, False: 454]
  ------------------
 6124|    698|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6124:17): [True: 136, False: 108]
  ------------------
 6125|    136|                return result_type{rng.begin(), 0};
 6126|    136|            }
 6127|    562|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6128|    562|                             specs.fill, need_skipped_width);
 6129|    698|        }
 6130|  1.90k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6130:13): [True: 1.82k, False: 88]
  ------------------
 6131|  1.90k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6131:13): [True: 1.51k, False: 306]
  ------------------
 6132|  1.90k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6132:15): [True: 504, False: 1.01k]
  |  Branch (6132:35): [True: 388, False: 116]
  ------------------
 6133|  1.51k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6133:15): [True: 646, False: 480]
  ------------------
 6134|  1.12k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6134:15): [True: 494, False: 152]
  ------------------
 6135|    882|            if (specs.precision != 0) {
  ------------------
  |  Branch (6135:17): [True: 494, False: 388]
  ------------------
 6136|    494|                const auto initial_width =
 6137|    494|                    specs.precision - prefix_width - value_width;
 6138|    494|                auto max_width_view = take_width(rng, initial_width);
 6139|    494|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3939|    494|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    494|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    494|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    494|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 494]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|    494|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    494|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6140|    494|                                  .transform_error(make_eof_scan_error));
 6141|    494|                return result_type{w_it.base(), initial_width - w_it.count()};
 6142|    494|            }
 6143|    776|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3939|    388|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    388|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    388|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    388|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 388]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|    388|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    388|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|    776|                            make_eof_scan_error));
 6145|       |
 6146|    776|            if (need_skipped_width) {
  ------------------
  |  Branch (6146:17): [True: 388, False: 0]
  ------------------
 6147|    388|                return result_type{
 6148|    388|                    it,
 6149|    388|                    calculate_text_width(make_contiguous_buffer(
 6150|    388|                                             ranges::subrange{rng.begin(), it})
 6151|    388|                                             .view())};
 6152|    388|            }
 6153|      0|            return result_type{it, 0};
 6154|    776|        }
 6155|  1.02k|        return result_type{rng.begin(), 0};
 6156|  1.90k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIiEENS0_13scan_expectedIS9_EERT_:
 6226|  1.43k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  1.43k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  1.43k|            auto rd = make_reader<T, char_type>();
 6232|  1.43k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3929|  1.43k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  1.43k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 702, False: 732]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|    702|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|    702|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|    702|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|    702|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    702|    }
  ------------------
 6233|    732|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  1.43k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6161|    732|    {
 6162|    732|        const bool need_skipped_width =
 6163|    732|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 258, False: 474]
  |  Branch (6163:33): [True: 264, False: 210]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|    732|        auto it = rng.begin();
 6167|    732|        std::ptrdiff_t prefix_width = 0;
 6168|    732|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 266, False: 466]
  ------------------
 6169|    266|            auto max_width_view = take_width(rng, specs.precision);
 6170|    266|            SCN_TRY(prefix_result,
  ------------------
  |  | 3939|    266|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    266|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    266|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    266|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 20, False: 246]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     20|    }                                                  \
  |  |  |  | 3938|    266|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    246|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|    246|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|    246|            it = prefix_result.first.base();
 6173|    246|            prefix_width = prefix_result.second;
 6174|    246|        }
 6175|    466|        else {
 6176|    466|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3939|    466|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    466|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    466|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    466|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 466]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|    466|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    466|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|    466|            std::tie(it, prefix_width) = prefix_result;
 6178|    466|        }
 6179|    712|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|    712|        std::ptrdiff_t value_width = 0;
 6183|    712|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 246, False: 466]
  ------------------
 6184|    246|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 2, False: 244]
  ------------------
 6185|      2|                return detail::unexpected_scan_error(
 6186|      2|                    scan_error::invalid_fill,
 6187|      2|                    "Too many fill characters before value, "
 6188|      2|                    "precision exceeded before reading value");
 6189|      2|            }
 6190|       |
 6191|    244|            const auto initial_width = specs.precision - prefix_width;
 6192|    244|            auto max_width_view =
 6193|    244|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|    244|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3939|    244|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    244|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    244|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    244|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 222, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    222|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    222|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    222|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    222|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    222|    }                                                  \
  |  |  |  | 3938|    244|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|     22|            it = w_it.base();
 6196|     22|            value_width = initial_width - w_it.count();
 6197|     22|        }
 6198|    466|        else {
 6199|    466|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3934|    466|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|    466|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|    466|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 426, False: 40]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|    426|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|    426|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|    426|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|    426|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    426|    }                                                  \
  |  | 3938|    466|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|    466|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|     40|                                             specs, value, loc));
 6201|       |
 6202|     40|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 8, False: 32]
  ------------------
 6203|      8|                value_width = calculate_text_width(
 6204|      8|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      8|                        .view());
 6206|      8|            }
 6207|     40|        }
 6208|       |
 6209|       |        // Read postfix
 6210|     62|        std::ptrdiff_t postfix_width = 0;
 6211|     62|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 62, False: 0]
  ------------------
 6212|     62|            SCN_TRY(postfix_result,
  ------------------
  |  | 3939|     62|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|     62|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|     62|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|     62|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 62]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|     62|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|     62|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|     62|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|     62|                                 rd.skip_ws_before_read(), prefix_width,
 6215|     62|                                 value_width));
 6216|     62|            std::tie(it, postfix_width) = postfix_result;
 6217|     62|        }
 6218|       |
 6219|     62|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3929|     62|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|     62|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 4, False: 58]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      4|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      4|    }
  ------------------
 6220|     62|            specs, prefix_width, value_width, postfix_width));
 6221|     58|        return it;
 6222|     62|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIjEENS0_13scan_expectedIS9_EERT_:
 6226|  1.43k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  1.43k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  1.43k|            auto rd = make_reader<T, char_type>();
 6232|  1.43k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3929|  1.43k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  1.43k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 702, False: 732]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|    702|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|    702|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|    702|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|    702|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    702|    }
  ------------------
 6233|    732|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  1.43k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6161|    732|    {
 6162|    732|        const bool need_skipped_width =
 6163|    732|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 258, False: 474]
  |  Branch (6163:33): [True: 264, False: 210]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|    732|        auto it = rng.begin();
 6167|    732|        std::ptrdiff_t prefix_width = 0;
 6168|    732|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 266, False: 466]
  ------------------
 6169|    266|            auto max_width_view = take_width(rng, specs.precision);
 6170|    266|            SCN_TRY(prefix_result,
  ------------------
  |  | 3939|    266|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    266|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    266|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    266|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 20, False: 246]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     20|    }                                                  \
  |  |  |  | 3938|    266|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    246|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|    246|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|    246|            it = prefix_result.first.base();
 6173|    246|            prefix_width = prefix_result.second;
 6174|    246|        }
 6175|    466|        else {
 6176|    466|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3939|    466|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    466|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    466|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    466|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 466]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|    466|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    466|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|    466|            std::tie(it, prefix_width) = prefix_result;
 6178|    466|        }
 6179|    712|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|    712|        std::ptrdiff_t value_width = 0;
 6183|    712|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 246, False: 466]
  ------------------
 6184|    246|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 2, False: 244]
  ------------------
 6185|      2|                return detail::unexpected_scan_error(
 6186|      2|                    scan_error::invalid_fill,
 6187|      2|                    "Too many fill characters before value, "
 6188|      2|                    "precision exceeded before reading value");
 6189|      2|            }
 6190|       |
 6191|    244|            const auto initial_width = specs.precision - prefix_width;
 6192|    244|            auto max_width_view =
 6193|    244|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|    244|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3939|    244|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    244|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    244|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    244|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 222, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    222|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    222|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    222|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    222|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    222|    }                                                  \
  |  |  |  | 3938|    244|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|     22|            it = w_it.base();
 6196|     22|            value_width = initial_width - w_it.count();
 6197|     22|        }
 6198|    466|        else {
 6199|    466|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3934|    466|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|    466|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|    466|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 426, False: 40]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|    426|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|    426|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|    426|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|    426|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    426|    }                                                  \
  |  | 3938|    466|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|    466|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|     40|                                             specs, value, loc));
 6201|       |
 6202|     40|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 8, False: 32]
  ------------------
 6203|      8|                value_width = calculate_text_width(
 6204|      8|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      8|                        .view());
 6206|      8|            }
 6207|     40|        }
 6208|       |
 6209|       |        // Read postfix
 6210|     62|        std::ptrdiff_t postfix_width = 0;
 6211|     62|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 62, False: 0]
  ------------------
 6212|     62|            SCN_TRY(postfix_result,
  ------------------
  |  | 3939|     62|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|     62|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|     62|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|     62|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 62]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|     62|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|     62|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|     62|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|     62|                                 rd.skip_ws_before_read(), prefix_width,
 6215|     62|                                 value_width));
 6216|     62|            std::tie(it, postfix_width) = postfix_result;
 6217|     62|        }
 6218|       |
 6219|     62|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3929|     62|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|     62|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 4, False: 58]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      4|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      4|    }
  ------------------
 6220|     62|            specs, prefix_width, value_width, postfix_width));
 6221|     58|        return it;
 6222|     62|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIPvEENS0_13scan_expectedIS9_EERT_:
 6226|  1.36k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  1.36k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  1.36k|            auto rd = make_reader<T, char_type>();
 6232|  1.36k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3929|  1.36k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  1.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 778, False: 590]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|    778|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|    778|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|    778|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|    778|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    778|    }
  ------------------
 6233|    590|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  1.36k|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIwE11check_specsERKNS0_6detail12format_specsE:
 5791|  1.36k|    {
 5792|  1.36k|        reader_error_handler eh{};
 5793|  1.36k|        detail::check_pointer_type_specs(specs, eh);
 5794|  1.36k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  986|  1.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 778, False: 590]
  |  |  ------------------
  ------------------
 5795|    778|            return detail::unexpected_scan_error(
 5796|    778|                scan_error::invalid_format_string, eh.m_msg);
 5797|    778|        }
 5798|    590|        return {};
 5799|  1.36k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_23reader_impl_for_voidptrIwEESA_PvEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 6161|    590|    {
 6162|    590|        const bool need_skipped_width =
 6163|    590|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 248, False: 342]
  |  Branch (6163:33): [True: 198, False: 144]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|    590|        auto it = rng.begin();
 6167|    590|        std::ptrdiff_t prefix_width = 0;
 6168|    590|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 200, False: 390]
  ------------------
 6169|    200|            auto max_width_view = take_width(rng, specs.precision);
 6170|    200|            SCN_TRY(prefix_result,
  ------------------
  |  | 3939|    200|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    200|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    200|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    200|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 8, False: 192]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      8|    }                                                  \
  |  |  |  | 3938|    200|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    192|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|    192|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|    192|            it = prefix_result.first.base();
 6173|    192|            prefix_width = prefix_result.second;
 6174|    192|        }
 6175|    390|        else {
 6176|    390|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3939|    390|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    390|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    390|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    390|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 390]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|    390|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    390|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|    390|            std::tie(it, prefix_width) = prefix_result;
 6178|    390|        }
 6179|    582|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|    582|        std::ptrdiff_t value_width = 0;
 6183|    582|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 192, False: 390]
  ------------------
 6184|    192|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 2, False: 190]
  ------------------
 6185|      2|                return detail::unexpected_scan_error(
 6186|      2|                    scan_error::invalid_fill,
 6187|      2|                    "Too many fill characters before value, "
 6188|      2|                    "precision exceeded before reading value");
 6189|      2|            }
 6190|       |
 6191|    190|            const auto initial_width = specs.precision - prefix_width;
 6192|    190|            auto max_width_view =
 6193|    190|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|    190|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3939|    190|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    190|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    190|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    190|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 180, False: 10]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    180|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    180|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    180|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    180|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    180|    }                                                  \
  |  |  |  | 3938|    190|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|     10|            it = w_it.base();
 6196|     10|            value_width = initial_width - w_it.count();
 6197|     10|        }
 6198|    390|        else {
 6199|    390|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3934|    390|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|    390|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|    390|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 366, False: 24]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|    366|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|    366|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|    366|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|    366|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    366|    }                                                  \
  |  | 3938|    390|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|    390|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|     24|                                             specs, value, loc));
 6201|       |
 6202|     24|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 8, False: 16]
  ------------------
 6203|      8|                value_width = calculate_text_width(
 6204|      8|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      8|                        .view());
 6206|      8|            }
 6207|     24|        }
 6208|       |
 6209|       |        // Read postfix
 6210|     34|        std::ptrdiff_t postfix_width = 0;
 6211|     34|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 34, False: 0]
  ------------------
 6212|     34|            SCN_TRY(postfix_result,
  ------------------
  |  | 3939|     34|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|     34|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|     34|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 34]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|     34|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|     34|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|     34|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|     34|                                 rd.skip_ws_before_read(), prefix_width,
 6215|     34|                                 value_width));
 6216|     34|            std::tie(it, postfix_width) = postfix_result;
 6217|     34|        }
 6218|       |
 6219|     34|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3929|     34|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 4, False: 30]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      4|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      4|    }
  ------------------
 6220|     34|            specs, prefix_width, value_width, postfix_width));
 6221|     30|        return it;
 6222|     34|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERPvNSN_10locale_refE:
 5821|    190|    {
 5822|    190|        SCN_UNUSED(specs);
  ------------------
  |  | 1036|    190|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5823|    190|        return read_default(range, value, loc);
 5824|    190|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIwE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RPvNS0_6detail10locale_refE:
 5804|    190|    {
 5805|    190|        detail::format_specs specs{};
 5806|    190|        specs.type = detail::presentation_type::int_hex;
 5807|       |
 5808|    190|        std::uintptr_t intvalue{};
 5809|    190|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3939|    190|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    190|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    190|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    190|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 180, False: 10]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    180|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    180|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    180|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    180|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    180|    }                                                  \
  |  |  |  | 3938|    190|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5810|     10|                                                                intvalue, loc));
 5811|     10|        value = reinterpret_cast<void*>(intvalue);
 5812|     10|        return result;
 5813|    190|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERPvNSL_10locale_refE:
 5821|    390|    {
 5822|    390|        SCN_UNUSED(specs);
  ------------------
  |  | 1036|    390|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5823|    390|        return read_default(range, value, loc);
 5824|    390|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIbEENS0_13scan_expectedIS9_EERT_:
 6226|  1.43k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  1.43k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  1.43k|            auto rd = make_reader<T, char_type>();
 6232|  1.43k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3929|  1.43k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  1.43k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 602, False: 832]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|    602|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|    602|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|    602|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|    602|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    602|    }
  ------------------
 6233|    832|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  1.43k|    }
_ZN3scn2v44impl11reader_baseINS1_20reader_impl_for_boolIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3155|  1.43k|    {
 3156|  1.43k|        reader_error_handler eh{};
 3157|  1.43k|        get_derived().check_specs_impl(specs, eh);
 3158|  1.43k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  986|  1.43k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 602, False: 832]
  |  |  ------------------
  ------------------
 3159|    602|            return detail::unexpected_scan_error(
 3160|    602|                scan_error::invalid_format_string, eh.m_msg);
 3161|    602|        }
 3162|    832|        return {};
 3163|  1.43k|    }
_ZN3scn2v44impl11reader_baseINS1_20reader_impl_for_boolIwEEwE11get_derivedEv:
 3167|  1.43k|    {
 3168|  1.43k|        return static_cast<Derived&>(*this);
 3169|  1.43k|    }
_ZN3scn2v44impl20reader_impl_for_boolIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5534|  1.43k|    {
 5535|  1.43k|        detail::check_bool_type_specs(specs, eh);
 5536|  1.43k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_20reader_impl_for_boolIwEESA_bEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6161|    832|    {
 6162|    832|        const bool need_skipped_width =
 6163|    832|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 276, False: 556]
  |  Branch (6163:33): [True: 300, False: 256]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|    832|        auto it = rng.begin();
 6167|    832|        std::ptrdiff_t prefix_width = 0;
 6168|    832|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 304, False: 528]
  ------------------
 6169|    304|            auto max_width_view = take_width(rng, specs.precision);
 6170|    304|            SCN_TRY(prefix_result,
  ------------------
  |  | 3939|    304|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    304|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    304|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    304|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 22, False: 282]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     22|    }                                                  \
  |  |  |  | 3938|    304|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    282|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|    282|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|    282|            it = prefix_result.first.base();
 6173|    282|            prefix_width = prefix_result.second;
 6174|    282|        }
 6175|    528|        else {
 6176|    528|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3939|    528|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    528|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    528|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    528|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 528]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|    528|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    528|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|    528|            std::tie(it, prefix_width) = prefix_result;
 6178|    528|        }
 6179|    810|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|    810|        std::ptrdiff_t value_width = 0;
 6183|    810|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 282, False: 528]
  ------------------
 6184|    282|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 4, False: 278]
  ------------------
 6185|      4|                return detail::unexpected_scan_error(
 6186|      4|                    scan_error::invalid_fill,
 6187|      4|                    "Too many fill characters before value, "
 6188|      4|                    "precision exceeded before reading value");
 6189|      4|            }
 6190|       |
 6191|    278|            const auto initial_width = specs.precision - prefix_width;
 6192|    278|            auto max_width_view =
 6193|    278|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|    278|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3939|    278|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    278|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    278|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    278|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 256, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    256|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    256|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    256|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    256|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    256|    }                                                  \
  |  |  |  | 3938|    278|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|     22|            it = w_it.base();
 6196|     22|            value_width = initial_width - w_it.count();
 6197|     22|        }
 6198|    528|        else {
 6199|    528|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3934|    528|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|    528|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|    528|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 488, False: 40]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|    488|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|    488|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|    488|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|    488|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    488|    }                                                  \
  |  | 3938|    528|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|    528|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|     40|                                             specs, value, loc));
 6201|       |
 6202|     40|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 8, False: 32]
  ------------------
 6203|      8|                value_width = calculate_text_width(
 6204|      8|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      8|                        .view());
 6206|      8|            }
 6207|     40|        }
 6208|       |
 6209|       |        // Read postfix
 6210|     62|        std::ptrdiff_t postfix_width = 0;
 6211|     62|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 62, False: 0]
  ------------------
 6212|     62|            SCN_TRY(postfix_result,
  ------------------
  |  | 3939|     62|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|     62|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|     62|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|     62|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 62]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|     62|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|     62|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|     62|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|     62|                                 rd.skip_ws_before_read(), prefix_width,
 6215|     62|                                 value_width));
 6216|     62|            std::tie(it, postfix_width) = postfix_result;
 6217|     62|        }
 6218|       |
 6219|     62|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3929|     62|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|     62|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 4, False: 58]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      4|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      4|    }
  ------------------
 6220|     62|            specs, prefix_width, value_width, postfix_width));
 6221|     58|        return it;
 6222|     62|    }
_ZNK3scn2v44impl20reader_impl_for_boolIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERbNSN_10locale_refE:
 5553|    278|    {
 5554|    278|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5555|       |
 5556|    278|#if !SCN_DISABLE_LOCALE
 5557|    278|        if (specs.localized) {
  ------------------
  |  Branch (5557:13): [True: 28, False: 250]
  ------------------
 5558|     28|            return rd.read_localized(range, loc, value);
 5559|     28|        }
 5560|    250|#endif
 5561|       |
 5562|    250|        return rd.read_classic(range, value);
 5563|    278|    }
_ZN3scn2v44impl20reader_impl_for_boolIwE11get_optionsERKNS0_6detail12format_specsE:
 5566|    806|    {
 5567|    806|        SCN_GCC_COMPAT_PUSH
 5568|    806|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 5569|       |
 5570|    806|        switch (specs.type) {
 5571|     94|            case detail::presentation_type::string:
  ------------------
  |  Branch (5571:13): [True: 94, False: 712]
  ------------------
 5572|     94|                return bool_reader_base::allow_text;
 5573|       |
 5574|     24|            case detail::presentation_type::int_generic:
  ------------------
  |  Branch (5574:13): [True: 24, False: 782]
  ------------------
 5575|     48|            case detail::presentation_type::int_binary:
  ------------------
  |  Branch (5575:13): [True: 24, False: 782]
  ------------------
 5576|     56|            case detail::presentation_type::int_decimal:
  ------------------
  |  Branch (5576:13): [True: 8, False: 798]
  ------------------
 5577|     72|            case detail::presentation_type::int_hex:
  ------------------
  |  Branch (5577:13): [True: 16, False: 790]
  ------------------
 5578|     92|            case detail::presentation_type::int_octal:
  ------------------
  |  Branch (5578:13): [True: 20, False: 786]
  ------------------
 5579|    110|            case detail::presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (5579:13): [True: 18, False: 788]
  ------------------
 5580|    110|                return bool_reader_base::allow_numeric;
 5581|       |
 5582|    602|            default:
  ------------------
  |  Branch (5582:13): [True: 602, False: 204]
  ------------------
 5583|    602|                return bool_reader_base::allow_text |
 5584|    602|                       bool_reader_base::allow_numeric;
 5585|    806|        }
 5586|       |
 5587|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 5588|    806|    }
_ZNK3scn2v44impl11bool_readerIwE14read_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refERb:
 5464|     28|    {
 5465|     28|        scan_error err{scan_error::invalid_scanned_value,
 5466|     28|                       "Failed to read boolean"};
 5467|       |
 5468|     28|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5468:13): [True: 26, False: 2]
  ------------------
 5469|     26|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5469:22): [True: 4, False: 22]
  ------------------
 5470|      4|                return *r;
 5471|      4|            }
 5472|     22|            else {
 5473|     22|                err = r.error();
 5474|     22|            }
 5475|     26|        }
 5476|       |
 5477|     24|        if (m_options & allow_text) {
  ------------------
  |  Branch (5477:13): [True: 14, False: 10]
  ------------------
 5478|     14|            auto stdloc = loc.get<std::locale>();
 5479|     14|            const auto& numpunct =
 5480|     14|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5481|     14|            const auto truename = numpunct.truename();
 5482|     14|            const auto falsename = numpunct.falsename();
 5483|       |
 5484|     14|            if (auto r =
  ------------------
  |  Branch (5484:22): [True: 0, False: 14]
  ------------------
 5485|     14|                    read_textual_custom(range, value, truename, falsename)) {
 5486|      0|                return *r;
 5487|      0|            }
 5488|     14|            else {
 5489|     14|                err = r.error();
 5490|     14|            }
 5491|     14|        }
 5492|       |
 5493|     24|        return unexpected(err);
 5494|     24|    }
_ZNK3scn2v44impl16bool_reader_base12read_numericINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5420|    244|    {
 5421|    244|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5421:18): [True: 22, False: 222]
  ------------------
 5422|     22|            value = false;
 5423|     22|            return *r;
 5424|     22|        }
 5425|    222|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5425:18): [True: 0, False: 222]
  ------------------
 5426|      0|            value = true;
 5427|      0|            return *r;
 5428|      0|        }
 5429|       |
 5430|    222|        return detail::unexpected_scan_error(
 5431|    222|            scan_error::invalid_scanned_value,
 5432|    222|            "Failed to read numeric boolean value: No match");
 5433|    222|    }
_ZN3scn2v44impl23read_matching_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NDTcl4implISF_EEE4typeE:
 2245|    466|{
 2246|    466|    auto it = read_code_unit(range);
 2247|    466|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  986|    466|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 466]
  |  |  ------------------
  ------------------
 2248|      0|        return unexpected(make_eof_parse_error(it.error()));
 2249|      0|    }
 2250|       |
 2251|    466|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  986|    466|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 444, False: 22]
  |  |  ------------------
  ------------------
 2252|    466|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|    444|        return unexpected(parse_error::error);
 2254|    444|    }
 2255|       |
 2256|     22|    return *it;
 2257|    466|}
_ZNK3scn2v44impl11bool_readerIwE19read_textual_customINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RbNSF_17basic_string_viewIwNSF_11char_traitsIwEEEESR_:
 5504|     14|    {
 5505|     14|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5506|     14|        const auto shorter = std::pair{
 5507|     14|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5507:13): [True: 14, False: 0]
  ------------------
 5508|     14|        const auto longer = std::pair{
 5509|     14|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5509:13): [True: 0, False: 14]
  ------------------
 5510|       |
 5511|     14|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5511:18): [True: 0, False: 14]
  ------------------
 5512|      0|            value = shorter.second;
 5513|      0|            return *r;
 5514|      0|        }
 5515|     14|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5515:18): [True: 0, False: 14]
  ------------------
 5516|      0|            value = longer.second;
 5517|      0|            return *r;
 5518|      0|        }
 5519|       |
 5520|     14|        return detail::unexpected_scan_error(
 5521|     14|            scan_error::invalid_scanned_value,
 5522|     14|            "Failed to read textual boolean: No match");
 5523|     14|    }
_ZN3scn2v44impl20read_matching_stringINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewINDTcl4implISF_EEE4typeENSD_11char_traitsISN_EEEE:
 2278|     28|{
 2279|     28|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3939|     28|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|     28|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|     28|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|     28|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 18, False: 10]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     18|    }                                                  \
  |  |  |  | 3938|     28|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2280|     10|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2281|     10|                    .transform_error(make_eof_parse_error));
 2282|       |
 2283|     10|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2284|     10|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  986|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 10, False: 0]
  |  |  ------------------
  ------------------
 2285|     10|        return unexpected(parse_error::error);
 2286|     10|    }
 2287|      0|    return it;
 2288|     10|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_l:
 1955|    444|{
 1956|    444|    SCN_EXPECT(count >= 0);
  ------------------
  |  | 1051|    444|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    444|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|    444|    else {
 1967|    444|        auto it = range.begin();
 1968|    444|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 0, False: 444]
  ------------------
 1969|      0|            return ranges::next(it, count);
 1970|      0|        }
 1971|       |
 1972|  2.14k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 1.81k, False: 326]
  ------------------
 1973|  1.81k|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 118, False: 1.70k]
  ------------------
 1974|    118|                return unexpected(eof_error::eof);
 1975|    118|            }
 1976|  1.81k|        }
 1977|       |
 1978|    326|        return it;
 1979|    444|    }
 1980|    444|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEmT_:
 1095|    444|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|       |                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|       |        else {
 1107|       |            if (r.begin().stores_parent()) {
 1108|       |                return static_cast<size_t>(
 1109|       |                    r.begin().parent()->chars_available() -
 1110|       |                    r.begin().position());
 1111|       |            }
 1112|       |            return r.begin().contiguous_segment().size();
 1113|       |        }
 1114|       |    }
 1115|    444|    else {
 1116|    444|        return 0;
 1117|    444|    }
 1118|    444|}
_ZNK3scn2v44impl16bool_reader_base12read_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5391|    250|    {
 5392|    250|        scan_error err{scan_error::invalid_scanned_value,
 5393|    250|                       "Failed to read boolean"};
 5394|       |
 5395|    250|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5395:13): [True: 218, False: 32]
  ------------------
 5396|    218|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5396:22): [True: 18, False: 200]
  ------------------
 5397|     18|                return *r;
 5398|     18|            }
 5399|    200|            else {
 5400|    200|                err = r.error();
 5401|    200|            }
 5402|    218|        }
 5403|       |
 5404|    232|        if (m_options & allow_text) {
  ------------------
  |  Branch (5404:13): [True: 208, False: 24]
  ------------------
 5405|    208|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5405:22): [True: 0, False: 208]
  ------------------
 5406|      0|                return *r;
 5407|      0|            }
 5408|    208|            else {
 5409|    208|                err = r.error();
 5410|    208|            }
 5411|    208|        }
 5412|       |
 5413|    232|        return unexpected(err);
 5414|    232|    }
_ZNK3scn2v44impl16bool_reader_base20read_textual_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5438|    208|    {
 5439|    208|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5439:18): [True: 0, False: 208]
  ------------------
 5440|      0|            value = true;
 5441|      0|            return *r;
 5442|      0|        }
 5443|    208|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5443:18): [True: 0, False: 208]
  ------------------
 5444|      0|            value = false;
 5445|      0|            return *r;
 5446|      0|        }
 5447|       |
 5448|    208|        return detail::unexpected_scan_error(
 5449|    208|            scan_error::invalid_scanned_value,
 5450|    208|            "Failed to read textual boolean value: No match");
 5451|    208|    }
_ZN3scn2v44impl28read_matching_string_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2293|    416|{
 2294|    416|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3939|    416|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    416|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    416|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    416|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 100, False: 316]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    100|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    100|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    100|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    100|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    100|    }                                                  \
  |  |  |  | 3938|    416|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    316|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2295|    316|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2296|    316|                    .transform_error(make_eof_parse_error));
 2297|       |
 2298|       |    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2299|       |        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2300|       |        if (SCN_UNLIKELY(sv.view() != str)) {
 2301|       |            return unexpected(parse_error::error);
 2302|       |        }
 2303|       |        return it;
 2304|       |    }
 2305|    316|    else {
 2306|    316|        auto range_it = range.begin();
 2307|    316|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
  ------------------
  |  Branch (2307:28): [True: 316, False: 0]
  ------------------
 2308|    316|            if (SCN_UNLIKELY(*range_it !=
  ------------------
  |  |  986|    316|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 316, False: 0]
  |  |  ------------------
  ------------------
 2309|    316|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2310|    316|                return unexpected(parse_error::error);
 2311|    316|            }
 2312|    316|        }
 2313|      0|        return it;
 2314|    316|    }
 2315|    316|}
_ZNK3scn2v44impl20reader_impl_for_boolIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERbNSL_10locale_refE:
 5553|    528|    {
 5554|    528|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5555|       |
 5556|    528|#if !SCN_DISABLE_LOCALE
 5557|    528|        if (specs.localized) {
  ------------------
  |  Branch (5557:13): [True: 32, False: 496]
  ------------------
 5558|     32|            return rd.read_localized(range, loc, value);
 5559|     32|        }
 5560|    496|#endif
 5561|       |
 5562|    496|        return rd.read_classic(range, value);
 5563|    528|    }
_ZNK3scn2v44impl11bool_readerIwE14read_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refERb:
 5464|     32|    {
 5465|     32|        scan_error err{scan_error::invalid_scanned_value,
 5466|     32|                       "Failed to read boolean"};
 5467|       |
 5468|     32|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5468:13): [True: 30, False: 2]
  ------------------
 5469|     30|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5469:22): [True: 6, False: 24]
  ------------------
 5470|      6|                return *r;
 5471|      6|            }
 5472|     24|            else {
 5473|     24|                err = r.error();
 5474|     24|            }
 5475|     30|        }
 5476|       |
 5477|     26|        if (m_options & allow_text) {
  ------------------
  |  Branch (5477:13): [True: 14, False: 12]
  ------------------
 5478|     14|            auto stdloc = loc.get<std::locale>();
 5479|     14|            const auto& numpunct =
 5480|     14|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5481|     14|            const auto truename = numpunct.truename();
 5482|     14|            const auto falsename = numpunct.falsename();
 5483|       |
 5484|     14|            if (auto r =
  ------------------
  |  Branch (5484:22): [True: 0, False: 14]
  ------------------
 5485|     14|                    read_textual_custom(range, value, truename, falsename)) {
 5486|      0|                return *r;
 5487|      0|            }
 5488|     14|            else {
 5489|     14|                err = r.error();
 5490|     14|            }
 5491|     14|        }
 5492|       |
 5493|     26|        return unexpected(err);
 5494|     26|    }
_ZNK3scn2v44impl11bool_readerIwE19read_textual_customINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNSD_17basic_string_viewIwNSD_11char_traitsIwEEEESP_:
 5504|     14|    {
 5505|     14|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5506|     14|        const auto shorter = std::pair{
 5507|     14|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5507:13): [True: 14, False: 0]
  ------------------
 5508|     14|        const auto longer = std::pair{
 5509|     14|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5509:13): [True: 0, False: 14]
  ------------------
 5510|       |
 5511|     14|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5511:18): [True: 0, False: 14]
  ------------------
 5512|      0|            value = shorter.second;
 5513|      0|            return *r;
 5514|      0|        }
 5515|     14|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5515:18): [True: 0, False: 14]
  ------------------
 5516|      0|            value = longer.second;
 5517|      0|            return *r;
 5518|      0|        }
 5519|       |
 5520|     14|        return detail::unexpected_scan_error(
 5521|     14|            scan_error::invalid_scanned_value,
 5522|     14|            "Failed to read textual boolean: No match");
 5523|     14|    }
_ZN3scn2v44impl20read_matching_stringINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewINDTcl4implISD_EEE4typeENSB_11char_traitsISL_EEEE:
 2278|     28|{
 2279|     28|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3939|     28|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|     28|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|     28|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|     28|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 2, False: 26]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      2|    }                                                  \
  |  |  |  | 3938|     28|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|     26|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2280|     26|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2281|     26|                    .transform_error(make_eof_parse_error));
 2282|       |
 2283|     26|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2284|     26|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  986|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 26, False: 0]
  |  |  ------------------
  ------------------
 2285|     26|        return unexpected(parse_error::error);
 2286|     26|    }
 2287|      0|    return it;
 2288|     26|}
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIwEENS0_13scan_expectedIS9_EERT_:
 6226|  1.36k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  1.36k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  1.36k|            auto rd = make_reader<T, char_type>();
 6232|  1.36k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3929|  1.36k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  1.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 692, False: 676]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|    692|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|    692|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|    692|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|    692|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    692|    }
  ------------------
 6233|    676|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  1.36k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_wcharIwEESA_wEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6161|    676|    {
 6162|    676|        const bool need_skipped_width =
 6163|    676|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 254, False: 422]
  |  Branch (6163:33): [True: 236, False: 186]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|    676|        auto it = rng.begin();
 6167|    676|        std::ptrdiff_t prefix_width = 0;
 6168|    676|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 238, False: 438]
  ------------------
 6169|    238|            auto max_width_view = take_width(rng, specs.precision);
 6170|    238|            SCN_TRY(prefix_result,
  ------------------
  |  | 3939|    238|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    238|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    238|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    238|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 238]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|    238|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    238|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|    238|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|    238|            it = prefix_result.first.base();
 6173|    238|            prefix_width = prefix_result.second;
 6174|    238|        }
 6175|    438|        else {
 6176|    438|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3939|    438|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    438|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    438|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    438|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 438]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|    438|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    438|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|    438|            std::tie(it, prefix_width) = prefix_result;
 6178|    438|        }
 6179|    676|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|    676|        std::ptrdiff_t value_width = 0;
 6183|    676|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 238, False: 438]
  ------------------
 6184|    238|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 2, False: 236]
  ------------------
 6185|      2|                return detail::unexpected_scan_error(
 6186|      2|                    scan_error::invalid_fill,
 6187|      2|                    "Too many fill characters before value, "
 6188|      2|                    "precision exceeded before reading value");
 6189|      2|            }
 6190|       |
 6191|    236|            const auto initial_width = specs.precision - prefix_width;
 6192|    236|            auto max_width_view =
 6193|    236|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|    236|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3939|    236|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    236|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    236|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    236|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 34, False: 202]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     34|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     34|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     34|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     34|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     34|    }                                                  \
  |  |  |  | 3938|    236|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    202|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|    202|            it = w_it.base();
 6196|    202|            value_width = initial_width - w_it.count();
 6197|    202|        }
 6198|    438|        else {
 6199|    438|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3934|    438|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|    438|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|    438|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 40, False: 398]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|     40|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|     40|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|     40|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|     40|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|     40|    }                                                  \
  |  | 3938|    438|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|    438|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|    398|                                             specs, value, loc));
 6201|       |
 6202|    398|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 246, False: 152]
  ------------------
 6203|    246|                value_width = calculate_text_width(
 6204|    246|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|    246|                        .view());
 6206|    246|            }
 6207|    398|        }
 6208|       |
 6209|       |        // Read postfix
 6210|    600|        std::ptrdiff_t postfix_width = 0;
 6211|    600|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 600, False: 0]
  ------------------
 6212|    600|            SCN_TRY(postfix_result,
  ------------------
  |  | 3939|    600|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    600|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    600|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    600|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 600]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|    600|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    600|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|    600|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|    600|                                 rd.skip_ws_before_read(), prefix_width,
 6215|    600|                                 value_width));
 6216|    600|            std::tie(it, postfix_width) = postfix_result;
 6217|    600|        }
 6218|       |
 6219|    600|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3929|    600|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|    600|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 236, False: 364]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|    236|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|    236|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|    236|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|    236|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    236|    }
  ------------------
 6220|    600|            specs, prefix_width, value_width, postfix_width));
 6221|    364|        return it;
 6222|    600|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIdEENS0_13scan_expectedIS9_EERT_:
 6226|  1.43k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  1.43k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  1.43k|            auto rd = make_reader<T, char_type>();
 6232|  1.43k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3929|  1.43k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  1.43k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 684, False: 750]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|    684|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|    684|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|    684|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|    684|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    684|    }
  ------------------
 6233|    750|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  1.43k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6161|    750|    {
 6162|    750|        const bool need_skipped_width =
 6163|    750|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 262, False: 488]
  |  Branch (6163:33): [True: 248, False: 240]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|    750|        auto it = rng.begin();
 6167|    750|        std::ptrdiff_t prefix_width = 0;
 6168|    750|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 252, False: 498]
  ------------------
 6169|    252|            auto max_width_view = take_width(rng, specs.precision);
 6170|    252|            SCN_TRY(prefix_result,
  ------------------
  |  | 3939|    252|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    252|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    252|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    252|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 16, False: 236]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     16|    }                                                  \
  |  |  |  | 3938|    252|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    236|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|    236|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|    236|            it = prefix_result.first.base();
 6173|    236|            prefix_width = prefix_result.second;
 6174|    236|        }
 6175|    498|        else {
 6176|    498|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3939|    498|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    498|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    498|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    498|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 498]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|    498|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    498|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|    498|            std::tie(it, prefix_width) = prefix_result;
 6178|    498|        }
 6179|    734|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|    734|        std::ptrdiff_t value_width = 0;
 6183|    734|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 236, False: 498]
  ------------------
 6184|    236|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 4, False: 232]
  ------------------
 6185|      4|                return detail::unexpected_scan_error(
 6186|      4|                    scan_error::invalid_fill,
 6187|      4|                    "Too many fill characters before value, "
 6188|      4|                    "precision exceeded before reading value");
 6189|      4|            }
 6190|       |
 6191|    232|            const auto initial_width = specs.precision - prefix_width;
 6192|    232|            auto max_width_view =
 6193|    232|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|    232|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3939|    232|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    232|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    232|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    232|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 212, False: 20]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    212|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    212|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    212|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    212|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    212|    }                                                  \
  |  |  |  | 3938|    232|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|     20|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|     20|            it = w_it.base();
 6196|     20|            value_width = initial_width - w_it.count();
 6197|     20|        }
 6198|    498|        else {
 6199|    498|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3934|    498|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|    498|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|    498|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 418, False: 80]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|    418|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|    418|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|    418|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|    418|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|    418|    }                                                  \
  |  | 3938|    498|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|    498|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|     80|                                             specs, value, loc));
 6201|       |
 6202|     80|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 8, False: 72]
  ------------------
 6203|      8|                value_width = calculate_text_width(
 6204|      8|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      8|                        .view());
 6206|      8|            }
 6207|     80|        }
 6208|       |
 6209|       |        // Read postfix
 6210|    100|        std::ptrdiff_t postfix_width = 0;
 6211|    100|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 100, False: 0]
  ------------------
 6212|    100|            SCN_TRY(postfix_result,
  ------------------
  |  | 3939|    100|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    100|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    100|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    100|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 100]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|    100|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    100|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|    100|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|    100|                                 rd.skip_ws_before_read(), prefix_width,
 6215|    100|                                 value_width));
 6216|    100|            std::tie(it, postfix_width) = postfix_result;
 6217|    100|        }
 6218|       |
 6219|    100|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3929|    100|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|    100|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 4, False: 96]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      4|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      4|    }
  ------------------
 6220|    100|            specs, prefix_width, value_width, postfix_width));
 6221|     96|        return it;
 6222|    100|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIS9_EERT_:
 6226|  1.36k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  1.36k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  1.36k|            auto rd = make_reader<T, char_type>();
 6232|  1.36k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3929|  1.36k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  1.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 240, False: 1.12k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|    240|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|    240|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|    240|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|    240|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    240|    }
  ------------------
 6233|  1.12k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  1.36k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6161|  1.12k|    {
 6162|  1.12k|        const bool need_skipped_width =
 6163|  1.12k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 356, False: 772]
  |  Branch (6163:33): [True: 438, False: 334]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  1.12k|        auto it = rng.begin();
 6167|  1.12k|        std::ptrdiff_t prefix_width = 0;
 6168|  1.12k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 444, False: 684]
  ------------------
 6169|    444|            auto max_width_view = take_width(rng, specs.precision);
 6170|    444|            SCN_TRY(prefix_result,
  ------------------
  |  | 3939|    444|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    444|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    444|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    444|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 10, False: 434]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     10|    }                                                  \
  |  |  |  | 3938|    444|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    434|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|    434|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|    434|            it = prefix_result.first.base();
 6173|    434|            prefix_width = prefix_result.second;
 6174|    434|        }
 6175|    684|        else {
 6176|    684|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3939|    684|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    684|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    684|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    684|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 684]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|    684|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    684|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|    684|            std::tie(it, prefix_width) = prefix_result;
 6178|    684|        }
 6179|  1.11k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  1.11k|        std::ptrdiff_t value_width = 0;
 6183|  1.11k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 434, False: 684]
  ------------------
 6184|    434|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 6, False: 428]
  ------------------
 6185|      6|                return detail::unexpected_scan_error(
 6186|      6|                    scan_error::invalid_fill,
 6187|      6|                    "Too many fill characters before value, "
 6188|      6|                    "precision exceeded before reading value");
 6189|      6|            }
 6190|       |
 6191|    428|            const auto initial_width = specs.precision - prefix_width;
 6192|    428|            auto max_width_view =
 6193|    428|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|    428|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3939|    428|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    428|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    428|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    428|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 128, False: 300]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    128|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    128|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    128|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    128|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    128|    }                                                  \
  |  |  |  | 3938|    428|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    300|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|    300|            it = w_it.base();
 6196|    300|            value_width = initial_width - w_it.count();
 6197|    300|        }
 6198|    684|        else {
 6199|    684|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3934|    684|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|    684|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|    684|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 66, False: 618]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|     66|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|     66|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|     66|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|     66|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|     66|    }                                                  \
  |  | 3938|    684|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|    684|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|    618|                                             specs, value, loc));
 6201|       |
 6202|    618|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 340, False: 278]
  ------------------
 6203|    340|                value_width = calculate_text_width(
 6204|    340|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|    340|                        .view());
 6206|    340|            }
 6207|    618|        }
 6208|       |
 6209|       |        // Read postfix
 6210|    918|        std::ptrdiff_t postfix_width = 0;
 6211|    918|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 562, False: 356]
  ------------------
 6212|    562|            SCN_TRY(postfix_result,
  ------------------
  |  | 3939|    562|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    562|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    562|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    562|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 562]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|    562|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    562|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|    562|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|    562|                                 rd.skip_ws_before_read(), prefix_width,
 6215|    562|                                 value_width));
 6216|    562|            std::tie(it, postfix_width) = postfix_result;
 6217|    562|        }
 6218|       |
 6219|    918|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3929|    918|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|    918|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 80, False: 838]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|     80|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|     80|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|     80|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|     80|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|     80|    }
  ------------------
 6220|    918|            specs, prefix_width, value_width, postfix_width));
 6221|    838|        return it;
 6222|    918|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIS9_EERT_:
 6226|  1.36k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  1.36k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  1.36k|            auto rd = make_reader<T, char_type>();
 6232|  1.36k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3929|  1.36k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  1.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 240, False: 1.12k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|    240|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|    240|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|    240|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|    240|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    240|    }
  ------------------
 6233|  1.12k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  1.36k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6161|  1.12k|    {
 6162|  1.12k|        const bool need_skipped_width =
 6163|  1.12k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 356, False: 772]
  |  Branch (6163:33): [True: 438, False: 334]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  1.12k|        auto it = rng.begin();
 6167|  1.12k|        std::ptrdiff_t prefix_width = 0;
 6168|  1.12k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 444, False: 684]
  ------------------
 6169|    444|            auto max_width_view = take_width(rng, specs.precision);
 6170|    444|            SCN_TRY(prefix_result,
  ------------------
  |  | 3939|    444|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    444|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    444|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    444|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 10, False: 434]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     10|    }                                                  \
  |  |  |  | 3938|    444|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    434|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|    434|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|    434|            it = prefix_result.first.base();
 6173|    434|            prefix_width = prefix_result.second;
 6174|    434|        }
 6175|    684|        else {
 6176|    684|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3939|    684|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    684|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    684|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    684|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 684]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|    684|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    684|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|    684|            std::tie(it, prefix_width) = prefix_result;
 6178|    684|        }
 6179|  1.11k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  1.11k|        std::ptrdiff_t value_width = 0;
 6183|  1.11k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 434, False: 684]
  ------------------
 6184|    434|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 6, False: 428]
  ------------------
 6185|      6|                return detail::unexpected_scan_error(
 6186|      6|                    scan_error::invalid_fill,
 6187|      6|                    "Too many fill characters before value, "
 6188|      6|                    "precision exceeded before reading value");
 6189|      6|            }
 6190|       |
 6191|    428|            const auto initial_width = specs.precision - prefix_width;
 6192|    428|            auto max_width_view =
 6193|    428|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|    428|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3939|    428|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    428|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    428|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    428|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 128, False: 300]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    128|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    128|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    128|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    128|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    128|    }                                                  \
  |  |  |  | 3938|    428|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    300|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|    300|            it = w_it.base();
 6196|    300|            value_width = initial_width - w_it.count();
 6197|    300|        }
 6198|    684|        else {
 6199|    684|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3934|    684|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|    684|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|    684|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 66, False: 618]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|     66|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|     66|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|     66|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|     66|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|     66|    }                                                  \
  |  | 3938|    684|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|    684|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|    618|                                             specs, value, loc));
 6201|       |
 6202|    618|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 340, False: 278]
  ------------------
 6203|    340|                value_width = calculate_text_width(
 6204|    340|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|    340|                        .view());
 6206|    340|            }
 6207|    618|        }
 6208|       |
 6209|       |        // Read postfix
 6210|    918|        std::ptrdiff_t postfix_width = 0;
 6211|    918|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 562, False: 356]
  ------------------
 6212|    562|            SCN_TRY(postfix_result,
  ------------------
  |  | 3939|    562|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    562|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    562|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    562|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 562]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|    562|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    562|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|    562|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|    562|                                 rd.skip_ws_before_read(), prefix_width,
 6215|    562|                                 value_width));
 6216|    562|            std::tie(it, postfix_width) = postfix_result;
 6217|    562|        }
 6218|       |
 6219|    918|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3929|    918|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|    918|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 80, False: 838]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|     80|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|     80|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|     80|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|     80|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|     80|    }
  ------------------
 6220|    918|            specs, prefix_width, value_width, postfix_width));
 6221|    838|        return it;
 6222|    918|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIS9_EERT_:
 6226|  1.36k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  1.36k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  1.36k|            auto rd = make_reader<T, char_type>();
 6232|  1.36k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3929|  1.36k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  1.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 240, False: 1.12k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|    240|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|    240|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|    240|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|    240|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    240|    }
  ------------------
 6233|  1.12k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  1.36k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6161|  1.12k|    {
 6162|  1.12k|        const bool need_skipped_width =
 6163|  1.12k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 356, False: 772]
  |  Branch (6163:33): [True: 438, False: 334]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  1.12k|        auto it = rng.begin();
 6167|  1.12k|        std::ptrdiff_t prefix_width = 0;
 6168|  1.12k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 444, False: 684]
  ------------------
 6169|    444|            auto max_width_view = take_width(rng, specs.precision);
 6170|    444|            SCN_TRY(prefix_result,
  ------------------
  |  | 3939|    444|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    444|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    444|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    444|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 10, False: 434]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     10|    }                                                  \
  |  |  |  | 3938|    444|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    434|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|    434|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|    434|            it = prefix_result.first.base();
 6173|    434|            prefix_width = prefix_result.second;
 6174|    434|        }
 6175|    684|        else {
 6176|    684|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3939|    684|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    684|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    684|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    684|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 684]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|    684|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    684|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|    684|            std::tie(it, prefix_width) = prefix_result;
 6178|    684|        }
 6179|  1.11k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  1.11k|        std::ptrdiff_t value_width = 0;
 6183|  1.11k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 434, False: 684]
  ------------------
 6184|    434|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 6, False: 428]
  ------------------
 6185|      6|                return detail::unexpected_scan_error(
 6186|      6|                    scan_error::invalid_fill,
 6187|      6|                    "Too many fill characters before value, "
 6188|      6|                    "precision exceeded before reading value");
 6189|      6|            }
 6190|       |
 6191|    428|            const auto initial_width = specs.precision - prefix_width;
 6192|    428|            auto max_width_view =
 6193|    428|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|    428|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3939|    428|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    428|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    428|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    428|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 128, False: 300]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    128|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    128|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    128|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    128|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    128|    }                                                  \
  |  |  |  | 3938|    428|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    300|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|    300|            it = w_it.base();
 6196|    300|            value_width = initial_width - w_it.count();
 6197|    300|        }
 6198|    684|        else {
 6199|    684|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3934|    684|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|    684|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|    684|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 66, False: 618]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|     66|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|     66|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|     66|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|     66|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|     66|    }                                                  \
  |  | 3938|    684|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|    684|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|    618|                                             specs, value, loc));
 6201|       |
 6202|    618|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 340, False: 278]
  ------------------
 6203|    340|                value_width = calculate_text_width(
 6204|    340|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|    340|                        .view());
 6206|    340|            }
 6207|    618|        }
 6208|       |
 6209|       |        // Read postfix
 6210|    918|        std::ptrdiff_t postfix_width = 0;
 6211|    918|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 562, False: 356]
  ------------------
 6212|    562|            SCN_TRY(postfix_result,
  ------------------
  |  | 3939|    562|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    562|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    562|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    562|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 562]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|    562|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    562|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|    562|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|    562|                                 rd.skip_ws_before_read(), prefix_width,
 6215|    562|                                 value_width));
 6216|    562|            std::tie(it, postfix_width) = postfix_result;
 6217|    562|        }
 6218|       |
 6219|    918|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3929|    918|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|    918|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 80, False: 838]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|     80|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|     80|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|     80|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|     80|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|     80|    }
  ------------------
 6220|    918|            specs, prefix_width, value_width, postfix_width));
 6221|    838|        return it;
 6222|    918|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3542|    632|    {
 3543|    632|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3939|    632|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    632|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    632|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    632|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 632]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|    632|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    632|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|    632|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|       |        if constexpr (!std::is_signed_v<T>) {
 3547|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3548|       |                return detail::unexpected_scan_error(
 3549|       |                    scan_error::invalid_scanned_value,
 3550|       |                    "Unexpected '-' sign when parsing an "
 3551|       |                    "unsigned value");
 3552|       |            }
 3553|       |        }
 3554|       |
 3555|    632|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 632]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  1.26k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3939|    632|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    632|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    632|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    632|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 632]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|    632|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    632|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  1.26k|                parse_integer_digits_without_thsep(
 3562|  1.26k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  1.26k|                    prefix_result.parsed_base));
 3564|       |
 3565|  1.26k|        auto buf = make_contiguous_buffer(
 3566|  1.26k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  1.26k|        SCN_TRY(result_it,
  ------------------
  |  | 3939|    632|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    632|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    632|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    632|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 632, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    632|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    632|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    632|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    632|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    632|    }                                                  \
  |  |  |  | 3938|    632|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|      0|                                    prefix_result.parsed_base));
 3570|       |
 3571|      0|        return ranges::next(prefix_result.iterator,
 3572|      0|                            ranges::distance(buf.view().begin(), result_it));
 3573|  1.26k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3542|    632|    {
 3543|    632|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3939|    632|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    632|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    632|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    632|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 632]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|    632|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    632|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|    632|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|    632|        if constexpr (!std::is_signed_v<T>) {
 3547|    632|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3547:17): [True: 0, False: 632]
  ------------------
 3548|      0|                return detail::unexpected_scan_error(
 3549|      0|                    scan_error::invalid_scanned_value,
 3550|      0|                    "Unexpected '-' sign when parsing an "
 3551|      0|                    "unsigned value");
 3552|      0|            }
 3553|    632|        }
 3554|       |
 3555|    632|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 632]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  1.26k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3939|    632|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    632|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    632|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    632|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 632]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|    632|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    632|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  1.26k|                parse_integer_digits_without_thsep(
 3562|  1.26k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  1.26k|                    prefix_result.parsed_base));
 3564|       |
 3565|  1.26k|        auto buf = make_contiguous_buffer(
 3566|  1.26k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  1.26k|        SCN_TRY(result_it,
  ------------------
  |  | 3939|    632|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    632|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    632|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    632|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 632, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    632|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    632|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    632|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    632|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    632|    }                                                  \
  |  |  |  | 3938|    632|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|      0|                                    prefix_result.parsed_base));
 3570|       |
 3571|      0|        return ranges::next(prefix_result.iterator,
 3572|      0|                            ranges::distance(buf.view().begin(), result_it));
 3573|  1.26k|    }

LLVMFuzzerTestOneInput:
   68|  3.32k|{
   69|  3.32k|    scn::fuzz::run(data, size);
   70|  3.32k|    return 0;
   71|  3.32k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   51|  3.32k|{
   52|  3.32k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (52:9): [True: 0, False: 3.32k]
  |  Branch (52:35): [True: 0, False: 3.32k]
  ------------------
   53|      0|        return;
   54|      0|    }
   55|       |
   56|  3.32k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   57|       |
   58|  3.32k|    run_for_source(sv);
   59|  3.32k|    run_for_source(wsv_reinterpret);
   60|  3.32k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (60:9): [True: 3.32k, False: 0]
  ------------------
   61|  3.32k|        run_for_source(wsv_transcode);
   62|  3.32k|    }
   63|  3.32k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_114run_for_sourceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT_:
   36|  3.32k|{
   37|  3.32k|    using char_type = ranges::range_value_t<Source>;
   38|       |
   39|  3.32k|    run_for_type<char_type>(source);
   40|  3.32k|    run_for_type<int>(source);
   41|  3.32k|    run_for_type<unsigned>(source);
   42|  3.32k|    run_for_type<double>(source);
   43|  3.32k|    run_for_type<bool>(source);
   44|  3.32k|    run_for_type<void*>(source);
   45|  3.32k|    run_for_type<std::string>(source);
   46|  3.32k|    run_for_type<std::wstring>(source);
   47|  3.32k|    run_for_type<std::basic_string_view<char_type>>(source);
   48|  3.32k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIcNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  3.32k|{
   25|  3.32k|    {
   26|  3.32k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  3.32k|    }
   28|  3.32k|    {
   29|  3.32k|        auto _ =
   30|  3.32k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  3.32k|    }
   32|  3.32k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIiNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  3.32k|{
   25|  3.32k|    {
   26|  3.32k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  3.32k|    }
   28|  3.32k|    {
   29|  3.32k|        auto _ =
   30|  3.32k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  3.32k|    }
   32|  3.32k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIjNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  3.32k|{
   25|  3.32k|    {
   26|  3.32k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  3.32k|    }
   28|  3.32k|    {
   29|  3.32k|        auto _ =
   30|  3.32k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  3.32k|    }
   32|  3.32k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIdNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  3.32k|{
   25|  3.32k|    {
   26|  3.32k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  3.32k|    }
   28|  3.32k|    {
   29|  3.32k|        auto _ =
   30|  3.32k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  3.32k|    }
   32|  3.32k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIbNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  3.32k|{
   25|  3.32k|    {
   26|  3.32k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  3.32k|    }
   28|  3.32k|    {
   29|  3.32k|        auto _ =
   30|  3.32k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  3.32k|    }
   32|  3.32k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIPvNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEvRT0_:
   24|  3.32k|{
   25|  3.32k|    {
   26|  3.32k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  3.32k|    }
   28|  3.32k|    {
   29|  3.32k|        auto _ =
   30|  3.32k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  3.32k|    }
   32|  3.32k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_17basic_string_viewIcS6_EEEEvRT0_:
   24|  3.32k|{
   25|  3.32k|    {
   26|  3.32k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  3.32k|    }
   28|  3.32k|    {
   29|  3.32k|        auto _ =
   30|  3.32k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  3.32k|    }
   32|  3.32k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS3_17basic_string_viewIcNS5_IcEEEEEEvRT0_:
   24|  3.32k|{
   25|  3.32k|    {
   26|  3.32k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  3.32k|    }
   28|  3.32k|    {
   29|  3.32k|        auto _ =
   30|  3.32k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  3.32k|    }
   32|  3.32k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEES7_EEvRT0_:
   24|  3.32k|{
   25|  3.32k|    {
   26|  3.32k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  3.32k|    }
   28|  3.32k|    {
   29|  3.32k|        auto _ =
   30|  3.32k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  3.32k|    }
   32|  3.32k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_114run_for_sourceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT_:
   36|  6.65k|{
   37|  6.65k|    using char_type = ranges::range_value_t<Source>;
   38|       |
   39|  6.65k|    run_for_type<char_type>(source);
   40|  6.65k|    run_for_type<int>(source);
   41|  6.65k|    run_for_type<unsigned>(source);
   42|  6.65k|    run_for_type<double>(source);
   43|  6.65k|    run_for_type<bool>(source);
   44|  6.65k|    run_for_type<void*>(source);
   45|  6.65k|    run_for_type<std::string>(source);
   46|  6.65k|    run_for_type<std::wstring>(source);
   47|  6.65k|    run_for_type<std::basic_string_view<char_type>>(source);
   48|  6.65k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIwNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  6.65k|{
   25|  6.65k|    {
   26|  6.65k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  6.65k|    }
   28|  6.65k|    {
   29|  6.65k|        auto _ =
   30|  6.65k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  6.65k|    }
   32|  6.65k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIiNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  6.65k|{
   25|  6.65k|    {
   26|  6.65k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  6.65k|    }
   28|  6.65k|    {
   29|  6.65k|        auto _ =
   30|  6.65k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  6.65k|    }
   32|  6.65k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIjNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  6.65k|{
   25|  6.65k|    {
   26|  6.65k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  6.65k|    }
   28|  6.65k|    {
   29|  6.65k|        auto _ =
   30|  6.65k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  6.65k|    }
   32|  6.65k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIdNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  6.65k|{
   25|  6.65k|    {
   26|  6.65k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  6.65k|    }
   28|  6.65k|    {
   29|  6.65k|        auto _ =
   30|  6.65k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  6.65k|    }
   32|  6.65k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIbNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  6.65k|{
   25|  6.65k|    {
   26|  6.65k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  6.65k|    }
   28|  6.65k|    {
   29|  6.65k|        auto _ =
   30|  6.65k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  6.65k|    }
   32|  6.65k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIPvNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEvRT0_:
   24|  6.65k|{
   25|  6.65k|    {
   26|  6.65k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  6.65k|    }
   28|  6.65k|    {
   29|  6.65k|        auto _ =
   30|  6.65k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  6.65k|    }
   32|  6.65k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_17basic_string_viewIwNS5_IwEEEEEEvRT0_:
   24|  6.65k|{
   25|  6.65k|    {
   26|  6.65k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  6.65k|    }
   28|  6.65k|    {
   29|  6.65k|        auto _ =
   30|  6.65k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  6.65k|    }
   32|  6.65k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS3_17basic_string_viewIwS6_EEEEvRT0_:
   24|  6.65k|{
   25|  6.65k|    {
   26|  6.65k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  6.65k|    }
   28|  6.65k|    {
   29|  6.65k|        auto _ =
   30|  6.65k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  6.65k|    }
   32|  6.65k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEES7_EEvRT0_:
   24|  6.65k|{
   25|  6.65k|    {
   26|  6.65k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  6.65k|    }
   28|  6.65k|    {
   29|  6.65k|        auto _ =
   30|  6.65k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  6.65k|    }
   32|  6.65k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   52|  3.32k|{
   53|  3.32k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  | 1051|  3.32k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  3.32k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   54|       |
   55|       |    // narrow
   56|  3.32k|    string_buffer.resize(size);
   57|  3.32k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   58|  3.32k|    auto sv = std::string_view{string_buffer};
   59|       |
   60|       |    // wide, bitwise reinterpret
   61|  3.32k|    const auto wsv_reinterpret_size =
   62|  3.32k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (62:9): [True: 93, False: 3.23k]
  ------------------
   63|  3.32k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   64|  3.32k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   65|  3.32k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   66|       |
   67|       |    // wide, transcode to correct encoding (utf16 or utf32)
   68|  3.32k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   69|  3.32k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   70|       |
   71|  3.32k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   72|  3.32k|}

